uint64_t assignWithCopy for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  v6 = *(void *)(*(void *)(a3 + 16) - 8);
  v7 = v6 + 24;
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = (v8 + 17 + a1) & ~v8;
  v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  v11 = *(void *)(v7 + 40) + 7;
  v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  *v12 = *v13;
  v12[1] = v13[1];
  v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v14 = *v15;
  v14[1] = v15[1];
  *(void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t initializeWithTake for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 17 + a1) & ~v6;
  uint64_t v8 = (v6 + 17 + a2) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  v10 = (_OWORD *)((v9 + v7) & 0xFFFFFFFFFFFFFFF8);
  v11 = (_OWORD *)((v9 + v8) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v10 = *v11;
  v12 = (_OWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8);
  v13 = (_OWORD *)(((unint64_t)v11 + 23) & 0xFFFFFFFFFFFFFFF8);
  _OWORD *v12 = *v13;
  *(void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t assignWithTake for OrnamentModifierLegacy(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 17 + a1) & ~v8;
  uint64_t v10 = (v8 + 17 + a2) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24) + 7;
  v12 = (void *)((v11 + v9) & 0xFFFFFFFFFFFFFFF8);
  v13 = (void *)((v11 + v10) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v13;
  v12[1] = v13[1];
  v14 = (void *)(((unint64_t)v12 + 23) & 0xFFFFFFFFFFFFFFF8);
  v15 = (void *)(((unint64_t)v13 + 23) & 0xFFFFFFFFFFFFFFF8);
  void *v14 = *v15;
  v14[1] = v15[1];
  *(void *)(((unint64_t)v14 + 23) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v15 + 23) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OrnamentModifierLegacy(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 17) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C1F2E4);
      case 4:
        int v14 = *(_DWORD *)(a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *(_DWORD *)a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 17) & ~v6);
  }
  unint64_t v17 = *(void *)(a1 + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for OrnamentModifierLegacy(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 23) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            if ((v7 & 0x80000000) != 0)
            {
              unint64_t v18 = (unint64_t)&a1[v9 + 17] & ~v9;
              v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(v18);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              a1[16] = 0;
              *(void *)a1 = a2 ^ 0x80000000;
              *((void *)a1 + 1) = 0;
            }
            else
            {
              *((void *)a1 + 1) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
           + 23) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((*(_DWORD *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 17) & ~v9) + 7) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187C1F500);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for OrnamentModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 50) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    void *v3 = *(void *)a2;
    v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    uint64_t v9 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    size_t v10 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v9 = *v10;
    unint64_t v11 = ((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v13 = *(void *)v12;
    *(unsigned char *)(v11 + 8) = *(unsigned char *)(v12 + 8);
    *(void *)unint64_t v11 = v13;
    *(unsigned char *)(v11 + 9) = *(unsigned char *)(v12 + 9);
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))((v11 + v5 + 10) & ~v5, (v12 + v5 + 10) & ~v5);
  }
  return v3;
}

uint64_t destroy for OrnamentModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))(((((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 10) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

unint64_t initializeWithCopy for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  uint64_t v4 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  unint64_t v6 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v6 = v8;
  *(unsigned char *)(v6 + 9) = *(unsigned char *)(v7 + 9);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 16))((*(unsigned __int8 *)(v9 + 80) + 10 + v6) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

unint64_t assignWithCopy for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v4 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v4 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v5 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  unint64_t v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 9) = *(unsigned char *)(v8 + 9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 10 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

unint64_t initializeWithTake for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_OWORD *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  unint64_t v4 = (_OWORD *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (_OWORD *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v4 = *v5;
  unint64_t v6 = ((unint64_t)v4 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v8 = *(void *)v7;
  *(unsigned char *)(v6 + 8) = *(unsigned char *)(v7 + 8);
  *(void *)unint64_t v6 = v8;
  *(unsigned char *)(v6 + 9) = *(unsigned char *)(v7 + 9);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 32))((*(unsigned __int8 *)(v9 + 80) + 10 + v6) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), (*(unsigned __int8 *)(v9 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

unint64_t assignWithTake for OrnamentModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  *(void *)(v4 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(void *)(v4 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v5 = (void *)(((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v6 = (void *)(((a2 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  v5[1] = v6[1];
  unint64_t v7 = ((unint64_t)v5 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)v6 + 23) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  *(unsigned char *)(v7 + 8) = *(unsigned char *)(v8 + 8);
  *(void *)unint64_t v7 = v9;
  *(unsigned char *)(v7 + 9) = *(unsigned char *)(v8 + 9);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 10 + v7) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 10 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for OrnamentModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 > v7)
  {
    uint64_t v9 = ((v6 + 50) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
    char v10 = 8 * v9;
    if (v9 > 3) {
      goto LABEL_7;
    }
    unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v12))
    {
      int v11 = *(_DWORD *)(a1 + v9);
      if (!v11) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v12 >= 2)
    {
LABEL_7:
      int v11 = *(unsigned __int8 *)(a1 + v9);
      if (!*(unsigned char *)(a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *(unsigned __int16 *)a1;
            break;
          case 3:
            LODWORD(v9) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
  }
LABEL_22:
  unint64_t v14 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
  if (v5 > 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v14 + v6 + 10) & ~v6);
  }
  unsigned int v15 = *(unsigned __int8 *)(v14 + 9);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for OrnamentModifier(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 50) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero((void *)a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          *(unsigned char *)(a1 + 2) = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *(unsigned char *)a1 = v17;
        }
      }
    }
    else
    {
      bzero((void *)a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        *(unsigned char *)(a1 + v10) = v15;
        return;
      case 2:
        *(_WORD *)(a1 + v10) = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)(a1 + v10) = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      *(unsigned char *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)(a1 + v10) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187C1FEA4);
    case 4:
      *(_DWORD *)(a1 + v10) = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        unint64_t v18 = ((((a1 & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8;
        if (v7 > 0xFE)
        {
          v19 = *(void (**)(unint64_t))(v6 + 56);
          v19((v18 + v9 + 10) & ~v9);
        }
        else
        {
          *(unsigned char *)(v18 + 9) = a2 + 1;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for OrnamentAttachmentAnchor.Storage()
{
  return &type metadata for OrnamentAttachmentAnchor.Storage;
}

_UNKNOWN **base witness table accessor for ViewModifier in OrnamentModifier<A>()
{
  return &protocol witness table for OrnamentModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OrnamentModifierLegacy<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t OrnamentModifierLegacy.isPresented.getter()
{
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

uint64_t OrnamentModifierLegacy.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  double v6 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v4 + 16))((char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v2, a2, v6);
  unint64_t v7 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = *(_OWORD *)(a2 + 16);
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v8 + v7, (char *)v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), a2);
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
  type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v10 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>();
  v12[2] = WitnessTable;
  v12[3] = v10;
  swift_getWitnessTable();
  EnvironmentReader.init(_:)();
  v12[0] = v13;
  v12[1] = v14;
  type metadata accessor for EnvironmentReader();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  swift_release();
  uint64_t v13 = v15;
  uint64_t v14 = v16;
  static ViewBuilder.buildExpression<A>(_:)(&v13);
  return swift_release();
}

uint64_t closure #1 in OrnamentModifierLegacy.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  v23[1] = a5;
  uint64_t v9 = type metadata accessor for OrnamentModifierLegacy();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  double v12 = MEMORY[0x1F4188790](v9);
  uint64_t v14 = (char *)v23 - v13;
  uint64_t v16 = *a1;
  uint64_t v15 = a1[1];
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v23 - v13, a2, v9, v12);
  unint64_t v17 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  (*(void (**)(unint64_t, char *, uint64_t))(v10 + 32))(v18 + v17, v14, v9);
  v19 = (void *)(v18 + ((v11 + v17 + 7) & 0xFFFFFFFFFFFFFFF8));
  void *v19 = v16;
  v19[1] = v15;
  swift_retain();
  swift_retain();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.transformPreference<A>(_:_:)();
  swift_release();
  v24[0] = v25;
  v24[1] = v26;
  type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
  type metadata accessor for ModifiedContent();
  unint64_t v21 = lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>();
  v23[2] = WitnessTable;
  v23[3] = v21;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v24);
  swift_release();
  uint64_t v25 = v27;
  uint64_t v26 = v28;
  static ViewBuilder.buildExpression<A>(_:)(&v25);
  return swift_release();
}

uint64_t closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (int *)type metadata accessor for OrnamentModifierLegacy();
  uint64_t result = OrnamentModifierLegacy.isPresented.getter();
  if (result)
  {
    uint64_t v28 = Namespace.wrappedValue.getter();
    (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a2 + v15[9], a5);
    uint64_t v27 = AnyView.init<A>(_:)();
    uint64_t v26 = Namespace.wrappedValue.getter();
    uint64_t v17 = v15[11];
    uint64_t v18 = (uint64_t *)(a2 + v15[10]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    uint64_t v21 = *(void *)(a2 + v17);
    uint64_t v22 = *(void *)(a2 + v17 + 8);
    v23 = implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(a2, a5, a6);
    v30[0] = v27;
    v30[1] = v26;
    char v31 = 1;
    uint64_t v32 = v19;
    uint64_t v33 = v20;
    uint64_t v34 = v21;
    uint64_t v35 = v22;
    char v36 = 0;
    uint64_t v37 = 0;
    __int16 v38 = 0;
    uint64_t v39 = a3;
    uint64_t v40 = a4;
    v41 = v23;
    uint64_t v42 = v24;
    uint64_t v43 = 0;
    swift_retain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v29 = *a1;
    *a1 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v30, v28, isUniquelyReferenced_nonNull_native);
    *a1 = v29;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t (*implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for OrnamentModifierLegacy();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance OrnamentModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance OrnamentPresentation.Key@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static OrnamentPresentation.Key.defaultValue;

  return swift_bridgeObjectRetain();
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[2];
  char v4 = *((unsigned char *)a1 + 24);
  char v5 = *((unsigned char *)a1 + 64);
  uint64_t v6 = a1[9];
  char v7 = *((unsigned char *)a1 + 80);
  char v8 = *((unsigned char *)a1 + 81);
  uint64_t v9 = a1[11];
  uint64_t v10 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v12 = a1[14];
  uint64_t v13 = a1[15];
  *(void *)(a2 + 8) = a1[1];
  *(void *)(a2 + 16) = v3;
  *(unsigned char *)(a2 + 24) = v4;
  long long v14 = *((_OWORD *)a1 + 3);
  *(_OWORD *)(a2 + 32) = *((_OWORD *)a1 + 2);
  *(_OWORD *)(a2 + 48) = v14;
  *(unsigned char *)(a2 + 64) = v5;
  *(void *)(a2 + 72) = v6;
  *(unsigned char *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 81) = v8;
  *(void *)(a2 + 88) = v9;
  *(void *)(a2 + 96) = v10;
  *(void *)(a2 + 104) = v11;
  *(void *)(a2 + 112) = v12;
  *(void *)(a2 + 120) = v13;
  *(void *)a2 = v2;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();

  return swift_retain();
}

uint64_t partial apply for closure #1 in OrnamentModifierLegacy.body(content:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for OrnamentModifierLegacy() - 8);
  uint64_t v8 = v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in OrnamentModifierLegacy.body(content:)(a1, v8, v5, v6, a2);
}

void type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>()
{
  if (!lazy cache variable for type metadata for _PreferenceTransformModifier<OrnamentPresentation.Key>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<OrnamentPresentation.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for _PreferenceTransformModifier<OrnamentPresentation.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<OrnamentPresentation.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t sub_187C20DFC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for OrnamentModifierLegacy() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[11], v1);
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(uint64_t *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v5 = *(void *)(type metadata accessor for OrnamentModifierLegacy() - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = v1 + v6;
  uint64_t v8 = (uint64_t *)(v1 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];

  return closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)(a1, v7, v9, v10, v3, v4);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in closure #1 in closure #1 in OrnamentModifierLegacy.body(content:)()
{
  return SheetPresentationModifier.isPresented.setter();
}

uint64_t destroy for OrnamentPresentation()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_WORD *)(a1 + 72) = *(_WORD *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v4 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v4;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  uint64_t v6 = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 64) = v6;
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_retain();
  swift_release();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v7;
  swift_retain();
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for OrnamentPresentation(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  swift_release();
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for OrnamentPresentation()
{
  return &type metadata for OrnamentPresentation;
}

ValueMetadata *type metadata accessor for OrnamentPresentation.Key()
{
  return &type metadata for OrnamentPresentation.Key;
}

uint64_t sub_187C21304()
{
  return swift_getWitnessTable();
}

uint64_t specialized static OrnamentPresentation.Key.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of (Namespace.ID, OrnamentPresentation)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (Namespace.ID, OrnamentPresentation)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t getEnumTagSinglePayload for OrnamentPosition(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (*(unsigned char *)(a1 + 32) & 0x7E | (*(unsigned __int8 *)(a1 + 32) >> 7)) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for OrnamentPosition(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)unint64_t result = a2 - 127;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2)
    {
      *(_OWORD *)unint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(unsigned char *)(result + 32) = 2 * (((-a2 >> 1) & 0x3F) - ((_BYTE)a2 << 6));
    }
  }
  return result;
}

uint64_t destructiveInjectEnumTag for OrnamentPosition(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = *(unsigned char *)(result + 32) & 1 | (a2 << 7);
  return result;
}

ValueMetadata *type metadata accessor for OrnamentPosition()
{
  return &type metadata for OrnamentPosition;
}

ValueMetadata *type metadata accessor for NavigationAuthority.SeedInputs()
{
  return &type metadata for NavigationAuthority.SeedInputs;
}

uint64_t specialized static PropertyKey<>.valuesEqual(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  if (a2 == 1)
  {
    if (a4 == 1) {
      return v4 & 1;
    }
  }
  else
  {
    v10[0] = a1;
    v10[1] = a2;
    if (a4 != 1)
    {
      v9[0] = a3;
      v9[1] = a4;
      swift_retain_n();
      LOBYTE(v4) = MEMORY[0x18C10D6E0](v10, v9);
      swift_release();
      outlined consume of Text.LineStyle?(a1, a2);
      return v4 & 1;
    }
    swift_retain();
  }
  outlined copy of Text.LineStyle?(a3, v4);
  outlined consume of Text.LineStyle?(a1, a2);
  outlined consume of Text.LineStyle?(a3, v4);
  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.ListKeyViewInputKey()
{
  type metadata accessor for _GraphValue<StackDepthModifier>(0, &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey, MEMORY[0x1E4FBB718]);

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static GraphInput.tryToReuse(_:by:indirectMap:testOnly:) in conformance NavigationAuthority.DepthKey(unsigned int *a1, unsigned int *a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F40FCF98](*a2, a3, a4, *a1, MEMORY[0x1E4FBB550]);
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance NavigationAuthority.DepthKey@<X0>(_DWORD *a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F4E778];
  type metadata accessor for _GraphValue<StackDepthModifier>(0, &lazy cache variable for type metadata for External<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<Int> and conformance External<A>(&lazy protocol witness table cache variable for type External<Int> and conformance External<A>, &lazy cache variable for type metadata for External<Int>, v2);
  uint64_t result = Attribute.init<A>(body:value:flags:update:)();
  *a1 = result;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.ListSelectionCanonicalIDKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static PropertyKey<>.valuesEqual(_:_:)(*a1, a1[1], *a2, a2[1]);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance StackDepthModifier()
{
  return _GraphInputs.subscript.setter();
}

_UNKNOWN **base witness table accessor for ViewModifier in StackDepthModifier()
{
  return &protocol witness table for StackDepthModifier;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance StackDepthModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewModifier<>._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

void protocol witness for ViewModifier.body(content:) in conformance StackDepthModifier()
{
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ClearNavigationContextModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  int v7 = *((_DWORD *)a2 + 16);
  uint64_t v8 = a2[9];
  char v9 = *((unsigned char *)a2 + 80);
  uint64_t v21 = *a2;
  int v22 = v4;
  uint64_t v23 = v5;
  long long v24 = *(_OWORD *)(a2 + 3);
  uint64_t v25 = v6;
  long long v26 = *((_OWORD *)a2 + 3);
  int v27 = v7;
  uint64_t v28 = v8;
  char v29 = v9;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  specialized static ClearNavigationContextModifier._makeInputs(modifier:inputs:)();
  uint64_t v12 = v21;
  int v13 = v22;
  uint64_t v14 = v5;
  long long v15 = v24;
  uint64_t v16 = v6;
  long long v17 = v26;
  int v18 = v27;
  uint64_t v19 = v28;
  char v20 = v29;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v10, &v12);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ClearNavigationContextModifier()
{
}

double protocol witness for Rule.value.getter in conformance EnsureNavigationStateSeeds@<D0>(double *a1@<X8>)
{
  Rule.withObservation<A>(do:)();
  double result = v3;
  *a1 = v3;
  return result;
}

uint64_t lazy protocol witness table accessor for type External<Int> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _GraphValue<StackDepthModifier>(255, a2, MEMORY[0x1E4FBB550], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnsureNavigationStateSeeds()
{
  return &type metadata for EnsureNavigationStateSeeds;
}

ValueMetadata *type metadata accessor for NavigationAuthority.StackKeyViewInputKey()
{
  return &type metadata for NavigationAuthority.StackKeyViewInputKey;
}

ValueMetadata *type metadata accessor for NavigationAuthority.ViewInputKey()
{
  return &type metadata for NavigationAuthority.ViewInputKey;
}

ValueMetadata *type metadata accessor for NavigationAuthority.DepthKey()
{
  return &type metadata for NavigationAuthority.DepthKey;
}

ValueMetadata *type metadata accessor for NavigationAuthority.ListKeyViewInputKey()
{
  return &type metadata for NavigationAuthority.ListKeyViewInputKey;
}

uint64_t sub_187C21E98()
{
  return EnvironmentValues.navigationSelectionSeed.setter();
}

ValueMetadata *type metadata accessor for NavigationAuthority.ListSelectionCanonicalIDKey()
{
  return &type metadata for NavigationAuthority.ListSelectionCanonicalIDKey;
}

_UNKNOWN **base witness table accessor for ViewModifier in ClearNavigationContextModifier()
{
  return &protocol witness table for ClearNavigationContextModifier;
}

uint64_t View.selectionMenu<A>(content:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2);
}

void protocol witness for TabContent.body.getter in conformance <> TabForEach<A, B, C, D>()
{
}

void PrimitiveTabContent.body.getter()
{
}

uint64_t sub_187C22008()
{
  double v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v2, v1, v0);
}

void protocol witness for TabContent.body.getter in conformance <> AuxiliaryContent<A, B>()
{
}

{
  swift_getWitnessTable();
  PrimitiveTabContent.body.getter();
}

void protocol witness for TabContent.body.getter in conformance <> TabGroup<A, B, C, D>()
{
}

{
  swift_getWitnessTable();
  PrimitiveTabContent.body.getter();
}

uint64_t TabContent<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v7 + 16))(v6, v4);
  return NestedDynamicProperties.init(wrappedValue:)((uint64_t)v6, a1, a2);
}

uint64_t _TabContentBodyAdaptor.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for NestedDynamicProperties();
  double v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, v2, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v8, v4);
}

uint64_t _TabContentBodyAdaptor.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v21 = *(void *)(a1 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v23 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  double v6 = (char *)&v20 - v5;
  uint64_t v22 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v11 = swift_getAssociatedTypeWitness();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v20 - v16;
  _TabContentBodyAdaptor.content.getter(a1, (uint64_t)v9);
  (*(void (**)(uint64_t))(v21 + 64))(v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v3);
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 56))(AssociatedTypeWitness, AssociatedConformanceWitness);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v6, AssociatedTypeWitness);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  int v18 = *(void (**)(char *, uint64_t))(v12 + 8);
  v18(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v18)(v17, v11);
}

uint64_t TabContentBuilder.Content.content.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for NestedDynamicProperties();
  double v6 = MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v11 - v7;
  (*(void (**)(char *, uint64_t, double))(v9 + 16))((char *)&v11 - v7, v2, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(void *)(v4 - 8) + 32))(a2, v8, v4);
}

uint64_t TabContentBuilder.Content.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](a1);
  double v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v10 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v18 - v14;
  TabContentBuilder.Content.content.getter(a1, (uint64_t)v6);
  (*(void (**)(uint64_t, uint64_t))(v8 + 56))(v3, v8);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v10 + 8);
  v16(v12, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v16)(v15, AssociatedTypeWitness);
}

uint64_t _TupleTabContent.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for TupleView();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v11);
  TupleView.init(_:)();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a3, v13, v9);
}

uint64_t sub_187C22DD4()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> _ConditionalContent<A, B>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return _ConditionalContent<>._identifiedView.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), a3);
}

void protocol witness for TabContent.body.getter in conformance <> _ConditionalContent<A, B>()
{
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <A> A?@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Optional<A>._identifiedView.getter(a1, *(void *)(a2 - 8), a3);
}

void protocol witness for TabContent.body.getter in conformance <A> A?()
{
}

uint64_t ForEach<>.init<A>(_:id:liftedContent:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return ForEach<>.init<A>(_:id:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8);
}

{
  uint64_t v11;
  double v12;
  uint64_t v13;
  uint64_t v14;
  void v16[4];

  v16[1] = a6;
  v16[2] = a8;
  double v11 = *(void *)(a5 - 8);
  uint64_t v12 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v11 + 16))((char *)v16 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v14, v12);
  v16[3] = a2;
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(a1, a5);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> ForEach<A, B, C>(void *a1, uint64_t a2)
{
  return ForEach<>._identifiedView.getter(a1, *(void *)(a2 - 8));
}

void protocol witness for TabContent.body.getter in conformance <> ForEach<A, B, C>()
{
}

uint64_t ForEach<>.init<A>(_:liftedContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

{
  uint64_t v17;
  double v18;
  uint64_t v19;
  void v21[14];

  v21[2] = a2;
  v21[3] = a3;
  v21[0] = a1;
  v21[1] = a9;
  long long v17 = *(void *)(a4 - 8);
  int v18 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v17 + 16))((char *)v21 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0), v18);
  v21[4] = a4;
  v21[5] = a5;
  v21[6] = a6;
  v21[7] = a7;
  v21[8] = a8;
  v21[9] = a10;
  v21[10] = a11;
  v21[11] = a12;
  v21[13] = swift_getKeyPath();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  ForEach.init(_:idGenerator:content:)();
  return (*(uint64_t (**)(void, uint64_t))(v17 + 8))(v21[0], a4);
}

uint64_t ForEach<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

double ForEach<>.init<A>(_:liftedContent:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  *(void *)&double result = ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7).n128_u64[0];
  return result;
}

double ForEach<>.init<A>(_:content:)@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  *(void *)&double result = ForEach<>.init<A>(_:liftedContent:)(a1, a2, a3, a4, a5, a6, a7).n128_u64[0];
  return result;
}

__n128 ForEach<>.init<A>(_:liftedContent:)@<Q0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v14 = (void *)swift_allocObject();
  v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  type metadata accessor for Range<Int>();
  lazy protocol witness table accessor for type Range<Int> and conformance <> Range<A>();
  ForEach.init(_:idGenerator:content:)();
  __n128 result = v17;
  *(_OWORD *)a7 = v16;
  *(__n128 *)(a7 + 16) = v17;
  *(_OWORD *)(a7 + 32) = v18;
  *(void *)(a7 + 48) = v19;
  return result;
}

uint64_t sub_187C23AF8()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <A> Group<A>(uint64_t a1, uint64_t a2)
{
  return Group<A>._identifiedView.getter(a1, *(void *)(a2 - 8));
}

void protocol witness for TabContent.body.getter in conformance <A> Group<A>()
{
}

uint64_t _TupleTabContent._identifiedView.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for TupleView();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16);

  return v4(a1, v1, v3);
}

void _TupleTabContent.body.getter()
{
}

uint64_t sub_187C23C00()
{
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16);
  return v3(v2, v1, v0);
}

void protocol witness for TabContent.body.getter in conformance AnyTabContent<A>()
{
  swift_getWitnessTable();

  PrimitiveTabContent.body.getter();
}

void protocol witness for TabContent.body.getter in conformance <> ModifiedTabContent<A, B>()
{
}

void protocol witness for TabContent.body.getter in conformance <> SwipeActionTabs<A, B>()
{
}

void protocol witness for TabContent.body.getter in conformance <> ContextMenuTabs<A, B>()
{
}

void protocol witness for TabContent.body.getter in conformance <> TabSection<A, B, C, D>()
{
}

void specialized TabContent.bodyError()()
{
  _StringGuts.grow(_:)(31);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._object = (void *)0x800000018832C960;
  v1._countAndFlagsBits = 0xD000000000000015;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t partial apply for closure #1 in Optional<A>._identifiedView.getter()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 56))(*(void *)(v0 + 16));
}

uint64_t sub_187C23EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 + a2 - 8) + 56))(*(void *)(a3 + a2 - 32));
}

uint64_t sub_187C23F38()
{
  return 48;
}

__n128 sub_187C23F44(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 32) = v3;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_187C23F58()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187C23F94()
{
  return 56;
}

__n128 sub_187C23FA0(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *(void *)(a2 + 48) = *(void *)(a1 + 48);
  *(_OWORD *)(a2 + 16) = v3;
  *(_OWORD *)(a2 + 32) = v4;
  *(__n128 *)a2 = result;
  return result;
}

uint64_t sub_187C23FC0()
{
  return 64;
}

__n128 sub_187C23FCC(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 48) = v4;
  *(__n128 *)a2 = result;
  *(_OWORD *)(a2 + 16) = v3;
  return result;
}

uint64_t sub_187C23FE0()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for View.Body : View in _TabContentBodyAdaptor<A>()
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();

  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for View.Body : View in TabContentBuilder<A>.Content<A1>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> _ConditionalContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> _ConditionalContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> _ConditionalContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <A> A?()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <A> A?()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> ForEach<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.TabValue : Hashable in <> ForEach<A, B, C>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> ForEach<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <A> Group<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <A> Group<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for _TupleTabContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in _TupleTabContent<A, B>()
{
  return swift_getWitnessTable();
}

uint64_t default associated conformance accessor for TabContent.TabContent._IdentifiedView: View()
{
  return swift_getWitnessTable();
}

uint64_t dispatch thunk of TabContent._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t dispatch thunk of TabContent.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 64))();
}

uint64_t getEnumTagSinglePayload for _TabContentBodyAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _TabContentBodyAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C247E0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for _TabContentBodyAdaptor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TabContentBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TabContentBuilder.Content()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for TabContentBuilder.Content(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TabContentBuilder.Content(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C24BCCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for _TupleTabContent()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187C24C0C()
{
  swift_getAssociatedTypeWitness();

  return swift_getAssociatedConformanceWitness();
}

void static DocumentUtils.contentType(of:)(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x1E4F27400], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v59 = (uint64_t)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  BOOL v9 = (char *)&v51 - v8;
  type metadata accessor for URLResourceValues?(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], v4);
  MEMORY[0x1F4188790](v10 - 8);
  v60 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unsigned int v14 = (char *)&v51 - v13;
  uint64_t v15 = type metadata accessor for UTType();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  v54 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v51 - v19;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v51 - v22;
  uint64_t v24 = URL.pathExtension.getter();
  unint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = HIBYTE(v26) & 0xF;
  if ((v26 & 0x2000000000000000) == 0) {
    uint64_t v27 = v24 & 0xFFFFFFFFFFFFLL;
  }
  if (!v27)
  {
LABEL_15:
    if (!URL.startAccessingSecurityScopedResource()())
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 1, 1, v15);
      return;
    }
    type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NSURLResourceKey>, (uint64_t (*)(uint64_t))type metadata accessor for NSURLResourceKey, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    uint64_t v42 = (void *)*MEMORY[0x1E4F1C538];
    *(void *)(inited + 32) = *MEMORY[0x1E4F1C538];
    id v43 = v42;
    specialized Set.init(_nonEmptyArrayLiteral:)(inited);
    swift_setDeallocating();
    type metadata accessor for NSURLResourceKey(0);
    swift_arrayDestroy();
    URL.resourceValues(forKeys:)();
    swift_bridgeObjectRelease();
    uint64_t v44 = type metadata accessor for URLResourceValues();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56))(v9, 0, 1, v44);
    uint64_t v46 = v59;
    uint64_t v45 = (uint64_t)v60;
    outlined init with copy of URLResourceValues?((uint64_t)v9, v59);
    type metadata accessor for URLResourceValues();
    uint64_t v47 = *(void *)(v44 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v47 + 48))(v46, 1, v44) == 1)
    {
      _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0(v46, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x1E4F27400]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56))(v45, 1, 1, v15);
    }
    else
    {
      URLResourceValues.contentType.getter();
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v46, v44);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v45, 1, v15) != 1)
      {
        _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x1E4F27400]);
        v49 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 32);
        v50 = v54;
        v49(v54, v45, v15);
        v49(a2, (uint64_t)v50, v15);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(a2, 0, 1, v15);
        goto LABEL_25;
      }
    }
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0(v45, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
    _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0((uint64_t)v9, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x1E4F27400]);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(a2, 1, 1, v15);
LABEL_25:
    URL.stopAccessingSecurityScopedResource()();
    return;
  }
  v57 = v23;
  v58 = a2;
  v53 = v9;
  uint64_t v63 = v15;
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UTType>, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBBE00]);
  uint64_t v28 = *(void *)(v16 + 72);
  uint64_t v64 = v16;
  unint64_t v29 = (*(unsigned __int8 *)(v16 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80);
  uint64_t v30 = swift_allocObject();
  *(_OWORD *)(v30 + 16) = xmmword_18834BB70;
  static UTType.data.getter();
  unint64_t v65 = v30 + v29;
  unint64_t v31 = v30 + v29 + v28;
  static UTType.package.getter();
  uint64_t v32 = *(void *)(v30 + 16);
  if (v32)
  {
    unint64_t v56 = v31;
    uint64_t v61 = v32;
    uint64_t v62 = a1;
    uint64_t v33 = v64;
    uint64_t v34 = (void (**)(char *, char *, uint64_t))(v64 + 32);
    v52 = (void (**)(char *, uint64_t))(v64 + 8);
    URL.pathExtension.getter();
    uint64_t v15 = v63;
    v55 = *(void (**)(char *, unint64_t, uint64_t))(v33 + 16);
    v55(v20, v65, v63);
    UTType.init(filenameExtension:conformingTo:)();
    uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48);
    if (v35(v14, 1, v15) == 1)
    {
      _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
    }
    else
    {
      char v36 = *v34;
      uint64_t v37 = v57;
      (*v34)(v57, v14, v15);
      if ((UTType.isDynamic.getter() & 1) == 0)
      {
        a2 = v58;
        goto LABEL_23;
      }
      (*v52)(v37, v15);
    }
    unint64_t v38 = v56;
    if (*(void *)(v30 + 16) >= 2uLL)
    {
      uint64_t v61 = *(void *)(v30 + 16);
      URL.pathExtension.getter();
      unint64_t v39 = v38;
      uint64_t v15 = v63;
      v55(v20, v39, v63);
      UTType.init(filenameExtension:conformingTo:)();
      if (v35(v14, 1, v15) == 1)
      {
        _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0((uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
        a2 = v58;
LABEL_14:
        uint64_t v16 = v64;
        swift_setDeallocating();
        swift_arrayDestroy();
        swift_deallocClassInstance();
        BOOL v9 = v53;
        goto LABEL_15;
      }
      char v36 = *v34;
      uint64_t v37 = v57;
      (*v34)(v57, v14, v15);
      char v40 = UTType.isDynamic.getter();
      a2 = v58;
      if (v40)
      {
        (*v52)(v37, v15);
        goto LABEL_14;
      }
LABEL_23:
      uint64_t v48 = v64;
      swift_setDeallocating();
      swift_arrayDestroy();
      swift_deallocClassInstance();
      v36(a2, v37, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v48 + 56))(a2, 0, 1, v15);
      return;
    }
  }
  __break(1u);
}

id specialized static DocumentUtils.serializationFailed.getter()
{
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v13._countAndFlagsBits = 0xD00000000000007DLL;
  v13._object = (void *)0x8000000188334BE0;
  v2._object = (void *)0x8000000188334BB0;
  v2._countAndFlagsBits = 0xD00000000000002ALL;
  v3.value._countAndFlagsBits = 0x746E656D75636F44;
  v3.value._object = (void *)0xE900000000000073;
  v4._countAndFlagsBits = 0xD00000000000002ALL;
  v4._object = (void *)0x8000000188334BB0;
  Swift::String v5 = NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v13);

  type metadata accessor for URLResourceValues?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v7;
  *(void *)(inited + 72) = MEMORY[0x1E4FBB1A0];
  *(Swift::String *)(inited + 48) = v5;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v8 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  BOOL v9 = (void *)MEMORY[0x18C115780](0xD00000000000001ALL, 0x8000000188334C60);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v11 = objc_msgSend(v8, sel_initWithDomain_code_userInfo_, v9, 101, isa);

  return v11;
}

id specialized static DocumentUtils.contentTypeNotRegisteredError()()
{
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  id v1 = objc_msgSend(self, sel_bundleForClass_, ObjCClassFromMetadata);
  v19._countAndFlagsBits = 0xD000000000000068;
  v19._object = (void *)0x8000000188334CC0;
  v2._object = (void *)0x8000000188334C80;
  v2._countAndFlagsBits = 0xD000000000000030;
  v3.value._countAndFlagsBits = 0x746E656D75636F44;
  v3.value._object = (void *)0xE900000000000073;
  v4._countAndFlagsBits = 0xD000000000000030;
  v4._object = (void *)0x8000000188334C80;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v2, v3, (NSBundle)v1, v4, v19);

  Swift::String v5 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBE00];
  type metadata accessor for URLResourceValues?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CVarArg>, (uint64_t (*)(uint64_t))type metadata accessor for CVarArg, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  Swift::String v7 = currentAppName()();
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  *(Swift::String *)(v6 + 32) = v7;
  uint64_t v9 = String.init(format:_:)();
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  type metadata accessor for URLResourceValues?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(String, Any)>, (uint64_t (*)(uint64_t))type metadata accessor for (String, Any), v5);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)();
  *(void *)(inited + 40) = v13;
  *(void *)(inited + 72) = v8;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = v11;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  id v14 = objc_allocWithZone(MEMORY[0x1E4F28C58]);
  uint64_t v15 = (void *)MEMORY[0x18C115780](0xD00000000000001ALL, 0x8000000188334C60);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v17 = objc_msgSend(v14, sel_initWithDomain_code_userInfo_, v15, 100, isa);

  return v17;
}

uint64_t outlined init with copy of URLResourceValues?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for URLResourceValues?(0, &lazy cache variable for type metadata for URLResourceValues?, MEMORY[0x1E4F27400], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t _s22UniformTypeIdentifiers6UTTypeVSgWOhTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  type metadata accessor for URLResourceValues?(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for URLResourceValues?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata completion function for ItemNavigationLinkModifier()
{
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ItemNavigationLinkModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  Swift::String_optional v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7;
  unint64_t v9 = v7 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = v7 + 8;
  uint64_t v11 = v7 + 16;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v12 = *(void *)(v5 + 64);
  }
  else {
    size_t v12 = *(void *)(v5 + 64) + 1;
  }
  unint64_t v13 = ((v7 + 16) & ~(unint64_t)v7) + v12 + 7;
  unint64_t v14 = ((v13 + (v9 & (v7 + 8))) & 0xFFFFFFFFFFFFFFF8) + 16;
  int v15 = v7 & 0x100000;
  if (v8 > 7 || v15 != 0 || v14 > 0x18)
  {
    uint64_t v18 = *a2;
    uint64_t *v3 = *a2;
    Swift::String_optional v3 = (uint64_t *)(v18 + (v9 & v11));
  }
  else
  {
    *a1 = *a2;
    unint64_t v29 = (void *)(v9 & ((unint64_t)a1 + 15));
    uint64_t v30 = (void *)(v9 & ((unint64_t)a2 + 15));
    *unint64_t v29 = *v30;
    uint64_t v19 = ~v8;
    uint64_t v20 = (void *)(((unint64_t)v29 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v20 = *v21;
    uint64_t v22 = (void *)(((unint64_t)v20 + v10) & v19);
    uint64_t v23 = (const void *)(((unint64_t)v21 + v10) & v19);
    uint64_t v24 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
    swift_retain();
    swift_retain();
    if (v24(v23, 1, v4))
    {
      memcpy(v22, v23, v12);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v22, v23, v4);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v22, 0, 1, v4);
    }
    unint64_t v25 = (void *)(((unint64_t)v30 + v13) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = v25[1];
    uint64_t v27 = (void *)(((unint64_t)v29 + v13) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v27 = *v25;
    v27[1] = v26;
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ItemNavigationLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (a1 + (v4 | 7) + 8) & ~(v4 | 7);
  swift_release();
  swift_release();
  unint64_t v6 = (v4 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8) + 8) & ~v4;
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v6, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v6, v2);
  }

  return swift_release();
}

void *initializeWithCopy for ItemNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = ((unint64_t)a1 + v8) & ~(v7 | 7);
  uint64_t v27 = ((unint64_t)a2 + v8) & ~(v7 | 7);
  *(void *)uint64_t v9 = *(void *)v27;
  uint64_t v10 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v11 = (void *)((v27 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v10 = *v11;
  size_t v12 = (void *)(((unint64_t)v10 + v7 + 8) & ~v7);
  unint64_t v13 = (const void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  unint64_t v14 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48);
  swift_retain();
  swift_retain();
  if (v14(v13, 1, v4))
  {
    int v15 = *(_DWORD *)(v6 + 84);
    uint64_t v16 = *(void *)(v6 + 64);
    if (v15) {
      size_t v17 = *(void *)(v6 + 64);
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v12, v13, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v12, v13, v4);
    uint64_t v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v18 = v6 + 56;
    v19(v12, 0, 1, v4);
    int v15 = *(_DWORD *)(v18 + 28);
    uint64_t v16 = *(void *)(v18 + 8);
  }
  uint64_t v20 = v16 + ((v7 + 16) & ~v7);
  if (!v15) {
    ++v20;
  }
  uint64_t v21 = (v9 | 7) + v20;
  uint64_t v22 = (uint64_t *)(((v27 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = *v22;
  uint64_t v23 = v22[1];
  unint64_t v25 = (void *)(v21 & 0xFFFFFFFFFFFFFFF8);
  *unint64_t v25 = v24;
  v25[1] = v23;
  swift_retain();
  return a1;
}

void *assignWithCopy for ItemNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 8;
  uint64_t v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  uint64_t v23 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(void *)uint64_t v8 = *(void *)v23;
  swift_retain();
  swift_release();
  uint64_t v9 = (void *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_retain();
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + v6 + 8) & ~v6);
  size_t v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  unint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v9) = v13(v11, 1, v4);
  int v14 = v13(v12, 1, v4);
  if (v9)
  {
    if (v14)
    {
      int v15 = *(_DWORD *)(v5 + 84);
      size_t v16 = *(void *)(v5 + 64);
LABEL_6:
      if (v15) {
        size_t v17 = v16;
      }
      else {
        size_t v17 = v16 + 1;
      }
      memcpy(v11, v12, v17);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v11, v12, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
  }
  else
  {
    if (v14)
    {
      (*(void (**)(void *, uint64_t))(v5 + 8))(v11, v4);
      int v15 = *(_DWORD *)(v5 + 84);
      size_t v16 = *(void *)(v5 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v11, v12, v4);
  }
LABEL_12:
  uint64_t v18 = *(void *)(v5 + 64) + ((v6 + 16) & ~v6);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v18;
  }
  uint64_t v19 = (void *)(((v8 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v20 = (void *)(((v23 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v21 = v20[1];
  void *v19 = *v20;
  v19[1] = v21;
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ItemNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 | 7) + 8;
  uint64_t v9 = ((unint64_t)a1 + v8) & ~(v7 | 7);
  uint64_t v10 = ((unint64_t)a2 + v8) & ~(v7 | 7);
  *(void *)uint64_t v9 = *(void *)v10;
  uint64_t v11 = (void *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  size_t v12 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  void *v11 = *v12;
  unint64_t v13 = (void *)(((unint64_t)v11 + v7 + 8) & ~v7);
  int v14 = (const void *)(((unint64_t)v12 + v7 + 8) & ~v7);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v14, 1, v4))
  {
    int v15 = *(_DWORD *)(v6 + 84);
    size_t v16 = *(void *)(v6 + 64);
    if (v15) {
      size_t v17 = v16;
    }
    else {
      size_t v17 = v16 + 1;
    }
    memcpy(v13, v14, v17);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v13, v14, v4);
    uint64_t v19 = *(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56);
    uint64_t v18 = v6 + 56;
    v19(v13, 0, 1, v4);
    int v15 = *(_DWORD *)(v18 + 28);
    size_t v16 = *(void *)(v18 + 8);
  }
  size_t v20 = v16 + ((v7 + 16) & ~v7);
  if (!v15) {
    ++v20;
  }
  *(_OWORD *)(((v9 | 7) + v20) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v10 | 7) + v20) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ItemNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 8;
  uint64_t v8 = ((unint64_t)a1 + v7) & ~(v6 | 7);
  uint64_t v20 = ((unint64_t)a2 + v7) & ~(v6 | 7);
  *(void *)uint64_t v8 = *(void *)v20;
  swift_release();
  uint64_t v9 = (void *)((v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = (void *)((v20 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v9 = *v10;
  swift_release();
  uint64_t v11 = (void *)(((unint64_t)v9 + v6 + 8) & ~v6);
  size_t v12 = (void *)(((unint64_t)v10 + v6 + 8) & ~v6);
  unint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  LODWORD(v10) = v13(v11, 1, v4);
  int v14 = v13(v12, 1, v4);
  if (v10)
  {
    if (v14)
    {
      int v15 = *(_DWORD *)(v5 + 84);
      size_t v16 = *(void *)(v5 + 64);
LABEL_6:
      if (v15) {
        size_t v17 = v16;
      }
      else {
        size_t v17 = v16 + 1;
      }
      memcpy(v11, v12, v17);
      goto LABEL_12;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v11, v12, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(v11, 0, 1, v4);
  }
  else
  {
    if (v14)
    {
      (*(void (**)(void *, uint64_t))(v5 + 8))(v11, v4);
      int v15 = *(_DWORD *)(v5 + 84);
      size_t v16 = *(void *)(v5 + 64);
      goto LABEL_6;
    }
    (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v11, v12, v4);
  }
LABEL_12:
  uint64_t v18 = *(void *)(v5 + 64) + ((v6 + 16) & ~v6);
  if (!*(_DWORD *)(v5 + 84)) {
    ++v18;
  }
  *(_OWORD *)(((v8 | 7) + v18) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)(((v20 | 7) + v18) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ItemNavigationLinkModifier(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(v4 + 84);
  if (v6) {
    unsigned int v7 = v6 - 1;
  }
  else {
    unsigned int v7 = 0;
  }
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = v7;
  }
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  if (v6) {
    uint64_t v10 = 7;
  }
  else {
    uint64_t v10 = 8;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = v9 | 7;
  uint64_t v12 = v9 + 8;
  if (v8 < a2)
  {
    unint64_t v13 = ((v10 + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v9 + 16) & ~v9) + (v12 & ~v11)) & 0xFFFFFFFFFFFFFFF8)
        + 16;
    unsigned int v14 = a2 - v8;
    uint64_t v15 = v13 & 0xFFFFFFF8;
    if ((v13 & 0xFFFFFFF8) != 0) {
      unsigned int v16 = 2;
    }
    else {
      unsigned int v16 = v14 + 1;
    }
    if (v16 >= 0x10000) {
      unsigned int v17 = 4;
    }
    else {
      unsigned int v17 = 2;
    }
    if (v16 < 0x100) {
      unsigned int v17 = 1;
    }
    if (v16 >= 2) {
      uint64_t v18 = v17;
    }
    else {
      uint64_t v18 = 0;
    }
    switch(v18)
    {
      case 1:
        int v19 = *((unsigned __int8 *)a1 + v13);
        if (!v19) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v19 = *(unsigned __int16 *)((char *)a1 + v13);
        if (v19) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C26840);
      case 4:
        int v19 = *(_DWORD *)((char *)a1 + v13);
        if (!v19) {
          break;
        }
LABEL_28:
        int v21 = v19 - 1;
        if (v15)
        {
          int v21 = 0;
          LODWORD(v15) = *a1;
        }
        return v8 + (v15 | v21) + 1;
      default:
        break;
    }
  }
  uint64_t v22 = (unint64_t *)(((((unint64_t)a1 + v11 + 8) & ~v11) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v7 & 0x80000000) != 0)
  {
    unsigned int v24 = (*(uint64_t (**)(unint64_t))(v5 + 48))(((unint64_t)v22 + v12) & ~v9);
    if (v24 >= 2) {
      return v24 - 1;
    }
    else {
      return 0;
    }
  }
  else
  {
    unint64_t v23 = *v22;
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    return (v23 + 1);
  }
}

void storeEnumTagSinglePayload for ItemNavigationLinkModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  unsigned int v9 = v8 - 1;
  if (!v8) {
    unsigned int v9 = 0;
  }
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v10 = 0x7FFFFFFF;
  }
  else {
    unsigned int v10 = v9;
  }
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  size_t v12 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (!v8) {
    ++v12;
  }
  size_t v13 = ((v12 + ((v11 + 16) & ~v11) + ((v11 + 8) & ~(v11 | 7)) + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (v10 < a3)
  {
    unsigned int v14 = a3 - v10;
    if (((v12 + ((v11 + 16) & ~v11) + ((v11 + 8) & ~(v11 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      int v16 = 4;
    }
    else {
      int v16 = 2;
    }
    if (v15 < 0x100) {
      int v16 = 1;
    }
    if (v15 >= 2) {
      int v6 = v16;
    }
    else {
      int v6 = 0;
    }
  }
  if (a2 > v10)
  {
    if (((v12 + ((v11 + 16) & ~v11) + ((v11 + 8) & ~(v11 | 7)) + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v17 = a2 - v10;
    }
    else {
      int v17 = 1;
    }
    if (((v12 + ((v11 + 16) & ~v11) + ((v11 + 8) & ~(v11 | 7)) + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v18 = ~v10 + a2;
      bzero(a1, v13);
      *(_DWORD *)a1 = v18;
    }
    switch(v6)
    {
      case 1:
        a1[v13] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v13] = v17;
        return;
      case 3:
        goto LABEL_59;
      case 4:
        *(_DWORD *)&a1[v13] = v17;
        return;
      default:
        return;
    }
  }
  switch(v6)
  {
    case 1:
      a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v13] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_59:
      __break(1u);
      JUMPOUT(0x187C26B08);
    case 4:
      *(_DWORD *)&a1[v13] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        int v19 = (void *)((((unint64_t)&a1[(v11 | 7) + 8] & ~(v11 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          uint64_t v21 = ((unint64_t)v19 + v11 + 8) & ~v11;
          if (v9 >= a2)
          {
            uint64_t v25 = a2 + 1;
            uint64_t v26 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
            v26(((unint64_t)v19 + v11 + 8) & ~v11, v25);
          }
          else
          {
            if (v12 <= 3) {
              int v22 = ~(-1 << (8 * v12));
            }
            else {
              int v22 = -1;
            }
            if (v12)
            {
              int v23 = v22 & (~v9 + a2);
              if (v12 <= 3) {
                int v24 = v12;
              }
              else {
                int v24 = 4;
              }
              bzero((void *)(((unint64_t)v19 + v11 + 8) & ~v11), v12);
              switch(v24)
              {
                case 2:
                  *(_WORD *)uint64_t v21 = v23;
                  break;
                case 3:
                  *(_WORD *)uint64_t v21 = v23;
                  *(unsigned char *)(v21 + 2) = BYTE2(v23);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v21 = v23;
                  break;
                default:
                  *(unsigned char *)uint64_t v21 = v23;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v20 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v20 = a2 - 1;
          }
          void *v19 = v20;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for ItemNavigationLinkModifier()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithTake for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    char v5 = 1;
  }
  else
  {
    char v5 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 17) = v5;
  unint64_t v6 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v7 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  long long v8 = *(_OWORD *)v7;
  *(_DWORD *)(v6 + 16) = *(_DWORD *)(v7 + 16);
  *(_OWORD *)unint64_t v6 = v8;
  *(unsigned char *)(v6 + 20) = *(unsigned char *)(v7 + 20);
  *(unsigned char *)(v6 + 21) = *(unsigned char *)(v7 + 21);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v10 = v9 + 32;
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v6 + v11 + 22) & ~v11;
  uint64_t v13 = (v7 + v11 + 22) & ~v11;
  (*(void (**)(uint64_t, uint64_t))(v9 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v10 + 32) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(v15 + 9) = *(unsigned char *)(v16 + 9);
  return a1;
}

uint64_t assignWithTake for NavigationLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 17) = v8;
  }
  unint64_t v9 = (a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (a2 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v9 + 8) < 0xFFFFFFFFuLL) {
    goto LABEL_16;
  }
  if (*(void *)(v10 + 8) < 0xFFFFFFFFuLL)
  {
    swift_release();
    swift_release();
LABEL_16:
    long long v11 = *(_OWORD *)v10;
    *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
    *(_OWORD *)unint64_t v9 = v11;
    goto LABEL_17;
  }
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(v10 + 16);
LABEL_17:
  *(unsigned char *)(v9 + 20) = *(unsigned char *)(v10 + 20);
  *(unsigned char *)(v9 + 21) = *(unsigned char *)(v10 + 21);
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = (v9 + v14 + 22) & ~v14;
  uint64_t v16 = (v10 + v14 + 22) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v15, v16);
  uint64_t v17 = *(void *)(v13 + 24) + 7;
  unint64_t v18 = (v17 + v15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + v16) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_release();
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(unsigned char *)(v18 + 9) = *(unsigned char *)(v19 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationLinkModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 46) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 10;
    unsigned int v9 = (a2 - v7 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C26FCCLL);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  unint64_t v17 = ((unint64_t)a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v5 > 0x7FFFFFFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v6 + 22) & ~v6);
  }
  unint64_t v18 = *(void *)(v17 + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  if ((v18 + 1) >= 2) {
    return v18;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationLinkModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 46) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 10;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unint64_t v19 = (unint64_t)(a1 + 25) & 0xFFFFFFFFFFFFFFF8;
            if (v7 > 0x7FFFFFFE)
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20((v19 + v9 + 22) & ~v9);
            }
            else if (a2 > 0x7FFFFFFE)
            {
              *(void *)unint64_t v19 = 0;
              *(void *)(v19 + 8) = 0;
              *(_DWORD *)(v19 + 16) = 0;
              *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
            }
            else
            {
              *(void *)(v19 + 8) = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFF) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, v10);
  if (v10 <= 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 > 3) {
    *(_DWORD *)a1 = v16;
  }
  else {
    *(_WORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C27214);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for NavigationLinkModifier(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 46) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
  }
  else
  {
    unsigned int v12 = *((unsigned __int8 *)a2 + 17);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)a2 + 2;
    }
    if (v12 == 1)
    {
      uint64_t v13 = a2[1];
      *(void *)a1 = *a2;
      *(void *)(a1 + 8) = v13;
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
      swift_retain();
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = a2[1];
    }
    uint64_t v15 = ~v7;
    swift_retain();
    *(unsigned char *)(v4 + 17) = v14;
    unint64_t v16 = (v4 + 25) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = ((unint64_t)a2 + 25) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)(v17 + 8) < 0xFFFFFFFFuLL)
    {
      long long v18 = *(_OWORD *)v17;
      *(_DWORD *)(v16 + 16) = *(_DWORD *)(v17 + 16);
      *(_OWORD *)unint64_t v16 = v18;
    }
    else
    {
      *(void *)unint64_t v16 = *(void *)v17;
      *(void *)(v16 + 8) = *(void *)(v17 + 8);
      *(_DWORD *)(v16 + 16) = *(_DWORD *)(v17 + 16);
      swift_retain();
      swift_retain();
    }
    *(unsigned char *)(v16 + 20) = *(unsigned char *)(v17 + 20);
    *(unsigned char *)(v16 + 21) = *(unsigned char *)(v17 + 21);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))((v16 + v7 + 22) & v15, (v17 + v7 + 22) & v15, v5);
    unint64_t v19 = (v8 + ((v16 + v7 + 22) & v15)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = (v8 + ((v17 + v7 + 22) & v15)) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
    *(unsigned char *)(v19 + 9) = *(unsigned char *)(v20 + 9);
  }
  swift_retain();
  return v4;
}

uint64_t getEnumTagSinglePayload for NavigationLinkModifier.Payload(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 46) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 10;
    unsigned int v9 = (a2 - v7 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C275D0);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  unint64_t v17 = ((unint64_t)a1 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v5 > 0x7FFFFFFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v6 + 22) & ~v6);
  }
  unint64_t v18 = *(void *)(v17 + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  if ((v18 + 1) >= 2) {
    return v18;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for NavigationLinkModifier.Payload(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 46) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 10;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unint64_t v19 = (unint64_t)(a1 + 25) & 0xFFFFFFFFFFFFFFF8;
            if (v7 > 0x7FFFFFFE)
            {
              unint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20((v19 + v9 + 22) & ~v9);
            }
            else if (a2 > 0x7FFFFFFE)
            {
              *(void *)unint64_t v19 = 0;
              *(void *)(v19 + 8) = 0;
              *(_DWORD *)(v19 + 16) = 0;
              *(_DWORD *)unint64_t v19 = a2 - 0x7FFFFFFF;
            }
            else
            {
              *(void *)(v19 + 8) = a2;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFF) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, v10);
  if (v10 <= 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 > 3) {
    *(_DWORD *)a1 = v16;
  }
  else {
    *(_WORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C27818);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in NavigationLinkModifier<A>()
{
  return &protocol witness table for NavigationLinkModifier<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ItemNavigationLinkModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t static NavigationLinkModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance NavigationLinkModifier<A>()
{
  return static NavigationLinkModifier._makeView(modifier:inputs:body:)();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(void, void, void))type metadata accessor for InternalNavigationLinkModifier, a2);
}

uint64_t InternalNavigationLinkModifier.isNavigationEnabledInternal.getter()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 64);
  outlined copy of Environment<Bool>.Content(v1, v2);
  uint64_t v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<Bool?>.Content(v1, v2);
  return v3;
}

uint64_t BaseModifier.Transform.init(modifier:stackKey:listKey:navigationAuthority:isExtracting:selectionPopsSubsequentColumn:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char a10)
{
  uint64_t v18 = type metadata accessor for BaseModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32))(a9, a1, v18);
  unint64_t v19 = (int *)type metadata accessor for BaseModifier.Transform();
  unint64_t v20 = (void *)(a9 + v19[9]);
  *unint64_t v20 = a2;
  v20[1] = a3;
  v20[2] = a4;
  _s7SwiftUI19NavigationAuthorityVSgWObTm_2(a5, a9 + v19[10], &lazy cache variable for type metadata for NavigationState.ListKey?, (uint64_t)&type metadata for NavigationState.ListKey);
  _s7SwiftUI19NavigationAuthorityVSgWObTm_2(a6, a9 + v19[11], &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority);
  *(unsigned char *)(a9 + v19[12]) = a7;
  uint64_t v21 = a9 + v19[13];
  *(unsigned char *)uint64_t v21 = 0;
  *(void *)(v21 + 8) = 0;
  uint64_t v22 = a9 + v19[14];
  uint64_t result = swift_getKeyPath();
  *(void *)uint64_t v22 = result;
  *(void *)(v22 + 8) = 0;
  *(_WORD *)(v22 + 16) = 0;
  uint64_t v24 = a9 + v19[15];
  *(void *)uint64_t v24 = a8;
  *(unsigned char *)(v24 + 8) = a10 & 1;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance BaseModifier<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(void, void, void))type metadata accessor for BaseModifier.Transform, a2);
}

uint64_t BaseModifier.Transform.selectionPopsSubsequentColumn.getter(uint64_t a1)
{
  uint64_t v2 = v1 + *(int *)(a1 + 60);
  uint64_t v3 = *(void *)v2;
  uint64_t v4 = *(unsigned __int8 *)(v2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v2, *(unsigned char *)(v2 + 8));
  char v5 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool?>.Content(v3, v4);
  return v5 & 1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance BaseModifier<A>()
{
  return static BaseModifier._makeView(modifier:inputs:body:)();
}

uint64_t LegacyBaseModifier.isPresented.getter()
{
  type metadata accessor for NavigationState.ListKey?(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v1);
  return v1;
}

uint64_t LegacyBaseModifier.isPresented.setter()
{
  return swift_release();
}

double static LegacyBaseModifier._makeView(modifier:inputs:body:)@<D0>(double *a1@<X8>)
{
  type metadata accessor for LegacyBaseModifier();
  type metadata accessor for _GraphValue();
  uint64_t v1 = MEMORY[0x1E4FBB390];
  _GraphValue.subscript.getter();
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v1, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  _s7SwiftUI15NavigationStateV7ListKeyVSgSgMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<NavigationLinkPresentedValue?>, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  type metadata accessor for LegacyBaseModifier.Transform();
  type metadata accessor for LegacyBaseModifier.Wrapper();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  static ViewModifier._makeView(modifier:inputs:body:)();
  double result = v5;
  *(void *)a1 = v4;
  a1[1] = v5;
  return result;
}

uint64_t static LegacyBaseModifier._makeViewList(modifier:inputs:body:)()
{
  type metadata accessor for LegacyBaseModifier();
  type metadata accessor for _GraphValue();
  uint64_t v0 = MEMORY[0x1E4FBB390];
  _GraphValue.subscript.getter();
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v0, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  _s7SwiftUI15NavigationStateV7ListKeyVSgSgMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<NavigationLinkPresentedValue?>, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  _GraphValue.subscript.getter();
  _GraphValue.value.getter();
  _GraphValue.value.getter();
  type metadata accessor for LegacyBaseModifier.Transform();
  type metadata accessor for LegacyBaseModifier.Wrapper();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  swift_getWitnessTable();
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t closure #1 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for LegacyBaseModifier();
  uint64_t v7 = a1 + *(int *)(v6 + 52);
  v12[2] = v6;
  uint64_t v8 = MEMORY[0x1E4FBB390];
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v12[5];
}

uint64_t closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for LegacyBaseModifier();
  uint64_t v7 = a1 + *(int *)(v6 + 60);
  v13[2] = v6;
  type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]);
  uint64_t v9 = v8;
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v13, v9, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v13[5];
}

uint64_t closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = type metadata accessor for LegacyBaseModifier();
  uint64_t v7 = a1 + *(int *)(v6 + 64);
  v12[2] = v6;
  uint64_t v8 = MEMORY[0x1E4FBB390];
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v7, a4, (uint64_t)v12, v8, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v12[5];
}

uint64_t LegacyBaseModifier.Wrapper.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LegacyBaseModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t LegacyBaseModifier.Wrapper.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LegacyBaseModifier();
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v7 - v3;
  if ((*(unsigned char *)AGGraphGetValue() & 1) != 0
    || (type metadata accessor for NavigationState.ListKey?(0, &lazy cache variable for type metadata for NavigationLinkPresentedValue?, (uint64_t)&type metadata for NavigationLinkPresentedValue, MEMORY[0x1E4FBB718]), !*(void *)AGGraphGetValue()))
  {
    LegacyBaseModifier.Wrapper.modifier.getter((uint64_t)v4);
    char v5 = *(unsigned char *)AGGraphGetValue();
  }
  else
  {
    MEMORY[0x18C112B90](0xD00000000000008BLL, 0x8000000188334D30);
    LegacyBaseModifier.Wrapper.modifier.getter((uint64_t)v4);
    char v5 = 1;
  }
  return LegacyBaseModifier.Transform.init(modifier:shouldDisable:)((uint64_t)v4, v5, a1);
}

uint64_t LegacyBaseModifier.Transform.init(modifier:shouldDisable:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for LegacyBaseModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for LegacyBaseModifier.Transform();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = a2;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance LegacyBaseModifier<A>.Wrapper@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>(a1, (uint64_t (*)(void, void, void))type metadata accessor for LegacyBaseModifier.Transform, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance InternalModifier<A>@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void, void, void)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4 = a2(0, *(void *)(a1 + 16), *(void *)(a1 + 24));
  char v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a3, 1, 1, v4);
}

uint64_t protocol witness for Rule.value.getter in conformance LegacyBaseModifier<A>.Wrapper@<X0>(uint64_t a1@<X8>)
{
  return LegacyBaseModifier.Wrapper.value.getter(a1);
}

uint64_t LegacyBaseModifier.Transform.maybeStyledContent(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v42 = a3;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = *(void *)(v9 + 24);
  uint64_t v10 = type metadata accessor for NavigationLinkButtonStyle();
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v38 = (uint64_t)&v33 - v11;
  swift_getWitnessTable();
  uint64_t v34 = type metadata accessor for _ViewModifier_Content();
  uint64_t v35 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v39 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v36 = (char *)&v33 - v16;
  uint64_t v17 = type metadata accessor for LegacyBaseModifier();
  uint64_t v18 = v4 + *(int *)(v17 + 56);
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  char v21 = *(unsigned char *)(v18 + 16);
  uint64_t v22 = v4 + *(int *)(v17 + 36);
  int v23 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 16);
  swift_retain();
  swift_retain();
  v23(v8, v22, v5);
  uint64_t v24 = v38;
  NavigationLinkButtonStyle.init(deprecated_isActive:destination:)(v19, v20, v21, (uint64_t)v8, v5, v38);
  uint64_t v25 = v34;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v25;
  uint64_t v28 = v35;
  View.buttonStyle<A>(_:)(v24, v27, v35, v26);
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v24, v28);
  uint64_t v29 = swift_getWitnessTable();
  uint64_t v43 = v26;
  uint64_t v44 = v29;
  swift_getWitnessTable();
  uint64_t v30 = v36;
  static ViewBuilder.buildExpression<A>(_:)(v14);
  unint64_t v31 = *(void (**)(char *, uint64_t))(v40 + 8);
  v31(v14, v12);
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v12);
}

uint64_t LegacyBaseModifier.Transform.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v47 = a3;
  uint64_t v45 = *(void *)(a2 - 8);
  uint64_t v46 = *(void *)(v45 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v44 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v42 = *(void *)(a2 + 24);
  uint64_t v43 = v6;
  type metadata accessor for NavigationLinkButtonStyle();
  swift_getWitnessTable();
  type metadata accessor for PrimitiveButtonStyleContainerModifier();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v33 - v8;
  uint64_t v39 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41280];
  type metadata accessor for NavigationState.ListKey?(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v35 = (char *)&v33 - v11;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v36 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v38 = (char *)&v33 - v15;
  uint64_t v34 = v3;
  LegacyBaseModifier.Transform.maybeStyledContent(_:)(v16, a2, (uint64_t)v9);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v52 = WitnessTable;
  uint64_t v53 = v18;
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v20 = v35;
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v37 + 8))(v9, v7);
  uint64_t v22 = v44;
  uint64_t v21 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v44, v34, a2);
  uint64_t v23 = v21;
  unint64_t v24 = (*(unsigned __int8 *)(v21 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80);
  uint64_t v25 = swift_allocObject();
  uint64_t v26 = v42;
  *(void *)(v25 + 16) = v43;
  *(void *)(v25 + 24) = v26;
  (*(void (**)(unint64_t, char *, uint64_t))(v23 + 32))(v25 + v24, v22, a2);
  uint64_t v27 = _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, v39);
  uint64_t v50 = v19;
  uint64_t v51 = v27;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = v36;
  View.transactionalPreferenceTransform<A>(key:transform:)((uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)partial apply for closure #1 in LegacyBaseModifier.Transform.body(content:), v25, v10, (uint64_t)&type metadata for NavigationDestinationsKey, v28);
  swift_release();
  (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v10);
  uint64_t v48 = v28;
  v49 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  swift_getWitnessTable();
  uint64_t v30 = v38;
  static ViewBuilder.buildExpression<A>(_:)(v29);
  unint64_t v31 = *(void (**)(char *, uint64_t))(v40 + 8);
  v31(v29, v12);
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v12);
}

uint64_t closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v50 = a2;
  uint64_t v51 = a1;
  uint64_t v47 = *(uint64_t (**)())(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v48 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = v8;
  uint64_t v9 = type metadata accessor for LegacyBaseModifier.Transform();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v45 - v14;
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)&v45 - v18;
  char v21 = *((unsigned char *)a3 + *(int *)(v20 + 36));
  uint64_t v22 = *(void (**)(char *, void *, uint64_t, double))(v10 + 16);
  v22((char *)&v45 - v18, a3, v9, v17);
  if (v21)
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v19, v9);
    ((void (*)(char *, void *, uint64_t))v22)(v12, a3, v9);
    uint64_t v24 = v50;
LABEL_5:
    v23(v12, v9);
LABEL_9:
    v53[0] = *a3;
    uint64_t v43 = v53[0];
    v53[1] = v24;
    char v54 = 1;
    swift_retain();
    uint64_t v42 = v43;
    return specialized Dictionary.subscript.setter((uint64_t)v53, v42);
  }
  uint64_t v46 = a5;
  uint64_t v25 = type metadata accessor for LegacyBaseModifier();
  uint64_t v26 = *(void *)&v19[*(int *)(v25 + 60)];
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v15, v19, v9);
  if (v26)
  {
    char v27 = v15[*(int *)(v25 + 64)];
    uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v15, v9);
    ((void (*)(char *, void *, uint64_t))v22)(v12, a3, v9);
    uint64_t v24 = v50;
    if ((v27 & 1) == 0) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v23 = *(void (**)(char *, uint64_t))(v10 + 8);
    v23(v15, v9);
    ((void (*)(char *, void *, uint64_t))v22)(v12, a3, v9);
    uint64_t v24 = v50;
  }
  uint64_t v28 = v49;
  uint64_t v29 = (int *)type metadata accessor for LegacyBaseModifier();
  char v30 = LegacyBaseModifier.isPresented.getter();
  v23(v12, v9);
  if ((v30 & 1) == 0) {
    goto LABEL_9;
  }
  uint64_t v51 = *a3;
  uint64_t v31 = (uint64_t)v48;
  (*((void (**)(char *, char *, uint64_t))v47 + 2))(v48, (char *)a3 + v29[9], v28);
  uint64_t v32 = v29[11];
  LODWORD(v50) = *((unsigned __int8 *)a3 + v29[12]);
  uint64_t v33 = (void *)((char *)a3 + v29[10]);
  uint64_t v35 = v33[1];
  v52[0] = *v33;
  uint64_t v34 = v52[0];
  v52[1] = v35;
  char v36 = *((unsigned char *)a3 + v32 + 4);
  uint64_t v37 = (uint64_t)a3;
  uint64_t v38 = v46;
  uint64_t v47 = implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)(v37, v28, v46);
  uint64_t v40 = v39;
  swift_retain();
  outlined copy of EnvironmentValues?(v34);
  LOBYTE(v53[0]) = v36;
  uint64_t v41 = v51;
  NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(v51, v31, v50, v24, v52, (uint64_t)v47, v40, (uint64_t)v53, v28, v38);
  char v54 = 0;
  uint64_t v42 = v41;
  return specialized Dictionary.subscript.setter((uint64_t)v53, v42);
}

uint64_t (*implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = type metadata accessor for LegacyBaseModifier.Transform();
  uint64_t v7 = *(void *)(v6 - 8);
  double v8 = MEMORY[0x1F4188790](v6);
  uint64_t v10 = (char *)&v14 - v9;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))((char *)&v14 - v9, a1, v6, v8);
  unint64_t v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v12 + v11, v10, v6);
  return partial apply for implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:);
}

uint64_t implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)()
{
  return static Update.dispatchImmediately<A>(_:)();
}

uint64_t ItemNavigationLinkModifier.item.getter()
{
  type metadata accessor for Optional();
  uint64_t v0 = type metadata accessor for Binding();
  return MEMORY[0x18C113DA0](v0);
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance LegacyBaseModifier<A>@<D0>(double *a1@<X8>)
{
  return static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LegacyBaseModifier<A>()
{
  return static LegacyBaseModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t ItemNavigationLinkModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  ItemNavigationLinkModifier.base(_:)(a1, a2);
  strcpy(v15, "navigationLink");
  v15[15] = -18;
  uint64_t v2 = Namespace.wrappedValue.getter();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = &protocol witness table for TransactionalPreferenceTransformModifier<A>;
  uint64_t v4 = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1A0];
  uint64_t v6 = MEMORY[0x1E4FBB1B0];
  View.accessibilityLinkedGroup<A>(id:in:)((uint64_t)v15, v2, v3, MEMORY[0x1E4FBB1A0], v4);
  swift_release();
  v8[0] = v16;
  v8[1] = v17;
  char v9 = v18;
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  uint64_t v12 = v21;
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, (unint64_t *)&lazy cache variable for type metadata for RelationshipModifier<String>, v5, v6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for RelationshipModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v16 = v22;
  uint64_t v17 = v23;
  char v18 = v24;
  uint64_t v19 = v25;
  uint64_t v20 = v26;
  uint64_t v21 = v27;
  static ViewBuilder.buildExpression<A>(_:)(&v16);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t ItemNavigationLinkModifier.base(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  uint64_t v4 = *(void *)(v3 + 64);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v6, v7, a2, v5);
  unint64_t v8 = (*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = swift_allocObject();
  long long v10 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v9 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(v9 + 32) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v3 + 32))(v9 + v8, v6, a2);
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for _ViewModifier_Content();
  uint64_t WitnessTable = swift_getWitnessTable();
  View.transactionalPreferenceTransform<A>(key:transform:)((uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)partial apply for closure #1 in ItemNavigationLinkModifier.base(_:), v9, v11, (uint64_t)&type metadata for NavigationDestinationsKey, WitnessTable);
  return swift_release();
}

uint64_t closure #1 in ItemNavigationLinkModifier.base(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v43 = a2;
  uint64_t v44 = a1;
  uint64_t v46 = a4;
  uint64_t v47 = a5;
  uint64_t v39 = a6;
  uint64_t v48 = a6;
  uint64_t v49 = a7;
  uint64_t v41 = a7;
  uint64_t v10 = type metadata accessor for ItemNavigationLinkModifier();
  uint64_t v38 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v37 = (char *)&v33 - v11;
  uint64_t v40 = a5;
  MEMORY[0x1F4188790](v12);
  uint64_t v42 = (uint64_t)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v33 - v16;
  uint64_t v18 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  ItemNavigationLinkModifier.item.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, a4) == 1)
  {
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    uint64_t v22 = Namespace.wrappedValue.getter();
    uint64_t v46 = Namespace.wrappedValue.getter();
    uint64_t v47 = v43;
    char v50 = 1;
    swift_retain();
    return specialized Dictionary.subscript.setter((uint64_t)&v46, v22);
  }
  else
  {
    char v24 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    uint64_t v35 = v21;
    v24(v21, v17, a4);
    uint64_t v36 = Namespace.wrappedValue.getter();
    uint64_t v34 = Namespace.wrappedValue.getter();
    (*(void (**)(char *))(a3 + *(int *)(v10 + 56)))(v21);
    long long v45 = xmmword_18834FC50;
    uint64_t v25 = v38;
    uint64_t v26 = v37;
    (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v37, a3, v10);
    unint64_t v27 = (*(unsigned __int8 *)(v25 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v28 = (char *)swift_allocObject();
    uint64_t v29 = v39;
    uint64_t v30 = v40;
    *((void *)v28 + 2) = a4;
    *((void *)v28 + 3) = v30;
    uint64_t v31 = v41;
    *((void *)v28 + 4) = v29;
    *((void *)v28 + 5) = v31;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(&v28[v27], v26, v10);
    uint64_t v32 = v43;
    swift_retain();
    LOBYTE(v46) = 1;
    NavigationDestinationContent.init<A>(id:content:isDetail:transaction:environment:updateSeed:onDismiss:)(v34, v42, 1, v32, (uint64_t *)&v45, (uint64_t)partial apply for closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:), (uint64_t)v28, (uint64_t)&v46, v30, v31);
    char v50 = 0;
    specialized Dictionary.subscript.setter((uint64_t)&v46, v36);
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v35, a4);
  }
}

uint64_t closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)v15 - v12;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 56))((char *)v15 - v12, 1, 1, a2, v11);
  v15[0] = a2;
  v15[1] = a3;
  v15[2] = a4;
  v15[3] = a5;
  type metadata accessor for ItemNavigationLinkModifier();
  specialized ItemNavigationLinkModifier.item.setter();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t partial apply for closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static NavigationLinkModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #1 in ItemNavigationLinkModifier.base(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v7 = v2[4];
  uint64_t v8 = v2[5];
  uint64_t v9 = *(void *)(type metadata accessor for ItemNavigationLinkModifier() - 8);
  uint64_t v10 = (uint64_t)v2 + ((*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));

  return closure #1 in ItemNavigationLinkModifier.base(_:)(a1, a2, v10, v5, v6, v7, v8);
}

uint64_t partial apply for closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:)()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = *(void *)(type metadata accessor for ItemNavigationLinkModifier() - 8);
  uint64_t v6 = (uint64_t)v0 + ((*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return closure #1 in closure #1 in ItemNavigationLinkModifier.base(_:)(v6, v1, v2, v3, v4);
}

uint64_t specialized ItemNavigationLinkModifier.item.setter()
{
  return specialized Binding.wrappedValue.setter();
}

uint64_t *initializeBufferWithCopyOfBuffer for InternalNavigationLinkModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((v7 + ((v6 + 66) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 49 > 0x18)
  {
    uint64_t v10 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    *a1 = *a2;
    unint64_t v11 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v12 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v13 = *(unsigned __int8 *)(v12 + 17);
    if (v13 >= 2) {
      unsigned int v13 = *(_DWORD *)v12 + 2;
    }
    uint64_t v31 = v4;
    if (v13 == 1)
    {
      *(void *)unint64_t v11 = *(void *)v12;
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
      *(unsigned char *)(v11 + 16) = *(unsigned char *)(v12 + 16);
      swift_retain();
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      *(unsigned char *)unint64_t v11 = *(unsigned char *)v12;
      *(void *)(v11 + 8) = *(void *)(v12 + 8);
    }
    swift_retain();
    *(unsigned char *)(v11 + 17) = v14;
    unint64_t v15 = (v12 + 25) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v16 = *(unsigned __int8 *)(v15 + 20);
    if (v16 >= 2) {
      unsigned int v16 = *(_DWORD *)v15 + 2;
    }
    uint64_t v17 = ~v6;
    unint64_t v18 = (v11 + 25) & 0xFFFFFFFFFFFFFFF8;
    if (v16 == 1)
    {
      *(void *)unint64_t v18 = *(void *)v15;
      *(void *)(v18 + 8) = *(void *)(v15 + 8);
      *(_DWORD *)(v18 + 16) = *(_DWORD *)(v15 + 16);
      swift_retain();
      char v19 = 1;
    }
    else
    {
      char v19 = 0;
      *(_DWORD *)unint64_t v18 = *(_DWORD *)v15;
      *(void *)(v18 + 8) = *(void *)(v15 + 8);
    }
    swift_retain();
    *(unsigned char *)(v18 + 20) = v19;
    unint64_t v20 = (v11 + 53) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v12 + 53) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v22 = *(void *)v21;
    char v23 = *(unsigned char *)(v21 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v21, v23);
    *(void *)unint64_t v20 = v22;
    *(unsigned char *)(v20 + 8) = v23;
    *(unsigned char *)(v20 + 9) = *(unsigned char *)(v21 + 9);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))((v20 + v6 + 10) & v17, (v21 + v6 + 10) & v17, v31);
    unint64_t v24 = (v7 + ((v20 + v6 + 10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = (v7 + ((v21 + v6 + 10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v24 = *(void *)v25;
    *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
    *(unsigned char *)(v24 + 9) = *(unsigned char *)(v25 + 9);
    unint64_t v26 = (v24 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v27 = (v25 + 17) & 0xFFFFFFFFFFFFFFF8;
    long long v28 = *(_OWORD *)v27;
    long long v29 = *(_OWORD *)(v27 + 32);
    *(_OWORD *)(v26 + 16) = *(_OWORD *)(v27 + 16);
    *(_OWORD *)(v26 + 32) = v29;
    *(_OWORD *)unint64_t v26 = v28;
    *(unsigned char *)(v26 + 48) = *(unsigned char *)(v27 + 48);
  }
  swift_retain();
  return v3;
}

void *initializeWithTake for InternalNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v4 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v6 = *(unsigned __int8 *)(v5 + 17);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)v5 + 2;
  }
  if (v6 == 1)
  {
    long long v7 = *(_OWORD *)v5;
    *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
    *(_OWORD *)unint64_t v4 = v7;
    char v8 = 1;
  }
  else
  {
    char v8 = 0;
    *(_OWORD *)unint64_t v4 = *(_OWORD *)v5;
  }
  *(unsigned char *)(v4 + 17) = v8;
  unint64_t v9 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v10 = *(unsigned __int8 *)(v9 + 20);
  if (v10 >= 2) {
    unsigned int v10 = *(_DWORD *)v9 + 2;
  }
  unint64_t v11 = (v4 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v10 == 1)
  {
    long long v12 = *(_OWORD *)v9;
    *(_DWORD *)(v11 + 16) = *(_DWORD *)(v9 + 16);
  }
  else
  {
    LOBYTE(v10) = 0;
    long long v12 = *(_OWORD *)v9;
  }
  *(_OWORD *)unint64_t v11 = v12;
  *(unsigned char *)(v11 + 20) = v10;
  unint64_t v13 = (v4 + 53) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v15 = *(void *)v14;
  *(unsigned char *)(v13 + 8) = *(unsigned char *)(v14 + 8);
  *(void *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 9) = *(unsigned char *)(v14 + 9);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v17 = v16 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (v18 + 10 + v13) & ~v18;
  uint64_t v20 = (v18 + 10 + v14) & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 32) + 7;
  unint64_t v22 = (v21 + v19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + v20) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v23;
  *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
  *(unsigned char *)(v22 + 9) = *(unsigned char *)(v23 + 9);
  unint64_t v24 = (v22 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v23 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v26 = *(_OWORD *)(v25 + 32);
  long long v27 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = *(_OWORD *)(v25 + 16);
  *(_OWORD *)(v24 + 32) = v26;
  *(_OWORD *)unint64_t v24 = v27;
  *(unsigned char *)(v24 + 48) = *(unsigned char *)(v25 + 48);
  return a1;
}

void *assignWithTake for InternalNavigationLinkModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  unint64_t v5 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = ((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v5 != v6)
  {
    unsigned int v7 = *(unsigned __int8 *)(v5 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)v5 + 2;
    }
    if (v7 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v8 = *(unsigned __int8 *)(v6 + 17);
    if (v8 >= 2) {
      unsigned int v8 = *(_DWORD *)v6 + 2;
    }
    if (v8 == 1)
    {
      long long v9 = *(_OWORD *)v6;
      *(unsigned char *)(v5 + 16) = *(unsigned char *)(v6 + 16);
      *(_OWORD *)unint64_t v5 = v9;
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      *(_OWORD *)unint64_t v5 = *(_OWORD *)v6;
    }
    *(unsigned char *)(v5 + 17) = v10;
  }
  unint64_t v11 = (v5 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v6 + 25) & 0xFFFFFFFFFFFFFFF8;
  if (v11 != v12)
  {
    unsigned int v13 = *(unsigned __int8 *)(v11 + 20);
    if (v13 >= 2) {
      unsigned int v13 = *(_DWORD *)v11 + 2;
    }
    if (v13 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v14 = *(unsigned __int8 *)(v12 + 20);
    if (v14 >= 2) {
      unsigned int v14 = *(_DWORD *)v12 + 2;
    }
    if (v14 == 1)
    {
      long long v15 = *(_OWORD *)v12;
      *(_DWORD *)(v11 + 16) = *(_DWORD *)(v12 + 16);
      *(_OWORD *)unint64_t v11 = v15;
      char v16 = 1;
    }
    else
    {
      char v16 = 0;
      *(_OWORD *)unint64_t v11 = *(_OWORD *)v12;
    }
    *(unsigned char *)(v11 + 20) = v16;
  }
  unint64_t v17 = (v5 + 53) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v6 + 53) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 8);
  uint64_t v20 = *(void *)v17;
  uint64_t v21 = *(unsigned __int8 *)(v17 + 8);
  *(void *)unint64_t v17 = *(void *)v18;
  *(unsigned char *)(v17 + 8) = v19;
  outlined consume of Environment<Bool?>.Content(v20, v21);
  *(unsigned char *)(v17 + 9) = *(unsigned char *)(v18 + 9);
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v23 = v22 + 40;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = (v24 + 10 + v17) & ~v24;
  uint64_t v26 = (v24 + 10 + v18) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 40))(v25, v26);
  uint64_t v27 = *(void *)(v23 + 24) + 7;
  unint64_t v28 = (v27 + v25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v27 + v26) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  swift_release();
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  *(unsigned char *)(v28 + 9) = *(unsigned char *)(v29 + 9);
  unint64_t v30 = (v28 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v29 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v32 = *(_OWORD *)v31;
  long long v33 = *(_OWORD *)(v31 + 32);
  *(_OWORD *)(v30 + 16) = *(_OWORD *)(v31 + 16);
  *(_OWORD *)(v30 + 32) = v33;
  *(_OWORD *)unint64_t v30 = v32;
  *(unsigned char *)(v30 + 48) = *(unsigned char *)(v31 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for InternalNavigationLinkModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((v8 + ((v6 + 66) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 49;
    unsigned int v10 = (a2 - v7 + 255) >> (8 * v9);
    if (v9 < 4) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = a1[v9];
        if (!a1[v9]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)&a1[v9];
        if (*(_WORD *)&a1[v9]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C2B0E8);
      case 4:
        int v14 = *(_DWORD *)&a1[v9];
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 >= 4) {
          int v16 = 0;
        }
        if (((((v8 + ((v6 + 66) & ~v6)) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8) == 0xFFFFFFD0) {
          int v17 = *a1;
        }
        else {
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  unint64_t v18 = (((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 53) & 0xFFFFFFFFFFFFFFF8) + v6 + 10) & ~v6;
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)((v8 + v18) & 0xFFFFFFFFFFFFFFF8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  if ((v19 + 1) >= 2) {
    return v19;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for InternalNavigationLinkModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  size_t v11 = ((((v10 + ((v9 + 66) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + 49;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            unint64_t v19 = (((((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8) + 53) & 0xFFFFFFFFFFFFFFF8) + v9 + 10) & ~v9;
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v21 = (void *)((v10 + v19) & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *uint64_t v21 = 0;
                *(_DWORD *)uint64_t v21 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *uint64_t v21 = a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
              v20(v19);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 255) >> v12;
    if (v11 <= 3) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  if (v11 < 4) {
    unsigned int v17 = ((~v8 + a2) >> v12) + 1;
  }
  else {
    unsigned int v17 = 1;
  }
  if (v11 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v11);
  if (v11 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187C2B34CLL);
    case 4:
      *(_DWORD *)&a1[v11] = v17;
      break;
    default:
      return;
  }
}

uint64_t sub_187C2B374()
{
  return swift_getWitnessTable();
}

uint64_t *initializeBufferWithCopyOfBuffer for LegacyBaseModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64) + 7;
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((((((v6 + ((v5 + 8) & ~v5)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    uint64_t v3 = (uint64_t *)(v9 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
  }
  else
  {
    *a1 = *a2;
    uint64_t v10 = ((unint64_t)a1 + v5 + 8) & ~v5;
    uint64_t v11 = ((unint64_t)a2 + v5 + 8) & ~v5;
    (*(void (**)(uint64_t, uint64_t))(v4 + 16))(v10, v11);
    char v12 = (void *)((v6 + v10) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v13 = (uint64_t *)((v6 + v11) & 0xFFFFFFFFFFFFFFF8);
    LODWORD(v14) = -1;
    if ((unint64_t)*v13 < 0xFFFFFFFF) {
      uint64_t v14 = *v13;
    }
    if ((int)v14 - 1 < 0)
    {
      void *v12 = *v13;
      v12[1] = v13[1];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)char v12 = *(_OWORD *)v13;
    }
    unint64_t v15 = ((unint64_t)v12 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
    int v17 = *(_DWORD *)v16;
    *(unsigned char *)(v15 + 4) = *(unsigned char *)(v16 + 4);
    *(_DWORD *)unint64_t v15 = v17;
    *(unsigned char *)(v15 + 5) = *(unsigned char *)(v16 + 5);
    *(unsigned char *)(v15 + 6) = *(unsigned char *)(v16 + 6);
    uint64_t v18 = ((unint64_t)v12 + 19) | 7;
    uint64_t v19 = ((unint64_t)v13 + 19) | 7;
    unint64_t v20 = (v18 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v20 = *(void *)v21;
    *(void *)(v20 + 8) = *(void *)(v21 + 8);
    *(unsigned char *)(v20 + 16) = *(unsigned char *)(v21 + 16);
    unint64_t v22 = (v18 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v23 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v22 = *(void *)v23;
    *(unsigned char *)(v22 + 8) = *(unsigned char *)(v23 + 8);
    *(unsigned char *)(v22 + 9) = *(unsigned char *)(v23 + 9);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v3;
}

void *initializeWithTake for LegacyBaseModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 32;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 32))(v7, v8);
  uint64_t v9 = *(void *)(v5 + 32) + 7;
  unint64_t v10 = (v9 + v7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = (v9 + v8) & 0xFFFFFFFFFFFFFFF8;
  long long v12 = *(_OWORD *)v11;
  v11 += 19;
  *(_OWORD *)unint64_t v10 = v12;
  v10 += 19;
  unint64_t v13 = v10 & 0xFFFFFFFFFFFFFFF8;
  int v14 = *(_DWORD *)(v11 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v13 + 4) = *(unsigned char *)((v11 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)unint64_t v13 = v14;
  *(unsigned char *)(v13 + 5) = *(unsigned char *)((v11 & 0xFFFFFFFFFFFFFFF8) + 5);
  *(unsigned char *)(v13 + 6) = *(unsigned char *)((v11 & 0xFFFFFFFFFFFFFFF8) + 6);
  v10 |= 7uLL;
  v11 |= 7uLL;
  unint64_t v15 = (v10 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v17 = *(_OWORD *)v16;
  *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = v17;
  unint64_t v18 = (v10 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  *(unsigned char *)(v18 + 8) = *(unsigned char *)(v19 + 8);
  *(unsigned char *)(v18 + 9) = *(unsigned char *)(v19 + 9);
  return a1;
}

void *assignWithTake for LegacyBaseModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = v4 + 40;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  (*(void (**)(uint64_t, uint64_t))(v4 + 40))(v7, v8);
  uint64_t v11 = *(void *)(v5 + 24) + 7;
  uint64_t v9 = (uint64_t *)((v11 + v7) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v10 = (uint64_t *)((v11 + v8) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v11) = -1;
  if ((unint64_t)*v9 < 0xFFFFFFFF) {
    uint64_t v11 = *v9;
  }
  if ((int)v11 - 1 < 0)
  {
    LODWORD(v12) = -1;
    if ((unint64_t)*v10 < 0xFFFFFFFF) {
      uint64_t v12 = *v10;
    }
    if ((int)v12 - 1 < 0)
    {
      *uint64_t v9 = *v10;
      swift_release();
      v9[1] = v10[1];
      swift_release();
      goto LABEL_9;
    }
    swift_release();
    swift_release();
  }
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
LABEL_9:
  unint64_t v13 = ((unint64_t)v9 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = ((unint64_t)v10 + 19) & 0xFFFFFFFFFFFFFFF8;
  int v15 = *(_DWORD *)v14;
  *(unsigned char *)(v13 + 4) = *(unsigned char *)(v14 + 4);
  *(_DWORD *)unint64_t v13 = v15;
  *(unsigned char *)(v13 + 5) = *(unsigned char *)(v14 + 5);
  *(unsigned char *)(v13 + 6) = *(unsigned char *)(v14 + 6);
  uint64_t v16 = ((unint64_t)v9 + 19) | 7;
  uint64_t v17 = ((unint64_t)v10 + 19) | 7;
  unint64_t v18 = (v16 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v18 = *(void *)v19;
  swift_release();
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  swift_release();
  *(unsigned char *)(v18 + 16) = *(unsigned char *)(v19 + 16);
  unint64_t v20 = (v16 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (v17 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v20 = *(void *)v21;
  swift_release();
  *(unsigned char *)(v20 + 8) = *(unsigned char *)(v21 + 8);
  *(unsigned char *)(v20 + 9) = *(unsigned char *)(v21 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyBaseModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((((v8 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
    unsigned int v10 = (a2 - v7 + 0xFFFF) >> (8 * v9);
    if (v9 <= 3) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (*(unsigned __int16 *)((char *)a1 + v9)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C2BB48);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 - 1) << (8 * v9);
        if (v9 <= 3)
        {
          int v17 = *a1;
        }
        else
        {
          int v16 = 0;
          int v17 = *(_DWORD *)a1;
        }
        return v7 + (v17 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v18 = ((unint64_t)a1 + v6 + 8) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v18);
  }
  unint64_t v19 = *(void *)(((((((v8 + v18) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v19 >= 0xFFFFFFFF) {
    LODWORD(v19) = -1;
  }
  return (v19 + 1);
}

void storeEnumTagSinglePayload for LegacyBaseModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unint64_t v20 = (unint64_t)&a1[v9 + 8] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 0x10) = 0;
                *(void *)((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) = a2 ^ 0x80000000;
                *(void *)(((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
              }
              else
              {
                *(void *)(((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2 - 1;
              }
            }
            else
            {
              unint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 0xFFFF) >> v12;
    if (v11 <= 3) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v17 = ~v8 + a2;
  unsigned int v18 = v17 >> v12;
  bzero(a1, ((((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10);
  if (v11 <= 3) {
    int v19 = v18 + 1;
  }
  else {
    int v19 = 1;
  }
  if (v11 > 3) {
    *(_DWORD *)a1 = v17;
  }
  else {
    *(_WORD *)a1 = v17;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v19;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v19;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C2BDA4);
    case 4:
      *(_DWORD *)&a1[v11] = v19;
      break;
    default:
      return;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for BaseModifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0
    || ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10 > 0x18)
  {
    uint64_t v9 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = (void *)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    unint64_t v11 = (void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    void *v11 = *v10;
    unint64_t v12 = ((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v14 = *(unsigned __int8 *)(v13 + 17);
    swift_retain();
    if (v14 >= 2) {
      unsigned int v14 = *(_DWORD *)v13 + 2;
    }
    if (v14 == 1)
    {
      *(void *)unint64_t v12 = *(void *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
      *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
      swift_retain();
      char v15 = 1;
    }
    else
    {
      char v15 = 0;
      *(unsigned char *)unint64_t v12 = *(unsigned char *)v13;
      *(void *)(v12 + 8) = *(void *)(v13 + 8);
    }
    swift_retain();
    *(unsigned char *)(v12 + 17) = v15;
    unint64_t v16 = (v12 + 25) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v17 = (v13 + 25) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v16 = *(void *)v17;
    *(unsigned char *)(v16 + 8) = *(unsigned char *)(v17 + 8);
    *(unsigned char *)(v16 + 9) = *(unsigned char *)(v17 + 9);
  }
  return v4;
}

uint64_t initializeWithTake for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v11 = *(unsigned __int8 *)(v10 + 17);
  if (v11 >= 2) {
    unsigned int v11 = *(_DWORD *)v10 + 2;
  }
  if (v11 == 1)
  {
    long long v12 = *(_OWORD *)v10;
    *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
    *(_OWORD *)unint64_t v9 = v12;
    char v13 = 1;
  }
  else
  {
    char v13 = 0;
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
  }
  *(unsigned char *)(v9 + 17) = v13;
  unint64_t v14 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v14 = *(void *)v15;
  *(unsigned char *)(v14 + 8) = *(unsigned char *)(v15 + 8);
  *(unsigned char *)(v14 + 9) = *(unsigned char *)(v15 + 9);
  return a1;
}

uint64_t assignWithTake for BaseModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    unsigned int v11 = *(unsigned __int8 *)(v9 + 17);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)v9 + 2;
    }
    if (v11 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    if (v12 == 1)
    {
      long long v13 = *(_OWORD *)v10;
      *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
      *(_OWORD *)unint64_t v9 = v13;
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    }
    *(unsigned char *)(v9 + 17) = v14;
  }
  unint64_t v15 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(v15 + 9) = *(unsigned char *)(v16 + 9);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  int v7 = v6 + a1;
  unsigned int v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
    unsigned int v9 = (a2 - v7 + 0xFFFF) >> (8 * v8);
    if (v8 <= 3) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = *((unsigned __int8 *)a1 + v8);
        if (!*((unsigned char *)a1 + v8)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)((char *)a1 + v8);
        if (*(unsigned __int16 *)((char *)a1 + v8)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C2C318);
      case 4:
        int v13 = *(_DWORD *)((char *)a1 + v8);
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 <= 3)
        {
          int v16 = *a1;
        }
        else
        {
          int v15 = 0;
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for BaseModifier(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v20 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *unint64_t v20 = 0;
                *(_DWORD *)unint64_t v20 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *unint64_t v20 = a2;
              }
            }
            else
            {
              int v19 = *(void (**)(void))(v6 + 56);
              v19();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 0xFFFF) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = v16 >> v11;
  bzero(a1, ((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10);
  if (v10 <= 3) {
    int v18 = v17 + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 > 3) {
    *(_DWORD *)a1 = v16;
  }
  else {
    *(_WORD *)a1 = v16;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C2C554);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_187C2C57C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for ViewModifier in BaseModifier<A>()
{
  return &protocol witness table for BaseModifier<A>;
}

{
  return &protocol witness table for BaseModifier<A>;
}

_UNKNOWN **base witness table accessor for ViewModifier in LegacyBaseModifier<A>()
{
  return &protocol witness table for LegacyBaseModifier<A>;
}

uint64_t partial apply for closure #1 in static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #1 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #2 in static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #3 in static LegacyBaseModifier._makeViewList(modifier:inputs:body:)(uint64_t a1)
{
  return closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_0);
}

uint64_t type metadata accessor for LegacyBaseModifier.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LegacyBaseModifier.Wrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t partial apply for closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #2 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t partial apply for closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(uint64_t a1)
{
  return closure #3 in static LegacyBaseModifier._makeView(modifier:inputs:body:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t type metadata completion function for LegacyBaseModifier.Transform()
{
  uint64_t result = type metadata accessor for LegacyBaseModifier();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LegacyBaseModifier.Transform(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64) + 7;
  unint64_t v8 = (((((v7 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8;
  if (v6 > 7 || (*(_DWORD *)(v5 + 80) & 0x100000) != 0 || v8 + 11 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    uint64_t v4 = (void *)(v11 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    unint64_t v12 = v8 + 10;
    *a1 = *a2;
    uint64_t v13 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v14 = ((unint64_t)a2 + v6 + 8) & ~v6;
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v13, v14);
    int v15 = (void *)((v7 + v13) & 0xFFFFFFFFFFFFFFF8);
    unsigned int v16 = (uint64_t *)((v7 + v14) & 0xFFFFFFFFFFFFFFF8);
    LODWORD(v17) = -1;
    if ((unint64_t)*v16 < 0xFFFFFFFF) {
      uint64_t v17 = *v16;
    }
    if ((int)v17 - 1 < 0)
    {
      void *v15 = *v16;
      v15[1] = v16[1];
      swift_retain();
      swift_retain();
    }
    else
    {
      *(_OWORD *)int v15 = *(_OWORD *)v16;
    }
    unint64_t v18 = ((unint64_t)v15 + 19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v19 = ((unint64_t)v16 + 19) & 0xFFFFFFFFFFFFFFF8;
    int v20 = *(_DWORD *)v19;
    *(unsigned char *)(v18 + 4) = *(unsigned char *)(v19 + 4);
    *(_DWORD *)unint64_t v18 = v20;
    *(unsigned char *)(v18 + 5) = *(unsigned char *)(v19 + 5);
    *(unsigned char *)(v18 + 6) = *(unsigned char *)(v19 + 6);
    uint64_t v21 = ((unint64_t)v15 + 19) | 7;
    uint64_t v22 = ((unint64_t)v16 + 19) | 7;
    unint64_t v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v24 = (v22 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = *(void *)(v24 + 8);
    *(unsigned char *)(v23 + 16) = *(unsigned char *)(v24 + 16);
    unint64_t v25 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v26 = (v22 + 31) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v25 = *(void *)v26;
    *(unsigned char *)(v25 + 8) = *(unsigned char *)(v26 + 8);
    *(unsigned char *)(v25 + 9) = *(unsigned char *)(v26 + 9);
    *((unsigned char *)v4 + v12) = *((unsigned char *)a2 + v12);
    swift_retain();
    swift_retain();
  }
  swift_retain();
  return v4;
}

void *initializeWithCopy for LegacyBaseModifier.Transform(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 16;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v7 + 8;
  uint64_t v9 = ~v7;
  uint64_t v10 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v11 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v10, v11);
  uint64_t v12 = *(void *)(v6 + 48) + 7;
  uint64_t v13 = (void *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (uint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v15) = -1;
  if ((unint64_t)*v14 < 0xFFFFFFFF) {
    uint64_t v15 = *v14;
  }
  if ((int)v15 - 1 < 0)
  {
    void *v13 = *v14;
    v13[1] = v14[1];
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
  }
  unint64_t v16 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = ((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8;
  int v18 = *(_DWORD *)v17;
  *(unsigned char *)(v16 + 4) = *(unsigned char *)(v17 + 4);
  *(_DWORD *)unint64_t v16 = v18;
  *(unsigned char *)(v16 + 5) = *(unsigned char *)(v17 + 5);
  *(unsigned char *)(v16 + 6) = *(unsigned char *)(v17 + 6);
  uint64_t v19 = ((unint64_t)v13 + 19) | 7;
  uint64_t v20 = ((unint64_t)v14 + 19) | 7;
  unint64_t v21 = (v19 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v21 = *(void *)v22;
  *(void *)(v21 + 8) = *(void *)(v22 + 8);
  *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
  unint64_t v23 = (v19 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v24 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v23 = *(void *)v24;
  *(unsigned char *)(v23 + 8) = *(unsigned char *)(v24 + 8);
  *(unsigned char *)(v23 + 9) = *(unsigned char *)(v24 + 9);
  unint64_t v25 = ((((((v12 + (v8 & v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((unsigned char *)a1 + v25) = *((unsigned char *)a2 + v25);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for LegacyBaseModifier.Transform(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 24;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v7 + 8;
  uint64_t v9 = ~v7;
  uint64_t v10 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v11 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 24))(v10, v11);
  uint64_t v12 = *(void *)(v6 + 40) + 7;
  uint64_t v13 = (uint64_t *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v14 = (uint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v15) = -1;
  if ((unint64_t)*v13 >= 0xFFFFFFFF) {
    LODWORD(v16) = -1;
  }
  else {
    uint64_t v16 = *v13;
  }
  int v17 = v16 - 1;
  uint64_t v18 = *v14;
  if ((unint64_t)*v14 < 0xFFFFFFFF) {
    uint64_t v15 = *v14;
  }
  int v19 = v15 - 1;
  if (v17 < 0)
  {
    if (v19 < 0)
    {
      uint64_t *v13 = v18;
      swift_retain();
      swift_release();
      v13[1] = v14[1];
      swift_retain();
      swift_release();
      goto LABEL_12;
    }
    swift_release();
    swift_release();
    goto LABEL_11;
  }
  if ((v19 & 0x80000000) == 0)
  {
LABEL_11:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    goto LABEL_12;
  }
  uint64_t *v13 = v18;
  v13[1] = v14[1];
  swift_retain();
  swift_retain();
LABEL_12:
  unint64_t v20 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v21 = (unint64_t)v14 + 19;
  unint64_t v22 = ((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8;
  int v23 = *(_DWORD *)v22;
  *(unsigned char *)(v20 + 4) = *(unsigned char *)(v22 + 4);
  *(_DWORD *)unint64_t v20 = v23;
  *(unsigned char *)(v20 + 5) = *(unsigned char *)(v22 + 5);
  *(unsigned char *)(v20 + 6) = *(unsigned char *)(v22 + 6);
  uint64_t v24 = ((unint64_t)v13 + 19) | 7;
  uint64_t v25 = v21 | 7;
  unint64_t v26 = (v24 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = ((v21 | 7) + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v26 = *(void *)v27;
  swift_retain();
  swift_release();
  *(void *)(v26 + 8) = *(void *)(v27 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v26 + 16) = *(unsigned char *)(v27 + 16);
  unint64_t v28 = (v24 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = (v25 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v28 = *(void *)v29;
  swift_retain();
  swift_release();
  *(unsigned char *)(v28 + 8) = *(unsigned char *)(v29 + 8);
  *(unsigned char *)(v28 + 9) = *(unsigned char *)(v29 + 9);
  unint64_t v30 = ((((((v12 + (v8 & v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((unsigned char *)a1 + v30) = *((unsigned char *)a2 + v30);
  return a1;
}

void *initializeWithTake for LegacyBaseModifier.Transform(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32) + 7;
  unint64_t v11 = (v10 + v8) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (v10 + v9) & 0xFFFFFFFFFFFFFFF8;
  long long v13 = *(_OWORD *)v12;
  v12 += 19;
  *(_OWORD *)unint64_t v11 = v13;
  v11 += 19;
  unint64_t v14 = v11 & 0xFFFFFFFFFFFFFFF8;
  int v15 = *(_DWORD *)(v12 & 0xFFFFFFFFFFFFFFF8);
  *(unsigned char *)(v14 + 4) = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF8) + 4);
  *(_DWORD *)unint64_t v14 = v15;
  *(unsigned char *)(v14 + 5) = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF8) + 5);
  *(unsigned char *)(v14 + 6) = *(unsigned char *)((v12 & 0xFFFFFFFFFFFFFFF8) + 6);
  v11 |= 7uLL;
  v12 |= 7uLL;
  unint64_t v16 = (v11 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v18 = *(_OWORD *)v17;
  *(unsigned char *)(v16 + 16) = *(unsigned char *)(v17 + 16);
  *(_OWORD *)unint64_t v16 = v18;
  unint64_t v19 = (v11 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v20 = (v12 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = *(unsigned char *)(v20 + 8);
  *(unsigned char *)(v19 + 9) = *(unsigned char *)(v20 + 9);
  unint64_t v21 = ((((((v10 + ((v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((unsigned char *)a1 + v21) = *((unsigned char *)a2 + v21);
  return a1;
}

void *assignWithTake for LegacyBaseModifier.Transform(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 40;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = v7 + 8;
  uint64_t v9 = ~v7;
  uint64_t v10 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v11 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v6 + 24) + 7;
  long long v13 = (uint64_t *)((v12 + v10) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v14 = (uint64_t *)((v12 + v11) & 0xFFFFFFFFFFFFFFF8);
  LODWORD(v15) = -1;
  if ((unint64_t)*v13 < 0xFFFFFFFF) {
    uint64_t v15 = *v13;
  }
  if ((int)v15 - 1 < 0)
  {
    LODWORD(v16) = -1;
    if ((unint64_t)*v14 < 0xFFFFFFFF) {
      uint64_t v16 = *v14;
    }
    if ((int)v16 - 1 < 0)
    {
      uint64_t *v13 = *v14;
      swift_release();
      v13[1] = v14[1];
      swift_release();
      goto LABEL_9;
    }
    swift_release();
    swift_release();
  }
  *(_OWORD *)long long v13 = *(_OWORD *)v14;
LABEL_9:
  unint64_t v17 = ((unint64_t)v13 + 19) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = ((unint64_t)v14 + 19) & 0xFFFFFFFFFFFFFFF8;
  int v19 = *(_DWORD *)v18;
  *(unsigned char *)(v17 + 4) = *(unsigned char *)(v18 + 4);
  *(_DWORD *)unint64_t v17 = v19;
  *(unsigned char *)(v17 + 5) = *(unsigned char *)(v18 + 5);
  *(unsigned char *)(v17 + 6) = *(unsigned char *)(v18 + 6);
  uint64_t v20 = ((unint64_t)v13 + 19) | 7;
  uint64_t v21 = ((unint64_t)v14 + 19) | 7;
  unint64_t v22 = (v20 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v21 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v22 = *(void *)v23;
  swift_release();
  *(void *)(v22 + 8) = *(void *)(v23 + 8);
  swift_release();
  *(unsigned char *)(v22 + 16) = *(unsigned char *)(v23 + 16);
  unint64_t v24 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v21 + 31) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v24 = *(void *)v25;
  swift_release();
  *(unsigned char *)(v24 + 8) = *(unsigned char *)(v25 + 8);
  *(unsigned char *)(v24 + 9) = *(unsigned char *)(v25 + 9);
  unint64_t v26 = ((((((v12 + (v8 & v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 10;
  *((unsigned char *)a1 + v26) = *((unsigned char *)a2 + v26);
  return a1;
}

uint64_t getEnumTagSinglePayload for LegacyBaseModifier.Transform(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + 7;
  if (v7 < a2)
  {
    unint64_t v9 = ((((((v8 + ((v6 + 8) & ~v6)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 11;
    unsigned int v10 = (a2 - v7 + 0xFFFFFF) >> (8 * v9);
    if (((((((v8 + ((v6 + 8) & ~v6)) & 0xFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v11 = v10 + 1;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v9);
        if (!*((unsigned char *)a1 + v9)) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v9);
        if (*(unsigned __int16 *)((char *)a1 + v9)) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C2D4B8);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v9);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = (v14 << 24) - 0x1000000;
        if (((((((v8 + ((v6 + 8) & ~v6)) & 0xFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8)
        {
          int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        }
        else
        {
          int v16 = 0;
          int v19 = *(_DWORD *)a1;
        }
        return v7 + (v19 | v16) + 1;
      default:
        break;
    }
  }
  uint64_t v17 = ((unint64_t)a1 + v6 + 8) & ~v6;
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(uint64_t))(v4 + 48))(v17);
  }
  unint64_t v18 = *(void *)(((((((v8 + v17) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for LegacyBaseModifier.Transform(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 7;
  unint64_t v11 = ((((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 11;
  char v12 = 8 * v11;
  if (v8 >= a3)
  {
    int v16 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v16)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_31;
        case 3:
          goto LABEL_43;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          goto LABEL_30;
        default:
LABEL_30:
          if (a2)
          {
LABEL_31:
            unint64_t v20 = (unint64_t)&a1[v9 + 8] & ~v9;
            if (v7 < 0x7FFFFFFF)
            {
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 0x10) = 0;
                *(void *)((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) = a2 ^ 0x80000000;
                *(void *)(((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = 0;
              }
              else
              {
                *(void *)(((((((v10 + v20) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 7) & 0xFFFFFFFFFFFFFFF8) + 8) = a2 - 1;
              }
            }
            else
            {
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v13 = (a3 - v8 + 0xFFFFFF) >> v12;
    if (((((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      unsigned int v14 = v13 + 1;
    }
    else {
      unsigned int v14 = 2;
    }
    if (v14 >= 0x10000) {
      int v15 = 4;
    }
    else {
      int v15 = 2;
    }
    if (v14 < 0x100) {
      int v15 = 1;
    }
    if (v14 >= 2) {
      int v16 = v15;
    }
    else {
      int v16 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v17 = ~v8 + a2;
  unsigned int v18 = v17 >> v12;
  bzero(a1, ((((((v10 + ((v9 + 8) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 19) | 7) + 31) & 0xFFFFFFFFFFFFFFF8) + 11);
  if (v11 == 3) {
    int v19 = v18 + 1;
  }
  else {
    int v19 = 1;
  }
  if (v11 == 3)
  {
    *(_WORD *)a1 = v17;
    a1[2] = BYTE2(v17);
  }
  else
  {
    *(_DWORD *)a1 = v17;
  }
  switch(v16)
  {
    case 1:
      a1[v11] = v19;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v19;
      break;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C2D71CLL);
    case 4:
      *(_DWORD *)&a1[v11] = v19;
      break;
    default:
      return;
  }
}

uint64_t assignWithTake for BaseModifier.Transform(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unsigned int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *unsigned int v7 = *v8;
  swift_release();
  unint64_t v9 = ((unint64_t)v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (v9 != v10)
  {
    unsigned int v11 = *(unsigned __int8 *)(v9 + 17);
    if (v11 >= 2) {
      unsigned int v11 = *(_DWORD *)v9 + 2;
    }
    if (v11 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v12 = *(unsigned __int8 *)(v10 + 17);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)v10 + 2;
    }
    if (v12 == 1)
    {
      long long v13 = *(_OWORD *)v10;
      *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
      *(_OWORD *)unint64_t v9 = v13;
      char v14 = 1;
    }
    else
    {
      char v14 = 0;
      *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    }
    *(unsigned char *)(v9 + 17) = v14;
  }
  unint64_t v15 = (v9 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v10 + 25) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v15 = *(void *)v16;
  *(unsigned char *)(v15 + 8) = *(unsigned char *)(v16 + 8);
  *(unsigned char *)(v15 + 9) = *(unsigned char *)(v16 + 9);
  unint64_t v17 = (((((v6 & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 10;
  unint64_t v18 = (a1 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = (a2 + v17 + 7) & 0xFFFFFFFFFFFFFFF8;
  long long v20 = *(_OWORD *)v19;
  *(void *)(v18 + 16) = *(void *)(v19 + 16);
  *(_OWORD *)unint64_t v18 = v20;
  uint64_t v21 = (_OWORD *)((v18 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v22 = (long long *)((v19 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v23 = *v22;
  long long v24 = v22[2];
  v21[1] = v22[1];
  v21[2] = v24;
  *uint64_t v21 = v23;
  unint64_t v25 = ((unint64_t)v21 + 55) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v26 = ((unint64_t)v22 + 55) & 0xFFFFFFFFFFFFFFF8;
  int v27 = *(void *)(v25 + 8);
  if (*(void *)(v25 + 8) >= 0xFFFFFFFFuLL) {
    int v27 = -1;
  }
  int v28 = v27 - 1;
  unint64_t v29 = *(void *)(v26 + 8);
  if (v29 >= 0xFFFFFFFF) {
    LODWORD(v29) = -1;
  }
  int v30 = v29 - 1;
  if (v28 < 0)
  {
    if (v30 < 0)
    {
      swift_weakTakeAssign();
      *(void *)(v25 + 8) = *(void *)(v26 + 8);
      swift_release();
      *(void *)(v25 + 16) = *(void *)(v26 + 16);
      swift_release();
      goto LABEL_22;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_21;
  }
  if ((v30 & 0x80000000) == 0)
  {
LABEL_21:
    long long v31 = *(_OWORD *)v26;
    *(void *)(v25 + 16) = *(void *)(v26 + 16);
    *(_OWORD *)unint64_t v25 = v31;
    goto LABEL_22;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v25 + 8) = *(_OWORD *)(v26 + 8);
LABEL_22:
  *(unsigned char *)(v25 + 24) = *(unsigned char *)(v26 + 24);
  unint64_t v32 = ((unint64_t)v21 + 87) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v33 = ((unint64_t)v22 + 87) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v32 = *(unsigned char *)v33;
  *(void *)(v32 + 8) = *(void *)(v33 + 8);
  swift_release();
  unint64_t v34 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v35 = (v33 + 23) & 0xFFFFFFFFFFFFFFF8;
  char v36 = *(unsigned char *)(v35 + 16);
  char v37 = *(unsigned char *)(v35 + 17);
  uint64_t v38 = *(void *)v34;
  uint64_t v39 = *(void *)(v34 + 8);
  char v40 = *(unsigned char *)(v34 + 17);
  *(_OWORD *)unint64_t v34 = *(_OWORD *)v35;
  uint64_t v41 = *(unsigned __int8 *)(v34 + 16);
  *(unsigned char *)(v34 + 16) = v36;
  *(unsigned char *)(v34 + 17) = v37;
  outlined consume of Environment<Binding<Visibility>?>.Content(v38, v39, v41, v40);
  unint64_t v42 = (v34 + 25) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v43 = (v35 + 25) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v44 = *(void *)v43;
  LOBYTE(v43) = *(unsigned char *)(v43 + 8);
  uint64_t v45 = *(void *)v42;
  uint64_t v46 = *(unsigned __int8 *)(v42 + 8);
  *(void *)unint64_t v42 = v44;
  *(unsigned char *)(v42 + 8) = v43;
  outlined consume of Environment<Bool?>.Content(v45, v46);
  return a1;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  unint64_t v15;
  unint64_t v16;
  long long v17;
  _OWORD *v18;
  long long *v19;
  long long v20;
  long long v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  unint64_t v26;
  int v27;
  long long v28;
  unint64_t v29;
  unint64_t v30;

  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  unsigned int v7 = v6 + a1;
  unsigned int v8 = v6 + a2;
  unint64_t v9 = (v6 + a1 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v9 = *(void *)v10;
  swift_release();
  *(void *)(v9 + 8) = *(void *)(v10 + 8);
  swift_release();
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  unsigned int v11 = (void *)((v8 + 31) & 0xFFFFFFFFFFFFFFF8);
  unsigned int v12 = (void *)((v7 + 31) & 0xFFFFFFFFFFFFFFF8);
  void *v12 = *v11;
  long long v13 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  char v14 = (void *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t *v14 = *v13;
  unint64_t v15 = ((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = ((unint64_t)v13 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = *(_OWORD *)v16;
  *(void *)(v15 + 16) = *(void *)(v16 + 16);
  *(_OWORD *)unint64_t v15 = v17;
  unint64_t v18 = (_OWORD *)((v15 + 31) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v19 = (long long *)((v16 + 31) & 0xFFFFFFFFFFFFFFF8);
  long long v20 = *v19;
  uint64_t v21 = v19[2];
  v18[1] = v19[1];
  void v18[2] = v21;
  *unint64_t v18 = v20;
  unint64_t v22 = ((unint64_t)v18 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = ((unint64_t)v19 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = *(void *)(v22 + 8);
  if (*(void *)(v22 + 8) >= 0xFFFFFFFFuLL) {
    long long v24 = -1;
  }
  unint64_t v25 = v24 - 1;
  unint64_t v26 = *(void *)(v23 + 8);
  if (v26 >= 0xFFFFFFFF) {
    LODWORD(v26) = -1;
  }
  int v27 = v26 - 1;
  if (v25 < 0)
  {
    if (v27 < 0)
    {
      swift_weakTakeAssign();
      *(void *)(v22 + 8) = *(void *)(v23 + 8);
      swift_release();
      *(void *)(v22 + 16) = *(void *)(v23 + 16);
      swift_release();
      goto LABEL_11;
    }
    swift_weakDestroy();
    swift_release();
    swift_release();
    goto LABEL_10;
  }
  if ((v27 & 0x80000000) == 0)
  {
LABEL_10:
    int v28 = *(_OWORD *)v23;
    *(void *)(v22 + 16) = *(void *)(v23 + 16);
    *(_OWORD *)unint64_t v22 = v28;
    goto LABEL_11;
  }
  swift_weakTakeInit();
  *(_OWORD *)(v22 + 8) = *(_OWORD *)(v23 + 8);
LABEL_11:
  unint64_t v29 = (v22 + 27) & 0xFFFFFFFFFFFFFFF8;
  int v30 = (v23 + 27) & 0xFFFFFFFFFFFFFFF8;
  *(_DWORD *)unint64_t v29 = *(_DWORD *)v30;
  *(_DWORD *)(v29 + 4) = *(_DWORD *)(v30 + 4);
  *(unsigned char *)(v29 + 8) = *(unsigned char *)(v30 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for BaseModifier.Transform(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((((((((((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
               + 31) & 0xFFFFFFFFFFFFFFF8)
             + 87) & 0xFFFFFFFFFFFFFFF8)
           + 23) & 0xFFFFFFFFFFFFFFF8)
         + 25) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C2DBD8);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((((((((((((((v6 + 7) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 25) & 0xFFFFFFF8) + 17) & 0xFFFFFFF8)
                   + 31) & 0xFFFFFFF8)
                 + 87) & 0xFFFFFFF8)
               + 23) & 0xFFFFFFF8)
             + 25) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v16 = *a1;
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  if ((v17 + 1) >= 2) {
    return v17;
  }
  else {
    return 0;
  }
}

{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v15;
  int v16;
  unint64_t v17;

  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((((((((v6 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
           + 55) & 0xFFFFFFFFFFFFFFF8)
         + 27) & 0xFFFFFFFFFFFFFFF8)
       + 9;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1882BB374);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((((((((((((v6 + 31) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 15) & 0xFFFFFFF8) + 31) & 0xFFFFFFF8) + 55) & 0xFFFFFFF8)
             + 27) & 0xFFFFFFF8) == 0xFFFFFFF8)
          int v16 = *a1;
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for BaseModifier.Transform(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((((((((((((((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 25) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8)
              + 31) & 0xFFFFFFFFFFFFFFF8)
            + 87) & 0xFFFFFFFFFFFFFFF8)
          + 23) & 0xFFFFFFFFFFFFFFF8)
        + 25) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFE)
            {
              uint64_t v21 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
              if (a2 > 0x7FFFFFFE)
              {
                *uint64_t v21 = 0;
                *(_DWORD *)uint64_t v21 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *uint64_t v21 = a2;
              }
            }
            else
            {
              long long v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187C2DE44);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  size_t v10;
  char v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  void (*v20)(void);
  unint64_t v21;
  uint64_t vars8;

  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((((((((((((v9 + 31) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) + 31) & 0xFFFFFFFFFFFFFFF8)
          + 55) & 0xFFFFFFFFFFFFFFF8)
        + 27) & 0xFFFFFFFFFFFFFFF8)
      + 9;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFF)
            {
              uint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if ((a2 & 0x80000000) != 0)
              {
                *(unsigned char *)(v21 + 16) = 0;
                *(void *)uint64_t v21 = a2 ^ 0x80000000;
                *(void *)(v21 + 8) = 0;
              }
              else
              {
                *(void *)(v21 + 8) = a2 - 1;
              }
            }
            else
            {
              long long v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x1882BB5C8);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LegacyBaseModifier<A>.Transform()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in LegacyBaseModifier<A>.Wrapper()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C2DEDC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)type metadata accessor for BaseModifier.Transform();
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*((void *)v2 - 1) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*((void *)v2 - 1) + 80));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3, v1);
  uint64_t v4 = type metadata accessor for BaseModifier();
  swift_release();
  outlined consume of StateOrBinding<Bool>(*(void *)(v3 + *(int *)(v4 + 40)), *(void *)(v3 + *(int *)(v4 + 40) + 8), *(unsigned __int8 *)(v3 + *(int *)(v4 + 40) + 16), *(unsigned char *)(v3 + *(int *)(v4 + 40) + 17));
  if (*(void *)(v3 + v2[11] + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined consume of Environment<Binding<Visibility>?>.Content(*(void *)(v3 + v2[14]), *(void *)(v3 + v2[14] + 8), *(unsigned __int8 *)(v3 + v2[14] + 16), *(unsigned char *)(v3 + v2[14] + 17));
  outlined consume of Environment<Bool?>.Content(*(void *)(v3 + v2[15]), *(unsigned __int8 *)(v3 + v2[15] + 8));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in LegacyBaseModifier.Transform.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for LegacyBaseModifier.Transform() - 8);
  unsigned int v8 = (void *)(v2 + ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));

  return closure #1 in LegacyBaseModifier.Transform.body(content:)(a1, a2, v8, v5, v6);
}

uint64_t objectdestroy_44Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LegacyBaseModifier.Transform() - 8) + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = type metadata accessor for LegacyBaseModifier();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v0 + v3 + *(int *)(v4 + 36), v1);
  if (*(void *)(v0 + v3 + *(int *)(v4 + 40)) != 1)
  {
    swift_release();
    swift_release();
  }
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)()
{
  type metadata accessor for LegacyBaseModifier.Transform();

  return implicit closure #5 in implicit closure #4 in closure #1 in LegacyBaseModifier.Transform.body(content:)();
}

uint64_t partial apply for closure #1 in LegacyBaseModifier.Transform.dismiss()()
{
  return LegacyBaseModifier.isPresented.setter();
}

uint64_t sub_187C2E318()
{
  type metadata accessor for BaseModifier.Transform();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for NavigationLinkButtonStyle();
  swift_getWitnessTable();
  type metadata accessor for PrimitiveButtonStyleContainerModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41280];
  type metadata accessor for NavigationState.ListKey?(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for UpdateViewDestinationViewModifier();
  type metadata accessor for UpdateViewDestinationRequestProcessor();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, v0);
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t sub_187C2E5F0()
{
  type metadata accessor for LegacyBaseModifier.Transform();
  swift_getWitnessTable();
  type metadata accessor for _ViewModifier_Content();
  type metadata accessor for NavigationLinkButtonStyle();
  swift_getWitnessTable();
  type metadata accessor for PrimitiveButtonStyleContainerModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41280];
  type metadata accessor for NavigationState.ListKey?(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>(255, &lazy cache variable for type metadata for TransactionalPreferenceTransformModifier<NavigationDestinationsKey>, (uint64_t)&type metadata for NavigationDestinationsKey, (uint64_t)&protocol witness table for NavigationDestinationsKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TransactionalPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  _s14AttributeGraph8ExternalVySbGACyxGAA01_A4BodyAAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, v0);
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for BridgedListState.ScrollTarget(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for IndexPath();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    size_t v10 = (char *)a1 + v8;
    char v11 = (char *)a2 + v8;
    *(_OWORD *)size_t v10 = *(_OWORD *)v11;
    v10[16] = v11[16];
    *((unsigned char *)a1 + v9) = *((unsigned char *)a2 + v9);
  }
  return a1;
}

uint64_t destroy for BridgedListState.ScrollTarget(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for IndexPath();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithCopy for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (long long *)(a2 + v7);
  long long v10 = *v9;
  *(unsigned char *)(v8 + 16) = *((unsigned char *)v9 + 16);
  *(_OWORD *)uint64_t v8 = v10;
  *(unsigned char *)(a1 + *(int *)(a3 + 24)) = *(unsigned char *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t initializeWithTake for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t assignWithTake for BridgedListState.ScrollTarget(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(unsigned char *)(v9 + 16) = *(unsigned char *)(v10 + 16);
  *(unsigned char *)(a1 + v8) = *(unsigned char *)(a2 + v8);
  return a1;
}

uint64_t sub_187C2EBD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for IndexPath();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 2) {
      return ((v10 + 2147483646) & 0x7FFFFFFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_187C2ECA0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24)) = a2 + 1;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for BridgedListState(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for BridgedListState.ScrollTarget(0);
    uint64_t v11 = *(void *)(v10 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10))
    {
      type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
      memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64));
    }
    else
    {
      uint64_t v14 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16))(v8, v9, v14);
      uint64_t v15 = *(int *)(v10 + 20);
      unsigned int v16 = &v8[v15];
      unsigned int v17 = &v9[v15];
      *(_OWORD *)unsigned int v16 = *(_OWORD *)v17;
      v16[16] = v17[16];
      v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
    uint64_t v18 = a3[6];
    uint64_t v19 = a3[7];
    long long v20 = (char *)v4 + v18;
    uint64_t v21 = (char *)a2 + v18;
    v20[112] = v21[112];
    long long v22 = *((_OWORD *)v21 + 6);
    long long v23 = *((_OWORD *)v21 + 4);
    *((_OWORD *)v20 + 5) = *((_OWORD *)v21 + 5);
    *((_OWORD *)v20 + 6) = v22;
    long long v24 = *((_OWORD *)v21 + 1);
    *(_OWORD *)long long v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v24;
    long long v25 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v25;
    *((_OWORD *)v20 + 4) = v23;
    *(_DWORD *)((char *)v4 + v19) = *(_DWORD *)((char *)a2 + v19);
  }
  return v4;
}

void *initializeWithTake for BridgedListState(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    uint64_t v12 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 32))(v7, v8, v12);
    uint64_t v13 = *(int *)(v9 + 20);
    uint64_t v14 = &v7[v13];
    uint64_t v15 = &v8[v13];
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
    v14[16] = v15[16];
    v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  uint64_t v16 = a3[6];
  uint64_t v17 = a3[7];
  uint64_t v18 = (char *)a1 + v16;
  uint64_t v19 = (char *)a2 + v16;
  v18[112] = v19[112];
  long long v20 = *((_OWORD *)v19 + 6);
  long long v21 = *((_OWORD *)v19 + 4);
  *((_OWORD *)v18 + 5) = *((_OWORD *)v19 + 5);
  *((_OWORD *)v18 + 6) = v20;
  long long v22 = *((_OWORD *)v19 + 1);
  *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v22;
  long long v23 = *((_OWORD *)v19 + 3);
  *((_OWORD *)v18 + 2) = *((_OWORD *)v19 + 2);
  *((_OWORD *)v18 + 3) = v23;
  *((_OWORD *)v18 + 4) = v21;
  *(_DWORD *)((char *)a1 + v17) = *(_DWORD *)((char *)a2 + v17);
  return a1;
}

uint64_t sub_187C2F124(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_187C2F1B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t ListScrollable.init(state:dataSourceProvider:scrollView:children:lastUpdateSeed:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a1;
  uint64_t v11 = (int *)type metadata accessor for ListScrollable();
  uint64_t v12 = (char *)a6 + v11[9];
  uint64_t v13 = type metadata accessor for ListScrollable.DataSourceProvider();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32))(v12, a2, v13);
  *(void *)((char *)a6 + v11[10]) = a3;
  *(void *)((char *)a6 + v11[11]) = a4;
  *(void *)((char *)a6 + v11[12]) = a5;
  return result;
}

unint64_t lazy protocol witness table accessor for type ListCoreOptions and conformance ListCoreOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions;
  if (!lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListCoreOptions and conformance ListCoreOptions);
  }
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance ListScrollViewProvider@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = MEMORY[0x18C119DF0](v1);
  *a1 = result;
  return result;
}

uint64_t ListScrollable.state.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for BridgedListState(0);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of BridgedListState(WeakValue, a1);
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v4 = 1;
  }
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v5(a1, v4, 1, v2);
}

uint64_t ListScrollable.scrollView.getter()
{
  type metadata accessor for UIScrollView?(0, (unint64_t *)&lazy cache variable for type metadata for UIScrollView?, (uint64_t)&lazy cache variable for type metadata for UIScrollView, 0x1E4FB1BE0, (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for NSObject);
  Weakuint64_t Value = (id *)AGGraphGetWeakValue();
  if (!WeakValue) {
    return 1;
  }
  id v1 = *WeakValue;
  id v2 = *WeakValue;
  return (uint64_t)v1;
}

uint64_t ListScrollable.children.getter()
{
  type metadata accessor for [Scrollable]();
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

BOOL ListScrollable.scrollToIndex(_:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v28 - v6;
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState?, (void (*)(uint64_t))type metadata accessor for BridgedListState);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for BridgedListState(0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  ListScrollable.state.getter((uint64_t)v10);
  int v15 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  if (v15 == 1)
  {
    _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for BridgedListState?, (uint64_t)type metadata accessor for BridgedListState, (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
  }
  else
  {
    outlined init with take of BridgedListState((uint64_t)v10, (uint64_t)v14, type metadata accessor for BridgedListState);
    static Transaction.current.getter();
    uint64_t v16 = type metadata accessor for IndexPath();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16))(v7, a1, v16);
    uint64_t v17 = Transaction.scrollTargetAnchor.getter();
    uint64_t v28 = a2;
    uint64_t v19 = v18;
    char v21 = v20;
    char v22 = Transaction.isAnimated.getter();
    uint64_t v23 = type metadata accessor for BridgedListState.ScrollTarget(0);
    long long v24 = &v7[*(int *)(v23 + 20)];
    *(void *)long long v24 = v17;
    *((void *)v24 + 1) = v19;
    v24[16] = v21 & 1;
    v7[*(int *)(v23 + 24)] = v22 & 1;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56))(v7, 0, 1, v23);
    outlined assign with take of AnyHashable?((uint64_t)v7, (uint64_t)&v14[*(int *)(v11 + 20)], (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BridgedListState.ScrollTarget?);
    uint64_t v25 = *(uint64_t *)((char *)v2 + *(int *)(v28 + 48));
    swift_beginAccess();
    int v26 = *(_DWORD *)(v25 + 16) + 1;
    *(_DWORD *)(v25 + 16) = v26;
    *(_DWORD *)&v14[*(int *)(v11 + 28)] = v26;
    BridgedListState.commit(to:)(*v2);
    swift_release();
    outlined destroy of BridgedListState.ScrollTarget((uint64_t)v14, type metadata accessor for BridgedListState);
  }
  return v15 != 1;
}

uint64_t closure #1 in ListScrollable.scroll<A>(to:)(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v22[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *v14;
  outlined init with copy of TableColumnList(v16, (uint64_t)v22);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a3, a5);
  if (v15)
  {
    char v17 = 1;
  }
  else
  {
    uint64_t v18 = v23;
    uint64_t v19 = v24;
    __swift_project_boxed_opaque_existential_1(v22, v23);
    char v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 8))(v13, a5, a7, v18, v19);
  }
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, a5);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  *a1 = v17 & 1;
  return result;
}

uint64_t ListScrollable.runScrollTest(_:scrollMode:)(uint64_t a1, unint64_t *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  uint64_t v4 = (void *)ListScrollable.scrollView.getter();
  if ((unint64_t)v4 >= 2)
  {
    uint64_t v6 = v4;
    v8[0] = v2;
    v8[1] = v3;
    char v5 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v4, v8, 0, 0);
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v6);
  }
  else
  {
    char v5 = 0;
  }
  return v5 & 1;
}

uint64_t ListScrollable.runScrollTest(_:scrollMode:onComplete:)(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  uint64_t v8 = (void *)ListScrollable.scrollView.getter();
  if ((unint64_t)v8 >= 2)
  {
    uint64_t v10 = v8;
    v12[0] = v6;
    v12[1] = v7;
    char v9 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v8, v12, a3, a4);
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v10);
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t ListScrollable.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1, uint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v8 = a2[1];
  unint64_t v10 = *a3;
  unint64_t v11 = a3[1];
  unint64_t v12 = ListScrollable.scrollView.getter();
  if (v12 >= 2)
  {
    uint64_t v14 = (void *)v12;
    v18[0] = v10;
    v18[1] = v11;
    outlined init with copy of PPTTestCase(a1, (uint64_t)v17);
    char v15 = (void *)swift_allocObject();
    outlined init with take of PPTTestCase((uint64_t)v17, (uint64_t)(v15 + 2));
    v15[8] = v9;
    v15[9] = v8;
    v15[10] = a4;
    v15[11] = a5;
    swift_bridgeObjectRetain();
    outlined copy of AppIntentExecutor?(a4);
    char v13 = PPTTestCase.runScrollTest(_:scrollMode:onComplete:)(v14, v18, (uint64_t)partial apply for closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:), (uint64_t)v15);
    swift_release();
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v14);
  }
  else
  {
    char v13 = 0;
  }
  return v13 & 1;
}

uint64_t ListScrollable.mapFirstChild<A, B>(ofType:body:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v31 = a1;
  uint64_t v32 = a2;
  uint64_t v33 = a6;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v28 - v12;
  uint64_t v14 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v29 = *(void *)(v18 - 8);
  uint64_t v30 = v18;
  double v19 = MEMORY[0x1F4188790](v18);
  char v21 = (char *)&v28 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v17, v6, a3, v19);
  int v22 = swift_dynamicCast();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(a4 - 8) + 56))(v13, v22 ^ 1u, 1, a4);
  uint64_t v23 = *(void *)(a3 + 24);
  uint64_t v35 = *(void *)(a3 + 16);
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v38 = v23;
  uint64_t v39 = v31;
  uint64_t v40 = v32;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.actionSheet<A>(item:content:), (uint64_t)v34, MEMORY[0x1E4FBC248], a5, v24, (uint64_t)v21);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v25 = *(void *)(a5 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v21, 1, a5) == 1)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v25 + 56))(v33, 1, 1, a5);
    return (*(uint64_t (**)(char *, uint64_t))(v29 + 8))(v21, v30);
  }
  else
  {
    uint64_t v27 = v33;
    (*(void (**)(uint64_t, char *, uint64_t))(v25 + 32))(v33, v21, a5);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v27, 0, 1, a5);
  }
}

BOOL protocol witness for Scrollable.scroll<A>(to:) in conformance ListScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return ListScrollable.scroll<A>(to:)(a1, a4, a2, a3);
}

uint64_t protocol witness for Scrollable.mapFirstChild<A, B>(ofType:body:) in conformance ListScrollable<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return ListScrollable.mapFirstChild<A, B>(ofType:body:)(a1, a2, a5, a3, a4, a6);
}

unint64_t ListScrollable.visibleHeaderFooterIDs.getter()
{
  uint64_t v0 = type metadata accessor for IndexPath();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0);
  v92 = (char *)v77 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v3);
  char v5 = (char *)v77 - v4;
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v77 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v77 - v10;
  unint64_t v12 = ListScrollable.scrollView.getter();
  if (v12 < 2) {
    goto LABEL_27;
  }
  char v13 = (char *)v12;
  type metadata accessor for UpdateCoalescingTableView();
  uint64_t v14 = (void *)swift_dynamicCastClass();
  if (!v14)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v13);
LABEL_27:
    unint64_t v39 = ListScrollable.scrollView.getter();
    if (v39 < 2) {
      return MEMORY[0x1E4FBC860];
    }
    uint64_t v40 = (void *)v39;
    type metadata accessor for UpdateCoalescingCollectionView(0);
    uint64_t v41 = (void *)swift_dynamicCastClass();
    if (!v41)
    {
      v57 = v40;
LABEL_47:
      outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v57);
      return MEMORY[0x1E4FBC860];
    }
    id v42 = v41;
    v79 = (char *)v40;
    id v90 = (id)*MEMORY[0x1E4FB2770];
    id v43 = objc_msgSend(v41, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
    uint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    uint64_t v45 = *(void *)(v44 + 16);
    uint64_t v80 = v44;
    uint64_t v81 = v1;
    id v91 = v42;
    if (!v45)
    {
      uint64_t v48 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
      double v19 = (char *)MEMORY[0x1E4FBC860];
      v58 = &selRef_setObscuresBackgroundDuringPresentation_;
      v48(v11, 1, 1, v0);
      goto LABEL_52;
    }
    v78 = v8;
    v88 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v89 = v1 + 16;
    unint64_t v46 = v44 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
    v85 = *(void (***)(char *, char *, uint64_t))(v1 + 72);
    v86 = (unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
    v83 = (void (**)(char *, uint64_t))(v1 + 8);
    v84 = (void (**)(char *, char *, uint64_t))(v1 + 32);
    double v19 = (char *)MEMORY[0x1E4FBC860];
    v87 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
    v77[1] = (v1 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    v88(v11, v46, v0);
    while (1)
    {
      uint64_t v48 = *v87;
      (*v87)(v11, 0, 1, v0);
      if ((*v86)(v11, 1, v0) == 1)
      {
        uint64_t v1 = v81;
        uint64_t v8 = v78;
        id v42 = v91;
        v58 = &selRef_setObscuresBackgroundDuringPresentation_;
        goto LABEL_52;
      }
      (*v84)(v5, v11, v0);
      id v49 = v90;
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      id v51 = objc_msgSend(v91, sel_supplementaryViewForElementKind_atIndexPath_, v49, isa);

      if (!v51) {
        goto LABEL_33;
      }
      type metadata accessor for ListCollectionViewCell();
      uint64_t v52 = swift_dynamicCastClass();
      if (!v52) {
        goto LABEL_32;
      }
      uint64_t v53 = *(void *)(v52 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
      if (v53) {
        break;
      }
      (*v83)(v5, v0);

LABEL_34:
      v46 += (unint64_t)v85;
      if (!--v45)
      {
        uint64_t v1 = v81;
        uint64_t v8 = v78;
        id v42 = v91;
        v58 = &selRef_setObscuresBackgroundDuringPresentation_;
        v48(v11, 1, 1, v0);
LABEL_52:
        swift_bridgeObjectRelease();
        uint64_t v59 = v58[292];
        id v90 = (id)*MEMORY[0x1E4FB2760];
        id v60 = [v42 v59];
        uint64_t v61 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

        uint64_t v62 = v61;
        uint64_t v63 = *(void *)(v61 + 16);
        v82 = (void (**)(char *, uint64_t))v62;
        if (!v63)
        {
LABEL_68:
          v48(v8, 1, 1, v0);
LABEL_69:
          swift_bridgeObjectRelease();
          uint64_t v38 = v79;
          goto LABEL_70;
        }
        uint64_t v64 = v1 + 16;
        v88 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
        uint64_t v89 = v1 + 16;
        unint64_t v65 = v62 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
        v86 = *(unsigned int (***)(char *, uint64_t, uint64_t))(v1 + 72);
        v87 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
        v66 = (unsigned int (**)(char *, uint64_t, uint64_t))(v1 + 48);
        v84 = (void (**)(char *, char *, uint64_t))(v64 - 8);
        v85 = (void (**)(char *, char *, uint64_t))(v64 + 16);
        v88(v8, v65, v0);
        while (2)
        {
          v48(v8, 0, 1, v0);
          if ((*v66)(v8, 1, v0) == 1) {
            goto LABEL_69;
          }
          v68 = v8;
          (*v85)(v92, v8, v0);
          id v69 = v90;
          Class v70 = IndexPath._bridgeToObjectiveC()().super.isa;
          id v71 = objc_msgSend(v91, sel_supplementaryViewForElementKind_atIndexPath_, v69, v70);

          if (!v71) {
            goto LABEL_56;
          }
          type metadata accessor for ListCollectionViewCell();
          uint64_t v72 = swift_dynamicCastClass();
          if (!v72) {
            goto LABEL_55;
          }
          uint64_t v73 = *(void *)(v72 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
          if (v73)
          {
            uint64_t v93 = *(void *)(v72 + direct field offset for ListCollectionViewCellBase.viewListID);
            uint64_t v94 = v73;
            _ViewList_ID.canonicalID.getter();
            uint64_t v74 = v95;
            v83 = v96;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
            }
            unint64_t v76 = *((void *)v19 + 2);
            unint64_t v75 = *((void *)v19 + 3);
            if (v76 >= v75 >> 1) {
              double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v75 > 1), v76 + 1, 1, v19);
            }
            *((void *)v19 + 2) = v76 + 1;
            v67 = &v19[16 * v76];
            *((void *)v67 + 4) = v74;
            *((void *)v67 + 5) = v83;
LABEL_55:

LABEL_56:
            ((void (*)(char *, uint64_t))*v84)(v92, v0);
          }
          else
          {
            ((void (*)(char *, uint64_t))*v84)(v92, v0);
          }
          uint64_t v8 = v68;
          v65 += (unint64_t)v86;
          if (!--v63) {
            goto LABEL_68;
          }
          v88(v68, v65, v0);
          continue;
        }
      }
      v88(v11, v46, v0);
    }
    uint64_t v93 = *(void *)(v52 + direct field offset for ListCollectionViewCellBase.viewListID);
    uint64_t v94 = v53;
    _ViewList_ID.canonicalID.getter();
    uint64_t v54 = v95;
    v82 = v96;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v56 = *((void *)v19 + 2);
    unint64_t v55 = *((void *)v19 + 3);
    if (v56 >= v55 >> 1) {
      double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v55 > 1), v56 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v56 + 1;
    uint64_t v47 = &v19[16 * v56];
    *((void *)v47 + 4) = v54;
    *((void *)v47 + 5) = v82;
LABEL_32:

LABEL_33:
    (*v83)(v5, v0);
    goto LABEL_34;
  }
  uint64_t v15 = v14;
  unint64_t result = (unint64_t)objc_msgSend(v14, sel_numberOfSections);
  if ((result & 0x8000000000000000) == 0)
  {
    char v17 = (char *)result;
    if (result)
    {
      v92 = v13;
      uint64_t v18 = 0;
      double v19 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        id v21 = objc_msgSend(v15, sel_headerViewForSection_, v18);
        if (v21)
        {
          int v22 = v21;
          type metadata accessor for ListTableViewHeaderFooter();
          uint64_t v23 = swift_dynamicCastClass();
          if (v23)
          {
            uint64_t v24 = *(void *)(v23 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
            if (v24)
            {
              uint64_t v93 = *(void *)(v23 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
              uint64_t v94 = v24;
              _ViewList_ID.canonicalID.getter();
              uint64_t v25 = v95;
              int v26 = v96;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
              }
              unint64_t v28 = *((void *)v19 + 2);
              unint64_t v27 = *((void *)v19 + 3);
              if (v28 >= v27 >> 1) {
                double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v27 > 1), v28 + 1, 1, v19);
              }
              *((void *)v19 + 2) = v28 + 1;
              uint64_t v29 = &v19[16 * v28];
              *((void *)v29 + 4) = v25;
              *((void *)v29 + 5) = v26;
            }
          }
        }
        id v30 = objc_msgSend(v15, sel_footerViewForSection_, v18);
        if (v30)
        {
          uint64_t v31 = v30;
          type metadata accessor for ListTableViewHeaderFooter();
          uint64_t v32 = swift_dynamicCastClass();
          if (v32)
          {
            uint64_t v33 = *(void *)(v32 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
            if (v33)
            {
              uint64_t v93 = *(void *)(v32 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
              uint64_t v94 = v33;
              _ViewList_ID.canonicalID.getter();
              uint64_t v34 = v95;
              uint64_t v35 = v96;
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
              }
              unint64_t v37 = *((void *)v19 + 2);
              unint64_t v36 = *((void *)v19 + 3);
              if (v37 >= v36 >> 1) {
                double v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v19);
              }
              *((void *)v19 + 2) = v37 + 1;
              uint64_t v20 = &v19[16 * v37];
              *((void *)v20 + 4) = v34;
              *((void *)v20 + 5) = v35;
            }
          }
        }
        ++v18;
      }
      while (v17 != v18);
      uint64_t v38 = v92;
LABEL_70:
      outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v38);
      return (unint64_t)v19;
    }
    v57 = v13;
    goto LABEL_47;
  }
  __break(1u);
  return result;
}

void ListScrollable.indexPathForHeaderFooterID(_:)(unsigned int *a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v110 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  v106 = (char *)&v92 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v92 - v7;
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  MEMORY[0x1F4188790](v9 - 8);
  v111 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  char v13 = (char *)&v92 - v12;
  uint64_t v109 = *a1;
  uint64_t v108 = a1[1];
  uint64_t v14 = *((void *)a1 + 1);
  unint64_t v15 = ListScrollable.scrollView.getter();
  if (v15 < 2)
  {
LABEL_31:
    unint64_t v52 = ListScrollable.scrollView.getter();
    if (v52 >= 2)
    {
      uint64_t v53 = (void *)v52;
      type metadata accessor for UpdateCoalescingCollectionView(0);
      uint64_t v54 = (void *)swift_dynamicCastClass();
      if (!v54)
      {
        id v72 = v53;
LABEL_48:
        outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v72);
        goto LABEL_66;
      }
      unint64_t v55 = v54;
      id v95 = v53;
      v96 = a2;
      id v107 = (id)*MEMORY[0x1E4FB2770];
      id v56 = objc_msgSend(v54, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
      uint64_t v57 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      uint64_t v58 = *(void *)(v57 + 16);
      uint64_t v97 = v14;
      v112 = v55;
      uint64_t v94 = v57;
      if (v58)
      {
        v103 = *(void (**)(char *, unint64_t, uint64_t))(v110 + 16);
        unint64_t v59 = v57 + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
        id v60 = *(void (***)(char *, uint64_t))(v110 + 72);
        v102 = (unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
        v100 = v60;
        v101 = (void (**)(char *, char *, uint64_t))(v110 + 32);
        uint64_t v93 = v109 | (v108 << 32);
        uint64_t v104 = v110 + 16;
        v105 = (void (**)(char *, void, uint64_t, uint64_t))(v110 + 56);
        v99 = (void (**)(char *, uint64_t))(v110 + 8);
        unint64_t v92 = (v110 + 56) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
        uint64_t v61 = v106;
        v103(v13, v59, v4);
        while (1)
        {
          uint64_t v62 = *v105;
          (*v105)(v13, 0, 1, v4);
          if ((*v102)(v13, 1, v4) == 1) {
            goto LABEL_51;
          }
          v98 = v62;
          uint64_t v63 = *v101;
          (*v101)(v8, v13, v4);
          id v64 = v107;
          Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
          id v66 = objc_msgSend(v55, sel_supplementaryViewForElementKind_atIndexPath_, v64, isa);

          if (v66)
          {
            type metadata accessor for ListCollectionViewCell();
            uint64_t v67 = swift_dynamicCastClass();
            if (v67)
            {
              uint64_t v68 = *(void *)(v67 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
              if (v68)
              {
                unint64_t v113 = *(void *)(v67 + direct field offset for ListCollectionViewCellBase.viewListID);
                uint64_t v114 = v68;
                _ViewList_ID.canonicalID.getter();
                unint64_t v113 = __PAIR64__(v108, v109);
                uint64_t v114 = v97;
                swift_retain();
                swift_retain();
                char v69 = MEMORY[0x18C10D6E0](&v115, &v113);
                uint64_t v61 = v106;
                swift_release();

                swift_release();
                swift_release();
                if (v69)
                {
                  swift_bridgeObjectRelease();
                  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v95);
                  id v90 = v96;
                  v63(v96, v8, v4);
                  v98(v90, 0, 1, v4);
                  return;
                }
              }
              else
              {
                uint64_t v70 = v97;
                swift_retain();

                outlined consume of Text.LineStyle?(0, 1);
                outlined consume of Text.LineStyle?(v93, v70);
              }
            }
            else
            {
            }
          }
          (*v99)(v8, v4);
          v59 += (unint64_t)v100;
          --v58;
          unint64_t v55 = v112;
          if (!v58) {
            break;
          }
          v103(v13, v59, v4);
        }
        uint64_t v62 = v98;
        v98(v13, 1, 1, v4);
      }
      else
      {
        uint64_t v62 = *(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56);
        uint64_t v61 = v106;
        v62(v13, 1, 1, v4);
      }
LABEL_51:
      swift_bridgeObjectRelease();
      id v107 = (id)*MEMORY[0x1E4FB2760];
      id v73 = objc_msgSend(v55, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
      uint64_t v74 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      v99 = (void (**)(char *, uint64_t))v74;
      uint64_t v75 = *(void *)(v74 + 16);
      unint64_t v76 = v111;
      if (v75)
      {
        v77 = *(void (**)(char *, unint64_t, uint64_t))(v110 + 16);
        v78 = (char *)v99
            + ((*(unsigned __int8 *)(v110 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v110 + 80));
        v101 = *(void (***)(char *, char *, uint64_t))(v110 + 72);
        uint64_t v104 = v110 + 16;
        v105 = (void (**)(char *, void, uint64_t, uint64_t))(v110 + 56);
        v79 = (unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 48);
        v102 = (unsigned int (**)(char *, uint64_t, uint64_t))(v110 + 32);
        v103 = v77;
        v98 = (void (*)(char *, void, uint64_t, uint64_t))(v109 | (v108 << 32));
        v100 = (void (**)(char *, uint64_t))(v110 + 8);
        v77(v111, (unint64_t)v78, v4);
        while (1)
        {
          v62(v76, 0, 1, v4);
          if ((*v79)(v76, 1, v4) == 1) {
            break;
          }
          uint64_t v80 = v62;
          uint64_t v81 = *v102;
          (*v102)(v61, (uint64_t)v76, v4);
          id v82 = v107;
          Class v83 = IndexPath._bridgeToObjectiveC()().super.isa;
          id v84 = objc_msgSend(v55, sel_supplementaryViewForElementKind_atIndexPath_, v82, v83);

          if (v84)
          {
            type metadata accessor for ListCollectionViewCell();
            uint64_t v85 = swift_dynamicCastClass();
            if (v85)
            {
              uint64_t v86 = *(void *)(v85 + direct field offset for ListCollectionViewCellBase.viewListID + 8);
              if (v86)
              {
                unint64_t v113 = *(void *)(v85 + direct field offset for ListCollectionViewCellBase.viewListID);
                uint64_t v114 = v86;
                _ViewList_ID.canonicalID.getter();
                unint64_t v113 = __PAIR64__(v108, v109);
                uint64_t v114 = v97;
                swift_retain();
                swift_retain();
                char v87 = MEMORY[0x18C10D6E0](&v115, &v113);
                uint64_t v61 = v106;
                swift_release();

                swift_release();
                swift_release();
                if (v87)
                {
                  swift_bridgeObjectRelease();
                  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v95);
                  id v91 = v96;
                  v81(v96, (uint64_t)v61, v4);
                  v80(v91, 0, 1, v4);
                  return;
                }
              }
              else
              {
                uint64_t v88 = v97;
                swift_retain();

                outlined consume of Text.LineStyle?(0, 1);
                outlined consume of Text.LineStyle?((uint64_t)v98, v88);
              }
            }
            else
            {
            }
          }
          (*v100)(v61, v4);
          v78 = (char *)v101 + (void)v78;
          --v75;
          unint64_t v76 = v111;
          unint64_t v55 = v112;
          uint64_t v62 = v80;
          if (!v75) {
            goto LABEL_63;
          }
          v103(v111, (unint64_t)v78, v4);
        }
      }
      else
      {
LABEL_63:
        v62(v76, 1, 1, v4);
      }
      swift_bridgeObjectRelease();
      id v71 = v95;
LABEL_65:
      outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v71);
      a2 = v96;
    }
LABEL_66:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v110 + 56))(a2, 1, 1, v4);
    return;
  }
  uint64_t v16 = (void *)v15;
  type metadata accessor for UpdateCoalescingTableView();
  char v17 = (void *)swift_dynamicCastClass();
  if (!v17)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v16);
    goto LABEL_31;
  }
  uint64_t v18 = v17;
  id v107 = v16;
  unint64_t v19 = (unint64_t)objc_msgSend(v17, sel_numberOfSections);
  if ((v19 & 0x8000000000000000) != 0)
  {
LABEL_73:
    __break(1u);
LABEL_74:
    __break(1u);
    return;
  }
  unint64_t v20 = v19;
  if (!v19)
  {
    id v72 = v107;
    goto LABEL_48;
  }
  v96 = a2;
  uint64_t v21 = 0;
  int v22 = &selRef_setObscuresBackgroundDuringPresentation_;
  uint64_t v23 = v109 | (v108 << 32);
  v111 = (char *)v23;
  v112 = (void *)v4;
  while (1)
  {
    if (v20 == v21)
    {
      __break(1u);
      goto LABEL_73;
    }
    id v26 = objc_msgSend(v18, v22[21], v21);
    if (v26)
    {
      unint64_t v27 = v26;
      type metadata accessor for ListTableViewHeaderFooter();
      uint64_t v28 = swift_dynamicCastClass();
      if (!v28)
      {
LABEL_21:

        goto LABEL_22;
      }
      uint64_t v29 = *(void *)(v28 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
      if (v29)
      {
        unint64_t v113 = *(void *)(v28 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
        uint64_t v114 = v29;
        id v30 = v27;
        swift_retain();
        _ViewList_ID.canonicalID.getter();
        unsigned int v31 = v115;
        unsigned int v32 = HIDWORD(v115);
        uint64_t v33 = v116;
        unint64_t v34 = v115 | ((unint64_t)HIDWORD(v115) << 32);
        uint64_t v115 = v23;
        uint64_t v116 = v14;
        if (v33 != 1)
        {
          unint64_t v113 = __PAIR64__(v32, v31);
          uint64_t v114 = v33;
          swift_retain();
          char v36 = MEMORY[0x18C10D6E0](&v115, &v113);
          outlined consume of Text.LineStyle?(v34, v33);
          swift_release();
          swift_release();
          int v22 = &selRef_setObscuresBackgroundDuringPresentation_;
          if (v36)
          {
            uint64_t v89 = v96;
            IndexPath.init(index:)();

            outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v107);
            id v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56);
            char v50 = v89;
            uint64_t v51 = (uint64_t)v112;
            goto LABEL_69;
          }
          goto LABEL_20;
        }
        int v22 = &selRef_setObscuresBackgroundDuringPresentation_;
      }
      else
      {
        id v35 = v27;
        swift_retain();
        unint64_t v34 = 0;
      }
      outlined consume of Text.LineStyle?(v23, v14);
      outlined consume of Text.LineStyle?(v34, 1);
LABEL_20:

      uint64_t v4 = (uint64_t)v112;
      goto LABEL_21;
    }
LABEL_22:
    id v37 = objc_msgSend(v18, sel_footerViewForSection_, v21);
    if (!v37) {
      goto LABEL_10;
    }
    uint64_t v38 = v37;
    type metadata accessor for ListTableViewHeaderFooter();
    uint64_t v39 = swift_dynamicCastClass();
    if (v39) {
      break;
    }
LABEL_9:

LABEL_10:
    if (v20 == ++v21)
    {
      id v71 = v107;
      goto LABEL_65;
    }
  }
  uint64_t v40 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID + 8);
  if (!v40)
  {
    swift_retain();
    id v24 = v38;
    unint64_t v25 = 0;
    goto LABEL_7;
  }
  unint64_t v113 = *(void *)(v39 + OBJC_IVAR____TtC7SwiftUI25ListTableViewHeaderFooter_viewListID);
  uint64_t v114 = v40;
  swift_retain();
  id v41 = v38;
  _ViewList_ID.canonicalID.getter();
  unsigned int v42 = v115;
  unsigned int v43 = HIDWORD(v115);
  uint64_t v44 = v116;
  unint64_t v25 = v115 | ((unint64_t)HIDWORD(v115) << 32);
  uint64_t v115 = v23;
  uint64_t v116 = v14;
  if (v44 == 1)
  {
    int v22 = &selRef_setObscuresBackgroundDuringPresentation_;
LABEL_7:
    outlined consume of Text.LineStyle?(v23, v14);
    outlined consume of Text.LineStyle?(v25, 1);
LABEL_8:

    uint64_t v23 = (uint64_t)v111;
    goto LABEL_9;
  }
  uint64_t v45 = v41;
  unint64_t v113 = __PAIR64__(v43, v42);
  uint64_t v114 = v44;
  swift_retain();
  char v46 = MEMORY[0x18C10D6E0](&v115, &v113);
  outlined consume of Text.LineStyle?(v25, v44);
  swift_release();
  swift_release();
  int v22 = &selRef_setObscuresBackgroundDuringPresentation_;
  if ((v46 & 1) == 0) {
    goto LABEL_8;
  }
  id v47 = objc_msgSend(v18, sel_numberOfRowsInSection_, v21);
  if (__OFSUB__(v47, 1)) {
    goto LABEL_74;
  }
  uint64_t v48 = v96;
  MEMORY[0x18C10A880](((uint64_t)v47 - 1) & ~(((uint64_t)v47 - 1) >> 63), v21);

  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v107);
  id v49 = *(void (**)(char *, void, uint64_t, uint64_t))(v110 + 56);
  char v50 = v48;
  uint64_t v51 = v4;
LABEL_69:

  v49(v50, 0, 1, v51);
}

uint64_t ListScrollable.visibleCollectionViewIDs.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v7 = ListScrollable.scrollView.getter();
  if (v7 < 2)
  {
    uint64_t v8 = 0;
    goto LABEL_24;
  }
  uint64_t v9 = (void *)v7;
  type metadata accessor for UpdateCoalescingTableView();
  uint64_t v10 = (void *)swift_dynamicCastClass();
  if (!v10)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v9);
    uint64_t v8 = 0;
    goto LABEL_24;
  }
  unsigned int v43 = v6;
  id v11 = objc_msgSend(v10, sel_visibleCells);
  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v9);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UITableViewCell);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v44 = v4;
  uint64_t v45 = v2;
  if (v12 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    if (v13) {
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v13 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v13)
    {
LABEL_6:
      if (v13 < 1)
      {
        __break(1u);
        goto LABEL_47;
      }
      uint64_t v14 = 0;
      uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        if ((v12 & 0xC000000000000001) != 0) {
          id v15 = (id)MEMORY[0x18C117680](v14, v12);
        }
        else {
          id v15 = *(id *)(v12 + 8 * v14 + 32);
        }
        uint64_t v16 = v15;
        type metadata accessor for ListTableViewCell();
        uint64_t v17 = swift_dynamicCastClass();
        if (v17 && (uint64_t v18 = *(void *)(v17 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID + 8)) != 0)
        {
          uint64_t v46 = *(void *)(v17 + OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_viewListID);
          uint64_t v47 = v18;
          _ViewList_ID.canonicalID.getter();

          unint64_t v19 = v48;
          uint64_t v20 = v49;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
          }
          unint64_t v22 = *((void *)v8 + 2);
          unint64_t v21 = *((void *)v8 + 3);
          if (v22 >= v21 >> 1) {
            uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v21 > 1), v22 + 1, 1, v8);
          }
          *((void *)v8 + 2) = v22 + 1;
          uint64_t v23 = &v8[16 * v22];
          *((void *)v23 + 4) = v19;
          *((void *)v23 + 5) = v20;
        }
        else
        {
        }
        ++v14;
      }
      while (v13 != v14);
      goto LABEL_23;
    }
  }
  uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
LABEL_23:
  swift_bridgeObjectRelease_n();
  uint64_t v4 = v44;
  uint64_t v2 = v45;
  uint64_t v6 = v43;
LABEL_24:
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v2, a1);
  if (v8)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    uint64_t v48 = v8;
LABEL_50:
    unint64_t v41 = ListScrollable.visibleHeaderFooterIDs.getter();
    specialized Array.append<A>(contentsOf:)(v41);
    return (uint64_t)v48;
  }
  unint64_t v24 = ListScrollable.scrollView.getter();
  if (v24 < 2)
  {
LABEL_45:
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, a1);
    uint64_t v48 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_50;
  }
  unint64_t v25 = (void *)v24;
  type metadata accessor for UpdateCoalescingCollectionView(0);
  id v26 = (void *)swift_dynamicCastClass();
  if (!v26)
  {
    outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v25);
    goto LABEL_45;
  }
  unsigned int v43 = v6;
  id v27 = objc_msgSend(v26, sel_visibleCells);
  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(v25);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICollectionViewCell);
  unint64_t v12 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  uint64_t v44 = v4;
  uint64_t v45 = v2;
  if (!(v12 >> 62))
  {
    uint64_t v28 = *(void *)((v12 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (v28) {
      goto LABEL_30;
    }
LABEL_48:
    unsigned int v31 = (char *)MEMORY[0x1E4FBC860];
LABEL_49:
    swift_bridgeObjectRelease_n();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v43, a1);
    swift_bridgeObjectRelease();
    uint64_t v48 = v31;
    goto LABEL_50;
  }
LABEL_47:
  swift_bridgeObjectRetain();
  uint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v28 = result;
  if (!result) {
    goto LABEL_48;
  }
LABEL_30:
  if (v28 >= 1)
  {
    uint64_t v30 = 0;
    unsigned int v31 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      if ((v12 & 0xC000000000000001) != 0) {
        id v32 = (id)MEMORY[0x18C117680](v30, v12);
      }
      else {
        id v32 = *(id *)(v12 + 8 * v30 + 32);
      }
      uint64_t v33 = v32;
      type metadata accessor for ListCollectionViewCell();
      uint64_t v34 = swift_dynamicCastClass();
      if (v34 && (uint64_t v35 = *(void *)(v34 + direct field offset for ListCollectionViewCellBase.viewListID + 8)) != 0)
      {
        uint64_t v46 = *(void *)(v34 + direct field offset for ListCollectionViewCellBase.viewListID);
        uint64_t v47 = v35;
        _ViewList_ID.canonicalID.getter();

        char v36 = v48;
        uint64_t v37 = v49;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unsigned int v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
        }
        unint64_t v39 = *((void *)v31 + 2);
        unint64_t v38 = *((void *)v31 + 3);
        if (v39 >= v38 >> 1) {
          unsigned int v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v38 > 1), v39 + 1, 1, v31);
        }
        *((void *)v31 + 2) = v39 + 1;
        uint64_t v40 = &v31[16 * v39];
        *((void *)v40 + 4) = v36;
        *((void *)v40 + 5) = v37;
      }
      else
      {
      }
      ++v30;
    }
    while (v28 != v30);
    goto LABEL_49;
  }
  __break(1u);
  return result;
}

double ListScrollable.subviewClosestTo(rect:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 80) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

uint64_t ListScrollable.firstCollectionViewIndex(of:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)v14 - v7;
  uint64_t v9 = *a1;
  uint64_t v10 = a1[1];
  ListScrollable.dataSource.getter(a2, (uint64_t)v14 - v7);
  uint64_t v11 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v8, 1, v4) == 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    v14[0] = v9;
    v14[1] = v10;
    uint64_t v12 = (*(uint64_t (**)(void *, uint64_t))(*(void *)(a2 + 24) + 136))(v14, v4);
    uint64_t v6 = v11;
    uint64_t v5 = v4;
  }
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return v12;
}

uint64_t ListScrollable.applyCollectionViewIDs(from:to:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v16 - v11;
  ListScrollable.dataSource.getter(a4, (uint64_t)&v16 - v11);
  uint64_t v13 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v12, 1, v8) == 1)
  {
    char v14 = 0;
  }
  else
  {
    char v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(a4 + 24) + 144))(a1, a2, a3, v8);
    uint64_t v10 = v13;
    uint64_t v9 = v8;
  }
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v14 & 1;
}

uint64_t ListScrollable.scroll(toCollectionViewID:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v54 = a4;
  uint64_t v62 = a2;
  uint64_t v63 = a3;
  uint64_t v57 = *(void *)(a5 + 16);
  uint64_t v53 = type metadata accessor for Optional();
  uint64_t v52 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v56 = (uint64_t)&v47 - v7;
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8]);
  MEMORY[0x1F4188790](v8 - 8);
  unint64_t v55 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v47 - v11;
  uint64_t v13 = type metadata accessor for IndexPath();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v47 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  unint64_t v19 = (char *)&v47 - v18;
  unsigned int v20 = *(_DWORD *)a1;
  int v21 = *(_DWORD *)(a1 + 4);
  uint64_t v22 = *(void *)(a1 + 8);
  unsigned int v71 = *(_DWORD *)a1;
  int v72 = v21;
  uint64_t v73 = v22;
  uint64_t v61 = a5;
  ListScrollable.indexPathForHeaderFooterID(_:)(&v71, v12);
  uint64_t v23 = v14;
  unint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v24(v12, 1, v13) == 1)
  {
    uint64_t v49 = v24;
    uint64_t v48 = v16;
    uint64_t v50 = v23;
    uint64_t v51 = v13;
    unint64_t v25 = v55;
    uint64_t v58 = v22;
    int v59 = v21;
    unsigned int v60 = v20;
    _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
    uint64_t v26 = v56;
    uint64_t v27 = v61;
    ListScrollable.dataSource.getter(v61, v56);
    uint64_t v28 = v57;
    uint64_t v29 = *(void *)(v57 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v29 + 48))(v26, 1, v57) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v26, v53);
      uint64_t v30 = (uint64_t)v25;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v50 + 56))(v25, 1, 1, v51);
      char v31 = v54;
    }
    else
    {
      unsigned int v71 = v60;
      int v72 = v59;
      uint64_t v73 = v58;
      uint64_t v30 = (uint64_t)v25;
      (*(void (**)(unsigned int *, uint64_t))(*(void *)(v27 + 24) + 128))(&v71, v28);
      (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v26, v28);
      uint64_t v34 = v25;
      uint64_t v35 = v51;
      int v36 = v49(v34, 1, v51);
      char v31 = v54;
      if (v36 != 1)
      {
        uint64_t v44 = v50;
        uint64_t v45 = (uint64_t)v48;
        (*(void (**)(char *, uint64_t, uint64_t))(v50 + 32))(v48, v30, v35);
        char v33 = ListScrollable.scrollToIndex(_:)(v45, v27);
        (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v45, v35);
        return v33 & 1;
      }
    }
    _s7SwiftUI12TableRowListVSgWOhTm_0(v30, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
    uint64_t v37 = ListScrollable.children.getter();
    if (v37)
    {
      uint64_t v38 = *(void *)(v37 + 16);
      if (v38)
      {
        char v33 = 0;
        LODWORD(v64) = v31 & 1;
        uint64_t v61 = v37;
        uint64_t v39 = v37 + 32;
        uint64_t v40 = 1;
        while (1)
        {
          outlined init with copy of TableColumnList(v39, (uint64_t)&v71);
          if (v33)
          {
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
            if (v38 == v40)
            {
              swift_bridgeObjectRelease();
              char v33 = 1;
              return v33 & 1;
            }
            char v33 = 1;
          }
          else
          {
            outlined init with copy of TableColumnList((uint64_t)&v71, (uint64_t)v67);
            type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
            type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
            if (swift_dynamicCast())
            {
              uint64_t v41 = *((void *)&v69 + 1);
              uint64_t v42 = v70;
              __swift_project_boxed_opaque_existential_1(&v68, *((uint64_t *)&v69 + 1));
              v65[0] = v60;
              v65[1] = v59;
              uint64_t v66 = v58;
              char v33 = (*(uint64_t (**)(_DWORD *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v42 + 80))(v65, v62, v63, v64, v41, v42);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v68);
              if (v38 == v40) {
                goto LABEL_23;
              }
            }
            else
            {
              uint64_t v70 = 0;
              long long v68 = 0u;
              long long v69 = 0u;
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v71);
              outlined destroy of ScrollableCollection?((uint64_t)&v68);
              char v33 = 0;
              if (v38 == v40)
              {
LABEL_23:
                swift_bridgeObjectRelease();
                return v33 & 1;
              }
            }
          }
          v39 += 40;
          if (__OFADD__(v40++, 1))
          {
            __break(1u);
            goto LABEL_19;
          }
        }
      }
      swift_bridgeObjectRelease();
      char v33 = 0;
    }
    else
    {
LABEL_19:
      char v33 = 0;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v19, v12, v13);
    uint64_t v32 = v23;
    char v33 = ListScrollable.scrollToIndex(_:)((uint64_t)v19, v61);
    (*(void (**)(char *, uint64_t))(v32 + 8))(v19, v13);
  }
  return v33 & 1;
}

double protocol witness for ScrollableCollection.subviewClosestTo(rect:) in conformance ListScrollable<A>@<D0>(uint64_t a1@<X8>)
{
  return ListScrollable.subviewClosestTo(rect:)(a1);
}

double protocol witness for ScrollableCollection.nextVisibleCollectionViewID(towards:from:border:ignoring:) in conformance ListScrollable<A>@<D0>(_OWORD *a1@<X8>)
{
  return protocol witness for static Rule.initialValue.getter in conformance ToString<A>(a1);
}

uint64_t protocol witness for static ScrollableCollection.hasMultipleViewsInAxis(_:) in conformance ListScrollable<A>(char a1)
{
  return NavigationSelectionModifier.init(isActive:presentedValue:)(a1 & 1);
}

uint64_t protocol witness for ScrollableCollection.firstCollectionViewIndex(of:) in conformance ListScrollable<A>(uint64_t *a1, uint64_t a2)
{
  return ListScrollable.firstCollectionViewIndex(of:)(a1, a2);
}

uint64_t protocol witness for ScrollableCollection.scroll(toCollectionViewID:anchor:) in conformance ListScrollable<A>(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  return ListScrollable.scroll(toCollectionViewID:anchor:)(a1, a2, a3, a4 & 1, a5);
}

BOOL ExplicitIDFromViewListIDVisitor.visit(view:traits:)()
{
  _ViewList_ID.canonicalID.getter();
  v6[0] = v4[0];
  v6[1] = v4[1];
  uint64_t v1 = v0[1];
  v5[0] = *v0;
  v5[1] = v1;
  char v2 = MEMORY[0x18C10D6E0](v6, v5);
  swift_release();
  if (v2)
  {
    _ViewList_View.viewID.getter();
    outlined assign with take of AnyHashable?((uint64_t)v4, (uint64_t)(v0 + 2), (uint64_t)&lazy cache variable for type metadata for AnyHashable?, MEMORY[0x1E4FBB960], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
  }
  return (v2 & 1) == 0;
}

BOOL ExplicitIDOffsetVisitor.visit(view:traits:)()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0 + 1;
  *uint64_t v0 = v2;
  _ViewList_ID.canonicalID.getter();
  v7[0] = v7[2];
  v7[1] = v7[3];
  uint64_t v3 = v0[2];
  v6[0] = v0[1];
  v6[1] = v3;
  char v4 = MEMORY[0x18C10D6E0](v7, v6);
  swift_release();
  if (v4)
  {
    v1[3] = v2;
    *((unsigned char *)v1 + 32) = 0;
  }
  return (v4 & 1) == 0;
}

BOOL protocol witness for ViewListVisitor.visit(view:traits:) in conformance ApplyCollectionViewIDsVisitor()
{
  uint64_t v1 = *(void (**)(void *, uint64_t))v0;
  swift_retain();
  _ViewList_ID.canonicalID.getter();
  v3[0] = v3[2];
  v3[1] = v3[3];
  v1(v3, v0 + 16);
  swift_release();
  swift_release();
  return (*(unsigned char *)(v0 + 16) & 1) == 0;
}

BOOL protocol witness for TableRowVisitor.visit<A, B>(rowValue:view:children:traits:) in conformance ApplyCollectionViewIDsVisitor(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return specialized ApplyCollectionViewIDsVisitor.visit<A, B>(rowValue:view:children:traits:)(a1, a3, a4, a5);
}

uint64_t base witness table accessor for Scrollable in ListScrollable<A>()
{
  return swift_getWitnessTable();
}

uint64_t outlined assign with take of AnyHashable?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

void type metadata accessor for UIScrollView?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, void (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    a5(255, a3, a4);
    unint64_t v6 = type metadata accessor for Optional();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized closure #1 in TableRowList.visitRows<A>(applying:from:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v7 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for ResolvedTableRowIDs.RowIDVisitor, &protocol witness table for ResolvedTableRowIDs.RowIDVisitor, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v7 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for TableSections.Accumulator, &protocol witness table for TableSections.Accumulator, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v7 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for CollectionViewTableHeaderVisitor, &protocol witness table for CollectionViewTableHeaderVisitor, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  uint64_t v9 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8);
  type metadata accessor for TableContentVisitor<TableDataSourceAdaptor>(0, &lazy cache variable for type metadata for TableSections.FindMatchingID<AnyHashable2>, (uint64_t (*)(void))lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2, MEMORY[0x1E4F3F5D0], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableSections.FindMatchingID);
  return v6(a3, &v9, v7, &protocol witness table for TableSections.FindMatchingID<A>, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v7 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for ApplyCollectionViewIDsVisitor, &protocol witness table for ApplyCollectionViewIDsVisitor, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v9;

  uint64_t v9 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t *, uint64_t, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8);
  type metadata accessor for TableContentVisitor<TableDataSourceAdaptor>(0, &lazy cache variable for type metadata for TableContentVisitor<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)&type metadata for TableDataSourceAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableContentVisitor);
  return v6(a3, &v9, v7, &protocol witness table for TableContentVisitor<A>, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v7 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for TableSections.FindMatchingRow, &protocol witness table for TableSections.FindMatchingRow, v4, v5);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  uint64_t v7 = a1;
  uint64_t v4 = a2[3];
  uint64_t v5 = a2[4];
  __swift_project_boxed_opaque_existential_1(a2, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(a3, &v7, &type metadata for AccessibilityRowAccumulator, &protocol witness table for AccessibilityRowAccumulator, v4, v5);
}

BOOL specialized ApplyCollectionViewIDsVisitor.visit<A, B>(rowValue:view:children:traits:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v25 = a2;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v25 - v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v11 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v25 - v16;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v15);
  uint64_t v18 = *(void *)(a4 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, a4) == 1)
  {
    unint64_t v19 = v26;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    _s7SwiftUI12TableRowListVSgWOcTm_0(v25, (uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityValueStorage?);
    if (*((void *)&v29 + 1))
    {
      v31[0] = v28;
      v31[1] = v29;
      uint64_t v32 = v30;
      unsigned int v20 = (void (*)(void, void))*((void *)v19 + 1);
      *(void *)&long long v28 = *(void *)v19;
      *((void *)&v28 + 1) = v20;
      LOBYTE(v29) = 0;
      MEMORY[0x1F4188790](v20);
      *(&v25 - 4) = 0;
      *(&v25 - 3) = (uint64_t)v31;
      *(&v25 - 2) = (uint64_t)&v28;
      swift_retain();
      static Update.ensure<A>(_:)();
      outlined destroy of TableRowList((uint64_t)v31);
      char v21 = v19[16] | v29;
      swift_release();
      v19[16] = v21 & 1;
    }
    else
    {
      _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)&v28, (uint64_t)&lazy cache variable for type metadata for TableRowList?, (uint64_t)&type metadata for TableRowList, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
    }
  }
  else
  {
    dispatch thunk of Identifiable.id.getter();
    (*(void (**)(char *, uint64_t))(v18 + 8))(v9, a4);
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v17, v13, AssociatedTypeWitness);
    swift_getAssociatedConformanceWitness();
    static _ViewList_ID.explicit<A>(_:)();
    long long v27 = v31[0];
    _ViewList_ID.canonicalID.getter();
    swift_bridgeObjectRelease();
    uint64_t v22 = v26;
    uint64_t v23 = *(void (**)(_OWORD *, unsigned char *))v26;
    v31[0] = v28;
    swift_retain();
    v23(v31, v22 + 16);
    swift_release();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v17, AssociatedTypeWitness);
    swift_release();
    unint64_t v19 = v22;
  }
  return (v19[16] & 1) == 0;
}

uint64_t _s7SwiftUI12TableRowListV9visitRows8applying4fromyxz_SitAA0cD7VisitorRzlFyyXEfU_AA022ApplyCollectionViewIDsJ0V_Tg5TA_0()
{
  uint64_t v2 = v0[2];
  uint64_t v1 = (void *)v0[3];
  uint64_t v3 = v0[4];
  uint64_t v7 = v2;
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v4);
  return (*(uint64_t (**)(uint64_t, uint64_t *, ValueMetadata *, _UNKNOWN **, uint64_t, uint64_t))(v5 + 8))(v3, &v7, &type metadata for ApplyCollectionViewIDsVisitor, &protocol witness table for ApplyCollectionViewIDsVisitor, v4, v5);
}

uint64_t type metadata accessor for ListScrollable()
{
  return __swift_instantiateGenericMetadata();
}

ValueMetadata *type metadata accessor for ListScrollViewProvider()
{
  return &type metadata for ListScrollViewProvider;
}

ValueMetadata *type metadata accessor for UpdateBridgedState()
{
  return &type metadata for UpdateBridgedState;
}

uint64_t type metadata completion function for ListScrollable.DataSourceProvider()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ListScrollable.DataSourceProvider(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v8 = *(void *)(v6 + 64);
  }
  else {
    size_t v8 = *(void *)(v6 + 64) + 1;
  }
  if (v8 <= 8) {
    uint64_t v9 = 8;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v7 & 0xFC | 3;
  int v11 = v7 & 0x100000;
  if (v10 > 7 || v11 != 0 || (unint64_t)(v9 + 1) > 0x18)
  {
    uint64_t v14 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v14 + ((v10 + 16) & ~v10));
    swift_retain();
  }
  else
  {
    unsigned int v15 = a2[v9];
    unsigned int v16 = v15 - 2;
    if (v15 >= 2)
    {
      if (v9 <= 3) {
        uint64_t v17 = v9;
      }
      else {
        uint64_t v17 = 4;
      }
      switch(v17)
      {
        case 1:
          int v18 = *a2;
          goto LABEL_25;
        case 2:
          int v18 = *(unsigned __int16 *)a2;
          goto LABEL_25;
        case 3:
          int v18 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_25;
        case 4:
          int v18 = *(_DWORD *)a2;
LABEL_25:
          int v19 = (v18 | (v16 << (8 * v9))) + 2;
          unsigned int v15 = v18 + 2;
          if (v9 < 4) {
            unsigned int v15 = v19;
          }
          break;
        default:
          break;
      }
    }
    if (v15 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(v4, a2, v8);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(v4, a2, v5);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v4, 0, 1, v5);
      }
      *((unsigned char *)v4 + v9) = 1;
    }
    else
    {
      *a1 = *(void *)a2;
      *((unsigned char *)a1 + v9) = 0;
    }
  }
  return v4;
}

unsigned __int8 *destroy for ListScrollable.DataSourceProvider(unsigned __int8 *result, uint64_t a2)
{
  uint64_t v2 = result;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(v3 - 8);
  if (*(_DWORD *)(v4 + 84)) {
    unint64_t v5 = *(void *)(v4 + 64);
  }
  else {
    unint64_t v5 = *(void *)(v4 + 64) + 1;
  }
  if (v5 <= 8) {
    unint64_t v5 = 8;
  }
  unsigned int v6 = result[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *result;
        goto LABEL_15;
      case 2:
        int v9 = *(unsigned __int16 *)result;
        goto LABEL_15;
      case 3:
        int v9 = *(unsigned __int16 *)result | (result[2] << 16);
        goto LABEL_15;
      case 4:
        int v9 = *(_DWORD *)result;
LABEL_15:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    uint64_t v12 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (unsigned __int8 *)(*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v4 + 48))(result, 1, v3);
    if (!result)
    {
      int v11 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v12 + 8);
      return (unsigned __int8 *)v11(v2, v3);
    }
  }
  return result;
}

void *initializeWithCopy for ListScrollable.DataSourceProvider(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
      char v14 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
      char v14 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v14 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v8) = v14;
  return a1;
}

unsigned __int8 *assignWithCopy for ListScrollable.DataSourceProvider(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    if (v7 <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_17;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_17:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_31;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_31:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        char v19 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
        char v19 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      char v19 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v19;
  }
  return a1;
}

void *initializeWithTake for ListScrollable.DataSourceProvider(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  if (v7 <= 8) {
    uint64_t v8 = 8;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = a2[v8];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v8 <= 3) {
      uint64_t v11 = v8;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_16;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_16;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_16;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_16:
        int v13 = (v12 | (v10 << (8 * v8))) + 2;
        unsigned int v9 = v12 + 2;
        if (v8 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 == 1)
  {
    if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
    {
      memcpy(a1, a2, v7);
      char v14 = 1;
    }
    else
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
      char v14 = 1;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
    }
  }
  else
  {
    char v14 = 0;
    *a1 = *(void *)a2;
  }
  *((unsigned char *)a1 + v8) = v14;
  return a1;
}

unsigned __int8 *assignWithTake for ListScrollable.DataSourceProvider(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    if (v7 <= 8) {
      uint64_t v8 = 8;
    }
    else {
      uint64_t v8 = v7;
    }
    unsigned int v9 = a1[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a1;
          goto LABEL_17;
        case 2:
          int v12 = *(unsigned __int16 *)a1;
          goto LABEL_17;
        case 3:
          int v12 = *(unsigned __int16 *)a1 | (a1[2] << 16);
          goto LABEL_17;
        case 4:
          int v12 = *(_DWORD *)a1;
LABEL_17:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    if (v9 == 1 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a1, 1, v5)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    }
    unsigned int v14 = a2[v8];
    unsigned int v15 = v14 - 2;
    if (v14 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v16 = v8;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *a2;
          goto LABEL_31;
        case 2:
          int v17 = *(unsigned __int16 *)a2;
          goto LABEL_31;
        case 3:
          int v17 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_31;
        case 4:
          int v17 = *(_DWORD *)a2;
LABEL_31:
          int v18 = (v17 | (v15 << (8 * v8))) + 2;
          unsigned int v14 = v17 + 2;
          if (v8 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
      {
        memcpy(a1, a2, v7);
        char v19 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
        char v19 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      }
    }
    else
    {
      char v19 = 0;
      *(void *)a1 = *(void *)a2;
    }
    a1[v8] = v19;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ListScrollable.DataSourceProvider(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  uint64_t v5 = 8;
  if (v4 > 8) {
    uint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_25;
  }
  uint64_t v6 = v5 + 1;
  char v7 = 8 * (v5 + 1);
  if ((v5 + 1) <= 3)
  {
    unsigned int v10 = ((a2 + ~(-1 << v7) - 254) >> v7) + 1;
    if (HIWORD(v10))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_25;
      }
      goto LABEL_17;
    }
    if (v10 < 2)
    {
LABEL_25:
      unsigned int v12 = *((unsigned __int8 *)a1 + v5);
      if (v12 >= 2) {
        return (v12 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_25;
  }
LABEL_17:
  int v11 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v6 | v11) + 255;
}

void storeEnumTagSinglePayload for ListScrollable.DataSourceProvider(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 8) {
    unint64_t v6 = 8;
  }
  size_t v7 = v6 + 1;
  if (a3 < 0xFF)
  {
    int v8 = 0;
  }
  else if (v7 <= 3)
  {
    unsigned int v11 = ((a3 + ~(-1 << (8 * v7)) - 254) >> (8 * v7)) + 1;
    if (HIWORD(v11))
    {
      int v8 = 4;
    }
    else if (v11 >= 0x100)
    {
      int v8 = 2;
    }
    else
    {
      int v8 = v11 > 1;
    }
  }
  else
  {
    int v8 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v9 = a2 - 255;
    if (v7 < 4)
    {
      int v10 = (v9 >> (8 * v7)) + 1;
      if (v6 != -1)
      {
        int v12 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if (v7 == 3)
        {
          *(_WORD *)a1 = v12;
          a1[2] = BYTE2(v12);
        }
        else if (v7 == 2)
        {
          *(_WORD *)a1 = v12;
        }
        else
        {
          *a1 = v12;
        }
      }
    }
    else
    {
      bzero(a1, v6 + 1);
      *(_DWORD *)a1 = v9;
      int v10 = 1;
    }
    switch(v8)
    {
      case 1:
        a1[v7] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v7] = v10;
        break;
      case 3:
LABEL_37:
        __break(1u);
        JUMPOUT(0x187C34350);
      case 4:
        *(_DWORD *)&a1[v7] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v8)
    {
      case 1:
        a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v7] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_37;
      case 4:
        *(_DWORD *)&a1[v7] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          a1[v6] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for ListScrollable.DataSourceProvider(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a2 + 16) - 8);
  if (*(_DWORD *)(v2 + 84)) {
    unint64_t v3 = *(void *)(v2 + 64);
  }
  else {
    unint64_t v3 = *(void *)(v2 + 64) + 1;
  }
  uint64_t v4 = 8;
  if (v3 > 8) {
    uint64_t v4 = v3;
  }
  uint64_t v5 = a1[v4];
  int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a1;
        goto LABEL_15;
      case 2:
        int v8 = *(unsigned __int16 *)a1;
        goto LABEL_15;
      case 3:
        int v8 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_15;
      case 4:
        int v8 = *(_DWORD *)a1;
LABEL_15:
        unsigned int v9 = (v8 | (v6 << (8 * v4))) + 2;
        LODWORD(v5) = v8 + 2;
        if (v4 >= 4) {
          uint64_t v5 = v5;
        }
        else {
          uint64_t v5 = v9;
        }
        break;
      default:
        return v5;
    }
  }
  return v5;
}

void destructiveInjectEnumTag for ListScrollable.DataSourceProvider(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v6 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v6 = *(void *)(v5 + 64) + 1;
  }
  if (v6 <= 8) {
    size_t v7 = 8;
  }
  else {
    size_t v7 = v6;
  }
  if (a2 > 1)
  {
    unsigned int v8 = a2 - 2;
    if (v7 <= 3) {
      char v9 = (v8 >> (8 * v7)) + 2;
    }
    else {
      char v9 = 2;
    }
    if (v7 <= 3) {
      int v10 = v8 & ~(-1 << (8 * v7));
    }
    else {
      int v10 = v8;
    }
    a1[v7] = v9;
    if (v7 >= 4) {
      int v11 = 4;
    }
    else {
      int v11 = v7;
    }
    bzero(a1, v7);
    switch(v11)
    {
      case 2:
        *(_WORD *)a1 = v10;
        break;
      case 3:
        *(_WORD *)a1 = v10;
        a1[2] = BYTE2(v10);
        break;
      case 4:
        *(_DWORD *)a1 = v10;
        break;
      default:
        *a1 = v10;
        break;
    }
  }
  else
  {
    a1[v7] = a2;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for BridgedListState.CommitMutation(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    uint64_t *v3 = *a2;
    unint64_t v3 = (uint64_t *)(v15 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    uint64_t v5 = *(int *)(a3 + 20);
    unint64_t v6 = (char *)a1 + v5;
    size_t v7 = (char *)a2 + v5;
    *(uint64_t *)((char *)a1 + v5) = *(uint64_t *)((char *)a2 + v5);
    unsigned int v8 = (int *)type metadata accessor for BridgedListState(0);
    uint64_t v9 = v8[5];
    int v10 = &v6[v9];
    int v11 = &v7[v9];
    uint64_t v12 = type metadata accessor for BridgedListState.ScrollTarget(0);
    uint64_t v13 = *(void *)(v12 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    {
      type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
      memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v16 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16))(v10, v11, v16);
      uint64_t v17 = *(int *)(v12 + 20);
      int v18 = &v10[v17];
      char v19 = &v11[v17];
      *(_OWORD *)int v18 = *(_OWORD *)v19;
      v18[16] = v19[16];
      v10[*(int *)(v12 + 24)] = v11[*(int *)(v12 + 24)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
    }
    uint64_t v20 = v8[6];
    char v21 = &v6[v20];
    uint64_t v22 = &v7[v20];
    long long v23 = *((_OWORD *)v22 + 1);
    *(_OWORD *)char v21 = *(_OWORD *)v22;
    *((_OWORD *)v21 + 1) = v23;
    long long v24 = *((_OWORD *)v22 + 3);
    *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
    *((_OWORD *)v21 + 3) = v24;
    v21[112] = v22[112];
    long long v25 = *((_OWORD *)v22 + 6);
    long long v26 = *((_OWORD *)v22 + 4);
    *((_OWORD *)v21 + 5) = *((_OWORD *)v22 + 5);
    *((_OWORD *)v21 + 6) = v25;
    *((_OWORD *)v21 + 4) = v26;
    *(_DWORD *)&v6[v8[7]] = *(_DWORD *)&v7[v8[7]];
  }
  return v3;
}

_DWORD *assignWithCopy for BridgedListState.CommitMutation(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  int v36 = (int *)type metadata accessor for BridgedListState(0);
  uint64_t v7 = v36[5];
  unsigned int v8 = &v5[v7];
  uint64_t v9 = &v6[v7];
  uint64_t v10 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v31 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 24))(v8, v9, v31);
      uint64_t v32 = *(int *)(v10 + 20);
      char v33 = &v8[v32];
      uint64_t v34 = &v9[v32];
      long long v35 = *(_OWORD *)v34;
      v33[16] = v34[16];
      *(_OWORD *)char v33 = v35;
      v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
      goto LABEL_7;
    }
    outlined destroy of BridgedListState.ScrollTarget((uint64_t)v8, type metadata accessor for BridgedListState.ScrollTarget);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v8, v9, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for IndexPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 16))(v8, v9, v15);
  uint64_t v16 = *(int *)(v10 + 20);
  uint64_t v17 = &v8[v16];
  int v18 = &v9[v16];
  long long v19 = *(_OWORD *)v18;
  v17[16] = v18[16];
  *(_OWORD *)uint64_t v17 = v19;
  v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v21 = v36[6];
  uint64_t v22 = &v5[v21];
  long long v23 = &v6[v21];
  long long v24 = *(_OWORD *)v23;
  long long v25 = *((_OWORD *)v23 + 1);
  long long v26 = *((_OWORD *)v23 + 3);
  *((_OWORD *)v22 + 2) = *((_OWORD *)v23 + 2);
  *((_OWORD *)v22 + 3) = v26;
  *(_OWORD *)uint64_t v22 = v24;
  *((_OWORD *)v22 + 1) = v25;
  long long v27 = *((_OWORD *)v23 + 4);
  long long v28 = *((_OWORD *)v23 + 5);
  long long v29 = *((_OWORD *)v23 + 6);
  v22[112] = v23[112];
  *((_OWORD *)v22 + 5) = v28;
  *((_OWORD *)v22 + 6) = v29;
  *((_OWORD *)v22 + 4) = v27;
  *(_DWORD *)&v5[v36[7]] = *(_DWORD *)&v6[v36[7]];
  return a1;
}

void *initializeWithTake for BridgedListState.CommitMutation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  unint64_t v6 = (char *)a2 + v4;
  *(void *)((char *)a1 + v4) = *(void *)((char *)a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for BridgedListState(0);
  uint64_t v8 = v7[5];
  uint64_t v9 = &v5[v8];
  uint64_t v10 = &v6[v8];
  uint64_t v11 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
  {
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
  }
  else
  {
    uint64_t v14 = type metadata accessor for IndexPath();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 32))(v9, v10, v14);
    uint64_t v15 = *(int *)(v11 + 20);
    uint64_t v16 = &v9[v15];
    uint64_t v17 = &v10[v15];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
    v16[16] = v17[16];
    v9[*(int *)(v11 + 24)] = v10[*(int *)(v11 + 24)];
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  }
  uint64_t v18 = v7[6];
  long long v19 = &v5[v18];
  uint64_t v20 = &v6[v18];
  long long v21 = *((_OWORD *)v20 + 1);
  *(_OWORD *)long long v19 = *(_OWORD *)v20;
  *((_OWORD *)v19 + 1) = v21;
  long long v22 = *((_OWORD *)v20 + 3);
  *((_OWORD *)v19 + 2) = *((_OWORD *)v20 + 2);
  *((_OWORD *)v19 + 3) = v22;
  v19[112] = v20[112];
  long long v23 = *((_OWORD *)v20 + 6);
  long long v24 = *((_OWORD *)v20 + 4);
  *((_OWORD *)v19 + 5) = *((_OWORD *)v20 + 5);
  *((_OWORD *)v19 + 6) = v23;
  *((_OWORD *)v19 + 4) = v24;
  *(_DWORD *)&v5[v7[7]] = *(_DWORD *)&v6[v7[7]];
  return a1;
}

void *assignWithTake for BridgedListState.CommitMutation(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v3 = *(int *)(a3 + 20);
  uint64_t v4 = (char *)a1 + v3;
  uint64_t v5 = (char *)a2 + v3;
  *(void *)((char *)a1 + v3) = *(void *)((char *)a2 + v3);
  unint64_t v6 = (int *)type metadata accessor for BridgedListState(0);
  uint64_t v7 = v6[5];
  uint64_t v8 = &v4[v7];
  uint64_t v9 = &v5[v7];
  uint64_t v10 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1, v10);
  int v14 = v12(v9, 1, v10);
  if (!v13)
  {
    if (!v14)
    {
      uint64_t v28 = type metadata accessor for IndexPath();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 40))(v8, v9, v28);
      uint64_t v29 = *(int *)(v10 + 20);
      uint64_t v30 = &v8[v29];
      uint64_t v31 = &v9[v29];
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
      goto LABEL_7;
    }
    outlined destroy of BridgedListState.ScrollTarget((uint64_t)v8, type metadata accessor for BridgedListState.ScrollTarget);
    goto LABEL_6;
  }
  if (v14)
  {
LABEL_6:
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v8, v9, *(void *)(*(void *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v15 = type metadata accessor for IndexPath();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v8, v9, v15);
  uint64_t v16 = *(int *)(v10 + 20);
  uint64_t v17 = &v8[v16];
  uint64_t v18 = &v9[v16];
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  v17[16] = v18[16];
  v8[*(int *)(v10 + 24)] = v9[*(int *)(v10 + 24)];
  (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
LABEL_7:
  uint64_t v20 = v6[6];
  long long v21 = &v4[v20];
  long long v22 = &v5[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)long long v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  long long v24 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v24;
  v21[112] = v22[112];
  long long v25 = *((_OWORD *)v22 + 6);
  long long v26 = *((_OWORD *)v22 + 4);
  *((_OWORD *)v21 + 5) = *((_OWORD *)v22 + 5);
  *((_OWORD *)v21 + 6) = v25;
  *((_OWORD *)v21 + 4) = v26;
  *(_DWORD *)&v4[v6[7]] = *(_DWORD *)&v5[v6[7]];
  return a1;
}

uint64_t getEnumTagSinglePayload for BridgedListState.CommitMutation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C34EDC);
}

uint64_t sub_187C34EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 20);
  uint64_t v5 = type metadata accessor for BridgedListState(0);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48);

  return v6(v4, a2, v5);
}

uint64_t sub_187C34F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 20);
  uint64_t v6 = type metadata accessor for BridgedListState(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(v5, a2, a2, v6);
}

uint64_t type metadata completion function for ListScrollable()
{
  uint64_t result = type metadata accessor for ListScrollable.DataSourceProvider();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for ListScrollable(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xFC | 3;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v9 = *(void *)(v5 + 64);
  }
  else {
    size_t v9 = *(void *)(v5 + 64) + 1;
  }
  if (v9 <= 8) {
    uint64_t v10 = 8;
  }
  else {
    uint64_t v10 = v9;
  }
  unint64_t v11 = ((((((v10 + (((v7 & 0xFC) + 11) & ~v8) + 4) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
        + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  int v12 = v7 & 0x100000;
  if (v8 > 7 || v12 != 0 || v11 > 0x18)
  {
    uint64_t v15 = *a2;
    uint64_t *v3 = *a2;
    uint64_t v3 = (uint64_t *)(v15 + ((v8 & 0xF8 ^ 0x1F8) & (v8 + 16)));
  }
  else
  {
    *a1 = *a2;
    uint64_t v16 = ((unint64_t)a1 + v8 + 8) & ~v8;
    uint64_t v17 = ((unint64_t)a2 + v8 + 8) & ~v8;
    unsigned int v18 = *(unsigned __int8 *)(v17 + v10);
    unsigned int v19 = v18 - 2;
    if (v18 >= 2)
    {
      if (v10 <= 3) {
        uint64_t v20 = v10;
      }
      else {
        uint64_t v20 = 4;
      }
      switch(v20)
      {
        case 1:
          int v21 = *(unsigned __int8 *)v17;
          goto LABEL_25;
        case 2:
          int v21 = *(unsigned __int16 *)v17;
          goto LABEL_25;
        case 3:
          int v21 = *(unsigned __int16 *)v17 | (*(unsigned __int8 *)(v17 + 2) << 16);
          goto LABEL_25;
        case 4:
          int v21 = *(_DWORD *)v17;
LABEL_25:
          int v22 = (v21 | (v19 << (8 * v10))) + 2;
          unsigned int v18 = v21 + 2;
          if (v10 < 4) {
            unsigned int v18 = v22;
          }
          break;
        default:
          break;
      }
    }
    uint64_t v23 = v10 + 1;
    if (v18 == 1)
    {
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v17, 1, v4))
      {
        memcpy((void *)v16, (const void *)v17, v9);
        char v24 = 1;
      }
      else
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v16, v17, v4);
        char v24 = 1;
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v16, 0, 1, v4);
      }
    }
    else
    {
      char v24 = 0;
      *(void *)uint64_t v16 = *(void *)v17;
    }
    *(unsigned char *)(v16 + v10) = v24;
    long long v25 = (void *)(((v16 | 3) + v23) & 0xFFFFFFFFFFFFFFFCLL);
    long long v26 = (void *)(((v17 | 3) + v23) & 0xFFFFFFFFFFFFFFFCLL);
    *long long v25 = *v26;
    long long v27 = (void *)(((unint64_t)v25 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v28 = (void *)(((unint64_t)v26 + 11) & 0xFFFFFFFFFFFFFFFCLL);
    *long long v27 = *v28;
    *(void *)(((unint64_t)v27 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v28 + 15) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v3;
}

uint64_t destroy for ListScrollable(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(_DWORD *)(v3 + 80) & 0xFCLL | 3;
  uint64_t v5 = (unsigned __int8 *)((a1 + v4 + 8) & ~v4);
  unint64_t v6 = *(void *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84)) {
    ++v6;
  }
  if (v6 <= 8) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = v6;
  }
  unsigned int v8 = v5[v7];
  unsigned int v9 = v8 - 2;
  if (v8 >= 2)
  {
    if (v7 <= 3) {
      uint64_t v10 = v7;
    }
    else {
      uint64_t v10 = 4;
    }
    switch(v10)
    {
      case 1:
        int v11 = *v5;
        goto LABEL_15;
      case 2:
        int v11 = *(unsigned __int16 *)v5;
        goto LABEL_15;
      case 3:
        int v11 = *(unsigned __int16 *)v5 | (v5[2] << 16);
        goto LABEL_15;
      case 4:
        int v11 = *(_DWORD *)v5;
LABEL_15:
        int v12 = (v11 | (v9 << (8 * v7))) + 2;
        unsigned int v8 = v11 + 2;
        if (v7 < 4) {
          unsigned int v8 = v12;
        }
        break;
      default:
        break;
    }
  }
  if (v8 == 1 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v3 + 48))(v5, 1, v2)) {
    (*(void (**)(unsigned __int8 *, uint64_t))(v3 + 8))(v5, v2);
  }

  return swift_release();
}

void *initializeWithCopy for ListScrollable(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  uint64_t v7 = v6 + 11;
  unint64_t v8 = ~v6 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v9 = ((unint64_t)a1 + v7) & v8;
  unint64_t v10 = ((unint64_t)a2 + v7) & v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = *(void *)(v5 + 64) + 1;
  }
  if (v11 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = v11;
  }
  unsigned int v13 = *(unsigned __int8 *)(v10 + v12);
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *(unsigned __int8 *)v10;
        goto LABEL_16;
      case 2:
        int v16 = *(unsigned __int16 *)v10;
        goto LABEL_16;
      case 3:
        int v16 = *(unsigned __int16 *)(((unint64_t)a2 + v7) & v8) | (*(unsigned __int8 *)((((unint64_t)a2 + v7) & v8)
                                                                                            + 2) << 16);
        goto LABEL_16;
      case 4:
        int v16 = *(_DWORD *)v10;
LABEL_16:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
    {
      memcpy((void *)v9, (const void *)v10, v11);
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(v9, v10, v4);
      char v18 = 1;
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
    }
  }
  else
  {
    char v18 = 0;
    *(void *)unint64_t v9 = *(void *)v10;
  }
  *(unsigned char *)(v9 + v12) = v18;
  unsigned int v19 = (void *)(((v9 | 3) + v12 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v20 = (void *)(((v10 | 3) + v12 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  void *v19 = *v20;
  int v21 = (void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  int v22 = (void *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *int v21 = *v22;
  *(void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

_DWORD *assignWithCopy for ListScrollable(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  uint64_t v9 = v8 + 11;
  unint64_t v10 = ~v8 & 0xFFFFFFFFFFFFFFFCLL;
  size_t v11 = (unsigned __int8 *)(((unint64_t)a1 + v9) & v10);
  unint64_t v12 = *(void *)(v5 + 64);
  unint64_t v13 = ((unint64_t)a2 + v9) & v10;
  if (v11 != (unsigned __int8 *)v13)
  {
    if (v7) {
      size_t v14 = *(void *)(v5 + 64);
    }
    else {
      size_t v14 = v12 + 1;
    }
    if (v14 <= 8) {
      uint64_t v15 = 8;
    }
    else {
      uint64_t v15 = v14;
    }
    unsigned int v16 = v11[v15];
    unsigned int v17 = v16 - 2;
    if (v16 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *v11;
          goto LABEL_17;
        case 2:
          int v19 = *(unsigned __int16 *)v11;
          goto LABEL_17;
        case 3:
          int v19 = *(unsigned __int16 *)(((unint64_t)a1 + v9) & v10) | (*(unsigned __int8 *)((((unint64_t)a1
                                                                                                 + v9) & v10)
                                                                                               + 2) << 16);
          goto LABEL_17;
        case 4:
          int v19 = *(_DWORD *)v11;
LABEL_17:
          int v20 = (v19 | (v17 << (8 * v15))) + 2;
          unsigned int v16 = v19 + 2;
          if (v15 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 1 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v4)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v11, v4);
    }
    unsigned int v21 = *(unsigned __int8 *)(v13 + v15);
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *(unsigned __int8 *)v13;
          goto LABEL_31;
        case 2:
          int v24 = *(unsigned __int16 *)v13;
          goto LABEL_31;
        case 3:
          int v24 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
          goto LABEL_31;
        case 4:
          int v24 = *(_DWORD *)v13;
LABEL_31:
          int v25 = (v24 | (v22 << (8 * v15))) + 2;
          unsigned int v21 = v24 + 2;
          if (v15 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v13, 1, v4))
      {
        memcpy(v11, (const void *)v13, v14);
        char v26 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unint64_t, uint64_t))(v6 + 16))(v11, v13, v4);
        char v26 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v4);
      }
    }
    else
    {
      char v26 = 0;
      *(void *)size_t v11 = *(void *)v13;
    }
    v11[v15] = v26;
  }
  if (v7) {
    unint64_t v27 = v12;
  }
  else {
    unint64_t v27 = v12 + 1;
  }
  if (v27 <= 8) {
    unint64_t v27 = 8;
  }
  unint64_t v28 = v27 + 1;
  uint64_t v29 = (_DWORD *)((((unint64_t)v11 | 3) + v28) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v30 = (_DWORD *)(((v13 | 3) + v28) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  uint64_t v31 = (_DWORD *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v32 = (_DWORD *)(((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  *(void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for ListScrollable(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  uint64_t v7 = v6 + 11;
  unint64_t v8 = ~v6 & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v9 = ((unint64_t)a1 + v7) & v8;
  unint64_t v10 = ((unint64_t)a2 + v7) & v8;
  if (*(_DWORD *)(v5 + 84)) {
    size_t v11 = *(void *)(v5 + 64);
  }
  else {
    size_t v11 = *(void *)(v5 + 64) + 1;
  }
  if (v11 <= 8) {
    uint64_t v12 = 8;
  }
  else {
    uint64_t v12 = v11;
  }
  unsigned int v13 = *(unsigned __int8 *)(v10 + v12);
  unsigned int v14 = v13 - 2;
  if (v13 >= 2)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *(unsigned __int8 *)v10;
        goto LABEL_16;
      case 2:
        int v16 = *(unsigned __int16 *)v10;
        goto LABEL_16;
      case 3:
        int v16 = *(unsigned __int16 *)(((unint64_t)a2 + v7) & v8) | (*(unsigned __int8 *)((((unint64_t)a2 + v7) & v8)
                                                                                            + 2) << 16);
        goto LABEL_16;
      case 4:
        int v16 = *(_DWORD *)v10;
LABEL_16:
        int v17 = (v16 | (v14 << (8 * v12))) + 2;
        unsigned int v13 = v16 + 2;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 1)
  {
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(v10, 1, v4))
    {
      memcpy((void *)v9, (const void *)v10, v11);
      char v18 = 1;
    }
    else
    {
      (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(v9, v10, v4);
      char v18 = 1;
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v5 + 56))(v9, 0, 1, v4);
    }
  }
  else
  {
    char v18 = 0;
    *(void *)unint64_t v9 = *(void *)v10;
  }
  *(unsigned char *)(v9 + v12) = v18;
  int v19 = (void *)(((v9 | 3) + v12 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  int v20 = (void *)(((v10 | 3) + v12 + 1) & 0xFFFFFFFFFFFFFFFCLL);
  void *v19 = *v20;
  unsigned int v21 = (void *)(((unint64_t)v19 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  unsigned int v22 = (void *)(((unint64_t)v20 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned int v21 = *v22;
  *(void *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for ListScrollable(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = v5;
  int v7 = *(_DWORD *)(v5 + 84);
  uint64_t v8 = *(_DWORD *)(v5 + 80) & 0xFCLL;
  uint64_t v9 = v8 + 11;
  unint64_t v10 = ~v8 & 0xFFFFFFFFFFFFFFFCLL;
  size_t v11 = (unsigned __int8 *)(((unint64_t)a1 + v9) & v10);
  unint64_t v12 = *(void *)(v5 + 64);
  unint64_t v13 = ((unint64_t)a2 + v9) & v10;
  if (v11 != (unsigned __int8 *)v13)
  {
    if (v7) {
      size_t v14 = *(void *)(v5 + 64);
    }
    else {
      size_t v14 = v12 + 1;
    }
    if (v14 <= 8) {
      uint64_t v15 = 8;
    }
    else {
      uint64_t v15 = v14;
    }
    unsigned int v16 = v11[v15];
    unsigned int v17 = v16 - 2;
    if (v16 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v18 = v15;
      }
      else {
        uint64_t v18 = 4;
      }
      switch(v18)
      {
        case 1:
          int v19 = *v11;
          goto LABEL_17;
        case 2:
          int v19 = *(unsigned __int16 *)v11;
          goto LABEL_17;
        case 3:
          int v19 = *(unsigned __int16 *)(((unint64_t)a1 + v9) & v10) | (*(unsigned __int8 *)((((unint64_t)a1
                                                                                                 + v9) & v10)
                                                                                               + 2) << 16);
          goto LABEL_17;
        case 4:
          int v19 = *(_DWORD *)v11;
LABEL_17:
          int v20 = (v19 | (v17 << (8 * v15))) + 2;
          unsigned int v16 = v19 + 2;
          if (v15 < 4) {
            unsigned int v16 = v20;
          }
          break;
        default:
          break;
      }
    }
    if (v16 == 1 && !(*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v6 + 48))(v11, 1, v4)) {
      (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(v11, v4);
    }
    unsigned int v21 = *(unsigned __int8 *)(v13 + v15);
    unsigned int v22 = v21 - 2;
    if (v21 >= 2)
    {
      if (v15 <= 3) {
        uint64_t v23 = v15;
      }
      else {
        uint64_t v23 = 4;
      }
      switch(v23)
      {
        case 1:
          int v24 = *(unsigned __int8 *)v13;
          goto LABEL_31;
        case 2:
          int v24 = *(unsigned __int16 *)v13;
          goto LABEL_31;
        case 3:
          int v24 = *(unsigned __int16 *)v13 | (*(unsigned __int8 *)(v13 + 2) << 16);
          goto LABEL_31;
        case 4:
          int v24 = *(_DWORD *)v13;
LABEL_31:
          int v25 = (v24 | (v22 << (8 * v15))) + 2;
          unsigned int v21 = v24 + 2;
          if (v15 < 4) {
            unsigned int v21 = v25;
          }
          break;
        default:
          break;
      }
    }
    if (v21 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v13, 1, v4))
      {
        memcpy(v11, (const void *)v13, v14);
        char v26 = 1;
      }
      else
      {
        (*(void (**)(unsigned __int8 *, unint64_t, uint64_t))(v6 + 32))(v11, v13, v4);
        char v26 = 1;
        (*(void (**)(unsigned __int8 *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0, 1, v4);
      }
    }
    else
    {
      char v26 = 0;
      *(void *)size_t v11 = *(void *)v13;
    }
    v11[v15] = v26;
  }
  if (v7) {
    unint64_t v27 = v12;
  }
  else {
    unint64_t v27 = v12 + 1;
  }
  if (v27 <= 8) {
    unint64_t v27 = 8;
  }
  unint64_t v28 = v27 + 1;
  uint64_t v29 = (_DWORD *)((((unint64_t)v11 | 3) + v28) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v30 = (_DWORD *)(((v13 | 3) + v28) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v29 = *v30;
  v29[1] = v30[1];
  uint64_t v31 = (_DWORD *)(((unint64_t)v29 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v32 = (_DWORD *)(((unint64_t)v30 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v31 = *v32;
  v31[1] = v32[1];
  *(void *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ListScrollable(int *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(_DWORD *)(v3 + 84)) {
    unint64_t v4 = *(void *)(v3 + 64);
  }
  else {
    unint64_t v4 = *(void *)(v3 + 64) + 1;
  }
  uint64_t v5 = 8;
  if (v4 > 8) {
    uint64_t v5 = v4;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v6 = *(_DWORD *)(v3 + 80) & 0xFC;
  uint64_t v7 = v6 | 3;
  uint64_t v8 = v5 + 4;
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_8;
  }
  unint64_t v11 = ((((((v8 + ((v6 + 11) & ~v7)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  uint64_t v12 = v11 & 0xFFFFFFF8;
  unsigned int v13 = a2 - 2147483646;
  if ((v11 & 0xFFFFFFF8) != 0) {
    unsigned int v13 = 2;
  }
  if (v13 >= 0x10000) {
    int v14 = 4;
  }
  else {
    int v14 = 2;
  }
  if (v13 < 0x100) {
    int v15 = 1;
  }
  else {
    int v15 = v14;
  }
  if (v15 == 4)
  {
    int v16 = *(int *)((char *)a1 + v11);
    if (!v16) {
      goto LABEL_8;
    }
  }
  else if (v15 == 2)
  {
    int v16 = *(unsigned __int16 *)((char *)a1 + v11);
    if (!v16) {
      goto LABEL_8;
    }
  }
  else
  {
    int v16 = *((unsigned __int8 *)a1 + v11);
    if (!v16)
    {
LABEL_8:
      unint64_t v9 = *(void *)((((((v8 + (((unint64_t)a1 + v7 + 8) & ~v7)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
                      + 15) & 0xFFFFFFFFFFFFFFF8);
      if (v9 >= 0xFFFFFFFF) {
        LODWORD(v9) = -1;
      }
      return (v9 + 1);
    }
  }
  int v17 = v16 - 1;
  if (v12)
  {
    int v17 = 0;
    int v18 = *a1;
  }
  else
  {
    int v18 = 0;
  }
  return (v18 | v17) ^ 0x80000000;
}

void storeEnumTagSinglePayload for ListScrollable(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80) & 0xFC;
  uint64_t v7 = v6 | 3;
  uint64_t v8 = (v6 + 11) & ~(v6 | 3);
  if (*(_DWORD *)(v5 + 84)) {
    unint64_t v9 = *(void *)(v5 + 64);
  }
  else {
    unint64_t v9 = *(void *)(v5 + 64) + 1;
  }
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  unint64_t v10 = v9 + 4;
  size_t v11 = ((((((v10 + v8) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL) + 15) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (a3 < 0)
  {
    unsigned int v13 = a3 - 2147483646;
    if (((((((v10 + v8) & 0xFFFFFFFC) + 11) & 0xFFFFFFFC) + 15) & 0xFFFFFFF8) != 0xFFFFFFF8) {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v12 = 1;
    }
    else {
      int v12 = v14;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_8;
    }
  }
  else
  {
    int v12 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_8:
      switch(v12)
      {
        case 1:
          a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        case 2:
          *(_WORD *)&a1[v11] = 0;
          goto LABEL_28;
        case 3:
          goto LABEL_35;
        case 4:
          *(_DWORD *)&a1[v11] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_29;
        default:
LABEL_28:
          if (a2) {
LABEL_29:
          }
            *(void *)((((((v10 + ((unint64_t)&a1[v7 + 8] & ~v7)) & 0xFFFFFFFFFFFFFFFCLL) + 11) & 0xFFFFFFFFFFFFFFFCLL)
                       + 15) & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if (v11) {
    int v15 = 1;
  }
  else {
    int v15 = a2 - 0x7FFFFFFF;
  }
  if (v11)
  {
    unsigned int v16 = a2 ^ 0x80000000;
    bzero(a1, v11);
    *(_DWORD *)a1 = v16;
  }
  switch(v12)
  {
    case 1:
      a1[v11] = v15;
      break;
    case 2:
      *(_WORD *)&a1[v11] = v15;
      break;
    case 3:
LABEL_35:
      __break(1u);
      JUMPOUT(0x187C362E8);
    case 4:
      *(_DWORD *)&a1[v11] = v15;
      break;
    default:
      return;
  }
}

ValueMetadata *type metadata accessor for ApplyCollectionViewIDsVisitor()
{
  return &type metadata for ApplyCollectionViewIDsVisitor;
}

void type metadata accessor for TableContentVisitor<TableDataSourceAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AnyHashable2 and conformance AnyHashable2()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2;
  if (!lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyHashable2 and conformance AnyHashable2);
  }
  return result;
}

uint64_t sub_187C363E4()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v0 + 80)) {
    swift_release();
  }

  return swift_deallocObject();
}

void partial apply for closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(uint64_t a1)
{
  closure #1 in PPTTestCase.runScrollSubTest(_:subTestName:scrollMode:onComplete:)(a1, v1 + 16, *(void *)(v1 + 64), *(void *)(v1 + 72), *(void (**)(uint64_t, void *))(v1 + 80));
}

uint64_t destroy for ExplicitIDFromViewListIDVisitor(uint64_t a1)
{
  uint64_t result = swift_release();
  if (*(void *)(a1 + 40))
  {
    return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
  }
  return result;
}

uint64_t initializeWithCopy for ExplicitIDFromViewListIDVisitor(uint64_t a1, void *a2)
{
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = a2[1];
  unint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2[5];
  swift_retain();
  if (v6)
  {
    uint64_t v7 = a2[6];
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = v7;
    (**(void (***)(uint64_t, void *, uint64_t))(v6 - 8))(a1 + 16, v5, v6);
  }
  else
  {
    long long v8 = *((_OWORD *)v5 + 1);
    *unint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 32) = v8;
    *(void *)(a1 + 48) = v5[4];
  }
  return a1;
}

uint64_t assignWithCopy for ExplicitIDFromViewListIDVisitor(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  unint64_t v4 = (_OWORD *)(a1 + 16);
  uint64_t v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  if (*(void *)(a1 + 40))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
    }
    else
    {
      outlined destroy of AnyHashable(a1 + 16);
      uint64_t v7 = *(void *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 32);
      *unint64_t v4 = *v5;
      *(_OWORD *)(a1 + 32) = v8;
      *(void *)(a1 + 48) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 40) = v6;
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *unint64_t v4 = v9;
    *(_OWORD *)(a1 + 32) = v10;
  }
  return a1;
}

uint64_t assignWithTake for ExplicitIDFromViewListIDVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a2 + 40)) {
      __swift_destroy_boxed_opaque_existential_1(a1 + 16);
    }
    else {
      outlined destroy of AnyHashable(a1 + 16);
    }
  }
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplicitIDFromViewListIDVisitor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplicitIDFromViewListIDVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplicitIDFromViewListIDVisitor()
{
  return &type metadata for ExplicitIDFromViewListIDVisitor;
}

uint64_t initializeWithCopy for ExplicitIDOffsetVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ExplicitIDOffsetVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v4;
  return a1;
}

uint64_t assignWithTake for ExplicitIDOffsetVisitor(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ExplicitIDOffsetVisitor(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ExplicitIDOffsetVisitor(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ExplicitIDOffsetVisitor()
{
  return &type metadata for ExplicitIDOffsetVisitor;
}

uint64_t EnvironmentValues.pageIndexDisplayMode.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.pageIndexDisplayMode.setter()
{
  type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unsigned char *PageTabViewStyle.init(indexDisplayMode:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static PageTabViewStyle.IndexDisplayMode.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static PageTabViewStyle.IndexDisplayMode.always.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static PageTabViewStyle.IndexDisplayMode.never.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t static PageTabViewStyle._makeView<A>(value:inputs:)()
{
  return swift_release();
}

uint64_t type metadata accessor for PageTabView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PageTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static PageTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return swift_bridgeObjectRelease();
}

uint64_t PageTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t PageTabViewStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v24 = a4;
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v22 = *(void *)(v7 - 8);
  uint64_t v23 = v7;
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)&v21 - v8;
  v28[0] = &type metadata for PageTabViewStyle;
  v28[1] = a2;
  v28[2] = &protocol witness table for PageTabViewStyle;
  v28[3] = a3;
  uint64_t v10 = type metadata accessor for _TabViewValue();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  unsigned int v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  unsigned int v16 = (char *)&v21 - v15;
  uint64_t v21 = type metadata accessor for PageTabView();
  MEMORY[0x1F4188790](v21);
  int v18 = (char *)&v21 - v17;
  PageTabViewStyle.Body.base.getter((uint64_t)v16);
  char v19 = *v16;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
  LOBYTE(v28[0]) = v19;
  PageTabViewStyle.Body.base.getter((uint64_t)v13);
  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v9, &v13[*(int *)(v10 + 52)], v23);
  PageTabView.init(displayMode:selection:)(v28, (uint64_t)v9, v18);
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  int v27 = a1;
  type metadata accessor for TabViewStyleConfiguration.Content();
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t PageTabView.init(displayMode:selection:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  *a3 = *a1;
  int v4 = &a3[*(int *)(type metadata accessor for PageTabView() + 36)];
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v6(v4, a2, v5);
}

uint64_t closure #1 in PageTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = &type metadata for PageTabViewStyle;
  v10[1] = a2;
  void v10[2] = &protocol witness table for PageTabViewStyle;
  v10[3] = a3;
  uint64_t v3 = type metadata accessor for _TabViewValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v10 - v5;
  PageTabViewStyle.Body.base.getter((uint64_t)v10 - v5);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v8 = static ViewBuilder.buildExpression<A>(_:)(v7);
  return static ViewBuilder.buildExpression<A>(_:)(v8);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PageTabViewStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PageTabView();
  type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v2 = type metadata accessor for _VariadicView.Tree();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance PageTabViewStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PageTabViewStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t View.indexViewPlacement(_:)(char *a1, uint64_t a2, uint64_t a3)
{
  char v4 = *a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for IndexViewPlacementModifier, a3);
}

void static _IndexViewPlacement.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static _IndexViewPlacement.toolbar.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

ValueMetadata *type metadata accessor for _IndexViewPlacement()
{
  return &type metadata for _IndexViewPlacement;
}

uint64_t sub_187C37630()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for _IndexViewPlacement.Role()
{
  return &type metadata for _IndexViewPlacement.Role;
}

unsigned char *storeEnumTagSinglePayload for PageTabViewStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C37770);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for _IndexViewPlacement(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C37864);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PageTabView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = ~(v7 | 7);
  size_t v9 = ((v7 + 16) & ~v7) + *(void *)(v5 + 64);
  if (v7 <= 7 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0 && (((v7 | 7) + 1) & ~(v7 | 7)) + v9 <= 0x18)
  {
    uint64_t v13 = ~v7;
    *a1 = *a2;
    uint64_t v14 = (void *)((unint64_t)(a1 + 8) & v8);
    uint64_t v15 = (void *)((unint64_t)(a2 + 8) & v8);
    unsigned int v16 = (uint64_t *)(((unint64_t)v15 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v16 + v7 + 8) & v13, v6, v4))
      {
LABEL_14:
        memcpy(v14, v15, v9);
        return v3;
      }
    }
    else
    {
      uint64_t v17 = *v16;
      if ((unint64_t)*v16 >= 0xFFFFFFFF) {
        LODWORD(v17) = -1;
      }
      if (v17 != -1) {
        goto LABEL_14;
      }
    }
    void *v14 = *v15;
    int v18 = (void *)(((unint64_t)v14 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v18 = *v16;
    uint64_t v19 = ((unint64_t)v18 + v7 + 8) & v13;
    int v20 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v20(v19, ((unint64_t)v16 + v7 + 8) & v13, v4);
    return v3;
  }
  uint64_t v12 = *(void *)a2;
  void *v3 = *(void *)a2;
  int v3 = (void *)(v12 + ((v7 + 16) & v8));
  swift_retain();
  return v3;
}

uint64_t destroy for PageTabView(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = v3;
  uint64_t v5 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v6 = ~v5;
  uint64_t v7 = (uint64_t *)((((a1 + (v5 | 7) + 1) & ~(v5 | 7)) + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v7 + v5 + 8) & v6);
    uint64_t v4 = v11;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v8 = *v7;
  if ((unint64_t)*v7 >= 0xFFFFFFFF) {
    LODWORD(v8) = -1;
  }
  uint64_t result = (v8 + 1);
  if (v8 == -1)
  {
LABEL_7:
    uint64_t v12 = v4;
    swift_release();
    swift_release();
    uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t))(v12 + 8);
    return v10(((unint64_t)v7 + v5 + 8) & v6, v2);
  }
  return result;
}

unsigned char *initializeWithCopy for PageTabView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 1;
  uint64_t v8 = (void *)((unint64_t)&a1[v7] & ~(v6 | 7));
  size_t v9 = (void *)((unint64_t)&a2[v7] & ~(v6 | 7));
  uint64_t v10 = ~v6;
  uint64_t v11 = *(void *)(v5 + 64);
  uint64_t v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v8 = *v9;
    uint64_t v14 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v14 = *v12;
    uint64_t v15 = ((unint64_t)v14 + v6 + 8) & v10;
    unsigned int v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v16(v15, ((unint64_t)v12 + v6 + 8) & v10, v4);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v12 + v6 + 8) & v10)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v8, v9, ((v6 + 16) & ~v6) + v11);
  return a1;
}

unsigned char *assignWithCopy for PageTabView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 1;
  uint64_t v8 = (void *)((unint64_t)&a1[v7] & ~(v6 | 7));
  size_t v9 = (void *)((unint64_t)&a2[v7] & ~(v6 | 7));
  uint64_t v10 = *(unsigned int *)(v5 + 84);
  uint64_t v11 = *(void *)(v5 + 64);
  size_t v12 = ((v6 + 16) & ~v6) + v11;
  uint64_t v13 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v25 = ~v6;
  uint64_t v26 = v4;
  if ((v10 & 0x80000000) != 0)
  {
    size_t v23 = ((v6 + 16) & ~v6) + v11;
    uint64_t v22 = (unint64_t)&a1[v7] & ~(v6 | 7);
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v21 = v17(((unint64_t)v13 + v6 + 8) & ~v6, v10, v4);
    uint64_t v18 = v4;
    uint64_t v14 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v3 = a1;
    int v16 = v17(((unint64_t)v14 + v6 + 8) & ~v6, v10, v18);
    uint64_t v8 = (void *)v22;
    size_t v12 = v23;
    if (!v21)
    {
LABEL_5:
      if (!v16)
      {
        *uint64_t v8 = *v9;
        swift_retain();
        swift_release();
        void *v13 = *v14;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 24))(((unint64_t)v13 + v6 + 8) & v25, ((unint64_t)v14 + v6 + 8) & v25, v26);
        return v3;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v13 + v6 + 8) & v25, v26);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = (void *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v15 = *v14;
    if (*v14 >= 0xFFFFFFFFuLL) {
      LODWORD(v15) = -1;
    }
    int v16 = v15 + 1;
    if (*v13 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v16)
  {
    *uint64_t v8 = *v9;
    void *v13 = *v14;
    uint64_t v19 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v19(((unint64_t)v13 + v6 + 8) & v25, ((unint64_t)v14 + v6 + 8) & v25, v26);
    return v3;
  }
LABEL_9:
  memcpy(v8, v9, v12);
  return v3;
}

unsigned char *initializeWithTake for PageTabView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 1;
  uint64_t v8 = (char *)((unint64_t)&a1[v7] & ~(v6 | 7));
  size_t v9 = (void *)((unint64_t)&a2[v7] & ~(v6 | 7));
  uint64_t v10 = ~v6;
  uint64_t v11 = *(void *)(v5 + 64);
  size_t v12 = (uint64_t *)(((unint64_t)v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v8 = *v9;
    unint64_t v14 = (unint64_t)(v8 + 15);
    *(void *)(v14 & 0xFFFFFFFFFFFFFFF8) = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))((v6 + 8 + (v14 & 0xFFFFFFFFFFFFFFF8)) & v10, ((unint64_t)v12 + v6 + 8) & v10, v4);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v12 + v6 + 8) & v10)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v8, v9, ((v6 + 16) & ~v6) + v11);
  return a1;
}

unsigned char *assignWithTake for PageTabView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 | 7) + 1;
  uint64_t v8 = (void *)((unint64_t)&a1[v7] & ~(v6 | 7));
  unint64_t v9 = (unint64_t)&a2[v7];
  uint64_t v10 = (void *)(v9 & ~(v6 | 7));
  uint64_t v11 = *(unsigned int *)(v5 + 84);
  uint64_t v12 = ~v6;
  size_t v13 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
  unint64_t v14 = (void *)(((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v11 & 0x80000000) != 0)
  {
    uint64_t v26 = v9 & ~(v6 | 7);
    uint64_t v24 = ((v6 + 16) & ~v6) + *(void *)(v5 + 64);
    int v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
    int v23 = v21(((unint64_t)v14 + v6 + 8) & ~v6, v11, v4);
    uint64_t v15 = (void *)((v26 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v12 = ~v6;
    int v17 = v21(((unint64_t)v15 + v6 + 8) & ~v6, v11, v4);
    size_t v13 = v24;
    uint64_t v3 = a1;
    uint64_t v10 = (void *)v26;
    if (!v23)
    {
LABEL_5:
      if (!v17)
      {
        *uint64_t v8 = *v10;
        swift_release();
        void *v14 = *v15;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 40))(((unint64_t)v14 + v6 + 8) & v12, ((unint64_t)v15 + v6 + 8) & v12, v4);
        return v3;
      }
      size_t v18 = v13;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v14 + v6 + 8) & v12, v4);
      uint64_t v19 = v8;
      int v20 = v10;
      size_t v13 = v18;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v15 = (void *)(((unint64_t)v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v16 = *v15;
    if (*v15 >= 0xFFFFFFFFuLL) {
      LODWORD(v16) = -1;
    }
    int v17 = v16 + 1;
    if (*v14 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v17)
  {
    *uint64_t v8 = *v10;
    void *v14 = *v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 32))(((unint64_t)v14 + v6 + 8) & v12, ((unint64_t)v15 + v6 + 8) & v12, v4);
    return v3;
  }
  uint64_t v19 = v8;
  int v20 = v10;
LABEL_10:
  memcpy(v19, v20, v13);
  return v3;
}

uint64_t getEnumTagSinglePayload for PageTabView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v8 + 1) & ~v8);
  char v10 = 8 * v9;
  if (v9 > 3) {
    goto LABEL_7;
  }
  unsigned int v13 = (((1 << v10) + a2 - v7) >> v10) + 1;
  if (HIWORD(v13))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_15;
    }
LABEL_25:
    int v17 = (unint64_t *)(((((unint64_t)a1 + v8 + 1) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v18 = *v17;
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      unsigned int v19 = v18 + 1;
    }
    if (v19 >= 2) {
      return v19 - 1;
    }
    else {
      return 0;
    }
  }
  if (v13 > 0xFF)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v13 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_25;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 <= 3) {
      int v15 = ((v6 + 16) & ~v6)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64)
          + ((v8 + 1) & ~v8);
    else {
      int v15 = 4;
    }
    switch(v15)
    {
      case 2:
        int v16 = *a1;
        break;
      case 3:
        int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v16 = *(_DWORD *)a1;
        break;
      default:
        int v16 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v16 = 0;
  }
  return (v16 | v14) + v7;
}

void storeEnumTagSinglePayload for PageTabView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v13 = (((v10 | 7) + 1) & ~(v10 | 7)) + v12;
  if (v8 - 1 >= a3)
  {
    int v14 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v14 = 1;
  if (v13 > 3) {
    goto LABEL_13;
  }
  unsigned int v15 = (((1 << (8 * v13)) + a3 - v8) >> (8 * v13)) + 1;
  if (HIWORD(v15))
  {
    int v14 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v15 >= 0x100) {
      int v14 = 2;
    }
    else {
      int v14 = v15 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v14)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v11 = v10 | 7;
            unint64_t v19 = (unint64_t)&a1[v11 + 1] & ~v11;
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                int v23 = (void *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v26 = a2 + 1;
                  v25(((unint64_t)v23 + v10 + 8) & ~v10, v26);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v24 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v24 = a2;
                  }
                  *int v23 = v24;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v20 = ~(-1 << (8 * v12));
              }
              else {
                int v20 = -1;
              }
              if (v12)
              {
                int v21 = v20 & (a2 - v8);
                if (v12 <= 3) {
                  int v22 = v12;
                }
                else {
                  int v22 = 4;
                }
                bzero((void *)((unint64_t)&a1[v11 + 1] & ~v11), v12);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)unint64_t v19 = v21;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v19 = v21;
                    *(unsigned char *)(v19 + 2) = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v19 = v21;
                    break;
                  default:
                    *(unsigned char *)unint64_t v19 = v21;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v16 = a2 - v8;
  if (v13 < 4)
  {
    int v17 = (v16 >> (8 * v13)) + 1;
    if (v13)
    {
      int v18 = v16 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, (((v10 | 7) + 1) & ~(v10 | 7)) + v12);
    *(_DWORD *)a1 = v16;
    int v17 = 1;
  }
  switch(v14)
  {
    case 1:
      a1[v13] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v17;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x187C38824);
    case 4:
      *(_DWORD *)&a1[v13] = v17;
      break;
    default:
      return;
  }
}

uint64_t instantiation function for generic protocol witness table for PageTabView<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for ViewModifier in IndexViewPlacementModifier()
{
  return &protocol witness table for IndexViewPlacementModifier;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IndexViewPlacementModifier.IsAutomaticPredicate()
{
  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return (v1 & 1) == 0;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IndexViewPlacementModifier.IsToolbarPredicate()
{
  lazy protocol witness table accessor for type IndexViewPlacementModifier.Input and conformance IndexViewPlacementModifier.Input();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v1;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance IndexViewPlacementModifier(unsigned int *a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  v7[2] = *(_OWORD *)(a2 + 32);
  v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static ViewInputsModifier._makeView(modifier:inputs:body:)(v3, (uint64_t)v7, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance IndexViewPlacementModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance IndexViewPlacementModifier()
{
}

unint64_t lazy protocol witness table accessor for type PageIndexDisplayMode and conformance PageIndexDisplayMode()
{
  unint64_t result = lazy protocol witness table cache variable for type PageIndexDisplayMode and conformance PageIndexDisplayMode;
  if (!lazy protocol witness table cache variable for type PageIndexDisplayMode and conformance PageIndexDisplayMode)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PageIndexDisplayMode and conformance PageIndexDisplayMode);
  }
  return result;
}

uint64_t PageTabView.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = &v13[-v9 - 8];
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v13);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v8 + 16))(v10, &v3[*(int *)(a2 + 36)], v7);
  HIBYTE(v12) = *v3;
  return PageViewWrapper.init(children:selection:displayMode:)((uint64_t)v13, (uint64_t)v10, (char *)&v12 + 7, a3);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PageTabView<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance PageTabView<A>()
{
  return MEMORY[0x1F40FF800]();
}

unint64_t lazy protocol witness table accessor for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role;
  if (!lazy protocol witness table cache variable for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _IndexViewPlacement.Role and conformance _IndexViewPlacement.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PageTabView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in PageTabViewStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in PageTabViewStyle.Body.value.getter()
{
  return closure #1 in PageTabViewStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier;
  if (!lazy protocol witness table cache variable for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IndexViewPlacementModifier and conformance IndexViewPlacementModifier);
  }
  return result;
}

uint64_t specialized static IndexViewPlacementModifier._makeViewInputs(modifier:inputs:)()
{
  return PropertyList.subscript.setter();
}

void type metadata accessor for _GraphValue<IndexViewPlacementModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<IndexViewPlacementModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<IndexViewPlacementModifier>);
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PageIndexDisplayMode.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PageIndexDisplayMode.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<PageIndexDisplayMode.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PageIndexDisplayMode.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for PageIndexDisplayMode.Key()
{
  return &type metadata for PageIndexDisplayMode.Key;
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier.Input()
{
  return &type metadata for IndexViewPlacementModifier.Input;
}

uint64_t sub_187C38FE4()
{
  type metadata accessor for PageViewWrapper();

  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier.IsToolbarPredicate()
{
  return &type metadata for IndexViewPlacementModifier.IsToolbarPredicate;
}

ValueMetadata *type metadata accessor for IndexViewPlacementModifier.IsAutomaticPredicate()
{
  return &type metadata for IndexViewPlacementModifier.IsAutomaticPredicate;
}

uint64_t ParameterizedLazyView.init(value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5, a1, a4);
  uint64_t result = type metadata accessor for ParameterizedLazyView();
  uint64_t v9 = (void *)(a5 + *(int *)(result + 44));
  *uint64_t v9 = a2;
  v9[1] = a3;
  return result;
}

uint64_t type metadata accessor for ParameterizedLazyView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ParameterizedLazyView(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C392A4);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for ParameterizedLazyView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187C39498);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in ParameterizedLazyView<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ParameterizedLazyView.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v7 = MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v14 - v8;
  (*(void (**)(uint64_t, double))(v1 + *(int *)(v10 + 44)))(v11, v7);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  int v12 = *(void (**)(char *, uint64_t))(v3 + 8);
  v12(v5, v2);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v12)(v9, v2);
}

uint64_t sub_187C39658(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

void static PaletteSelectionEffect.automatic.getter(_WORD *a1@<X8>)
{
  *a1 = 1024;
}

_WORD *static PaletteSelectionEffect.symbolVariant(_:)@<X0>(_WORD *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void static PaletteSelectionEffect.custom.getter(_WORD *a1@<X8>)
{
  *a1 = 1280;
}

uint64_t View.paletteSelectionEffect(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.paletteSelectionEffect.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PaletteSelectionEffect> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PaletteSelectionEffect> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.paletteSelectionEffect.setter()
{
  type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PaletteSelectionEffect> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PaletteSelectionEffectKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void protocol witness for static EnvironmentKey.defaultValue.getter in conformance PaletteSelectionEffectKey(_WORD *a1@<X8>)
{
  *a1 = 1024;
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance PaletteSelectionEffectKey(unsigned __int16 *a1, unsigned __int16 *a2)
{
  unsigned int v2 = *a1;
  unsigned int v3 = *a2;
  if (v2 >> 8 == 4)
  {
    if ((v3 & 0xFF00) != 0x400) {
      goto LABEL_8;
    }
  }
  else
  {
    if (v2 >> 8 != 5)
    {
      if (((v3 >> 8) & 0xFE) != 4)
      {
        char v4 = static SymbolVariants.== infix(_:_:)();
        return v4 & 1;
      }
      goto LABEL_8;
    }
    if ((v3 & 0xFF00) != 0x500)
    {
LABEL_8:
      char v4 = 0;
      return v4 & 1;
    }
  }
  char v4 = 1;
  return v4 & 1;
}

uint64_t getEnumTagSinglePayload for PaletteSelectionEffect(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFB) {
    goto LABEL_17;
  }
  if (a2 + 65285 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65285 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65285;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65285;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65285;
    }
  }
LABEL_17:
  if (*((unsigned __int8 *)a1 + 1) <= 5u) {
    int v6 = 5;
  }
  else {
    int v6 = *((unsigned __int8 *)a1 + 1);
  }
  int v7 = v6 - 6;
  if (*((unsigned __int8 *)a1 + 1) < 3u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PaletteSelectionEffect(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65285 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65285 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 251;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C39B38);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t sub_187C39B60()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<PaletteSelectionEffect>);
    }
  }
}

uint64_t getEnumTagSinglePayload for PaletteSelectionEffect.Guts(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB)
  {
    unsigned int v2 = a2 + 65285;
    if (a2 + 65285 <= 0xFFFEFFFF) {
      unsigned int v3 = 2;
    }
    else {
      unsigned int v3 = 4;
    }
    if (v2 < 0xFF0000) {
      unsigned int v3 = 1;
    }
    if (v2 >= 0x10000) {
      uint64_t v4 = v3;
    }
    else {
      uint64_t v4 = 0;
    }
    switch(v4)
    {
      case 1:
        int v5 = *((unsigned __int8 *)a1 + 2);
        if (!*((unsigned char *)a1 + 2)) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65285;
      case 2:
        int v5 = a1[1];
        if (a1[1]) {
          return (*a1 | (v5 << 16)) - 65285;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C39D14);
      case 4:
        int v5 = *(_DWORD *)(a1 + 1);
        if (!v5) {
          break;
        }
        return (*a1 | (v5 << 16)) - 65285;
      default:
        break;
    }
  }
  if (*((unsigned __int8 *)a1 + 1) <= 3u) {
    int v7 = 3;
  }
  else {
    int v7 = *((unsigned __int8 *)a1 + 1);
  }
  unsigned int v8 = v7 - 3;
  if (*((unsigned __int8 *)a1 + 1) >= 3u) {
    unsigned int v9 = v8;
  }
  else {
    unsigned int v9 = 0;
  }
  if (v9 >= 3) {
    return v9 - 2;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PaletteSelectionEffect.Guts(uint64_t result, unsigned int a2, unsigned int a3)
{
  unsigned int v3 = a3 + 65285;
  if (a3 + 65285 <= 0xFFFEFFFF) {
    int v4 = 2;
  }
  else {
    int v4 = 4;
  }
  if (v3 < 0xFF0000) {
    int v4 = 1;
  }
  if (v3 >= 0x10000) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 0;
  }
  if (a3 >= 0xFB) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v7 = ((a2 - 251) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 251;
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = v7;
        break;
      case 2:
        *(_WORD *)(result + 2) = v7;
        break;
      case 3:
LABEL_25:
        __break(1u);
        JUMPOUT(0x187C39DFCLL);
      case 4:
        *(_DWORD *)(result + 2) = v7;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v6)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_19;
      case 3:
        goto LABEL_25;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_20;
      default:
LABEL_19:
        if (a2) {
LABEL_20:
        }
          *(unsigned char *)(result + 1) = a2 + 5;
        break;
    }
  }
  return result;
}

uint64_t getEnumTag for PaletteSelectionEffect.Guts(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1) <= 3u) {
    int v1 = 3;
  }
  else {
    int v1 = *(unsigned __int8 *)(a1 + 1);
  }
  unsigned int v2 = v1 - 3;
  if (*(unsigned __int8 *)(a1 + 1) >= 3u) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for PaletteSelectionEffect.Guts(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFC)
  {
    *(_WORD *)uint64_t result = a2 - 253;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 1) = a2 + 3;
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<PaletteSelectionEffectKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PaletteSelectionEffectKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<PaletteSelectionEffect> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for PaletteSelectionEffectKey()
{
  return &type metadata for PaletteSelectionEffectKey;
}

BOOL static SidebarRowSize.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void SidebarRowSize.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int SidebarRowSize.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t EnvironmentValues.sidebarRowSize.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<SidebarRowSize.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<SidebarRowSize.Key>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t key path getter for EnvironmentValues.sidebarRowSize : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t EnvironmentValues.sidebarRowSize.setter()
{
  type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues.sidebarRowSize.modify(void *a1))(uint64_t *a1)
{
  *a1 = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.sidebarRowSize.modify;
}

uint64_t EnvironmentValues.sidebarRowSize.modify(uint64_t *a1)
{
  uint64_t v1 = *a1;
  *((unsigned char *)a1 + 9) = *((unsigned char *)a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<SidebarRowSize.Key>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<SidebarRowSize.Key> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }

  return swift_release();
}

unint64_t lazy protocol witness table accessor for type SidebarRowSize and conformance SidebarRowSize()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarRowSize and conformance SidebarRowSize;
  if (!lazy protocol witness table cache variable for type SidebarRowSize and conformance SidebarRowSize)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarRowSize and conformance SidebarRowSize);
  }
  return result;
}

uint64_t sub_187C3A504()
{
  return EnvironmentValues.sidebarRowSize.setter();
}

unsigned char *storeEnumTagSinglePayload for SidebarRowSize(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C3A608);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarRowSize()
{
  return &type metadata for SidebarRowSize;
}

void *type metadata accessor for SidebarRowSize.Key()
{
  return &unk_1ED4181F0;
}

uint64_t UIKitGestureContainer._proxyView.getter()
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = result + 16;
    swift_beginAccess();
    if (MEMORY[0x18C119DF0](v2))
    {
      uint64_t v3 = *(void *)(v1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(&v6, v5, v5, ObjectType, v3);
      swift_release();
      swift_unknownObjectRelease();
      return v6;
    }
    else
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

char *UIKitGestureContainer.init(responder:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_responder + 8] = 0;
  uint64_t v7 = swift_weakInit();
  unsigned int v8 = &v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_subgraphObserver];
  *(void *)unsigned int v8 = 0;
  v8[8] = 1;
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers] = MEMORY[0x1E4FBC860];
  *(void *)&v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer__actingParentContainer] = 0;
  *(void *)(v7 + 8) = a2;
  swift_weakAssign();
  v17.receiver = v3;
  v17.super_class = ObjectType;
  id v9 = objc_msgSendSuper2(&v17, sel_init);
  uint64_t v10 = *a1;
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 8);
  int v12 = (char *)v9;
  unsigned int v13 = (void *)v11(v10, a2);
  swift_allocObject();
  swift_unknownObjectWeakInit();
  swift_retain();
  uint64_t v14 = AGSubgraphAddObserver();

  swift_release_n();
  swift_release();
  int v15 = &v12[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_subgraphObserver];
  *(void *)int v15 = v14;
  v15[8] = 0;
  return v12;
}

void closure #1 in UIKitGestureContainer.init(responder:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (char *)v2;
    UIKitGestureContainer.unregister()();
    unsigned int v4 = &v3[OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_subgraphObserver];
    *(void *)unsigned int v4 = 0;
    v4[8] = 1;
  }
}

uint64_t UIKitGestureContainer.unregister()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_responder;
  Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void))(*(void *)(v2 + 8) + 24))(*Strong);
    swift_release();
  }
  uint64_t v4 = OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers;
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers);
  uint64_t v6 = *(void *)(v5 + 16);
  if (v6)
  {
    uint64_t v7 = v5 + 32;
    swift_bridgeObjectRetain();
    do
    {
      outlined init with copy of WeakBox<UIGestureRecognizer>(v7, (uint64_t)v11);
      uint64_t v8 = MEMORY[0x18C119DF0](v11);
      if (v8)
      {
        id v9 = (void *)v8;
        _UIGestureRecognizerUnregisterFromContainer();
      }
      outlined destroy of WeakBox<UIGestureRecognizer>((uint64_t)v11);
      v7 += 8;
      --v6;
    }
    while (v6);
    swift_bridgeObjectRelease();
  }
  *(void *)(v1 + v4) = MEMORY[0x1E4FBC860];
  return swift_bridgeObjectRelease();
}

unint64_t UIKitGestureContainer.description.getter()
{
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  Swift::String v15;
  Swift::String v16;
  uint64_t v18;
  Swift::String v19;
  unint64_t v20;
  unint64_t v21;

  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_responder;
  Strong = (void *)swift_weakLoadStrong();
  if (Strong)
  {
    (*(void (**)(void))(*(void *)(v1 + 8) + 32))(*Strong);
    uint64_t v3 = _typeName(_:qualified:)();
    uint64_t v5 = v4;
    swift_release();
  }
  else
  {
    uint64_t v5 = (void *)0xE300000000000000;
    uint64_t v3 = 7104878;
  }
  _StringGuts.grow(_:)(25);
  swift_bridgeObjectRelease();
  int v20 = 0xD000000000000016;
  int v21 = 0x8000000188334FD0;
  v6._countAndFlagsBits = v3;
  v6._object = v5;
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 62;
  v7._object = (void *)0xE100000000000000;
  String.append(_:)(v7);
  uint64_t v8 = swift_weakLoadStrong();
  if (v8)
  {
    id v9 = (uint64_t *)v8;
    uint64_t v10 = swift_conformsToProtocol2();
    if (v10) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = 0;
    }
    if (v10) {
      int v12 = v9;
    }
    else {
      int v12 = 0;
    }
    if (v12
      && (uint64_t v13 = *v12,
          uint64_t v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(v11 + 72),
          v14((uint64_t *)&v19, *v12, v11),
          LOBYTE(v19._countAndFlagsBits)))
    {
      v19._countAndFlagsBits = 0;
      v19._object = (void *)0xE000000000000000;
      v15._countAndFlagsBits = 32;
      v15._object = (void *)0xE100000000000000;
      String.append(_:)(v15);
      v14(&v18, v13, v11);
      _print_unlocked<A, B>(_:_:)();
      String.append(_:)(v19);
      swift_release();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_release();
    }
  }
  v19._countAndFlagsBits = 0;
  v19._object = (void *)0xE000000000000000;
  v16._countAndFlagsBits = 32;
  v16._object = (void *)0xE100000000000000;
  String.append(_:)(v16);
  int v18 = v0;
  _print_unlocked<A, B>(_:_:)();
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t UIKitGestureContainer.next.getter()
{
  if (*(void *)(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer__actingParentContainer))
  {
    self;
    uint64_t v1 = swift_dynamicCastObjCClass();
    if (v1)
    {
      uint64_t v2 = v1;
      swift_unknownObjectRetain();
      return v2;
    }
  }
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong)
  {
LABEL_16:
    uint64_t v10 = swift_weakLoadStrong();
    if (v10)
    {
      uint64_t v11 = v10;
      uint64_t v12 = v10 + 16;
      swift_beginAccess();
      if (MEMORY[0x18C119DF0](v12))
      {
        uint64_t v13 = *(void *)(v11 + 24);
        uint64_t ObjectType = swift_getObjectType();
        uint64_t v15 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 16))(&v17, v15, v15, ObjectType, v13);
        swift_release();
        swift_unknownObjectRelease();
        return v17;
      }
      swift_release();
    }
    return 0;
  }
  uint64_t v4 = Strong;
  swift_retain();
  swift_beginAccess();
  if (!swift_weakLoadStrong())
  {
LABEL_12:
    swift_beginAccess();
    if (MEMORY[0x18C119DF0](v4 + 16))
    {
      uint64_t v7 = *(void *)(v4 + 24);
      uint64_t v8 = swift_getObjectType();
      uint64_t v9 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 16))(v18, v9, v9, v8, v7);
      swift_unknownObjectRelease();
      uint64_t v2 = v18[0];
      swift_release();
      swift_release();
      if (v2) {
        return v2;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v5 = dispatch thunk of ViewResponder.gestureContainer.getter();
    if (v5) {
      break;
    }
    type metadata accessor for UIViewResponder();
    uint64_t v6 = swift_dynamicCastClass();
    if (v6)
    {
      uint64_t v5 = MEMORY[0x18C119DF0](v6 + 48);
      if (v5) {
        break;
      }
    }
    swift_release();
    swift_beginAccess();
    if (!swift_weakLoadStrong()) {
      goto LABEL_12;
    }
  }
  uint64_t v2 = v5;
  swift_release();
  swift_release();
  swift_release();
  return v2;
}

uint64_t UIKitGestureContainer.gestureRecognizers.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  uint64_t result = MEMORY[0x1E4FBC860];
  if (Strong)
  {
    unint64_t v19 = MEMORY[0x1E4FBC860];
    MEMORY[0x1F4188790](MEMORY[0x1E4FBC860]);
    static Update.ensure<A>(_:)();
    unint64_t v3 = v19;
    if (v19 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v4 = *(void *)((v19 & 0xFFFFFFFFFFFFFF8) + 0x10);
    }
    uint64_t v5 = OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers;
    uint64_t v6 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI21UIKitGestureContainer_registeredGestureRecognizers);
    char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v0 + v5) = v6;
    if (!isUniquelyReferenced_nonNull_native || v4 > v6[3] >> 1)
    {
      if (v6[2] <= v4) {
        int64_t v8 = v4;
      }
      else {
        int64_t v8 = v6[2];
      }
      uint64_t v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v8, 0, v6);
    }
    *(void *)(v0 + v5) = v6;
    if (v3 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t result = _CocoaArrayWrapper.endIndex.getter();
      uint64_t v9 = result;
      if (!result)
      {
LABEL_24:
        swift_release();
        swift_bridgeObjectRelease();
        return v19;
      }
    }
    else
    {
      uint64_t v9 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
      uint64_t result = swift_bridgeObjectRetain();
      if (!v9) {
        goto LABEL_24;
      }
    }
    if (v9 < 1)
    {
      __break(1u);
      return result;
    }
    uint64_t v10 = 0;
    do
    {
      if ((v3 & 0xC000000000000001) != 0) {
        id v11 = (id)MEMORY[0x18C117680](v10, v3);
      }
      else {
        id v11 = *(id *)(v3 + 8 * v10 + 32);
      }
      uint64_t v12 = v11;
      _UIGestureRecognizerRegisterInContainer();
      swift_unknownObjectWeakInit();
      uint64_t v13 = swift_unknownObjectWeakAssign();
      outlined init with take of WeakBox<UIGestureRecognizer>(v13, (uint64_t)v18);
      uint64_t v14 = *(void **)(v0 + v5);
      char v15 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + v5) = v14;
      if ((v15 & 1) == 0)
      {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
        *(void *)(v0 + v5) = v14;
      }
      unint64_t v17 = v14[2];
      unint64_t v16 = v14[3];
      if (v17 >= v16 >> 1)
      {
        uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
        *(void *)(v0 + v5) = v14;
      }
      ++v10;
      void v14[2] = v17 + 1;
      outlined init with take of WeakBox<UIGestureRecognizer>((uint64_t)v18, (uint64_t)&v14[v17 + 4]);
    }
    while (v9 != v10);
    goto LABEL_24;
  }
  return result;
}

uint64_t closure #1 in UIKitGestureContainer.gestureRecognizers.getter(void *a1, void *a2, uint64_t a3)
{
  void (*v11)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;

  uint64_t v4 = (*(uint64_t (**)(void, uint64_t))(a3 + 16))(*a2, a3);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  char v15 = MEMORY[0x1E4FBC860];
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v7 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIGestureRecognizer);
    int64_t v8 = (uint64_t *)(v4 + 40);
    do
    {
      uint64_t v9 = *v8;
      uint64_t ObjectType = swift_getObjectType();
      id v11 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16);
      swift_unknownObjectRetain();
      v11(&v14, v7, v7, ObjectType, v9);
      uint64_t v12 = swift_unknownObjectRelease();
      if (v14)
      {
        MEMORY[0x18C115B40](v12);
        if (*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
      }
      v8 += 2;
      --v6;
    }
    while (v6);
    uint64_t v5 = v15;
  }
  swift_bridgeObjectRelease();
  *a1 = v5;
  return swift_bridgeObjectRelease();
}

uint64_t UIKitGestureContainer._parentContainer.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = Strong;
  swift_retain();
  swift_beginAccess();
  if (swift_weakLoadStrong())
  {
    while (1)
    {
      uint64_t v2 = dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v2) {
        break;
      }
      type metadata accessor for UIViewResponder();
      uint64_t v3 = swift_dynamicCastClass();
      if (v3)
      {
        uint64_t v2 = MEMORY[0x18C119DF0](v3 + 48);
        if (v2) {
          break;
        }
      }
      swift_release();
      swift_beginAccess();
      if (!swift_weakLoadStrong()) {
        goto LABEL_10;
      }
    }
    uint64_t v4 = v2;
    swift_release();
  }
  else
  {
LABEL_10:
    swift_beginAccess();
    uint64_t v4 = MEMORY[0x18C119DF0](v1 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(v1 + 24);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v7 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 16))(&v9, v7, v7, ObjectType, v5);
      swift_unknownObjectRelease();
      uint64_t v4 = v9;
    }
  }
  swift_release();
  swift_release();
  return v4;
}

unint64_t ViewResponder.childGestureContainers.getter()
{
  uint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t result = dispatch thunk of ViewResponder.children.getter();
  unint64_t v1 = result;
  if (!(result >> 62))
  {
    uint64_t v2 = *(void *)((result & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_19:
    swift_bridgeObjectRelease();
    return MEMORY[0x1E4FBC860];
  }
  unint64_t result = _CocoaArrayWrapper.endIndex.getter();
  uint64_t v2 = result;
  if (!result) {
    goto LABEL_19;
  }
LABEL_3:
  if (v2 < 1)
  {
    __break(1u);
  }
  else
  {
    for (uint64_t i = 0; i != v2; ++i)
    {
      if ((v1 & 0xC000000000000001) != 0) {
        MEMORY[0x18C117680](i, v1);
      }
      else {
        swift_retain();
      }
      uint64_t v5 = (void *)dispatch thunk of ViewResponder.gestureContainer.getter();
      if (v5
        || (type metadata accessor for UIViewResponder(), (uint64_t v7 = swift_dynamicCastClass()) != 0)
        && (uint64_t v5 = (void *)MEMORY[0x18C119DF0](v7 + 40)) != 0)
      {
        id v6 = v5;
        MEMORY[0x18C115B40]();
        if (*(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        swift_release();
      }
      else
      {
        unint64_t v4 = ViewResponder.childGestureContainers.getter();
        specialized Array.append<A>(contentsOf:)(v4);
        swift_release();
      }
    }
    swift_bridgeObjectRelease();
    return v8;
  }
  return result;
}

id UIKitGestureContainer._eventReceivingWindow.getter()
{
  uint64_t Strong = swift_weakLoadStrong();
  if (!Strong) {
    return 0;
  }
  uint64_t v1 = Strong;
  uint64_t v2 = Strong + 16;
  swift_beginAccess();
  if (MEMORY[0x18C119DF0](v2))
  {
    uint64_t v3 = *(void *)(v1 + 24);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
    (*(void (**)(id *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 16))(&v9, v5, v5, ObjectType, v3);
    swift_release();
    swift_unknownObjectRelease();
    id v6 = v9;
  }
  else
  {
    swift_release();
    id v6 = 0;
  }
  id v7 = objc_msgSend(v6, sel_window);

  return v7;
}

uint64_t type metadata accessor for UIKitGestureContainer()
{
  return self;
}

char *protocol witness for static GestureContainerFactory.makeGestureContainer(responder:) in conformance UIKitGestureContainerFactory(uint64_t a1, uint64_t a2)
{
  id v3 = objc_allocWithZone((Class)type metadata accessor for UIKitGestureContainer());
  unint64_t v4 = (uint64_t *)swift_retain();
  return UIKitGestureContainer.init(responder:)(v4, a2);
}

unint64_t closure #1 in printGestureContainerAncestors(_:)()
{
  type metadata accessor for UIKitGestureContainer();
  if (swift_dynamicCastClass())
  {
    swift_unknownObjectRetain();
    unint64_t v0 = UIKitGestureContainer.description.getter();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_getObjectType();
    v1._countAndFlagsBits = AGTypeID.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    v2._countAndFlagsBits = 32;
    v2._object = (void *)0xE100000000000000;
    String.append(_:)(v2);
    _print_unlocked<A, B>(_:_:)();
    return 0;
  }
  return v0;
}

uint64_t specialized UIKitGestureContainer._compare(_:)()
{
  return _UIGestureRecognizerContainerCompare();
}

unint64_t type metadata accessor for _UIGestureRecognizerContainer()
{
  unint64_t result = lazy cache variable for type metadata for _UIGestureRecognizerContainer;
  if (!lazy cache variable for type metadata for _UIGestureRecognizerContainer)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _UIGestureRecognizerContainer);
  }
  return result;
}

uint64_t partial apply for closure #1 in UIKitGestureContainer.gestureRecognizers.getter()
{
  return closure #1 in UIKitGestureContainer.gestureRecognizers.getter(*(void **)(v0 + 16), *(void **)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t outlined init with take of WeakBox<UIGestureRecognizer>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIGestureRecognizer>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t specialized printGestureContainerAncestors(_:)()
{
  id v11 = closure #1 in printGestureContainerAncestors(_:);
  uint64_t v12 = 0;
  unint64_t v7 = MEMORY[0x1E4F143A8];
  unint64_t v8 = 1107296256;
  id v9 = thunk for @escaping @callee_guaranteed (@guaranteed _UIGestureRecognizerContainer) -> (@owned String?);
  uint64_t v10 = &block_descriptor_33;
  uint64_t v0 = _Block_copy(&v7);
  id v1 = (id)_UIGestureRecognizerContainerAncestralDescription();
  _Block_release(v0);
  uint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v4 = v3;

  unint64_t v7 = 0xD000000000000013;
  unint64_t v8 = 0x8000000188334FF0;
  v5._countAndFlagsBits = v2;
  v5._object = v4;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  MEMORY[0x18C112B50](v7, v8);
  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for UIKitGestureContainerFactory()
{
  return &type metadata for UIKitGestureContainerFactory;
}

uint64_t sub_187C3BFAC()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

void partial apply for closure #1 in UIKitGestureContainer.init(responder:)()
{
  closure #1 in UIKitGestureContainer.init(responder:)(v0);
}

uint64_t outlined init with copy of WeakBox<UIGestureRecognizer>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIGestureRecognizer>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of WeakBox<UIGestureRecognizer>(uint64_t a1)
{
  type metadata accessor for WeakBox<UIGestureRecognizer>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void static ContentMarginPlacement.scrollContent.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ContentMarginPlacement.toolbar.getter(unsigned char *a1@<X8>)
{
  *a1 = 3;
}

unint64_t lazy protocol witness table accessor for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role;
  if (!lazy protocol witness table cache variable for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContentMarginPlacement.Role and conformance ContentMarginPlacement.Role);
  }
  return result;
}

SwiftUI::AccessoryCircularCapacityGaugeStyle __swiftcall AccessoryCircularCapacityGaugeStyle.init()()
{
  *uint64_t v0 = 0;
  return result;
}

double closure #1 in CircularPercentageGauge.body.getter@<D0>(int a1@<W0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  double result = 58.0;
  *(_OWORD *)a2 = xmmword_18836C4A0;
  *(void *)(a2 + 16) = v8;
  *(unsigned char *)(a2 + 24) = 0;
  *(double *)(a2 + 32) = a3;
  *(unsigned char *)(a2 + 40) = a1 & 1;
  *(unsigned char *)(a2 + 41) = BYTE1(a1) & 1;
  *(unsigned char *)(a2 + 42) = BYTE2(a1) & 1;
  *(void *)(a2 + 48) = v9;
  *(_WORD *)(a2 + 56) = 256;
  *(void *)(a2 + 64) = KeyPath;
  *(unsigned char *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = v7;
  *(unsigned char *)(a2 + 88) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance CircularPercentageGauge()
{
  return static StaticIf<>._viewListCount(inputs:)();
}

double protocol witness for View.body.getter in conformance CircularPercentageGauge@<D0>(_OWORD *a1@<X8>)
{
  double v3 = *(double *)v1;
  int v4 = *(unsigned __int8 *)(v1 + 8);
  int v5 = *(unsigned __int8 *)(v1 + 9);
  int v6 = *(unsigned __int8 *)(v1 + 10);
  LOBYTE(v16) = v4;
  LOBYTE(v13[0]) = v5;
  closure #1 in CircularPercentageGauge.body.getter(v4 | (v5 << 8) | (v6 << 16), (uint64_t)v13, v3);
  LOBYTE(v16) = v4;
  closure #2 in CircularPercentageGauge.body.getter(v4 | (v5 << 8) | (v6 << 16), (uint64_t)v14, v3);
  v24[0] = v15[0];
  *(_OWORD *)((char *)v24 + 9) = *(_OWORD *)((char *)v15 + 9);
  long long v20 = v13[4];
  long long v21 = v13[5];
  long long v22 = v14[0];
  long long v23 = v14[1];
  long long v16 = v13[0];
  long long v17 = v13[1];
  long long v18 = v13[2];
  long long v19 = v13[3];
  long long v7 = v14[3];
  a1[8] = v14[2];
  a1[9] = v7;
  a1[10] = v24[0];
  *(_OWORD *)((char *)a1 + 169) = *(_OWORD *)((char *)v24 + 9);
  long long v8 = v21;
  a1[4] = v20;
  a1[5] = v8;
  long long v9 = v23;
  a1[6] = v22;
  a1[7] = v9;
  long long v10 = v17;
  *a1 = v16;
  a1[1] = v10;
  double result = *(double *)&v18;
  long long v12 = v19;
  a1[2] = v18;
  a1[3] = v12;
  return result;
}

uint64_t SizedCircularPercentageGauge.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[3];
  v17[2] = v1[2];
  v17[3] = v3;
  v18[0] = v1[4];
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v1 + 73);
  long long v4 = v1[1];
  v17[0] = *v1;
  v17[1] = v4;
  uint64_t v5 = v3;
  uint64_t v6 = BYTE8(v3);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v3, BYTE8(v3));
  specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  long long v7 = (_OWORD *)swift_allocObject();
  long long v8 = v1[3];
  v7[3] = v1[2];
  void v7[4] = v8;
  _OWORD v7[5] = v1[4];
  *(_OWORD *)((char *)v7 + 89) = *(_OWORD *)((char *)v1 + 73);
  long long v9 = v1[1];
  v7[1] = *v1;
  v7[2] = v9;
  outlined retain of SizedCircularPercentageGauge((uint64_t)v17, (void (*)(void, void))outlined copy of Environment<HoverEffect?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = partial apply for closure #1 in SizedCircularPercentageGauge.body.getter;
  *(void *)(a1 + 8) = v7;
  *(void *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 24) = v12;
  *(void *)(a1 + 32) = v13;
  *(unsigned char *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  *(void *)(a1 + 56) = v16;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = result;
  *(void *)(a1 + 88) = 0x3F847AE147AE147BLL;
  return result;
}

uint64_t closure #1 in closure #1 in SizedCircularPercentageGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 72);
  outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined copy of Environment<HoverEffect?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined copy of Environment<HoverEffect?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7, (uint64_t *)v68);
  outlined consume of Environment<Bool?>.Content(v6, v7);
  if ((v68[0] & 2) != 0)
  {
    uint64_t v8 = *(void *)(a1 + 80);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 88);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined copy of Environment<HoverEffect?>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
    char v10 = specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Bool?>.Content(v8, v9);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    uint64_t v11 = 0;
    if (v10) {
      goto LABEL_5;
    }
  }
  else
  {
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
    outlined retain of SizedCircularPercentageGauge(a1, (void (*)(void, void))outlined consume of Environment<AnyShapeStyle?>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  }
  uint64_t v11 = *(void *)(a1 + 32);
LABEL_5:
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  outlined copy of Environment<HoverEffect?>.Content(v12, v13);
  uint64_t v14 = specialized Environment.wrappedValue.getter(v12, v13);
  outlined consume of Environment<AnyShapeStyle?>.Content(v12, v13);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v16 = swift_getKeyPath();
  if (!v14)
  {
    *(void *)long long v68 = static Color.primary.getter();
    uint64_t v14 = AnyShapeStyle.init<A>(_:)();
  }
  uint64_t v17 = static HorizontalAlignment.center.getter();
  char v18 = *(unsigned char *)(a1 + 40);
  uint64_t v19 = static VerticalAlignment.center.getter();
  uint64_t v84 = v17;
  uint64_t v85 = 0;
  char v86 = 1;
  uint64_t v87 = v19;
  uint64_t v88 = 0;
  __int16 v89 = 1;
  char v90 = v18 & 1;
  long long v20 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v20;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  double v22 = v21 * 0.7;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v22, 0, 0.0, 1, &v51, 0.0, 1, 0.0, 1);
  long long v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v23;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  static Font.Weight.medium.getter();
  v68[0] = 4;
  uint64_t v24 = static Font.system(size:weight:design:)();
  uint64_t v25 = swift_getKeyPath();
  long long v26 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v26;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  long long v27 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)long long v68 = *(_OWORD *)a2;
  *(_OWORD *)&v68[16] = v27;
  *(_OWORD *)&v68[32] = *(_OWORD *)(a2 + 32);
  *(_DWORD *)&v68[48] = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v28 = v79;
  char v29 = v80;
  uint64_t v30 = v81;
  char v31 = v82;
  long long v32 = v83;
  long long v33 = v57;
  long long v34 = v58;
  v63[6] = v57;
  v63[7] = v58;
  long long v35 = v59;
  long long v36 = v60;
  v63[8] = v59;
  v63[9] = v60;
  long long v37 = v53;
  long long v38 = v54;
  v63[2] = v53;
  v63[3] = v54;
  long long v39 = v55;
  long long v40 = v56;
  v63[4] = v55;
  v63[5] = v56;
  long long v41 = v51;
  long long v42 = v52;
  v63[0] = v51;
  v63[1] = v52;
  *(void *)&long long v64 = v25;
  *((void *)&v64 + 1) = v24;
  *(void *)&long long v65 = v79;
  BYTE8(v65) = v80;
  *(void *)&long long v66 = v81;
  BYTE8(v66) = v82;
  long long v67 = v83;
  *(_OWORD *)&v68[103] = v57;
  *(_OWORD *)&v68[119] = v58;
  *(_OWORD *)&v68[135] = v59;
  *(_OWORD *)&v68[151] = v60;
  *(_OWORD *)&v68[39] = v53;
  *(_OWORD *)&v68[55] = v54;
  *(_OWORD *)&v68[71] = v55;
  *(_OWORD *)&v68[87] = v56;
  *(_OWORD *)&v68[7] = v51;
  *(_OWORD *)&v68[23] = v52;
  *(_OWORD *)&v68[167] = v64;
  *(_OWORD *)&v68[183] = v65;
  *(_OWORD *)&v68[199] = v66;
  *(_OWORD *)&v68[215] = v83;
  *(void *)a3 = v11;
  long long v43 = *(_OWORD *)&v68[160];
  *(_OWORD *)(a3 + 225) = *(_OWORD *)&v68[176];
  long long v44 = *(_OWORD *)&v68[208];
  *(_OWORD *)(a3 + 241) = *(_OWORD *)&v68[192];
  *(_OWORD *)(a3 + 257) = v44;
  long long v45 = *(_OWORD *)&v68[96];
  *(_OWORD *)(a3 + 161) = *(_OWORD *)&v68[112];
  long long v46 = *(_OWORD *)&v68[144];
  *(_OWORD *)(a3 + 177) = *(_OWORD *)&v68[128];
  *(_OWORD *)(a3 + 193) = v46;
  *(_OWORD *)(a3 + 209) = v43;
  long long v47 = *(_OWORD *)&v68[32];
  *(_OWORD *)(a3 + 97) = *(_OWORD *)&v68[48];
  long long v48 = *(_OWORD *)&v68[80];
  *(_OWORD *)(a3 + 113) = *(_OWORD *)&v68[64];
  *(_OWORD *)(a3 + 129) = v48;
  *(_OWORD *)(a3 + 145) = v45;
  long long v49 = *(_OWORD *)&v68[16];
  *(_OWORD *)(a3 + 49) = *(_OWORD *)v68;
  *(_OWORD *)(a3 + 65) = v49;
  *(_OWORD *)(a3 + 81) = v47;
  v71[6] = v33;
  v71[7] = v34;
  v71[8] = v35;
  v71[9] = v36;
  v71[2] = v37;
  v71[3] = v38;
  v71[4] = v39;
  v71[5] = v40;
  char v62 = v29;
  char v61 = v31;
  char v70 = 0;
  char v69 = 0;
  *(void *)(a3 + 8) = v14;
  *(void *)(a3 + 16) = KeyPath;
  *(void *)(a3 + 24) = 0;
  *(unsigned char *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = v16;
  *(unsigned char *)(a3 + 48) = 0;
  *(void *)(a3 + 272) = *(void *)&v68[223];
  v71[0] = v41;
  v71[1] = v42;
  uint64_t v72 = v25;
  uint64_t v73 = v24;
  uint64_t v74 = v28;
  char v75 = v29;
  uint64_t v76 = v30;
  char v77 = v31;
  long long v78 = v32;
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v16, 0);
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v63);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v71);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(KeyPath, 0, 0);
  return outlined consume of Environment<Bool?>.Content(v16, 0);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SizedCircularPercentageGauge()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t CircularPercentageGaugeRing.resolvedTint.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 48);
  AnyShapeStyle.as<A>(type:)();
  uint64_t v7 = v12[0];
  if (v12[0])
  {
    swift_retain();
    outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
    specialized Environment.wrappedValue.getter(v5, v6, v12);
    outlined consume of Environment<Bool?>.Content(v5, v6);
    swift_release();
    outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
    outlined consume of Environment<Bool?>.Content(v5, v6);
    if (LOBYTE(v12[0]) == 1)
    {
      uint64_t v8 = Gradient.reversed.getter();
      swift_bridgeObjectRelease();
      uint64_t v7 = v8;
    }
    static UnitPoint.center.getter();
    v12[0] = v7;
    v12[1] = v9;
    unint64_t v12[2] = v10;
    long long v13 = xmmword_18838E320;
    return AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    AnyShapeStyle.as<A>(type:)();
    swift_retain();
  }
  return v1;
}

uint64_t CircularPercentageGaugeRing.resolvedStartCapColor.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 48);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  uint64_t v7 = specialized Environment.wrappedValue.getter(v2, v3, v4);
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  if (v7)
  {
    uint64_t v1 = AnyShapeStyle.init<A>(_:)();
    swift_release();
  }
  else
  {
    AnyShapeStyle.as<A>(type:)();
    if (v9)
    {
      Gradient.color(at:)();
      swift_bridgeObjectRelease();
      return AnyShapeStyle.init<A>(_:)();
    }
    else
    {
      AnyShapeStyle.as<A>(type:)();
      swift_retain();
    }
  }
  return v1;
}

uint64_t CircularPercentageGaugeRing.resolvedEndCapColor.getter()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(unsigned char *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = *(unsigned __int8 *)(v0 + 48);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  uint64_t v7 = specialized Environment.wrappedValue.getter(v2, v3, v4);
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  if (v7)
  {
    uint64_t v1 = AnyShapeStyle.init<A>(_:)();
    swift_release();
  }
  else
  {
    AnyShapeStyle.as<A>(type:)();
    if (v9)
    {
      Gradient.color(at:)();
      swift_bridgeObjectRelease();
      return AnyShapeStyle.init<A>(_:)();
    }
    else
    {
      AnyShapeStyle.as<A>(type:)();
      swift_retain();
    }
  }
  return v1;
}

uint64_t CircularPercentageGaugeRing.init(fractionCompleted:tint:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v7 = swift_getKeyPath();
  if (!a1) {
    static Color.primary.getter();
  }
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  *(double *)a2 = a3;
  *(void *)(a2 + 8) = result;
  *(void *)(a2 + 16) = KeyPath;
  *(void *)(a2 + 24) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v7;
  *(unsigned char *)(a2 + 48) = 0;
  return result;
}

__n128 closure #1 in CircularPercentageGaugeRing.body.getter@<Q0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4 = *a1;
  unsigned int v5 = a1[1];
  unsigned int v6 = a1[2];
  unsigned int v7 = a1[3];
  unsigned int v8 = a1[4];
  unsigned int v9 = a1[5];
  unsigned int v11 = a1[6];
  unsigned int v10 = a1[7];
  unsigned int v29 = a1[9];
  unsigned int v30 = a1[8];
  unsigned int v27 = a1[11];
  unsigned int v28 = a1[10];
  unsigned int v26 = a1[12];
  GeometryProxy.size.getter();
  double v13 = v12;
  *(void *)&long long v32 = __PAIR64__(v5, v4);
  *((void *)&v32 + 1) = __PAIR64__(v7, v6);
  v33.n128_u64[0] = __PAIR64__(v9, v8);
  v33.n128_u64[1] = __PAIR64__(v10, v11);
  *(void *)&long long v34 = __PAIR64__(v29, v30);
  *((void *)&v34 + 1) = __PAIR64__(v27, v28);
  LODWORD(v35) = v26;
  GeometryProxy.size.getter();
  if (v14 >= v13) {
    double v15 = v13;
  }
  else {
    double v15 = v14;
  }
  double v16 = v15 / 10.5;
  uint64_t v17 = static Alignment.center.getter();
  uint64_t v19 = v18;
  closure #1 in closure #1 in CircularPercentageGaugeRing.body.getter(a2, (uint64_t)&v32, v16);
  *(void *)a3 = v17;
  *(void *)(a3 + 8) = v19;
  long long v20 = v43;
  *(_OWORD *)(a3 + 176) = v42;
  *(_OWORD *)(a3 + 192) = v20;
  *(void *)(a3 + 208) = v44;
  long long v21 = v39;
  *(_OWORD *)(a3 + 112) = v38;
  *(_OWORD *)(a3 + 128) = v21;
  long long v22 = v41;
  *(_OWORD *)(a3 + 144) = v40;
  *(_OWORD *)(a3 + 160) = v22;
  long long v23 = v35;
  *(_OWORD *)(a3 + 48) = v34;
  *(_OWORD *)(a3 + 64) = v23;
  long long v24 = v37;
  *(_OWORD *)(a3 + 80) = v36;
  *(_OWORD *)(a3 + 96) = v24;
  __n128 result = v33;
  *(_OWORD *)(a3 + 16) = v32;
  *(__n128 *)(a3 + 32) = result;
  return result;
}

uint64_t closure #1 in closure #1 in CircularPercentageGaugeRing.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  outlined retain of CircularPercentageGaugeRing(a1);
  outlined copy of Environment<(Color, Color)?>.Content(v7, v6, v8);
  uint64_t v9 = specialized Environment.wrappedValue.getter(v7, v6, v8);
  uint64_t v11 = v10;
  outlined consume of Environment<(Color, Color)?>.Content(v7, v6, v8);
  if (v9)
  {
    *(void *)&long long v52 = v11;
    swift_retain();
    uint64_t v50 = AnyShapeStyle.init<A>(_:)();
    swift_release();
    swift_release();
  }
  else
  {
    long long v12 = *(_OWORD *)(a1 + 16);
    long long v52 = *(_OWORD *)a1;
    long long v53 = v12;
    long long v54 = *(_OWORD *)(a1 + 32);
    char v55 = *(unsigned char *)(a1 + 48);
    *(void *)&long long v52 = CircularPercentageGaugeRing.resolvedTint.getter();
    DWORD2(v52) = 1051931443;
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    uint64_t v50 = AnyShapeStyle.init<A>(_:)();
  }
  outlined release of CircularPercentageGaugeRing(a1);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  double v13 = v56;
  uint64_t v14 = v57;
  uint64_t v15 = v58;
  uint64_t v16 = v60;
  uint64_t v17 = static Alignment.center.getter();
  double v19 = *(double *)a1;
  uint64_t v49 = v59;
  if (*(double *)a1 <= 0.0)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    double v25 = 0.0;
    double v26 = 0.0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    double v29 = 0.0;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
  }
  else
  {
    uint64_t v47 = v18;
    uint64_t v48 = v17;
    outlined retain of CircularPercentageGaugeRing(a1);
    outlined copy of Environment<(Color, Color)?>.Content(v7, v6, v8);
    uint64_t v20 = specialized Environment.wrappedValue.getter(v7, v6, v8);
    outlined consume of Environment<(Color, Color)?>.Content(v7, v6, v8);
    if (v20)
    {
      *(void *)&long long v52 = v20;
      uint64_t v43 = AnyShapeStyle.init<A>(_:)();
      swift_release();
    }
    else
    {
      long long v32 = *(_OWORD *)(a1 + 16);
      long long v52 = *(_OWORD *)a1;
      long long v53 = v32;
      long long v54 = *(_OWORD *)(a1 + 32);
      char v55 = *(unsigned char *)(a1 + 48);
      uint64_t v43 = CircularPercentageGaugeRing.resolvedTint.getter();
    }
    outlined release of CircularPercentageGaugeRing(a1);
    long long v33 = *(_OWORD *)(a1 + 16);
    long long v52 = *(_OWORD *)a1;
    long long v53 = v33;
    long long v54 = *(_OWORD *)(a1 + 32);
    char v55 = *(unsigned char *)(a1 + 48);
    uint64_t started = CircularPercentageGaugeRing.resolvedStartCapColor.getter();
    if (v19 <= 0.5)
    {
      double v25 = 0.0;
      double v26 = 0.0;
      uint64_t v27 = 0;
      uint64_t v45 = 0;
      uint64_t v44 = *(void *)&v19;
      double v29 = a3;
    }
    else
    {
      outlined retain of CircularPercentageGaugeRing(a1);
      outlined copy of Environment<(Color, Color)?>.Content(v7, v6, v8);
      uint64_t v34 = specialized Environment.wrappedValue.getter(v7, v6, v8);
      outlined consume of Environment<(Color, Color)?>.Content(v7, v6, v8);
      if (v34)
      {
        *(void *)&long long v52 = v34;
        uint64_t v27 = AnyShapeStyle.init<A>(_:)();
        swift_release();
      }
      else
      {
        long long v35 = *(_OWORD *)(a1 + 16);
        long long v52 = *(_OWORD *)a1;
        long long v53 = v35;
        long long v54 = *(_OWORD *)(a1 + 32);
        char v55 = *(unsigned char *)(a1 + 48);
        uint64_t v27 = CircularPercentageGaugeRing.resolvedTint.getter();
      }
      outlined release of CircularPercentageGaugeRing(a1);
      double v25 = v19;
      double v29 = a3;
      uint64_t v44 = *(void *)&v19;
      uint64_t v45 = 256;
      double v26 = a3;
    }
    uint64_t v36 = *(void *)(a1 + 40);
    uint64_t v37 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of CircularPercentageGaugeRing(a1);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v36, v37);
    specialized Environment.wrappedValue.getter(v36, v37, &v51);
    outlined consume of Environment<Bool?>.Content(v36, v37);
    long long v38 = *(_OWORD *)(a1 + 16);
    long long v52 = *(_OWORD *)a1;
    long long v53 = v38;
    long long v54 = *(_OWORD *)(a1 + 32);
    char v55 = *(unsigned char *)(a1 + 48);
    uint64_t v31 = CircularPercentageGaugeRing.resolvedEndCapColor.getter();
    outlined release of CircularPercentageGaugeRing(a1);
    swift_retain();
    swift_release();
    uint64_t v23 = 256;
    uint64_t v21 = 1;
    uint64_t v18 = v47;
    uint64_t v17 = v48;
    uint64_t v22 = v43;
    uint64_t v30 = v44;
    uint64_t v28 = v45;
    uint64_t v24 = started;
  }
  *(double *)a2 = v13 * 0.5;
  *(double *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v14;
  *(void *)(a2 + 24) = v15;
  *(void *)(a2 + 32) = v49;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v50;
  *(_WORD *)(a2 + 56) = 256;
  *(void *)(a2 + 64) = v17;
  *(void *)(a2 + 72) = v18;
  *(void *)(a2 + 80) = v30;
  *(double *)(a2 + 88) = v29;
  *(void *)(a2 + 96) = v21;
  *(void *)(a2 + 104) = v22;
  *(void *)(a2 + 112) = v23;
  *(void *)(a2 + 120) = v24;
  *(double *)(a2 + 128) = v29;
  *(double *)(a2 + 136) = v25;
  *(double *)(a2 + 144) = v26;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = v27;
  *(void *)(a2 + 168) = v28;
  *(double *)(a2 + 176) = v29;
  *(void *)(a2 + 184) = v30;
  *(void *)(a2 + 192) = v31;
  uint64_t v39 = *(void *)&v29;
  uint64_t v40 = v22;
  uint64_t v41 = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(v30, v39, v41, v40);
  outlined consume of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(v30, v39, v41, v40);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>)
{
  GeometryProxy.size.getter();
  double v8 = v6 * 0.5;
  double v9 = v7 * 0.5;
  if (v7 * 0.5 >= v6 * 0.5) {
    double v10 = v6 * 0.5;
  }
  else {
    double v10 = v7 * 0.5;
  }
  static UnitPoint.center.getter();
  *(_OWORD *)a2 = xmmword_18838E330;
  *(void *)(a2 + 16) = 0x3FF921FB54442D18;
  *(void *)(a2 + 24) = v11;
  *(void *)(a2 + 32) = v12;
  *(double *)(a2 + 40) = a3;
  *(double *)(a2 + 48) = a3;
  *(void *)(a2 + 56) = a1;
  *(_WORD *)(a2 + 64) = 256;
  *(double *)(a2 + 72) = v8 - a3 * 0.5;
  *(double *)(a2 + 80) = v9 - v10;
  *(unsigned char *)(a2 + 88) = 1;

  return swift_retain();
}

uint64_t protocol witness for View.body.getter in conformance CircularPercentageGaugeRing.StartCap@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v3;
  *(void *)(v5 + 24) = v4;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter;
  a1[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v5;

  return swift_retain();
}

uint64_t implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>, double a3@<D0>, double a4@<D1>)
{
  GeometryProxy.size.getter();
  double v10 = v8 * 0.5;
  if (v9 * 0.5 >= v8 * 0.5) {
    double v11 = v8 * 0.5;
  }
  else {
    double v11 = v9 * 0.5;
  }
  double v12 = v9 * 0.5 - v11;
  swift_retain();
  uint64_t v13 = static Color.black.getter();
  uint64_t result = static UnitPoint.center.getter();
  *(double *)a2 = a3;
  *(double *)(a2 + 8) = a3;
  *(void *)(a2 + 16) = a1;
  *(_WORD *)(a2 + 24) = 256;
  *(void *)(a2 + 32) = v13;
  *(double *)(a2 + 40) = v11 * 0.03;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(double *)(a2 + 64) = v10 - a3 * 0.5;
  *(double *)(a2 + 72) = v12;
  *(double *)(a2 + 80) = a3;
  *(double *)(a2 + 88) = a3;
  *(double *)(a2 + 96) = v10 + -1.0;
  *(double *)(a2 + 104) = v12;
  *(_WORD *)(a2 + 112) = 0;
  *(double *)(a2 + 120) = a4 * 3.14159265 + a4 * 3.14159265;
  *(void *)(a2 + 128) = v15;
  *(void *)(a2 + 136) = v16;
  *(unsigned char *)(a2 + 144) = 1;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CircularPercentageGaugeRing.EndCap@<X0>(uint64_t (**a1)@<X0>(uint64_t a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v5 = v1[2];
  double v6 = (uint64_t (*)@<X0>(uint64_t@<X8>))swift_allocObject();
  *((void *)v6 + 2) = v3;
  *((void *)v6 + 3) = v4;
  *((void *)v6 + 4) = v5;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter;
  a1[1] = v6;

  return swift_retain();
}

double CircularPercentageGaugeRing.RingArc.path(in:)@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CGRectGetMidX(*(CGRect *)&a2);
  v25.origin.x = a2;
  v25.origin.y = a3;
  v25.size.width = a4;
  v25.size.height = a5;
  CGRectGetMidY(v25);
  v26.origin.x = a2;
  v26.origin.y = a3;
  v26.size.width = a4;
  v26.size.height = a5;
  CGRectGetWidth(v26);
  v27.origin.x = a2;
  v27.origin.y = a3;
  v27.size.width = a4;
  v27.size.height = a5;
  CGRectGetHeight(v27);
  uint64_t v18 = 0x3FF0000000000000;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0x3FF0000000000000;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
  memset(v16, 0, sizeof(v16));
  char v17 = 6;
  outlined init with take of Path.Storage((uint64_t)v16, (uint64_t)v24);
  outlined retain of Path.Storage((uint64_t)v24, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
  StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
  Path.strokedPath(_:)();
  outlined release of StrokeStyle((uint64_t)v12);
  outlined retain of Path.Storage((uint64_t)v16, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  outlined retain of Path.Storage((uint64_t)v16, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
  double result = *(double *)&v13;
  long long v11 = v14;
  *(_OWORD *)a1 = v13;
  *(_OWORD *)(a1 + 16) = v11;
  *(unsigned char *)(a1 + 32) = v15;
  return result;
}

double protocol witness for Shape.path(in:) in conformance CircularPercentageGaugeRing.RingArc@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  CircularPercentageGaugeRing.RingArc.path(in:)((uint64_t)v8, a2, a3, a4, a5);
  double result = *(double *)v8;
  long long v7 = v8[1];
  *(_OWORD *)a1 = v8[0];
  *(_OWORD *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 32) = v9;
  return result;
}

__n128 protocol witness for Animatable.animatableData.getter in conformance CircularPercentageGaugeRing.RingArc@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance CircularPercentageGaugeRing.RingArc(__n128 *a1)
{
  __n128 result = *a1;
  *uint64_t v1 = *a1;
  return result;
}

__n128 (*protocol witness for Animatable.animatableData.modify in conformance CircularPercentageGaugeRing.RingArc(uint64_t a1))(__n128 *a1)
{
  *(void *)(a1 + 16) = v1;
  *(_OWORD *)a1 = *v1;
  return protocol witness for Animatable.animatableData.modify in conformance CircularPercentageGaugeRing.RingArc;
}

__n128 protocol witness for Animatable.animatableData.modify in conformance CircularPercentageGaugeRing.RingArc(__n128 *a1)
{
  __n128 result = *a1;
  *(__n128 *)a1[1].n128_u64[0] = *a1;
  return result;
}

__n128 protocol witness for View.body.getter in conformance CircularPercentageGaugeRing.RingArc@<Q0>(uint64_t a1@<X8>)
{
  unsigned __int8 v2 = v1[1].n128_u8[0];
  __n128 result = *v1;
  *(__n128 *)a1 = *v1;
  *(unsigned char *)(a1 + 16) = v2;
  *(_WORD *)(a1 + 17) = 256;
  return result;
}

uint64_t protocol witness for View.body.getter in conformance CircularPercentageGaugeRing@<X0>(double (**a1)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 16);
  v7[0] = *(_OWORD *)v1;
  v7[1] = v3;
  v7[2] = *(_OWORD *)(v1 + 32);
  char v8 = *(unsigned char *)(v1 + 48);
  uint64_t v4 = swift_allocObject();
  long long v5 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v4 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v4 + 32) = v5;
  *(_OWORD *)(v4 + 48) = *(_OWORD *)(v1 + 32);
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(v1 + 48);
  *a1 = partial apply for closure #1 in CircularPercentageGaugeRing.body.getter;
  a1[1] = (double (*)@<D0>(unsigned int *@<X0>, uint64_t@<X8>))v4;
  return outlined retain of CircularPercentageGaugeRing((uint64_t)v7);
}

SwiftUI::CircularPercentageGaugeStyle __swiftcall CircularPercentageGaugeStyle.init(halfOpen:)(SwiftUI::CircularPercentageGaugeStyle halfOpen)
{
  v1->halfOpen = halfOpen.halfOpen;
  return halfOpen;
}

uint64_t AccessoryCircularCapacityGaugeStyle.makeBody(configuration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  char v3 = *v2;
  uint64_t v4 = 256;
  if (!*(unsigned char *)(result + 9)) {
    uint64_t v4 = 0;
  }
  uint64_t v5 = 0x10000;
  if (!*(unsigned char *)(result + 10)) {
    uint64_t v5 = 0;
  }
  uint64_t v6 = v5 | *(unsigned __int8 *)(result + 8) | v4;
  if (*v2) {
    v6 |= 0x1000000uLL;
  }
  *(void *)a2 = *(void *)result;
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = 0;
  *(unsigned char *)(a2 + 24) = v3 ^ 1;
  return result;
}

double CircularProgressGaugeStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 9);
  char v5 = *(unsigned char *)(a1 + 10);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = v4;
  *(unsigned char *)(a2 + 10) = v5;
  return result;
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in AccessoryCircularCapacityGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularPercentageGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularProgressGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

double protocol witness for GaugeStyle.makeBody(configuration:) in conformance CircularProgressGaugeStyle@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result = *(double *)a1;
  char v3 = *(unsigned char *)(a1 + 8);
  char v4 = *(unsigned char *)(a1 + 9);
  char v5 = *(unsigned char *)(a1 + 10);
  *(void *)a2 = *(void *)a1;
  *(unsigned char *)(a2 + 8) = v3;
  *(unsigned char *)(a2 + 9) = v4;
  *(unsigned char *)(a2 + 10) = v5;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryCircularCapacityGaugeStyle()
{
  return &type metadata for AccessoryCircularCapacityGaugeStyle;
}

unsigned char *storeEnumTagSinglePayload for AccessoryCircularCapacityGaugeStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *double result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C3E098);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeStyle()
{
  return &type metadata for CircularPercentageGaugeStyle;
}

ValueMetadata *type metadata accessor for CircularProgressGaugeStyle()
{
  return &type metadata for CircularProgressGaugeStyle;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(255, &lazy cache variable for type metadata for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>, (uint64_t)&type metadata for HalfOpenCircularGauge, (uint64_t)&type metadata for CircularPercentageGauge, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge();
    lazy protocol witness table accessor for type CircularPercentageGauge and conformance CircularPercentageGauge();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge;
  if (!lazy protocol witness table cache variable for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HalfOpenCircularGauge and conformance HalfOpenCircularGauge);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CircularPercentageGauge and conformance CircularPercentageGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type CircularPercentageGauge and conformance CircularPercentageGauge;
  if (!lazy protocol witness table cache variable for type CircularPercentageGauge and conformance CircularPercentageGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGauge and conformance CircularPercentageGauge);
  }
  return result;
}

uint64_t __swift_memcpy11_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 7) = *(_DWORD *)((char *)a2 + 7);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for CircularPercentageGauge(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 11)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for CircularPercentageGauge(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(unsigned char *)(result + 10) = 0;
    *(_WORD *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 11) = v3;
  return result;
}

ValueMetadata *type metadata accessor for CircularPercentageGauge()
{
  return &type metadata for CircularPercentageGauge;
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGauge()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge;
  if (!lazy protocol witness table cache variable for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge);
  }
  return result;
}

uint64_t destroy for SizedCircularPercentageGauge(uint64_t a1)
{
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 80);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 88);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for SizedCircularPercentageGauge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<HoverEffect?>.Content(v4, v5);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 39) = *(_DWORD *)(a2 + 39);
  uint64_t v6 = *(void *)(a2 + 48);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7);
  *(void *)(a1 + 48) = v6;
  *(unsigned char *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v8 = *(void *)(a2 + 64);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = v9;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v10, v11);
  *(void *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 88) = v11;
  return a1;
}

uint64_t assignWithCopy for SizedCircularPercentageGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<HoverEffect?>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  *(unsigned char *)(a1 + 42) = *(unsigned char *)(a2 + 42);
  uint64_t v8 = *(void *)(a2 + 48);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 48) = v8;
  *(unsigned char *)(a1 + 56) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  uint64_t v12 = *(void *)(a2 + 64);
  unsigned __int8 v13 = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 64);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = v13;
  outlined consume of Environment<Bool?>.Content(v14, v15);
  uint64_t v16 = *(void *)(a2 + 80);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 88);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v16, v17);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 88);
  *(void *)(a1 + 80) = v16;
  *(unsigned char *)(a1 + 88) = v17;
  outlined consume of Environment<Bool?>.Content(v18, v19);
  return a1;
}

__n128 __swift_memcpy89_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SizedCircularPercentageGauge(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(_WORD *)(a1 + 41) = *(_WORD *)(a2 + 41);
  char v8 = *(unsigned char *)(a2 + 56);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  char v14 = *(unsigned char *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v14;
  outlined consume of Environment<Bool?>.Content(v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SizedCircularPercentageGauge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SizedCircularPercentageGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SizedCircularPercentageGauge()
{
  return &type metadata for SizedCircularPercentageGauge;
}

uint64_t outlined copy of Environment<(Color, Color)?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return outlined copy of (Color, Color)?(result);
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for CircularPercentageGaugeRing(uint64_t a1)
{
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t outlined consume of Environment<(Color, Color)?>.Content(uint64_t result, uint64_t a2, char a3)
{
  if (a3) {
    return outlined consume of ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundStyleModifier<HierarchicalShapeStyle>>?(result);
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for CircularPercentageGaugeRing(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v5, v6, v7);
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  *(void *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  return a1;
}

uint64_t assignWithCopy for CircularPercentageGaugeRing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = v6;
  outlined consume of Environment<(Color, Color)?>.Content(v7, v8, v9);
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(unsigned __int8 *)(a2 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v10, v11);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 48) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  return a1;
}

uint64_t assignWithTake for CircularPercentageGaugeRing(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  char v7 = *(unsigned char *)(a1 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<(Color, Color)?>.Content(v5, v6, v7);
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 40);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  return a1;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing()
{
  return &type metadata for CircularPercentageGaugeRing;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>();
    lazy protocol witness table accessor for type SizedCircularPercentageGauge and conformance SizedCircularPercentageGauge();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>)
  {
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E4F40F28], MEMORY[0x1E4F40F20], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedCircularPercentageGauge, SizedCircularPercentageGauge>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for CircularPercentageGaugeRing(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type CircularPercentageGaugeRing and conformance CircularPercentageGaugeRing();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGaugeRing()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState()
{
  unint64_t result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState;
  if (!lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TimelineProgressViewBaseEmptyState and conformance _TimelineProgressViewBaseEmptyState);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SizedCircularPercentageGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187C3EBC0()
{
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 64), *(unsigned __int8 *)(v0 + 72));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 80), *(unsigned __int8 *)(v0 + 88));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 96), *(unsigned __int8 *)(v0 + 104));

  return swift_deallocObject();
}

void *partial apply for closure #1 in SizedCircularPercentageGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  void v9[2] = *(_OWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  closure #1 in closure #1 in SizedCircularPercentageGauge.body.getter(v2 + 16, (uint64_t)v9, (uint64_t)__src);
  *a2 = v5;
  a2[1] = v7;
  return memcpy(a2 + 2, __src, 0x118uLL);
}

uint64_t outlined retain of SizedCircularPercentageGauge(uint64_t a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = *(void *)(a1 + 48);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v11 = *(void *)(a1 + 80);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 88);
  a2(*(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
  a3(v7, v8);
  a4(v9, v10);
  a3(v11, v12);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>();
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>);
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>(255);
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)> and conformance TupleView<A>, type metadata accessor for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>);
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>(uint64_t a1)
{
}

void type metadata accessor for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>))
  {
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(255, &lazy cache variable for type metadata for ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, (uint64_t)&type metadata for CircularPercentageGaugeRing, MEMORY[0x1E4F41100], MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>();
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, (unint64_t *)&lazy cache variable for type metadata for LabelStyleWritingModifier<IconOnlyLabelStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconOnlyLabelStyle and conformance IconOnlyLabelStyle, (uint64_t)&type metadata for IconOnlyLabelStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LabelStyleWritingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, type metadata accessor for ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>(uint64_t a1)
{
}

void type metadata accessor for VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>()
{
  if (!lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>)
  {
    type metadata accessor for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>)
  {
    type metadata accessor for HStack<GaugeStyleConfiguration.CurrentValueLabel?>();
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(255, &lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.Label>, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, (uint64_t)&protocol witness table for GaugeStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>);
    }
  }
}

void type metadata accessor for HStack<GaugeStyleConfiguration.CurrentValueLabel?>()
{
  if (!lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.CurrentValueLabel?>)
  {
    type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.CurrentValueLabel?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?)
  {
    type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel?(255, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel, MEMORY[0x1E4FBB718]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GaugeStyleConfiguration.CurrentValueLabel? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>();
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.CurrentValueLabel?> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<GaugeStyleConfiguration.CurrentValueLabel?>);
    lazy protocol witness table accessor for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>)
  {
    type metadata accessor for _ConditionalContent<HalfOpenCircularGauge, CircularPercentageGauge>(255, &lazy cache variable for type metadata for HStack<GaugeStyleConfiguration.Label>, (uint64_t)&type metadata for GaugeStyleConfiguration.Label, (uint64_t)&protocol witness table for GaugeStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<GaugeStyleConfiguration.Label> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>);
    lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>(255);
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>> and conformance GeometryReader<A>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187C3F630()
{
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(v0 + 32), *(void *)(v0 + 40), *(unsigned char *)(v0 + 48));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));

  return swift_deallocObject();
}

double partial apply for closure #1 in CircularPercentageGaugeRing.body.getter@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = closure #1 in CircularPercentageGaugeRing.body.getter(a1, v2 + 16, a2).n128_u64[0];
  return result;
}

uint64_t outlined retain of CircularPercentageGaugeRing(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  swift_retain();
  outlined copy of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
  return a1;
}

uint64_t outlined release of CircularPercentageGaugeRing(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  char v4 = *(unsigned char *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  swift_release();
  outlined consume of Environment<(Color, Color)?>.Content(v2, v3, v4);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  return a1;
}

uint64_t outlined copy of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void *assignWithCopy for CircularPercentageGaugeRing.EndCap(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing.EndCap()
{
  return &type metadata for CircularPercentageGaugeRing.EndCap;
}

void *assignWithTake for CircularPercentageGaugeRing.StartCap(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing.StartCap()
{
  return &type metadata for CircularPercentageGaugeRing.StartCap;
}

ValueMetadata *type metadata accessor for CircularPercentageGaugeRing.RingArc()
{
  return &type metadata for CircularPercentageGaugeRing.RingArc;
}

ValueMetadata *type metadata accessor for SizedCircularPercentageGauge.Metrics()
{
  return &type metadata for SizedCircularPercentageGauge.Metrics;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, type metadata accessor for ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>);
    type metadata accessor for GaugeStyleConfiguration.CurrentValueLabel?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

uint64_t sub_187C3FA18()
{
  return lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>> and conformance GeometryReader<A>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>);
}

void type metadata accessor for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>)
  {
    type metadata accessor for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>();
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>> and conformance ZStack<A>, (void (*)(uint64_t))type metadata accessor for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>);
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>>);
    }
  }
}

void type metadata accessor for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>()
{
  if (!lazy cache variable for type metadata for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>)
  {
    type metadata accessor for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>(255);
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)> and conformance TupleView<A>, type metadata accessor for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>);
    unint64_t v0 = type metadata accessor for ZStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ZStack<TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>>);
    }
  }
}

void type metadata accessor for TupleView<(StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)>(uint64_t a1)
{
}

void type metadata accessor for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?)()
{
  if (!lazy cache variable for type metadata for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?))
  {
    type metadata accessor for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>();
    type metadata accessor for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>(255, &lazy cache variable for type metadata for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?, (uint64_t (*)(uint64_t))type metadata accessor for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>, TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>?));
    }
  }
}

void type metadata accessor for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>()
{
  if (!lazy cache variable for type metadata for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>)
  {
    lazy protocol witness table accessor for type Circle and conformance Circle();
    unint64_t v0 = type metadata accessor for StrokeBorderShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StrokeBorderShapeView<Circle, AnyShapeStyle, EmptyView>);
    }
  }
}

void type metadata accessor for TupleView<(_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap)()
{
  if (!lazy cache variable for type metadata for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap))
  {
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>);
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?();
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v1) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>, CircularPercentageGaugeRing.StartCap, _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?, CircularPercentageGaugeRing.EndCap));
    }
  }
}

unint64_t lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc()
{
  unint64_t result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc;
  if (!lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc);
  }
  return result;
}

void type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?()
{
  if (!lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?)
  {
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<CircularPercentageGaugeRing.RingArc, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

void type metadata accessor for _ShapeView<CircularPercentageGaugeRing.RingArc, AnyShapeStyle>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc();
    unint64_t v3 = type metadata accessor for _ShapeView();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in CircularPercentageGaugeRing.RingArc()
{
  return lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, CGFloat>);
}

void type metadata accessor for AnimatablePair<Double, CGFloat>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Double, CGFloat>)
  {
    lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Double, CGFloat>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for CircularPercentageGaugeRing.RingArc(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc();
  unint64_t result = lazy protocol witness table accessor for type CircularPercentageGaugeRing.RingArc and conformance CircularPercentageGaugeRing.RingArc();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGaugeRing.StartCap()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in CircularPercentageGaugeRing.EndCap()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187C401FC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter@<X0>(uint64_t a1@<X8>)
{
  return implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.EndCap.body.getter(*(void *)(v1 + 32), a1, *(double *)(v1 + 16), *(double *)(v1 + 24));
}

uint64_t sub_187C40240()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter@<X0>(uint64_t a1@<X8>)
{
  return implicit closure #2 in implicit closure #1 in CircularPercentageGaugeRing.StartCap.body.getter(*(void *)(v1 + 16), a1, *(double *)(v1 + 24));
}

uint64_t sub_187C40284()
{
  return lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>> and conformance GeometryReader<A>, type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>>);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>>(uint64_t a1)
{
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(255, a3, a4);
    a5();
    unint64_t v7 = type metadata accessor for GeometryReader();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>(uint64_t a1)
{
}

void type metadata accessor for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, &lazy cache variable for type metadata for _SizedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E4F415B0], MEMORY[0x1E4F3F5C0]);
    lazy protocol witness table accessor for type _SizedShape<Circle> and conformance _SizedShape<A>();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _SizedShape<Circle> and conformance _SizedShape<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _SizedShape<Circle> and conformance _SizedShape<A>;
  if (!lazy protocol witness table cache variable for type _SizedShape<Circle> and conformance _SizedShape<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, &lazy cache variable for type metadata for _SizedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E4F415B0], MEMORY[0x1E4F3F5C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SizedShape<Circle> and conformance _SizedShape<A>);
  }
  return result;
}

void type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>()
{
  if (!lazy cache variable for type metadata for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>)
  {
    type metadata accessor for OffsetShape<_SizedShape<Rectangle>>();
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type OffsetShape<_SizedShape<Rectangle>> and conformance OffsetShape<A>, (void (*)(uint64_t))type metadata accessor for OffsetShape<_SizedShape<Rectangle>>);
    unint64_t v0 = type metadata accessor for _ClipEffect();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _SizedShape<Rectangle> and conformance _SizedShape<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _SizedShape<Rectangle> and conformance _SizedShape<A>;
  if (!lazy protocol witness table cache variable for type _SizedShape<Rectangle> and conformance _SizedShape<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, &lazy cache variable for type metadata for _SizedShape<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], MEMORY[0x1E4F3F5C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SizedShape<Rectangle> and conformance _SizedShape<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, _RotationEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, (void (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ClipEffect<OffsetShape<_SizedShape<Rectangle>>> and conformance _ClipEffect<A>, (void (*)(uint64_t))type metadata accessor for _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>, _OffsetEffect>, _ClipEffect<OffsetShape<_SizedShape<Rectangle>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect>(255);
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<_SizedShape<Circle>, AnyShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<_SizedShape<Circle>, AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<Circle>, AnyShapeStyle>, _ShadowEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187C409E0()
{
  return lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>> and conformance GeometryReader<A>, type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>);
}

void type metadata accessor for GeometryReader<ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>)
  {
    type metadata accessor for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>();
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _SizedShape<RotatedShape<_TrimmedShape<Circle>>> and conformance _SizedShape<A>, (void (*)(uint64_t))type metadata accessor for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>);
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>);
    }
  }
}

void type metadata accessor for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>()
{
  if (!lazy cache variable for type metadata for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>)
  {
    type metadata accessor for RotatedShape<_TrimmedShape<Circle>>();
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type RotatedShape<_TrimmedShape<Circle>> and conformance RotatedShape<A>, (void (*)(uint64_t))type metadata accessor for RotatedShape<_TrimmedShape<Circle>>);
    unint64_t v0 = type metadata accessor for _SizedShape();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _SizedShape<RotatedShape<_TrimmedShape<Circle>>>);
    }
  }
}

void type metadata accessor for RotatedShape<_TrimmedShape<Circle>>()
{
  if (!lazy cache variable for type metadata for RotatedShape<_TrimmedShape<Circle>>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E4F415B0], MEMORY[0x1E4F3F8B0]);
    lazy protocol witness table accessor for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>();
    unint64_t v0 = type metadata accessor for RotatedShape();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for RotatedShape<_TrimmedShape<Circle>>);
    }
  }
}

void type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>;
  if (!lazy protocol witness table cache variable for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>)
  {
    type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>(255, &lazy cache variable for type metadata for _TrimmedShape<Circle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Circle and conformance Circle, MEMORY[0x1E4F415B0], MEMORY[0x1E4F3F8B0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TrimmedShape<Circle> and conformance _TrimmedShape<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ZStack<TupleView<(ModifiedContent<CircularPercentageGaugeRing, _ForegroundLayerViewModifier>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<VStack<_ConditionalContent<HStack<GaugeStyleConfiguration.CurrentValueLabel?>, HStack<GaugeStyleConfiguration.Label>>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Font?>>, _FrameLayout>, LabelStyleWritingModifier<IconOnlyLabelStyle>>)>>>, _FrameLayout>, _AspectRatioLayout>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect>, type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>, _LayoutDirectionBehaviorEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect>(255);
    lazy protocol witness table accessor for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>(&lazy protocol witness table cache variable for type _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<_SizedShape<RotatedShape<_TrimmedShape<Circle>>>, AnyShapeStyle>, _OffsetEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for SectionStyle.Body : View in SidebarSectionStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SidebarSectionStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  char v11 = a3 & 1;
  if (a2) {
    uint64_t v12 = a1;
  }
  else {
    uint64_t v12 = 1;
  }
  *(unsigned char *)(a4 + 16) = a3;
  if (!a2) {
    char v11 = 0;
  }
  *(void *)(a4 + 24) = v12;
  *(void *)(a4 + 32) = a2;
  *(unsigned char *)(a4 + 40) = v11;
  *(unsigned char *)(a4 + 41) = a2 != 0;
  *(void *)(a4 + 48) = KeyPath;
  *(unsigned char *)(a4 + 56) = 0;
  *(void *)(a4 + 64) = v9;
  *(unsigned char *)(a4 + 72) = 0;
  *(void *)(a4 + 80) = v10;
  *(unsigned char *)(a4 + 88) = 0;
  outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);

  return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
}

uint64_t SidebarSection.appearsExpanded.getter()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v13 = *(void *)(v0 + 48);
  char v12 = *(unsigned char *)(v0 + 56);
  uint64_t v3 = *(void *)(v0 + 64);
  char v4 = *(unsigned char *)(v0 + 72);
  uint64_t v15 = *(void *)(v0 + 80);
  char v14 = *(unsigned char *)(v0 + 88);
  char v5 = *(unsigned char *)(v0 + 41);
  if ((v5 & 1) == 0)
  {
    uint64_t v6 = *(unsigned __int8 *)(v0 + 40);
    uint64_t v7 = *(void *)(v0 + 24);
    uint64_t v8 = *(void *)(v0 + 32);
    _s7SwiftUI7BindingVySbGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
    if ((v16 & 1) == 0) {
      goto LABEL_3;
    }
LABEL_5:
    char v9 = 1;
    return v9 & 1;
  }
  uint64_t v6 = *(unsigned __int8 *)(v0 + 40);
  uint64_t v7 = *(void *)(v0 + 24);
  uint64_t v8 = *(void *)(v0 + 32);
  _s7SwiftUI7BindingVySbGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v16);
  if (v16) {
    goto LABEL_5;
  }
LABEL_3:
  outlined copy of Binding<NavigationSplitViewColumn>?(v1, v2);
  outlined copy of StateOrBinding<Bool>(v7, v8, v6, v5);
  outlined copy of Environment<Bool>.Content(v13, v12);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<Bool>.Content(v15, v14);
  outlined copy of Environment<Bool>.Content(v3, v4);
  char v11 = specialized Environment.wrappedValue.getter(v3, v4);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
  outlined consume of StateOrBinding<Bool>(v7, v8, v6, v5);
  outlined consume of Environment<Bool>.Content(v13, v12);
  outlined consume of Environment<Bool>.Content(v3, v4);
  outlined consume of Environment<Bool>.Content(v15, v14);
  char v9 = v11 ^ 1;
  return v9 & 1;
}

uint64_t SidebarSection.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v40 = type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect;
  uint64_t v41 = a1;
  uint64_t v39 = MEMORY[0x1E4F414E8];
  type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten(0, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, MEMORY[0x1E4F414E8]);
  MEMORY[0x1F4188790](v2 - 8);
  char v4 = (char *)&v35 - v3;
  type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
  uint64_t v10 = v9 - 8;
  MEMORY[0x1F4188790](v9);
  long long v38 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  char v14 = (uint64_t (**)@<X0>(uint64_t@<X8>))((char *)&v35 - v13);
  long long v15 = v1[3];
  long long v50 = v1[2];
  long long v51 = v15;
  v52[0] = v1[4];
  *(_OWORD *)((char *)v52 + 9) = *(_OWORD *)((char *)v1 + 73);
  long long v16 = v1[1];
  long long v48 = *v1;
  long long v49 = v16;
  long long v53 = v48;
  char v54 = *((unsigned char *)v1 + 16);
  uint64_t v17 = (_OWORD *)swift_allocObject();
  long long v18 = v1[3];
  v17[3] = v1[2];
  _OWORD v17[4] = v18;
  v17[5] = v1[4];
  *(_OWORD *)((char *)v17 + 89) = *(_OWORD *)((char *)v1 + 73);
  long long v19 = v1[1];
  v17[1] = *v1;
  v17[2] = v19;
  void *v14 = partial apply for closure #1 in closure #1 in closure #2 in SidebarSection.body.getter;
  v14[1] = (uint64_t (*)@<X0>(uint64_t@<X8>))v17;
  uint64_t v20 = (uint64_t)v14 + *(int *)(v10 + 60);
  uint64_t v36 = outlined copy of Binding<NavigationSplitViewColumn>?;
  uint64_t v37 = v20;
  outlined retain of SidebarSection((uint64_t)&v48, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
  closure #1 in closure #1 in SidebarSection.resolvedHeader.getter(&v48, (uint64_t)v4);
  type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect();
  closure #2 in closure #1 in SidebarSection.resolvedHeader.getter((uint64_t)&v48, (uint64_t)&v4[*(int *)(v21 + 52)]);
  long long v45 = v50;
  long long v46 = v51;
  v47[0] = v52[0];
  *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)((char *)v52 + 9);
  long long v43 = v48;
  long long v44 = v49;
  char v22 = SidebarSection.appearsExpanded.getter() & 1;
  uint64_t v23 = swift_allocObject();
  *(unsigned char *)(v23 + 16) = 1;
  *(unsigned char *)(v23 + 17) = v22;
  uint64_t v24 = (uint64_t)v38;
  outlined init with copy of Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten((uint64_t)v4, (uint64_t)v8);
  CGRect v25 = &v8[*(int *)(v6 + 44)];
  *(void *)CGRect v25 = _s7SwiftUI4ViewPAAE11outlineRoot_10isExpandedQrSb_SbSgtFyAA07OutlineE13ConfigurationVzcfU_TA_0;
  *((void *)v25 + 1) = v23;
  _s7SwiftUI7BindingVySbGWOhTm_0((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t)v40, v39, (uint64_t (*)(void))type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten);
  outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView((uint64_t)v8, v37, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView);
  uint64_t v26 = v51;
  LOBYTE(v4) = BYTE8(v51);
  outlined retain of SidebarSection((uint64_t)&v48, (void (*)(void, void, void))v36, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v26, (char)v4);
  char v27 = specialized Environment.wrappedValue.getter(v26, (char)v4);
  outlined consume of Environment<Bool>.Content(v26, (char)v4);
  outlined retain of SidebarSection((uint64_t)&v48, (void (*)(void, void, void))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content);
  outlined init with copy of StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>((uint64_t)v14, v24, (uint64_t (*)(void))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
  outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView((uint64_t)&v53, (uint64_t)v55, (uint64_t (*)(void))type metadata accessor for Binding<Bool>?);
  outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView((uint64_t)v55, (uint64_t)&v56, (uint64_t (*)(void))type metadata accessor for Binding<Bool>?);
  if (!*((void *)&v56 + 1)) {
    goto LABEL_3;
  }
  v58[0] = v56;
  long long v43 = v56;
  LOBYTE(v44) = v57;
  outlined retain of SectionStyleConfiguration((uint64_t *)&v53);
  _s7SwiftUI7BindingVySbGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v42);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v58);
  swift_release();
  if (v42 != 1) {
    char v28 = 1;
  }
  else {
LABEL_3:
  }
    char v28 = 0;
  long long v45 = v50;
  long long v46 = v51;
  v47[0] = v52[0];
  *(_OWORD *)((char *)v47 + 9) = *(_OWORD *)((char *)v52 + 9);
  long long v43 = v48;
  long long v44 = v49;
  char v29 = SidebarSection.appearsExpanded.getter();
  outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
  type metadata accessor for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rect();
  uint64_t v31 = v41;
  long long v32 = (char *)(v41 + v30[11]);
  *long long v32 = v28;
  v32[1] = (v29 & 1) == 0;
  *(unsigned char *)(v31 + v30[12]) = v27 & 1;
  uint64_t v33 = v31 + v30[13];
  *(void *)uint64_t v33 = 0;
  *(void *)(v33 + 8) = 0;
  *(unsigned char *)(v33 + 16) = 0;
  return outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView(v24, v31, (uint64_t (*)(void))type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
}

uint64_t closure #1 in closure #1 in closure #2 in SidebarSection.body.getter@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = MEMORY[0x1E4F414E8];
  type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten(0, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, MEMORY[0x1E4F414E8]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)v19 - v6;
  type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
  uint64_t v9 = v8 - 8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined retain of SidebarSection((uint64_t)a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
  closure #1 in closure #1 in SidebarSection.resolvedHeader.getter(a1, (uint64_t)v7);
  type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect();
  closure #2 in closure #1 in SidebarSection.resolvedHeader.getter((uint64_t)a1, (uint64_t)&v7[*(int *)(v12 + 52)]);
  long long v13 = a1[3];
  v19[2] = a1[2];
  v19[3] = v13;
  v20[0] = a1[4];
  *(_OWORD *)((char *)v20 + 9) = *(_OWORD *)((char *)a1 + 73);
  long long v14 = a1[1];
  v19[0] = *a1;
  v19[1] = v14;
  char v15 = SidebarSection.appearsExpanded.getter() & 1;
  uint64_t v16 = swift_allocObject();
  *(unsigned char *)(v16 + 16) = 1;
  *(unsigned char *)(v16 + 17) = v15;
  outlined init with copy of Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten((uint64_t)v7, (uint64_t)v11);
  uint64_t v17 = &v11[*(int *)(v9 + 44)];
  *(void *)uint64_t v17 = closure #1 in View.outlineRoot(_:isExpanded:)partial apply;
  *((void *)v17 + 1) = v16;
  _s7SwiftUI7BindingVySbGWOhTm_0((uint64_t)v7, (uint64_t)&lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t)type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, v4, (uint64_t (*)(void))type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten);
  outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView((uint64_t)v11, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView);
  return outlined retain of SidebarSection((uint64_t)a1, (void (*)(void, void, void))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content);
}

uint64_t closure #1 in closure #1 in SidebarSection.resolvedHeader.getter@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(0);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (_WORD *)((char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)&v30 - v12;
  outlined init with take of StateOrBinding<Bool>((uint64_t)a1 + 24, (uint64_t)v39);
  outlined init with take of StateOrBinding<Bool>((uint64_t)v39, (uint64_t)v40);
  if (v40[17])
  {
    long long v14 = (_OWORD *)swift_allocObject();
    long long v15 = a1[3];
    v14[3] = a1[2];
    _OWORD v14[4] = v15;
    v14[5] = a1[4];
    *(_OWORD *)((char *)v14 + 89) = *(_OWORD *)((char *)a1 + 73);
    long long v16 = a1[1];
    v14[1] = *a1;
    void v14[2] = v16;
    *uint64_t v7 = 256;
    uint64_t v17 = (void *)((char *)v7 + *(int *)(v5 + 36));
    *uint64_t v17 = implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getterpartial apply;
    v17[1] = v14;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    long long v18 = (char *)v7 + *(int *)(v5 + 40);
    outlined retain of SidebarSection((uint64_t)a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
    swift_retain();
    uint64_t v19 = static VerticalAlignment.center.getter();
    closure #1 in closure #1 in SidebarSection.headerWithOutlineDisclosure.getter((uint64_t)a1, (uint64_t)&v31);
    swift_release();
    uint64_t v20 = v31;
    char v21 = v32;
    char v22 = v33;
    char v23 = v34;
    char v24 = v35;
    char v25 = v38;
    long long v26 = v36;
    long long v27 = v37;
    *(void *)long long v18 = v19;
    *((void *)v18 + 1) = 0;
    unsigned char v18[16] = 1;
    *((void *)v18 + 3) = v20;
    v18[32] = v21;
    v18[40] = v22;
    v18[41] = v23;
    v18[48] = v24;
    *(_OWORD *)(v18 + 56) = v26;
    *(_OWORD *)(v18 + 72) = v27;
    v18[88] = v25;
    v18[96] = 0;
    *((void *)v18 + 13) = 1;
    outlined init with copy of StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    outlined init with copy of StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>((uint64_t)v13, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  }
  else
  {
    outlined retain of SidebarSection((uint64_t)a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
    uint64_t v29 = static VerticalAlignment.center.getter();
    outlined retain of SidebarSection((uint64_t)a1, (void (*)(void, void, void))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content);
    *(void *)a2 = v29;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 1;
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, MEMORY[0x1E4F40568]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t closure #2 in closure #1 in SidebarSection.resolvedHeader.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(0);
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (_WORD *)((char *)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  long long v13 = (char *)&v33 - v12;
  uint64_t v14 = *(void *)(a1 + 64);
  char v15 = *(unsigned char *)(a1 + 72);
  outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v14, v15);
  char v16 = specialized Environment.wrappedValue.getter(v14, v15);
  outlined consume of Environment<Bool>.Content(v14, v15);
  outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content);
  if (v16)
  {
    uint64_t v17 = (_OWORD *)swift_allocObject();
    long long v18 = *(_OWORD *)(a1 + 48);
    v17[3] = *(_OWORD *)(a1 + 32);
    _OWORD v17[4] = v18;
    v17[5] = *(_OWORD *)(a1 + 64);
    *(_OWORD *)((char *)v17 + 89) = *(_OWORD *)(a1 + 73);
    long long v19 = *(_OWORD *)(a1 + 16);
    v17[1] = *(_OWORD *)a1;
    v17[2] = v19;
    *uint64_t v7 = 256;
    uint64_t v20 = (uint64_t (**)())((char *)v7 + *(int *)(v5 + 36));
    *uint64_t v20 = partial apply for implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter;
    v20[1] = (uint64_t (*)())v17;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    char v21 = (char *)v7 + *(int *)(v5 + 40);
    outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
    swift_retain();
    uint64_t v22 = static VerticalAlignment.center.getter();
    closure #1 in closure #1 in SidebarSection.headerWithOutlineDisclosure.getter(a1, (uint64_t)&v34);
    swift_release();
    uint64_t v23 = v34;
    char v24 = v35;
    char v25 = v36;
    char v26 = v37;
    char v27 = v38;
    char v28 = v41;
    long long v29 = v39;
    long long v30 = v40;
    *(void *)char v21 = v22;
    *((void *)v21 + 1) = 0;
    v21[16] = 1;
    *((void *)v21 + 3) = v23;
    v21[32] = v24;
    v21[40] = v25;
    v21[41] = v26;
    v21[48] = v27;
    *(_OWORD *)(v21 + 56) = v29;
    *(_OWORD *)(v21 + 72) = v30;
    v21[88] = v28;
    v21[96] = 0;
    *((void *)v21 + 13) = 1;
    outlined init with copy of StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>((uint64_t)v7, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>);
    outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView((uint64_t)v10, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    outlined init with copy of StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>((uint64_t)v13, a2, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
  }
  else
  {
    outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
    uint64_t v32 = static VerticalAlignment.center.getter();
    outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content);
    *(void *)a2 = v32;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a2 + 16) = 1;
    *(void *)(a2 + 24) = 0;
    *(unsigned char *)(a2 + 32) = 1;
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>.Storage, MEMORY[0x1E4F40568]);
    return swift_storeEnumTagMultiPayload();
  }
}

uint64_t implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 41))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    _s7SwiftUI7BindingVySbGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
  }
  specialized static RotatingDisclosureIndicator.toggle(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in closure #1 in SidebarSection.headerWithOutlineDisclosure.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  static SystemStyleMetrics.list.getter();
  char v4 = v14;
  swift_release();
  swift_release();
  if (*(unsigned char *)(a1 + 41))
  {
    _s7SwiftUI7BindingVySbGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v13);
  }
  else
  {
    _s7SwiftUI7BindingVySbGMaTm_6(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.wrappedValue.getter();
  }
  char v5 = v13;
  uint64_t v6 = *(void *)(a1 + 80);
  char v7 = *(unsigned char *)(a1 + 88);
  outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined copy of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined copy of Environment<Bool>.Content);
  outlined copy of Environment<Bool>.Content(v6, v7);
  specialized Environment.wrappedValue.getter(v6, v7);
  outlined consume of Environment<Bool>.Content(v6, v7);
  outlined retain of SidebarSection(a1, (void (*)(void, void, void))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of StateOrBinding<Bool>, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, void))outlined consume of Environment<Bool>.Content);
  uint64_t result = EdgeInsets.init(_all:)();
  *(void *)a2 = 0;
  *(unsigned char *)(a2 + 8) = 1;
  *(unsigned char *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 17) = v5;
  *(unsigned char *)(a2 + 24) = 8;
  *(void *)(a2 + 32) = v9;
  *(void *)(a2 + 40) = v10;
  *(void *)(a2 + 48) = v11;
  *(void *)(a2 + 56) = v12;
  *(unsigned char *)(a2 + 64) = 0;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SidebarSection()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseSidebarHeaderModifierPredicate()
{
  PropertyList.subscript.getter();
  if (v2) {
    return 0;
  }
  PropertyList.subscript.getter();
  return v1;
}

__n128 SidebarHeaderModifier.body(content:)@<Q0>(__n128 *a1@<X8>)
{
  static Font.Weight.semibold.getter();
  v4.n128_u8[0] = 4;
  static Font.system(size:weight:design:)();
  swift_getKeyPath();
  static Color.primary.getter();
  type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>();
  lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
  View.defaultForegroundColor(_:)();
  swift_release();
  swift_release();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  __n128 result = v4;
  *a1 = v4;
  a1[1].n128_u64[0] = v5;
  a1[1].n128_u64[1] = v6;
  a1[2].n128_u64[0] = KeyPath;
  a1[2].n128_u8[8] = 2;
  return result;
}

uint64_t destroy for SidebarSection(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    swift_release();
    swift_release();
  }
  outlined consume of StateOrBinding<Bool>(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned char *)(a1 + 41));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  outlined consume of Environment<Bool>.Content(*(void *)(a1 + 64), *(unsigned char *)(a1 + 72));
  uint64_t v2 = *(void *)(a1 + 80);
  char v3 = *(unsigned char *)(a1 + 88);

  return outlined consume of Environment<Bool>.Content(v2, v3);
}

uint64_t initializeWithCopy for SidebarSection(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 32);
  char v7 = *(unsigned char *)(a2 + 41);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 40);
  outlined copy of StateOrBinding<Bool>(v5, v6, v8, v7);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = v6;
  *(unsigned char *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 41) = v7;
  uint64_t v9 = *(void *)(a2 + 48);
  LOBYTE(v6) = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<Bool>.Content(v9, v6);
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v6;
  uint64_t v10 = *(void *)(a2 + 64);
  LOBYTE(v6) = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(void *)(a1 + 64) = v10;
  *(unsigned char *)(a1 + 72) = v6;
  uint64_t v11 = *(void *)(a2 + 80);
  char v12 = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 88) = v12;
  return a1;
}

uint64_t assignWithCopy for SidebarSection(uint64_t a1, long long *a2)
{
  uint64_t v4 = *((void *)a2 + 1);
  if (*(void *)(a1 + 8))
  {
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      swift_retain();
      swift_release();
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    }
    else
    {
      _s7SwiftUI7BindingVySbGWOhTm_0(a1, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI7BindingVySbGMaTm_6);
      char v5 = *((unsigned char *)a2 + 16);
      *(_OWORD *)a1 = *a2;
      *(unsigned char *)(a1 + 16) = v5;
    }
  }
  else if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *((void *)a2 + 1);
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v6 = *a2;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
    *(_OWORD *)a1 = v6;
  }
  uint64_t v7 = *((void *)a2 + 3);
  uint64_t v8 = *((void *)a2 + 4);
  char v9 = *((unsigned char *)a2 + 41);
  unsigned __int8 v10 = *((unsigned char *)a2 + 40);
  outlined copy of StateOrBinding<Bool>(v7, v8, v10, v9);
  uint64_t v11 = *(void *)(a1 + 24);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 41);
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  uint64_t v14 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v10;
  *(unsigned char *)(a1 + 41) = v9;
  outlined consume of StateOrBinding<Bool>(v11, v12, v14, v13);
  uint64_t v15 = *((void *)a2 + 6);
  LOBYTE(v8) = *((unsigned char *)a2 + 56);
  outlined copy of Environment<Bool>.Content(v15, v8);
  uint64_t v16 = *(void *)(a1 + 48);
  char v17 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = v15;
  *(unsigned char *)(a1 + 56) = v8;
  outlined consume of Environment<Bool>.Content(v16, v17);
  uint64_t v18 = *((void *)a2 + 8);
  LOBYTE(v8) = *((unsigned char *)a2 + 72);
  outlined copy of Environment<Bool>.Content(v18, v8);
  uint64_t v19 = *(void *)(a1 + 64);
  char v20 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = v18;
  *(unsigned char *)(a1 + 72) = v8;
  outlined consume of Environment<Bool>.Content(v19, v20);
  uint64_t v21 = *((void *)a2 + 10);
  char v22 = *((unsigned char *)a2 + 88);
  outlined copy of Environment<Bool>.Content(v21, v22);
  uint64_t v23 = *(void *)(a1 + 80);
  char v24 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = v21;
  *(unsigned char *)(a1 + 88) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  return a1;
}

uint64_t assignWithTake for SidebarSection(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    _s7SwiftUI7BindingVySbGWOhTm_0(a1, (uint64_t)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638], (uint64_t (*)(void))_s7SwiftUI7BindingVySbGMaTm_6);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 40);
  char v6 = *(unsigned char *)(a2 + 41);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  char v9 = *(unsigned char *)(a1 + 41);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 41) = v6;
  outlined consume of StateOrBinding<Bool>(v7, v8, v10, v9);
  char v11 = *(unsigned char *)(a2 + 56);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  char v14 = *(unsigned char *)(a2 + 72);
  uint64_t v15 = *(void *)(a1 + 64);
  char v16 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  char v17 = *(unsigned char *)(a2 + 88);
  uint64_t v18 = *(void *)(a1 + 80);
  char v19 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  return a1;
}

uint64_t getEnumTagSinglePayload for SidebarSection(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 89)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SidebarSection(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 88) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 89) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SidebarSection()
{
  return &type metadata for SidebarSection;
}

unint64_t lazy protocol witness table accessor for type SidebarSection and conformance SidebarSection()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarSection and conformance SidebarSection;
  if (!lazy protocol witness table cache variable for type SidebarSection and conformance SidebarSection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSection and conformance SidebarSection);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SidebarSection()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>)
  {
    type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(255);
    _s7SwiftUI25_ContentShapeKindModifierVyAA9RectangleVGMaTm_0(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlainButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlainButtonStyle and conformance PlainButtonStyle, (uint64_t)&type metadata for PlainButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>);
    }
  }
}

void type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>);
    _s7SwiftUI25_ContentShapeKindModifierVyAA9RectangleVGMaTm_0(255, &lazy cache variable for type metadata for _ContentShapeKindModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeKindModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>);
    }
  }
}

void type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>))
  {
    type metadata accessor for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>);
    _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>, (uint64_t)&type metadata for RotatingDisclosureIndicator, MEMORY[0x1E4F3FA80], MEMORY[0x1E4F3FBA0]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>));
    }
  }
}

void type metadata accessor for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate;
  if (!lazy protocol witness table cache variable for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseSidebarHeaderModifierPredicate and conformance UseSidebarHeaderModifierPredicate);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>, (void (*)(void))lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>);
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t (*a4)(uint64_t), unint64_t *a5)
{
  if (!*a2)
  {
    type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten(255, a3, a4, MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(a5, a3, a4);
    unint64_t v9 = type metadata accessor for HStack();
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer))
  {
    type metadata accessor for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer));
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten(255, a2, a3, MEMORY[0x1E4F41850]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, H)
  {
    type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten(255, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, MEMORY[0x1E4F414E8]);
    _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, H);
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifi)
  {
    type metadata accessor for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContaine();
    type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifi);
    }
  }
}

void type metadata accessor for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContaine()
{
  if (!lazy cache variable for type metadata for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButt)
  {
    type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView();
    lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButton, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView, (void (*)(void))lazy protocol witness table accessor for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleV, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t v0 = type metadata accessor for MappedViews();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButt);
    }
  }
}

unint64_t lazy protocol witness table accessor for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleV()
{
  unint64_t result = lazy protocol witness table cache variable for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<;
  if (!lazy protocol witness table cache variable for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<)
  {
    type metadata accessor for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedConten(255, &lazy cache variable for type metadata for Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<, (uint64_t (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<Sect, MEMORY[0x1E4F414E8]);
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(M();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlainButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>)
  {
    type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>> and conformance Button<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)> and conformance TupleView<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>> and conformance HStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>)
  {
    _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<OutlineRootConfiguration.Key>, (uint64_t)&type metadata for OutlineRootConfiguration.Key, (uint64_t)&protocol witness table for OutlineRootConfiguration.Key, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #1 in closure #2 in SidebarSection.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in closure #2 in SidebarSection.body.getter((_OWORD *)(v1 + 16), a1);
}

uint64_t sub_187C43AFC()
{
  return swift_deallocObject();
}

unsigned char *_s7SwiftUI4ViewPAAE11outlineRoot_10isExpandedQrSb_SbSgtFyAA07OutlineE13ConfigurationVzcfU_TA_0(unsigned char *a1)
{
  return closure #1 in View.outlineRoot(_:isExpanded:)(a1, *(unsigned char *)(v1 + 16), *(unsigned char *)(v1 + 17));
}

uint64_t _s7SwiftUI7BindingVySbGWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t outlined retain of SidebarSection(uint64_t a1, void (*a2)(void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t), void (*a5)(uint64_t, void))
{
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 41);
  uint64_t v10 = *(void *)(a1 + 48);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v18 = *(void *)(a1 + 80);
  unsigned int v17 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 40);
  a2(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16));
  a3(v7, v8, v14, v9);
  a4(v10, v11);
  a4(v12, v13);
  a5(v18, v17);
  return a1;
}

uint64_t outlined init with take of ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rect()
{
  if (!lazy cache variable for type metadata for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKi)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
    type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>();
    _s7SwiftUI7BindingVySbGMaTm_6(255, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKi);
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>)
  {
    _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    _s7SwiftUI7BindingVySbGMaTm_6(255, &lazy cache variable for type metadata for SectionStyleConfiguration.RawContent?, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>);
    }
  }
}

uint64_t *outlined retain of SectionStyleConfiguration(uint64_t *a1)
{
  return a1;
}

void type metadata accessor for _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>();
    uint64_t v7 = v6;
    type metadata accessor for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>(255, &lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>, (unint64_t *)&lazy cache variable for type metadata for TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer), &lazy protocol witness table cache variable for type TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)> and conformance TupleView<A>);
    unint64_t v9 = a3(a1, v7, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter()
{
  return implicit closure #2 in implicit closure #1 in SidebarSection.headerWithOutlineDisclosure.getter(v0 + 16);
}

uint64_t outlined init with copy of StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with take of StateOrBinding<Bool>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI7BindingVySbGMaTm_6(0, &lazy cache variable for type metadata for StateOrBinding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3FA10]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187C44108()
{
  return swift_deallocObject();
}

void type metadata accessor for ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModif ()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Conten)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Conten);
    }
  }
}

void type metadata accessor for AccessibilityTraitsModifier<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentSh(uint64_t a1)
{
}

void type metadata accessor for Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    uint64_t v10 = a4();
    unint64_t v11 = a5(a1, v9, v10);
    if (!v12) {
      atomic_store(v11, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindMo()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShape;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShape)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>();
    lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButton, (void (*)(uint64_t))type metadata accessor for ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView, (void (*)(void))lazy protocol witness table accessor for type Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleV, (void (*)(void))lazy protocol witness table accessor for type _PreferenceTransformModifier<OutlineRootConfiguration.Key> and conformance _PreferenceTransformModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShape);
  }
  return result;
}

void type metadata accessor for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>)
  {
    _s7SwiftUI7BindingVySbGMaTm_6(255, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
    lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer? and conformance <A> A?, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer);
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.Footer, SectionStyleConfiguration.Footer?>);
    }
  }
}

void type metadata accessor for StaticSourceWriter<SectionStyleConfiguration.RawContent, ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>>()
{
  if (!lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.RawContent, ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>>)
  {
    type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>();
    lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
    lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>, (void (*)(void))lazy protocol witness table accessor for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>);
    unint64_t v0 = type metadata accessor for StaticSourceWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticSourceWriter<SectionStyleConfiguration.RawContent, ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>();
    _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<SectionActionsTraitKey>, (uint64_t)&type metadata for SectionActionsTraitKey, (uint64_t)&protocol witness table for SectionActionsTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>, _TraitWritingModifier<SectionActionsTraitKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?>();
    lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
    lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(&lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent? and conformance <A> A?, &lazy cache variable for type metadata for SectionStyleConfiguration.RawContent?, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI7BindingVySbGMaTm_6(255, a2, a3, MEMORY[0x1E4FBB718]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *type metadata accessor for SidebarHeaderModifier()
{
  return &unk_1ED436CD8;
}

void *type metadata accessor for UseSidebarHeaderModifierPredicate()
{
  return &unk_1ED45F940;
}

unint64_t lazy protocol witness table accessor for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentSha()
{
  unint64_t result = lazy protocol witness table cache variable for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Cont;
  if (!lazy protocol witness table cache variable for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Cont)
  {
    type metadata accessor for Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rect();
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindMo();
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.RawContent?> and conformance <> StaticIf<A, B, C>();
    lazy protocol witness table accessor for type SectionStyleConfiguration.Footer? and conformance <A> A?(&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer? and conformance <A> A?, &lazy cache variable for type metadata for SectionStyleConfiguration.Footer?, (uint64_t)&type metadata for SectionStyleConfiguration.Footer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<StaticIf<_SemanticFeature_v5, MappedViews<SectionStyleConfiguration.Header, ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _Cont);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SidebarHeaderModifier()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    _s7SwiftUI25_ContentShapeKindModifierVyAA9RectangleVGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<SidebarHeaderModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarHeaderModifier and conformance SidebarHeaderModifier, (uint64_t)&unk_1ED436CD8, MEMORY[0x1E4F408E0]);
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void _s7SwiftUI25_ContentShapeKindModifierVyAA9RectangleVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SidebarHeaderModifier and conformance SidebarHeaderModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarHeaderModifier and conformance SidebarHeaderModifier;
  if (!lazy protocol witness table cache variable for type SidebarHeaderModifier and conformance SidebarHeaderModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarHeaderModifier and conformance SidebarHeaderModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>)
  {
    _s7SwiftUI25_ContentShapeKindModifierVyAA9RectangleVGMaTm_0(255, &lazy cache variable for type metadata for _ViewModifier_Content<SidebarHeaderModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarHeaderModifier and conformance SidebarHeaderModifier, (uint64_t)&unk_1ED436CD8, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<SidebarHeaderModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187C44E04()
{
  return EnvironmentValues.textCase.getter();
}

uint64_t sub_187C44E28()
{
  return EnvironmentValues.textCase.setter();
}

uint64_t sub_187C44E60()
{
  return lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E4F413C0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Text.Case?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<Group<StaticIf<_SemanticFeature_v5, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>>, HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer)>>>, _ConditionalContent<ModifiedContent<Button<ModifiedContent<HStack<TupleView<(ModifiedContent<SectionStyleConfiguration.Header, StaticIf<UseSidebarHeaderModifierPredicate, SidebarHeaderModifier, EmptyModifier>>, Spacer, ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>)>>, _ContentShapeKindModifier<Rectangle>>>, PrimitiveButtonStyleContainerModifier<PlainButtonStyle>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<Color?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<SidebarHeaderModifier>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.Case?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E4F413C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Text.Case?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void ButtonStyleConfiguration.role.getter(unsigned char *a1@<X8>)
{
  char v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
}

uint64_t dispatch thunk of ButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t dispatch thunk of ButtonStyleConvertible.buttonStyleRepresentation.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_187C450B8()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for ArchivableLinkModifier(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for LinkDestination.Configuration();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (void *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
    *((unsigned char *)a1 + *(int *)(v6 + 20)) = *((unsigned char *)a2 + *(int *)(v6 + 20));
  }
  return a1;
}

uint64_t destroy for ArchivableLinkModifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);

  return v3(a1, v2);
}

uint64_t initializeWithCopy for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(a1 + *(int *)(v5 + 20)) = *(unsigned char *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t assignWithCopy for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(a1 + *(int *)(v5 + 20)) = *(unsigned char *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t initializeWithTake for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(a1 + *(int *)(v5 + 20)) = *(unsigned char *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t assignWithTake for ArchivableLinkModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a1, a2, v4);
  uint64_t v5 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(a1 + *(int *)(v5 + 20)) = *(unsigned char *)(a2 + *(int *)(v5 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C45478);
}

uint64_t sub_187C45478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_4(a1, a2, a3, MEMORY[0x1E4F3FB80]);
}

uint64_t storeEnumTagSinglePayload for ArchivableLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C454A4);
}

uint64_t sub_187C454A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_4(a1, a2, a3, a4, MEMORY[0x1E4F3FB80]);
}

uint64_t type metadata accessor for ArchivableLinkModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableLinkModifier);
}

uint64_t type metadata completion function for ArchivableLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ArchivableLinkModifier(a1, a2, a3, MEMORY[0x1E4F3FB80]);
}

uint64_t getEnumTagSinglePayload for WrappedButtonStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for WrappedButtonStyle(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C45868);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        char v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t static ResolvedButtonStyleBody._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  int v6 = *a1;
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 20);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v13 = v42;
  uint64_t v14 = v43;
  char v15 = v44;
  int v16 = HIDWORD(v44);
  uint64_t v42 = v7;
  LODWORD(v43) = v8;
  long long v45 = *(_OWORD *)(a2 + 3);
  uint64_t v44 = v9;
  uint64_t v46 = v10;
  uint64_t v47 = v11;
  long long v48 = *(_OWORD *)(a2 + 7);
  uint64_t v49 = a2[9];
  int v50 = v12;
  int v23 = v6;
  char v24 = v15;
  int v38 = v6;
  uint64_t v25 = v14;
  uint64_t v26 = v13;
  uint64_t v28 = v13;
  uint64_t v29 = v14;
  LOBYTE(v30) = v15;
  int v22 = v16;
  HIDWORD(v30) = v16;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static ResolvedButtonStyleBody.makeStyleBody(view:inputs:fields:)((uint64_t)v37, (uint64_t)&v39, (uint64_t)&v38, (uint64_t)&v42, (uint64_t)&v28, a3);
  uint64_t v17 = v40;
  uint64_t v21 = v39;
  LOBYTE(v6) = v41;
  swift_getAssociatedTypeWitness();
  uint64_t v28 = v42;
  LODWORD(v29) = v43;
  uint64_t v30 = v44;
  long long v31 = v45;
  uint64_t v32 = v46;
  uint64_t v33 = v47;
  long long v34 = v48;
  uint64_t v35 = v49;
  int v36 = v50;
  swift_getAssociatedConformanceWitness();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v18 = v39;
  uint64_t v19 = v40;
  if ((v6 & 1) == 0)
  {
    uint64_t v39 = v21;
    uint64_t v40 = v17;
    int v38 = v23;
    uint64_t v28 = v26;
    uint64_t v29 = v25;
    LOBYTE(v30) = v24;
    HIDWORD(v30) = v22;
    type metadata accessor for ResolvedButtonStyleBody();
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a4 = v18;
  a4[1] = v19;
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedButtonStyleBody<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  return static ResolvedButtonStyleBody._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), a4);
}

void protocol witness for View.body.getter in conformance ResolvedButtonStyleBody<A>()
{
}

uint64_t WrappedButtonStyle<>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(double))(v8 + 8))(v5);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v7, a1);
}

uint64_t protocol witness for AnyDefaultStyle.init() in conformance <> WrappedButtonStyle<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return WrappedButtonStyle<>.init()(*(void *)(a1 + 16), a2);
}

uint64_t closure #2 in closure #2 in WrappedButtonStyleBody.body.getter()
{
  return static Animation.coreAnimationDefault(duration:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance WrappedButtonStyleBody<A>()
{
  return static ConditionallyArchivableView._viewListCount(inputs:)();
}

uint64_t WrappedButtonStyleBody.ArchiveBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v106 = a2;
  uint64_t v4 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1F4188790](v4);
  uint64_t v90 = (uint64_t)v84 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
  type metadata accessor for FailedCallbacks<()>(255, &lazy cache variable for type metadata for [Bool], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB320]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 24);
  uint64_t v88 = *(void *)(a1 + 16);
  *(void *)&long long v87 = v9;
  uint64_t v10 = type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v11 = _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_1(&lazy protocol witness table cache variable for type [Bool] and conformance [A], &lazy cache variable for type metadata for [Bool], v6);
  v154 = v8;
  *(void *)&long long v155 = v10;
  *((void *)&v155 + 1) = v11;
  *(void *)&long long v156 = &protocol witness table for ResolvedButtonStyleBody<A>;
  *((void *)&v156 + 1) = MEMORY[0x1E4FBB3A8];
  uint64_t v157 = MEMORY[0x1E4F41888];
  uint64_t v12 = type metadata accessor for TemporalStack();
  uint64_t v91 = v4;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v92 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  __int16 v89 = (char *)v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v97 = (void (*)(char *, uint64_t))((char *)v84 - v16);
  uint64_t v85 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v85);
  uint64_t v96 = (uint64_t)v84 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v105 = v13;
  uint64_t v18 = type metadata accessor for _ConditionalContent();
  *(void *)&long long v99 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v98 = (uint64_t)v84 - v19;
  uint64_t v94 = v10;
  uint64_t v86 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v20);
  int v22 = (char *)v84 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v93 = (char *)v84 - v24;
  uint64_t v25 = type metadata accessor for ButtonAction();
  MEMORY[0x1F4188790](v25);
  char v27 = (char *)v84 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v28 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v29 = v28 - 8;
  MEMORY[0x1F4188790](v28);
  long long v31 = (char *)v84 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v95 = v12;
  uint64_t v32 = type metadata accessor for ModifiedContent();
  uint64_t v104 = v18;
  uint64_t v101 = v32;
  uint64_t v33 = type metadata accessor for _ConditionalContent();
  uint64_t v102 = *(void *)(v33 - 8);
  uint64_t v103 = v33;
  MEMORY[0x1F4188790](v33);
  v100 = (char *)v84 - v34;
  uint64_t v35 = (unsigned char *)(v2 + *(int *)(a1 + 44));
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6((uint64_t)v35, (uint64_t)v31, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v31[*(int *)(v29 + 32)], (uint64_t)v27, (uint64_t (*)(void))type metadata accessor for ButtonAction);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v37 = v96;
      outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v27, v96, MEMORY[0x1E4F3FB98]);
      WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(a1, (uint64_t)&v154);
      uint64_t v145 = (uint64_t)v154;
      long long v146 = v155;
      long long v147 = v156;
      uint64_t v38 = v90;
      _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(v37 + *(int *)(v85 + 24), v90, MEMORY[0x1E4F3FB80]);
      uint64_t v39 = (uint64_t)v89;
      MEMORY[0x18C113660](v38, v95, v91, &protocol witness table for TemporalStack<A, B>);
      outlined destroy of LinkDestination.Configuration(v38, type metadata accessor for ArchivableLinkModifier);
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v40 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
      v117 = &protocol witness table for TemporalStack<A, B>;
      uint64_t v118 = v40;
      uint64_t v41 = v105;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = v97;
      static ViewBuilder.buildExpression<A>(_:)(v39);
      uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v92 + 8);
      v44(v39, v41);
      static ViewBuilder.buildExpression<A>(_:)(v43);
      uint64_t v45 = v98;
      static ViewBuilder.buildEither<A, B>(second:)(v39, v94, v41);
      v44(v39, v41);
      uint64_t v115 = &protocol witness table for ResolvedButtonStyleBody<A>;
      uint64_t v116 = WitnessTable;
      uint64_t v46 = v104;
      swift_getWitnessTable();
      unint64_t v47 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
      unint64_t v113 = &protocol witness table for TemporalStack<A, B>;
      unint64_t v114 = v47;
      swift_getWitnessTable();
      long long v48 = v100;
      static ViewBuilder.buildEither<A, B>(first:)(v45, v46);
      (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v45, v46);
      v44((uint64_t)v97, v41);
      uint64_t v49 = v48;
      outlined destroy of LinkDestination.Configuration(v96, MEMORY[0x1E4F3FB98]);
    }
    else
    {
      uint64_t v60 = *(void *)v27;
      char v61 = (void (*)(char *, uint64_t))*((void *)v27 + 1);
      int v62 = v27[16];
      uint64_t v63 = *((void *)v27 + 5);
      long long v99 = *(_OWORD *)(v27 + 24);
      WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(a1, (uint64_t)&v133);
      uint64_t v92 = v133;
      long long v143 = v134;
      uint64_t v142 = v133;
      long long v144 = v135;
      uint64_t v64 = *(void *)(v2 + 16);
      uint64_t v65 = *(unsigned __int8 *)(v2 + 24);
      outlined copy of Environment<AppIntentExecutor?>.Content(v60, (uint64_t)v61, v62);
      long long v66 = (char *)(id)v99;
      uint64_t v93 = v66;
      swift_retain();
      outlined copy of Environment<Bool>.Content(v64, v65);
      char v67 = specialized Environment.wrappedValue.getter(v64, v65);
      outlined consume of Environment<Bool?>.Content(v64, v65);
      uint64_t v97 = v61;
      uint64_t v98 = v60;
      v154 = (char *)v60;
      *(void *)&long long v155 = v61;
      LODWORD(v96) = v62;
      BYTE8(v155) = v62;
      long long v156 = v99;
      uint64_t v157 = v63;
      uint64_t v94 = v63;
      LOBYTE(v158) = v67 & 1;
      MEMORY[0x18C113660](&v145, &v154, v95, &type metadata for ArchivableButtonAppIntentModifier, &protocol witness table for TemporalStack<A, B>);
      outlined consume of Environment<AppIntentExecutor?>.Content(v60, (uint64_t)v61, v62);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      uint64_t v68 = v148;
      uint64_t v69 = v149;
      LOBYTE(v63) = v150;
      long long v134 = v146;
      uint64_t v133 = v145;
      long long v135 = v147;
      uint64_t v136 = v148;
      uint64_t v137 = v149;
      char v138 = v150;
      long long v99 = v151;
      long long v139 = v151;
      uint64_t v140 = v152;
      char v141 = v153;
      unint64_t v70 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
      v131 = &protocol witness table for TemporalStack<A, B>;
      unint64_t v132 = v70;
      uint64_t v71 = v101;
      v84[1] = swift_getWitnessTable();
      static ViewBuilder.buildExpression<A>(_:)(&v133);
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Environment<AppIntentExecutor?>.Content(v68, v69, v63);
      swift_release();

      uint64_t v88 = *((void *)&v156 + 1);
      __int16 v89 = v154;
      uint64_t v91 = v158;
      uint64_t v92 = v157;
      LODWORD(v90) = v159;
      uint64_t v95 = v161;
      long long v134 = v155;
      uint64_t v133 = (uint64_t)v154;
      long long v135 = v156;
      uint64_t v136 = v157;
      uint64_t v137 = v158;
      char v138 = v159;
      long long v99 = v160;
      long long v139 = v160;
      uint64_t v140 = v161;
      char v141 = v162;
      static ViewBuilder.buildExpression<A>(_:)(&v133);
      uint64_t v72 = v148;
      char v73 = v150;
      uint64_t v85 = v149;
      uint64_t v86 = v152;
      long long v134 = v146;
      uint64_t v133 = v145;
      long long v135 = v147;
      uint64_t v136 = v148;
      uint64_t v137 = v149;
      char v138 = v150;
      long long v87 = v151;
      long long v139 = v151;
      uint64_t v140 = v152;
      char v141 = v153;
      uint64_t v74 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
      v129 = &protocol witness table for TemporalStack<A, B>;
      uint64_t v130 = v74;
      uint64_t v75 = swift_getWitnessTable();
      v127 = &protocol witness table for ResolvedButtonStyleBody<A>;
      uint64_t v128 = v75;
      uint64_t v76 = v104;
      swift_getWitnessTable();
      uint64_t v49 = v100;
      static ViewBuilder.buildEither<A, B>(second:)((uint64_t)&v133, v76, v71);
      outlined consume of Environment<AppIntentExecutor?>.Content(v98, (uint64_t)v97, v96);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      outlined consume of Environment<AppIntentExecutor?>.Content(v72, v85, v73);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();

      outlined consume of Environment<AppIntentExecutor?>.Content(v92, v91, v90);
      swift_release();
    }
  }
  else
  {
    swift_release();
    unsigned __int8 v50 = v35[1];
    LOBYTE(v154) = *v35;
    *(_WORD *)((char *)&v154 + 1) = v50;
    ButtonStyle.resolvedBody(configuration:)((uint64_t)&v154, v88, (uint64_t)v22);
    long long v52 = v93;
    uint64_t v51 = v94;
    static ViewBuilder.buildExpression<A>(_:)(v22);
    long long v53 = *(void (**)(char *, uint64_t))(v86 + 8);
    v53(v22, v51);
    char v54 = v53;
    uint64_t v97 = v53;
    static ViewBuilder.buildExpression<A>(_:)(v52);
    uint64_t v55 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    v111 = &protocol witness table for TemporalStack<A, B>;
    uint64_t v112 = v55;
    uint64_t v56 = swift_getWitnessTable();
    uint64_t v57 = v98;
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v22, v51);
    v54(v22, v51);
    uint64_t v109 = &protocol witness table for ResolvedButtonStyleBody<A>;
    uint64_t v110 = v56;
    uint64_t v58 = v104;
    swift_getWitnessTable();
    unint64_t v59 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
    id v107 = &protocol witness table for TemporalStack<A, B>;
    unint64_t v108 = v59;
    swift_getWitnessTable();
    uint64_t v49 = v100;
    static ViewBuilder.buildEither<A, B>(first:)(v57, v58);
    (*(void (**)(uint64_t, uint64_t))(v99 + 8))(v57, v58);
    v97(v93, v51);
  }
  uint64_t v77 = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
  v125 = &protocol witness table for TemporalStack<A, B>;
  uint64_t v126 = v77;
  uint64_t v78 = swift_getWitnessTable();
  v123 = &protocol witness table for ResolvedButtonStyleBody<A>;
  uint64_t v124 = v78;
  uint64_t v79 = swift_getWitnessTable();
  unint64_t v80 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  v121 = &protocol witness table for TemporalStack<A, B>;
  unint64_t v122 = v80;
  uint64_t v81 = swift_getWitnessTable();
  uint64_t v119 = v79;
  uint64_t v120 = v81;
  uint64_t v82 = v103;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v49);
  return (*(uint64_t (**)(char *, uint64_t))(v102 + 8))(v49, v82);
}

uint64_t WrappedButtonStyleBody.ArchiveBody.temporalStack.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  double v6 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = &outlined read-only object #0 of WrappedButtonStyleBody.ArchiveBody.temporalStack.getter;
  (*(void (**)(char *, double))(v4 + 16))(v7, v6);
  unint64_t v8 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = swift_allocObject();
  uint64_t v10 = *(void *)(a1 + 24);
  *(void *)(v9 + 16) = *(void *)(a1 + 16);
  *(void *)(v9 + 24) = v10;
  (*(void (**)(unint64_t, char *, uint64_t))(v4 + 32))(v9 + v8, v7, a1);
  uint64_t v11 = static Alignment.center.getter();
  uint64_t v13 = v12;
  uint64_t v14 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
  type metadata accessor for FailedCallbacks<()>(0, &lazy cache variable for type metadata for [Bool], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB320]);
  uint64_t v16 = v15;
  type metadata accessor for ResolvedButtonStyleBody();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_1(&lazy protocol witness table cache variable for type [Bool] and conformance [A], &lazy cache variable for type metadata for [Bool], v14);
  return TemporalStack.init(states:alignment:content:)((uint64_t)&v19, v11, v13, (uint64_t)partial apply for closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter, v9, v16, a2);
}

uint64_t closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(unsigned char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v17[-v11];
  LOBYTE(a1) = *a1;
  uint64_t v13 = (char *)(a2 + *(int *)(type metadata accessor for WrappedButtonStyleBody.ArchiveBody() + 44));
  char v14 = *v13;
  LOBYTE(v13) = v13[1];
  v18[0] = v14;
  v18[1] = (_BYTE)v13;
  _OWORD v18[2] = (_BYTE)a1;
  ButtonStyle.resolvedBody(configuration:)((uint64_t)v18, a3, (uint64_t)v9);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  uint64_t v15 = *(void (**)(unsigned char *, uint64_t))(v7 + 8);
  v15(v9, v6);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(unsigned char *, uint64_t))v15)(v12, v6);
}

uint64_t WrappedButtonStyleBody.ArchiveBody.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = swift_getKeyPath();
  *(unsigned char *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(unsigned char *)(a4 + 24) = 0;
  uint64_t v8 = type metadata accessor for WrappedButtonStyleBody.ArchiveBody();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 40), a1, a3);
  return outlined init with take of PrimitiveButtonStyleConfiguration(a2, a4 + *(int *)(v8 + 44), type metadata accessor for PrimitiveButtonStyleConfiguration);
}

uint64_t ArchivableLinkModifier.init(from:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v17 = a2;
  uint64_t v3 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1F4188790](v3);
  uint64_t v19 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys, (uint64_t)&unk_1ED438A28, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v18 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - v7;
  uint64_t v9 = type metadata accessor for ArchivableLinkModifier(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v16 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();
  uint64_t v12 = v20;
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v12)
  {
    uint64_t v13 = v18;
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type LinkDestination.Configuration and conformance LinkDestination.Configuration, MEMORY[0x1E4F3FB80]);
    uint64_t v14 = (uint64_t)v19;
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v13 + 8))(v8, v6);
    outlined init with take of PrimitiveButtonStyleConfiguration(v14, (uint64_t)v11, MEMORY[0x1E4F3FB80]);
    outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v11, v17, type metadata accessor for ArchivableLinkModifier);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableLinkModifier.CodingKeys()
{
  return 0x72756769666E6F63;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableLinkModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x72756769666E6F63 && a2 == 0xED00006E6F697461)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableLinkModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableLinkModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableLinkModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LinkDestination();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for LinkDestination.Configuration();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for LinkButtonModifierBody(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = (uint64_t (*)(void))MEMORY[0x1E4F3FB80];
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6(v2, (uint64_t)v12, MEMORY[0x1E4F3FB80]);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6((uint64_t)v12, (uint64_t)v9, v16);
  LinkDestination.init(configuration:)();
  outlined destroy of LinkDestination.Configuration((uint64_t)v12, MEMORY[0x1E4F3FB80]);
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v6, (uint64_t)v15, MEMORY[0x1E4F3FB98]);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6((uint64_t)v15, a1, type metadata accessor for LinkButtonModifierBody);
  return outlined destroy of LinkDestination.Configuration((uint64_t)v15, type metadata accessor for LinkButtonModifierBody);
}

uint64_t protocol witness for Decodable.init(from:) in conformance ArchivableLinkModifier@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return ArchivableLinkModifier.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance ArchivableLinkModifier(void *a1)
{
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<ArchivableLinkModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys, (uint64_t)&unk_1ED438A28, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v8 - v5;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  type metadata accessor for LinkDestination.Configuration();
  lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type LinkDestination.Configuration and conformance LinkDestination.Configuration, MEMORY[0x1E4F3FB80]);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t instantiation function for generic protocol witness table for ArchivableLinkModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
  a1[2] = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
  uint64_t result = lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableLinkModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata accessor for LinkButtonModifierBody(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for LinkButtonModifierBody);
}

uint64_t closure #1 in ArchivableButtonAppIntentModifier.body(content:)(long long *a1)
{
  uint64_t v2 = type metadata accessor for Logger();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = a1[1];
  long long v28 = *a1;
  long long v29 = v6;
  long long v30 = a1[2];
  type metadata accessor for MainActor();
  static Semantics.v7.getter();
  uint64_t v25 = &v28;
  static MainActor.assumeIsolatedIfLinkedOnOrAfter<A>(_:context:_:file:line:)();
  static Log.archivedButton.getter();
  long long v31 = v28;
  char v32 = v29;
  uint64_t v7 = (void *)*((void *)&v29 + 1);
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v31);
  id v8 = v7;
  swift_retain();
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v31);
  id v9 = v8;
  swift_retain();
  uint64_t v10 = Logger.logObject.getter();
  os_log_type_t v11 = static os_log_type_t.debug.getter();
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = swift_slowAlloc();
    uint64_t v24 = v2;
    uint64_t v13 = (uint8_t *)v12;
    uint64_t v23 = swift_slowAlloc();
    uint64_t v27 = v23;
    *(_DWORD *)uint64_t v13 = 136315138;
    id v14 = objc_msgSend(v9, sel_debugDescription, v13 + 4);
    uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    int v22 = v5;
    uint64_t v16 = v3;
    unint64_t v18 = v17;

    uint64_t v26 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v18, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v31);
    swift_release();

    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v31);
    swift_release();

    _os_log_impl(&dword_1872C6000, v10, v11, "Executed LNAction %s from button tap.", v13, 0xCu);
    uint64_t v19 = v23;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v19, -1, -1);
    MEMORY[0x18C119C60](v13, -1, -1);

    return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v22, v24);
  }
  else
  {
    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v31);
    swift_release();

    outlined release of Environment<AppIntentExecutor?>((uint64_t)&v31);
    swift_release();

    return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }
}

uint64_t closure #3 in ArchivableButtonAppIntentModifier.body(content:)()
{
  return static Animation.spring(response:dampingFraction:blendDuration:)();
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance ArchivableButtonAppIntentModifier.CodingKeys()
{
  if (*v0) {
    return 0x656C62616E457369;
  }
  else {
    return 0x6E6F69746361;
  }
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance ArchivableButtonAppIntentModifier.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = specialized ArchivableButtonAppIntentModifier.CodingKeys.init(stringValue:)(a1, a2);
  *a3 = result;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ArchivableButtonAppIntentModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance ArchivableButtonAppIntentModifier.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ArchivableButtonAppIntentModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *((void *)v1 + 5);
  char v4 = *((unsigned char *)v1 + 48);
  long long v10 = *v1;
  char v11 = *((unsigned char *)v1 + 16);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = *v1;
  *(void *)(v5 + 32) = *((void *)v1 + 2);
  long long v9 = *(long long *)((char *)v1 + 24);
  *(_OWORD *)(v5 + 40) = v9;
  *(void *)(v5 + 56) = v3;
  *(unsigned char *)(v5 + 64) = v4;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = partial apply for closure #1 in ArchivableButtonAppIntentModifier.body(content:);
  *(void *)(a1 + 24) = v5;
  *(void *)(a1 + 32) = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = partial apply for closure #2 in ArchivableButtonAppIntentModifier.body(content:);
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = closure #3 in ArchivableButtonAppIntentModifier.body(content:);
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 2;
  *(unsigned char *)(a1 + 82) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = KeyPath;
  *(unsigned char *)(a1 + 104) = v4 & 1;
  outlined retain of Environment<AppIntentExecutor?>((uint64_t)&v10);
  id v7 = (id)v9;
  return swift_retain();
}

double protocol witness for Decodable.init(from:) in conformance ArchivableButtonAppIntentModifier@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  specialized ArchivableButtonAppIntentModifier.init(from:)(a1, (uint64_t *)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(unsigned char *)(a2 + 48) = v8;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier.CodingKeys and conformance ArchivableLinkModifier.CodingKeys);
  }
  return result;
}

uint64_t destroy for ArchivableButtonAppIntentModifier(uint64_t a1)
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));

  return swift_release();
}

uint64_t initializeWithCopy for ArchivableButtonAppIntentModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)a2, v5, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v6;
  uint64_t v7 = *(void *)(a2 + 40);
  long long v8 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v7;
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  id v9 = (id)v8;
  swift_retain();
  return a1;
}

uint64_t assignWithTake for ArchivableButtonAppIntentModifier(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  char v7 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v4;
  outlined consume of Environment<AppIntentExecutor?>.Content(v5, v6, v7);

  uint64_t v8 = *(void *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = v8;
  swift_release();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  return a1;
}

uint64_t getEnumTagSinglePayload for ArchivableButtonAppIntentModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 49)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

ValueMetadata *type metadata accessor for ArchivableButtonAppIntentModifier()
{
  return &type metadata for ArchivableButtonAppIntentModifier;
}

unsigned char *storeEnumTagSinglePayload for ArchivableLinkModifier.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187C48060);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for ArchivableLinkModifier.CodingKeys()
{
  return &unk_1ED438A28;
}

unint64_t initializeBufferWithCopyOfBuffer for LinkButtonModifierBody(unint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LinkDestination();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v24 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(a2 + 24);
    char v11 = *(unsigned char *)(a2 + 34);
    __int16 v12 = *(_WORD *)(a2 + 32);
    outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v8, v9, v10, v12, v11);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(_WORD *)(a1 + 32) = v12;
    *(unsigned char *)(a1 + 34) = v11;
    uint64_t v13 = *(void *)(a2 + 40);
    uint64_t v14 = *(void *)(a2 + 48);
    uint64_t v15 = *(void *)(a2 + 56);
    uint64_t v16 = *(void *)(a2 + 64);
    char v17 = *(unsigned char *)(a2 + 74);
    __int16 v18 = *(_WORD *)(a2 + 72);
    outlined copy of Environment<OpenURLAction>.Content(v13, v14, v15, v16, v18, v17);
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    *(void *)(a1 + 56) = v15;
    *(void *)(a1 + 64) = v16;
    *(_WORD *)(a1 + 72) = v18;
    *(unsigned char *)(a1 + 74) = v17;
    uint64_t v19 = *(int *)(v6 + 24);
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for URL();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16))(v20, v21, v22);
    uint64_t v23 = type metadata accessor for LinkDestination.Configuration();
    *(unsigned char *)(v20 + *(int *)(v23 + 20)) = *(unsigned char *)(v21 + *(int *)(v23 + 20));
  }
  return a1;
}

uint64_t initializeWithCopy for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 34);
  __int16 v9 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v5, v6, v7, v9, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_WORD *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 34) = v8;
  uint64_t v10 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  char v14 = *(unsigned char *)(a2 + 74);
  __int16 v15 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v10, v11, v12, v13, v15, v14);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = v12;
  *(void *)(a1 + 64) = v13;
  *(_WORD *)(a1 + 72) = v15;
  *(unsigned char *)(a1 + 74) = v14;
  uint64_t v16 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16))(v17, v18, v19);
  uint64_t v20 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v17 + *(int *)(v20 + 20)) = *(unsigned char *)(v18 + *(int *)(v20 + 20));
  return a1;
}

uint64_t assignWithCopy for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 34);
  __int16 v9 = *(_WORD *)(a2 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)a2, v5, v6, v7, v9, v8);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  uint64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = *(void *)(a1 + 24);
  char v14 = *(unsigned char *)(a1 + 34);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  __int16 v15 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 34) = v8;
  outlined consume of Environment<OpenURLAction>.Content(v10, v11, v12, v13, v15, v14);
  uint64_t v16 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  char v20 = *(unsigned char *)(a2 + 74);
  __int16 v21 = *(_WORD *)(a2 + 72);
  outlined copy of Environment<OpenURLAction>.Content(v16, v17, v18, v19, v21, v20);
  uint64_t v22 = *(void *)(a1 + 40);
  uint64_t v23 = *(void *)(a1 + 48);
  uint64_t v24 = *(void *)(a1 + 56);
  uint64_t v25 = *(void *)(a1 + 64);
  char v26 = *(unsigned char *)(a1 + 74);
  *(void *)(a1 + 40) = v16;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v18;
  *(void *)(a1 + 64) = v19;
  __int16 v27 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v21;
  *(unsigned char *)(a1 + 74) = v20;
  outlined consume of Environment<OpenURLAction>.Content(v22, v23, v24, v25, v27, v26);
  uint64_t v28 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 24))(v29, v30, v31);
  uint64_t v32 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v29 + *(int *)(v32 + 20)) = *(unsigned char *)(v30 + *(int *)(v32 + 20));
  return a1;
}

uint64_t initializeWithTake for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 31) = *(_DWORD *)(a2 + 31);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 71) = *(_DWORD *)(a2 + 71);
  uint64_t v5 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(v6, v7, v8);
  uint64_t v9 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v6 + *(int *)(v9 + 20)) = *(unsigned char *)(v7 + *(int *)(v9 + 20));
  return a1;
}

uint64_t assignWithTake for LinkButtonModifierBody(uint64_t a1, uint64_t a2)
{
  __int16 v4 = *(_WORD *)(a2 + 32);
  char v5 = *(unsigned char *)(a2 + 34);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(a1 + 24);
  char v10 = *(unsigned char *)(a1 + 34);
  long long v11 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v11;
  __int16 v12 = *(_WORD *)(a1 + 32);
  *(_WORD *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 34) = v5;
  outlined consume of Environment<OpenURLAction>.Content(v6, v7, v8, v9, v12, v10);
  __int16 v13 = *(_WORD *)(a2 + 72);
  char v14 = *(unsigned char *)(a2 + 74);
  uint64_t v15 = *(void *)(a1 + 40);
  uint64_t v16 = *(void *)(a1 + 48);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 64);
  char v19 = *(unsigned char *)(a1 + 74);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  __int16 v20 = *(_WORD *)(a1 + 72);
  *(_WORD *)(a1 + 72) = v13;
  *(unsigned char *)(a1 + 74) = v14;
  outlined consume of Environment<OpenURLAction>.Content(v15, v16, v17, v18, v20, v19);
  uint64_t v21 = *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 40))(v22, v23, v24);
  uint64_t v25 = type metadata accessor for LinkDestination.Configuration();
  *(unsigned char *)(v22 + *(int *)(v25 + 20)) = *(unsigned char *)(v23 + *(int *)(v25 + 20));
  return a1;
}

uint64_t getEnumTagSinglePayload for LinkButtonModifierBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C48638);
}

uint64_t sub_187C48638(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_4(a1, a2, a3, MEMORY[0x1E4F3FB98]);
}

uint64_t __swift_get_extra_inhabitant_indexTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v6 = a4(0);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48);

  return v7(a1, a2, v6);
}

uint64_t storeEnumTagSinglePayload for LinkButtonModifierBody(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C486D4);
}

uint64_t sub_187C486D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_4(a1, a2, a3, a4, MEMORY[0x1E4F3FB98]);
}

uint64_t __swift_store_extra_inhabitant_indexTm_4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v7 = a5(0);
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);

  return v8(a1, a2, a2, v7);
}

uint64_t type metadata completion function for LinkButtonModifierBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return type metadata completion function for ArchivableLinkModifier(a1, a2, a3, MEMORY[0x1E4F3FB98]);
}

uint64_t type metadata completion function for ArchivableLinkModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  uint64_t result = a4(319);
  if (v5 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for ResolvedButtonStyleBody(void *a1, void *a2, uint64_t a3)
{
  __int16 v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 3) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    long long v11 = (char *)v4 + v6;
    char v12 = *((unsigned char *)a2 + v6 + 2);
    *(_WORD *)long long v11 = *(_WORD *)((char *)a2 + v6);
    v11[2] = v12;
  }
  else
  {
    uint64_t v10 = *a2;
    *__int16 v4 = *a2;
    __int16 v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithTake for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  char v9 = *(unsigned char *)(v8 + 2);
  *(_WORD *)uint64_t v7 = *(_WORD *)v8;
  *(unsigned char *)(v7 + 2) = v9;
  return a1;
}

uint64_t assignWithTake for ResolvedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = v6 + a1;
  uint64_t v8 = v6 + a2;
  *(_WORD *)uint64_t v7 = *(_WORD *)v8;
  *(unsigned char *)(v7 + 2) = *(unsigned char *)(v8 + 2);
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedButtonStyleBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 3;
  char v10 = 8 * (v6 + 3);
  if (v6 != 0 && v6 < 0xFFFFFFFD) {
    goto LABEL_8;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_15;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_23;
      }
LABEL_8:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_23;
      }
LABEL_15:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_15;
    }
  }
LABEL_23:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6 + 2);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for ResolvedButtonStyleBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 3;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -3)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 3);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187C48DC8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          char v19 = &a1[v9];
          if (a2 > 0xFE)
          {
            *(_WORD *)char v19 = a2 - 255;
            unsigned int v20 = (a2 - 255) >> 16;
          }
          else
          {
            LOBYTE(v20) = a2 + 1;
          }
          v19[2] = v20;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t assignWithTake for ButtonBehavior(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_release();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 64);
  if (!*(void *)(a1 + 64))
  {
    if (v4)
    {
      uint64_t v6 = *(void *)(a2 + 72);
      *(void *)(a1 + 64) = v4;
      *(void *)(a1 + 72) = v6;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    goto LABEL_8;
  }
  if (!v4)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v4;
  *(void *)(a1 + 72) = v5;
  swift_release();
LABEL_8:
  *(_WORD *)(a1 + 80) = *(_WORD *)(a2 + 80);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonBehavior(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonBehavior(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for WrappedButtonStyleBody(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v10 | 7;
  uint64_t v12 = (v10 | 7) + v7;
  uint64_t v13 = (v10 | 7) + 2;
  uint64_t v14 = *(void *)(v9 + 64) + ((v10 + 75) & ~v10);
  if ((unint64_t)(v14 + 1) > 0x30) {
    uint64_t v15 = v14 + 1;
  }
  else {
    uint64_t v15 = 48;
  }
  uint64_t v16 = v11 | *(_DWORD *)(v6 + 80);
  if (v16 != 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || v15 + (v12 & ~(v10 | 7)) + (v13 & ~(v10 | 7uLL)) + 1 > 0x18)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v16 + 16) & ~v16));
LABEL_29:
    swift_retain();
    return a1;
  }
  uint64_t v52 = *(void *)(v9 + 64);
  uint64_t v53 = *(void *)(v8 - 8);
  uint64_t v54 = v8;
  uint64_t v20 = ~v11;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
  uint64_t v21 = (_WORD *)(((unint64_t)a1 + v12) & v20);
  uint64_t v22 = (_WORD *)(((unint64_t)a2 + v12) & v20);
  *uint64_t v21 = *v22;
  unint64_t v23 = ((unint64_t)v21 + v13) & v20;
  uint64_t v24 = (unsigned __int8 *)(((unint64_t)v22 + v13) & v20);
  unsigned int v25 = v24[v15];
  unsigned int v26 = v25 - 3;
  if (v25 >= 3)
  {
    if (v15 <= 3) {
      uint64_t v27 = v15;
    }
    else {
      uint64_t v27 = 4;
    }
    switch(v27)
    {
      case 1:
        int v28 = *v24;
        goto LABEL_22;
      case 2:
        int v28 = *(unsigned __int16 *)v24;
        goto LABEL_22;
      case 3:
        int v28 = *(unsigned __int16 *)v24 | (v24[2] << 16);
        goto LABEL_22;
      case 4:
        int v28 = *(_DWORD *)v24;
LABEL_22:
        int v29 = (v28 | (v26 << (8 * v15))) + 3;
        unsigned int v25 = v28 + 3;
        if (v15 < 4) {
          unsigned int v25 = v29;
        }
        break;
      default:
        break;
    }
  }
  if (v25 == 2)
  {
    uint64_t v41 = *(void *)v24;
    uint64_t v42 = *((void *)v24 + 1);
    char v43 = v24[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v24, v42, v43);
    *(void *)unint64_t v23 = v41;
    *(void *)(v23 + 8) = v42;
    *(unsigned char *)(v23 + 16) = v43;
    uint64_t v44 = (void *)*((void *)v24 + 3);
    *(void *)(v23 + 24) = v44;
    uint64_t v45 = *((void *)v24 + 5);
    *(void *)(v23 + 32) = *((void *)v24 + 4);
    *(void *)(v23 + 40) = v45;
    *(unsigned char *)(v23 + v15) = 2;
    id v46 = v44;
    goto LABEL_29;
  }
  if (v25 != 1)
  {
    uint64_t v47 = *((void *)v24 + 1);
    *(void *)unint64_t v23 = *(void *)v24;
    *(void *)(v23 + 8) = v47;
    *(unsigned char *)(v23 + v15) = 0;
    goto LABEL_29;
  }
  uint64_t v30 = *(void *)v24;
  uint64_t v31 = *((void *)v24 + 1);
  uint64_t v32 = *((void *)v24 + 2);
  uint64_t v33 = *((void *)v24 + 3);
  char v50 = v24[34];
  __int16 v34 = *((_WORD *)v24 + 16);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v24, v31, v32, v33, v34, v50);
  *(void *)unint64_t v23 = v30;
  *(void *)(v23 + 8) = v31;
  *(void *)(v23 + 16) = v32;
  *(void *)(v23 + 24) = v33;
  *(_WORD *)(v23 + 32) = v34;
  *(unsigned char *)(v23 + 34) = v50;
  unint64_t v35 = (v23 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v36 = (unint64_t)(v24 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v37 = *(void *)v36;
  uint64_t v38 = *(void *)(v36 + 8);
  uint64_t v39 = *(void *)(v36 + 16);
  uint64_t v40 = *(void *)(v36 + 24);
  char v49 = *(unsigned char *)(v36 + 34);
  __int16 v51 = *(_WORD *)(v36 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v36, v38, v39, v40, v51, v49);
  *(void *)unint64_t v35 = v37;
  *(void *)(v35 + 8) = v38;
  *(void *)(v35 + 16) = v39;
  *(void *)(v35 + 24) = v40;
  *(_WORD *)(v35 + 32) = v51;
  *(unsigned char *)(v35 + 34) = v49;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v53 + 16))((v10 + 35 + v35) & ~v10, (v10 + 35 + v36) & ~v10, v54);
  *(unsigned char *)(((v10 + 35 + v35) & ~v10) + v52) = *(unsigned char *)(((v10 + 35 + v36) & ~v10) + v52);
  *(unsigned char *)(v23 + v15) = 1;
  return a1;
}

uint64_t initializeWithTake for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  _WORD *v11 = *v12;
  uint64_t v13 = (v9 | 7) + 2;
  uint64_t v14 = (_OWORD *)(((unint64_t)v11 + v13) & ~(v9 | 7));
  uint64_t v15 = (unsigned __int8 *)(((unint64_t)v12 + v13) & ~(v9 | 7));
  uint64_t v16 = *(void *)(v8 + 64);
  uint64_t v17 = v16 + ((v9 + 75) & ~v9);
  if ((unint64_t)(v17 + 1) > 0x30) {
    uint64_t v18 = v17 + 1;
  }
  else {
    uint64_t v18 = 48;
  }
  unsigned int v19 = v15[v18];
  unsigned int v20 = v19 - 3;
  if (v19 >= 3)
  {
    if (v18 <= 3) {
      uint64_t v21 = v18;
    }
    else {
      uint64_t v21 = 4;
    }
    switch(v21)
    {
      case 1:
        int v22 = *v15;
        goto LABEL_13;
      case 2:
        int v22 = *(unsigned __int16 *)v15;
        goto LABEL_13;
      case 3:
        int v22 = *(unsigned __int16 *)v15 | (v15[2] << 16);
        goto LABEL_13;
      case 4:
        int v22 = *(_DWORD *)v15;
LABEL_13:
        int v23 = (v22 | (v20 << (8 * v18))) + 3;
        unsigned int v19 = v22 + 3;
        if (v18 < 4) {
          unsigned int v19 = v23;
        }
        break;
      default:
        break;
    }
  }
  if (v19 == 2)
  {
    long long v35 = *(_OWORD *)v15;
    long long v36 = *((_OWORD *)v15 + 2);
    *(_OWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10) = *((_OWORD *)v15 + 1);
    *(_OWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x20) = v36;
    _OWORD *v14 = v35;
    char v34 = 2;
  }
  else if (v19 == 1)
  {
    uint64_t v24 = ~v9;
    long long v25 = *(_OWORD *)v15;
    long long v26 = *((_OWORD *)v15 + 1);
    *(_DWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x1F) = *(_DWORD *)(v15 + 31);
    _OWORD *v14 = v25;
    *(_OWORD *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10) = v26;
    unint64_t v27 = ((unint64_t)v14 + 42) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v28 = (unint64_t)(v15 + 42) & 0xFFFFFFFFFFFFFFF8;
    long long v29 = *(_OWORD *)v28;
    long long v30 = *(_OWORD *)(v28 + 16);
    *(_DWORD *)(v27 + 31) = *(_DWORD *)(v28 + 31);
    *(_OWORD *)unint64_t v27 = v29;
    *(_OWORD *)(v27 + 16) = v30;
    uint64_t v31 = v9 + 35;
    unint64_t v32 = (v31 + v27) & v24;
    unint64_t v33 = (v31 + v28) & v24;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))(v32, v33, v7);
    *(unsigned char *)(v32 + v16) = *(unsigned char *)(v33 + v16);
    char v34 = 1;
  }
  else
  {
    char v34 = 0;
    _OWORD *v14 = *(_OWORD *)v15;
  }
  *((unsigned char *)v14 + v18) = v34;
  return a1;
}

uint64_t assignWithTake for WrappedButtonStyleBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (_WORD *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (_WORD *)((v10 + a2) & ~(v9 | 7));
  _WORD *v11 = *v12;
  uint64_t v13 = (v9 | 7) + 2;
  uint64_t v14 = (unsigned __int8 *)(((unint64_t)v11 + v13) & ~(v9 | 7));
  uint64_t v15 = (unsigned __int8 *)(((unint64_t)v12 + v13) & ~(v9 | 7));
  if (v14 == v15) {
    return a1;
  }
  uint64_t v16 = v7;
  uint64_t v17 = v8;
  uint64_t v18 = *(void *)(v8 + 64);
  uint64_t v19 = ((v9 + 75) & ~v9) + v18;
  if ((unint64_t)(v19 + 1) > 0x30) {
    uint64_t v20 = v19 + 1;
  }
  else {
    uint64_t v20 = 48;
  }
  unsigned int v21 = v14[v20];
  unsigned int v22 = v21 - 3;
  if (v21 >= 3)
  {
    if (v20 <= 3) {
      uint64_t v23 = v20;
    }
    else {
      uint64_t v23 = 4;
    }
    switch(v23)
    {
      case 1:
        int v24 = *v14;
        goto LABEL_14;
      case 2:
        int v24 = *(unsigned __int16 *)v14;
        goto LABEL_14;
      case 3:
        int v24 = *(unsigned __int16 *)(((unint64_t)v11 + v13) & ~(v9 | 7)) | (*(unsigned __int8 *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 2) << 16);
        goto LABEL_14;
      case 4:
        int v24 = *(_DWORD *)v14;
LABEL_14:
        int v25 = (v24 | (v22 << (8 * v20))) + 3;
        unsigned int v21 = v24 + 3;
        if (v20 < 4) {
          unsigned int v21 = v25;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v26 = ~v9;
  if (v21 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(((unint64_t)v11 + v13) & ~(v9 | 7)), *(void *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 8), *(unsigned char *)((((unint64_t)v11 + v13) & ~(v9 | 7)) + 0x10));

    goto LABEL_20;
  }
  if (v21 != 1)
  {
LABEL_20:
    swift_release();
    goto LABEL_21;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v14, *((void *)v14 + 1), *((void *)v14 + 2), *((void *)v14 + 3), *((_WORD *)v14 + 16), v14[34]);
  unint64_t v27 = (unint64_t)(v14 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v27, *(void *)(v27 + 8), *(void *)(v27 + 16), *(void *)(v27 + 24), *(_WORD *)(v27 + 32), *(unsigned char *)(v27 + 34));
  (*(void (**)(unint64_t, uint64_t))(v17 + 8))((v9 + v27 + 35) & v26, v16);
LABEL_21:
  unsigned int v28 = v15[v20];
  unsigned int v29 = v28 - 3;
  if (v28 >= 3)
  {
    if (v20 <= 3) {
      uint64_t v30 = v20;
    }
    else {
      uint64_t v30 = 4;
    }
    switch(v30)
    {
      case 1:
        int v31 = *v15;
        goto LABEL_30;
      case 2:
        int v31 = *(unsigned __int16 *)v15;
        goto LABEL_30;
      case 3:
        int v31 = *(unsigned __int16 *)v15 | (v15[2] << 16);
        goto LABEL_30;
      case 4:
        int v31 = *(_DWORD *)v15;
LABEL_30:
        int v32 = (v31 | (v29 << (8 * v20))) + 3;
        unsigned int v28 = v31 + 3;
        if (v20 < 4) {
          unsigned int v28 = v32;
        }
        break;
      default:
        break;
    }
  }
  if (v28 == 2)
  {
    long long v42 = *(_OWORD *)v15;
    long long v43 = *((_OWORD *)v15 + 2);
    *((_OWORD *)v14 + 1) = *((_OWORD *)v15 + 1);
    *((_OWORD *)v14 + 2) = v43;
    *(_OWORD *)uint64_t v14 = v42;
    char v41 = 2;
  }
  else if (v28 == 1)
  {
    long long v33 = *(_OWORD *)v15;
    long long v34 = *((_OWORD *)v15 + 1);
    *(_DWORD *)(v14 + 31) = *(_DWORD *)(v15 + 31);
    *(_OWORD *)uint64_t v14 = v33;
    *((_OWORD *)v14 + 1) = v34;
    unint64_t v35 = (unint64_t)(v14 + 42) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v36 = (unint64_t)(v15 + 42) & 0xFFFFFFFFFFFFFFF8;
    long long v37 = *(_OWORD *)v36;
    long long v38 = *(_OWORD *)(v36 + 16);
    *(_DWORD *)(v35 + 31) = *(_DWORD *)(v36 + 31);
    *(_OWORD *)unint64_t v35 = v37;
    *(_OWORD *)(v35 + 16) = v38;
    uint64_t v39 = (v9 + 35 + v35) & v26;
    uint64_t v40 = (v9 + 35 + v36) & v26;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 32))(v39, v40, v16);
    *(unsigned char *)(v18 + v39) = *(unsigned char *)(v18 + v40);
    char v41 = 1;
  }
  else
  {
    char v41 = 0;
    *(_OWORD *)uint64_t v14 = *(_OWORD *)v15;
  }
  v14[v20] = v41;
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedButtonStyleBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64) + ((v9 + 75) & ~v9);
  uint64_t v11 = 48;
  if ((unint64_t)(v10 + 1) > 0x30) {
    uint64_t v11 = v10 + 1;
  }
  if (v7 <= 0xFD) {
    unsigned int v12 = 253;
  }
  else {
    unsigned int v12 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v13 = v9 | 7;
  uint64_t v14 = (v9 | 7) + *(void *)(v6 + 64);
  uint64_t v15 = (v9 | 7) + 2;
  if (a2 <= v12) {
    goto LABEL_27;
  }
  uint64_t v16 = v11 + (v14 & ~v13) + (v15 & ~v13) + 1;
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((a2 - v12 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_27;
      }
      goto LABEL_17;
    }
    if (v20 < 2)
    {
LABEL_27:
      if (v7 < 0xFD)
      {
        unsigned int v25 = *(unsigned __int8 *)(((v15 + (((unint64_t)a1 + v14) & ~v13)) & ~v13) + v11);
        if (v25 >= 3) {
          return (v25 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        int v24 = *(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v6 + 48);
        return v24(a1, v7, v5);
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_27;
  }
LABEL_17:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v12 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for WrappedButtonStyleBody(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v32 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64) + ((v11 + 75) & ~v11);
  if ((unint64_t)(v12 + 1) > 0x30) {
    uint64_t v13 = v12 + 1;
  }
  else {
    uint64_t v13 = 48;
  }
  if (v9 <= 0xFD) {
    unsigned int v14 = 253;
  }
  else {
    unsigned int v14 = v9;
  }
  uint64_t v15 = v11 | 7;
  uint64_t v16 = (v11 | 7) + *(void *)(v8 + 64);
  uint64_t v17 = v16 & ~(v11 | 7);
  uint64_t v18 = (v11 | 7) + 2;
  size_t v19 = v13 + (v18 & ~v15) + 1;
  size_t v20 = v19 + v17;
  if (a3 <= v14)
  {
    int v21 = 0;
  }
  else if (v20 <= 3)
  {
    unsigned int v25 = ((a3 - v14 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
    if (HIWORD(v25))
    {
      int v21 = 4;
    }
    else if (v25 >= 0x100)
    {
      int v21 = 2;
    }
    else
    {
      int v21 = v25 > 1;
    }
  }
  else
  {
    int v21 = 1;
  }
  if (v14 < a2)
  {
    unsigned int v22 = ~v14 + a2;
    if (v20 < 4)
    {
      int v23 = (v22 >> (8 * v20)) + 1;
      if (v20)
      {
        int v26 = v22 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v20] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v23;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v20] = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v15;
  switch(v21)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x187C49EF8);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v9 < 0xFD)
        {
          unsigned int v28 = (unsigned char *)((unint64_t)&a1[v16] & v24);
          if (a2 > 0xFD)
          {
            if (v19 <= 3) {
              int v29 = ~(-1 << (8 * v19));
            }
            else {
              int v29 = -1;
            }
            if (v19)
            {
              int v30 = v29 & (a2 - 254);
              if (v19 <= 3) {
                int v31 = v19;
              }
              else {
                int v31 = 4;
              }
              bzero(v28, v19);
              switch(v31)
              {
                case 2:
                  *(_WORD *)unsigned int v28 = v30;
                  break;
                case 3:
                  *(_WORD *)unsigned int v28 = v30;
                  v28[2] = BYTE2(v30);
                  break;
                case 4:
                  *(_DWORD *)unsigned int v28 = v30;
                  break;
                default:
                  *unsigned int v28 = v30;
                  break;
              }
            }
          }
          else
          {
            *(unsigned char *)(((unint64_t)&v28[v18] & v24) + v13) = -(char)a2;
          }
        }
        else
        {
          unint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
          v27(a1, a2, v9, v7);
        }
      }
      return;
  }
}

uint64_t initializeBufferWithCopyOfBuffer for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  int v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for URL();
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = v12 | 7;
  uint64_t v14 = (v12 | 7) + 2;
  uint64_t v15 = *(void *)(v11 + 64) + ((v12 + 75) & ~v12);
  uint64_t v16 = 48;
  if ((unint64_t)(v15 + 1) > 0x30) {
    uint64_t v16 = v15 + 1;
  }
  if ((v12 | (unint64_t)v7) <= 7
    && ((*(_DWORD *)(v11 + 80) | v7) & 0x100000) == 0
    && v16
     + (v14 & ~(v12 | 7))
     + (((v12 | 7) + v9 + ((v7 + 25) & ~(unint64_t)v7)) & ~(v12 | 7))
     + 1 <= 0x18)
  {
    uint64_t v59 = *(_DWORD *)(v11 + 80);
    uint64_t v60 = *(void *)(*(void *)(v10 - 8) + 64);
    uint64_t v61 = *(void *)(v10 - 8);
    uint64_t v62 = v10;
    uint64_t v65 = v16;
    uint64_t v21 = ~v13;
    uint64_t v22 = *(void *)a2;
    uint64_t v64 = v9;
    char v23 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)a2, v23);
    *(void *)a1 = v22;
    *(unsigned char *)(a1 + 8) = v23;
    uint64_t v63 = a1;
    unint64_t v24 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v25 = a2 & 0xFFFFFFFFFFFFFFF8;
    uint64_t v26 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    LOBYTE(v22) = *(unsigned char *)(v25 + 24);
    outlined copy of Environment<Bool>.Content(v26, v22);
    *(void *)(v24 + 16) = v26;
    *(unsigned char *)(v24 + 24) = v22;
    uint64_t v27 = (v24 + v8 + 25) & ~v8;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))(v27, (v25 + v8 + 25) & ~v8, v5);
    unsigned int v28 = (_WORD *)((v27 + v64 + v13) & v21);
    int v29 = (_WORD *)((((v25 + v8 + 25) & ~v8) + v64 + v13) & v21);
    *unsigned int v28 = *v29;
    unint64_t v30 = ((unint64_t)v28 + v14) & v21;
    int v31 = (unsigned __int8 *)(((unint64_t)v29 + v14) & v21);
    unsigned int v32 = v31[v65];
    unsigned int v33 = v32 - 3;
    if (v32 >= 3)
    {
      if (v65 <= 3) {
        uint64_t v34 = v65;
      }
      else {
        uint64_t v34 = 4;
      }
      switch(v34)
      {
        case 1:
          int v35 = *v31;
          goto LABEL_21;
        case 2:
          int v35 = *(unsigned __int16 *)v31;
          goto LABEL_21;
        case 3:
          int v35 = *(unsigned __int16 *)v31 | (v31[2] << 16);
          goto LABEL_21;
        case 4:
          int v35 = *(_DWORD *)v31;
LABEL_21:
          int v36 = (v35 | (v33 << (8 * v65))) + 3;
          unsigned int v32 = v35 + 3;
          if (v65 < 4) {
            unsigned int v32 = v36;
          }
          break;
        default:
          break;
      }
    }
    if (v32 == 2)
    {
      uint64_t v51 = *(void *)v31;
      uint64_t v52 = *((void *)v31 + 1);
      char v53 = v31[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v31, v52, v53);
      *(void *)unint64_t v30 = v51;
      *(void *)(v30 + 8) = v52;
      *(unsigned char *)(v30 + 16) = v53;
      uint64_t v54 = (void *)*((void *)v31 + 3);
      *(void *)(v30 + 24) = v54;
      uint64_t v55 = *((void *)v31 + 5);
      *(void *)(v30 + 32) = *((void *)v31 + 4);
      *(void *)(v30 + 40) = v55;
      *(unsigned char *)(v30 + v65) = 2;
      id v56 = v54;
    }
    else
    {
      if (v32 == 1)
      {
        uint64_t v37 = *(void *)v31;
        uint64_t v38 = *((void *)v31 + 1);
        uint64_t v39 = *((void *)v31 + 2);
        uint64_t v40 = *((void *)v31 + 3);
        char v41 = v31[34];
        __int16 v42 = *((_WORD *)v31 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v31, v38, v39, v40, v42, v41);
        *(void *)unint64_t v30 = v37;
        *(void *)(v30 + 8) = v38;
        *(void *)(v30 + 16) = v39;
        *(void *)(v30 + 24) = v40;
        *(_WORD *)(v30 + 32) = v42;
        *(unsigned char *)(v30 + 34) = v41;
        unint64_t v43 = (v30 + 42) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v44 = (unint64_t)(v31 + 42) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v45 = *(void *)v44;
        uint64_t v46 = *(void *)(v44 + 8);
        uint64_t v47 = *(void *)(v44 + 16);
        uint64_t v48 = *(void *)(v44 + 24);
        char v49 = *(unsigned char *)(v44 + 34);
        __int16 v50 = *(_WORD *)(v44 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v44, v46, v47, v48, v50, v49);
        *(void *)unint64_t v43 = v45;
        *(void *)(v43 + 8) = v46;
        *(void *)(v43 + 16) = v47;
        *(void *)(v43 + 24) = v48;
        *(_WORD *)(v43 + 32) = v50;
        *(unsigned char *)(v43 + 34) = v49;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v61 + 16))((v59 + 35 + v43) & ~v59, (v59 + 35 + v44) & ~v59, v62);
        *(unsigned char *)(((v59 + 35 + v43) & ~v59) + v60) = *(unsigned char *)(((v59 + 35 + v44) & ~v59) + v60);
        *(unsigned char *)(v30 + v65) = 1;
        return v63;
      }
      uint64_t v57 = *((void *)v31 + 1);
      *(void *)unint64_t v30 = *(void *)v31;
      *(void *)(v30 + 8) = v57;
      *(unsigned char *)(v30 + v65) = 0;
    }
    swift_retain();
    return v63;
  }
  uint64_t v19 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  uint64_t v20 = v19 + (((v12 | v7) & 0xF8 ^ 0x1F8) & ((v12 | v7) + 16));
  swift_retain();
  return v20;
}

uint64_t destroy for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  outlined consume of Environment<Bool?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  v3 &= 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<Bool?>.Content(*(void *)(v3 + 16), *(unsigned __int8 *)(v3 + 24));
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = v4 + 8;
  unint64_t v6 = (v3 + *(unsigned __int8 *)(v4 + 80) + 25) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  (*(void (**)(unint64_t))(v4 + 8))(v6);
  uint64_t v7 = *(void *)(v5 + 56);
  uint64_t v8 = type metadata accessor for URL();
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(v8 - 8) + 80);
  uint64_t v10 = (unsigned __int8 *)((((v6 + v7 + (v9 | 7)) | v9 | 7) + 2) & ~(v9 | 7));
  uint64_t v11 = *(void *)(*(void *)(v8 - 8) + 64) + ((v9 + 75) & ~v9);
  if ((unint64_t)(v11 + 1) > 0x30) {
    uint64_t v12 = v11 + 1;
  }
  else {
    uint64_t v12 = 48;
  }
  unsigned int v13 = v10[v12];
  unsigned int v14 = v13 - 3;
  if (v13 >= 3)
  {
    if (v12 <= 3) {
      uint64_t v15 = v12;
    }
    else {
      uint64_t v15 = 4;
    }
    switch(v15)
    {
      case 1:
        int v16 = *v10;
        goto LABEL_13;
      case 2:
        int v16 = *(unsigned __int16 *)v10;
        goto LABEL_13;
      case 3:
        int v16 = *(unsigned __int16 *)v10 | (v10[2] << 16);
        goto LABEL_13;
      case 4:
        int v16 = *(_DWORD *)v10;
LABEL_13:
        int v17 = (v16 | (v14 << (8 * v12))) + 3;
        unsigned int v13 = v16 + 3;
        if (v12 < 4) {
          unsigned int v13 = v17;
        }
        break;
      default:
        break;
    }
  }
  if (v13 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v10, *((void *)v10 + 1), v10[16]);
  }
  else if (v13 == 1)
  {
    uint64_t v21 = *(void *)(v8 - 8);
    outlined consume of Environment<OpenURLAction>.Content(*(void *)v10, *((void *)v10 + 1), *((void *)v10 + 2), *((void *)v10 + 3), *((_WORD *)v10 + 16), v10[34]);
    unint64_t v18 = (unint64_t)(v10 + 42) & 0xFFFFFFFFFFFFFFF8;
    outlined consume of Environment<OpenURLAction>.Content(*(void *)v18, *(void *)(v18 + 8), *(void *)(v18 + 16), *(void *)(v18 + 24), *(_WORD *)(v18 + 32), *(unsigned char *)(v18 + 34));
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v19((v9 + v18 + 35) & ~v9, v8);
  }

  return swift_release();
}

uint64_t initializeWithCopy for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  unint64_t v8 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(unsigned char *)(v9 + 24);
  outlined copy of Environment<Bool>.Content(v10, v6);
  *(void *)(v8 + 16) = v10;
  *(unsigned char *)(v8 + 24) = v6;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  unint64_t v14 = (v13 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v13;
  uint64_t v15 = (v13 + 25 + v9) & ~v13;
  (*(void (**)(unint64_t, uint64_t))(v11 + 16))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 48);
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = v18;
  uint64_t v20 = *(unsigned __int8 *)(v18 + 80);
  uint64_t v21 = (v20 | 7) + v16;
  uint64_t v22 = (_WORD *)((v21 + v14) & ~(v20 | 7));
  char v23 = (_WORD *)((v21 + v15) & ~(v20 | 7));
  *uint64_t v22 = *v23;
  uint64_t v24 = (v20 | 7) + 2;
  uint64_t v25 = ((unint64_t)v22 + v24) & ~(v20 | 7);
  uint64_t v26 = (unsigned __int8 *)(((unint64_t)v23 + v24) & ~(v20 | 7));
  uint64_t v27 = *(void *)(v18 + 64);
  uint64_t v28 = v27 + ((v20 + 75) & ~v20);
  if ((unint64_t)(v28 + 1) > 0x30) {
    uint64_t v29 = v28 + 1;
  }
  else {
    uint64_t v29 = 48;
  }
  unsigned int v30 = v26[v29];
  unsigned int v31 = v30 - 3;
  if (v30 >= 3)
  {
    if (v29 <= 3) {
      uint64_t v32 = v29;
    }
    else {
      uint64_t v32 = 4;
    }
    switch(v32)
    {
      case 1:
        int v33 = *v26;
        goto LABEL_13;
      case 2:
        int v33 = *(unsigned __int16 *)v26;
        goto LABEL_13;
      case 3:
        int v33 = *(unsigned __int16 *)(((unint64_t)v23 + v24) & ~(v20 | 7)) | (*(unsigned __int8 *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 2) << 16);
        goto LABEL_13;
      case 4:
        int v33 = *(_DWORD *)v26;
LABEL_13:
        int v34 = (v33 | (v31 << (8 * v29))) + 3;
        unsigned int v30 = v33 + 3;
        if (v29 < 4) {
          unsigned int v30 = v34;
        }
        break;
      default:
        break;
    }
  }
  if (v30 == 2)
  {
    uint64_t v48 = *(void *)v26;
    uint64_t v49 = *((void *)v26 + 1);
    char v50 = v26[16];
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v26, v49, v50);
    *(void *)uint64_t v25 = v48;
    *(void *)(v25 + 8) = v49;
    *(unsigned char *)(v25 + 16) = v50;
    uint64_t v51 = (void *)*((void *)v26 + 3);
    *(void *)(v25 + 24) = v51;
    uint64_t v52 = *((void *)v26 + 5);
    *(void *)(v25 + 32) = *((void *)v26 + 4);
    *(void *)(v25 + 40) = v52;
    *(unsigned char *)(v25 + v29) = 2;
    id v53 = v51;
LABEL_20:
    swift_retain();
    return a1;
  }
  if (v30 != 1)
  {
    uint64_t v54 = *(void *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 8);
    *(void *)uint64_t v25 = *(void *)v26;
    *(void *)(v25 + 8) = v54;
    *(unsigned char *)(v25 + v29) = 0;
    goto LABEL_20;
  }
  uint64_t v59 = v17;
  uint64_t v35 = *(void *)v26;
  uint64_t v36 = *(void *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 8);
  uint64_t v60 = a1;
  uint64_t v37 = *(void *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 0x10);
  uint64_t v38 = *(void *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 0x18);
  char v39 = *(unsigned char *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 0x22);
  __int16 v40 = *(_WORD *)((((unint64_t)v23 + v24) & ~(v20 | 7)) + 0x20);
  uint64_t v57 = v19;
  uint64_t v58 = v27;
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v26, *((void *)v26 + 1), *((void *)v26 + 2), *((void *)v26 + 3), *((_WORD *)v26 + 16), v26[34]);
  *(void *)uint64_t v25 = v35;
  *(void *)(v25 + 8) = v36;
  *(void *)(v25 + 16) = v37;
  *(void *)(v25 + 24) = v38;
  *(_WORD *)(v25 + 32) = v40;
  *(unsigned char *)(v25 + 34) = v39;
  unint64_t v41 = (v25 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v42 = (unint64_t)(v26 + 42) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v43 = *(void *)v42;
  uint64_t v44 = *(void *)(v42 + 8);
  uint64_t v45 = *(void *)(v42 + 16);
  uint64_t v46 = *(void *)(v42 + 24);
  char v56 = *(unsigned char *)(v42 + 34);
  __int16 v47 = *(_WORD *)(v42 + 32);
  outlined copy of Environment<OpenURLAction>.Content(*(void *)v42, v44, v45, v46, v47, v56);
  *(void *)unint64_t v41 = v43;
  *(void *)(v41 + 8) = v44;
  *(void *)(v41 + 16) = v45;
  *(void *)(v41 + 24) = v46;
  a1 = v60;
  *(_WORD *)(v41 + 32) = v47;
  *(unsigned char *)(v41 + 34) = v56;
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v57 + 16))((v20 + 35 + v41) & ~v20, (v20 + 35 + v42) & ~v20, v59);
  *(unsigned char *)(((v20 + 35 + v41) & ~v20) + v58) = *(unsigned char *)(((v20 + 35 + v42) & ~v20) + v58);
  *(unsigned char *)(v25 + v29) = 1;
  return a1;
}

uint64_t assignWithCopy for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  LOBYTE(v6) = *(unsigned char *)(v11 + 24);
  outlined copy of Environment<Bool>.Content(v12, v6);
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v14 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v10 + 16) = v12;
  *(unsigned char *)(v10 + 24) = v6;
  outlined consume of Environment<Bool?>.Content(v13, v14);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 24;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (v17 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  uint64_t v19 = (v17 + 25 + v11) & ~v17;
  (*(void (**)(unint64_t, uint64_t))(v15 + 24))(v18, v19);
  uint64_t v20 = *(void *)(v16 + 40);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (v23 | 7) + v20;
  uint64_t v25 = (_WORD *)((v24 + v18) & ~(v23 | 7));
  uint64_t v26 = (_WORD *)((v24 + v19) & ~(v23 | 7));
  *uint64_t v25 = *v26;
  uint64_t v27 = (v23 | 7) + 2;
  uint64_t v28 = (unsigned __int8 *)(((unint64_t)v25 + v27) & ~(v23 | 7));
  uint64_t v29 = (unsigned __int8 *)(((unint64_t)v26 + v27) & ~(v23 | 7));
  if (v28 != v29)
  {
    uint64_t v30 = v21;
    uint64_t v31 = v22;
    uint64_t v32 = *(void *)(v22 + 64);
    uint64_t v33 = ((v23 + 75) & ~v23) + v32;
    if ((unint64_t)(v33 + 1) > 0x30) {
      uint64_t v34 = v33 + 1;
    }
    else {
      uint64_t v34 = 48;
    }
    unsigned int v35 = v28[v34];
    unsigned int v36 = v35 - 3;
    if (v35 >= 3)
    {
      if (v34 <= 3) {
        uint64_t v37 = v34;
      }
      else {
        uint64_t v37 = 4;
      }
      switch(v37)
      {
        case 1:
          int v38 = *v28;
          goto LABEL_14;
        case 2:
          int v38 = *(unsigned __int16 *)v28;
          goto LABEL_14;
        case 3:
          int v38 = *(unsigned __int16 *)(((unint64_t)v25 + v27) & ~(v23 | 7)) | (*(unsigned __int8 *)((((unint64_t)v25 + v27) & ~(v23 | 7)) + 2) << 16);
          goto LABEL_14;
        case 4:
          int v38 = *(_DWORD *)v28;
LABEL_14:
          int v39 = (v38 | (v36 << (8 * v34))) + 3;
          unsigned int v35 = v38 + 3;
          if (v34 < 4) {
            unsigned int v35 = v39;
          }
          break;
        default:
          break;
      }
    }
    if (v35 == 2)
    {
      outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(((unint64_t)v25 + v27) & ~(v23 | 7)), *(void *)((((unint64_t)v25 + v27) & ~(v23 | 7)) + 8), *(unsigned char *)((((unint64_t)v25 + v27) & ~(v23 | 7)) + 0x10));
    }
    else if (v35 == 1)
    {
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v28, *((void *)v28 + 1), *((void *)v28 + 2), *((void *)v28 + 3), *((_WORD *)v28 + 16), v28[34]);
      unint64_t v40 = (unint64_t)(v28 + 42) & 0xFFFFFFFFFFFFFFF8;
      outlined consume of Environment<OpenURLAction>.Content(*(void *)v40, *(void *)(v40 + 8), *(void *)(v40 + 16), *(void *)(v40 + 24), *(_WORD *)(v40 + 32), *(unsigned char *)(v40 + 34));
      (*(void (**)(unint64_t, uint64_t))(v31 + 8))((v23 + v40 + 35) & ~v23, v30);
      goto LABEL_21;
    }
    swift_release();
LABEL_21:
    unsigned int v41 = v29[v34];
    unsigned int v42 = v41 - 3;
    if (v41 >= 3)
    {
      if (v34 <= 3) {
        uint64_t v43 = v34;
      }
      else {
        uint64_t v43 = 4;
      }
      switch(v43)
      {
        case 1:
          int v44 = *v29;
          goto LABEL_30;
        case 2:
          int v44 = *(unsigned __int16 *)v29;
          goto LABEL_30;
        case 3:
          int v44 = *(unsigned __int16 *)v29 | (v29[2] << 16);
          goto LABEL_30;
        case 4:
          int v44 = *(_DWORD *)v29;
LABEL_30:
          int v45 = (v44 | (v42 << (8 * v34))) + 3;
          unsigned int v41 = v44 + 3;
          if (v34 < 4) {
            unsigned int v41 = v45;
          }
          break;
        default:
          break;
      }
    }
    if (v41 == 2)
    {
      uint64_t v59 = *(void *)v29;
      uint64_t v60 = *((void *)v29 + 1);
      char v61 = v29[16];
      outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v29, v60, v61);
      *(void *)uint64_t v28 = v59;
      *((void *)v28 + 1) = v60;
      v28[16] = v61;
      uint64_t v62 = (void *)*((void *)v29 + 3);
      *((void *)v28 + 3) = v62;
      uint64_t v63 = *((void *)v29 + 5);
      *((void *)v28 + 4) = *((void *)v29 + 4);
      *((void *)v28 + 5) = v63;
      v28[v34] = 2;
      id v64 = v62;
    }
    else
    {
      if (v41 == 1)
      {
        uint64_t v71 = v30;
        uint64_t v72 = v32;
        uint64_t v69 = ~v23;
        uint64_t v70 = v31;
        uint64_t v46 = *(void *)v29;
        uint64_t v47 = *((void *)v29 + 1);
        uint64_t v48 = *((void *)v29 + 2);
        uint64_t v49 = *((void *)v29 + 3);
        char v50 = v29[34];
        uint64_t v68 = v23;
        __int16 v51 = *((_WORD *)v29 + 16);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v29, v47, v48, v49, v51, v50);
        *(void *)uint64_t v28 = v46;
        *((void *)v28 + 1) = v47;
        *((void *)v28 + 2) = v48;
        *((void *)v28 + 3) = v49;
        *((_WORD *)v28 + 16) = v51;
        v28[34] = v50;
        unint64_t v52 = (unint64_t)(v28 + 42) & 0xFFFFFFFFFFFFFFF8;
        unint64_t v53 = (unint64_t)(v29 + 42) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v54 = *(void *)v53;
        uint64_t v55 = *(void *)(v53 + 8);
        uint64_t v56 = *(void *)(v53 + 16);
        uint64_t v57 = *(void *)(v53 + 24);
        char v67 = *(unsigned char *)(v53 + 34);
        __int16 v58 = *(_WORD *)(v53 + 32);
        outlined copy of Environment<OpenURLAction>.Content(*(void *)v53, v55, v56, v57, v58, v67);
        *(void *)unint64_t v52 = v54;
        *(void *)(v52 + 8) = v55;
        *(void *)(v52 + 16) = v56;
        *(void *)(v52 + 24) = v57;
        *(_WORD *)(v52 + 32) = v58;
        *(unsigned char *)(v52 + 34) = v67;
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v70 + 16))((v68 + 35 + v52) & v69, (v68 + 35 + v53) & v69, v71);
        *(unsigned char *)(v72 + ((v68 + 35 + v52) & v69)) = *(unsigned char *)(v72 + ((v68 + 35 + v53) & v69));
        v28[v34] = 1;
        return a1;
      }
      uint64_t v65 = *((void *)v29 + 1);
      *(void *)uint64_t v28 = *(void *)v29;
      *((void *)v28 + 1) = v65;
      v28[v34] = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  unint64_t v4 = a1 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v4 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 32;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v9 = (v8 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  unint64_t v10 = (v8 + 25 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v8;
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v14 | 7) + v11;
  uint64_t v16 = (_WORD *)((v15 + v9) & ~(v14 | 7));
  uint64_t v17 = (_WORD *)((v15 + v10) & ~(v14 | 7));
  *uint64_t v16 = *v17;
  uint64_t v18 = (v14 | 7) + 2;
  uint64_t v19 = (_OWORD *)(((unint64_t)v16 + v18) & ~(v14 | 7));
  uint64_t v20 = (unsigned __int8 *)(((unint64_t)v17 + v18) & ~(v14 | 7));
  uint64_t v21 = *(void *)(v13 + 64);
  uint64_t v22 = v21 + ((v14 + 75) & ~v14);
  if ((unint64_t)(v22 + 1) > 0x30) {
    uint64_t v23 = v22 + 1;
  }
  else {
    uint64_t v23 = 48;
  }
  unsigned int v24 = v20[v23];
  unsigned int v25 = v24 - 3;
  if (v24 >= 3)
  {
    if (v23 <= 3) {
      uint64_t v26 = v23;
    }
    else {
      uint64_t v26 = 4;
    }
    switch(v26)
    {
      case 1:
        int v27 = *v20;
        goto LABEL_13;
      case 2:
        int v27 = *(unsigned __int16 *)v20;
        goto LABEL_13;
      case 3:
        int v27 = *(unsigned __int16 *)v20 | (v20[2] << 16);
        goto LABEL_13;
      case 4:
        int v27 = *(_DWORD *)v20;
LABEL_13:
        int v28 = (v27 | (v25 << (8 * v23))) + 3;
        unsigned int v24 = v27 + 3;
        if (v23 < 4) {
          unsigned int v24 = v28;
        }
        break;
      default:
        break;
    }
  }
  if (v24 == 2)
  {
    long long v40 = *(_OWORD *)v20;
    long long v41 = *((_OWORD *)v20 + 2);
    *(_OWORD *)((((unint64_t)v16 + v18) & ~(v14 | 7)) + 0x10) = *((_OWORD *)v20 + 1);
    *(_OWORD *)((((unint64_t)v16 + v18) & ~(v14 | 7)) + 0x20) = v41;
    _OWORD *v19 = v40;
    char v39 = 2;
  }
  else if (v24 == 1)
  {
    uint64_t v29 = ~v14;
    long long v30 = *(_OWORD *)v20;
    long long v31 = *((_OWORD *)v20 + 1);
    *(_DWORD *)((((unint64_t)v16 + v18) & ~(v14 | 7)) + 0x1F) = *(_DWORD *)(v20 + 31);
    _OWORD *v19 = v30;
    *(_OWORD *)((((unint64_t)v16 + v18) & ~(v14 | 7)) + 0x10) = v31;
    unint64_t v32 = ((unint64_t)v19 + 42) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v33 = (unint64_t)(v20 + 42) & 0xFFFFFFFFFFFFFFF8;
    long long v34 = *(_OWORD *)v33;
    long long v35 = *(_OWORD *)(v33 + 16);
    *(_DWORD *)(v32 + 31) = *(_DWORD *)(v33 + 31);
    *(_OWORD *)unint64_t v32 = v34;
    *(_OWORD *)(v32 + 16) = v35;
    uint64_t v36 = v14 + 35;
    unint64_t v37 = (v36 + v32) & v29;
    unint64_t v38 = (v36 + v33) & v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v13 + 32))(v37, v38, v12);
    *(unsigned char *)(v37 + v21) = *(unsigned char *)(v38 + v21);
    char v39 = 1;
  }
  else
  {
    char v39 = 0;
    _OWORD *v19 = *(_OWORD *)v20;
  }
  *((unsigned char *)v19 + v23) = v39;
  return a1;
}

uint64_t assignWithTake for WrappedButtonStyleBody.ArchiveBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 8);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 8);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  unint64_t v10 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = a2 & 0xFFFFFFFFFFFFFFF8;
  char v12 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  uint64_t v13 = *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 16);
  uint64_t v14 = *(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(void *)(v10 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
  *(unsigned char *)(v10 + 24) = v12;
  outlined consume of Environment<Bool?>.Content(v13, v14);
  uint64_t v15 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v16 = v15 + 40;
  uint64_t v17 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (v17 + 25 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v17;
  uint64_t v19 = (v17 + 25 + v11) & ~v17;
  (*(void (**)(unint64_t, uint64_t))(v15 + 40))(v18, v19);
  uint64_t v20 = *(void *)(v16 + 24);
  uint64_t v21 = type metadata accessor for URL();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v24 = (v23 | 7) + v20;
  unsigned int v25 = (_WORD *)((v24 + v18) & ~(v23 | 7));
  uint64_t v26 = (_WORD *)((v24 + v19) & ~(v23 | 7));
  *unsigned int v25 = *v26;
  uint64_t v27 = (v23 | 7) + 2;
  int v28 = (unsigned __int8 *)(((unint64_t)v25 + v27) & ~(v23 | 7));
  uint64_t v29 = (unsigned __int8 *)(((unint64_t)v26 + v27) & ~(v23 | 7));
  if (v28 == v29) {
    return a1;
  }
  uint64_t v30 = v21;
  uint64_t v31 = v22;
  uint64_t v32 = *(void *)(v22 + 64);
  uint64_t v33 = ((v23 + 75) & ~v23) + v32;
  if ((unint64_t)(v33 + 1) > 0x30) {
    uint64_t v34 = v33 + 1;
  }
  else {
    uint64_t v34 = 48;
  }
  unsigned int v35 = v28[v34];
  unsigned int v36 = v35 - 3;
  if (v35 >= 3)
  {
    if (v34 <= 3) {
      uint64_t v37 = v34;
    }
    else {
      uint64_t v37 = 4;
    }
    switch(v37)
    {
      case 1:
        int v38 = *v28;
        goto LABEL_14;
      case 2:
        int v38 = *(unsigned __int16 *)v28;
        goto LABEL_14;
      case 3:
        int v38 = *(unsigned __int16 *)(((unint64_t)v25 + v27) & ~(v23 | 7)) | (*(unsigned __int8 *)((((unint64_t)v25 + v27) & ~(v23 | 7)) + 2) << 16);
        goto LABEL_14;
      case 4:
        int v38 = *(_DWORD *)v28;
LABEL_14:
        int v39 = (v38 | (v36 << (8 * v34))) + 3;
        unsigned int v35 = v38 + 3;
        if (v34 < 4) {
          unsigned int v35 = v39;
        }
        break;
      default:
        break;
    }
  }
  uint64_t v40 = ~v23;
  if (v35 == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(((unint64_t)v25 + v27) & ~(v23 | 7)), *(void *)((((unint64_t)v25 + v27) & ~(v23 | 7)) + 8), *(unsigned char *)((((unint64_t)v25 + v27) & ~(v23 | 7)) + 0x10));

    goto LABEL_20;
  }
  if (v35 != 1)
  {
LABEL_20:
    swift_release();
    goto LABEL_21;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v28, *((void *)v28 + 1), *((void *)v28 + 2), *((void *)v28 + 3), *((_WORD *)v28 + 16), v28[34]);
  unint64_t v41 = (unint64_t)(v28 + 42) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v41, *(void *)(v41 + 8), *(void *)(v41 + 16), *(void *)(v41 + 24), *(_WORD *)(v41 + 32), *(unsigned char *)(v41 + 34));
  (*(void (**)(unint64_t, uint64_t))(v31 + 8))((v23 + v41 + 35) & v40, v30);
LABEL_21:
  unsigned int v42 = v29[v34];
  unsigned int v43 = v42 - 3;
  if (v42 >= 3)
  {
    if (v34 <= 3) {
      uint64_t v44 = v34;
    }
    else {
      uint64_t v44 = 4;
    }
    switch(v44)
    {
      case 1:
        int v45 = *v29;
        goto LABEL_30;
      case 2:
        int v45 = *(unsigned __int16 *)v29;
        goto LABEL_30;
      case 3:
        int v45 = *(unsigned __int16 *)v29 | (v29[2] << 16);
        goto LABEL_30;
      case 4:
        int v45 = *(_DWORD *)v29;
LABEL_30:
        int v46 = (v45 | (v43 << (8 * v34))) + 3;
        unsigned int v42 = v45 + 3;
        if (v34 < 4) {
          unsigned int v42 = v46;
        }
        break;
      default:
        break;
    }
  }
  if (v42 == 2)
  {
    long long v56 = *(_OWORD *)v29;
    long long v57 = *((_OWORD *)v29 + 2);
    *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
    *((_OWORD *)v28 + 2) = v57;
    *(_OWORD *)int v28 = v56;
    char v55 = 2;
  }
  else if (v42 == 1)
  {
    long long v47 = *(_OWORD *)v29;
    long long v48 = *((_OWORD *)v29 + 1);
    *(_DWORD *)(v28 + 31) = *(_DWORD *)(v29 + 31);
    *(_OWORD *)int v28 = v47;
    *((_OWORD *)v28 + 1) = v48;
    unint64_t v49 = (unint64_t)(v28 + 42) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v50 = (unint64_t)(v29 + 42) & 0xFFFFFFFFFFFFFFF8;
    long long v51 = *(_OWORD *)v50;
    long long v52 = *(_OWORD *)(v50 + 16);
    *(_DWORD *)(v49 + 31) = *(_DWORD *)(v50 + 31);
    *(_OWORD *)unint64_t v49 = v51;
    *(_OWORD *)(v49 + 16) = v52;
    uint64_t v53 = (v23 + 35 + v49) & v40;
    uint64_t v54 = (v23 + 35 + v50) & v40;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v31 + 32))(v53, v54, v30);
    *(unsigned char *)(v32 + v53) = *(unsigned char *)(v32 + v54);
    char v55 = 1;
  }
  else
  {
    char v55 = 0;
    *(_OWORD *)int v28 = *(_OWORD *)v29;
  }
  v28[v34] = v55;
  return a1;
}

uint64_t getEnumTagSinglePayload for WrappedButtonStyleBody.ArchiveBody(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(unsigned __int8 *)(*(void *)(v9 - 8) + 80);
  uint64_t v11 = *(void *)(*(void *)(v9 - 8) + 64) + ((v10 + 75) & ~v10);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  if ((unint64_t)(v11 + 1) > 0x30) {
    uint64_t v13 = v11 + 1;
  }
  else {
    uint64_t v13 = 48;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v8) {
    goto LABEL_26;
  }
  uint64_t v14 = v13
      + (((v10 | 7) + 2) & ~(v10 | 7))
      + (((v10 | 7) + *(void *)(v6 + 64) + ((v12 + 25) & ~v12)) & ~(v10 | 7))
      + 1;
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v18 = ((a2 - v8 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v18))
    {
      int v16 = *(_DWORD *)(a1 + v14);
      if (!v16) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14)) {
        goto LABEL_26;
      }
      goto LABEL_18;
    }
    if (v18 < 2)
    {
LABEL_26:
      if (v7 > 0xFE)
      {
        uint64_t v21 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
        return v21(((a1 & 0xFFFFFFFFFFFFFFF8) + v12 + 25) & ~v12, v7, v5);
      }
      else
      {
        unsigned int v20 = *(unsigned __int8 *)(a1 + 8);
        if (v20 > 1) {
          return (v20 ^ 0xFF) + 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(unsigned char *)(a1 + v14)) {
    goto LABEL_26;
  }
LABEL_18:
  int v19 = (v16 - 1) << v15;
  if (v14 > 3) {
    int v19 = 0;
  }
  if (v14)
  {
    if (v14 > 3) {
      LODWORD(v14) = 4;
    }
    switch((int)v14)
    {
      case 2:
        LODWORD(v14) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v14) = *(unsigned __int16 *)a1 | (*(unsigned __int8 *)(a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v14) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v14) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v8 + (v14 | v19) + 1;
}

void storeEnumTagSinglePayload for WrappedButtonStyleBody.ArchiveBody(unint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v23 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= 0xFE) {
    unsigned int v10 = 254;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64) + ((v12 + 75) & ~v12);
  uint64_t v14 = 48;
  if ((unint64_t)(v13 + 1) > 0x30) {
    uint64_t v14 = v13 + 1;
  }
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  size_t v16 = v14
      + (((v12 | 7) + 2) & ~(v12 | 7))
      + (((v12 | 7) + *(void *)(v8 + 64) + ((v15 + 25) & ~v15)) & ~(v12 | 7))
      + 1;
  if (a3 <= v10)
  {
    int v17 = 0;
  }
  else if (v16 <= 3)
  {
    unsigned int v20 = ((a3 - v10 + ~(-1 << (8 * v16))) >> (8 * v16)) + 1;
    if (HIWORD(v20))
    {
      int v17 = 4;
    }
    else if (v20 >= 0x100)
    {
      int v17 = 2;
    }
    else
    {
      int v17 = v20 > 1;
    }
  }
  else
  {
    int v17 = 1;
  }
  if (v10 < a2)
  {
    unsigned int v18 = ~v10 + a2;
    if (v16 < 4)
    {
      int v19 = (v18 >> (8 * v16)) + 1;
      if (v16)
      {
        int v21 = v18 & ~(-1 << (8 * v16));
        bzero((void *)a1, v16);
        if (v16 == 3)
        {
          *(_WORD *)a1 = v21;
          *(unsigned char *)(a1 + 2) = BYTE2(v21);
        }
        else if (v16 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *(unsigned char *)a1 = v21;
        }
      }
    }
    else
    {
      bzero((void *)a1, v16);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        *(unsigned char *)(a1 + v16) = v19;
        return;
      case 2:
        *(_WORD *)(a1 + v16) = v19;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)(a1 + v16) = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      *(unsigned char *)(a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 2:
      *(_WORD *)(a1 + v16) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_26;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x187C4B994);
    case 4:
      *(_DWORD *)(a1 + v16) = 0;
      goto LABEL_25;
    default:
LABEL_25:
      if (a2)
      {
LABEL_26:
        if (v9 > 0xFE)
        {
          uint64_t v22 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
          v22(((a1 & 0xFFFFFFFFFFFFFFF8) + v15 + 25) & ~v15, a2, v9, v7);
        }
        else if (a2 > 0xFE)
        {
          *(unsigned char *)(a1 + 8) = 0;
          *(void *)a1 = (a2 - 255);
        }
        else
        {
          *(unsigned char *)(a1 + 8) = -(char)a2;
        }
      }
      return;
  }
}

uint64_t sub_187C4B9BC()
{
  type metadata accessor for WrappedButtonStyleBody();

  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>, (void (*)(uint64_t))type metadata accessor for LinkButtonModifierBody);
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableLinkModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>);
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type LinkButtonModifierBody and conformance LinkButtonModifierBody, (void (*)(uint64_t))type metadata accessor for LinkButtonModifierBody);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableLinkModifier>, LinkButtonModifierBody> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<ArchivableLinkModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<ArchivableLinkModifier>)
  {
    type metadata accessor for ArchivableLinkModifier(255);
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ArchivableLinkModifier>);
    }
  }
}

uint64_t sub_187C4BBA4()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C4BC90()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for View in ResolvedButtonStyleBody<A>()
{
  return &protocol witness table for ResolvedButtonStyleBody<A>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in LinkButtonModifierBody()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for ArchivableButtonAppIntentModifier(void *a1)
{
  a1[1] = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  a1[2] = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  unint64_t result = lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  a1[3] = result;
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ArchivableButtonAppIntentModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in WrappedButtonStyleBody<A>.ArchiveBody()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ButtonBehavior.ended()()
{
  long long v10 = *(_OWORD *)(v0 + 80);
  type metadata accessor for ButtonBehavior.StateType();
  uint64_t v1 = type metadata accessor for State();
  State.wrappedValue.getter();
  if (v11 == 2)
  {
    ButtonBehavior.pressing(_:)(1);
    static Transaction.barrier()();
  }
  long long v9 = v10;
  uint64_t v2 = State.wrappedValue.getter();
  if (v11 == 2 || (v11 & 0x100) == 0) {
    (*(void (**)(uint64_t))(v0 + 16))(v2);
  }
  long long v9 = v10;
  type metadata accessor for AnyLocation();
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(__int16 *, char *, uint64_t))(*(void *)(v4 - 8) + 32))(&v11, (char *)&v10 + 8, v4);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v11);
  State.wrappedValue.getter();
  long long v9 = v10;
  __int16 v6 = 2;
  char v7 = v8;
  specialized State.wrappedValue.setter((uint64_t)&v6, v1);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v10);
}

uint64_t ButtonBehavior.pressing(_:)(char a1)
{
  (*(void (**)(void))(v1 + 32))();
  long long v12 = *(_OWORD *)(v1 + 80);
  type metadata accessor for ButtonBehavior.StateType();
  type metadata accessor for AnyLocation();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v3 - 8) + 32))(v13, (char *)&v12 + 8, v3);
  uint64_t v4 = type metadata accessor for State();
  State.wrappedValue.getter();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v13);
  State.wrappedValue.getter();
  long long v9 = v12;
  __int16 v7 = v10;
  BOOL v8 = v10 != 2;
  specialized State.wrappedValue.setter((uint64_t)&v7, v4);
  outlined release of AnyDynamicChild<A, B>((uint64_t)&v12);
  long long v9 = v12;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v13);
  State.wrappedValue.getter();
  __int16 v5 = v10 & 0x100;
  if (v10 == 2) {
    __int16 v5 = 0;
  }
  long long v9 = v12;
  __int16 v7 = v5 & 0xFFFE | a1 & 1;
  BOOL v8 = v11;
  specialized State.wrappedValue.setter((uint64_t)&v7, v4);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v12);
}

uint64_t closure #1 in ButtonBehavior.body.getter(uint64_t a1)
{
  long long v8 = *(_OWORD *)(a1 + 80);
  type metadata accessor for ButtonBehavior.StateType();
  type metadata accessor for AnyLocation();
  uint64_t v1 = type metadata accessor for Optional();
  (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v1 - 8) + 32))(v9, (char *)&v8 + 8, v1);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v9);
  uint64_t v2 = type metadata accessor for State();
  State.wrappedValue.getter();
  long long v6 = v8;
  __int16 v4 = 2;
  char v5 = v7;
  specialized State.wrappedValue.setter((uint64_t)&v4, v2);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v8);
}

uint64_t closure #4 in ButtonBehavior.body.getter(char a1, uint64_t a2)
{
  if (a1) {
    __int16 v2 = 1;
  }
  else {
    __int16 v2 = 2;
  }
  long long v10 = *(_OWORD *)(a2 + 80);
  type metadata accessor for ButtonBehavior.StateType();
  type metadata accessor for AnyLocation();
  uint64_t v3 = type metadata accessor for Optional();
  (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v3 - 8) + 32))(v11, (char *)&v10 + 8, v3);
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v11);
  uint64_t v4 = type metadata accessor for State();
  State.wrappedValue.getter();
  long long v8 = v10;
  __int16 v6 = v2;
  char v7 = v9;
  specialized State.wrappedValue.setter((uint64_t)&v6, v4);
  return outlined release of AnyDynamicChild<A, B>((uint64_t)&v10);
}

uint64_t partial apply for closure #1 in ButtonBehavior.body.getter()
{
  return closure #1 in ButtonBehavior.body.getter(v0 + 32);
}

uint64_t partial apply for closure #4 in ButtonBehavior.body.getter(char a1)
{
  return closure #4 in ButtonBehavior.body.getter(a1, v1 + 32);
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ButtonInteractionPhase(__int16 *a1, _WORD *a2)
{
  __int16 v2 = *a1;
  int v3 = (unsigned __int16)*a2;
  if (*a1 == 2) {
    return *a2 == 2;
  }
  if (*a2 == 2 || ((((v2 & 1) == 0) ^ v3) & 1) == 0) {
    return 0;
  }
  return ((v2 & 0x100) == 0) ^ ((unsigned __int16)(v3 & 0x100) >> 8);
}

double ButtonFocusInteractionModifier.body(content:)@<D0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, _OWORD *a5@<X8>)
{
  *(void *)&long long v25 = &protocol witness table for FocusInteractions;
  uint64_t v10 = unk_1ED458798;
  if ((unk_1ED458798 & ~qword_1ED458790) == 0) {
    uint64_t v10 = 0;
  }
  *((void *)&v24 + 1) = &type metadata for FocusInteractions;
  *(void *)&long long v23 = v10 | qword_1ED458790;
  LOBYTE(v20[0]) = 1;
  outlined init with take of OptionalBinaryInteger(&v23, (uint64_t)v20 + 8);
  int v21 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  uint64_t v22 = 0;
  long long v23 = v20[0];
  long long v24 = v20[1];
  long long v25 = v20[2];
  long long v26 = (unint64_t)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6((uint64_t)&v23, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>);
  outlined destroy of LinkDestination.Configuration((uint64_t)&v23, (uint64_t (*)(void))type metadata accessor for StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>);
  uint64_t v17 = qword_18838F208[byte_1ED458768];
  BOOL v11 = (void *)swift_allocObject();
  v11[2] = a1;
  v11[3] = a2;
  v11[4] = a3;
  v11[5] = a4;
  lazy protocol witness table accessor for type PhysicalButtonPressGesture and conformance PhysicalButtonPressGesture();
  lazy protocol witness table accessor for type PhysicalButtonEvent.ButtonType and conformance PhysicalButtonEvent.ButtonType();
  swift_retain();
  swift_retain();
  Gesture<>.onChanged(_:)();
  swift_release();
  long long v12 = (void *)swift_allocObject();
  unint64_t v12[2] = a1;
  void v12[3] = a2;
  void v12[4] = a3;
  v12[5] = a4;
  type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>();
  lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type _ChangedGesture<PhysicalButtonPressGesture> and conformance _ChangedGesture<A>, (void (*)(uint64_t))type metadata accessor for _ChangedGesture<PhysicalButtonPressGesture>);
  swift_retain();
  swift_retain();
  Gesture.onEnded(_:)();
  swift_release();
  swift_release();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_6((uint64_t)v20, (uint64_t)&v23, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>);
  *(_OWORD *)&v27[8] = v18;
  *(_OWORD *)&v27[24] = v19;
  *(void *)&v27[40] = 0;
  *(void *)&v27[48] = 0;
  *(void *)uint64_t v27 = v17;
  *(_DWORD *)&v27[56] = 3;
  outlined destroy of LinkDestination.Configuration((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonFocusInteractionModifier>, StaticIf<InterfaceIdiomPredicate<CarPlayInterfaceIdiom>, _FocusableModifier, FocusEventProxyModifier>>);
  long long v13 = *(_OWORD *)&v27[16];
  a5[4] = *(_OWORD *)v27;
  a5[5] = v13;
  a5[6] = *(_OWORD *)&v27[32];
  *(_OWORD *)((char *)a5 + 108) = *(_OWORD *)&v27[44];
  long long v14 = v24;
  *a5 = v23;
  a5[1] = v14;
  double result = *(double *)&v25;
  long long v16 = v26;
  a5[2] = v25;
  a5[3] = v16;
  return result;
}

double protocol witness for ViewModifier.body(content:) in conformance ButtonFocusInteractionModifier@<D0>(_OWORD *a1@<X8>)
{
  return ButtonFocusInteractionModifier.body(content:)(*v1, v1[1], v1[2], v1[3], a1);
}

id specialized static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(void *)(v12 + 24) = a2;
  swift_bridgeObjectRetain();
  Swift::Double_optional v24 = ButtonRepeatTiming.Iterator.next()();
  if (v13)
  {
    swift_release();
    return 0;
  }
  else
  {
    double v14 = *(double *)&v24.is_nil;
    uint64_t v15 = (void *)swift_allocObject();
    _OWORD v15[2] = a3;
    v15[3] = a4;
    void v15[4] = v12;
    v15[5] = a5;
    v15[6] = a6;
    void v23[4] = partial apply for specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:);
    v23[5] = v15;
    v23[0] = MEMORY[0x1E4F143A8];
    v23[1] = 1107296256;
    v23[2] = thunk for @escaping @callee_guaranteed @Sendable (@guaranteed NSTimer) -> ();
    v23[3] = &block_descriptor_34;
    long long v16 = _Block_copy(v23);
    uint64_t v17 = self;
    swift_retain();
    swift_retain();
    swift_retain();
    id v18 = objc_msgSend(v17, sel_timerWithTimeInterval_repeats_block_, 0, v16, v14);
    _Block_release(v16);
    swift_release();
    long long v19 = self;
    id v20 = v18;
    id v21 = objc_msgSend(v19, sel_mainRunLoop);
    objc_msgSend(v21, sel_addTimer_forMode_, v20, *MEMORY[0x1E4F1C4B0]);
    swift_release();
  }
  return v20;
}

void specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, void (*a5)(void *, uint64_t), uint64_t a6)
{
  a2();
  swift_beginAccess();
  uint64_t v14 = *(void *)(a4 + 24);
  uint64_t v11 = swift_bridgeObjectRetain();
  uint64_t v12 = (void *)specialized static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(v11, v14, a2, a3, a5, a6);
  LODWORD(v14) = v13;
  swift_bridgeObjectRelease();
  if (v12) {
    uint64_t v14 = 1;
  }
  else {
    uint64_t v14 = v14;
  }
  id v15 = v12;
  a5(v12, v14);
}

__n128 ButtonRepeatModifier.body(content:)@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[3];
  long long v17 = v1[2];
  v18[0] = v3;
  *(_OWORD *)((char *)v18 + 9) = *(_OWORD *)((char *)v1 + 57);
  long long v4 = v1[1];
  long long v15 = *v1;
  long long v16 = v4;
  *(_OWORD *)uint64_t v12 = v15;
  *(_WORD *)&v12[16] = *((_WORD *)v1 + 8);
  type metadata accessor for FailedCallbacks<()>(0, &lazy cache variable for type metadata for Binding<ButtonInteractionPhase>, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v11);
  char v5 = (_OWORD *)swift_allocObject();
  long long v6 = v18[0];
  v5[3] = v17;
  v5[4] = v6;
  *(_OWORD *)((char *)v5 + 73) = *(_OWORD *)((char *)v18 + 9);
  long long v7 = v16;
  v5[1] = v15;
  void v5[2] = v7;
  outlined retain of ButtonRepeatModifier((uint64_t)&v15);
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(0, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonRepeatModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier, (uint64_t)&unk_1ED42FF50, MEMORY[0x1E4F408E0]);
  lazy protocol witness table accessor for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>();
  lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase();
  View.onChange<A>(of:initial:_:)();
  swift_release();
  __n128 result = v13;
  long long v9 = v14;
  long long v10 = *(_OWORD *)&v12[8];
  *(_WORD *)a1 = *(_WORD *)v12;
  *(_OWORD *)(a1 + 8) = v10;
  *(__n128 *)(a1 + 24) = result;
  *(_OWORD *)(a1 + 40) = v9;
  return result;
}

void closure #1 in ButtonRepeatModifier.body(content:)(uint64_t a1, __int16 *a2, uint64_t a3)
{
  __int16 v4 = *a2;
  long long v23 = *(_OWORD *)(a3 + 40);
  uint64_t v24 = *(void *)(a3 + 56);
  outlined init with take of ButtonRepeatModifier.RepeatState?((uint64_t)&v23, (uint64_t)v26);
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v24, (uint64_t)v25, (uint64_t (*)(void))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  long long v20 = v23;
  uint64_t v21 = v24;
  type metadata accessor for State<ButtonRepeatModifier.RepeatState?>(0, &lazy cache variable for type metadata for State<ButtonRepeatModifier.RepeatState?>, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();

  int v5 = v4 & 1;
  if (!v22[0] && v4 != 2 && (v4 & 1) != 0)
  {
    uint64_t v6 = *(void *)(a3 + 64);
    char v7 = *(unsigned char *)(a3 + 72);
    outlined copy of ResolvedTableRowIDs.Storage(v6, v7);
    specialized Environment.wrappedValue.getter(v6, v7, &v20);
    outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v6, v7);
    uint64_t v8 = v20;
    if ((void)v20)
    {
      long long v9 = (_OWORD *)swift_allocObject();
      long long v10 = *(_OWORD *)(a3 + 48);
      _OWORD v9[3] = *(_OWORD *)(a3 + 32);
      v9[4] = v10;
      *(_OWORD *)((char *)v9 + 73) = *(_OWORD *)(a3 + 57);
      long long v11 = *(_OWORD *)(a3 + 16);
      v9[1] = *(_OWORD *)a3;
      void v9[2] = v11;
      uint64_t v12 = (_OWORD *)swift_allocObject();
      long long v13 = *(_OWORD *)(a3 + 48);
      void v12[3] = *(_OWORD *)(a3 + 32);
      void v12[4] = v13;
      *(_OWORD *)((char *)v12 + 73) = *(_OWORD *)(a3 + 57);
      long long v14 = *(_OWORD *)(a3 + 16);
      v12[1] = *(_OWORD *)a3;
      unint64_t v12[2] = v14;
      outlined retain of ButtonRepeatModifier(a3);
      outlined retain of ButtonRepeatModifier(a3);
      id v15 = specialized static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(v8, 0, (uint64_t)partial apply for closure #1 in closure #1 in ButtonRepeatModifier.body(content:), (uint64_t)v9, (uint64_t)partial apply for closure #2 in closure #1 in ButtonRepeatModifier.body(content:), (uint64_t)v12);
      char v17 = v16;
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      *(void *)&long long v20 = v15;
      BYTE8(v20) = v17;
      outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
      if (v22[0])
      {
        outlined retain of UserActivityTrackingInfo?(v26);
        id v15 = v15;
        outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v25);
        dispatch thunk of AnyLocation.set(_:transaction:)();
      }
      else
      {
        outlined retain of UserActivityTrackingInfo?(v26);
      }

      goto LABEL_15;
    }
  }
  long long v20 = v23;
  uint64_t v21 = v24;
  State.wrappedValue.getter();
  id v18 = v22[0];

  if (v18 && !v5)
  {
    long long v20 = v23;
    uint64_t v21 = v24;
    State.wrappedValue.getter();
    id v19 = v22[0];
    if (v22[0])
    {
      objc_msgSend(v22[0], sel_invalidate);
    }
    *(void *)&long long v20 = 0;
    BYTE8(v20) = 0;
    outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v25, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
    if (v22[0])
    {
      outlined retain of UserActivityTrackingInfo?(v26);
      outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v25);
      dispatch thunk of AnyLocation.set(_:transaction:)();
LABEL_15:
      outlined release of UserActivityTrackingInfo?(v26);
      outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v25);
    }
  }
}

uint64_t closure #1 in closure #1 in ButtonRepeatModifier.body(content:)(uint64_t a1)
{
  swift_retain();
  outlined retain of ButtonRepeatModifier(a1);
  type metadata accessor for FailedCallbacks<()>(0, &lazy cache variable for type metadata for Binding<ButtonInteractionPhase>, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F41638]);
  uint64_t v3 = v2;
  swift_retain();
  MEMORY[0x18C113DA0](&v6, v3);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  swift_release();
  uint64_t v4 = outlined release of ButtonRepeatModifier(a1);
  return (*(uint64_t (**)(uint64_t))(a1 + 24))(v4);
}

uint64_t closure #2 in closure #1 in ButtonRepeatModifier.body(content:)(void *a1, uint64_t a2, uint64_t a3)
{
  long long v6 = *(_OWORD *)(a3 + 40);
  uint64_t v7 = *(void *)(a3 + 56);
  outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)&v7, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  uint64_t result = outlined init with take of PrimitiveButtonStyleConfiguration((uint64_t)v8, (uint64_t)&v10, (uint64_t (*)(void))type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
  if (v10)
  {
    outlined init with take of ButtonRepeatModifier.RepeatState?((uint64_t)&v6, (uint64_t)v9);
    outlined retain of UserActivityTrackingInfo?(v9);
    id v5 = a1;
    outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v8);
    dispatch thunk of AnyLocation.set(_:transaction:)();

    outlined release of UserActivityTrackingInfo?(v9);
    return outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)v8);
  }
  return result;
}

uint64_t sub_187C4D0A8@<X0>(void *a1@<X8>)
{
  uint64_t result = EnvironmentValues.effectiveButtonRepeatTiming.getter(&v3);
  *a1 = v3;
  return result;
}

uint64_t closure #2 in ButtonSpringLoadedInteraction.body(content:)()
{
  type metadata accessor for FailedCallbacks<()>(0, &lazy cache variable for type metadata for Binding<ButtonInteractionPhase>, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F41638]);
  uint64_t v1 = v0;
  swift_retain();
  swift_retain();
  MEMORY[0x18C113DA0](&v3, v1);
  dispatch thunk of AnyLocation.set(_:transaction:)();
  swift_release();
  return swift_release();
}

uint64_t closure #3 in ButtonSpringLoadedInteraction.body(content:)()
{
  return swift_release();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ButtonSpringLoadedInteraction@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[1];
  __int16 v5 = *((_WORD *)v1 + 8);
  uint64_t v7 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v12 = *v1;
  uint64_t v4 = v12;
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = v12;
  *(void *)(v8 + 24) = v3;
  *(_WORD *)(v8 + 32) = v5;
  *(_DWORD *)(v8 + 34) = *(_DWORD *)((char *)v1 + 18);
  *(_WORD *)(v8 + 38) = *((_WORD *)v1 + 11);
  *(void *)(v8 + 40) = v7;
  *(void *)(v8 + 48) = v6;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v4;
  *(void *)(v9 + 24) = v3;
  *(_WORD *)(v9 + 32) = v5;
  *(_DWORD *)(v9 + 34) = *(_DWORD *)((char *)v1 + 18);
  *(_WORD *)(v9 + 38) = *((_WORD *)v1 + 11);
  *(void *)(v9 + 40) = v7;
  *(void *)(v9 + 48) = v6;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = v4;
  *(void *)(v10 + 24) = v3;
  *(_WORD *)(v10 + 32) = v5;
  *(_DWORD *)(v10 + 34) = *(_DWORD *)((char *)v1 + 18);
  *(_WORD *)(v10 + 38) = *((_WORD *)v1 + 11);
  *(void *)(v10 + 40) = v7;
  *(void *)(v10 + 48) = v6;
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = partial apply for closure #1 in ButtonSpringLoadedInteraction.body(content:);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = partial apply for closure #2 in ButtonSpringLoadedInteraction.body(content:);
  *(void *)(a1 + 32) = v9;
  *(void *)(a1 + 40) = partial apply for closure #3 in ButtonSpringLoadedInteraction.body(content:);
  *(void *)(a1 + 48) = v10;
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  swift_retain();
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v12);
  swift_retain();
  return swift_retain();
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in ButtonBehavior.body.getter(char a1)
{
  return ButtonBehavior.pressing(_:)(a1);
}

uint64_t partial apply for implicit closure #2 in implicit closure #1 in ButtonBehavior.body.getter()
{
  return ButtonBehavior.ended()();
}

uint64_t sub_187C4D414()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for WrappedButtonStyleBody.ArchiveBody() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  outlined consume of Environment<Bool?>.Content(*(void *)v3, *(unsigned __int8 *)(v3 + 8));
  outlined consume of Environment<Bool?>.Content(*(void *)(v3 + 16), *(unsigned __int8 *)(v3 + 24));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[12], v1);
  uint64_t v4 = v2[13];
  uint64_t v5 = v3 + v4 + *(int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) + 24);
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)v5, *(void *)(v5 + 8), *(unsigned char *)(v5 + 16));

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(_WORD *)(v5 + 32), *(unsigned char *)(v5 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(void *)(v5 + 64), *(_WORD *)(v5 + 72), *(unsigned char *)(v5 + 74));
  uint64_t v7 = v5 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v8 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
LABEL_8:

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(unsigned char *a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for WrappedButtonStyleBody.ArchiveBody() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in WrappedButtonStyleBody.ArchiveBody.temporalStack.getter(a1, v5, v3);
}

void specialized ArchivableButtonAppIntentModifier.init(from:)(void *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v20 = a2;
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<ArchivableButtonAppIntentModifier.CodingKeys>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys, (uint64_t)&unk_1ED45E250, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)&v17 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (v2)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
  }
  else
  {
    uint64_t v9 = v6;
    char v27 = 0;
    lazy protocol witness table accessor for type AppIntentAction and conformance AppIntentAction();
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    uint64_t v10 = v21;
    uint64_t v11 = v22;
    long long v19 = v24;
    uint64_t v12 = v25;
    LOBYTE(v21) = 1;
    int v26 = v23;
    outlined copy of Environment<AppIntentExecutor?>.Content(v10, v22, v23);
    id v18 = (id)v19;
    uint64_t v13 = v12;
    swift_retain();
    LOBYTE(v12) = KeyedDecodingContainer.decode(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v8, v5);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
    char v14 = v26;
    outlined consume of Environment<AppIntentExecutor?>.Content(v10, v11, v26);
    uint64_t v15 = v13;
    swift_release();

    char v16 = v20;
    *long long v20 = v10;
    v16[1] = v11;
    *((unsigned char *)v16 + 16) = v14;
    *(_OWORD *)(v16 + 3) = v19;
    v16[5] = v15;
    *((unsigned char *)v16 + 48) = v12 & 1;
  }
}

unint64_t lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys;
  if (!lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ArchivableButtonAppIntentModifier.CodingKeys and conformance ArchivableButtonAppIntentModifier.CodingKeys);
  }
  return result;
}

uint64_t sub_187C4D9BC()
{
  outlined consume of Environment<AppIntentExecutor?>.Content(*(void *)(v0 + 16), *(void *)(v0 + 24), *(unsigned char *)(v0 + 32));

  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ArchivableButtonAppIntentModifier.body(content:)()
{
  return closure #1 in ArchivableButtonAppIntentModifier.body(content:)((long long *)(v0 + 16));
}

uint64_t partial apply for closure #2 in ArchivableButtonAppIntentModifier.body(content:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_187C4DA18()
{
  uint64_t v1 = (int *)(type metadata accessor for LinkDestination() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v2, *(void *)(v2 + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), *(_WORD *)(v2 + 32), *(unsigned char *)(v2 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v2 + 40), *(void *)(v2 + 48), *(void *)(v2 + 56), *(void *)(v2 + 64), *(_WORD *)(v2 + 72), *(unsigned char *)(v2 + 74));
  uint64_t v3 = v2 + v1[8];
  uint64_t v4 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

void partial apply for implicit closure #2 in implicit closure #1 in LinkButtonModifierBody.body(content:)()
{
}

uint64_t partial apply for closure #1 in LinkButtonModifierBody.body(content:)@<X0>(char a1@<W0>, uint64_t a2@<X8>)
{
  *(unsigned char *)a2 = a1;
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)(a2 + 8) = a1;
  *(void *)(a2 + 16) = result;
  *(_WORD *)(a2 + 24) = 0;
  return result;
}

unsigned char *storeEnumTagSinglePayload for ArchivableButtonAppIntentModifier.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C4DC9CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for ArchivableButtonAppIntentModifier.CodingKeys()
{
  return &unk_1ED45E250;
}

uint64_t assignWithTake for ButtonSpringLoadedInteraction(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  return a1;
}

uint64_t assignWithTake for ButtonRepeatModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_release();
  unsigned int v4 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  char v5 = *(unsigned char *)(a2 + 72);
  uint64_t v6 = *(void *)(a1 + 64);
  char v7 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v5;
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v6, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for ButtonRepeatModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ButtonRepeatModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

_WORD *destructiveInjectEnumTag for ButtonInteractionPhase(_WORD *result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *uint64_t result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)uint64_t result = a2 + 1;
  }
  return result;
}

uint64_t sub_187C4DEC4()
{
  type metadata accessor for ButtonActionModifier<<<opaque return type of Gesture.debugLabel(_:)>>.0>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _AnimationModifier<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F40370]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonRepeatBehavior.HasCustomRepeatBehavior and conformance ButtonRepeatBehavior.HasCustomRepeatBehavior);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type SpringLoadingBehavior.HasCustomSpringLoadedBehavior and conformance SpringLoadingBehavior.HasCustomSpringLoadedBehavior);
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _AnimationModifier<ButtonInteractionPhase> and conformance _AnimationModifier<A>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ButtonFocusInteractionModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<ButtonRepeatBehavior.HasCustomRepeatBehavior, ButtonRepeatModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type StaticIf<SpringLoadingBehavior.HasCustomSpringLoadedBehavior, ButtonSpringLoadedInteraction, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  return swift_getWitnessTable();
}

uint64_t sub_187C4E13C()
{
  type metadata accessor for ResolvedButtonStyleBody();
  uint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB320];
  type metadata accessor for FailedCallbacks<()>(255, &lazy cache variable for type metadata for [Bool], MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB320]);
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_1(&lazy protocol witness table cache variable for type [Bool] and conformance [A], &lazy cache variable for type metadata for [Bool], v0);
  type metadata accessor for TemporalStack();
  type metadata accessor for ArchivableLinkModifier(255);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier((unint64_t *)&lazy protocol witness table cache variable for type ArchivableLinkModifier and conformance ArchivableLinkModifier, (void (*)(uint64_t))type metadata accessor for ArchivableLinkModifier);
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>> and conformance ButtonBehavior<A>, (void (*)(uint64_t))type metadata accessor for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>();
    type metadata accessor for FailedCallbacks<()>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

void type metadata accessor for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>()
{
  if (!lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>);
    unint64_t v0 = type metadata accessor for ButtonBehavior();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableButtonAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier, (uint64_t)&type metadata for ArchivableButtonAppIntentModifier, MEMORY[0x1E4F408E0]);
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_1(255, &lazy cache variable for type metadata for TemporalStateViewModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41888], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TemporalStateViewModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ArchivableButtonAppIntentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivableButtonAppIntentModifier and conformance ArchivableButtonAppIntentModifier, (uint64_t)&type metadata for ArchivableButtonAppIntentModifier, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ArchivableButtonAppIntentModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t sub_187C4E69C()
{
  return lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>> and conformance ButtonBehavior<A>, (void (*)(uint64_t))type metadata accessor for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>);
}

void type metadata accessor for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>()
{
  if (!lazy cache variable for type metadata for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>();
    lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>();
    unint64_t v0 = type metadata accessor for ButtonBehavior();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ButtonBehavior<StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>>);
    }
  }
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>();
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>)
  {
    type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>();
    _s7SwiftUI23InterfaceIdiomPredicateVyAA018ClarityUIInterfaceD0VGMaTm_1(255, &lazy cache variable for type metadata for TemporalStateViewModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41888], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TemporalStateViewModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<LinkButtonModifierBody>)
  {
    type metadata accessor for LinkButtonModifierBody(255);
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type LinkButtonModifierBody and conformance LinkButtonModifierBody, (void (*)(uint64_t))type metadata accessor for LinkButtonModifierBody);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<LinkButtonModifierBody>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>);
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>, ModifiedContent<ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, _ContentShapeModifier<Rectangle>>> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>>();
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type _ViewModifier_Content<LinkButtonModifierBody> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>);
    lazy protocol witness table accessor for type ArchivableLinkModifier and conformance ArchivableLinkModifier(&lazy protocol witness table cache variable for type _ViewModifier_Content<LinkButtonModifierBody> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LinkButtonModifierBody>);
    lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonSpringLoadedInteraction()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonRepeatModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in ButtonFocusInteractionModifier.physicalButtonPressGesture.getter()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 32))(1);
}

uint64_t objectdestroy_97Tm()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in ButtonFocusInteractionModifier.physicalButtonPressGesture.getter()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 16);
  uint64_t v2 = (*(uint64_t (**)(void))(v0 + 32))(0);
  return v1(v2);
}

void partial apply for closure #1 in ButtonRepeatModifier.body(content:)(uint64_t a1, __int16 *a2)
{
  closure #1 in ButtonRepeatModifier.body(content:)(a1, a2, v2 + 16);
}

uint64_t outlined retain of ButtonRepeatModifier(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  id v5 = v2;
  outlined copy of ResolvedTableRowIDs.Storage(v3, v4);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonRepeatModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier, (uint64_t)&unk_1ED42FF50, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t outlined init with take of ButtonRepeatModifier.RepeatState?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FailedCallbacks<()>(0, &lazy cache variable for type metadata for ButtonRepeatModifier.RepeatState?, (uint64_t)&unk_1ED42FED0, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for AnyLocation<ButtonRepeatModifier.RepeatState?>?()
{
  if (!lazy cache variable for type metadata for AnyLocation<ButtonRepeatModifier.RepeatState?>?)
  {
    type metadata accessor for State<ButtonRepeatModifier.RepeatState?>(255, &lazy cache variable for type metadata for AnyLocation<ButtonRepeatModifier.RepeatState?>, MEMORY[0x1E4F3F458]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnyLocation<ButtonRepeatModifier.RepeatState?>?);
    }
  }
}

void type metadata accessor for State<ButtonRepeatModifier.RepeatState?>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for FailedCallbacks<()>(255, &lazy cache variable for type metadata for ButtonRepeatModifier.RepeatState?, (uint64_t)&unk_1ED42FED0, MEMORY[0x1E4FBB718]);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t partial apply for closure #1 in closure #1 in ButtonRepeatModifier.body(content:)()
{
  return closure #1 in closure #1 in ButtonRepeatModifier.body(content:)(v0 + 16);
}

uint64_t objectdestroy_103Tm()
{
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(*(void *)(v0 + 80), *(unsigned char *)(v0 + 88));

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ButtonRepeatModifier.body(content:)(void *a1, uint64_t a2)
{
  return closure #2 in closure #1 in ButtonRepeatModifier.body(content:)(a1, a2, v2 + 16);
}

uint64_t sub_187C4F168()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187C4F1A0()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

void partial apply for specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(uint64_t a1)
{
  specialized closure #1 in static ButtonRepeatModifier.RepeatState.schedule<A>(timing:action:updateState:)(a1, *(void (**)(void))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void (**)(void *, uint64_t))(v1 + 40), *(void *)(v1 + 48));
}

uint64_t outlined release of ButtonRepeatModifier(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 64);
  char v4 = *(unsigned char *)(a1 + 72);
  swift_release();
  swift_release();
  swift_release();

  swift_release();
  outlined consume of Environment<[SceneID : KeyboardShortcut]>.Content(v3, v4);
  return a1;
}

uint64_t partial apply for closure #1 in ButtonSpringLoadedInteraction.body(content:)()
{
  return (*(uint64_t (**)(void))(v0 + 40))();
}

uint64_t partial apply for closure #2 in ButtonSpringLoadedInteraction.body(content:)()
{
  return closure #2 in ButtonSpringLoadedInteraction.body(content:)();
}

uint64_t partial apply for closure #3 in ButtonSpringLoadedInteraction.body(content:)()
{
  return closure #3 in ButtonSpringLoadedInteraction.body(content:)();
}

uint64_t specialized ArchivableButtonAppIntentModifier.CodingKeys.init(stringValue:)(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6E6F69746361 && a2 == 0xE600000000000000;
  if (v2 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x656C62616E457369 && a2 == 0xE900000000000064)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ButtonRepeatModifier.RepeatState(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  id v4 = v3;
  return a1;
}

uint64_t assignWithCopy for ButtonRepeatModifier.RepeatState(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

uint64_t assignWithTake for ButtonRepeatModifier.RepeatState(uint64_t a1, uint64_t a2)
{
  id v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LinkButtonModifierBody>, OpacityButtonHighlightModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonRepeatModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonRepeatModifier and conformance ButtonRepeatModifier, (uint64_t)&unk_1ED42FF50, MEMORY[0x1E4F408E0]);
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ValueActionModifier2<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F408C8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<ButtonRepeatModifier> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonRepeatModifier>, _ValueActionModifier2<ButtonInteractionPhase>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ValueActionModifier2<ButtonInteractionPhase>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonInteractionPhase and conformance ButtonInteractionPhase, (uint64_t)&type metadata for ButtonInteractionPhase, MEMORY[0x1E4F408C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<ButtonInteractionPhase> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

uint64_t sub_187C4F75C()
{
  return lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ArchivableButtonAppIntentModifier>, TemporalStateViewModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>);
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonSpringLoadedInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction, (uint64_t)&unk_1ED4556C0, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ButtonSpringLoadedInteraction>, SpringLoadingInteractionModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for KeyedDecodingContainer<ArchivableLinkModifier.CodingKeys>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ButtonSpringLoadedInteraction>, (uint64_t (*)(void))lazy protocol witness table accessor for type ButtonSpringLoadedInteraction and conformance ButtonSpringLoadedInteraction, (uint64_t)&unk_1ED4556C0, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ButtonSpringLoadedInteraction> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t base witness table accessor for Collection in <> CoalescingAdjacentDuplicates<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>();
}

{
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.SubSequence : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>()
{
  return associated type witness table accessor for Collection.Indices : BidirectionalCollection in <> CoalescingAdjacentDuplicates<A>();
}

uint64_t CoalescingAdjacentDuplicates.startIndex.getter()
{
  return dispatch thunk of Collection.startIndex.getter();
}

uint64_t CoalescingAdjacentDuplicates.endIndex.getter()
{
  return dispatch thunk of Collection.endIndex.getter();
}

uint64_t CoalescingAdjacentDuplicates.index(after:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a3, a1, AssociatedTypeWitness);

  return CoalescingAdjacentDuplicates.formIndex(after:)(a3, a2);
}

uint64_t CoalescingAdjacentDuplicates.formIndex(after:)(uint64_t a1, uint64_t a2)
{
  uint64_t v72 = a2;
  uint64_t v63 = *(char **)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v73 = (char *)&v49 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = *(void *)(v5 + 32);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v60 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v49 - v11;
  uint64_t v61 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v13);
  long long v56 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v54 = (char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  long long v66 = (char *)&v49 - v19;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v49 - v21;
  unsigned __int8 v23 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  long long v24 = *(void (**)(char *))(v16 + 16);
  uint64_t v62 = v22;
  uint64_t v67 = v15;
  __int16 v58 = v24;
  v24(v22);
  v23(v74, 0);
  uint64_t v25 = v61;
  int v26 = *(void (**)(char *, uint64_t, uint64_t))(v61 + 16);
  char v27 = v56;
  uint64_t v64 = v2;
  uint64_t v52 = v61 + 16;
  long long v51 = v26;
  v26(v56, v2, v6);
  uint64_t v69 = v7;
  uint64_t v70 = a1;
  dispatch thunk of Collection.formIndex(after:)();
  int v28 = *(void (**)(char *, uint64_t))(v25 + 8);
  uint64_t v68 = v6;
  uint64_t v61 = v25 + 8;
  unint64_t v50 = v28;
  v28(v27, v6);
  uint64_t v29 = *(void (**)(void, void, void))(v8 + 16);
  uint64_t v30 = v8 + 16;
  uint64_t v31 = (void (**)(char *, uint64_t))(v8 + 8);
  long long v57 = (void (**)(char *, uint64_t, uint64_t))(v63 + 16);
  uint64_t v59 = v16 + 16;
  uint64_t v65 = (void (**)(char *, uint64_t))(v16 + 8);
  char v55 = (void (**)(char *, uint64_t))(v63 + 8);
  uint64_t v53 = v30;
  unint64_t v49 = v29;
  while (1)
  {
    uint64_t v32 = AssociatedTypeWitness;
    v29(v12, v70, AssociatedTypeWitness);
    uint64_t v33 = v60;
    uint64_t v34 = v64;
    dispatch thunk of Collection.endIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v35 = dispatch thunk of static Equatable.== infix(_:_:)();
    unsigned int v36 = *v31;
    (*v31)(v33, v32);
    v36(v12, v32);
    (*v57)(v73, v34, v72);
    uint64_t v37 = v66;
    int v38 = v58;
    ((void (*)(char *, char *, uint64_t))v58)(v66, v62, v67);
    if (v35) {
      break;
    }
    uint64_t v63 = *(char **)&v73[*(int *)(v72 + 36)];
    v29(v12, v70, AssociatedTypeWitness);
    swift_retain();
    uint64_t v39 = dispatch thunk of Collection.subscript.read();
    uint64_t v40 = v54;
    uint64_t v41 = v67;
    v38(v54);
    ((void (*)(unsigned char *, void))v39)(v74, 0);
    unsigned int v42 = v12;
    unsigned int v43 = v31;
    v36(v12, AssociatedTypeWitness);
    uint64_t v44 = v66;
    LOBYTE(v39) = ((uint64_t (*)(char *, char *))v63)(v66, v40);
    swift_release();
    int v45 = *v65;
    (*v65)(v40, v41);
    v45(v44, v41);
    (*v55)(v73, v72);
    if ((v39 & 1) == 0) {
      return ((uint64_t (*)(char *, uint64_t))v45)(v62, v67);
    }
    int v46 = v56;
    uint64_t v47 = v68;
    v51(v56, v64, v68);
    dispatch thunk of Collection.formIndex(after:)();
    v50(v46, v47);
    uint64_t v12 = v42;
    uint64_t v29 = v49;
    uint64_t v31 = v43;
  }
  int v45 = *v65;
  (*v65)(v37, v67);
  (*v55)(v73, v72);
  return ((uint64_t (*)(char *, uint64_t))v45)(v62, v67);
}

uint64_t CoalescingAdjacentDuplicates.subscript.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(uint64_t *, void))dispatch thunk of Collection.subscript.read();
  uint64_t v4 = v3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, v4, AssociatedTypeWitness);
  return v2(&v7, 0);
}

void (*protocol witness for Collection.subscript.read in conformance CoalescingAdjacentDuplicates<A>(uint64_t **a1))(void *a1)
{
  uint64_t v2 = (uint64_t *)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t)CoalescingAdjacentDuplicates.subscript.read(v2);
  return protocol witness for Collection.subscript.read in conformance NavigationState.StackContent.Views.ViewsSequence<A, B>;
}

void (*CoalescingAdjacentDuplicates.subscript.read(uint64_t *a1))(void *a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  *a1 = AssociatedTypeWitness;
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  a1[1] = v3;
  uint64_t v4 = malloc(*(void *)(v3 + 64));
  a1[2] = (uint64_t)v4;
  CoalescingAdjacentDuplicates.subscript.getter((uint64_t)v4);
  return CoalescingAdjacentDuplicates.subscript.read;
}

uint64_t protocol witness for Collection.subscript.getter in conformance CoalescingAdjacentDuplicates<A>()
{
  return MEMORY[0x1F4184430]();
}

uint64_t protocol witness for Collection._customIndexOfEquatableElement(_:) in conformance CoalescingAdjacentDuplicates<A>@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Collection.index(_:offsetBy:) in conformance CoalescingAdjacentDuplicates<A>()
{
  return MEMORY[0x1F41843A8]();
}

uint64_t protocol witness for Collection.index(_:offsetBy:limitedBy:) in conformance CoalescingAdjacentDuplicates<A>()
{
  return MEMORY[0x1F41843A0]();
}

uint64_t protocol witness for Collection.distance(from:to:) in conformance CoalescingAdjacentDuplicates<A>()
{
  return MEMORY[0x1F41843D8]();
}

uint64_t protocol witness for Sequence.makeIterator() in conformance CoalescingAdjacentDuplicates<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  v7.n128_f64[0] = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v13 - v8;
  uint64_t v10 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v10 + 16))(a2, v2, a1, v7);
  CoalescingAdjacentDuplicates.startIndex.getter();
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(v2, a1);
  swift_getWitnessTable();
  uint64_t v11 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v6 + 32))(a2 + *(int *)(v11 + 36), v9, AssociatedTypeWitness);
}

uint64_t protocol witness for Sequence.underestimatedCount.getter in conformance CoalescingAdjacentDuplicates<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t protocol witness for Sequence._copyToContiguousArray() in conformance CoalescingAdjacentDuplicates<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184380](a1, WitnessTable);
}

uint64_t CoalescingAdjacentDuplicates<>.index(before:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a4, a1, AssociatedTypeWitness);

  return CoalescingAdjacentDuplicates<>.formIndex(before:)(a4, a2, a3);
}

uint64_t CoalescingAdjacentDuplicates<>.formIndex(before:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v63 = a2;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v67 = *(void (**)(char *, uint64_t))(v7 - 8);
  MEMORY[0x1F4188790](a1);
  long long v56 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = *(void *)(v9 + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v64 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v59 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v45 - v13;
  uint64_t v15 = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v53 = (char *)&v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v57 = a3;
  dispatch thunk of BidirectionalCollection.formIndex(before:)();
  uint64_t v21 = v7;
  uint64_t v22 = v46;
  unsigned __int8 v23 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
  long long v24 = *(void (**)(char *))(v16 + 16);
  uint64_t v61 = v20;
  uint64_t v62 = v15;
  uint64_t v52 = v24;
  v24(v20);
  v23(v68, 0);
  uint64_t v26 = v64 + 16;
  uint64_t v25 = *(void (**)(char *, char *, uint64_t))(v64 + 16);
  long long v48 = a1;
  uint64_t v47 = v25;
  v25(v14, a1, AssociatedTypeWitness);
  uint64_t v58 = *(void *)(v63 + 24);
  uint64_t v27 = v22;
  uint64_t v64 = v26;
  int v28 = (void (**)(char *, uint64_t))(v26 - 8);
  unint64_t v50 = (void (**)(char *, uint64_t, uint64_t))((char *)v67 + 16);
  unint64_t v49 = (void (**)(char *, uint64_t))((char *)v67 + 8);
  uint64_t v54 = v16 + 16;
  uint64_t v55 = AssociatedTypeWitness;
  uint64_t v60 = (void (**)(char *, uint64_t))(v16 + 8);
  long long v51 = (void (**)(char *, uint64_t))(v26 - 8);
  while (1)
  {
    uint64_t v29 = v59;
    dispatch thunk of Collection.startIndex.getter();
    swift_getAssociatedConformanceWitness();
    char v30 = dispatch thunk of static Equatable.== infix(_:_:)();
    uint64_t v31 = *v28;
    (*v28)(v29, AssociatedTypeWitness);
    if (v30) {
      break;
    }
    uint64_t v32 = v27;
    uint64_t v67 = v31;
    uint64_t v33 = *v50;
    uint64_t v34 = v56;
    (*v50)(v56, v4, v21);
    dispatch thunk of BidirectionalCollection.formIndex(before:)();
    char v35 = *v49;
    (*v49)(v34, v21);
    unsigned int v36 = (uint64_t (**)(char *, char *))(v4 + *(int *)(v63 + 36));
    uint64_t v37 = *v36;
    uint64_t v65 = v36[1];
    long long v66 = v37;
    v33(v34, v4, v21);
    uint64_t v27 = v32;
    int v38 = (void (*)(unsigned char *, void))dispatch thunk of Collection.subscript.read();
    uint64_t v39 = v53;
    uint64_t v40 = v62;
    v52(v53);
    v38(v68, 0);
    int v28 = v51;
    v35(v34, v21);
    char v41 = v66(v61, v39);
    uint64_t AssociatedTypeWitness = v55;
    LOBYTE(v34) = v41;
    unsigned int v42 = v39;
    uint64_t v31 = v67;
    (*v60)(v42, v40);
    if ((v34 & 1) == 0) {
      break;
    }
    unsigned int v43 = v48;
    v31(v48, AssociatedTypeWitness);
    v47(v43, v14, AssociatedTypeWitness);
  }
  v31(v14, AssociatedTypeWitness);
  return ((uint64_t (*)(char *, uint64_t))*v60)(v61, v62);
}

uint64_t protocol witness for BidirectionalCollection.index(before:) in conformance <> CoalescingAdjacentDuplicates<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X8>)
{
  return CoalescingAdjacentDuplicates<>.index(before:)(a1, a2, *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for BidirectionalCollection.formIndex(before:) in conformance <> CoalescingAdjacentDuplicates<A>(char *a1, uint64_t a2, uint64_t a3)
{
  return CoalescingAdjacentDuplicates<>.formIndex(before:)(a1, a2, *(void *)(a3 - 8));
}

uint64_t protocol witness for BidirectionalCollection.index(_:offsetBy:limitedBy:) in conformance <> CoalescingAdjacentDuplicates<A>()
{
  return MEMORY[0x1F41836E8]();
}

uint64_t base witness table accessor for Sequence in CoalescingAdjacentDuplicates<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Collection.Index : Comparable in CoalescingAdjacentDuplicates<A>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t getEnumTagSinglePayload for CoalescingAdjacentDuplicates(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C50D60);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for CoalescingAdjacentDuplicates(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187C50F54);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for CoalescingAdjacentDuplicates()
{
  return __swift_instantiateGenericMetadata();
}

void CircularGaugeStyle.init()()
{
}

void CircularGaugeStyle.init(tint:)()
{
}

{
  swift_bridgeObjectRelease();
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void CircularGaugeStyle.makeBody(configuration:)()
{
}

void ComplicationCircularGaugeStyle.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t ComplicationCircularGaugeStyle.init(tint:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Color>();
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_18834BB80;
  *(void *)(v4 + 32) = a1;
  uint64_t v6 = v4;
  specialized Array._endMutation()();
  uint64_t result = MEMORY[0x18C114170](v6);
  *a2 = result;
  return result;
}

uint64_t ComplicationCircularGaugeStyle.init(tint:)@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t ComplicationCircularGaugeStyle.makeBody(configuration:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  unsigned __int8 v6 = *((unsigned char *)a1 + 10);
  uint64_t v7 = *v2;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(_WORD *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = v7;
  return swift_bridgeObjectRetain();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in CircularGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for GaugeStyle.Body : View in ComplicationCircularGaugeStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for GaugeStyle.makeBody(configuration:) in conformance ComplicationCircularGaugeStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  char v4 = *((unsigned char *)a1 + 8);
  char v5 = *((unsigned char *)a1 + 9);
  unsigned __int8 v6 = *((unsigned char *)a1 + 10);
  uint64_t v7 = *v2;
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v4;
  *(unsigned char *)(a2 + 9) = v5;
  *(_WORD *)(a2 + 10) = v6;
  *(void *)(a2 + 16) = v7;
  return swift_bridgeObjectRetain();
}

void *initializeBufferWithCopyOfBuffer for CircularGaugeStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for CircularGaugeStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for CircularGaugeStyle(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CircularGaugeStyle()
{
  return &type metadata for CircularGaugeStyle;
}

uint64_t getEnumTagSinglePayload for CircularGaugeStyle(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CircularGaugeStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComplicationCircularGaugeStyle()
{
  return &type metadata for ComplicationCircularGaugeStyle;
}

void protocol witness for View.body.getter in conformance _TextFieldStyleLabel()
{
}

uint64_t dispatch thunk of TextFieldStyle._body(configuration:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

uint64_t sub_187C51318()
{
  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for ResolvedTextFieldStyle(uint64_t a1, uint64_t *a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = v4;
  int v6 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = *a2;
  *(void *)a1 = *a2;
  if ((v6 & 0x20000) != 0)
  {
    a1 = v7 + ((v6 + 16) & ~(unint64_t)v6);
    swift_retain();
  }
  else
  {
    uint64_t v46 = v5;
    uint64_t v8 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v8;
    *(void *)(a1 + 24) = a2[3];
    *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
    *(unsigned char *)(a1 + 33) = *((unsigned char *)a2 + 33);
    uint64_t v9 = a2[8];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    if (v9)
    {
      uint64_t v10 = a2[5];
      uint64_t v11 = a2[6];
      char v12 = *((unsigned char *)a2 + 56);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 40) = v10;
      *(void *)(a1 + 48) = v11;
      *(unsigned char *)(a1 + 56) = v12;
      *(void *)(a1 + 64) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 56) = v13;
    }
    uint64_t v14 = a2[9];
    uint64_t v15 = a2[10];
    uint64_t v16 = a2[11];
    uint64_t v17 = a2[12];
    uint64_t v18 = a2[13];
    uint64_t v19 = a2[14];
    uint64_t v21 = a2[15];
    uint64_t v20 = a2[16];
    uint64_t v38 = a2[17];
    uint64_t v39 = a2[18];
    uint64_t v40 = a2[19];
    uint64_t v41 = a2[20];
    uint64_t v42 = a2[21];
    int v43 = *((_DWORD *)a2 + 44);
    char v44 = *((unsigned char *)a2 + 180);
    outlined copy of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v21, v20, v38, v39, v40, v41, v42, v43, v44);
    *(void *)(a1 + 72) = v14;
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = v16;
    *(void *)(a1 + 96) = v17;
    *(void *)(a1 + 104) = v18;
    *(void *)(a1 + 112) = v19;
    *(void *)(a1 + 120) = v21;
    *(void *)(a1 + 128) = v20;
    *(void *)(a1 + 136) = v38;
    *(void *)(a1 + 144) = v39;
    *(void *)(a1 + 152) = v40;
    *(void *)(a1 + 160) = v41;
    *(void *)(a1 + 168) = v42;
    *(_DWORD *)(a1 + 176) = v43;
    *(unsigned char *)(a1 + 180) = v44;
    uint64_t v22 = *(int *)(v46 + 56);
    unsigned __int8 v23 = (void *)(a1 + v22);
    long long v24 = (uint64_t *)((char *)a2 + v22);
    type metadata accessor for Binding<TextSelection?>(0);
    uint64_t v26 = v25;
    uint64_t v27 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v27 + 48))(v24, 1, v25))
    {
      _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
      memcpy(v23, v24, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v29 = v24[1];
      *unsigned __int8 v23 = *v24;
      v23[1] = v29;
      uint64_t v30 = *(int *)(v26 + 32);
      uint64_t v47 = (char *)v23 + v30;
      uint64_t v31 = (char *)v24 + v30;
      uint64_t v32 = type metadata accessor for TextSelection(0);
      uint64_t v45 = *(void *)(v32 - 8);
      uint64_t v33 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
      swift_retain();
      swift_retain();
      if (v33(v31, 1, v32))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v47, v31, *(void *)(*(void *)(v34 - 8) + 64));
      }
      else
      {
        uint64_t v35 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16))(v47, v31, v36);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v47, v31, *(void *)(*(void *)(v35 - 8) + 64));
        }
        v47[*(int *)(v32 + 20)] = v31[*(int *)(v32 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v45 + 56))(v47, 0, 1, v32);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v23, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t assignWithTake for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(unsigned char *)(a1 + 33) = *(unsigned char *)(a2 + 33);
  if (*(void *)(a1 + 64))
  {
    uint64_t v5 = *(void *)(a2 + 64);
    if (v5)
    {
      char v6 = *(unsigned char *)(a2 + 56);
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void *)(a1 + 48);
      char v9 = *(unsigned char *)(a1 + 56);
      *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
      *(unsigned char *)(a1 + 56) = v6;
      outlined consume of Text.Storage(v7, v8, v9);
      *(void *)(a1 + 64) = v5;
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    outlined destroy of Text(a1 + 40);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v10;
LABEL_6:
  uint64_t v11 = *(void *)(a2 + 168);
  int v12 = *(_DWORD *)(a2 + 176);
  char v13 = *(unsigned char *)(a2 + 180);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(void *)(a1 + 88);
  uint64_t v17 = *(void *)(a1 + 96);
  uint64_t v18 = *(void *)(a1 + 104);
  uint64_t v19 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 120);
  uint64_t v21 = *(void *)(a1 + 128);
  long long v22 = *(_OWORD *)(a1 + 136);
  long long v23 = *(_OWORD *)(a1 + 152);
  uint64_t v24 = *(void *)(a1 + 168);
  int v25 = *(_DWORD *)(a1 + 176);
  char v26 = *(unsigned char *)(a1 + 180);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = v11;
  *(_DWORD *)(a1 + 176) = v12;
  *(unsigned char *)(a1 + 180) = v13;
  outlined consume of StateOrBinding<TextFieldState>(v14, v15, v16, v17, v18, v19, v20, v21, v22, *((uint64_t *)&v22 + 1), v23, *((uint64_t *)&v23 + 1), v24, v25, v26);
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v28 = *(int *)(v27 + 56);
  uint64_t v29 = (char *)(a1 + v28);
  uint64_t v30 = (char *)(a2 + v28);
  type metadata accessor for Binding<TextSelection?>(0);
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  int v35 = v34(v29, 1, v31);
  int v36 = v34(v30, 1, v32);
  if (v35)
  {
    if (!v36)
    {
      uint64_t v37 = *((void *)v30 + 1);
      *(void *)uint64_t v29 = *(void *)v30;
      *((void *)v29 + 1) = v37;
      uint64_t v38 = *(int *)(v32 + 32);
      uint64_t v39 = &v29[v38];
      uint64_t v40 = &v30[v38];
      uint64_t v41 = type metadata accessor for TextSelection(0);
      uint64_t v42 = *(void *)(v41 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
      {
        type metadata accessor for TextSelection?(0);
        memcpy(v39, v40, *(void *)(*(void *)(v43 - 8) + 64));
      }
      else
      {
        uint64_t v58 = type metadata accessor for TextSelection.Indices(0);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v59 - 8) + 32))(v39, v40, v59);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v39, v40, *(void *)(*(void *)(v58 - 8) + 64));
        }
        v39[*(int *)(v41 + 20)] = v40[*(int *)(v41 + 20)];
        (*(void (**)(char *, void, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
      return a1;
    }
    goto LABEL_12;
  }
  if (v36)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v29, (uint64_t (*)(void))type metadata accessor for Binding<TextSelection?>);
LABEL_12:
    _s7SwiftUI7BindingVyAA13TextSelectionVSgGMaTm_0(0, &lazy cache variable for type metadata for Binding<TextSelection?>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<TextSelection?>, MEMORY[0x1E4FBB718]);
    size_t v45 = *(void *)(*(void *)(v44 - 8) + 64);
    uint64_t v46 = v29;
    uint64_t v47 = v30;
LABEL_13:
    memcpy(v46, v47, v45);
    return a1;
  }
  *(void *)uint64_t v29 = *(void *)v30;
  swift_release();
  *((void *)v29 + 1) = *((void *)v30 + 1);
  swift_release();
  uint64_t v48 = *(int *)(v32 + 32);
  unint64_t v49 = &v29[v48];
  unint64_t v50 = &v30[v48];
  uint64_t v51 = type metadata accessor for TextSelection(0);
  uint64_t v52 = *(void *)(v51 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v49, 1, v51);
  int v55 = v53(v50, 1, v51);
  if (v54)
  {
    if (!v55)
    {
      uint64_t v56 = type metadata accessor for TextSelection.Indices(0);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v57 - 8) + 32))(v49, v50, v57);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v49, v50, *(void *)(*(void *)(v56 - 8) + 64));
      }
      v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
      (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
      return a1;
    }
    goto LABEL_22;
  }
  if (v55)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v49, type metadata accessor for TextSelection);
LABEL_22:
    type metadata accessor for TextSelection?(0);
    size_t v45 = *(void *)(*(void *)(v60 - 8) + 64);
    uint64_t v46 = v49;
    uint64_t v47 = v50;
    goto LABEL_13;
  }
  if (a1 != a2)
  {
    _s7SwiftUI13TextSelectionV7IndicesOWOhTm_2((uint64_t)v49, type metadata accessor for TextSelection.Indices);
    uint64_t v62 = type metadata accessor for TextSelection.Indices(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for RangeSet<String.Index>, MEMORY[0x1E4FBB128], MEMORY[0x1E4FBB138], MEMORY[0x1E4FBC788]);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v49, v50, v63);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v49, v50, *(void *)(*(void *)(v62 - 8) + 64));
    }
  }
  v49[*(int *)(v51 + 20)] = v50[*(int *)(v51 + 20)];
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C51FA0);
}

uint64_t sub_187C51FA0(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for ResolvedTextFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C5204C);
}

uint64_t sub_187C5204C(uint64_t a1, uint64_t a2)
{
  type metadata accessor for TextField<_TextFieldStyleLabel>(0, (unint64_t *)&lazy cache variable for type metadata for TextField<_TextFieldStyleLabel>, (uint64_t)&type metadata for _TextFieldStyleLabel, (uint64_t)&protocol witness table for _TextFieldStyleLabel, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextField);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t getEnumTagSinglePayload for TextFieldStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for TextFieldStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C5245CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedTextFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle(&lazy protocol witness table cache variable for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedTextFieldStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedTextFieldStyle()
{
  return static StyleableView._viewListCount(inputs:)();
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedTextFieldStyle()
{
  return lazy protocol witness table accessor for type ResolvedTextFieldStyle and conformance ResolvedTextFieldStyle(&lazy protocol witness table cache variable for type TextFieldStyleModifier<DefaultTextFieldStyle> and conformance TextFieldStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for TextFieldStyleModifier<DefaultTextFieldStyle>);
}

void type metadata accessor for TextFieldStyleModifier<DefaultTextFieldStyle>()
{
  if (!lazy cache variable for type metadata for TextFieldStyleModifier<DefaultTextFieldStyle>)
  {
    lazy protocol witness table accessor for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle();
    unint64_t v0 = type metadata accessor for TextFieldStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TextFieldStyleModifier<DefaultTextFieldStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle;
  if (!lazy protocol witness table cache variable for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultTextFieldStyle and conformance DefaultTextFieldStyle);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance TextFieldStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance TextFieldStyleModifier<A>()
{
  return static StyleModifier._viewListCount(inputs:body:)();
}

_DWORD *protocol witness for Rule.value.getter in conformance AccessibilityGestureAttachment@<X0>(_DWORD *a1@<X8>)
{
  unint64_t result = (_DWORD *)AGGraphGetValue();
  *a1 = *result;
  return result;
}

void AccessibilityGestureModifier.updatedAttachment(for:nodes:atIndex:)(uint64_t a1, unint64_t a2, unint64_t a3, int a4)
{
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v6 = (id)MEMORY[0x18C117680](a3, a2);
    goto LABEL_5;
  }
  if ((a3 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_16;
  }
  if (*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10) <= a3)
  {
LABEL_16:
    __break(1u);
    return;
  }
  id v6 = *(id *)(a2 + 8 * a3 + 32);
LABEL_5:
  unsigned int v7 = v6;
  AccessibilityNode.visibility.getter(&v8);

  if ((v8 & 4) != 0 || (v8 & 8) != 0 && (v9 & 4) == 0)
  {
    AccessibilityAttachment.init()();
  }
  else
  {
    AccessibilityGestureModifier.initialAttachment(for:)(a2, a4);
  }
}

uint64_t protocol witness for AccessibilityViewModifier.initialAttachment(for:) in conformance AccessibilityGestureModifier(unint64_t a1)
{
  return AccessibilityGestureModifier.initialAttachment(for:)(a1, *v1);
}

void protocol witness for AccessibilityViewModifier.updatedAttachment(for:nodes:atIndex:) in conformance AccessibilityGestureModifier(uint64_t a1, unint64_t a2, unint64_t a3)
{
  AccessibilityGestureModifier.updatedAttachment(for:nodes:atIndex:)(a1, a2, a3, *v3);
}

void protocol witness for ViewModifier.body(content:) in conformance AccessibilityGestureModifier()
{
}

ValueMetadata *type metadata accessor for AccessibilityGestureAttachment()
{
  return &type metadata for AccessibilityGestureAttachment;
}

ValueMetadata *type metadata accessor for AccessibilityGestureModifier()
{
  return &type metadata for AccessibilityGestureModifier;
}

Swift::Void __swiftcall UIKitTabBarItem.updateAccessibility()()
{
  if (*(void *)&v0[OBJC_IVAR____TtC7SwiftUI15UIKitTabBarItem_resolvedAccessibilityLabel]) {
    objc_msgSend(v0, sel_setAccessibilityAttributedLabel_);
  }
  uint64_t v1 = &v0[OBJC_IVAR____TtC7SwiftUI15UIKitTabBarItem_accessibility];
  swift_beginAccess();
  if (*(void *)v1
    && (uint64_t v2 = swift_bridgeObjectRetain(),
        specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)&v13),
        swift_bridgeObjectRelease(),
        (uint64_t v3 = v14) != 0))
  {
    uint64_t v4 = v13;
    unsigned int v5 = v15;
    swift_endAccess();
    if (v5 >= 2)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      id v6 = (void *)MEMORY[0x18C115780](v4, v3);
      swift_bridgeObjectRelease();
      objc_msgSend(v0, sel_setAccessibilityIdentifier_, v6);
    }
  }
  else
  {
    swift_endAccess();
  }
  id v7 = objc_msgSend(v0, sel___view);
  if (v7)
  {
    int v8 = v7;
    id v9 = objc_msgSend(v0, sel_accessibilityAttributedLabel);
    if (v9)
    {
      unsigned int v10 = v9;
      objc_msgSend(v8, sel_setAccessibilityAttributedLabel_, v9);
    }
    id v11 = objc_msgSend(v0, sel_accessibilityIdentifier);
    if (v11)
    {
      unsigned int v12 = v11;
      objc_msgSend(v8, sel_setAccessibilityIdentifier_, v11);
    }
  }
}

uint64_t type metadata accessor for UIKitTabBarItem()
{
  return self;
}

uint64_t sub_187C52C10@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.sceneAllowsSecureDrawing.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187C52C50()
{
  return EnvironmentValues.sceneAllowsSecureDrawing.setter();
}

uint64_t sub_187C52C78()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for SecureDrawingViewGraphFeature()
{
  return &type metadata for SecureDrawingViewGraphFeature;
}

char *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AllowsSecureDrawingKey(char *result, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t v2 = result;
  int v3 = *result;
  if (v3 == 2)
  {
    uint64_t result = (char *)a2((uint64_t *)((char *)&v5 + 1));
    char v4 = BYTE1(v5);
  }
  else if (v3)
  {
    char v4 = 1;
  }
  else
  {
    uint64_t result = (char *)a2(&v5);
    char v4 = v5 & 1;
  }
  *uint64_t v2 = v4;
  return result;
}

ValueMetadata *type metadata accessor for SceneAllowsSecureDrawingKey()
{
  return &type metadata for SceneAllowsSecureDrawingKey;
}

uint64_t key path getter for EnvironmentValues.multimodalListGridBadgeInfos : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multimodalListGridBadgeInfos.getter();
  *a1 = result;
  return result;
}

SwiftUI::MultimodalListStyle __swiftcall MultimodalListStyle.init(layout:iconStyle:)(SwiftUI::MultimodalListStyle::Layout_optional layout, SwiftUI::MultimodalListStyle::IconStyle iconStyle)
{
  char v3 = *(unsigned char *)iconStyle;
  *uint64_t v2 = *(unsigned char *)layout.value;
  v2[1] = v3;
  result.layout = layout;
  return result;
}

SwiftUI::MultimodalListStyle::Layout_optional __swiftcall MultimodalListStyle.Layout.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (!rawValue) {
    char v2 = 0;
  }
  *uint64_t v1 = v2;
  return (SwiftUI::MultimodalListStyle::Layout_optional)rawValue;
}

void *static MultimodalListStyle.Layout.allCases.getter()
{
  return &outlined read-only object #0 of static MultimodalListStyle.Layout.allCases.getter;
}

uint64_t MultimodalListStyle.Layout.rawValue.getter()
{
  return *v0;
}

void *protocol witness for RawRepresentable.init(rawValue:) in conformance MultimodalListStyle.Layout@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

void protocol witness for RawRepresentable.rawValue.getter in conformance MultimodalListStyle.Layout(void *a1@<X8>)
{
  *a1 = *v1;
}

void protocol witness for static CaseIterable.allCases.getter in conformance MultimodalListStyle.Layout(void *a1@<X8>)
{
  *a1 = &outlined read-only object #0 of protocol witness for static CaseIterable.allCases.getter in conformance MultimodalListStyle.Layout;
}

BOOL static MultimodalListStyle.IconStyle.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void MultimodalListStyle.IconStyle.hash(into:)()
{
  Hasher._combine(_:)(*v0);
}

Swift::Int MultimodalListStyle.IconStyle.hashValue.getter()
{
  Swift::UInt v1 = *v0;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

uint64_t static MultimodalListStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

uint64_t key path getter for EnvironmentValues.multimodalListLayout : EnvironmentValues@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<MultimodalListLayoutKey>, (uint64_t)&type metadata for MultimodalListLayoutKey, (uint64_t)&protocol witness table for MultimodalListLayoutKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<MultimodalListLayoutKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.multimodalListLayout : EnvironmentValues(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.multimodalListLayout.setter((uint64_t)&v2);
}

uint64_t sub_187C533B0(char *a1)
{
  char v2 = *a1;
  return EnvironmentValues.multimodalListLayout.setter((uint64_t)&v2);
}

uint64_t type metadata accessor for MultimodalListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>;
  if (!lazy protocol witness table cache variable for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>)
  {
    type metadata accessor for _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>>();
    lazy protocol witness table accessor for type Root and conformance Root();
    lazy protocol witness table accessor for type ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _VariadicView.Tree<Root, ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>> and conformance <> _VariadicView.Tree<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Root and conformance Root()
{
  unint64_t result = lazy protocol witness table cache variable for type Root and conformance Root;
  if (!lazy protocol witness table cache variable for type Root and conformance Root)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Root and conformance Root);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type Root and conformance Root;
  if (!lazy protocol witness table cache variable for type Root and conformance Root)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Root and conformance Root);
  }
  return result;
}

uint64_t MultimodalListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t closure #1 in MultimodalListStyle.Body.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  v15[0] = &type metadata for MultimodalListStyle;
  v15[1] = a1;
  _OWORD v15[2] = &protocol witness table for MultimodalListStyle;
  v15[3] = a2;
  uint64_t v4 = type metadata accessor for _ListValue();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  unsigned int v10 = (char *)v15 - v9;
  MultimodalListStyle.Body.base.getter((uint64_t)v15 - v9);
  id v11 = *(void (**)(char *, uint64_t))(v5 + 8);
  v11(v10, v4);
  uint64_t KeyPath = swift_getKeyPath();
  MultimodalListStyle.Body.base.getter((uint64_t)v7);
  char v13 = v7[1];
  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v7, v4);
  *(void *)a3 = KeyPath;
  *(unsigned char *)(a3 + 8) = v13;
  return result;
}

uint64_t EnvironmentValues.multimodalListIconStyle.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.multimodalListIconStyle.setter()
{
  type metadata accessor for StyleContextWriter<MultimodalListContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<IconStyleKey>, (uint64_t)&type metadata for IconStyleKey, (uint64_t)&protocol witness table for IconStyleKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<IconStyleKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance MultimodalListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return MultimodalListStyle.Body.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

__n128 GridScrollViewContent.body.getter@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = (uint64_t)v1;
  type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridItem>, (uint64_t)&type metadata for GridItem, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_18834BB80;
  long long v4 = v1[9];
  long long v96 = v1[8];
  v97[0] = v4;
  *(_OWORD *)((char *)v97 + 9) = *(_OWORD *)((char *)v1 + 153);
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v96, (void (*)(void, void))outlined copy of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined copy of Environment<Bool>.Content);
  double v5 = specialized ScaledClarityUIMetric.wrappedValue.getter();
  outlined retain of ScaledClarityUIMetric<CGFloat>((uint64_t)&v96, (void (*)(void, void))outlined consume of Environment<Bool>.Content, (void (*)(uint64_t, uint64_t))outlined consume of Environment<Bool>.Content);
  if (one-time initialization token for gridCellSpacing != -1) {
    swift_once();
  }
  uint64_t v6 = static ClarityUIMetrics.gridCellSpacing;
  uint64_t v7 = static Alignment.top.getter();
  *(double *)(v3 + 32) = v5;
  *(void *)(v3 + 40) = 0x7FF0000000000000;
  *(unsigned char *)(v3 + 48) = 2;
  *(void *)(v3 + 56) = v6;
  *(unsigned char *)(v3 + 64) = 0;
  *(void *)(v3 + 72) = v7;
  *(void *)(v3 + 80) = v8;
  *(unsigned char *)(v3 + 88) = 0;
  uint64_t v9 = static HorizontalAlignment.center.getter();
  outlined init with copy of _VariadicView_Children(v2, (uint64_t)&v73);
  unint64_t v69 = v3;
  *(void *)&long long v70 = v9;
  *((void *)&v70 + 1) = v6;
  LOBYTE(v71) = 0;
  int v72 = 0;
  lazy protocol witness table accessor for type MultimodalListStyleGridContentCoordinateSpace and conformance MultimodalListStyleGridContentCoordinateSpace();
  AnyHashable.init<A>(_:)();
  char v68 = 0;
  outlined init with copy of NamedCoordinateSpace((uint64_t)v67, (uint64_t)v91 + 8);
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v69, (uint64_t)&v86, (uint64_t (*)(void))type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
  outlined destroy of NamedCoordinateSpace((uint64_t)v67);
  outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v69, (uint64_t (*)(void))type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
  char v10 = static Edge.Set.horizontal.getter();
  unsigned int v11 = *(_DWORD *)(v2 + 60);
  unsigned int v12 = *(_DWORD *)(v2 + 64);
  unsigned int v13 = *(_DWORD *)(v2 + 68);
  unsigned int v14 = *(_DWORD *)(v2 + 72);
  unsigned int v15 = *(_DWORD *)(v2 + 76);
  int v17 = *(_DWORD *)(v2 + 80);
  int v16 = *(_DWORD *)(v2 + 84);
  int v61 = *(_DWORD *)(v2 + 88);
  char v63 = v10;
  int v57 = *(_DWORD *)(v2 + 96);
  int v59 = *(_DWORD *)(v2 + 92);
  int v54 = *(_DWORD *)(v2 + 104);
  int v55 = *(_DWORD *)(v2 + 100);
  LODWORD(v69) = *(_DWORD *)(v2 + 56);
  LODWORD(v6) = v69;
  HIDWORD(v69) = v11;
  *(void *)&long long v70 = __PAIR64__(v13, v12);
  *((void *)&v70 + 1) = __PAIR64__(v15, v14);
  int v71 = v17;
  int v72 = v16;
  int v73 = v61;
  int v74 = v59;
  int v75 = v57;
  int v76 = v55;
  int v77 = v54;
  GeometryProxy.size.getter();
  double v19 = v18;
  unint64_t v69 = __PAIR64__(v11, v6);
  *(void *)&long long v70 = __PAIR64__(v13, v12);
  *((void *)&v70 + 1) = __PAIR64__(v15, v14);
  int v71 = v17;
  int v72 = v16;
  int v73 = v61;
  int v74 = v59;
  int v75 = v57;
  int v76 = v55;
  int v77 = v54;
  GeometryProxy.size.getter();
  if (v20 >= v19)
  {
    if (one-time initialization token for gridHorizontalPaddingPortrait == -1) {
      goto LABEL_7;
    }
    goto LABEL_15;
  }
  if (one-time initialization token for gridHorizontalPaddingLandscape != -1) {
LABEL_15:
  }
    swift_once();
LABEL_7:
  EdgeInsets.init(_all:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v86, (uint64_t)&v69, (uint64_t (*)(void))type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>);
  char v78 = v63;
  uint64_t v79 = v22;
  uint64_t v80 = v24;
  uint64_t v81 = v26;
  uint64_t v82 = v28;
  char v83 = 0;
  outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v86, (uint64_t (*)(void))type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>);
  unsigned int v30 = *(_DWORD *)(v2 + 60);
  unsigned int v31 = *(_DWORD *)(v2 + 64);
  unsigned int v32 = *(_DWORD *)(v2 + 68);
  unsigned int v33 = *(_DWORD *)(v2 + 72);
  unsigned int v34 = *(_DWORD *)(v2 + 76);
  unsigned int v35 = *(_DWORD *)(v2 + 80);
  unsigned int v36 = *(_DWORD *)(v2 + 84);
  unsigned int v62 = *(_DWORD *)(v2 + 92);
  unsigned int v64 = *(_DWORD *)(v2 + 88);
  unsigned int v58 = *(_DWORD *)(v2 + 100);
  unsigned int v60 = *(_DWORD *)(v2 + 96);
  unsigned __int32 v56 = *(_DWORD *)(v2 + 104);
  LODWORD(v86) = *(_DWORD *)(v2 + 56);
  unsigned int v29 = v86;
  *(void *)((char *)&v86 + 4) = __PAIR64__(v31, v30);
  HIDWORD(v86) = v32;
  *(void *)&long long v87 = __PAIR64__(v34, v33);
  *((void *)&v87 + 1) = __PAIR64__(v36, v35);
  *(void *)&long long v88 = __PAIR64__(v62, v64);
  *((void *)&v88 + 1) = __PAIR64__(v58, v60);
  v89.n128_u32[0] = v56;
  GeometryProxy.size.getter();
  double v38 = v37;
  *(void *)&long long v86 = __PAIR64__(v30, v29);
  *((void *)&v86 + 1) = __PAIR64__(v32, v31);
  *(void *)&long long v87 = __PAIR64__(v34, v33);
  *((void *)&v87 + 1) = __PAIR64__(v36, v35);
  *(void *)&long long v88 = __PAIR64__(v62, v64);
  *((void *)&v88 + 1) = __PAIR64__(v58, v60);
  v89.n128_u32[0] = v56;
  GeometryProxy.size.getter();
  if (v39 >= v38)
  {
    if (one-time initialization token for gridHorizontalPaddingPortrait != -1) {
      swift_once();
    }
    uint64_t v40 = &static ClarityUIMetrics.gridHorizontalPaddingPortrait;
  }
  else
  {
    if (one-time initialization token for gridHorizontalPaddingLandscape != -1) {
      swift_once();
    }
    uint64_t v40 = &static ClarityUIMetrics.gridHorizontalPaddingLandscape;
  }
  uint64_t v41 = *v40;
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v69, (uint64_t)&v86, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>);
  *((void *)&v92 + 1) = v41;
  LOBYTE(v93) = 0;
  outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v69, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>);
  uint64_t v42 = *(void *)(v2 + 120);
  v67[0] = *(void *)(v2 + 112);
  v67[1] = v42;
  type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(0, &lazy cache variable for type metadata for State<[MultimodalBadgeInfo]>, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  unint64_t v43 = v69;
  long long v65 = v70;
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v86, (uint64_t)&v69, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  unint64_t v84 = v43;
  long long v85 = v65;
  outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v86, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v45 = *(void *)(v2 + 120);
  *(void *)&long long v86 = *(void *)(v2 + 112);
  *((void *)&v86 + 1) = v45;
  State.wrappedValue.getter();
  uint64_t v46 = v67[0];
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v69, (uint64_t)&v86, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>);
  *(void *)&long long v95 = KeyPath;
  *((void *)&v95 + 1) = v46;
  outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)&v69, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>);
  long long v47 = v94;
  *(_OWORD *)(a1 + 192) = v93;
  *(_OWORD *)(a1 + 208) = v47;
  *(_OWORD *)(a1 + 224) = v95;
  long long v48 = v91[4];
  *(_OWORD *)(a1 + 128) = v91[3];
  *(_OWORD *)(a1 + 144) = v48;
  long long v49 = v92;
  *(_OWORD *)(a1 + 160) = v91[5];
  *(_OWORD *)(a1 + 176) = v49;
  long long v50 = v91[0];
  *(_OWORD *)(a1 + 64) = v90;
  *(_OWORD *)(a1 + 80) = v50;
  long long v51 = v91[2];
  *(_OWORD *)(a1 + 96) = v91[1];
  *(_OWORD *)(a1 + 112) = v51;
  long long v52 = v87;
  *(_OWORD *)a1 = v86;
  *(_OWORD *)(a1 + 16) = v52;
  __n128 result = v89;
  *(_OWORD *)(a1 + 32) = v88;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t MultimodalListGridLabelStyle.init()@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = result;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

double MultimodalListGridLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = static HorizontalAlignment.center.getter();
  uint64_t v8 = static HorizontalAlignment.center.getter();
  if (one-time initialization token for gridIconToTextSpacing != -1) {
    swift_once();
  }
  uint64_t v9 = static ClarityUIMetrics.gridIconToTextSpacing;
  v16[0] = v4;
  char v22 = v6;
  closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(v3, v4, v5, v6, (uint64_t)v16);
  char v10 = v16[0];
  double result = v17;
  uint64_t v12 = v20;
  char v13 = v21;
  long long v15 = v18;
  long long v14 = v19;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v8;
  *(void *)(a1 + 32) = v9;
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 48) = v10;
  *(double *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 80) = v14;
  *(void *)(a1 + 96) = v12;
  *(unsigned char *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  return result;
}

double closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  uint64_t v10 = static HorizontalAlignment.center.getter();
  if (one-time initialization token for gridIconToTextSpacing != -1) {
    swift_once();
  }
  uint64_t v11 = static ClarityUIMetrics.gridIconToTextSpacing;
  v18[0] = a2 & 1;
  closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(a1, a2 & 1, a3, a4 & 1, (uint64_t)v18);
  char v12 = v18[0];
  double result = v19;
  uint64_t v14 = v22;
  char v15 = v23;
  long long v17 = v20;
  long long v16 = v21;
  *(void *)a5 = v10;
  *(void *)(a5 + 8) = v11;
  *(unsigned char *)(a5 + 16) = 0;
  *(unsigned char *)(a5 + 24) = v12;
  *(double *)(a5 + 32) = result;
  *(_OWORD *)(a5 + 40) = v17;
  *(_OWORD *)(a5 + 56) = v16;
  *(void *)(a5 + 72) = v14;
  *(unsigned char *)(a5 + 80) = v15;
  *(void *)(a5 + 88) = 0;
  *(unsigned char *)(a5 + 96) = 0;
  return result;
}

uint64_t closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  char v9 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  a4 &= 1u;
  outlined copy of Environment<Bool>.Content(a3, a4);
  outlined copy of Environment<Bool>.Content(a1, v9);
  specialized Environment.wrappedValue.getter(a1, v9, &v17);
  outlined consume of Environment<Bool>.Content(a1, v9);
  outlined consume of Environment<Bool>.Content(a1, v9);
  outlined consume of Environment<Bool>.Content(a3, a4);
  char v10 = v17;
  outlined copy of Environment<Bool>.Content(a1, v9);
  outlined copy of Environment<Bool>.Content(a3, a4);
  outlined copy of Environment<Bool>.Content(a3, a4);
  double v11 = specialized Environment.wrappedValue.getter(a3, a4);
  outlined consume of Environment<Bool>.Content(a3, a4);
  outlined consume of Environment<Bool>.Content(a1, v9);
  outlined consume of Environment<Bool>.Content(a3, a4);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a1;
  *(unsigned char *)(v12 + 24) = v9;
  *(void *)(v12 + 32) = a3;
  *(unsigned char *)(v12 + 40) = a4;
  outlined copy of Environment<Bool>.Content(a1, v9);
  outlined copy of Environment<Bool>.Content(a3, a4);
  if (one-time initialization token for clarityUIGridCellTitle != -1) {
    swift_once();
  }
  uint64_t v13 = static Font.clarityUIGridCellTitle;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  *(unsigned char *)a5 = v10;
  *(double *)(a5 + 8) = v11;
  *(void *)(a5 + 16) = partial apply for closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:);
  *(void *)(a5 + 24) = v12;
  *(void *)(a5 + 32) = KeyPath;
  *(void *)(a5 + 40) = v13;
  *(void *)(a5 + 48) = v15;
  *(unsigned char *)(a5 + 56) = 1;

  return swift_retain();
}

uint64_t closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  int v9 = *(_DWORD *)(a1 + 48);
  uint64_t v19 = a2;
  char v10 = a3 & 1;
  char v20 = a3 & 1;
  uint64_t v21 = a4;
  char v11 = a5 & 1;
  char v22 = a5 & 1;
  long long v12 = *(_OWORD *)(a1 + 16);
  v17[0] = *(_OWORD *)a1;
  v17[1] = v12;
  v17[2] = *(_OWORD *)(a1 + 32);
  int v18 = v9;
  uint64_t v13 = MultimodalListGridLabelStyle.gridIconFont(geom:)();
  uint64_t KeyPath = swift_getKeyPath();
  outlined copy of Environment<Bool>.Content(a2, v10);
  outlined copy of Environment<Bool>.Content(a4, v11);
  outlined copy of Environment<Bool>.Content(a2, v10);
  specialized Environment.wrappedValue.getter(a2, v10, v17);
  outlined consume of Environment<Bool>.Content(a2, v10);
  outlined consume of Environment<Bool>.Content(a2, v10);
  uint64_t result = outlined consume of Environment<Bool>.Content(a4, v11);
  char v16 = v17[0];
  *(void *)a6 = KeyPath;
  *(void *)(a6 + 8) = v13;
  *(unsigned char *)(a6 + 16) = v16;
  return result;
}

uint64_t MultimodalListGridLabelStyle.gridIconFont(geom:)()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  char v4 = *(unsigned char *)(v0 + 24);
  outlined copy of Environment<Bool>.Content(v1, v2);
  outlined copy of Environment<Bool>.Content(v3, v4);
  outlined copy of Environment<Bool>.Content(v1, v2);
  specialized Environment.wrappedValue.getter(v1, v2, &v6);
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<Bool>.Content(v1, v2);
  outlined consume of Environment<Bool>.Content(v3, v4);
  if (v6 == 1)
  {
    GeometryProxy.size.getter();
    if (one-time initialization token for buttonHorizontalPadding != -1) {
      swift_once();
    }
  }
  else
  {
    GeometryProxy.size.getter();
  }
  return static Font.system(size:weight:design:)();
}

double protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalListGridLabelStyle@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  char v6 = *(unsigned char *)(v1 + 24);
  uint64_t v7 = static HorizontalAlignment.center.getter();
  LOBYTE(v18) = v4;
  char v28 = v6;
  closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(v3, v4, v5, v6, (uint64_t)&v18);
  char v8 = v19;
  char v9 = v20;
  double result = v21;
  long long v11 = v23;
  uint64_t v12 = v24;
  char v13 = v25;
  uint64_t v14 = v26;
  char v15 = v27;
  long long v16 = v22;
  long long v17 = v18;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v17;
  *(unsigned char *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 48) = v9;
  *(double *)(a1 + 56) = result;
  *(_OWORD *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = v11;
  *(void *)(a1 + 96) = v12;
  *(unsigned char *)(a1 + 104) = v13;
  *(void *)(a1 + 112) = v14;
  *(unsigned char *)(a1 + 120) = v15;
  return result;
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance GridIconLayout()
{
  return specialized GridIconLayout.sizeThatFits(proposal:subviews:cache:)();
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance GridIconLayout(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  return specialized GridIconLayout.placeSubviews(in:proposal:subviews:cache:)(a1, a2, a3, a4);
}

uint64_t StackScrollViewContent.body.getter@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for stackCellSpacing != -1) {
    swift_once();
  }
  uint64_t v3 = static ClarityUIMetrics.stackCellSpacing;
  uint64_t v4 = static HorizontalAlignment.center.getter();
  outlined init with copy of _VariadicView_Children(v1, (uint64_t)&v19);
  v16[0] = v4;
  v16[1] = v3;
  char v17 = 0;
  int v18 = 0;
  LOBYTE(v4) = static Edge.Set.horizontal.getter();
  StackScrollViewContent.horizontalPadding.getter();
  EdgeInsets.init(_all:)();
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)v16, (uint64_t)v20, (uint64_t (*)(void))type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
  v20[80] = v4;
  uint64_t v21 = v6;
  uint64_t v22 = v8;
  uint64_t v23 = v10;
  uint64_t v24 = v12;
  char v25 = 0;
  outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
  StackScrollViewContent.horizontalPadding.getter();
  uint64_t v14 = v13;
  outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)v20, a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>);
  *(void *)(a1 + 128) = v14;
  *(unsigned char *)(a1 + 136) = 0;
  return outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>((uint64_t)v20, (uint64_t (*)(void))type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StackScrollViewContent()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double closure #1 in MultimodalListStackLabelStyle.makeBody(configuration:)@<D0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5 = a2 & 1;
  outlined copy of Environment<Bool>.Content(a1, a2 & 1);
  specialized Environment.wrappedValue.getter(a1, v5, &v19);
  outlined consume of Environment<Bool>.Content(a1, v5);
  char v6 = v19;
  uint64_t KeyPath = swift_getKeyPath();
  char v18 = 2;
  type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(0, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528]);
  lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
  View.dynamicTypeSize(_:)();
  swift_release();
  uint64_t v7 = v19;
  char v8 = v20;
  uint64_t v9 = v21;
  char v10 = v22;
  outlined copy of Environment<Bool>.Content(a1, v5);
  specialized Environment.wrappedValue.getter(a1, v5, &KeyPath);
  outlined consume of Environment<Bool>.Content(a1, v5);
  char v11 = KeyPath;
  outlined copy of Environment<Bool>.Content(a1, v5);
  specialized Environment.wrappedValue.getter(a1, v5, &v19);
  outlined consume of Environment<Bool>.Content(a1, v5);
  if (v19 != 1)
  {
    if (one-time initialization token for stackCircularIconWidth == -1) {
      goto LABEL_7;
    }
LABEL_8:
    swift_once();
    goto LABEL_7;
  }
  if (one-time initialization token for stackCircularIconWidth != -1) {
    swift_once();
  }
  if (one-time initialization token for buttonHorizontalPadding != -1) {
    goto LABEL_8;
  }
LABEL_7:
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v12 = v19;
  char v13 = v20;
  uint64_t v14 = v21;
  char v15 = v22;
  *(unsigned char *)a3 = v6;
  *(void *)(a3 + 8) = v7;
  *(unsigned char *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v9;
  *(unsigned char *)(a3 + 32) = v10;
  *(unsigned char *)(a3 + 33) = v11;
  *(void *)(a3 + 40) = v12;
  *(unsigned char *)(a3 + 48) = v13;
  *(void *)(a3 + 56) = v14;
  *(unsigned char *)(a3 + 64) = v15;
  double result = *(double *)&v23;
  *(_OWORD *)(a3 + 72) = v23;
  *(void *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 96) = 0;
  return result;
}

__n128 protocol witness for LabelStyle.makeBody(configuration:) in conformance MultimodalListStackLabelStyle@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 24);
  uint64_t v6 = static VerticalAlignment.center.getter();
  if (one-time initialization token for stackIconToTextSpacing != -1) {
    swift_once();
  }
  uint64_t v7 = static ClarityUIMetrics.stackIconToTextSpacing;
  v20[0] = v4;
  char v32 = v5;
  closure #1 in MultimodalListStackLabelStyle.makeBody(configuration:)(v3, v4, (uint64_t)v20);
  unsigned __int8 v8 = v20[0];
  unint64_t v9 = v21;
  unsigned __int8 v10 = v22;
  unint64_t v11 = v23;
  unsigned __int16 v12 = v24;
  unint64_t v13 = v25;
  unsigned __int8 v14 = v26;
  unint64_t v15 = v27;
  unsigned __int8 v16 = v28;
  unint64_t v17 = v30;
  unsigned __int8 v18 = v31;
  __n128 result = v29;
  a1->n128_u64[0] = v6;
  a1->n128_u64[1] = v7;
  a1[1].n128_u8[0] = 0;
  a1[1].n128_u8[8] = v8;
  a1[2].n128_u64[0] = v9;
  a1[2].n128_u8[8] = v10;
  a1[3].n128_u64[0] = v11;
  a1[3].n128_u16[4] = v12;
  a1[4].n128_u64[0] = v13;
  a1[4].n128_u8[8] = v14;
  a1[5].n128_u64[0] = v15;
  a1[5].n128_u8[8] = v16;
  a1[6] = result;
  a1[7].n128_u64[0] = v17;
  a1[7].n128_u8[8] = v18;
  return result;
}

double EnvironmentValues.fontBodyLeading.getter()
{
  lazy protocol witness table accessor for type EnvironmentValues.FontBodyLeadingKey and conformance EnvironmentValues.FontBodyLeadingKey();
  EnvironmentValues.subscript.getter();
  return v1;
}

void protocol witness for static DerivedEnvironmentKey.value(in:) in conformance EnvironmentValues.FontBodyLeadingKey(void *a1@<X8>)
{
  EnvironmentValues.effectiveFont.getter();
  char v2 = (void *)Font.platformFont(in:)();
  swift_release();
  CTFontRef.bodyLeading.getter();
  uint64_t v4 = v3;

  *a1 = v4;
}

uint64_t StackIconLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  int v14 = *v8;
  swift_bridgeObjectRetain();
  if (!LayoutSubviews.endIndex.getter()) {
    return swift_bridgeObjectRelease();
  }
  LayoutSubviews.subscript.getter();
  swift_bridgeObjectRelease();
  if (v14 == 1)
  {
    v16.origin.x = a1;
    v16.origin.y = a2;
    v16.size.width = a3;
    v16.size.height = a4;
    CGRectGetWidth(v16);
    if (one-time initialization token for buttonHorizontalPadding != -1) {
      swift_once();
    }
    v17.origin.x = a1;
    v17.origin.y = a2;
    v17.size.width = a3;
    v17.size.height = a4;
    CGRectGetHeight(v17);
    if (one-time initialization token for buttonVerticalPadding != -1) {
      swift_once();
    }
    v18.origin.x = a1;
    v18.origin.y = a2;
    v18.size.width = a3;
    v18.size.height = a4;
    CGRectGetMidY(v18);
  }
  else
  {
    v19.origin.x = a1;
    v19.origin.y = a2;
    v19.size.width = a3;
    v19.size.height = a4;
    CGRectGetMidY(v19);
    if ((a8 & 1) == 0)
    {
      v20.origin.x = a1;
      v20.origin.y = a2;
      v20.size.width = a3;
      v20.size.height = a4;
      CGRectGetHeight(v20);
    }
  }
  static UnitPoint.leading.getter();
  return LayoutSubview.place(at:anchor:proposal:)();
}

double protocol witness for Layout.sizeThatFits(proposal:subviews:cache:) in conformance StackIconLayout(uint64_t a1, char a2, uint64_t a3, char a4)
{
  return StackIconLayout.sizeThatFits(proposal:subviews:cache:)(a1, a2 & 1, a3, a4 & 1);
}

uint64_t protocol witness for Layout.placeSubviews(in:proposal:subviews:cache:) in conformance StackIconLayout(uint64_t a1, char a2, uint64_t a3, char a4, CGFloat a5, CGFloat a6, CGFloat a7, CGFloat a8)
{
  return StackIconLayout.placeSubviews(in:proposal:subviews:cache:)(a5, a6, a7, a8, a1, a2 & 1, a3, a4 & 1);
}

uint64_t closure #1 in Root.body(children:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  long long v6 = *(_OWORD *)(a1 + 16);
  char v7 = a2 & 1;
  v9[0] = *(_OWORD *)a1;
  v9[1] = v6;
  id v9[2] = *(_OWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  *(_WORD *)(a4 + 176) = 258;
  *(_OWORD *)(a4 + 184) = 0u;
  *(_OWORD *)(a4 + 200) = 0u;
  *(unsigned char *)(a4 + 216) = 2;
  *(void *)(a4 + 248) = 0;
  *(void *)(a4 + 224) = 0;
  *(void *)(a4 + 232) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(a4 + 288) = 0;
  *(_OWORD *)(a4 + 256) = 0u;
  *(_OWORD *)(a4 + 272) = 0u;
  return closure #1 in closure #1 in Root.body(children:)(v7, a3, (uint64_t)v9, a4);
}

uint64_t closure #1 in closure #1 in Root.body(children:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    outlined init with copy of _VariadicView_Children(a2, (uint64_t)v17);
    long long v11 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&unsigned char v18[8] = *(_OWORD *)a3;
    *(_OWORD *)&v18[24] = v11;
    *(_OWORD *)&v18[40] = *(_OWORD *)(a3 + 32);
    *(_DWORD *)&v18[56] = *(_DWORD *)(a3 + 48);
    outlined init with copy of StackScrollViewContent((uint64_t)v17, a4);
    *(unsigned char *)(a4 + 169) = 1;
    return outlined destroy of StackScrollViewContent((uint64_t)v17);
  }
  else
  {
    outlined init with copy of _VariadicView_Children(a2, (uint64_t)v12);
    long long v6 = *(_OWORD *)(a3 + 16);
    *(_OWORD *)&unsigned char v13[8] = *(_OWORD *)a3;
    *(_OWORD *)&v13[24] = v6;
    *(_OWORD *)&v13[40] = *(_OWORD *)(a3 + 32);
    *(_DWORD *)&unsigned char v13[56] = *(_DWORD *)(a3 + 48);
    long long v14 = MEMORY[0x1E4FBC860];
    if (one-time initialization token for defaultGridCellMinWidth != -1) {
      swift_once();
    }
    uint64_t v7 = static ClarityUIMetrics.defaultGridCellMinWidth;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v9 = swift_getKeyPath();
    *(void *)&long long v15 = KeyPath;
    BYTE8(v15) = 0;
    *(void *)CGRect v16 = v9;
    char v16[8] = 0;
    *(void *)&v16[16] = v7;
    v16[24] = 6;
    *(_OWORD *)&unsigned char v18[16] = *(_OWORD *)&v13[16];
    *(_OWORD *)&v18[32] = *(_OWORD *)&v13[32];
    *(_OWORD *)&v18[48] = *(_OWORD *)&v13[48];
    long long v19 = v14;
    v17[0] = v12[0];
    v17[1] = v12[1];
    v17[2] = v12[2];
    *(_OWORD *)CGRect v18 = *(_OWORD *)v13;
    long long v20 = v15;
    v21[0] = *(_OWORD *)v16;
    *(_OWORD *)((char *)v21 + 9) = *(_OWORD *)&v16[9];
    outlined init with copy of GridScrollViewContent((uint64_t)v17, a4);
    *(unsigned char *)(a4 + 169) = 0;
    return outlined destroy of GridScrollViewContent((uint64_t)v17);
  }
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance Root(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type Root and conformance Root();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, v10);
}

uint64_t protocol witness for _VariadicView_ViewRoot.body(children:) in conformance Root@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v4 = v2[1];
  if (*v2 == 2) {
    char v5 = v2[1];
  }
  else {
    char v5 = *v2;
  }
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v11);
  uint64_t v6 = swift_allocObject();
  *(unsigned char *)(v6 + 16) = v5 & 1;
  long long v7 = v11[1];
  *(_OWORD *)(v6 + 24) = v11[0];
  *(_OWORD *)(v6 + 40) = v7;
  *(_OWORD *)(v6 + 56) = v11[2];
  *(void *)(v6 + 72) = v12;
  uint64_t result = static Animation.default.getter();
  uint64_t v9 = result;
  if (one-time initialization token for listTitleBottomPadding != -1) {
    uint64_t result = swift_once();
  }
  uint64_t v10 = static ClarityUIMetrics.listTitleBottomPadding;
  *(void *)a2 = partial apply for closure #1 in Root.body(children:);
  *(void *)(a2 + 8) = v6;
  *(void *)(a2 + 16) = v9;
  *(unsigned char *)(a2 + 24) = v4;
  *(void *)(a2 + 32) = v10;
  *(unsigned char *)(a2 + 40) = 0;
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance GridBadgeInfoEnvironmentKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static GridBadgeInfoEnvironmentKey.defaultValue;

  return swift_bridgeObjectRetain();
}

BOOL protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance GridBadgeInfoEnvironmentKey(uint64_t *a1, uint64_t *a2)
{
  return specialized static Array<A>.== infix(_:_:)(*a1, *a2);
}

uint64_t IconContainerView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>();
  uint64_t v4 = MEMORY[0x1E4F414E0];
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(a1 + 24);
  uint64_t v59 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, v4);
  swift_getWitnessTable();
  uint64_t v42 = type metadata accessor for _OverlayModifier();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v37 - v9;
  type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _ClipEffect<IconShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconShape and conformance IconShape, (uint64_t)&unk_1ED468A90, MEMORY[0x1E4F3F580]);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  CGRect v17 = (char *)&v37 - v16;
  uint64_t v39 = type metadata accessor for _ConditionalContent();
  uint64_t v38 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v41 = (char *)&v37 - v18;
  unsigned int v19 = *(unsigned __int8 *)(v2 + *(int *)(a1 + 36));
  IconContainerView.styledIcon.getter(a1);
  if (v19 > 1)
  {
    uint64_t v25 = lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>);
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v56 = v25;
    uint64_t v57 = WitnessTable;
    uint64_t v27 = swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v7);
    unsigned __int8 v28 = *(void (**)(char *, uint64_t))(v37 + 8);
    v28(v7, v5);
    static ViewBuilder.buildExpression<A>(_:)(v10);
    unint64_t v29 = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
    uint64_t v54 = v27;
    unint64_t v55 = v29;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v7, v11, v5);
    v28(v7, v5);
    v28(v10, v5);
  }
  else
  {
    char v47 = v19;
    uint64_t v20 = lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>);
    uint64_t v21 = swift_getWitnessTable();
    uint64_t v45 = v20;
    uint64_t v46 = v21;
    uint64_t v22 = swift_getWitnessTable();
    lazy protocol witness table accessor for type IconShape and conformance IconShape();
    View.clipShape<A>(_:style:)();
    (*(void (**)(char *, uint64_t))(v37 + 8))(v10, v5);
    unint64_t v23 = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
    uint64_t v43 = v22;
    unint64_t v44 = v23;
    swift_getWitnessTable();
    static ViewBuilder.buildExpression<A>(_:)(v14);
    unsigned __int16 v24 = *(void (**)(char *, uint64_t))(v12 + 8);
    v24(v14, v11);
    static ViewBuilder.buildExpression<A>(_:)(v17);
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v14, v11);
    v24(v14, v11);
    v24(v17, v11);
  }
  uint64_t v30 = lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>);
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v52 = v30;
  uint64_t v53 = v31;
  uint64_t v32 = swift_getWitnessTable();
  unint64_t v33 = lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
  uint64_t v50 = v32;
  unint64_t v51 = v33;
  uint64_t v48 = swift_getWitnessTable();
  uint64_t v49 = v32;
  uint64_t v34 = v39;
  swift_getWitnessTable();
  unsigned int v35 = v41;
  static ViewBuilder.buildExpression<A>(_:)(v41);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v35, v34);
}

uint64_t IconContainerView.styledIcon.getter(uint64_t a1)
{
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v9 - v4;
  __int16 v10 = 256;
  static Color.white.getter();
  uint64_t v6 = *(void *)(a1 + 24);
  View.foregroundColor(_:)();
  swift_release();
  static Alignment.center.getter();
  type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>();
  lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>);
  uint64_t v7 = _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  v9[1] = v6;
  id v9[2] = v7;
  swift_getWitnessTable();
  View.overlay<A>(_:alignment:)();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t protocol witness for Shape.path(in:) in conformance IconShape@<X0>(uint64_t a1@<X8>)
{
  if (!*v1)
  {
    uint64_t result = Circle.path(in:)();
LABEL_5:
    *(_OWORD *)a1 = v4;
    *(_OWORD *)(a1 + 16) = v5;
    *(unsigned char *)(a1 + 32) = v6;
    return result;
  }
  if (*v1 == 1)
  {
    uint64_t result = Rectangle.path(in:)();
    goto LABEL_5;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

void protocol witness for View.body.getter in conformance IconShape(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = *v1;
  *(_WORD *)(a1 + 1) = 256;
}

uint64_t static OnBadgeInfoChange._makeView(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  int v30 = *a1;
  unint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 24);
  unsigned int v8 = *(_DWORD *)(a2 + 28);
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  unsigned int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  unsigned int v13 = *(_DWORD *)(a2 + 56);
  unsigned int v14 = *(_DWORD *)(a2 + 60);
  unsigned int v15 = *(_DWORD *)(a2 + 64);
  unsigned int v16 = *(_DWORD *)(a2 + 68);
  unsigned int v18 = *(_DWORD *)(a2 + 72);
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  int v19 = *(_DWORD *)(a2 + 80);
  unint64_t v61 = v4;
  unsigned int v42 = v7;
  int v43 = v5;
  int v62 = v5;
  uint64_t v63 = v6;
  *(void *)&long long v64 = __PAIR64__(v8, v7);
  unsigned int v40 = v9;
  unsigned int v41 = v8;
  *((void *)&v64 + 1) = __PAIR64__(v10, v9);
  unsigned int v38 = v13;
  unsigned int v39 = v10;
  uint64_t v65 = v11;
  uint64_t v66 = v12;
  *(void *)&long long v67 = __PAIR64__(v14, v13);
  unsigned int v36 = v15;
  unsigned int v37 = v14;
  *((void *)&v67 + 1) = __PAIR64__(v16, v15);
  unsigned int v34 = v18;
  unsigned int v35 = v16;
  unint64_t v68 = __PAIR64__(v17, v18);
  int v32 = v19;
  unsigned int v33 = v17;
  int v69 = v19;
  unint64_t v44 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  unint64_t v52 = v61;
  int v53 = v62;
  *(void *)&v54[4] = v6;
  long long v55 = v64;
  uint64_t v56 = v11;
  uint64_t v57 = v12;
  long long v58 = v67;
  unint64_t v59 = v68;
  int v60 = v69;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  a3(&v49, v20, &v52);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v21 = v49;
  unint64_t v52 = v49;
  int v47 = v50;
  int v53 = v50;
  *(_DWORD *)uint64_t v54 = v51;
  int v45 = v51;
  uint64_t v22 = _ViewOutputs.subscript.getter();
  if ((v22 & 0x100000000) == 0)
  {
    unsigned int v23 = v22;
    LODWORD(v52) = v30;
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(0, &lazy cache variable for type metadata for _GraphValue<OnBadgeInfoChange>, (uint64_t)&unk_1ED424198, MEMORY[0x1E4F3F590]);
    unint64_t v31 = v21;
    unsigned int v24 = _GraphValue.value.getter();
    unint64_t v52 = v44;
    int v53 = v43;
    *(void *)&v54[4] = v6;
    *(void *)&long long v55 = __PAIR64__(v41, v42);
    *((void *)&v55 + 1) = __PAIR64__(v39, v40);
    uint64_t v56 = v11;
    uint64_t v57 = v12;
    *(void *)&long long v58 = __PAIR64__(v37, v38);
    *((void *)&v58 + 1) = __PAIR64__(v35, v36);
    unint64_t v59 = __PAIR64__(v33, v34);
    int v60 = v32;
    int v25 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    int v26 = v53;
    char v27 = v54[0];
    unint64_t v28 = v52;
    unint64_t v52 = __PAIR64__(v23, v24);
    unint64_t v21 = v31;
    int v53 = v25;
    *(void *)uint64_t v54 = v28;
    *(_DWORD *)&v54[8] = v26;
    LOBYTE(v55) = v27;
    DWORD1(v55) = 0;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding();
    Attribute.init<A>(body:value:flags:update:)();
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v47;
  *(_DWORD *)(a4 + 12) = v45;
  return result;
}

void protocol witness for ViewModifier.body(content:) in conformance OnBadgeInfoChange()
{
}

uint64_t *BadgeInfoActionBinding.updateValue()()
{
  int v1 = *(_DWORD *)AGGraphGetValue() >> 1;
  if (v1 != *(_DWORD *)(v0 + 28))
  {
    *(_DWORD *)(v0 + 28) = v1;
    *(void *)(v0 + 16) = 0xFFFFFFFFLL;
    *(unsigned char *)(v0 + 24) = 0;
  }
  type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(0, &lazy cache variable for type metadata for [MultimodalBadgeInfo], (uint64_t)&type metadata for MultimodalBadgeInfo, MEMORY[0x1E4FBB320]);
  uint64_t result = (uint64_t *)AGGraphGetValue();
  if (v3)
  {
    uint64_t v4 = *result;
    swift_bridgeObjectRetain();
    if (UpdateCycleDetector.dispatch(label:isDebug:)())
    {
      AGGraphClearUpdate();
      uint64_t Value = (uint64_t *)AGGraphGetValue();
      uint64_t v6 = *Value;
      uint64_t v7 = Value[1];
      uint64_t v8 = Value[2];
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      AGGraphSetUpdate();
      unsigned int v9 = (void *)swift_allocObject();
      id v9[2] = v6;
      void v9[3] = v7;
      v9[4] = v8;
      v9[5] = v4;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      static Update.enqueueAction(_:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      return (uint64_t *)swift_release();
    }
    else
    {
      return (uint64_t *)swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t implicit closure #1 in BadgeInfoActionBinding.updateValue()()
{
  return 0xD000000000000021;
}

uint64_t closure #2 in BadgeInfoActionBinding.updateValue()()
{
  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout;
  if (!lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout;
  if (!lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type [MultimodalListStyle.Layout] and conformance [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [MultimodalListStyle.Layout] and conformance [A];
  if (!lazy protocol witness table cache variable for type [MultimodalListStyle.Layout] and conformance [A])
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, &lazy cache variable for type metadata for [MultimodalListStyle.Layout], (uint64_t)&type metadata for MultimodalListStyle.Layout, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [MultimodalListStyle.Layout] and conformance [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle;
  if (!lazy protocol witness table cache variable for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalListStyle.IconStyle and conformance MultimodalListStyle.IconStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalListGridLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for MultimodalListStyle(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 65282 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65282 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65282;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65282;
    }
  }
LABEL_17:
  if (*(unsigned __int8 *)a1 <= 2u) {
    int v6 = 2;
  }
  else {
    int v6 = *(unsigned __int8 *)a1;
  }
  int v7 = v6 - 3;
  if (*(unsigned __int8 *)a1 < 2u) {
    int v8 = -1;
  }
  else {
    int v8 = v7;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for MultimodalListStyle(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65282 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65282 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 254;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C566D8);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MultimodalListStyle.Layout(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C567CCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_187C56808()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>);
}

void type metadata accessor for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>, (void (*)(uint64_t))type metadata accessor for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer));
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>>);
    }
  }
}

void type metadata accessor for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)()
{
  if (!lazy cache variable for type metadata for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer))
  {
    type metadata accessor for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer));
    }
  }
}

void type metadata accessor for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (void (*)(uint64_t))type metadata accessor for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>));
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>);
    }
  }
}

void type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TupleView();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  if (!lazy cache variable for type metadata for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>();
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>));
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>)
  {
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<GridIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout, (uint64_t)&unk_1ED416F98, MEMORY[0x1E4F3F598]);
    type metadata accessor for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>();
    lazy protocol witness table accessor for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout;
  if (!lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout;
  if (!lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridIconLayout and conformance GridIconLayout);
  }
  return result;
}

void type metadata accessor for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>)
  {
    type metadata accessor for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>();
    lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>> and conformance IconContainerView<A>, (void (*)(uint64_t))type metadata accessor for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>);
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>);
    }
  }
}

void type metadata accessor for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>()
{
  if (!lazy cache variable for type metadata for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>);
    lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for IconContainerView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v3 = type metadata accessor for ModifiedContent();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t type metadata accessor for IconContainerView()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<GridIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout, (uint64_t)&unk_1ED416F98, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<GridIconLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>);
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata completion function for IconContainerView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for IconContainerView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFD) {
    unsigned int v7 = 253;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = v6 + 1;
  char v10 = 8 * (v6 + 1);
  if ((v6 + 1) <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 >= 0xFD) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + v6);
      if (v15 >= 3) {
        return v15 - 2;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for IconContainerView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFD) {
    unsigned int v8 = 253;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 1;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -1)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 1);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187C573D8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFD)
        {
          a1[v9] = a2 + 2;
        }
        else
        {
          unsigned int v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for GridIconLayout(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[16]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for GridIconLayout(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 2;
    }
  }
  return result;
}

void *type metadata accessor for GridIconLayout()
{
  return &unk_1ED416F98;
}

uint64_t getEnumTagSinglePayload for Root(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *((unsigned __int8 *)a1 + 1);
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Root(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C575F4);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)(result + 1) = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for Root()
{
  return &unk_1ED465EB8;
}

unint64_t instantiation function for generic protocol witness table for Root(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type Root and conformance Root();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in IconContainerView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for GridIconLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type GridIconLayout and conformance GridIconLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for LabelStyle.Body : View in MultimodalListStackLabelStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in Root()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in MultimodalListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C57768()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Root.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Root.body(children:)(a1, *(unsigned char *)(v2 + 16), v2 + 24, a2);
}

uint64_t outlined destroy of StackScrollViewContent(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>)
  {
    uint64_t v1 = MEMORY[0x1E4F41528];
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528]);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Image.Scale> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, v1);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

double specialized GridIconLayout.sizeThatFits(proposal:subviews:cache:)()
{
  uint64_t v1 = type metadata accessor for FloatingPointRoundingRule();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  unsigned int v4 = (char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v5 = *(unsigned __int8 *)v0;
  double v6 = v0[1];
  id v7 = objc_msgSend(self, sel_mainScreen);
  objc_msgSend(v7, sel_bounds);
  CGFloat v9 = v8;
  CGFloat v11 = v10;
  CGFloat v13 = v12;
  CGFloat v15 = v14;

  v29.origin.x = v9;
  v29.origin.y = v11;
  v29.size.width = v13;
  v29.size.height = v15;
  double Width = CGRectGetWidth(v29);
  v30.origin.x = v9;
  v30.origin.y = v11;
  v30.size.width = v13;
  v30.size.height = v15;
  double v17 = CGRectGetWidth(v30);
  v31.origin.x = v9;
  v31.origin.y = v11;
  v31.size.width = v13;
  v31.size.height = v15;
  if (CGRectGetHeight(v31) >= v17)
  {
    if (one-time initialization token for gridHorizontalPaddingPortrait != -1) {
      swift_once();
    }
    unsigned int v18 = &static ClarityUIMetrics.gridHorizontalPaddingPortrait;
  }
  else
  {
    if (one-time initialization token for gridHorizontalPaddingLandscape != -1) {
      swift_once();
    }
    unsigned int v18 = &static ClarityUIMetrics.gridHorizontalPaddingLandscape;
  }
  double v19 = *(double *)v18 + *(double *)v18;
  if (one-time initialization token for gridCellSpacing != -1) {
    swift_once();
  }
  double v20 = Width - v19;
  double v21 = *(double *)&static ClarityUIMetrics.gridCellSpacing;
  if (one-time initialization token for defaultGridCellMinWidth != -1) {
    swift_once();
  }
  double v22 = floor((v20 + v21) / (v21 + *(double *)&static ClarityUIMetrics.defaultGridCellMinWidth));
  double v23 = (v20 - v21 * (v22 + -1.0)) / v22;
  if (one-time initialization token for buttonHorizontalPadding != -1) {
    swift_once();
  }
  double v24 = v23
      - (*(double *)&static ClarityUIMetrics.buttonHorizontalPadding
       + *(double *)&static ClarityUIMetrics.buttonHorizontalPadding);
  double v25 = v24;
  if (v5 == 1)
  {
    if (one-time initialization token for buttonVerticalPadding != -1) {
      swift_once();
    }
    double v25 = v24 + *(double *)&static ClarityUIMetrics.buttonVerticalPadding;
  }
  double v27 = v25;
  double v28 = v24;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))(v4, *MEMORY[0x1E4FBBEA0], v1);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v4, v6);
  specialized FloatingPoint.round(_:toMultipleOf:)((uint64_t)v4, v6);
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  return v28;
}

uint64_t specialized GridIconLayout.placeSubviews(in:proposal:subviews:cache:)(CGFloat a1, CGFloat a2, CGFloat a3, CGFloat a4)
{
  int v9 = *v4;
  swift_bridgeObjectRetain();
  if (!LayoutSubviews.endIndex.getter()) {
    return swift_bridgeObjectRelease();
  }
  LayoutSubviews.subscript.getter();
  swift_bridgeObjectRelease();
  if (v9 == 1)
  {
    v11.origin.x = a1;
    v11.origin.y = a2;
    v11.size.width = a3;
    v11.size.height = a4;
    CGRectGetWidth(v11);
    if (one-time initialization token for buttonHorizontalPadding != -1) {
      swift_once();
    }
    v12.origin.x = a1;
    v12.origin.y = a2;
    v12.size.width = a3;
    v12.size.height = a4;
    CGRectGetHeight(v12);
    if (one-time initialization token for buttonVerticalPadding != -1) {
      swift_once();
    }
  }
  v13.origin.x = a1;
  v13.origin.y = a2;
  v13.size.width = a3;
  v13.size.height = a4;
  CGRectGetMidX(v13);
  static UnitPoint.top.getter();
  return LayoutSubview.place(at:anchor:proposal:)();
}

void type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Rectangle, TintShapeStyle>)
  {
    lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Rectangle, TintShapeStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IconShape and conformance IconShape()
{
  unint64_t result = lazy protocol witness table cache variable for type IconShape and conformance IconShape;
  if (!lazy protocol witness table cache variable for type IconShape and conformance IconShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconShape and conformance IconShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IconShape and conformance IconShape;
  if (!lazy protocol witness table cache variable for type IconShape and conformance IconShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconShape and conformance IconShape);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IconShape and conformance IconShape;
  if (!lazy protocol witness table cache variable for type IconShape and conformance IconShape)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IconShape and conformance IconShape);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ClipEffect<IconShape> and conformance _ClipEffect<A>;
  if (!lazy protocol witness table cache variable for type _ClipEffect<IconShape> and conformance _ClipEffect<A>)
  {
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _ClipEffect<IconShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconShape and conformance IconShape, (uint64_t)&unk_1ED468A90, MEMORY[0x1E4F3F580]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ClipEffect<IconShape> and conformance _ClipEffect<A>);
  }
  return result;
}

uint64_t sub_187C5806C()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 16), *(unsigned char *)(v0 + 24));
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in closure #1 in MultimodalListGridLabelStyle.makeBody(configuration:)(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(void *)(v2 + 32), *(unsigned char *)(v2 + 40), a2);
}

ValueMetadata *type metadata accessor for IconStyleKey()
{
  return &type metadata for IconStyleKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.FontBodyLeadingKey()
{
  return &type metadata for EnvironmentValues.FontBodyLeadingKey;
}

uint64_t assignWithCopy for StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  unsigned int v4 = *(void **)(a2 + 40);
  int v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

__n128 __swift_memcpy108_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[5];
  *(_OWORD *)(a1 + 92) = *(long long *)((char *)a2 + 92);
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t assignWithTake for StackScrollViewContent(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  long long v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for StackScrollViewContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 108)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for StackScrollViewContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 108) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 108) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for StackScrollViewContent()
{
  return &unk_1ED43BA10;
}

uint64_t initializeWithCopy for GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v7;
  uint64_t v8 = *(void *)(a2 + 128);
  char v9 = *(unsigned char *)(a2 + 136);
  id v10 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  outlined copy of Environment<Bool>.Content(v8, v9);
  *(void *)(a1 + 128) = v8;
  *(unsigned char *)(a1 + 136) = v9;
  uint64_t v11 = *(void *)(a2 + 144);
  char v12 = *(unsigned char *)(a2 + 152);
  outlined copy of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 144) = v11;
  *(unsigned char *)(a1 + 152) = v12;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  return a1;
}

uint64_t assignWithCopy for GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_DWORD *)(a1 + 60) = *(_DWORD *)(a2 + 60);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(a2 + 128);
  char v8 = *(unsigned char *)(a2 + 136);
  outlined copy of Environment<Bool>.Content(v7, v8);
  uint64_t v9 = *(void *)(a1 + 128);
  char v10 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = v7;
  *(unsigned char *)(a1 + 136) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  uint64_t v11 = *(void *)(a2 + 144);
  char v12 = *(unsigned char *)(a2 + 152);
  outlined copy of Environment<Bool>.Content(v11, v12);
  uint64_t v13 = *(void *)(a1 + 144);
  char v14 = *(unsigned char *)(a1 + 152);
  *(void *)(a1 + 144) = v11;
  *(unsigned char *)(a1 + 152) = v12;
  outlined consume of Environment<Bool>.Content(v13, v14);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  return a1;
}

__n128 __swift_memcpy169_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_OWORD *)(a1 + 153) = *(long long *)((char *)a2 + 153);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for GridScrollViewContent(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  long long v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  char v7 = *(unsigned char *)(a2 + 136);
  uint64_t v8 = *(void *)(a1 + 128);
  char v9 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(unsigned char *)(a1 + 136) = v7;
  outlined consume of Environment<Bool>.Content(v8, v9);
  char v10 = *(unsigned char *)(a2 + 152);
  uint64_t v11 = *(void *)(a1 + 144);
  char v12 = *(unsigned char *)(a1 + 152);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(unsigned char *)(a1 + 152) = v10;
  outlined consume of Environment<Bool>.Content(v11, v12);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for GridScrollViewContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 169)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GridScrollViewContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 168) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 169) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 169) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for GridScrollViewContent()
{
  return &unk_1ED435020;
}

void *type metadata accessor for StackIconLayout()
{
  return &unk_1ED41BC68;
}

unsigned char *storeEnumTagSinglePayload for MultimodalListStyle.IconStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *__n128 result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C58838);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for IconShape()
{
  return &unk_1ED468A90;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>();
    lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>();
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleBottomPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleBottomPaddingKey, MEMORY[0x1E4F40F90]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>, _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>)
  {
    type metadata accessor for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>();
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _AnimationModifier<MultimodalListStyle.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout, (uint64_t)&type metadata for MultimodalListStyle.Layout, MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>);
    }
  }
}

void type metadata accessor for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>)
  {
    type metadata accessor for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>();
    lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>> and conformance ScrollView<A>, (void (*)(uint64_t))type metadata accessor for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>);
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>);
    }
  }
}

void type metadata accessor for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>()
{
  if (!lazy cache variable for type metadata for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _ConditionalContent<GridScrollViewContent, StackScrollViewContent>, (uint64_t)&unk_1ED435020, (uint64_t)&unk_1ED43BA10, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for ScrollView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _ConditionalContent<GridScrollViewContent, StackScrollViewContent>, (uint64_t)&unk_1ED435020, (uint64_t)&unk_1ED43BA10, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type GridScrollViewContent and conformance GridScrollViewContent();
    lazy protocol witness table accessor for type StackScrollViewContent and conformance StackScrollViewContent();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<GridScrollViewContent, StackScrollViewContent> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type GridScrollViewContent and conformance GridScrollViewContent()
{
  unint64_t result = lazy protocol witness table cache variable for type GridScrollViewContent and conformance GridScrollViewContent;
  if (!lazy protocol witness table cache variable for type GridScrollViewContent and conformance GridScrollViewContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type GridScrollViewContent and conformance GridScrollViewContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StackScrollViewContent and conformance StackScrollViewContent()
{
  unint64_t result = lazy protocol witness table cache variable for type StackScrollViewContent and conformance StackScrollViewContent;
  if (!lazy protocol witness table cache variable for type StackScrollViewContent and conformance StackScrollViewContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackScrollViewContent and conformance StackScrollViewContent);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>>();
    lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>> and conformance GeometryReader<A>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>);
    lazy protocol witness table accessor for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GeometryReader<ScrollView<_ConditionalContent<GridScrollViewContent, StackScrollViewContent>>>, _AnimationModifier<MultimodalListStyle.Layout>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>)
  {
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _AnimationModifier<MultimodalListStyle.Layout>, (uint64_t (*)(void))lazy protocol witness table accessor for type MultimodalListStyle.Layout and conformance MultimodalListStyle.Layout, (uint64_t)&type metadata for MultimodalListStyle.Layout, MEMORY[0x1E4F40370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<MultimodalListStyle.Layout> and conformance _AnimationModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleBottomPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleBottomPaddingKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleBottomPaddingKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187C58E4C()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>);
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>)
  {
    type metadata accessor for TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer));
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer));
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)>>);
    }
  }
}

void type metadata accessor for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer))
  {
    type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, (void (*)(uint64_t))type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>, LabelStyleConfiguration.Title, Spacer));
    }
  }
}

void type metadata accessor for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>)
  {
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<StackIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout, (uint64_t)&unk_1ED41BC68, MEMORY[0x1E4F3F598]);
    type metadata accessor for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>();
    lazy protocol witness table accessor for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>();
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>);
    }
  }
}

void type metadata accessor for _LayoutRoot<GridIconLayout>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout;
  if (!lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout;
  if (!lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StackIconLayout and conformance StackIconLayout);
  }
  return result;
}

void type metadata accessor for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>()
{
  if (!lazy cache variable for type metadata for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for IconContainerView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>)
  {
    type metadata accessor for ModifiedContent<ListStyleContent, _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Image.Scale>, MEMORY[0x1E4F41528]);
    type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>, MEMORY[0x1E4F3FB28], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>();
    lazy protocol witness table accessor for type ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<DynamicTypeSize> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<DynamicTypeSize>, MEMORY[0x1E4F3FB28]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>;
  if (!lazy protocol witness table cache variable for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>)
  {
    type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _LayoutRoot<StackIconLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout, (uint64_t)&unk_1ED41BC68, MEMORY[0x1E4F3F598]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<StackIconLayout> and conformance _LayoutRoot<A>);
  }
  return result;
}

uint64_t sub_187C59368()
{
  type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>();
  uint64_t v0 = MEMORY[0x1E4F414E0];
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_3((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, v0);
  swift_getWitnessTable();
  type metadata accessor for _OverlayModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _LayoutRoot<GridIconLayout>(255, &lazy cache variable for type metadata for _ClipEffect<IconShape>, (uint64_t (*)(void))lazy protocol witness table accessor for type IconShape and conformance IconShape, (uint64_t)&unk_1ED468A90, MEMORY[0x1E4F3F580]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ConditionalContent();
  lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type _ShapeView<Rectangle, TintShapeStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Rectangle, TintShapeStyle>);
  swift_getWitnessTable();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _ClipEffect<IconShape> and conformance _ClipEffect<A>();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in IconShape()
{
  return lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type _ShapeView<IconShape, ForegroundStyle> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<IconShape, ForegroundStyle>);
}

uint64_t lazy protocol witness table accessor for type VStack<TupleView<(VStack<TupleView<(_VariadicView.Tree<_LayoutRoot<GridIconLayout>, GeometryReader<IconContainerView<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Font?>>>>>, ModifiedContent<ModifiedContent<LabelStyleConfiguration.Title, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)>>, Spacer)>> and conformance VStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ShapeView<IconShape, ForegroundStyle>()
{
  if (!lazy cache variable for type metadata for _ShapeView<IconShape, ForegroundStyle>)
  {
    lazy protocol witness table accessor for type IconShape and conformance IconShape();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<IconShape, ForegroundStyle>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for StackIconLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type StackIconLayout and conformance StackIconLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in GridScrollViewContent()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in StackScrollViewContent()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t instantiation function for generic protocol witness table for IconShape(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type IconShape and conformance IconShape();
  unint64_t result = lazy protocol witness table accessor for type IconShape and conformance IconShape();
  *(void *)(a1 + 16) = result;
  return result;
}

void type metadata accessor for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>()
{
  if (!lazy cache variable for type metadata for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListStackContext>, MEMORY[0x1E4F40F58], MEMORY[0x1E4F40F50]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for LazyVStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListStackContext>, MEMORY[0x1E4F40F58], MEMORY[0x1E4F40F50]);
    lazy protocol witness table accessor for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListStackContext>, MEMORY[0x1E4F40F58], MEMORY[0x1E4F40F50], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListStackContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, MEMORY[0x1E4F40F90]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

uint64_t outlined retain of ScaledClarityUIMetric<CGFloat>(uint64_t a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 24);
  a2(*(void *)a1, *(unsigned __int8 *)(a1 + 8));
  a3(v5, v6);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListGridContext>, MEMORY[0x1E4F40EA8], MEMORY[0x1E4F40EA0]);
    lazy protocol witness table accessor for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListGridContext>, MEMORY[0x1E4F40EA8], MEMORY[0x1E4F40EA0], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<MultimodalListGridContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>(255);
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, MEMORY[0x1E4F40F90]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
    }
  }
}

uint64_t sub_187C59CAC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.multimodalListGridBadgeInfos.getter();
  *a1 = result;
  return result;
}

uint64_t sub_187C59CE8()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  specialized EnvironmentValues.subscript.setter(v0);

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with copy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_VariadicView.Tree<_LayoutRoot<StackIconLayout>, IconContainerView<ModifiedContent<ModifiedContent<LabelStyleConfiguration.Icon, _EnvironmentKeyWritingModifier<Image.Scale>>, _EnvironmentKeyWritingModifier<DynamicTypeSize>>>>, _FrameLayout>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined destroy of LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey>, (uint64_t)&type metadata for GridBadgeInfoEnvironmentKey, (uint64_t)&protocol witness table for GridBadgeInfoEnvironmentKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<GridBadgeInfoEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for GridBadgeInfoEnvironmentKey()
{
  return &type metadata for GridBadgeInfoEnvironmentKey;
}

ValueMetadata *type metadata accessor for MultimodalListStyleGridContentCoordinateSpace()
{
  return &type metadata for MultimodalListStyleGridContentCoordinateSpace;
}

uint64_t destroy for OnBadgeInfoChange()
{
  swift_release();
  swift_release();

  return swift_bridgeObjectRelease();
}

void *initializeBufferWithCopyOfBuffer for OnBadgeInfoChange(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for OnBadgeInfoChange(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OnBadgeInfoChange(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

void *type metadata accessor for OnBadgeInfoChange()
{
  return &unk_1ED424198;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>();
    lazy protocol witness table accessor for type ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>);
    lazy protocol witness table accessor for type _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey> and conformance _PreferenceWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>)
  {
    type metadata accessor for ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>(255);
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, &lazy cache variable for type metadata for _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>, (uint64_t)&type metadata for MultimodalNavigationTitleHorizontalPaddingKey, (uint64_t)&protocol witness table for MultimodalNavigationTitleHorizontalPaddingKey, MEMORY[0x1E4F40F90]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<LazyVStack<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListStackContext>>>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]> and conformance _EnvironmentKeyWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>, CoordinateSpaceNameModifier>, _PaddingLayout>, _PreferenceWritingModifier<MultimodalNavigationTitleHorizontalPaddingKey>>, OnBadgeInfoChange>, _EnvironmentKeyWritingModifier<[MultimodalBadgeInfo]>>);
    }
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in OnBadgeInfoChange()
{
  return &protocol witness table for OnBadgeInfoChange;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MultimodalListStyle.IconStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding()
{
  unint64_t result = lazy protocol witness table cache variable for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding;
  if (!lazy protocol witness table cache variable for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BadgeInfoActionBinding and conformance BadgeInfoActionBinding);
  }
  return result;
}

uint64_t sub_187C5A654()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in BadgeInfoActionBinding.updateValue()()
{
  return closure #2 in BadgeInfoActionBinding.updateValue()();
}

void *type metadata accessor for BadgeInfoActionBinding()
{
  return &unk_1ED438C80;
}

uint64_t closure #1 in UIHostingConfiguration.background<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for _UIHostingConfigurationBackgroundView();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  char v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  unsigned int v16 = (char *)&v19 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a4, v14);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a4);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  double v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v17)(v16, v9);
}

uint64_t UIHostingConfiguration.minSize(width:height:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16))(a6, v6, a5);
  uint64_t v14 = a6 + *(int *)(a5 + 56);
  *(void *)(v14 + 72) = a1;
  *(unsigned char *)(v14 + 80) = a2 & 1;
  *(void *)(v14 + 88) = a3;
  *(unsigned char *)(v14 + 96) = a4 & 1;
  return result;
}

uint64_t partial apply for closure #1 in UIHostingConfiguration.background<A>(_:)()
{
  return closure #1 in UIHostingConfiguration.background<A>(_:)(v0[8], v0[2], v0[3], v0[4]);
}

uint64_t type metadata accessor for UIHostingContentViewWithoutInteractions()
{
  return swift_getGenericMetadata();
}

uint64_t UIHostingConfiguration.animatedSizeInvalidationDisabled()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v3, a1);
  *(unsigned char *)(a2 + *(int *)(a1 + 56) + 98) = 1;
  return result;
}

uint64_t _UIHostingConfigurationBackgroundView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v21[1] = a2;
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v9 = lazy protocol witness table accessor for type Rectangle and conformance Rectangle();
  uint64_t v10 = *(void *)(a1 + 24);
  _OWORD v21[2] = MEMORY[0x1E4F41830];
  v21[3] = v5;
  v21[4] = v9;
  v21[5] = v10;
  uint64_t v11 = type metadata accessor for _ShapeView();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  unsigned int v18 = (char *)v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, v3, v5, v16);
  _ShapeView.init(shape:style:fillStyle:)();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, v11);
}

void @objc UIHostingBackgroundView.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  UIHostingBackgroundView.bounds.setter(a2, a3, a4, a5);
}

id UIHostingBackgroundView.bounds.setter(double a1, double a2, double a3, double a4)
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  v20.receiver = v4;
  v20.super_class = ObjectType;
  objc_msgSendSuper2(&v20, sel_bounds);
  double v11 = v10;
  double v13 = v12;
  double v15 = v14;
  double v17 = v16;
  v19.receiver = v4;
  v19.super_class = ObjectType;
  objc_msgSendSuper2(&v19, sel_setBounds_, a1, a2, a3, a4);
  return UIHostingBackgroundView.bounds.didset(v11, v13, v15, v17);
}

id UIHostingBackgroundView.bounds.didset(double a1, double a2, double a3, double a4)
{
  v11.receiver = v4;
  v11.super_class = (Class)swift_getObjectType();
  id result = objc_msgSendSuper2(&v11, sel_bounds);
  if (v9 != a3 || v8 != a4)
  {
    *((unsigned char *)_UIHostingView.base.getter() + 219) = 1;
    return (id)swift_release();
  }
  return result;
}

void *UIHostingBackgroundView.__allocating_init(rootView:)(objc_class *a1)
{
  uint64_t v3 = specialized UIHostingBackgroundView.__allocating_init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v1 + 1600) - 8) + 8))(a1);
  return v3;
}

id @objc UIHostingBackgroundView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  return StyleContextSplitViewNavigationController.init(coder:)(a3);
}

void UIHostingContentViewWithoutInteractions.__allocating_init(rootView:)()
{
  id v1 = objc_allocWithZone(v0);
  specialized UIHostingContentView.init(rootView:)();
}

uint64_t sub_187C5B020(uint64_t a1)
{
  type metadata accessor for HostingContentViewRootModifier(255);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v1, v3);
  return a1;
}

uint64_t UIHostingContentView.isInList.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x660));
}

uint64_t UIHostingContentView.isInList.setter(char a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x660);
  uint64_t v3 = *((unsigned __int8 *)v1 + v2);
  *((unsigned char *)v1 + v2) = a1;
  return UIHostingContentView.isInList.didset(v3);
}

void (*UIHostingContentView.configuration.modify(uint64_t **a1))(uint64_t *a1, char a2)
{
  uint64_t v3 = (uint64_t *)malloc(0x58uLL);
  *a1 = v3;
  v3[10] = v1;
  UIHostingContentView.configuration.getter(v3);
  return UIHostingContentView.configuration.modify;
}

void UIHostingContentView.configuration.modify(uint64_t *a1, char a2)
{
  uint64_t v2 = (void *)*a1;
  if (a2)
  {
    outlined init with copy of TableColumnList(*a1, (uint64_t)v2 + 40);
    UIHostingContentView.configuration.setter((uint64_t)v2 + 40);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v2);
  }
  else
  {
    UIHostingContentView.configuration.setter(*a1);
  }

  free(v2);
}

void UIHostingContentView.backgroundHost.setter(uint64_t a1)
{
  uint64_t v2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x678);
  uint64_t v3 = *(void **)((char *)v1 + v2);
  *(void *)((char *)v1 + v2) = a1;
}

__n128 UIHostingContentView.lastObservedSize.getter@<Q0>(__n128 *a1@<X8>)
{
  uint64_t v2 = (__n128 *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x6A0));
  unint64_t v3 = v2[1].n128_u64[0];
  unsigned __int8 v4 = v2[1].n128_u8[8];
  unsigned __int8 v5 = v2[1].n128_u8[9];
  __n128 result = *v2;
  *a1 = *v2;
  a1[1].n128_u64[0] = v3;
  a1[1].n128_u8[8] = v4;
  a1[1].n128_u8[9] = v5;
  return result;
}

__n128 UIHostingContentView.lastObservedSize.setter(__n128 *a1)
{
  unint64_t v2 = a1[1].n128_u64[0];
  unsigned __int8 v3 = a1[1].n128_u8[8];
  unsigned __int8 v4 = a1[1].n128_u8[9];
  unsigned __int8 v5 = (__n128 *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x6A0));
  __n128 result = *a1;
  *unsigned __int8 v5 = *a1;
  v5[1].n128_u64[0] = v2;
  v5[1].n128_u8[8] = v3;
  v5[1].n128_u8[9] = v4;
  return result;
}

uint64_t UIHostingContentView.lastSizeThatFits.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x6A8));
}

uint64_t UIHostingContentView.lastSizeThatFits.setter(uint64_t result, uint64_t a2, char a3)
{
  unsigned __int8 v4 = (char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x6A8);
  *(void *)unsigned __int8 v4 = result;
  *((void *)v4 + 1) = a2;
  v4[16] = a3 & 1;
  return result;
}

uint64_t UIHostingContentView.hostingView<A>(_:didChangePlatformItemList:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *a1 & *MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x650);
  v16[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x640);
  v16[1] = v6;
  uint64_t v7 = type metadata accessor for UIHostingConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  double v10 = (char *)v16 - v9;
  UIHostingContentView._configuration.getter((uint64_t)v16 - v9);
  uint64_t v11 = UIHostingConfiguration.delegate.getter(v7);
  uint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v13 + 40))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t UIHostingContentView.hasBeenVisible.getter()
{
  return *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x6B0));
}

uint64_t UIHostingContentView.hasBeenVisible.setter(uint64_t result)
{
  *((unsigned char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x6B0)) = result;
  return result;
}

uint64_t UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x6B8));
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

uint64_t UIHostingContentView._preferredLeadingSeparatorInset()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  static HorizontalAlignment.listRowSeparatorLeading.getter();
  objc_msgSend(v0, sel_bounds);
  long long v4 = *(_OWORD *)(v1 + 1600);
  long long v5 = *(_OWORD *)(v1 + 1616);
  type metadata accessor for UIHostingContentView();
  swift_getWitnessTable();
  uint64_t result = ViewRendererHost.explicitAlignment(of:at:)();
  if (v3)
  {
    static HorizontalAlignment.leadingText.getter();
    objc_msgSend(v0, sel_bounds, v4, v5);
    return ViewRendererHost.explicitAlignment(of:at:)();
  }
  return result;
}

id UIHostingContentView._preferredTrailingSeparatorInset()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  static HorizontalAlignment.listRowSeparatorTrailing.getter();
  objc_msgSend(v0, sel_bounds);
  long long v4 = *(_OWORD *)(v1 + 1600);
  long long v5 = *(_OWORD *)(v1 + 1616);
  type metadata accessor for UIHostingContentView();
  swift_getWitnessTable();
  id result = (id)ViewRendererHost.explicitAlignment(of:at:)();
  if ((v3 & 1) == 0) {
    return objc_msgSend(v0, sel_bounds, v4, v5);
  }
  return result;
}

id UIHostingContentView._leadingSwipeActionsConfiguration()()
{
  specialized _UIHostingView.viewGraph.getter();
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  swift_retain();
  static Update.dispatchImmediately<A>(_:)();
  swift_release();
  outlined init with take of SwipeActions.Value?((uint64_t)v30, (uint64_t)v31);
  outlined init with take of SwipeActions.Value?((uint64_t)v31, (uint64_t)&v32);
  int v0 = _s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)&v32);
  id result = 0;
  if (v0 != 1)
  {
    __int16 v2 = v32;
    uint64_t v3 = v33;
    __int16 v4 = v34;
    uint64_t v5 = v35;
    uint64_t v6 = v36;
    uint64_t v7 = v37;
    char v8 = v38;
    uint64_t v9 = v39;
    uint64_t v10 = v40;
    uint64_t v11 = v41;
    uint64_t v12 = v45;
    uint64_t v13 = v44;
    uint64_t v14 = v43;
    uint64_t v15 = v42;
    outlined copy of SwipeActions.Configuration?(v32, v33, v34, v35, v36, v37, v38, v39, v40, v41, v42, v43, v44);
    outlined release of SwipeActions.Value?(v31);
    if (v5)
    {
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
      __int16 v16 = v2 & 0x101;
      uint64_t v17 = v3;
      __int16 v18 = v4 & 0x1FF;
      uint64_t v19 = v5;
      uint64_t v20 = v6;
      uint64_t v21 = v7;
      char v22 = v8;
      uint64_t v23 = v9;
      uint64_t v24 = v10;
      uint64_t v25 = v11;
      uint64_t v26 = v15;
      uint64_t v27 = v14;
      uint64_t v28 = v13;
      uint64_t v29 = v12;
      return UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)&v16, (uint64_t)closure #1 in closure #1 in TabItem.swipeActionsConfiguration(for:), 0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t UIHostingContentView._trailingSwipeActionsConfiguration()()
{
  specialized _UIHostingView.viewGraph.getter();
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  swift_retain();
  static Update.dispatchImmediately<A>(_:)();
  swift_release();
  outlined init with take of SwipeActions.Value?((uint64_t)v32, (uint64_t)v33);
  outlined init with take of SwipeActions.Value?((uint64_t)v33, (uint64_t)v34);
  int v1 = _s7SwiftUI12SwipeActionsO5ValueVSgWOg((uint64_t)v34);
  uint64_t result = 0;
  if (v1 != 1)
  {
    uint64_t v15 = v0;
    uint64_t v3 = v38;
    uint64_t v4 = v48;
    uint64_t v13 = v47;
    uint64_t v14 = v46;
    uint64_t v5 = v45;
    uint64_t v16 = v44;
    uint64_t v17 = v41;
    uint64_t v6 = v43;
    uint64_t v7 = v35;
    uint64_t v8 = v36;
    uint64_t v9 = v37;
    uint64_t v10 = v39;
    uint64_t v11 = v40;
    uint64_t v12 = v42;
    outlined copy of SwipeActions.Configuration?(v35, v36, v37, v38, v39, v40, v41, v42, v43, v44, v45, v46, v47);
    outlined release of SwipeActions.Value?(v33);
    if (v3)
    {
      LOWORD(v19) = v7 & 0x101;
      *((void *)&v19 + 1) = v8;
      __int16 v20 = v9 & 0x1FF;
      uint64_t v21 = v3;
      uint64_t v22 = v10;
      uint64_t v23 = v11;
      char v24 = v17;
      uint64_t v25 = v12;
      uint64_t v26 = v6;
      uint64_t v27 = v16;
      uint64_t v28 = v5;
      uint64_t v29 = v14;
      uint64_t v30 = v13;
      uint64_t v31 = v4;
      swift_bridgeObjectRetain();
      outlined copy of Binding<NavigationSplitViewColumn>?(v10, v11);
      outlined copy of Binding<SwipeActionResultToken?>?(v12, v6, v16, v5, v14, v13);
      closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(&v19, v15, &v18);
      outlined consume of SwipeActions.Configuration?(v7, v8, v9, v3, v10, v11, v17, v12, v6, v16, v5, v14, v13);
      outlined consume of SwipeActions.Configuration?(v7, v8, v9, v3, v10, v11, v17, v12, v6, v16, v5, v14, v13);
      return v18;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t closure #1 in UIHostingContentView.isInList.didset()
{
  return swift_release();
}

void @objc UIHostingContentView.bounds.setter(void *a1, double a2, double a3, double a4, double a5)
{
  id v9 = a1;
  UIHostingContentView.bounds.setter(a2, a3, a4, a5);
}

id UIHostingContentView.bounds.setter(double a1, double a2, double a3, double a4)
{
  objc_super v9 = *(objc_super *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x650);
  v20[1] = *(objc_super *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x640);
  _OWORD v20[2] = v9;
  uint64_t v10 = (objc_class *)type metadata accessor for UIHostingContentView();
  v21.receiver = v4;
  v21.super_class = v10;
  objc_msgSendSuper2(&v21, sel_bounds);
  double v12 = v11;
  double v14 = v13;
  double v16 = v15;
  double v18 = v17;
  v20[0].receiver = v4;
  v20[0].super_class = v10;
  -[objc_super setBounds:](v20, sel_setBounds_, a1, a2, a3, a4);
  return UIHostingContentView.bounds.didset(v12, v14, v16, v18);
}

id UIHostingContentView.bounds.didset(double a1, double a2, double a3, double a4)
{
  id result = objc_msgSend(v4, sel_bounds);
  if (v9 != a3 || v8 != a4)
  {
    *((unsigned char *)_UIHostingView.base.getter() + 219) = 1;
    return (id)swift_release();
  }
  return result;
}

id @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._containerBackgroundViewDidChangeHandler.getter, (uint64_t)&block_descriptor_60_0);
}

id @objc UIHostingContentView._defaultListContentConfigurationProvider.getter()
{
  uint64_t v0 = specialized UIHostingContentView._defaultListContentConfigurationProvider.getter();
  if (v0)
  {
    uint64_t v2 = v0;
    v5[4] = v0;
    v5[5] = v1;
    v5[0] = MEMORY[0x1E4F143A8];
    v5[1] = 1107296256;
    void v5[2] = thunk for @escaping @callee_guaranteed () -> (@owned UIDragPreview?);
    v5[3] = &block_descriptor_53;
    uint64_t v3 = _Block_copy(v5);
    outlined copy of AppIntentExecutor?(v2);
    swift_release();
  }
  else
  {
    uint64_t v3 = 0;
  }

  return v3;
}

void @objc UIHostingContentView._defaultListContentConfigurationProvider.setter(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  if (v4)
  {
    uint64_t v5 = v4;
    uint64_t v6 = swift_allocObject();
    *(void *)(v6 + 16) = v5;
    uint64_t v7 = partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased UIListContentConfiguration?);
  }
  else
  {
    uint64_t v7 = 0;
    uint64_t v6 = 0;
  }
  id v8 = a1;
  specialized UIHostingContentView._defaultListContentConfigurationProvider.setter((uint64_t)v7, v6);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
}

void @objc UIHostingContentView._defaultListContentConfigurationMayHaveChanged()(void *a1)
{
  id v1 = a1;
  UIHostingContentView._defaultListContentConfigurationMayHaveChanged()();
}

id @objc UIHostingContentView._popupMenuButtonDidChangeHandler.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._popupMenuButtonDidChangeHandler.getter, (uint64_t)&block_descriptor_47);
}

void @objc UIHostingContentView.init(coder:)(uint64_t a1, uint64_t a2, void *a3)
{
  id v3 = a3;
  specialized UIHostingContentView.init(rootView:)();
}

void UIHostingContentView.__allocating_init(rootView:)()
{
  id v1 = objc_allocWithZone(v0);
  specialized UIHostingContentView.init(rootView:)();
}

uint64_t UIHostingContentView.layoutMarginsDidChange()()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x640);
  long long v7 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x650);
  v8.receiver = v0;
  v8.super_class = (Class)type metadata accessor for UIHostingContentView();
  objc_msgSendSuper2(&v8, sel_layoutMarginsDidChange, v6, v7);
  *((unsigned char *)_UIHostingView.base.getter() + 219) = 1;
  swift_release();
  uint64_t v2 = *(void **)((char *)v0 + *(void *)((*v1 & *v0) + 0x678));
  if (v2)
  {
    id v3 = v2;
    uint64_t v4 = _UIHostingView.base.getter();

    *((unsigned char *)v4 + 219) = 1;
    swift_release();
  }
  return UIHostingContentView.updateHostedViews()();
}

void @objc UIHostingContentView.layoutMarginsDidChange()(void *a1)
{
  id v1 = a1;
  UIHostingContentView.layoutMarginsDidChange()();
}

uint64_t closure #1 in UIHostingContentView.updateViewGraphForDisplay(isHidden:)()
{
  return swift_release();
}

id @objc UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.getter(uint64_t a1, uint64_t a2)
{
  return @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(a1, a2, specialized UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.getter, (uint64_t)&block_descriptor_40_0);
}

id @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.getter(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v5 = a3();
  if (v5)
  {
    uint64_t v7 = v5;
    void v10[4] = v5;
    v10[5] = v6;
    v10[0] = MEMORY[0x1E4F143A8];
    v10[1] = 1107296256;
    void v10[2] = thunk for @escaping @callee_guaranteed () -> ();
    v10[3] = a4;
    objc_super v8 = _Block_copy(v10);
    outlined copy of AppIntentExecutor?(v7);
    swift_release();
  }
  else
  {
    objc_super v8 = 0;
  }

  return v8;
}

void @objc UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.setter(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = _Block_copy(aBlock);
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v4 = partial apply for thunk for @escaping @callee_unowned @convention(block) () -> ();
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = a1;
  UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.setter((uint64_t)v4, v5);
}

double @objc UIHostingContentView._preferredLeadingSeparatorInset()(void *a1)
{
  id v1 = a1;
  UIHostingContentView._preferredLeadingSeparatorInset()();
  double v3 = v2;

  return v3;
}

double @objc UIHostingContentView._preferredTrailingSeparatorInset()(void *a1)
{
  id v1 = a1;
  UIHostingContentView._preferredTrailingSeparatorInset()();
  double v3 = v2;

  return v3;
}

id @objc UIHostingContentView._leadingSwipeActionsConfiguration()(void *a1)
{
  id v1 = a1;
  id v2 = UIHostingContentView._leadingSwipeActionsConfiguration()();

  return v2;
}

id closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()@<X0>(_OWORD *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *a2;
  long long v6 = a1[5];
  v20[4] = a1[4];
  v20[5] = v6;
  v20[6] = a1[6];
  long long v7 = a1[1];
  v20[0] = *a1;
  v20[1] = v7;
  long long v8 = a1[3];
  _OWORD v20[2] = a1[2];
  objc_super v20[3] = v8;
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UISwipeActionsConfiguration);
  long long v9 = a1[5];
  _OWORD v19[4] = a1[4];
  v19[5] = v9;
  v19[6] = a1[6];
  long long v10 = a1[1];
  v19[0] = *a1;
  v19[1] = v10;
  long long v11 = a1[3];
  v19[2] = a1[2];
  v19[3] = v11;
  uint64_t v12 = swift_allocObject();
  swift_unknownObjectWeakInit();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = *(void *)(v5 + 1600);
  *(_OWORD *)(v13 + 24) = *(_OWORD *)(v5 + 1608);
  uint64_t v14 = *(void *)(v5 + 1624);
  long long v15 = a1[2];
  *(_OWORD *)(v13 + 104) = a1[3];
  long long v16 = a1[5];
  *(_OWORD *)(v13 + 120) = a1[4];
  *(_OWORD *)(v13 + 136) = v16;
  *(_OWORD *)(v13 + 152) = a1[6];
  long long v17 = a1[1];
  *(_OWORD *)(v13 + 56) = *a1;
  *(_OWORD *)(v13 + 72) = v17;
  *(void *)(v13 + 40) = v14;
  *(void *)(v13 + 48) = v12;
  *(_OWORD *)(v13 + 88) = v15;
  outlined retain of SwipeActions.Configuration(v20);
  outlined retain of SwipeActions.Configuration(v20);
  id result = UISwipeActionsConfiguration.init(configuration:performDestructiveAction:)((unsigned __int8 *)v19, (uint64_t)partial apply for closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration(), v13);
  *a3 = result;
  return result;
}

void *closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a3 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](v6);
  if (v7)
  {

    _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0(a4 + 56, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for Binding<SwipeActionResultToken?>?);
    _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_0((uint64_t)v9, (uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Binding<SwipeActionResultToken?>?);
    if (v10[1])
    {
      outlined retain of Binding<SwipeActionResultToken?>?(v9, (void (*)(void, void, void, void, void, void, void))outlined copy of Binding<SwipeActionResultToken?>?);
      outlined retain of Binding<SwipeActionResultToken?>?(v9, (void (*)(void, void, void, void, void, void, void))outlined copy of Binding<SwipeActionResultToken?>?);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)a1);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
      outlined retain of Binding<SwipeActionResultToken?>?(v9, (void (*)(void, void, void, void, void, void, void))outlined consume of Binding<SwipeActionResultToken?>?);
      return outlined retain of Binding<SwipeActionResultToken?>?(v9, (void (*)(void, void, void, void, void, void, void))outlined consume of Binding<SwipeActionResultToken?>?);
    }
    uint64_t v7 = 1;
  }
  return (void *)a1(v7);
}

id @objc UIHostingContentView._trailingSwipeActionsConfiguration()(void *a1)
{
  id v1 = a1;
  id v2 = (void *)UIHostingContentView._trailingSwipeActionsConfiguration()();

  return v2;
}

uint64_t UIHostingContentView.__ivar_destroyer()
{
  id v1 = (void *)MEMORY[0x1E4FBC8C8];
  id v2 = (char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x668);
  uint64_t v3 = type metadata accessor for UIHostingConfiguration();
  (*(void (**)(char *, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x670)));

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x680)));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x688)));
  outlined destroy of UIHostingConfigurationStorage((uint64_t)v0 + *(void *)((*v1 & *v0) + 0x690), (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x6B8)));
}

id UIHostingContentView.__deallocating_deinit()
{
  long long v2 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x640);
  long long v3 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x650);
  v4.receiver = v0;
  v4.super_class = (Class)type metadata accessor for UIHostingContentView();
  return objc_msgSendSuper2(&v4, sel_dealloc, v2, v3);
}

uint64_t @objc UIHostingContentView.__ivar_destroyer(void *a1)
{
  long long v2 = (void *)MEMORY[0x1E4FBC8C8];
  long long v3 = (char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a1) + 0x668);
  uint64_t v4 = type metadata accessor for UIHostingConfiguration();
  (*(void (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x670)));

  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x680)));
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x688)));
  outlined destroy of UIHostingConfigurationStorage((uint64_t)a1 + *(void *)((*v2 & *a1) + 0x690), (uint64_t (*)(void))type metadata accessor for WeakBox<UIButton>?);
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)((char *)a1 + *(void *)((*v2 & *a1) + 0x6B8)));
}

void (*protocol witness for UIContentView.configuration.modify in conformance UIHostingContentView<A, B>(uint64_t ***a1))(void *a1)
{
  long long v2 = (uint64_t **)malloc(0x28uLL);
  *a1 = v2;
  v2[4] = (uint64_t *)UIHostingContentView.configuration.modify(v2);
  return protocol witness for Animatable.animatableData.modify in conformance PlatterButtonStyleView<A>.ClippingShape;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance IsInHostingConfiguration()
{
  lazy protocol witness table accessor for type IsInHostingConfiguration and conformance IsInHostingConfiguration();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t specialized UIHostingContentView._popupMenuButtonDidChangeHandler.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x688));
}

uint64_t specialized UIHostingContentView._defaultListContentConfigurationProvider.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x680));
}

uint64_t specialized UIHostingContentView._containerBackgroundViewDidChangeHandler.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x670));
}

void *specialized UIHostingBackgroundView.__allocating_init(rootView:)(objc_class *a1)
{
  id v3 = objc_allocWithZone(v1);
  return specialized _UIHostingView.init(rootView:)(a1);
}

uint64_t associated type witness table accessor for View.Body : View in _UIHostingConfigurationBackgroundView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t assignWithTake for UIHostingConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 24) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 24);
  uint64_t v14 = type metadata accessor for UICellConfigurationState();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = (v16 | 7) + v13;
  uint64_t v18 = (v17 + v11) & ~(v16 | 7);
  uint64_t v19 = (v17 + v12) & ~(v16 | 7);
  *(unsigned char *)uint64_t v18 = *(unsigned char *)v19;
  LOBYTE(v17) = *(unsigned char *)(v19 + 0x10);
  *(void *)(v18 + 8) = *(void *)(v19 + 8);
  *(unsigned char *)(v18 + 16) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 32);
  *(void *)(v18 + 24) = *(void *)(v19 + 24);
  *(unsigned char *)(v18 + 32) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 48);
  *(void *)(v18 + 40) = *(void *)(v19 + 40);
  *(unsigned char *)(v18 + 48) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 64);
  *(void *)(v18 + 56) = *(void *)(v19 + 56);
  *(unsigned char *)(v18 + 64) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 80);
  *(void *)(v18 + 72) = *(void *)(v19 + 72);
  *(unsigned char *)(v18 + 80) = v17;
  LOBYTE(v17) = *(unsigned char *)(v19 + 96);
  *(void *)(v18 + 88) = *(void *)(v19 + 88);
  *(unsigned char *)(v18 + 96) = v17;
  *(unsigned char *)(v18 + 97) = *(unsigned char *)(v19 + 97);
  *(unsigned char *)(v18 + 98) = *(unsigned char *)(v19 + 98);
  __int16 v20 = (char *)((v16 + 99 + v18) & ~v16);
  objc_super v21 = (char *)((v16 + 99 + v19) & ~v16);
  uint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v13) = v22(v20, 1, v14);
  int v23 = v22(v21, 1, v14);
  if (v13)
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v21, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v20, 0, 1, v14);
      goto LABEL_12;
    }
    int v24 = *(_DWORD *)(v15 + 84);
    size_t v25 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v23)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 40))(v20, v21, v14);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v20, v14);
    int v24 = *(_DWORD *)(v15 + 84);
    size_t v25 = *(void *)(v15 + 64);
  }
  if (v24) {
    size_t v26 = v25;
  }
  else {
    size_t v26 = v25 + 1;
  }
  memcpy(v20, v21, v26);
LABEL_12:
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v27 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v27 = *(void *)(v15 + 64) + 1;
  }
  unint64_t v28 = (unint64_t)&v20[v27];
  unint64_t v29 = (unint64_t)&v21[v27];
  *(unsigned char *)unint64_t v28 = *(unsigned char *)v29;
  unint64_t v30 = v28 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = v29 & 0xFFFFFFFFFFFFFFF8;
  swift_unknownObjectWeakTakeAssign();
  *(void *)(v30 + 16) = *(void *)(v31 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIHostingConfiguration(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v40 = *(void *)(a3 + 24);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = *(void *)(v40 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  if (v9 <= v7) {
    unsigned int v10 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(type metadata accessor for UICellConfigurationState() - 8);
  uint64_t v12 = v11;
  int v13 = *(_DWORD *)(v11 + 84);
  if (v13) {
    unsigned int v14 = v13 - 1;
  }
  else {
    unsigned int v14 = 0;
  }
  if (v14 <= 0x7FFFFFFF) {
    unsigned int v15 = 0x7FFFFFFF;
  }
  else {
    unsigned int v15 = v14;
  }
  if (v15 <= v10) {
    unsigned int v15 = v10;
  }
  uint64_t v16 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v17 = *(void *)(v8 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = *(void *)(v11 + 64);
  if (!v13) {
    ++v19;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v20 = *(void *)(v6 + 64) + v16;
  uint64_t v21 = v18 | 7;
  uint64_t v22 = v18 + 99;
  if (v15 < a2)
  {
    unint64_t v23 = ((v21 + v17 + (v20 & ~v16)) & ~v21) + (((v22 & ~v18) + v19) & 0xFFFFFFFFFFFFFFF8) + 24;
    if ((v23 & 0xFFFFFFF8) != 0) {
      unsigned int v24 = 2;
    }
    else {
      unsigned int v24 = a2 - v15 + 1;
    }
    if (v24 >= 0x10000) {
      unsigned int v25 = 4;
    }
    else {
      unsigned int v25 = 2;
    }
    if (v24 < 0x100) {
      unsigned int v25 = 1;
    }
    if (v24 >= 2) {
      uint64_t v26 = v25;
    }
    else {
      uint64_t v26 = 0;
    }
    switch(v26)
    {
      case 1:
        int v27 = *((unsigned __int8 *)a1 + v23);
        if (!*((unsigned char *)a1 + v23)) {
          break;
        }
        goto LABEL_32;
      case 2:
        int v27 = *(unsigned __int16 *)((char *)a1 + v23);
        if (*(_WORD *)((char *)a1 + v23)) {
          goto LABEL_32;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C5D338);
      case 4:
        int v27 = *(_DWORD *)((char *)a1 + v23);
        if (!v27) {
          break;
        }
LABEL_32:
        int v29 = v27 - 1;
        if ((v23 & 0xFFFFFFF8) != 0)
        {
          int v29 = 0;
          int v30 = *a1;
        }
        else
        {
          int v30 = 0;
        }
        return v15 + (v30 | v29) + 1;
      default:
        break;
    }
  }
  if (v7 == v15)
  {
    unint64_t v31 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);
    uint64_t v32 = a1;
    uint64_t v33 = v7;
    uint64_t v34 = v5;
  }
  else
  {
    uint64_t v32 = (_DWORD *)(((unint64_t)a1 + v20) & ~v16);
    if (v9 != v15)
    {
      uint64_t v35 = (v22 + (((unint64_t)v32 + v17 + v21) & ~v21)) & ~v18;
      if (v14 < 0x7FFFFFFF)
      {
        unint64_t v37 = (v35 + v19) & 0xFFFFFFFFFFFFFFF8;
        uint64_t v38 = *(void *)(v37 + 16);
        int v39 = *(_DWORD *)(v37 + 8) & 0x7FFFFFFF;
        if ((v38 & 0xF000000000000007) != 0) {
          return (v39 + 1);
        }
        else {
          return 0;
        }
      }
      else
      {
        unsigned int v36 = (*(uint64_t (**)(uint64_t))(v12 + 48))(v35);
        if (v36 >= 2) {
          return v36 - 1;
        }
        else {
          return 0;
        }
      }
    }
    unint64_t v31 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v33 = v9;
    uint64_t v34 = v40;
  }

  return v31(v32, v33, v34);
}

uint64_t getEnumTagSinglePayload for _UIHostingConfigurationBackgroundView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _UIHostingConfigurationBackgroundView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C5D6F8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata completion function for UIHostingContentViewWithoutInteractions()
{
  return swift_initClassMetadata2();
}

uint64_t sub_187C5D758()
{
  return swift_getWitnessTable();
}

_OWORD *initializeBufferWithCopyOfBuffer for HostingContentViewRootModifier(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *a1 = *(_OWORD *)a2;
    a1[1] = v7;
    uint64_t v8 = a2[5];
    *((void *)v4 + 4) = a2[4];
    *((void *)v4 + 5) = v8;
    *((void *)v4 + 6) = a2[6];
    *((unsigned char *)v4 + 56) = *((unsigned char *)a2 + 56);
    *((void *)v4 + 8) = a2[8];
    unsigned int v10 = a2 + 9;
    uint64_t v9 = a2[9];
    swift_retain();
    swift_retain();
    if (v9 == 1)
    {
      *((void *)v4 + 9) = *v10;
      *((unsigned char *)v4 + 80) = *((unsigned char *)a2 + 80);
    }
    else
    {
      *((void *)v4 + 9) = v9;
      *((unsigned char *)v4 + 80) = *((unsigned char *)a2 + 80);
      swift_retain();
    }
    *(_OWORD *)((char *)v4 + 88) = *(_OWORD *)(a2 + 11);
    *(_OWORD *)((char *)v4 + 104) = *(_OWORD *)(a2 + 13);
    *(_OWORD *)((char *)v4 + 120) = *(_OWORD *)(a2 + 15);
    *(_OWORD *)((char *)v4 + 129) = *(_OWORD *)((char *)a2 + 129);
    *(_OWORD *)((char *)v4 + 152) = *(_OWORD *)(a2 + 19);
    *(_OWORD *)((char *)v4 + 161) = *(_OWORD *)((char *)a2 + 161);
    char v12 = *((unsigned char *)a2 + 177);
    uint64_t v13 = *(int *)(a3 + 32);
    unsigned int v14 = (char *)a2 + v13;
    int v15 = (char *)v4 + v13;
    *((unsigned char *)v4 + 177) = v12;
    uint64_t v16 = type metadata accessor for UICellConfigurationState();
    uint64_t v17 = *(void *)(v16 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v16))
    {
      type metadata accessor for UICellConfigurationState?(0);
      memcpy(v15, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v15, v14, v16);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0, 1, v16);
    }
  }
  return v4;
}

uint64_t initializeWithTake for HostingContentViewRootModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 129) = *(_OWORD *)(a2 + 129);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  uint64_t v6 = *(int *)(a3 + 32);
  long long v7 = (const void *)(a2 + v6);
  uint64_t v8 = (void *)(a1 + v6);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  uint64_t v9 = type metadata accessor for UICellConfigurationState();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v7, 1, v9))
  {
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v8, v7, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v8, v7, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0, 1, v9);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for HostingContentViewRootModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C5DB38);
}

uint64_t sub_187C5DB38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 40);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    type metadata accessor for UICellConfigurationState?(0);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = a1 + *(int *)(a3 + 32);
    return v10(v12, a2, v11);
  }
}

uint64_t storeEnumTagSinglePayload for HostingContentViewRootModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C5DC08);
}

uint64_t sub_187C5DC08(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 40) = a2;
  }
  else
  {
    type metadata accessor for UICellConfigurationState?(0);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 32);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for UIHostingConfigurationStorage(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *unint64_t v4 = *a2;
    unint64_t v4 = (void *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 1);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)((char *)a2 + 49);
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
    long long v7 = *(_OWORD *)((char *)a2 + 81);
    *(_WORD *)(a1 + 97) = *(_WORD *)((char *)a2 + 97);
    uint64_t v8 = a3[9];
    uint64_t v9 = (void *)(a1 + v8);
    uint64_t v10 = (char *)a2 + v8;
    *(_OWORD *)(a1 + 81) = v7;
    uint64_t v11 = type metadata accessor for UICellConfigurationState();
    uint64_t v12 = *(void *)(v11 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11))
    {
      type metadata accessor for UICellConfigurationState?(0);
      memcpy(v9, v10, *(void *)(*(void *)(v13 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = a3[11];
    *((unsigned char *)v4 + a3[10]) = *((unsigned char *)a2 + a3[10]);
    *(void *)(swift_unknownObjectWeakCopyInit() + 8) = *(uint64_t *)((char *)a2 + v15 + 8);
  }
  return v4;
}

uint64_t assignWithCopy for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v6;
  uint64_t v7 = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 24) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v9;
  uint64_t v10 = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(void *)(a1 + 72) = v10;
  uint64_t v11 = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 88) = v11;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  *(unsigned char *)(a1 + 98) = *(unsigned char *)(a2 + 98);
  uint64_t v12 = a3[9];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = type metadata accessor for UICellConfigurationState();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      goto LABEL_7;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    type metadata accessor for UICellConfigurationState?(0);
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
LABEL_7:
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v21 = a2 + a3[11];
  *(void *)(swift_unknownObjectWeakCopyAssign() + 8) = *(void *)(v21 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187C5E0AC);
}

uint64_t sub_187C5E0AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for UICellConfigurationState?(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 36);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    uint64_t v12 = a1 + *(int *)(a3 + 44);
    uint64_t v13 = *(void *)(v12 + 8);
    int v14 = *(_DWORD *)v12 & 0x7FFFFFFF;
    if ((v13 & 0xF000000000000007) != 0) {
      return (v14 + 1);
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for UIHostingConfigurationStorage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C5E188);
}

void sub_187C5E188(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for UICellConfigurationState?(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 36);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    uint64_t v13 = (void *)(a1 + *(int *)(a4 + 44));
    void *v13 = (a2 - 1);
    v13[1] = 1;
  }
}

uint64_t base witness table accessor for ViewModifier in HostingContentViewRootModifier()
{
  return lazy protocol witness table accessor for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier(&lazy protocol witness table cache variable for type HostingContentViewRootModifier and conformance HostingContentViewRootModifier, (void (*)(uint64_t))type metadata accessor for HostingContentViewRootModifier);
}

uint64_t outlined init with take of SwipeActions.Value?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for SwipeActions.Value?);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_187C5E3C4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187C5E3FC()
{
  swift_release();
  swift_bridgeObjectRelease();
  if (v0[12])
  {
    swift_release();
    swift_release();
  }
  if (v0[15])
  {
    swift_release();
    swift_release();
    uint64_t v1 = v0[17];
    if (v1)
    {
      if (v1 == 1) {
        goto LABEL_9;
      }
      swift_release();
    }
    if (v0[19]) {
      swift_release();
    }
  }
LABEL_9:

  return swift_deallocObject();
}

void *partial apply for closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(uint64_t (*a1)(uint64_t), uint64_t a2)
{
  return closure #1 in closure #1 in UIHostingContentView._trailingSwipeActionsConfiguration()(a1, a2, *(void *)(v2 + 48), v2 + 56);
}

void *outlined retain of SwipeActions.Configuration(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[8];
  uint64_t v10 = a1[7];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[12];
  swift_bridgeObjectRetain();
  outlined copy of Binding<NavigationSplitViewColumn>?(v2, v3);
  outlined copy of Binding<SwipeActionResultToken?>?(v10, v4, v5, v6, v7, v8);
  return a1;
}

void type metadata accessor for Binding<SwipeActionResultToken?>?(uint64_t a1)
{
}

void type metadata accessor for Binding<SwipeActionResultToken?>()
{
  if (!lazy cache variable for type metadata for Binding<SwipeActionResultToken?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for SwipeActionResultToken?);
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<SwipeActionResultToken?>);
    }
  }
}

void *outlined retain of Binding<SwipeActionResultToken?>?(void *a1, void (*a2)(void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_187C5E624()
{
  return swift_deallocObject();
}

id partial apply for closure #2 in UIHostingContentView.updateViewGraphForDisplay(isHidden:)()
{
  return objc_msgSend(*(id *)(v0 + 16), sel_invalidateIntrinsicContentSize);
}

uint64_t sub_187C5E66C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIHostingContentView.updateViewGraphForDisplay(isHidden:)()
{
  return closure #1 in UIHostingContentView.updateViewGraphForDisplay(isHidden:)();
}

uint64_t sub_187C5E698()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187C5E6D0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UIHostingContentView.isInList.didset()
{
  return closure #1 in UIHostingContentView.isInList.didset();
}

uint64_t sub_187C5E6FC()
{
  _Block_release(*(const void **)(v0 + 16));

  return swift_deallocObject();
}

uint64_t specialized UIHostingContentView._defaultListContentConfigurationProvider.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x680));
  uint64_t v4 = *v3;
  uint64_t *v3 = a1;
  v3[1] = a2;
  outlined copy of AppIntentExecutor?(a1);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);

  return UIHostingContentView.updateHostedViews()();
}

uint64_t specialized UIHostingContentView._preferredSeparatorInsetsDidChangeHandler.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x6B8));
}

void specialized UIHostingContentView.init(rootView:)()
{
  uint64_t v1 = (void *)MEMORY[0x1E4FBC8C8];
  *((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x660)) = 0;
  uint64_t v2 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x670));
  *uint64_t v2 = 0;
  v2[1] = 0;
  *(void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x678)) = 0;
  uint64_t v3 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x680));
  void *v3 = 0;
  v3[1] = 0;
  uint64_t v4 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x688));
  *uint64_t v4 = 0;
  v4[1] = 0;
  uint64_t v5 = (char *)v0 + *(void *)((*v1 & *v0) + 0x690);
  *(void *)uint64_t v5 = 0;
  v5[8] = 1;
  *(_DWORD *)((char *)v0 + *(void *)((*v1 & *v0) + 0x698)) = -1;
  uint64_t v6 = (char *)v0 + *(void *)((*v1 & *v0) + 0x6A0);
  *((void *)v6 + 1) = 0;
  *((void *)v6 + 2) = 0;
  *(void *)uint64_t v6 = 0;
  *((_WORD *)v6 + 12) = 256;
  uint64_t v7 = (char *)v0 + *(void *)((*v1 & *v0) + 0x6A8);
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  v7[16] = 1;
  *((unsigned char *)v0 + *(void *)((*v1 & *v0) + 0x6B0)) = 0;
  uint64_t v8 = (void *)((char *)v0 + *(void *)((*v1 & *v0) + 0x6B8));
  *uint64_t v8 = 0;
  v8[1] = 0;

  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id partial apply for thunk for @escaping @callee_unowned @convention(block) () -> (@autoreleased UIListContentConfiguration?)()
{
  uint64_t v1 = (void *)(*(uint64_t (**)(void))(*(void *)(v0 + 16) + 16))();

  return v1;
}

void *type metadata accessor for HostingContentViewGraph()
{
  return &unk_1ED483FE8;
}

uint64_t sub_187C5EA20()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout>, ViewInputFlagModifier<IsInHostingConfiguration>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<HostingContentViewRootModifier>, LabelStyleWritingModifier<SidebarLabelStyle>>, _PaddingLayout>, ContentConfigurationBasedRootEnvironment>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t destroy for PickerContentView(uint64_t a1)
{
  outlined consume of Environment<Bool>.Content(*(void *)a1, *(unsigned char *)(a1 + 8));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PickerContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  long long v6 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 48) = v6;
  uint64_t v7 = v6;
  uint64_t v8 = **(void (***)(uint64_t, uint64_t, uint64_t))(v6 - 8);
  swift_bridgeObjectRetain();
  v8(a1 + 24, a2 + 24, v7);
  uint64_t v9 = *(void **)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v10;
  id v11 = v9;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PickerContentView(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 24), (uint64_t *)(a2 + 24));
  uint64_t v8 = *(void **)(a2 + 64);
  uint64_t v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = v8;
  id v10 = v8;

  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for PickerContentView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(a1 + 24);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 3);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 5);
  uint64_t v8 = a2[8];
  uint64_t v9 = *(void **)(a1 + 64);
  *(void *)(a1 + 56) = a2[7];
  *(void *)(a1 + 64) = v8;

  *(void *)(a1 + 72) = a2[9];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerContentView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PickerContentView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)id result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t type metadata accessor for PickerContentView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in PickerContentView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 PickerContentView.init(selection:items:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a3 + 24) = *(_OWORD *)a2;
  *(_OWORD *)(a3 + 40) = v6;
  __n128 result = *(__n128 *)(a2 + 32);
  *(__n128 *)(a3 + 56) = result;
  *(void *)(a3 + 72) = *(void *)(a2 + 48);
  return result;
}

uint64_t PickerContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  outlined init with copy of SubviewsCollection(v2 + 24, (uint64_t)v12);
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(v13, v2, a1);
  char v5 = (_OWORD *)swift_allocObject();
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v7 = v13[2];
  long long v8 = v13[3];
  long long v9 = v13[0];
  v5[3] = v13[1];
  v5[4] = v7;
  long long v10 = v13[4];
  v5[5] = v8;
  void v5[6] = v10;
  v5[1] = v6;
  void v5[2] = v9;
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
  lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>();
  lazy protocol witness table accessor for type Subview and conformance Subview();
  ForEach<>.init(_:content:)();
  outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v13, a2, (uint64_t (*)(void))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>);
  *(void *)(a2 + 96) = closure #1 in View.collapsingInlinePickerSections();
  *(void *)(a2 + 104) = 0;
  return outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>);
}

uint64_t closure #1 in PickerContentView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v9 = type metadata accessor for PickerContentView();
  uint64_t v10 = PickerContentView.isItemSelected(_:)();
  uint64_t v11 = *(void *)(a1 + 88);
  LOBYTE(v36[0]) = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v40 = v10;
  LOBYTE(v41) = v31[0];
  outlined init with copy of Subview(a1, (uint64_t)&v42);
  *(void *)&v31[0] = v11;
  LOBYTE(v32) = 1;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v13 = swift_allocObject();
  *(unsigned char *)(v13 + 16) = 1;
  outlined init with copy of PickerItemView<Subview>((uint64_t)&v40, (uint64_t)v36);
  uint64_t v37 = KeyPath;
  uint64_t v38 = partial apply for closure #1 in View.hoverEffectDisabled(_:);
  uint64_t v39 = v13;
  outlined destroy of PickerItemView<Subview>((uint64_t)&v40);
  *(void *)&v31[0] = *(void *)(a1 + 88);
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  char v43 = 0;
  uint64_t v42 = 0;
  ViewTraitCollection.value<A>(for:defaultValue:)();
  uint64_t v15 = v32;
  uint64_t v14 = v33;
  uint64_t v16 = v34;
  char v17 = v35;
  uint64_t v18 = swift_getKeyPath();
  outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v36, (uint64_t)&v40, (uint64_t (*)(void))type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v44 = v18;
  uint64_t v45 = v32;
  uint64_t v46 = v33;
  uint64_t v47 = v34;
  char v48 = v35;
  outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)&v40, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  swift_bridgeObjectRetain();
  outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)&v40, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>);
  outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v31, (uint64_t)&v40, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  uint64_t v49 = v15;
  uint64_t v50 = v14;
  uint64_t v51 = v16;
  char v52 = v17;
  outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v31, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>);
  outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
  uint64_t v19 = swift_getKeyPath();
  (*(void (**)(_OWORD *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v36, a2, v9);
  outlined init with copy of Subview(a1, (uint64_t)v31);
  uint64_t v20 = swift_allocObject();
  long long v21 = v36[3];
  *(_OWORD *)(v20 + 64) = v36[2];
  *(_OWORD *)(v20 + 80) = v21;
  long long v22 = v36[4];
  long long v23 = v36[1];
  *(_OWORD *)(v20 + 32) = v36[0];
  *(_OWORD *)(v20 + 48) = v23;
  long long v24 = v31[2];
  long long v25 = v31[4];
  long long v26 = v31[5];
  *(_OWORD *)(v20 + 160) = v31[3];
  *(_OWORD *)(v20 + 176) = v25;
  *(_OWORD *)(v20 + 192) = v26;
  long long v27 = v31[0];
  long long v28 = v31[1];
  *(_OWORD *)(v20 + 96) = v22;
  *(_OWORD *)(v20 + 112) = v27;
  *(void *)(v20 + 16) = a3;
  *(void *)(v20 + 24) = a4;
  *(_OWORD *)(v20 + 128) = v28;
  *(_OWORD *)(v20 + 144) = v24;
  outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)&v40, (uint64_t)a5, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
  a5[26] = v19;
  a5[27] = partial apply for closure #2 in closure #1 in PickerContentView.body.getter;
  a5[28] = v20;
  return outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)&v40, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
}

uint64_t PickerContentView.isItemSelected(_:)()
{
  type metadata accessor for Binding();
  type metadata accessor for Array();
  _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v0 = Sequence.compactMap<A>(_:)();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t closure #2 in closure #1 in PickerContentView.body.getter(unsigned char *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  char v4 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)a2, v4);
  specialized Environment.wrappedValue.getter(v3, v4, v15);
  uint64_t result = outlined consume of Environment<Bool>.Content(v3, v4);
  char v6 = v15[0];
  int v7 = HIBYTE(LOWORD(v15[0]));
  if ((BYTE1(v15[0]) & 0xFE) != 4)
  {
    type metadata accessor for PickerContentView();
    uint64_t v8 = PickerContentView.isItemSelected(_:)();
    uint64_t v9 = *(void *)(v8 + 16);
    if (v9)
    {
      _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
      uint64_t v11 = v10;
      for (uint64_t i = (unsigned char *)(v8 + 48); ; i += 24)
      {
        char v13 = *i;
        uint64_t v14 = *((void *)i - 1);
        v15[0] = *((void *)i - 2);
        v15[1] = v14;
        char v16 = v13;
        MEMORY[0x18C113DA0](&v17, v11);
        if (v17) {
          break;
        }
        if (!--v9) {
          return swift_bridgeObjectRelease();
        }
      }
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v6;
      a1[1] = v7;
    }
    else
    {
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t closure #1 in PickerContentView.isItemSelected(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v7 = (char *)v14 - v6;
  v14[1] = *(void *)(a1 + 88);
  TraitValues.tag<A>(for:)();
  type metadata accessor for Binding();
  uint64_t v8 = Binding.selecting<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  *(void *)a2 = v8;
  *(void *)(a2 + 8) = v10;
  *(unsigned char *)(a2 + 16) = v12 & 1;
  return result;
}

uint64_t sub_187C5F6F4()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in PickerContentView.body.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return closure #1 in PickerContentView.body.getter(a1, v2 + 32, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>(255);
    type metadata accessor for PickerItemView<Subview>(255, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>, (uint64_t)&type metadata for KeyboardShortcutPickerOptionTraitKey, (uint64_t)&protocol witness table for KeyboardShortcutPickerOptionTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>)
  {
    type metadata accessor for PickerItemView<Subview>(255, &lazy cache variable for type metadata for PickerItemView<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4F41700], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerItemView);
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>);
    }
  }
}

uint64_t type metadata accessor for PickerItemView()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<SymbolVariants>, MEMORY[0x1E4F3FA20]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey> and conformance _TraitWritingModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>(255);
    lazy protocol witness table accessor for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A](&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<KeyboardShortcut?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<KeyboardShortcut?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>();
    lazy protocol witness table accessor for type PickerItemView<Subview> and conformance PickerItemView<A>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PickerItemView<Subview> and conformance PickerItemView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PickerItemView<Subview> and conformance PickerItemView<A>;
  if (!lazy protocol witness table cache variable for type PickerItemView<Subview> and conformance PickerItemView<A>)
  {
    type metadata accessor for PickerItemView<Subview>(255, &lazy cache variable for type metadata for PickerItemView<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4F41700], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerItemView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PickerItemView<Subview> and conformance PickerItemView<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<SymbolVariants> and conformance _EnvironmentKeyTransformModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(255, a2, a3, MEMORY[0x1E4F41280]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A](unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in View.collapsingInlinePickerSections()(void *a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v142 = (uint64_t)&v101 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v101 - v6;
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v101 - v9;
  MEMORY[0x1F4188790](v11);
  uint64_t v123 = (uint64_t)&v101 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v122 = (uint64_t)&v101 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v121 = (uint64_t)&v101 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (int64_t *)((char *)&v101 - v18);
  type metadata accessor for PlatformItemList.Item?(0);
  MEMORY[0x1F4188790](v20 - 8);
  long long v22 = (char *)&v101 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v24 = MEMORY[0x1F4188790](v23);
  long long v25 = (void *)MEMORY[0x1E4FBC860];
  long long v144 = (void *)MEMORY[0x1E4FBC860];
  long long v26 = *(void (**)(double))(v3 + 56);
  uint64_t v137 = (uint64_t)&v101 - v27;
  long long v135 = (int *)v2;
  uint64_t v125 = v3 + 56;
  uint64_t v124 = v26;
  v26(v24);
  uint64_t v136 = a1;
  uint64_t result = *a1;
  uint64_t v29 = *(void *)(*a1 + 16);
  if (!v29)
  {
LABEL_60:
    swift_bridgeObjectRelease();
    if (v25[2]) {
      specialized Array.append<A>(contentsOf:)((uint64_t)v25);
    }
    else {
      swift_bridgeObjectRelease();
    }
    uint64_t result = outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v137, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
    *uint64_t v136 = v144;
    return result;
  }
  uint64_t v115 = v7;
  LODWORD(v126) = 0;
  uint64_t v30 = (uint64_t)v10;
  unint64_t v31 = 0;
  unint64_t v139 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v141 = result + v139;
  uint64_t v118 = (unsigned int (**)(char *, uint64_t, int *))(v3 + 48);
  unint64_t v114 = (void *)(v30 + 8);
  uint64_t v113 = v30 + 64;
  uint64_t v112 = (_OWORD *)(v30 + 248);
  uint64_t v111 = v30 + 472;
  uint64_t v110 = (void *)(v30 + 504);
  uint64_t v109 = (unsigned char *)(v30 + 521);
  unint64_t v108 = (void *)(v30 + 528);
  uint64_t v107 = v30 + 560;
  uint64_t v106 = (_OWORD *)(v30 + 416);
  uint64_t v105 = (void *)(v30 + 304);
  v117 = (void *)v30;
  uint64_t v104 = (_OWORD *)(v30 + 336);
  uint64_t v120 = v29 - 1;
  long long v103 = xmmword_18834BB90;
  uint64_t v140 = result;
  uint64_t v138 = v29;
  while (v31 < *(void *)(result + 16))
  {
    uint64_t v32 = v3;
    uint64_t v33 = *(void *)(v3 + 72);
    outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v141 + v33 * v31, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
    unint64_t v34 = v19[41];
    if (v34 >> 62 != 3 || (v34 & 0xFFFFFFFFFFFFFFFCLL) == 0x3FFFFFFFCLL) {
      goto LABEL_16;
    }
    unint64_t v36 = v19[37];
    uint64_t v35 = v19[38];
    uint64_t v37 = v19[39];
    uint64_t v38 = v19[40];
    uint64_t v39 = v19[42];
    uint64_t v40 = v19[43];
    uint64_t v41 = v19[44];
    uint64_t v42 = v19[45];
    uint64_t v43 = v19[46];
    uint64_t v44 = v19[47];
    uint64_t v46 = v19[48];
    uint64_t v45 = v19[49];
    BOOL v47 = v34 == 0xC000000000000000 && (v35 | v36 | v37 | v38 | v39 | v40 | v41 | v42 | v43 | v44 | v46 | v45) == 0;
    int v48 = v47;
    if (v47)
    {
      uint64_t v116 = v19[47];
      uint64_t v127 = v43;
      uint64_t v128 = v42;
      uint64_t v129 = v35;
      uint64_t v130 = v37;
      uint64_t v131 = v38;
      uint64_t v132 = v39;
      uint64_t v133 = v40;
      uint64_t v134 = v41;
      int v119 = v48;
      outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v137, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
      uint64_t v51 = *v118;
      uint64_t v126 = (uint64_t)v22;
      if (v51(v22, 1, v135) == 1)
      {
        uint64_t v52 = v116;
        outlined copy of PlatformItemList.Item.SystemItem((id)v36, v129, v130, v131, 0xC000000000000000, v132, v133, v134, v128, v127, v116, v46, v45);
        outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v126, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
        if (v25[2])
        {
          _s7SwiftUI5ImageVAAE8ResolvedVSgWOi0_((uint64_t)v143);
          int v53 = v114;
          *unint64_t v114 = 0;
          v53[1] = 0;
          *((unsigned char *)v53 + 24) = 0;
          v53[2] = 0;
          uint64_t v54 = (uint64_t)v117;
          v117[5] = -1;
          long long v55 = v112;
          _OWORD *v112 = 0u;
          v55[1] = 0u;
          v55[2] = 0u;
          uint64_t v56 = v111;
          *(void *)(v111 + 8) = 0;
          *(void *)(v56 + 16) = 0;
          *(void *)uint64_t v56 = 0;
          *(unsigned char *)(v56 + 24) = 0;
          uint64_t v57 = v110;
          *uint64_t v110 = 0;
          v57[1] = 0;
          *((unsigned char *)v57 + 16) = 0;
          *uint64_t v109 = 1;
          *(void *)(v54 + 552) = 1;
          *(void *)(v54 + 624) = 0;
          long long v58 = (_OWORD *)v107;
          *(void *)(v107 + 48) = 0;
          v58[1] = 0u;
          v58[2] = 0u;
          _OWORD *v58 = 0u;
          *(_WORD *)(v54 + 633) = 773;
          unint64_t v59 = v135;
          uint64_t v126 = v54 + v135[28];
          *(unsigned char *)(v54 + 56) = 1;
          uint64_t v60 = type metadata accessor for CommandOperation();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v60 - 8) + 56))(v126, 1, 1, v60);
          unint64_t v61 = v117;
          *((unsigned char *)v117 + v59[29]) = 0;
          *((unsigned char *)v61 + v59[30]) = 0;
          *((unsigned char *)v61 + v59[31]) = 2;
          *((unsigned char *)v61 + v59[32]) = 0;
          uint64_t v126 = v59[33];
          *unint64_t v61 = 0;
          uint64_t v62 = (uint64_t)v61;
          outlined init with take of Image.Resolved?((uint64_t)v143, v113);
          *(_OWORD *)(v62 + 400) = v103;
          uint64_t v63 = v106;
          _OWORD *v106 = 0u;
          v63[1] = 0u;
          v63[2] = 0u;
          *((unsigned char *)v63 + 48) = 0;
          long long v64 = v108;
          v108[1] = 0;
          v64[2] = 0;
          *long long v64 = 0;
          *(void *)(v62 + v126) = 0;
          *(void *)(v62 + 48) = 0;
          *(void *)(v62 + 616) = v25;
          *(unsigned char *)(v62 + 632) = 0;
          *(void *)(v62 + 296) = 2;
          uint64_t v65 = v105;
          v105[1] = 0;
          _DWORD v65[2] = 0;
          *uint64_t v65 = 0;
          *(void *)(v62 + 328) = 0xC000000000000000;
          uint64_t v66 = v104;
          *uint64_t v104 = 0u;
          v66[1] = 0u;
          v66[2] = 0u;
          v66[3] = 0u;
          outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v62, (uint64_t)v115, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
          long long v67 = v144;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v67 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v67[2] + 1, 1, v67);
          }
          unint64_t v69 = v67[2];
          unint64_t v68 = v67[3];
          uint64_t v70 = v69 + 1;
          uint64_t v52 = v116;
          if (v69 >= v68 >> 1)
          {
            uint64_t v126 = v69 + 1;
            uint64_t v98 = v67;
            unint64_t v99 = v69;
            uint64_t v100 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v68 > 1, v69 + 1, 1, v98);
            uint64_t v70 = v126;
            unint64_t v69 = v99;
            long long v67 = (void *)v100;
          }
          v67[2] = v70;
          outlined init with take of PlatformItemList.Item((uint64_t)v115, (uint64_t)v67 + v139 + v69 * v33);
          long long v144 = v67;
          outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        }
        else
        {
          swift_bridgeObjectRelease();
        }
        uint64_t v81 = (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?;
        uint64_t v80 = v137;
        uint64_t v82 = v137;
      }
      else
      {
        uint64_t v75 = v122;
        outlined init with take of PlatformItemList.Item(v126, v122);
        uint64_t v126 = *(void *)(v75 + 616);
        outlined copy of PlatformItemList.Item.SystemItem((id)v36, v129, v130, v131, 0xC000000000000000, v132, v133, v134, v128, v127, v116, v46, v45);
        swift_bridgeObjectRelease();
        *(void *)(v75 + 616) = v25;
        outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v75, v123, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        int v76 = v144;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          int v76 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v76[2] + 1, 1, v76);
        }
        unint64_t v78 = v76[2];
        unint64_t v77 = v76[3];
        uint64_t v79 = v78 + 1;
        uint64_t v52 = v116;
        if (v78 >= v77 >> 1)
        {
          uint64_t v126 = v78 + 1;
          long long v94 = v76;
          unint64_t v95 = v78;
          uint64_t v96 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v77 > 1, v78 + 1, 1, v94);
          uint64_t v79 = v126;
          unint64_t v78 = v95;
          int v76 = (void *)v96;
        }
        v76[2] = v79;
        outlined init with take of PlatformItemList.Item(v123, (uint64_t)v76 + v139 + v78 * v33);
        long long v144 = v76;
        uint64_t v80 = v137;
        outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v137, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
        uint64_t v81 = (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item;
        uint64_t v82 = v122;
      }
      outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v82, v81);
      ((void (*)(uint64_t, uint64_t, uint64_t, int *))v124)(v80, 1, 1, v135);
      outlined consume of PlatformItemList.Item.SystemItem?((void *)v36, v129, v130, v131, 0xC000000000000000, v132, v133, v134, v128, v127, v52, v46, v45);
LABEL_57:
      outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      long long v25 = (void *)MEMORY[0x1E4FBC860];
      goto LABEL_58;
    }
    if (v34 == 0xC000000000000000 && v36 == 2 && !(v37 | v35 | v38 | v39 | v40 | v41 | v42 | v43 | v44 | v46 | v45))
    {
      int v119 = v48;
      uint64_t v134 = v41;
      uint64_t v133 = v40;
      uint64_t v132 = v39;
      uint64_t v131 = v38;
      uint64_t v130 = v37;
      uint64_t v129 = v35;
      uint64_t v128 = v42;
      uint64_t v127 = v43;
      if ((v126 & 1) == 0)
      {
        outlined copy of PlatformItemList.Item.SystemItem((id)2, v35, v37, v38, 0xC000000000000000, v39, v40, v41, v42, v43, v44, v46, v45);
        uint64_t v83 = v137;
        outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(v137, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item?);
        outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v19, v83, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
        ((void (*)(uint64_t, void, uint64_t, int *))v124)(v83, 0, 1, v135);
        uint64_t result = (uint64_t)v144;
        int64_t v84 = v144[2];
        uint64_t v126 = v25[2];
        int64_t v101 = v84;
        int64_t v85 = v84 + v126;
        if (__OFADD__(v84, v126)) {
          goto LABEL_65;
        }
        uint64_t v102 = v144;
        uint64_t result = swift_isUniquelyReferenced_nonNull_native();
        long long v86 = v102;
        if (!result || (int64_t v87 = v102[3] >> 1, v87 < v85))
        {
          if (v101 <= v85) {
            int64_t v88 = v85;
          }
          else {
            int64_t v88 = v101;
          }
          uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v88, 1, v102);
          long long v86 = (void *)result;
          int64_t v87 = *(void *)(result + 24) >> 1;
        }
        uint64_t v89 = v126;
        if (v25[2])
        {
          if (v87 - v86[2] < v126) {
            goto LABEL_67;
          }
          long long v90 = v86;
          uint64_t result = swift_arrayInitWithCopy();
          if (v89)
          {
            uint64_t v91 = v90[2];
            BOOL v92 = __OFADD__(v91, v89);
            uint64_t v93 = v91 + v89;
            if (v92) {
              goto LABEL_68;
            }
            v90[2] = v93;
          }
        }
        else
        {
          long long v90 = v86;
          if (v126) {
            goto LABEL_66;
          }
        }
        swift_bridgeObjectRelease();
        outlined consume of PlatformItemList.Item.SystemItem?((void *)2, v129, v130, v131, 0xC000000000000000, v132, v133, v134, v128, v127, v44, v46, v45);
        long long v144 = v90;
        goto LABEL_57;
      }
      uint64_t v71 = v43;
      outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v19, v121, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      outlined copy of PlatformItemList.Item.SystemItem((id)2, v129, v130, v131, 0xC000000000000000, v132, v133, v134, v128, v71, v44, v46, v45);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      }
      unint64_t v73 = v25[2];
      unint64_t v72 = v25[3];
      uint64_t v74 = v73 + 1;
      if (v73 >= v72 >> 1)
      {
        uint64_t v126 = v73 + 1;
        uint64_t v97 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v72 > 1, v73 + 1, 1, v25);
        uint64_t v74 = v126;
        long long v25 = (void *)v97;
      }
      v25[2] = v74;
      outlined init with take of PlatformItemList.Item(v121, (uint64_t)v25 + v139 + v73 * v33);
      outlined consume of PlatformItemList.Item.SystemItem?((void *)2, v129, v130, v131, 0xC000000000000000, v132, v133, v134, v128, v127, v44, v46, v45);
      outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
LABEL_58:
      uint64_t v3 = v32;
      uint64_t result = v140;
      if (v120 == v31) {
        goto LABEL_60;
      }
      LODWORD(v126) = v119 ^ 1;
      ++v31;
    }
    else
    {
LABEL_16:
      outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v19, v142, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        long long v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v25[2] + 1, 1, v25);
      }
      unint64_t v50 = v25[2];
      unint64_t v49 = v25[3];
      if (v50 >= v49 >> 1) {
        long long v25 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v49 > 1, v50 + 1, 1, v25);
      }
      uint64_t v3 = v32;
      ++v31;
      v25[2] = v50 + 1;
      outlined init with take of PlatformItemList.Item(v142, (uint64_t)v25 + v139 + v50 * v33);
      outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>((uint64_t)v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      uint64_t result = v140;
      if (v138 == v31) {
        goto LABEL_60;
      }
    }
  }
  __break(1u);
LABEL_65:
  __break(1u);
LABEL_66:
  __break(1u);
LABEL_67:
  __break(1u);
LABEL_68:
  __break(1u);
  return result;
}

void type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>()
{
  if (!lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>();
    lazy protocol witness table accessor for type SubviewsCollection and conformance SubviewsCollection();
    lazy protocol witness table accessor for type Subview.ID and conformance Subview.ID();
    unint64_t v0 = type metadata accessor for ForEach();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>);
    }
  }
}

uint64_t outlined init with copy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t PickerItemView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v89 = a2;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = type metadata accessor for Toggle();
  uint64_t v80 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v79 = (uint64_t *)((char *)&v70 - v6);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v90 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v78 = (uint64_t)&v70 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v84 = (uint64_t)&v70 - v10;
  MEMORY[0x1F4188790](v11);
  unint64_t v77 = (char *)&v70 - v12;
  type metadata accessor for PickerItemView<Subview>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v86 = v7;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v83 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v81 = (char *)&v70 - v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v82 = (char *)&v70 - v19;
  uint64_t v20 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v70 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  long long v26 = (char *)&v70 - v25;
  uint64_t v88 = type metadata accessor for _ConditionalContent();
  uint64_t v87 = *(void *)(v88 - 8);
  MEMORY[0x1F4188790](v88);
  long long v28 = (char *)&v70 - v27;
  if (*((unsigned char *)v85 + 8) == 1)
  {
    static ViewBuilder.buildExpression<A>(_:)((char *)v85 + *(int *)(a1 + 40));
    static ViewBuilder.buildExpression<A>(_:)(v26);
    uint64_t WitnessTable = swift_getWitnessTable();
    long long v94 = &protocol witness table for AccessibilityAttachmentModifier;
    uint64_t v91 = swift_getWitnessTable();
    BOOL v92 = &protocol witness table for PlatformItemListTransformModifier<A>;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v23, v3);
    uint64_t v29 = *(void (**)(char *, uint64_t))(v20 + 8);
    v29(v23, v3);
    v29(v26, v3);
    uint64_t v30 = v87;
    unint64_t v31 = v28;
    uint64_t v32 = v88;
  }
  else
  {
    unint64_t v72 = v15;
    uint64_t v74 = (char *)&v70 - v27;
    uint64_t v108 = *v85;
    uint64_t v33 = v85;
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v71 = &v70;
    MEMORY[0x1F4188790](KeyPath);
    type metadata accessor for [Binding<Bool>]();
    uint64_t v36 = v35;
    uint64_t v37 = lazy protocol witness table accessor for type [Binding<Bool>] and conformance [A](&lazy protocol witness table cache variable for type [Binding<Bool>] and conformance [A], (void (*)(uint64_t))type metadata accessor for [Binding<Bool>]);
    swift_bridgeObjectRetain();
    uint64_t v38 = v79;
    uint64_t v75 = v3;
    uint64_t v76 = v4;
    Toggle.init<A>(sources:isOn:label:)((uint64_t)&v108, KeyPath, (void (*)(void))partial apply for closure #1 in PickerItemView.body.getter, (uint64_t)(&v70 - 6), v3, v36, v4, v37, v79);
    uint64_t v39 = swift_getWitnessTable();
    unint64_t v40 = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    unint64_t v41 = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    unint64_t v42 = lazy protocol witness table accessor for type AccessibilityEmptyValue and conformance AccessibilityEmptyValue();
    unint64_t v68 = v41;
    unint64_t v69 = v42;
    unint64_t v67 = v40;
    uint64_t v43 = v78;
    uint64_t v71 = (uint64_t *)v39;
    View.accessibilityValue<A>(_:description:)(v42, 0, 0, 0, 0, v5, MEMORY[0x1E4F40A68], v39, v78, v67);
    (*(void (**)(void *, uint64_t))(v80 + 8))(v38, v5);
    uint64_t v44 = v84;
    uint64_t v45 = v86;
    ModifiedContent<>.accessibilityRemoveTraits(_:)(v86, v84);
    uint64_t v46 = v90 + 8;
    BOOL v47 = *(void (**)(uint64_t, uint64_t))(v90 + 8);
    v47(v43, v45);
    uint64_t v48 = *v33;
    uint64_t v49 = *(void *)(*v33 + 16);
    uint64_t v50 = v5;
    uint64_t v51 = v45;
    uint64_t v73 = v50;
    uint64_t v90 = v46;
    if (v49)
    {
      _s7SwiftUI32_EnvironmentKeyTransformModifierVySbGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
      uint64_t v53 = v52;
      swift_bridgeObjectRetain();
      uint64_t v54 = (unsigned char *)(v48 + 48);
      uint64_t v55 = 4;
      while (1)
      {
        char v56 = *v54;
        uint64_t v57 = *((void *)v54 - 1);
        v105[0] = *((void *)v54 - 2);
        v105[1] = v57;
        char v106 = v56;
        MEMORY[0x18C113DA0](&v107, v53);
        if (v107) {
          break;
        }
        v54 += 24;
        if (!--v49)
        {
          uint64_t v55 = 0;
          break;
        }
      }
      swift_bridgeObjectRelease();
      uint64_t v58 = (uint64_t)v77;
      uint64_t v44 = v84;
    }
    else
    {
      uint64_t v55 = 0;
      uint64_t v58 = (uint64_t)v77;
    }
    unint64_t v59 = v71;
    v105[0] = v55;
    ModifiedContent<>.accessibilityAddTraits(_:)(v105, v51, v58);
    v47(v44, v51);
    long long v103 = v59;
    uint64_t v104 = &protocol witness table for AccessibilityAttachmentModifier;
    uint64_t v60 = swift_getWitnessTable();
    unint64_t v61 = v81;
    View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)closure #3 in PickerItemView.body.getter, 0, v51, (uint64_t)&type metadata for SelectionPlatformItemListFlags, v60);
    v47(v58, v51);
    uint64_t v101 = v60;
    uint64_t v102 = &protocol witness table for PlatformItemListTransformModifier<A>;
    swift_getWitnessTable();
    uint64_t v62 = v82;
    static ViewBuilder.buildExpression<A>(_:)(v61);
    uint64_t v63 = *(void (**)(char *, uint64_t))(v83 + 8);
    v63(v61, v13);
    uint64_t v64 = (uint64_t)v72;
    static ViewBuilder.buildExpression<A>(_:)(v62);
    unint64_t v31 = v74;
    uint64_t v4 = v76;
    static ViewBuilder.buildEither<A, B>(second:)(v64, v75, v13);
    v63((char *)v64, v13);
    v63(v62, v13);
    uint64_t v32 = v88;
    uint64_t v30 = v87;
  }
  uint64_t v99 = swift_getWitnessTable();
  uint64_t v100 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v97 = swift_getWitnessTable();
  uint64_t v98 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v95 = v4;
  uint64_t v96 = v65;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v31);
  return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v31, v32);
}

uint64_t closure #1 in PickerItemView.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for PickerItemView();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 40));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

void *closure #3 in PickerItemView.body.getter(void *result)
{
  uint64_t v1 = (void *)*result;
  uint64_t v2 = *(void *)(*result + 16);
  if (v2)
  {
    uint64_t v3 = result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_11:
    }
      uint64_t v1 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v1);
    for (unint64_t i = 0; i != v2; ++i)
    {
      if (i >= v1[2])
      {
        __break(1u);
        goto LABEL_11;
      }
      uint64_t v5 = type metadata accessor for PlatformItemList.Item();
      uint64_t v6 = *(void *)(v5 - 8);
      uint64_t result = (void *)(v5 - 8);
      unint64_t v7 = (unint64_t)v1
         + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + *(void *)(v6 + 72) * i;
      if (*(void *)(v7 + 408) != 1) {
        *(unsigned char *)(v7 + 403) = 1;
      }
    }
    void *v3 = v1;
  }
  return result;
}

uint64_t outlined destroy of ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t key path getter for EnvironmentValues.isEnabled : EnvironmentValues, serialized@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187C61B80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isEnabled.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187C61BB0()
{
  return EnvironmentValues.isEnabled.setter();
}

unsigned char *closure #1 in View.disabled(_:)(unsigned char *result, char a2)
{
  *result &= a2 ^ 1;
  return result;
}

uint64_t sub_187C61BEC()
{
  return swift_deallocObject();
}

uint64_t outlined init with copy of PickerItemView<Subview>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PickerItemView<Subview>(0, &lazy cache variable for type metadata for PickerItemView<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4F41700], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerItemView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of PickerItemView<Subview>(uint64_t a1)
{
  type metadata accessor for PickerItemView<Subview>(0, &lazy cache variable for type metadata for PickerItemView<Subview>, MEMORY[0x1E4F41708], MEMORY[0x1E4F41700], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerItemView);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_187C61D1C@<X0>(_WORD *a1@<X8>)
{
  uint64_t result = EnvironmentValues.symbolVariants.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187C61D60()
{
  return EnvironmentValues.symbolVariants.setter();
}

uint64_t sub_187C61D98()
{
  outlined consume of Environment<Bool>.Content(*(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 56);

  swift_bridgeObjectRelease();
  __swift_destroy_boxed_opaque_existential_1(v0 + 112);
  swift_release();
  swift_bridgeObjectRelease();

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in PickerContentView.body.getter(unsigned char *a1)
{
  return closure #2 in closure #1 in PickerContentView.body.getter(a1, v1 + 32);
}

uint64_t partial apply for closure #1 in PickerContentView.isItemSelected(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in PickerContentView.isItemSelected(_:)(*(void *)(v1 + 32), a1);
}

uint64_t type metadata completion function for PickerItemView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PickerItemView(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  unint64_t v7 = ((v6 + 9) & ~v6) + *(void *)(v5 + 64);
  int v8 = *(_DWORD *)(v5 + 80) & 0x100000;
  uint64_t v9 = *a2;
  *(void *)a1 = *a2;
  if (v6 > 7 || v8 != 0 || v7 > 0x18)
  {
    a1 = v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16));
    swift_retain();
  }
  else
  {
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
    uint64_t v12 = (a1 + v6 + 9) & ~v6;
    uint64_t v13 = ((unint64_t)a2 + v6 + 9) & ~v6;
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    v14(v12, v13, v4);
  }
  return a1;
}

uint64_t destroy for PickerItemView(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = (v6 + 9 + a1) & ~v6;
  uint64_t v8 = (v6 + 9 + a2) & ~v6;
  swift_bridgeObjectRetain();
  v5(v7, v8, v4);
  return a1;
}

uint64_t assignWithCopy for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))((*(unsigned __int8 *)(v6 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t initializeWithTake for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))((*(unsigned __int8 *)(v4 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), (*(unsigned __int8 *)(v4 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t assignWithTake for PickerItemView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))((*(unsigned __int8 *)(v6 + 80) + 9 + a1) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), (*(unsigned __int8 *)(v6 + 80) + 9 + a2) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for PickerItemView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 9) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 9) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for PickerItemView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 9) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187C626B0);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v19 = (unint64_t)&a1[v9 + 9] & ~v9;
          uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
          v20(v19);
        }
        else
        {
          if ((a2 & 0x80000000) != 0) {
            uint64_t v18 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v18 = a2 - 1;
          }
          *(void *)a1 = v18;
        }
      }
      return;
  }
}

uint64_t sub_187C626D8()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>, (void (*)(void))lazy protocol witness table accessor for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>();
    type metadata accessor for PickerItemView<Subview>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>, (uint64_t)&type metadata for SelectionPlatformItemListFlags, (uint64_t)&protocol witness table for SelectionPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for PickerItemView<Subview>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>;
  if (!lazy protocol witness table cache variable for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>)
  {
    type metadata accessor for ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForEach<SubviewsCollection, Subview.ID, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<PickerItemView<Subview>, _EnvironmentKeyTransformModifier<Bool>>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<SymbolVariants>>> and conformance <> ForEach<A, B, C>);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in PickerItemView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in PickerItemView.body.getter()
{
  return closure #1 in PickerItemView.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t sub_187C6294C()
{
  return swift_getWitnessTable();
}

void specialized closure #1 in ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.observeListLayout(handler:)(uint64_t a1, unsigned char *a2)
{
  if (a2) {
    *a2 = 1;
  }
}

uint64_t thunk for @escaping @callee_guaranteed (@unowned BSSettingDiffTypes, @unowned UnsafeMutableRawPointer?) -> ()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v5 = *(void (**)(uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(a2, a3);

  return swift_release();
}

id ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit()
{
  return ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(0, type metadata accessor for ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector);
}

id ClarityUIListLayoutSettingsDiffAction.diffInspector.getter()
{
  uint64_t v1 = OBJC_IVAR____TtC7SwiftUI37ClarityUIListLayoutSettingsDiffAction____lazy_storage___diffInspector;
  uint64_t v2 = *(void **)(v0 + OBJC_IVAR____TtC7SwiftUI37ClarityUIListLayoutSettingsDiffAction____lazy_storage___diffInspector);
  if (v2)
  {
    id v3 = *(id *)(v0 + OBJC_IVAR____TtC7SwiftUI37ClarityUIListLayoutSettingsDiffAction____lazy_storage___diffInspector);
  }
  else
  {
    id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector()), sel_init);
    v9[4] = specialized closure #1 in ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.observeListLayout(handler:);
    v9[5] = 0;
    v9[0] = MEMORY[0x1E4F143A8];
    v9[1] = 1107296256;
    id v9[2] = thunk for @escaping @callee_guaranteed (@unowned BSSettingDiffTypes, @unowned UnsafeMutableRawPointer?) -> ();
    void v9[3] = &block_descriptor_36;
    unsigned int v5 = _Block_copy(v9);
    swift_release();
    objc_msgSend(v4, sel_observeOtherSetting_withBlock_, 312002, v5);
    _Block_release(v5);
    unint64_t v6 = *(void **)(v0 + v1);
    *(void *)(v0 + v1) = v4;
    id v3 = v4;

    uint64_t v2 = 0;
  }
  id v7 = v2;
  return v3;
}

id ClarityUIListLayoutSettingsDiffAction.__deallocating_deinit(uint64_t a1)
{
  return ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(a1, type metadata accessor for ClarityUIListLayoutSettingsDiffAction);
}

id ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector.__deallocating_deinit(uint64_t a1, uint64_t (*a2)(void))
{
  v4.receiver = v2;
  v4.super_class = (Class)a2();
  return objc_msgSendSuper2(&v4, sel_dealloc);
}

uint64_t type metadata accessor for ClarityUIListLayoutSettingsDiffAction()
{
  return self;
}

uint64_t type metadata accessor for ClarityUIListLayoutSettingsDiffAction.SettingsDiffInspector()
{
  return self;
}

void NavigationColumnState.change(from:)(uint64_t a1)
{
  _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0(a1, (uint64_t)v85, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  memcpy(__dst, v1, 0x12BuLL);
  _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v87, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  int v2 = _s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)v87);
  uint64_t v3 = __dst[14];
  uint64_t v4 = __dst[15];
  uint64_t v5 = __dst[16];
  uint64_t v6 = __dst[17];
  uint64_t v7 = __dst[18];
  uint64_t v8 = __dst[21];
  uint64_t v80 = __dst[20];
  uint64_t v81 = __dst[22];
  uint64_t v9 = __dst[23];
  unint64_t v10 = __dst[14] & 0xF000000000000007;
  uint64_t v82 = __dst[21];
  if (v2 != 1)
  {
    uint64_t v79 = __dst[19];
    if (v10 == 0xF000000000000007)
    {
      if (LOBYTE(__dst[37]) == 1)
      {
        outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of NavigationColumnState?);
        outlined retain of NavigationColumnState(__dst);
        MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
        uint64_t v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
        goto LABEL_11;
      }
      _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v84, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
      uint64_t v13 = (uint64_t)outlined retain of NavigationColumnState(v84);
    }
    else
    {
      if (LOBYTE(__dst[37]) == 1)
      {
        _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v84, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
        uint64_t v13 = (uint64_t)outlined retain of NavigationColumnState(v84);
LABEL_11:
        char v14 = v97;
        if ((~v88 & 0xF000000000000007) != 0)
        {
          if (v97 != 1)
          {
            _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v84, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined retain of NavigationColumnState(v84);
            MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
            outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
            goto LABEL_84;
          }
        }
        else
        {
          if (v97 != 1) {
            goto LABEL_84;
          }
          _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v84, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          outlined retain of NavigationColumnState(v84);
          MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
          uint64_t v13 = outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
          char v14 = 1;
        }
LABEL_29:
        uint64_t v20 = v82;
        uint64_t v67 = v4;
        uint64_t v77 = v3;
        unint64_t v72 = v9;
        if (v82 < 0)
        {
          if (v10 == 0xF000000000000007)
          {
            if (v14)
            {
              uint64_t v22 = v6;
              outlined retain of NavigationColumnState(__dst);
              MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
              uint64_t v68 = 0;
LABEL_45:
              uint64_t v63 = v7;
              uint64_t v74 = v5;
              uint64_t v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
              goto LABEL_47;
            }
            goto LABEL_38;
          }
        }
        else if (v10 == 0xF000000000000007)
        {
          if (v14)
          {
            outlined retain of NavigationColumnState(__dst);
            MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
            outlined release of NavigationColumnState(__dst);
            uint64_t v21 = v82;
LABEL_44:
            outlined retain of NavigationColumnState(__dst);
            outlined copy of NavigationColumnState.ColumnContent(v3, v4, v5, v6, v7, v79, v80, v21);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v22 = v6;
            outlined consume of NavigationColumnState.ReplacedRoot?(v3, v4, v5, v6);
            uint64_t v68 = v21;
            goto LABEL_45;
          }
          goto LABEL_38;
        }
        if (v14) {
          goto LABEL_43;
        }
        outlined retain of NavigationColumnState(__dst);
        MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
        uint64_t v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
LABEL_38:
        if ((~v88 & 0xF000000000000007) != 0)
        {
          if (v97 == 1) {
            goto LABEL_82;
          }
          _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v84, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          outlined retain of NavigationColumnState(v84);
          MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
          uint64_t v13 = outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
          uint64_t v20 = v82;
        }
        else
        {
          uint64_t v20 = v82;
          if (v97 == 1)
          {
            _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v85, (uint64_t)v84, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined retain of NavigationColumnState(v84);
            MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
            outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
            goto LABEL_82;
          }
        }
LABEL_43:
        uint64_t v21 = v20;
        if (v20 < 0)
        {
          uint64_t v22 = v6;
          uint64_t v63 = v7;
          uint64_t v74 = v5;
          uint64_t v68 = 0;
LABEL_47:
          uint64_t v23 = v88;
          uint64_t v24 = v89;
          uint64_t v25 = v90;
          uint64_t v26 = v91;
          uint64_t v27 = v95;
          uint64_t v76 = v22;
          uint64_t v66 = v95;
          uint64_t v70 = v93;
          uint64_t v71 = v96;
          uint64_t v60 = v88;
          uint64_t v73 = v89;
          uint64_t v64 = v90;
          uint64_t v61 = v92;
          uint64_t v62 = v91;
          uint64_t v59 = v94;
          if (v95 < 0)
          {
            uint64_t v30 = v68;
            if (!v68)
            {
              int v65 = 1;
              uint64_t v41 = v82;
              uint64_t v27 = v95;
              uint64_t v31 = v77;
              unint64_t v69 = 1;
              if ((v82 & 0x8000000000000000) == 0)
              {
LABEL_68:
                outlined retain of NavigationColumnState(__dst);
                outlined copy of NavigationColumnState.ColumnContent(v31, v67, v74, v76, v63, v79, v80, v41);
                swift_release();
                uint64_t v27 = v66;
                outlined consume of NavigationColumnState.ReplacedRoot?(v31, v67, v74, v76);
                outlined release of NavigationColumnState(__dst);
                uint64_t v42 = v81;
                goto LABEL_69;
              }
LABEL_64:
              uint64_t v42 = MEMORY[0x1E4FBC860];
              specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
LABEL_69:
              uint64_t v44 = *(void *)(v42 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if (v27 < 0)
              {
                uint64_t v45 = MEMORY[0x1E4FBC860];
                specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
              }
              else
              {
                outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of NavigationColumnState?);
                outlined copy of NavigationColumnState.ColumnContent(v60, v73, v64, v62, v61, v70, v59, v27);
                swift_release();
                outlined consume of NavigationColumnState.ReplacedRoot?(v60, v73, v64, v62);
                outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                uint64_t v45 = v71;
              }
              uint64_t v46 = *(void *)(v45 + 16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              type metadata accessor for (Int, Int, NavigationState.StackContent.ChangeKind)();
              if (!v65)
              {
                if (v44 | v46)
                {
                  outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                  if (v46 && !v44 && __OFADD__(v69, v46))
                  {
LABEL_106:
                    __break(1u);
                    goto LABEL_107;
                  }
                  return;
                }
LABEL_78:
                outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                return;
              }
              if (v69 < 2)
              {
                if (!(v44 | v46)) {
                  goto LABEL_78;
                }
                if (v69)
                {
                  if (v44 == 1)
                  {
                    uint64_t v47 = v67;
                    uint64_t v48 = v63;
                    uint64_t v49 = v82;
                    if (!v46) {
                      goto LABEL_78;
                    }
                  }
                  else
                  {
                    uint64_t v47 = v67;
                    uint64_t v48 = v63;
                    uint64_t v49 = v82;
                    if (!v46) {
                      goto LABEL_82;
                    }
                    if (!v44) {
                      goto LABEL_78;
                    }
                  }
                  uint64_t v50 = v46 - v44;
                  if (__OFSUB__(v46, v44))
                  {
LABEL_107:
                    __break(1u);
LABEL_108:
                    __break(1u);
                    return;
                  }
                  if (v50 < 0)
                  {
                    BOOL v51 = __OFSUB__(0, v50);
                    uint64_t v50 = v44 - v46;
                    if (v51) {
                      goto LABEL_108;
                    }
                  }
                  if (v50 < 2)
                  {
                    if (v49 < 0)
                    {
                      uint64_t v81 = MEMORY[0x1E4FBC860];
                      unint64_t v72 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
                      uint64_t v53 = v64;
                      uint64_t v55 = v61;
                      uint64_t v54 = v62;
                      uint64_t v52 = v73;
                    }
                    else
                    {
                      outlined retain of NavigationColumnState(__dst);
                      outlined copy of NavigationColumnState.ColumnContent(v77, v47, v74, v76, v48, v79, v80, v49);
                      swift_release();
                      uint64_t v52 = v73;
                      outlined consume of NavigationColumnState.ReplacedRoot?(v77, v47, v74, v76);
                      outlined release of NavigationColumnState(__dst);
                      uint64_t v53 = v64;
                      uint64_t v55 = v61;
                      uint64_t v54 = v62;
                    }
                    if (v66 < 0)
                    {
                      uint64_t v57 = MEMORY[0x1E4FBC860];
                      specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
                    }
                    else
                    {
                      outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of NavigationColumnState?);
                      outlined copy of NavigationColumnState.ColumnContent(v60, v52, v53, v54, v55, v70, v59, v66);
                      swift_release();
                      uint64_t v56 = v52;
                      uint64_t v57 = v71;
                      outlined consume of NavigationColumnState.ReplacedRoot?(v60, v56, v53, v54);
                      outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                    }
                    uint64_t v58 = v98;
                    specialized Sequence.allSatisfy(_:)(v81, v72, v57);
                    uint64_t v98 = v58;
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                    return;
                  }
                }
LABEL_82:
                outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                return;
              }
              if (v69 == 2) {
                goto LABEL_82;
              }
LABEL_84:
              outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
              return;
            }
            uint64_t v27 = v95;
            uint64_t v31 = v77;
          }
          else
          {
            uint64_t v28 = v94;
            uint64_t v29 = v92;
            outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of NavigationColumnState?);
            outlined copy of NavigationColumnState.ColumnContent(v23, v24, v25, v26, v29, v70, v28, v27);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ReplacedRoot?(v23, v73, v25, v26);
            uint64_t v13 = outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
            uint64_t v30 = v68;
            if (!v68)
            {
              uint64_t v31 = v77;
              if (!v27)
              {
LABEL_59:
                uint64_t v39 = 1;
                int v65 = 1;
                goto LABEL_67;
              }
              uint64_t v37 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 80))(v13);
              if ((v37 & 1) == 0)
              {
                uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v27 + 88))(v37, v38);
                swift_release();
                int v65 = 0;
                goto LABEL_67;
              }
LABEL_58:
              swift_release();
              goto LABEL_59;
            }
            uint64_t v31 = v77;
            if (v27)
            {
              uint64_t v32 = v98;
              uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v68 + 136))(v27);
              uint64_t v98 = v32;
              if (v32)
              {
                outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);
                swift_release();
                swift_release();
                return;
              }
              uint64_t v39 = v33;
              char v43 = v34;
              swift_release();
              swift_release();
              int v65 = v43 & 1;
LABEL_67:
              uint64_t v41 = v82;
              unint64_t v69 = v39;
              if ((v82 & 0x8000000000000000) == 0) {
                goto LABEL_68;
              }
              goto LABEL_64;
            }
          }
          uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 80))(v13);
          if ((v35 & 1) == 0)
          {
            BOOL v40 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v30 + 88))(v35, v36) != 1;
            swift_release();
            uint64_t v39 = 2 * v40;
            int v65 = 1;
            goto LABEL_67;
          }
          goto LABEL_58;
        }
        goto LABEL_44;
      }
      outlined retain of NavigationColumnState?((uint64_t)v85, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of NavigationColumnState?);
      outlined retain of NavigationColumnState(__dst);
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
      uint64_t v13 = (uint64_t)outlined release of NavigationColumnState(__dst);
    }
    char v14 = 0;
    goto LABEL_29;
  }
  if (__dst[21] < 0)
  {
    if (v10 == 0xF000000000000007)
    {
      char v12 = 1;
      if (LOBYTE(__dst[37]) != 1) {
        return;
      }
      uint64_t v11 = __dst[15];
      uint64_t v78 = __dst[19];
      goto LABEL_19;
    }
LABEL_17:
    if (LOBYTE(__dst[37]) == 1) {
      return;
    }
    uint64_t v11 = __dst[15];
    uint64_t v78 = __dst[19];
    char v12 = 0;
    goto LABEL_19;
  }
  if (v10 != 0xF000000000000007) {
    goto LABEL_17;
  }
  uint64_t v11 = __dst[15];
  uint64_t v78 = __dst[19];
  if (LOBYTE(__dst[37]) != 1)
  {
LABEL_21:
    uint64_t v83 = *(uint64_t (**)(uint64_t))(*(void *)v8 + 88);
    uint64_t v15 = v8;
    outlined retain of NavigationColumnState(__dst);
    uint64_t v75 = v6;
    outlined copy of NavigationColumnState.ColumnContent(v3, v11, v5, v6, v7, v78, v80, v15);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = v83(v16);
    swift_release();
    uint64_t v18 = v17 + 1;
    if (__OFADD__(v17, 1))
    {
      __break(1u);
    }
    else
    {
      uint64_t v19 = *(void *)(v81 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NavigationColumnState.ColumnContent(v3, v11, v5, v75, v7, v78, v80, v15);
      outlined release of NavigationColumnState(__dst);
      if (!__OFADD__(v18, v19)) {
        return;
      }
    }
    __break(1u);
    goto LABEL_106;
  }
  char v12 = 1;
LABEL_19:
  outlined retain of NavigationColumnState(__dst);
  MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
  outlined release of NavigationColumnState(__dst);
  uint64_t v8 = v82;
  if ((v82 & 0x8000000000000000) == 0 && (v12 & 1) == 0) {
    goto LABEL_21;
  }
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3 + 64);
  if (v4 < a3 || (a3 | result) < 0 || v4 < result)
  {
    __break(1u);
    goto LABEL_16;
  }
  uint64_t v5 = a3 - result;
  if (a2 >= 1)
  {
    if (v5 < 0 || v5 >= a2) {
      goto LABEL_11;
    }
    return 0;
  }
  if (v5 <= 0 && v5 > a2) {
    return 0;
  }
LABEL_11:
  BOOL v6 = __OFADD__(result, a2);
  result += a2;
  if (v6)
  {
LABEL_16:
    __break(1u);
LABEL_17:
    __break(1u);
    return result;
  }
  if (result < 0 || v4 < result) {
    goto LABEL_17;
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t result = type metadata accessor for _ArchivedViewStates(0);
  unint64_t v8 = *(void *)(*(void *)(v3 + *(int *)(result + 20) + 8) + 16);
  if (v8 < a1 || v8 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v10 = a3 - a1;
  if (a2 >= 1)
  {
    if (v10 < 0 || v10 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v10 <= 0 && v10 > a2) {
    return 0;
  }
LABEL_13:
  unint64_t result = a1 + a2;
  if (__OFADD__(a1, a2)) {
    goto LABEL_16;
  }
  if (result > v8) {
LABEL_17:
  }
    __break(1u);
  return result;
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (a1 < 0 || result < a1)
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if (a3 < 0 || result < a3) {
    goto LABEL_17;
  }
  uint64_t v7 = a3 - a1;
  if (a2 >= 1)
  {
    if (v7 < 0 || v7 >= a2) {
      goto LABEL_12;
    }
    return 0;
  }
  if (v7 <= 0 && v7 > a2) {
    return 0;
  }
LABEL_12:
  BOOL v9 = __OFADD__(a1, a2);
  uint64_t v8 = a1 + a2;
  if (v9)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  uint64_t result = _VariadicView_Children.endIndex.getter();
  if ((v8 & 0x8000000000000000) == 0 && result >= v8) {
    return v8;
  }
LABEL_19:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v3 + 88);
  uint64_t v8 = v7();
  BOOL v9 = *(uint64_t (**)(void))(*(void *)v3 + 96);
  uint64_t result = v9();
  if (v8 > a1 || result < a1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v12 = ((uint64_t (*)(uint64_t))v7)(result);
  uint64_t result = v9();
  if (v12 > a3 || result < a3) {
    goto LABEL_24;
  }
  char v14 = a3 - a1;
  if (__OFSUB__(a3, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a2 >= 1)
  {
    if (v14 < 0 || v14 >= (unint64_t)a2) {
      goto LABEL_17;
    }
    return 0;
  }
  if (v14 <= 0 && v14 > a2) {
    return 0;
  }
LABEL_17:
  uint64_t v16 = __OFADD__(a1, a2);
  uint64_t v15 = a1 + a2;
  if (v16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v17 = ((uint64_t (*)(uint64_t))v7)(result);
  uint64_t result = v9();
  if (v15 >= v17 && result >= v15) {
    return v15;
  }
LABEL_27:
  __break(1u);
  return result;
}

{
  uint64_t v3;
  uint64_t (*v7)(void);
  uint64_t v8;
  uint64_t (*v9)(void);
  uint64_t result;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;

  uint64_t v7 = *(uint64_t (**)(void))(*(void *)v3 + 88);
  uint64_t v8 = v7();
  BOOL v9 = *(uint64_t (**)(void))(*(void *)v3 + 96);
  uint64_t result = v9();
  if (v8 > a1 || result < a1)
  {
    __break(1u);
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  char v12 = ((uint64_t (*)(uint64_t))v7)(result);
  uint64_t result = v9();
  if (v12 > a3 || result < a3) {
    goto LABEL_24;
  }
  char v14 = a3 - a1;
  if (__OFSUB__(a3, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  if (a2 >= 1)
  {
    if (v14 < 0 || v14 >= (unint64_t)a2) {
      goto LABEL_17;
    }
    return 0;
  }
  if (v14 <= 0 && v14 > a2) {
    return 0;
  }
LABEL_17:
  uint64_t v16 = __OFADD__(a1, a2);
  uint64_t v15 = a1 + a2;
  if (v16)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v17 = ((uint64_t (*)(uint64_t))v7)(result);
  uint64_t result = v9();
  if (v15 >= v17 && result >= v15) {
    return v15;
  }
LABEL_27:
  __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v6 = *(void *)(a6 + 16);
  if (v6 < result || v6 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v8 = a3 - result;
  if (a2 >= 1)
  {
    if (v8 < 0 || v8 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v8 <= 0 && v8 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v9 = __OFADD__(result, a2);
  result += a2;
  if (v9) {
    goto LABEL_16;
  }
  if (result > v6) {
LABEL_17:
  }
    __break(1u);
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  if (((a3 ^ result) & 0x80000000) != 0)
  {
    if ((result & 0x80000000) == 0) {
      int v5 = result;
    }
    else {
      int v5 = -(int)result;
    }
    if (a3 >= 0) {
      int v6 = a3;
    }
    else {
      int v6 = -a3;
    }
    BOOL v7 = __CFADD__(v5, v6);
    uint64_t v4 = (v5 + v6);
    if (v7) {
      goto LABEL_33;
    }
    if ((result & 0x80000000) == 0) {
      uint64_t v4 = -v4;
    }
    if (a2 > 0) {
      goto LABEL_4;
    }
  }
  else
  {
    LODWORD(v4) = a3 - result;
    if (__OFSUB__(a3, result))
    {
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v4 = (int)v4;
    if (a2 > 0)
    {
LABEL_4:
      if (v4 < 0 || v4 >= a2) {
        goto LABEL_20;
      }
LABEL_19:
      LODWORD(v8) = 0;
      unsigned __int8 v9 = 1;
      return v8 | ((unint64_t)v9 << 32);
    }
  }
  if (v4 <= 0 && v4 > a2) {
    goto LABEL_19;
  }
LABEL_20:
  uint64_t v8 = a2 + (int)result;
  if (__OFADD__(a2, (int)result))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v8 < (uint64_t)0xFFFFFFFF80000000)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v8 > 0x7FFFFFFF)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  if ((int)v8 >= (int)a4)
  {
    if (SHIDWORD(a4) >= (int)v8)
    {
      unsigned __int8 v9 = 0;
      return v8 | ((unint64_t)v9 << 32);
    }
    goto LABEL_32;
  }
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t specialized Collection<>.dismiss(from:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a2 + 16);
  if (v3 < result)
  {
    __break(1u);
    goto LABEL_19;
  }
  unint64_t v4 = result;
  if (result < 0)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = specialized Sequence.reversed()(v4, v3, a2, a3);
  int64_t v8 = *(void *)(v7 + 16);
  if (v8)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v8, 0);
    uint64_t v9 = v17;
    uint64_t v10 = (uint64_t *)(v7 + 80);
    do
    {
      uint64_t v12 = *(v10 - 1);
      uint64_t v11 = *v10;
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v12;
      *(void *)(v13 + 24) = v11;
      swift_retain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v9 + 16) + 1, 1);
        uint64_t v9 = v17;
      }
      unint64_t v15 = *(void *)(v9 + 16);
      unint64_t v14 = *(void *)(v9 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1);
        uint64_t v9 = v17;
      }
      *(void *)(v9 + 16) = v15 + 1;
      uint64_t v16 = v9 + 16 * v15;
      *(void *)(v16 + 32) = partial apply for thunk for @callee_guaranteed () -> ();
      *(void *)(v16 + 40) = v13;
      v10 += 7;
      --v8;
    }
    while (v8);
    swift_bridgeObjectRelease();
    if (*(void *)(v9 + 16)) {
      goto LABEL_11;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v9 = MEMORY[0x1E4FBC860];
    if (*(void *)(MEMORY[0x1E4FBC860] + 16))
    {
LABEL_11:
      *(void *)(swift_allocObject() + 16) = v9;
      static Update.enqueueAction(_:)();
      return swift_release();
    }
  }

  return swift_bridgeObjectRelease();
}

void *NavigationColumnState.boundPathChange(to:environment:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = v3;
  uint64_t v24 = *a2;
  uint64_t v25 = a2[1];
  memcpy(__dst, v3, 0x12BuLL);
  if ((*((void *)&__dst[10] + 1) & 0x8000000000000000) != 0)
  {
    __break(1u);
    uint64_t result = (void *)swift_unexpectedError();
    __break(1u);
  }
  else
  {
    uint64_t v5 = *((void *)&__dst[7] + 1);
    uint64_t v6 = *((void *)&__dst[8] + 1);
    long long v7 = __dst[9];
    uint64_t v8 = *(void *)&__dst[10];
    uint64_t v9 = *((void *)&__dst[11] + 1);
    uint64_t v10 = *(void *)&__dst[11];
    int v33 = DWORD2(__dst[0]);
    uint64_t v32 = *(void *)&__dst[1];
    char v31 = BYTE8(__dst[1]);
    long long v29 = __dst[3];
    long long v30 = __dst[2];
    uint64_t v27 = *((void *)&__dst[4] + 1);
    uint64_t v28 = *(void *)&__dst[4];
    long long v36 = *(_OWORD *)((char *)&__dst[5] + 8);
    uint64_t v11 = *(void *)&__dst[7];
    uint64_t v34 = *((void *)&__dst[6] + 1);
    long long v42 = __dst[13];
    uint64_t v48 = *((void *)&__dst[14] + 1);
    long long v12 = __dst[15];
    uint64_t v41 = *(void *)&__dst[14];
    uint64_t v39 = *(void *)&__dst[16];
    char v38 = BYTE8(__dst[16]);
    uint64_t v37 = *(void *)&__dst[17];
    uint64_t v44 = *(void *)&__dst[18];
    char v43 = BYTE8(__dst[18]);
    __int16 v45 = *(_WORD *)((char *)&__dst[18] + 9);
    uint64_t v13 = *(void *)&__dst[8];
    uint64_t v50 = *(void *)&__dst[8];
    uint64_t v51 = *((void *)&__dst[10] + 1);
    outlined copy of NavigationColumnState.ColumnContent(*(uint64_t *)&__dst[7], *((uint64_t *)&__dst[7] + 1), *(uint64_t *)&__dst[8], *((uint64_t *)&__dst[8] + 1), *(uint64_t *)&__dst[9], *((uint64_t *)&__dst[9] + 1), *(uint64_t *)&__dst[10], *((uint64_t *)&__dst[10] + 1));
    long long v26 = __dst[12];
    uint64_t v14 = *(void *)&__dst[0];
    uint64_t v15 = *(void *)&__dst[5];
    uint64_t v16 = *((void *)&__dst[17] + 1);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NavigationColumnState.ReplacedRoot?(v11, v5, v13, v6);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    swift_retain();
    swift_release();
    v4[14] = v11;
    v4[15] = v5;
    v4[16] = v50;
    v4[17] = v6;
    *((_OWORD *)v4 + 9) = v7;
    v4[20] = v8;
    v4[21] = a1;
    v4[22] = v10;
    v4[23] = v9;
    uint64_t v54 = v14;
    int v55 = v33;
    uint64_t v56 = v32;
    char v57 = v31;
    long long v58 = v30;
    long long v59 = v29;
    uint64_t v60 = v28;
    uint64_t v61 = v27;
    uint64_t v62 = v15;
    long long v63 = v36;
    uint64_t v64 = v34;
    uint64_t v65 = v11;
    uint64_t v66 = v5;
    uint64_t v67 = v50;
    uint64_t v68 = v6;
    long long v69 = v7;
    uint64_t v70 = v8;
    uint64_t v71 = a1;
    uint64_t v35 = v9;
    uint64_t v72 = v10;
    uint64_t v73 = v9;
    long long v74 = v26;
    long long v75 = v42;
    uint64_t v76 = v41;
    uint64_t v77 = v48;
    long long v78 = v12;
    uint64_t v79 = v39;
    char v80 = v38;
    uint64_t v81 = v37;
    uint64_t v82 = v16;
    uint64_t v83 = v44;
    char v84 = v43;
    __int16 v85 = v45;
    outlined retain of NavigationColumnState(&v54);
    outlined copy of NavigationColumnState.ReplacedRoot?(v11, v5, v50, v6);
    swift_retain();
    uint64_t v40 = v11;
    uint64_t v46 = v6;
    outlined consume of NavigationColumnState.ReplacedRoot?(v11, v5, v50, v6);
    outlined release of NavigationColumnState(&v54);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 136))(v51);
    char v19 = v18;
    swift_release();
    if ((v19 & 1) != 0 && v17 == 1)
    {
      swift_release();
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v52);
      __src[0] = xmmword_18834FC50;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(v52, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 0;
    }
    else
    {
      outlined copy of NavigationColumnState.ReplacedRoot?(v11, v5, v50, v46);
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized Collection<>.dismiss(from:)(0, v10, v35);
      outlined consume of NavigationColumnState.ReplacedRoot?(v11, v5, v50, v46);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release();
      unint64_t v20 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      swift_release();
      v4[14] = v40;
      v4[15] = v5;
      v4[16] = v50;
      v4[17] = v46;
      *((_OWORD *)v4 + 9) = v7;
      v4[20] = v8;
      v4[21] = a1;
      v4[22] = MEMORY[0x1E4FBC860];
      v4[23] = v20;
      *((unsigned char *)v4 + 296) = 0;
      v4[29] = v24;
      v4[30] = v25;
      swift_retain();
      swift_retain();
      swift_release();
      swift_release();
      if (v19)
      {
        uint64_t v21 = qword_188390BE8[v17];
        char v22 = 2;
      }
      else
      {
        char v22 = 1;
        uint64_t v21 = v17;
      }
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v52);
      __src[0] = (unint64_t)v21;
      LOBYTE(__src[1]) = v22;
      outlined init with take of NavigationState.UpdateResult(v52, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 1;
    }
    return memcpy(a3, __src, 0x11CuLL);
  }
  return result;
}

void *NavigationColumnState.pop(_:request:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v6 = a1;
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)&v179[32] = *(_OWORD *)(a2 + 96);
  *(_OWORD *)&v179[48] = v7;
  uint64_t v180 = *(void *)(a2 + 128);
  long long v8 = *(_OWORD *)(a2 + 48);
  long long v177 = *(_OWORD *)(a2 + 32);
  long long v178 = v8;
  long long v9 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)v179 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)&v179[16] = v9;
  long long v10 = *(_OWORD *)(a2 + 16);
  long long v175 = *(_OWORD *)a2;
  long long v176 = v10;
  int64x2_t v11 = *(int64x2_t *)(a2 + 136);
  int8x16_t v132 = *(int8x16_t *)(a2 + 168);
  int8x16_t v133 = *(int8x16_t *)(a2 + 152);
  uint64_t v12 = *(void *)(a3 + 16);
  if (v12 != 1)
  {
    uint64_t v13 = *(void *)(a3 + 32);
    if (v13)
    {
      unsigned __int16 v14 = *(_WORD *)(a3 + 64);
      uint64_t v16 = *(void *)(a3 + 48);
      uint64_t v15 = *(void *)(a3 + 56);
      uint64_t v17 = *(void *)(a3 + 40);
      uint64_t v18 = *(void *)(a3 + 24);
      uint64_t v20 = *(void *)a3;
      uint64_t v19 = *(void *)(a3 + 8);
      uint64_t v135 = a1;
      char v141 = 0;
      if (*((unsigned __int8 *)v5 + 24) >= 3u) {
        char v21 = 3;
      }
      else {
        char v21 = *((unsigned char *)v5 + 24);
      }
      outlined init with take of NavigationUpdateEvent.Action((uint64_t)&v135, (uint64_t)v142);
      char v143 = v21;
      outlined init with copy of NavigationUpdateEvent((uint64_t)v142, (uint64_t)__dst);
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = v13;
      *(void *)(v22 + 24) = v17;
      long long v23 = __dst[1];
      *(_OWORD *)(v22 + 32) = __dst[0];
      *(_OWORD *)(v22 + 48) = v23;
      *(_OWORD *)(v22 + 64) = __dst[2];
      *(_OWORD *)(v22 + 74) = *(long long *)((char *)&__dst[2] + 10);
      outlined copy of AppIntentExecutor?(v13);
      outlined copy of AppIntentExecutor?(v13);
      outlined copy of NavigationSplitViewState?(v20, v19, v12, v18, v13, v17, v16, v15, v14, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      static Update.enqueueAction(_:)();
      swift_release();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v13);
      outlined destroy of NavigationUpdateEvent((uint64_t)v142);
      outlined copy of NavigationSplitViewState?(v20, v19, v12, v18, v13, v17, v16, v15, v14, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v144);
      __dst[0] = xmmword_18834FC50;
      LOBYTE(__dst[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(&v144, (long long *)((char *)&__dst[1] + 8));
      *(void *)((char *)&__dst[17] + 4) = 0;
      uint64_t v24 = a4;
      return memcpy(v24, __dst, 0x11CuLL);
    }
  }
  int8x16_t v122 = *(int8x16_t *)(a2 + 136);
  if (a1 < 1) {
    goto LABEL_11;
  }
  memcpy(__dst, v5, 0x12BuLL);
  if ((*((void *)&__dst[10] + 1) & 0x8000000000000000) == 0)
  {
    long long v25 = __dst[7];
    long long v26 = __dst[8];
    long long v27 = __dst[9];
    uint64_t v130 = *((void *)&__dst[10] + 1);
    uint64_t v28 = *(void *)&__dst[10];
    long long v29 = __dst[11];
    outlined copy of NavigationColumnState.ColumnContent(*(uint64_t *)&__dst[7], *((uint64_t *)&__dst[7] + 1), *(uint64_t *)&__dst[8], *((uint64_t *)&__dst[8] + 1), *(uint64_t *)&__dst[9], *((uint64_t *)&__dst[9] + 1), *(uint64_t *)&__dst[10], *((uint64_t *)&__dst[10] + 1));
    outlined copy of NavigationColumnState.ColumnContent(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, v130);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    swift_release();
    outlined consume of NavigationColumnState.ReplacedRoot?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1));
    uint64_t v124 = *(void *)(v29 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NavigationColumnState.ColumnContent(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, v130);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    if (v124)
    {
      outlined copy of NavigationColumnState.ColumnContent(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1), v27, *((uint64_t *)&v27 + 1), v28, v130);
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      swift_release();
      outlined consume of NavigationColumnState.ReplacedRoot?(v25, *((uint64_t *)&v25 + 1), v26, *((uint64_t *)&v26 + 1));
      outlined release of NavigationColumnState((uint64_t *)__dst);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      long long v144 = v29;
      v5[14] = 0xF000000000000007;
      *(_OWORD *)(v5 + 15) = 0u;
      *(_OWORD *)(v5 + 17) = 0u;
      *(_OWORD *)(v5 + 19) = 0u;
      v5[22] = 0;
      v5[23] = 0;
      v5[21] = 0x8000000000000000;
      int64_t v30 = specialized IdentifiedArray.popLast(_:)(*((int64_t *)&v25 + 1));
      uint64_t v125 = v31;
      int64_t v128 = v30;
      uint64_t v33 = v32;
      uint64_t v116 = v34;
      uint64_t v35 = (void *)swift_allocObject();
      v35[2] = v128;
      v35[3] = v33;
      v35[4] = v125;
      v35[5] = v116;
      static Update.enqueueAction(_:)();
      swift_release();
      *((_OWORD *)v5 + 7) = v25;
      *((_OWORD *)v5 + 8) = v26;
      *((_OWORD *)v5 + 9) = v27;
      v5[20] = v28;
      v5[21] = v130;
      v11.i64[1] = *((void *)&v144 + 1);
      *((_OWORD *)v5 + 11) = v144;
      uint64_t v6 = a1 - *((void *)&v25 + 1);
      if (a1 - *((void *)&v25 + 1) < 1)
      {
LABEL_11:
        char v126 = 2;
        uint64_t v129 = 1;
        uint64_t v131 = v6;
        goto LABEL_38;
      }
    }
    else
    {
      uint64_t v6 = a1;
    }
  }
  uint64_t v131 = v6;
  memcpy(__dst, v5, 0x12BuLL);
  uint64_t v127 = *((void *)&__dst[10] + 1);
  if ((*((void *)&__dst[10] + 1) & 0x8000000000000000) != 0) {
    goto LABEL_15;
  }
  long long v36 = __dst[7];
  long long v37 = __dst[8];
  long long v38 = __dst[9];
  uint64_t v117 = *(void *)&__dst[9];
  uint64_t v39 = *(void *)&__dst[10];
  long long v40 = __dst[11];
  outlined copy of NavigationColumnState.ColumnContent(*(uint64_t *)&__dst[7], *((uint64_t *)&__dst[7] + 1), *(uint64_t *)&__dst[8], *((uint64_t *)&__dst[8] + 1), *(uint64_t *)&__dst[9], *((uint64_t *)&__dst[9] + 1), *(uint64_t *)&__dst[10], *((uint64_t *)&__dst[10] + 1));
  outlined copy of NavigationColumnState.ColumnContent(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v39, v127);
  outlined retain of NavigationColumnState((uint64_t *)__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v39;
  uint64_t v42 = outlined consume of NavigationColumnState.ReplacedRoot?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1));
  LOBYTE(v39) = (*(uint64_t (**)(uint64_t))(*(void *)v127 + 80))(v42);
  swift_release();
  outlined consume of NavigationColumnState.ColumnContent(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v117, *((uint64_t *)&v38 + 1), v41, v127);
  outlined release of NavigationColumnState((uint64_t *)__dst);
  if (v39)
  {
LABEL_15:
    char v126 = 2;
    uint64_t v129 = 1;
    goto LABEL_22;
  }
  outlined copy of NavigationColumnState.ColumnContent(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1), v117, *((uint64_t *)&v38 + 1), v41, v127);
  outlined retain of NavigationColumnState((uint64_t *)__dst);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ReplacedRoot?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1));
  char v43 = outlined release of NavigationColumnState((uint64_t *)__dst);
  uint64_t v44 = (*(uint64_t (**)(uint64_t *))(*(void *)v127 + 88))(v43);
  swift_release();
  v5[14] = 0xF000000000000007;
  uint64_t v45 = v131;
  *(_OWORD *)(v5 + 15) = 0u;
  if (v44 < v131) {
    uint64_t v45 = v44;
  }
  uint64_t v129 = v45;
  *(_OWORD *)(v5 + 17) = 0uLL;
  *(_OWORD *)(v5 + 19) = 0uLL;
  v5[22] = 0;
  v5[23] = 0;
  v5[21] = 0x8000000000000000;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v127 + 104))(isUniquelyReferenced_nonNull_native, v47);
    swift_release();
    uint64_t v127 = v48;
  }
  (*(void (**)(uint64_t))(*(void *)v127 + 128))(v129);
  *((_OWORD *)v5 + 7) = v36;
  *((_OWORD *)v5 + 8) = v37;
  v5[18] = v117;
  v5[19] = *((void *)&v38 + 1);
  v5[20] = v41;
  v5[21] = v127;
  *((_OWORD *)v5 + 11) = v40;
  uint64_t v50 = v5[11];
  uint64_t v49 = v5[12];
  uint64_t v51 = v5[13];
  int v52 = *((_DWORD *)v5 + 2);
  uint64_t v53 = v5[2];
  char v54 = *((unsigned char *)v5 + 24);
  uint64_t v55 = v5[28];
  uint64_t v56 = v5[31];
  uint64_t v57 = v5[32];
  char v58 = *((unsigned char *)v5 + 264);
  uint64_t v59 = v5[34];
  uint64_t v60 = v5[36];
  char v61 = *((unsigned char *)v5 + 296);
  __int16 v62 = *(_WORD *)((char *)v5 + 297);
  *(void *)&long long v144 = *v5;
  DWORD2(v144) = v52;
  uint64_t v145 = v53;
  char v146 = v54;
  long long v63 = *((_OWORD *)v5 + 3);
  long long v147 = *((_OWORD *)v5 + 2);
  long long v148 = v63;
  long long v149 = *((_OWORD *)v5 + 4);
  uint64_t v150 = v5[10];
  uint64_t v151 = v50;
  uint64_t v152 = v49;
  uint64_t v114 = v51;
  uint64_t v115 = v49;
  uint64_t v153 = v51;
  long long v154 = v36;
  long long v155 = v37;
  uint64_t v156 = v117;
  uint64_t v157 = *((void *)&v38 + 1);
  uint64_t v158 = v41;
  uint64_t v159 = v127;
  long long v160 = v40;
  long long v64 = *((_OWORD *)v5 + 13);
  long long v161 = *((_OWORD *)v5 + 12);
  long long v162 = v64;
  uint64_t v163 = v55;
  long long v164 = *(_OWORD *)(v5 + 29);
  uint64_t v165 = v56;
  uint64_t v166 = v57;
  char v167 = v58;
  uint64_t v168 = v59;
  uint64_t v169 = v5[35];
  uint64_t v170 = v60;
  char v171 = v61;
  __int16 v172 = v62;
  outlined copy of Binding<AnyNavigationPath>?(v50, v49);
  outlined retain of NavigationColumnState((uint64_t *)&v144);
  outlined copy of NavigationColumnState.ReplacedRoot?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1));
  swift_retain();
  outlined consume of NavigationColumnState.ReplacedRoot?(v36, *((uint64_t *)&v36 + 1), v37, *((uint64_t *)&v37 + 1));
  outlined release of NavigationColumnState((uint64_t *)&v144);
  uint64_t v65 = (void *)swift_allocObject();
  _DWORD v65[2] = v50;
  v65[3] = v115;
  v65[4] = v114;
  v65[5] = v127;
  outlined copy of Binding<AnyNavigationPath>?(v50, v115);
  swift_retain();
  static Update.enqueueAction(_:)();
  swift_release();
  swift_release();
  uint64_t result = (void *)outlined consume of Binding<AnyNavigationPath>?(v50, v115);
  uint64_t v67 = v131 - v129;
  if (!__OFSUB__(v131, v129))
  {
    char v126 = 1;
    v131 -= v129;
    if (v67 < 1) {
      goto LABEL_38;
    }
LABEL_22:
    memcpy(__dst, v5, 0x12BuLL);
    long long v68 = __dst[7];
    long long v69 = __dst[8];
    long long v70 = __dst[9];
    long long v71 = __dst[10];
    unint64_t v72 = *(void *)&__dst[7] & 0xF000000000000007;
    if ((*(void *)&__dst[7] & 0xF000000000000007) == 0xF000000000000007)
    {
      if (BYTE8(__dst[18]) != 1) {
        goto LABEL_38;
      }
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
      outlined release of NavigationColumnState((uint64_t *)__dst);
    }
    else if (BYTE8(__dst[18]) != 1)
    {
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
      outlined release of NavigationColumnState((uint64_t *)__dst);
      goto LABEL_38;
    }
    outlined consume of ResolvedNavigationDestinations.ChangeRequest(v129, 0, v126);
    if ((*((void *)&v71 + 1) & 0x8000000000000000) != 0)
    {
      if (v72 == 0xF000000000000007) {
        goto LABEL_33;
      }
      if ((v68 & 0x8000000000000000) == 0) {
        goto LABEL_34;
      }
      outlined copy of NavigationColumnState.ReplacedRoot?(v68, *((uint64_t *)&v68 + 1), v69, *((uint64_t *)&v69 + 1));
    }
    else
    {
      if ((v68 & 0x8000000000000000) == 0 || v72 == 0xF000000000000007)
      {
LABEL_34:
        uint64_t v74 = v5[15];
        uint64_t v75 = v5[14];
        uint64_t v76 = v5[16];
        uint64_t v77 = v5[17];
        uint64_t v78 = v5[21];
        uint64_t v80 = v5[22];
        uint64_t v79 = v5[23];
        if (v78 < 0)
        {
          outlined consume of NavigationColumnState.ColumnContent(v75, v74, v76, v77, v5[18], v5[19], v5[20], v78);
          uint64_t v80 = 0;
          uint64_t v79 = 0;
          uint64_t v78 = 0x8000000000000000;
        }
        else
        {
          outlined consume of NavigationColumnState.ReplacedRoot?(v75, v74, v76, v77);
        }
        v5[14] = 0xF000000000000007;
        v11.i64[1] = 0;
        *(_OWORD *)(v5 + 15) = 0u;
        *(_OWORD *)(v5 + 17) = 0u;
        *(_OWORD *)(v5 + 19) = 0u;
        v5[21] = v78;
        v5[22] = v80;
        uint64_t v129 = 2;
        --v131;
        char v126 = 2;
        v5[23] = v79;
LABEL_38:
        uint64_t v82 = v5[14];
        uint64_t v81 = v5[15];
        uint64_t v84 = v5[16];
        uint64_t v83 = v5[17];
        uint64_t v86 = v5[18];
        uint64_t v85 = v5[19];
        uint64_t v87 = v5[20];
        uint64_t v88 = v5[21];
        uint64_t v89 = v5[22];
        if (v88 < 0)
        {
          if ((~v82 & 0xF000000000000007) == 0)
          {
            outlined consume of NavigationColumnState.ColumnContent(v82, v81, v84, v83, v86, v85, v87, v88);
            BOOL v93 = 1;
            goto LABEL_46;
          }
        }
        else if ((~v82 & 0xF000000000000007) == 0)
        {
          uint64_t v118 = *(uint64_t (**)(uint64_t))(*(void *)v88 + 80);
          uint64_t v119 = v5[19];
          uint64_t v120 = v5[20];
          outlined copy of NavigationColumnState.ColumnContent(v82, v81, v84, v83, v86, v85, v87, v88);
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v90 = swift_bridgeObjectRetain();
          char v91 = v118(v90);
          swift_release();
          if (v91)
          {
            uint64_t v92 = *(void *)(v89 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ColumnContent(v82, v81, v84, v83, v86, v119, v120, v88);
            BOOL v93 = v92 == 0;
            goto LABEL_46;
          }
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ColumnContent(v82, v81, v84, v83, v86, v119, v120, v88);
        }
        BOOL v93 = 0;
LABEL_46:
        if (*((unsigned char *)v5 + 296))
        {
          if (*((unsigned char *)v5 + 296) == 1)
          {
            if (!v93)
            {
LABEL_55:
              if (v131 >= 1)
              {
                uint64_t v95 = v5[6];
                if (v95)
                {
                  int v96 = *((_DWORD *)v5 + 20);
                  uint64_t v97 = v5[9];
                  LODWORD(__dst[0]) = v5[5];
                  *((void *)&__dst[0] + 1) = v95;
                  __dst[1] = *(_OWORD *)(v5 + 7);
                  *(void *)&__dst[2] = v97;
                  DWORD2(__dst[2]) = v96;
                  if (NavigationListState.isAnyEditing()()) {
                    NavigationListState.clearAllSelections()();
                  }
                }
              }
              v11.i64[0] = 0x1FFFFFFFELL;
              int8x16_t v98 = (int8x16_t)vdupq_lane_s64(vceqq_s64((int64x2_t)vandq_s8(v132, (int8x16_t)vdupq_n_s64(0xFFFFFFFFFFFFFFFELL)), v11).i64[0], 0);
              v142[0] = vbslq_s8(v98, *(int8x16_t *)&v179[8], v122);
              v142[1] = vbslq_s8(v98, *(int8x16_t *)&v179[24], v133);
              v142[2] = vbslq_s8(v98, *(int8x16_t *)&v179[40], v132);
              NavigationRequest.KeyKind.previous.getter(v174);
              _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v174, (uint64_t)&v135, &lazy cache variable for type metadata for NavigationRequest.KeyKind?, (uint64_t)&type metadata for NavigationRequest.KeyKind);
              unint64_t v102 = v139;
              if (v139 >> 1 == 0xFFFFFFFF)
              {
                long long v103 = a4;
                if (v131) {
                  _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__dst);
                }
                else {
                  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
                }
                outlined init with take of NavigationState.UpdateResult(__dst, &v144);
              }
              else
              {
                uint64_t v105 = v135;
                uint64_t v104 = v136;
                uint64_t v106 = v137;
                uint64_t v107 = v138;
                uint64_t v108 = v140;
                uint64_t v109 = *(void *)(a3 + 16);
                if (v131)
                {
                  if (v109 == 1)
                  {
                    BOOL v110 = 0;
                  }
                  else
                  {
                    if (v139 >> 62)
                    {
                      if (v139 >> 62 == 1)
                      {
                        if (v137 == 6) {
                          v112.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                        }
                        else {
                          v112.value = (char)v137;
                        }
                      }
                      else
                      {
                        v112.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                      }
                    }
                    else
                    {
                      v112.value = (char)v136;
                    }
                    BOOL v110 = NavigationSplitViewState.reduceCompactColumnBindingsIfGreaterThan(_:)(v112);
                  }
                  __dst[6] = *(_OWORD *)&v179[32];
                  __dst[7] = *(_OWORD *)&v179[48];
                  __dst[2] = v177;
                  __dst[3] = v178;
                  __dst[4] = *(_OWORD *)v179;
                  __dst[5] = *(_OWORD *)&v179[16];
                  __dst[0] = v175;
                  __dst[1] = v176;
                  *(void *)&__dst[8] = v180;
                  *((void *)&__dst[8] + 1) = v105;
                  *(void *)&__dst[9] = v104;
                  *((void *)&__dst[9] + 1) = v106;
                  *(void *)&__dst[10] = v107;
                  *((void *)&__dst[10] + 1) = v102;
                  *(void *)&__dst[11] = v108;
                  *((void *)&__dst[11] + 1) = v131;
                  *(void *)&__dst[12] = v110 | ((unint64_t)(v131 < a1) << 8);
                  *(long long *)((char *)&__dst[12] + 8) = 0u;
                  *(long long *)((char *)&__dst[13] + 8) = 0u;
                  *(long long *)((char *)&__dst[14] + 8) = 0u;
                  char v113 = 16;
                }
                else
                {
                  if (v109 != 1)
                  {
                    if (v139 >> 62)
                    {
                      if (v139 >> 62 == 1)
                      {
                        if (v137 == 6) {
                          v111.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                        }
                        else {
                          v111.value = (char)v137;
                        }
                      }
                      else
                      {
                        v111.value = SwiftUI_NavigationSplitColumn_unknownDefault;
                      }
                    }
                    else
                    {
                      v111.value = (char)v136;
                    }
                    NavigationSplitViewState.reduceCompactColumnBindingsIfGreaterThan(_:)(v111);
                  }
                  __dst[6] = *(_OWORD *)&v179[32];
                  __dst[7] = *(_OWORD *)&v179[48];
                  __dst[2] = v177;
                  __dst[3] = v178;
                  __dst[4] = *(_OWORD *)v179;
                  __dst[5] = *(_OWORD *)&v179[16];
                  __dst[0] = v175;
                  __dst[1] = v176;
                  *(void *)&__dst[8] = v180;
                  *((void *)&__dst[8] + 1) = v105;
                  *(void *)&__dst[9] = v104;
                  *((void *)&__dst[9] + 1) = v106;
                  *(void *)&__dst[10] = v107;
                  *((void *)&__dst[10] + 1) = v102;
                  *(void *)&__dst[11] = v108;
                  *((void *)&__dst[11] + 1) = 5;
                  memset(&__dst[12], 0, 56);
                  char v113 = 22;
                }
                BYTE8(__dst[15]) = v113;
                destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v99, v100, v101);
                outlined retain of NavigationRequest((uint64_t)&v175);
                outlined init with take of NavigationState.UpdateResult(__dst, &v144);
                long long v103 = a4;
              }
              __dst[0] = (unint64_t)v129;
              LOBYTE(__dst[1]) = v126;
              outlined init with take of NavigationState.UpdateResult(&v144, (long long *)((char *)&__dst[1] + 8));
              *(void *)((char *)&__dst[17] + 4) = 1;
              uint64_t v24 = v103;
              return memcpy(v24, __dst, 0x11CuLL);
            }
          }
          else if (!v93)
          {
            goto LABEL_55;
          }
          char v94 = 0;
        }
        else
        {
          if (v93) {
            goto LABEL_55;
          }
          char v94 = 2;
        }
        *((unsigned char *)v5 + 296) = v94;
        goto LABEL_55;
      }
      outlined copy of NavigationColumnState.ReplacedRoot(v68, *((uint64_t *)&v68 + 1), v69, *((uint64_t *)&v69 + 1));
    }
    uint64_t v73 = swift_allocObject();
    *(void *)(v73 + 16) = v68 & 0x7FFFFFFFFFFFFFFFLL;
    *(void *)(v73 + 24) = *((void *)&v68 + 1);
    *(_OWORD *)(v73 + 32) = v69;
    *(_OWORD *)(v73 + 48) = v70;
    *(void *)(v73 + 64) = v71;
    outlined copy of NavigationColumnState.ColumnContent(v68, *((uint64_t *)&v68 + 1), v69, *((uint64_t *)&v69 + 1), v70, *((uint64_t *)&v70 + 1), v71, *((uint64_t *)&v71 + 1));
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v69, *((uint64_t *)&v69 + 1));
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v69, *((uint64_t *)&v69 + 1));
    swift_release();
    swift_release();
LABEL_33:
    outlined consume of NavigationColumnState.ColumnContent(v68, *((uint64_t *)&v68 + 1), v69, *((uint64_t *)&v69 + 1), v70, *((uint64_t *)&v70 + 1), v71, *((uint64_t *)&v71 + 1));
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void *NavigationColumnState.revealedBySubsequentPop()@<X0>(void *a1@<X8>)
{
  int v2 = v1;
  uint64_t v4 = v1[14];
  uint64_t v3 = v1[15];
  uint64_t v6 = v1[16];
  uint64_t v5 = v1[17];
  uint64_t v8 = v1[18];
  uint64_t v7 = v1[19];
  uint64_t v9 = v1[20];
  uint64_t v10 = v1[21];
  uint64_t v11 = v2[22];
  if (v10 < 0)
  {
    if ((~v4 & 0xF000000000000007) == 0)
    {
      outlined consume of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v7, v9, v10);
      if (!*((unsigned char *)v2 + 296)) {
LABEL_9:
      }
        *((unsigned char *)v2 + 296) = 2;
    }
  }
  else if ((~v4 & 0xF000000000000007) == 0)
  {
    uint64_t v17 = v9;
    uint64_t v18 = *(uint64_t (**)(uint64_t))(*(void *)v10 + 80);
    uint64_t v16 = v7;
    outlined copy of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v7, v9, v10);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v12 = swift_bridgeObjectRetain();
    char v13 = v18(v12);
    swift_release();
    if ((v13 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      outlined consume of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v16, v17, v10);
      goto LABEL_11;
    }
    uint64_t v14 = *(void *)(v11 + 16);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of NavigationColumnState.ColumnContent(v4, v3, v6, v5, v8, v16, v17, v10);
    if (!v14 && !*((unsigned char *)v2 + 296)) {
      goto LABEL_9;
    }
  }
LABEL_11:
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v20);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v20, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  return memcpy(a1, __src, 0x11CuLL);
}

uint64_t *NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)@<X0>(char a1@<W0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 48);
  BOOL v70 = v3
     && (int v4 = *(_DWORD *)(v2 + 80),
         uint64_t v5 = *(void *)(v2 + 72),
         LODWORD(__dst[0]) = *(void *)(v2 + 40),
         __dst[1] = *(_OWORD *)(v2 + 56),
         *((void *)&__dst[0] + 1) = v3,
         *(void *)&__dst[2] = v5,
         DWORD2(__dst[2]) = v4,
         NavigationListState.isAnyEditing()())
     && NavigationListState.clearAllSelections()();
  uint64_t v73 = v2;
  memcpy(__dst, (const void *)v2, 0x12BuLL);
  uint64_t v7 = *((void *)&__dst[7] + 1);
  uint64_t v6 = *(void *)&__dst[7];
  long long v8 = __dst[8];
  long long v9 = __dst[9];
  uint64_t v10 = *((void *)&__dst[10] + 1);
  uint64_t v11 = *(void *)&__dst[10];
  long long v12 = __dst[11];
  unint64_t v13 = *(void *)&__dst[7] & 0xF000000000000007;
  char v14 = BYTE8(__dst[18]);
  uint64_t v76 = *(void *)&__dst[11];
  if ((*(void *)&__dst[7] & 0xF000000000000007) != 0xF000000000000007)
  {
    if (BYTE8(__dst[18]) == 1) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  if (BYTE8(__dst[18]) == 1)
  {
LABEL_9:
    uint64_t v65 = *(void *)&__dst[10];
    uint64_t v15 = *(void *)&__dst[7];
    uint64_t v16 = *((void *)&__dst[10] + 1);
    char v17 = BYTE8(__dst[18]);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    char v14 = v17;
    uint64_t v10 = v16;
    uint64_t v6 = v15;
    uint64_t v11 = v65;
    if (v13 != 0xF000000000000007) {
      goto LABEL_13;
    }
LABEL_10:
    uint64_t v18 = *((void *)&__dst[5] + 1);
    uint64_t v20 = *((void *)&__dst[6] + 1);
    uint64_t v19 = *(void *)&__dst[6];
    if (v10 < 0)
    {
      *(void *)__src = *(void *)&__dst[0];
      *(_DWORD *)&__src[8] = DWORD2(__dst[0]);
      *(void *)&__src[16] = *(void *)&__dst[1];
      __src[24] = BYTE8(__dst[1]);
      *(_OWORD *)&__src[32] = __dst[2];
      *(_OWORD *)&__src[48] = __dst[3];
      *(_OWORD *)&__src[64] = __dst[4];
      *(_OWORD *)&__src[80] = __dst[5];
      *(_OWORD *)&__src[96] = __dst[6];
      *(void *)&__src[112] = v6;
      *(void *)&__src[120] = v7;
      *(_OWORD *)&__src[128] = v8;
      *(_OWORD *)&__src[144] = v9;
      *(void *)&__src[160] = v11;
      *(void *)&__src[168] = v10;
      *(_OWORD *)&__src[176] = v12;
      *(_OWORD *)&__src[192] = __dst[12];
      *(_OWORD *)&__src[208] = __dst[13];
      *(void *)&__src[224] = *(void *)&__dst[14];
      *(_OWORD *)&__src[232] = *(_OWORD *)((char *)&__dst[14] + 8);
      *(void *)&__src[248] = *((void *)&__dst[15] + 1);
      *(void *)&__src[256] = *(void *)&__dst[16];
      __src[264] = BYTE8(__dst[16]);
      *(_OWORD *)&__src[272] = __dst[17];
      uint64_t v84 = *(void *)&__dst[18];
      char v85 = v14;
      __int16 v86 = *(_WORD *)((char *)&__dst[18] + 9);
      outlined retain of NavigationColumnState((uint64_t *)__src);
      outlined release of NavigationColumnState((uint64_t *)__dst);
      int v26 = 0;
      uint64_t v25 = v73;
LABEL_25:
      int v81 = v26 + v70;
      char v77 = 2;
      uint64_t v30 = 1;
      char v32 = a1;
      if ((a1 & 1) == 0) {
        goto LABEL_34;
      }
      goto LABEL_26;
    }
    uint64_t v21 = v6;
    goto LABEL_12;
  }
LABEL_13:
  if (v10 < 0)
  {
LABEL_54:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v87);
    *(_OWORD *)__src = xmmword_18834FC50;
    __src[16] = 2;
    outlined init with take of NavigationState.UpdateResult(&v87, &__src[24]);
    *(_DWORD *)&__src[276] = v70;
    goto LABEL_55;
  }
  char v66 = v14;
  outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined retain of NavigationColumnState((uint64_t *)__dst);
  outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v6, v7, v8, *((uint64_t *)&v8 + 1));
  uint64_t v62 = *(void *)(v76 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined release of NavigationColumnState((uint64_t *)__dst);
  if (!v62)
  {
    outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    outlined retain of NavigationColumnState((uint64_t *)__dst);
    outlined copy of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v59 = outlined consume of NavigationColumnState.ReplacedRoot?(v6, v7, v8, *((uint64_t *)&v8 + 1));
    uint64_t v63 = (*(unsigned __int8 (**)(uint64_t))(*(void *)v10 + 80))(v59);
    swift_release();
    outlined consume of NavigationColumnState.ColumnContent(v6, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    outlined release of NavigationColumnState((uint64_t *)__dst);
    char v14 = v66;
    if (v63) {
      goto LABEL_54;
    }
    uint64_t v21 = v6;
    uint64_t v18 = *((void *)&__dst[5] + 1);
    uint64_t v20 = *((void *)&__dst[6] + 1);
    uint64_t v19 = *(void *)&__dst[6];
LABEL_12:
    uint64_t v22 = *((void *)&v12 + 1);
    goto LABEL_16;
  }
  uint64_t v21 = v6;
  uint64_t v18 = *((void *)&__dst[5] + 1);
  uint64_t v20 = *((void *)&__dst[6] + 1);
  uint64_t v19 = *(void *)&__dst[6];
  uint64_t v22 = *((void *)&v12 + 1);
  char v14 = v66;
LABEL_16:
  *(void *)__src = *(void *)&__dst[0];
  *(_DWORD *)&__src[8] = DWORD2(__dst[0]);
  *(void *)&__src[16] = *(void *)&__dst[1];
  __src[24] = BYTE8(__dst[1]);
  *(_OWORD *)&__src[32] = __dst[2];
  *(_OWORD *)&__src[48] = __dst[3];
  *(_OWORD *)&__src[64] = __dst[4];
  *(void *)&__src[80] = *(void *)&__dst[5];
  *(void *)&long long v61 = v18;
  *((void *)&v61 + 1) = v19;
  *(void *)&__src[88] = v18;
  *(void *)&__src[96] = v19;
  uint64_t v60 = v20;
  *(void *)&__src[104] = v20;
  *(void *)&__src[112] = v21;
  *(void *)&__src[120] = v7;
  *(_OWORD *)&__src[128] = v8;
  *(_OWORD *)&__src[144] = v9;
  *(void *)&__src[160] = v11;
  *(void *)&__src[168] = v10;
  *(void *)&__src[176] = v76;
  *(_OWORD *)&__src[192] = __dst[12];
  *(_OWORD *)&__src[208] = __dst[13];
  *(void *)&__src[184] = v22;
  *(void *)&__src[224] = *(void *)&__dst[14];
  *(_OWORD *)&__src[232] = *(_OWORD *)((char *)&__dst[14] + 8);
  *(void *)&__src[248] = *((void *)&__dst[15] + 1);
  *(void *)&__src[256] = *(void *)&__dst[16];
  __src[264] = BYTE8(__dst[16]);
  *(_OWORD *)&__src[272] = __dst[17];
  uint64_t v84 = *(void *)&__dst[18];
  char v85 = v14;
  __int16 v86 = *(_WORD *)((char *)&__dst[18] + 9);
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined retain of NavigationColumnState((uint64_t *)__src);
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v21, v7, v8, *((uint64_t *)&v8 + 1));
  uint64_t v67 = *(void *)(v76 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined release of NavigationColumnState((uint64_t *)__dst);
  if (v67)
  {
    outlined copy of NavigationColumnState.ReplacedRoot?(v21, v7, v8, *((uint64_t *)&v8 + 1));
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    specialized Collection<>.dismiss(from:)(0, v76, v22);
    outlined consume of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
    int v64 = 1;
  }
  else
  {
    int v64 = 0;
  }
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined copy of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  outlined retain of NavigationColumnState((uint64_t *)__src);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v23 = outlined consume of NavigationColumnState.ReplacedRoot?(v21, v7, v8, *((uint64_t *)&v8 + 1));
  char v68 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 80))(v23);
  swift_release();
  outlined consume of NavigationColumnState.ColumnContent(v21, v7, v8, *((uint64_t *)&v8 + 1), v9, *((uint64_t *)&v9 + 1), v11, v10);
  uint64_t result = outlined release of NavigationColumnState((uint64_t *)__dst);
  if (v68)
  {
    uint64_t v25 = v73;
    int v26 = v64;
    goto LABEL_25;
  }
  uint64_t v25 = v73;
  if (*((void *)&v61 + 1))
  {
    long long v87 = v61;
    uint64_t v88 = v60;
    type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
    uint64_t v28 = v27;
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v82, v28);
    swift_release();
    swift_release();
    uint64_t v29 = swift_release();
    uint64_t v30 = (*(uint64_t (**)(uint64_t))(*(void *)v82 + 88))(v29);
    swift_release();
    uint64_t v31 = swift_allocObject();
    *(_OWORD *)(v31 + 16) = v61;
    *(void *)(v31 + 32) = v60;
    swift_retain();
    swift_retain();
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    int v81 = v64 + 1;
    char v77 = 1;
    char v32 = a1;
    if ((a1 & 1) == 0)
    {
LABEL_34:
      NavigationColumnState.ColumnContent.clearAll(popReplacedRoots:)(v32 & 1);
      uint64_t v45 = *(void *)(v25 + 112);
      uint64_t v44 = *(void *)(v25 + 120);
      uint64_t v47 = *(void *)(v25 + 128);
      uint64_t v46 = *(void *)(v25 + 136);
      uint64_t v49 = *(void *)(v25 + 144);
      uint64_t v48 = *(void *)(v25 + 152);
      uint64_t v50 = *(void *)(v25 + 160);
      uint64_t v51 = *(void *)(v25 + 168);
      uint64_t v52 = *(void *)(v25 + 176);
      if (v51 < 0)
      {
        if ((~v45 & 0xF000000000000007) == 0)
        {
          outlined consume of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v48, v50, v51);
          BOOL v56 = 1;
          int v57 = *(unsigned __int8 *)(v25 + 296);
          if (!*(unsigned char *)(v25 + 296)) {
            goto LABEL_49;
          }
          goto LABEL_42;
        }
      }
      else if ((~v45 & 0xF000000000000007) == 0)
      {
        uint64_t v75 = v30;
        uint64_t v79 = *(uint64_t (**)(uint64_t))(*(void *)v51 + 80);
        uint64_t v69 = *(void *)(v25 + 152);
        uint64_t v72 = *(void *)(v25 + 160);
        outlined copy of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v48, v50, v51);
        swift_retain();
        swift_bridgeObjectRetain();
        uint64_t v53 = swift_bridgeObjectRetain();
        char v54 = v79(v53);
        swift_release();
        if (v54)
        {
          uint64_t v55 = *(void *)(v52 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v69, v72, v51);
          BOOL v56 = v55 == 0;
        }
        else
        {
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ColumnContent(v45, v44, v47, v46, v49, v69, v72, v51);
          BOOL v56 = 0;
        }
        uint64_t v30 = v75;
        int v57 = *(unsigned __int8 *)(v25 + 296);
        if (!*(unsigned char *)(v25 + 296))
        {
LABEL_49:
          if (!v56)
          {
            char v58 = 2;
            goto LABEL_51;
          }
LABEL_52:
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v87);
          *(_OWORD *)__src = (unint64_t)v30;
          __src[16] = v77;
          outlined init with take of NavigationState.UpdateResult(&v87, &__src[24]);
          *(_DWORD *)&__src[276] = v81;
LABEL_55:
          *(_DWORD *)&unsigned char __src[280] = 0;
          return (uint64_t *)memcpy(a2, __src, 0x11CuLL);
        }
LABEL_42:
        if (v57 == 1)
        {
          if (!v56) {
            goto LABEL_52;
          }
        }
        else if (!v56)
        {
          goto LABEL_52;
        }
        char v58 = 0;
LABEL_51:
        *(unsigned char *)(v25 + 296) = v58;
        goto LABEL_52;
      }
      BOOL v56 = 0;
      int v57 = *(unsigned __int8 *)(v25 + 296);
      if (!*(unsigned char *)(v25 + 296)) {
        goto LABEL_49;
      }
      goto LABEL_42;
    }
LABEL_26:
    uint64_t v74 = v30;
    uint64_t v33 = *(void *)(v25 + 112);
    uint64_t v34 = *(void *)(v25 + 120);
    uint64_t v35 = *(void *)(v25 + 128);
    uint64_t v36 = *(void *)(v25 + 136);
    uint64_t v37 = *(void *)(v25 + 144);
    uint64_t v38 = *(void *)(v25 + 152);
    uint64_t v40 = *(void *)(v25 + 160);
    uint64_t v39 = *(void *)(v25 + 168);
    unint64_t v41 = v33 & 0xF000000000000007;
    if (v39 < 0)
    {
      if (v41 == 0xF000000000000007) {
        goto LABEL_32;
      }
      if ((v33 & 0x8000000000000000) == 0) {
        goto LABEL_33;
      }
      uint64_t v71 = *(void *)(v25 + 144);
      uint64_t v42 = *(void *)(v25 + 152);
      outlined copy of NavigationColumnState.ReplacedRoot?(v33, v34, v35, v36);
    }
    else
    {
      if ((v33 & 0x8000000000000000) == 0 || v41 == 0xF000000000000007) {
        goto LABEL_33;
      }
      uint64_t v71 = *(void *)(v25 + 144);
      uint64_t v42 = *(void *)(v25 + 152);
      outlined copy of NavigationColumnState.ReplacedRoot(v33, v34, v35, v36);
    }
    char v43 = (void *)swift_allocObject();
    v43[2] = v33 & 0x7FFFFFFFFFFFFFFFLL;
    v43[3] = v34;
    v43[4] = v35;
    v43[5] = v36;
    v43[6] = v71;
    v43[7] = v42;
    v43[8] = v40;
    outlined copy of NavigationColumnState.ColumnContent(v33, v34, v35, v36, v71, v42, v40, v39);
    swift_retain();
    swift_retain();
    outlined copy of Text.LineStyle?(v35, v36);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v35, v36);
    swift_release();
    swift_release();
    char v32 = a1;
    uint64_t v37 = v71;
    uint64_t v38 = v42;
LABEL_32:
    outlined consume of NavigationColumnState.ColumnContent(v33, v34, v35, v36, v37, v38, v40, v39);
LABEL_33:
    uint64_t v30 = v74;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

void NavigationColumnState.presentValue(_:request:splitViewState:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = v4;
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v185 = *(_OWORD *)(a2 + 96);
  long long v186 = v8;
  uint64_t v9 = *(void *)(a2 + 136);
  uint64_t v187 = *(void *)(a2 + 128);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v181 = *(_OWORD *)(a2 + 32);
  long long v182 = v10;
  long long v11 = *(_OWORD *)(a2 + 80);
  long long v183 = *(_OWORD *)(a2 + 64);
  long long v184 = v11;
  long long v12 = *(_OWORD *)(a2 + 16);
  long long v179 = *(_OWORD *)a2;
  long long v180 = v12;
  uint64_t v13 = *(void *)(a2 + 144);
  uint64_t v14 = *(void *)(a2 + 152);
  uint64_t v16 = *(void *)(a2 + 160);
  unint64_t v15 = *(void *)(a2 + 168);
  uint64_t v17 = *(void *)(a2 + 184);
  uint64_t v18 = *(void *)(a2 + 208);
  uint64_t v140 = *(void *)(a2 + 200);
  uint64_t v141 = *(void *)(a2 + 192);
  uint64_t v19 = *(void *)(a2 + 216);
  uint64_t v20 = *(void *)(a2 + 224);
  uint64_t v144 = *(void *)(a2 + 240);
  uint64_t v147 = *(void *)(a2 + 232);
  int v21 = *(unsigned __int8 *)(a2 + 248);
  uint64_t v22 = *(void *)a3;
  uint64_t v23 = *(void *)(a3 + 8);
  uint64_t v24 = *(void *)(a3 + 16);
  uint64_t v25 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(a3 + 40);
  long long v150 = *(_OWORD *)(a3 + 48);
  __int16 v27 = *(_WORD *)(a3 + 64);
  __dst = a4;
  if (v24 != 1 && *(void *)(a3 + 32))
  {
    uint64_t v129 = *(void *)(a3 + 16);
    uint64_t v132 = *(void *)(a3 + 8);
    unsigned __int16 v127 = *(_WORD *)(a3 + 64);
    uint64_t v28 = *(void *)(a3 + 24);
    uint64_t v29 = *(void *)(a3 + 32);
    uint64_t v30 = *(void *)a3;
    uint64_t v136 = *(void *)a3;
    (*(void (**)(id *__return_ptr, uint64_t))(*(void *)a1 + 104))(v154, v17);
    if (*(unsigned __int8 *)(v4 + 24) >= 3u) {
      char v31 = 3;
    }
    else {
      char v31 = *(unsigned char *)(v4 + 24);
    }
    outlined init with take of NavigationUpdateEvent.Action((uint64_t)v154, (uint64_t)v155);
    char v156 = v31;
    outlined init with copy of NavigationUpdateEvent((uint64_t)v155, (uint64_t)__src);
    uint64_t v32 = swift_allocObject();
    *(void *)(v32 + 16) = v29;
    *(void *)(v32 + 24) = v26;
    long long v33 = __src[1];
    *(_OWORD *)(v32 + 32) = __src[0];
    *(_OWORD *)(v32 + 48) = v33;
    *(_OWORD *)(v32 + 64) = __src[2];
    *(_OWORD *)(v32 + 74) = *(_OWORD *)((char *)&__src[2] + 10);
    outlined copy of AppIntentExecutor?(v29);
    outlined copy of AppIntentExecutor?(v29);
    outlined copy of NavigationSplitViewState?(v30, v132, v129, v28, v29, v26, v150, *((uint64_t *)&v150 + 1), v127, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    static Update.enqueueAction(_:)();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v29);
    outlined destroy of NavigationUpdateEvent((uint64_t)v155);
    outlined copy of NavigationSplitViewState?(v136, v132, v129, v28, v29, v26, v150, *((uint64_t *)&v150 + 1), v127, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v157);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(&v157, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 0;
    memcpy(a4, __src, 0x11CuLL);
    return;
  }
  unint64_t v133 = *(void *)(a2 + 168);
  if ((v15 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
  {
    uint64_t v123 = v185;
    uint64_t v124 = *((void *)&v183 + 1);
    uint64_t v34 = v186;
    uint64_t v36 = *((void *)&v184 + 1);
    uint64_t v35 = v184;
    unint64_t v37 = *((void *)&v185 + 1);
  }
  else
  {
    uint64_t v123 = *(void *)(a2 + 160);
    uint64_t v124 = v9;
    uint64_t v34 = *(void *)(a2 + 176);
    uint64_t v35 = *(void *)(a2 + 144);
    uint64_t v36 = v14;
    unint64_t v37 = v15;
  }
  if (v37 >> 62 == 1)
  {
    uint64_t v121 = v18;
    uint64_t v122 = v17;
    uint64_t v38 = v141;
    uint64_t v39 = v20;
    uint64_t v119 = v147;
    uint64_t v120 = v19;
    uint64_t v125 = v144;
    uint64_t v126 = v140;
    unsigned __int8 v40 = v21;
    char v118 = v21;
    long long v117 = *(_OWORD *)(a3 + 32);
    if (v21 == 255)
    {
      uint64_t v38 = *((void *)&v179 + 1);
      uint64_t v130 = v36;
      uint64_t v134 = v18;
      char v118 = v183;
      uint64_t v137 = *(void *)a3;
      uint64_t v109 = v35;
      uint64_t v111 = v17;
      uint64_t v121 = *((void *)&v180 + 1);
      uint64_t v122 = v179;
      uint64_t v125 = *((void *)&v182 + 1);
      uint64_t v126 = v180;
      uint64_t v115 = v20;
      uint64_t v113 = v19;
      uint64_t v119 = v182;
      uint64_t v120 = v181;
      uint64_t v41 = *(void *)(a3 + 16);
      __int16 v42 = *(_WORD *)(a3 + 64);
      uint64_t v43 = v34;
      outlined copy of NavigationRequest.Action(v179, *((uint64_t *)&v179 + 1), v180, *((uint64_t *)&v180 + 1), v181, *((uint64_t *)&v181 + 1), v182, *((uint64_t *)&v182 + 1), v183);
      unsigned __int8 v40 = -1;
      uint64_t v36 = v130;
      uint64_t v18 = v134;
      uint64_t v35 = v109;
      uint64_t v17 = v111;
      uint64_t v34 = v43;
      uint64_t v39 = *((void *)&v181 + 1);
      uint64_t v19 = v113;
      uint64_t v20 = v115;
      __int16 v27 = v42;
      uint64_t v22 = v137;
      uint64_t v24 = v41;
    }
    char v44 = BYTE8(v186);
    char v45 = v37 & 1;
    if (!*(void *)(v5 + 48))
    {
      uint64_t v46 = MEMORY[0x1E4FBC860];
      uint64_t v135 = v23;
      uint64_t v138 = v22;
      uint64_t v112 = v17;
      uint64_t v114 = v19;
      uint64_t v116 = v20;
      uint64_t v131 = v24;
      __int16 v128 = v27;
      uint64_t v47 = v18;
      uint64_t v108 = v34;
      uint64_t v110 = v35;
      uint64_t v48 = v36;
      unsigned __int8 v49 = v40;
      char v50 = v45;
      unint64_t v107 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      unint64_t v106 = specialized Dictionary.init(dictionaryLiteral:)(v46);
      unint64_t v105 = specialized Dictionary.init(dictionaryLiteral:)(v46);
      unint64_t v51 = specialized Dictionary.init(dictionaryLiteral:)(v46);
      char v45 = v50;
      char v44 = BYTE8(v186);
      unsigned __int8 v40 = v49;
      uint64_t v36 = v48;
      uint64_t v34 = v108;
      uint64_t v35 = v110;
      uint64_t v18 = v47;
      uint64_t v19 = v114;
      uint64_t v20 = v116;
      __int16 v27 = v128;
      uint64_t v24 = v131;
      uint64_t v23 = v135;
      *(void *)(v5 + 40) = 0;
      *(void *)(v5 + 48) = v107;
      *(void *)(v5 + 56) = v106;
      *(void *)(v5 + 64) = v105;
      *(void *)(v5 + 72) = v51;
      uint64_t v17 = v112;
      uint64_t v22 = v138;
      *(_DWORD *)(v5 + 80) = 0;
    }
    *(void *)&__src[0] = v122;
    *((void *)&__src[0] + 1) = v38;
    *(void *)&__src[1] = v126;
    *((void *)&__src[1] + 1) = v121;
    *(void *)&__src[2] = v120;
    *((void *)&__src[2] + 1) = v39;
    *(void *)&__src[3] = v119;
    *((void *)&__src[3] + 1) = v125;
    LOBYTE(__src[4]) = v118;
    *((void *)&__src[4] + 1) = v124;
    *(void *)&__src[5] = v35;
    *((void *)&__src[5] + 1) = v36;
    *(void *)&__src[6] = v123;
    BYTE8(__src[6]) = v45;
    *(void *)&__src[7] = v34;
    BYTE8(__src[7]) = v44;
    __src[8] = xmmword_1883863B0;
    *(void *)&__src[9] = 0;
    *(void *)&long long v157 = v22;
    *((void *)&v157 + 1) = v23;
    *(void *)&long long v158 = v24;
    *((void *)&v158 + 1) = v25;
    long long v159 = v117;
    long long v160 = v150;
    LOWORD(v161) = v27;
    outlined copy of NavigationRequest.Action?(v17, v141, v140, v18, v19, v20, v147, v144, v40);
    NavigationListState.update(for:splitViewState:)((uint64_t)__src, (uint64_t)&v157, __dst);
    outlined consume of NavigationRequest.Action(v122, v38, v126, v121, v120, v39, v119, v125, v118);
    return;
  }
  unint64_t v139 = v15 & 0xFFFFFFFFFFFFFFFELL;
  uint64_t v145 = v13;
  uint64_t v148 = v16;
  uint64_t v142 = v9;
  uint64_t v52 = *(void *)(v4 + 200);
  uint64_t v54 = *(void *)(v5 + 208);
  uint64_t v53 = *(void *)(v5 + 216);
  uint64_t v56 = *(void *)(v5 + 224);
  uint64_t v55 = *(void *)(v5 + 232);
  uint64_t v57 = *(void *)(v5 + 240);
  uint64_t v58 = *(void *)(v5 + 248);
  uint64_t v59 = *(void *)(v5 + 256);
  char v60 = *(unsigned char *)(v5 + 264);
  uint64_t v61 = *(void *)(v5 + 272);
  *(void *)&__src[0] = *(void *)(v5 + 192);
  *((void *)&__src[0] + 1) = v52;
  *(void *)&__src[1] = v54;
  *((void *)&__src[1] + 1) = v53;
  *(void *)&__src[2] = v56;
  *((void *)&__src[2] + 1) = v55;
  *(void *)&__src[3] = v57;
  *((void *)&__src[3] + 1) = v58;
  *(void *)&__src[4] = v59;
  BYTE8(__src[4]) = v60;
  *(void *)&__src[5] = v61;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  char v62 = ResolvedNavigationDestinations.validateValue(_:)(a1);
  uint64_t v63 = v188;
  if (v188)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_18:
    v155[0] = v63;
    id v64 = v63;
    type metadata accessor for Error();
    if (swift_dynamicCast())
    {
      long long v65 = __src[0];
      if (!(*((void *)&__src[0] + 1) >> 62))
      {

        *(void *)&long long v157 = *((void *)&v65 + 1);
        type metadata accessor for Any.Type();
        uint64_t v92 = String.init<A>(describing:)();
        uint64_t v94 = v93;
        *(void *)&long long v157 = v65;
        uint64_t v95 = String.init<A>(describing:)();
        uint64_t v97 = v96;
        lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
        swift_allocError();
        *(void *)uint64_t v98 = v92;
        *(void *)(v98 + 8) = v94;
        *(void *)(v98 + 16) = v95;
        *(void *)(v98 + 24) = v97;
        *(unsigned char *)(v98 + 32) = 0;
        goto LABEL_37;
      }
      if (*((void *)&__src[0] + 1) >> 62 == 1)
      {

        *(void *)&long long v157 = v65;
        type metadata accessor for Any.Type();
        uint64_t v66 = String.init<A>(describing:)();
        uint64_t v68 = v67;
        lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
        swift_allocError();
        *(void *)uint64_t v69 = v66;
        *(void *)(v69 + 8) = v68;
        *(void *)(v69 + 16) = 0;
        *(void *)(v69 + 24) = 0;
        *(unsigned char *)(v69 + 32) = 2;
LABEL_37:
        swift_willThrow();

        return;
      }
    }

    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)&v157);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(&v157, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 0;
LABEL_23:
    memcpy(__dst, __src, 0x11CuLL);
    return;
  }
  char v70 = v62;
  v188 = 0;
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v71 = swift_bridgeObjectRelease();
  if ((v70 & 1) != 0 && (*(void *)(v5 + 168) & 0x8000000000000000) == 0)
  {
    uint64_t v75 = *(void *)(v5 + 88);
    uint64_t v76 = *(void *)(v5 + 96);
    uint64_t v77 = *(void *)(v5 + 104);
    uint64_t v78 = (void *)swift_allocObject();
    v78[2] = a1;
    v78[3] = v75;
    v78[4] = v76;
    v78[5] = v77;
    outlined copy of Binding<AnyNavigationPath>?(v75, v76);
    outlined copy of Binding<AnyNavigationPath>?(v75, v76);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    outlined consume of Binding<AnyNavigationPath>?(v75, v76);
    if ((*(void *)(v5 + 168) & 0x8000000000000000) == 0)
    {
      uint64_t v80 = *(void *)(v5 + 112);
      uint64_t v79 = *(void *)(v5 + 120);
      uint64_t v82 = *(void *)(v5 + 128);
      uint64_t v81 = *(void *)(v5 + 136);
      uint64_t v143 = *(void *)(v5 + 144);
      uint64_t v146 = *(void *)(v5 + 152);
      uint64_t v149 = *(void *)(v5 + 160);
      uint64_t v151 = *(void *)(v5 + 176);
      uint64_t v152 = *(void *)(v5 + 184);
      v155[0] = *(id *)(v5 + 168);
      uint64_t v83 = *(void (**)(id *))(*(void *)a1 + 128);
      swift_retain();
      uint64_t v84 = v188;
      v83(v155);
      if (v84)
      {
        id v85 = v155[0];
        *(void *)(v5 + 112) = v80;
        *(void *)(v5 + 120) = v79;
        *(void *)(v5 + 128) = v82;
        *(void *)(v5 + 136) = v81;
        *(void *)(v5 + 144) = v143;
        *(void *)(v5 + 152) = v146;
        *(void *)(v5 + 160) = v149;
        *(void *)(v5 + 168) = v85;
        *(void *)(v5 + 176) = v151;
        *(void *)(v5 + 184) = v152;
        swift_willThrow();
        swift_release();
        uint64_t v63 = v84;
        goto LABEL_18;
      }
      swift_release();
      id v103 = v155[0];
      *(void *)(v5 + 112) = v80;
      *(void *)(v5 + 120) = v79;
      *(void *)(v5 + 128) = v82;
      *(void *)(v5 + 136) = v81;
      *(void *)(v5 + 144) = v143;
      *(void *)(v5 + 152) = v146;
      *(void *)(v5 + 160) = v149;
      *(void *)(v5 + 168) = v103;
      *(void *)(v5 + 176) = v151;
      *(void *)(v5 + 184) = v152;
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v157);
    if (*(unsigned __int8 *)(v5 + 296) >= 2u) {
      *(unsigned char *)(v5 + 296) = 0;
    }
    __src[0] = 0uLL;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(&v157, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 1;
    goto LABEL_23;
  }
  uint64_t v86 = v145;
  uint64_t v87 = v148;
  if (*(unsigned __int8 *)(v5 + 24) > 1u) {
    goto LABEL_41;
  }
  uint64_t v88 = v14;
  uint64_t v89 = v142;
  unint64_t v90 = v133;
  if (v139 == 0x1FFFFFFFELL)
  {
    uint64_t v86 = v184;
    uint64_t v89 = *((void *)&v183 + 1);
    uint64_t v88 = *((void *)&v184 + 1);
    unint64_t v90 = *((void *)&v185 + 1);
    uint64_t v87 = v185;
  }
  unint64_t v91 = v90 >> 62;
  if (v91)
  {
    if (v91 != 1) {
      goto LABEL_41;
    }
    uint64_t v89 = v86;
    LOBYTE(v86) = v88;
    if (v88 == 6) {
      goto LABEL_41;
    }
  }
  else
  {
    uint64_t v87 = v88;
  }
  if (v86 - 2 < 4)
  {
LABEL_41:
    *(void *)&__src[0] = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(v71);
    type metadata accessor for Any.Type();
    uint64_t v99 = String.init<A>(describing:)();
    uint64_t v101 = v100;
    lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
    swift_allocError();
    *(void *)uint64_t v102 = v99;
    *(void *)(v102 + 8) = v101;
    *(void *)(v102 + 16) = 0;
    *(void *)(v102 + 24) = 0;
    *(unsigned char *)(v102 + 32) = 3;
    swift_willThrow();
    return;
  }
  if ((_BYTE)v86)
  {
    uint64_t v104 = 2;
  }
  else
  {
    uint64_t v104 = 1;
    if (v87 != 3) {
      uint64_t v104 = 2;
    }
  }
  long long v163 = v185;
  long long v164 = v186;
  long long v159 = v181;
  long long v160 = v182;
  long long v161 = v183;
  long long v162 = v184;
  long long v157 = v179;
  long long v158 = v180;
  uint64_t v165 = v187;
  uint64_t v166 = v89;
  uint64_t v167 = v104;
  uint64_t v168 = v87;
  uint64_t v169 = 0;
  uint64_t v170 = 0;
  uint64_t v171 = 0;
  uint64_t v172 = a1;
  long long v173 = 0u;
  long long v174 = 0u;
  long long v175 = 0u;
  uint64_t v176 = 0;
  char v177 = 11;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v157, v72, v73, v74);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(&v157, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  memcpy(__dst, __src, 0x11CuLL);
  swift_retain();
  outlined retain of NavigationRequest((uint64_t)&v179);
}

uint64_t NavigationColumnState.replaceRootValue(_:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  NavigationColumnState.ejectAll()();
  uint64_t v5 = *(void *)(v2 + 120);
  uint64_t v6 = *(void *)(v2 + 112);
  uint64_t v7 = *(void *)(v2 + 128);
  uint64_t v8 = *(void *)(v2 + 136);
  uint64_t v9 = *(void *)(v2 + 168);
  uint64_t v10 = *(void *)(v2 + 176);
  uint64_t v11 = *(void *)(v2 + 184);
  if (v9 < 0)
  {
    outlined consume of NavigationColumnState.ColumnContent(v6, v5, v7, v8, *(void *)(v2 + 144), *(void *)(v2 + 152), *(void *)(v2 + 160), v9);
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v9 = 0x8000000000000000;
  }
  else
  {
    outlined consume of NavigationColumnState.ReplacedRoot?(v6, v5, v7, v8);
  }
  *(void *)(v2 + 112) = a1;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(void *)(v2 + 168) = v9;
  *(void *)(v2 + 176) = v10;
  *(void *)(v2 + 184) = v11;
  *(unsigned char *)(v2 + 296) = 1;
  uint64_t v15 = *(void *)(v2 + 16);
  uint64_t v16 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v17 = *(void *)(v2 + 32);
  uint64_t v18 = 0;
  switch(*(unsigned char *)(v2 + 24))
  {
    case 1:
      goto LABEL_8;
    case 2:
      uint64_t v18 = v17 == 3;
      goto LABEL_8;
    case 5:
      uint64_t v18 = 2;
LABEL_8:
      __src[0] = 4uLL;
      *(long long *)((char *)&__src[1] + 8) = 0uLL;
      *(long long *)((char *)&__src[2] + 8) = 0uLL;
      *((void *)&__src[3] + 1) = 0;
      LOBYTE(__src[4]) = 22;
      *((void *)&__src[4] + 1) = v15;
      *(void *)&__src[5] = v16;
      *((void *)&__src[5] + 1) = v17;
      memset(&__src[6], 0, 25);
      *(void *)&__src[8] = 0;
      *((void *)&__src[8] + 1) = v15;
      *(void *)&__src[9] = v18;
      *((void *)&__src[9] + 1) = v17;
      memset(&__src[10], 0, 88);
      BYTE8(__src[15]) = -1;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src, v12, v13, v14);
      break;
    default:
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__src);
      break;
  }
  outlined init with take of NavigationState.UpdateResult(__src, v21);
  __src[0] = xmmword_18838AA10;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v21, (long long *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 1;
  memcpy(a2, __src, 0x11CuLL);
  return swift_retain();
}

void *NavigationColumnState.replaceRootView(_:identifier:dismiss:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v10 = a2[2];
  uint64_t v29 = a2[3];
  NavigationColumnState.ejectAll()();
  uint64_t v11 = *(void *)(v5 + 112);
  uint64_t v27 = *(void *)(v5 + 128);
  uint64_t v28 = *(void *)(v5 + 120);
  uint64_t v25 = *(void *)(v5 + 144);
  uint64_t v26 = *(void *)(v5 + 136);
  uint64_t v12 = *(void *)(v5 + 168);
  uint64_t v23 = *(void *)(v5 + 160);
  uint64_t v24 = *(void *)(v5 + 152);
  uint64_t v14 = *(void *)(v5 + 176);
  uint64_t v13 = *(void *)(v5 + 184);
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v9, v10);
  swift_retain();
  if (v12 < 0)
  {
    outlined consume of NavigationColumnState.ColumnContent(v11, v28, v27, v26, v25, v24, v23, v12);
    uint64_t v14 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0x8000000000000000;
  }
  else
  {
    outlined consume of NavigationColumnState.ReplacedRoot?(v11, v28, v27, v26);
  }
  *(void *)(v5 + 112) = a1 | 0x8000000000000000;
  *(void *)(v5 + 120) = v8;
  *(void *)(v5 + 128) = v9;
  *(void *)(v5 + 136) = v10;
  *(void *)(v5 + 144) = v29;
  *(void *)(v5 + 152) = a3;
  *(void *)(v5 + 160) = a4;
  *(void *)(v5 + 168) = v12;
  *(void *)(v5 + 176) = v14;
  *(void *)(v5 + 184) = v13;
  *(unsigned char *)(v5 + 296) = 1;
  uint64_t v18 = *(void *)(v5 + 16);
  uint64_t v19 = *(unsigned __int8 *)(v5 + 24);
  uint64_t v20 = *(void *)(v5 + 32);
  uint64_t v21 = 0;
  switch(*(unsigned char *)(v5 + 24))
  {
    case 1:
      goto LABEL_8;
    case 2:
      uint64_t v21 = v20 == 3;
      goto LABEL_8;
    case 5:
      uint64_t v21 = 2;
LABEL_8:
      *(void *)&__src[0] = 4;
      *(long long *)((char *)__src + 8) = 0u;
      *(long long *)((char *)&__src[1] + 8) = 0u;
      *(long long *)((char *)&__src[2] + 8) = 0u;
      *((void *)&__src[3] + 1) = 0;
      LOBYTE(__src[4]) = 22;
      *((void *)&__src[4] + 1) = v18;
      *(void *)&__src[5] = v19;
      *((void *)&__src[5] + 1) = v20;
      memset(&__src[6], 0, 25);
      *(void *)&__src[8] = 0;
      *((void *)&__src[8] + 1) = v18;
      *(void *)&__src[9] = v21;
      *((void *)&__src[9] + 1) = v20;
      memset(&__src[10], 0, 88);
      BYTE8(__src[15]) = -1;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src, v15, v16, v17);
      break;
    default:
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__src);
      break;
  }
  outlined init with take of NavigationState.UpdateResult(__src, v33);
  __src[0] = xmmword_18838AA10;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v33, (long long *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 1;
  return memcpy(a5, __src, 0x11CuLL);
}

void *NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v9 = v7;
  uint64_t v11 = *a3;
  uint64_t v12 = a3[1];
  uint64_t v13 = a3[2];
  uint64_t v14 = a3[3];
  long long v15 = *(_OWORD *)(a6 + 112);
  *(_OWORD *)uint64_t v98 = *(_OWORD *)(a6 + 96);
  *(_OWORD *)&v98[16] = v15;
  uint64_t v16 = *(void *)(a6 + 136);
  uint64_t v99 = *(void *)(a6 + 128);
  long long v17 = *(_OWORD *)(a6 + 48);
  long long v94 = *(_OWORD *)(a6 + 32);
  long long v95 = v17;
  long long v18 = *(_OWORD *)(a6 + 80);
  long long v96 = *(_OWORD *)(a6 + 64);
  long long v97 = v18;
  long long v19 = *(_OWORD *)(a6 + 16);
  long long v92 = *(_OWORD *)a6;
  long long v93 = v19;
  uint64_t v20 = *(void *)(a6 + 144);
  uint64_t v21 = *(void *)(a6 + 152);
  uint64_t v22 = *(void *)(a6 + 160);
  if (a2 != -1)
  {
    long long v56 = *(_OWORD *)(a6 + 168);
    uint64_t v58 = *(void *)(a6 + 144);
    uint64_t v59 = *(void *)(a6 + 152);
    uint64_t v57 = *(void *)(a6 + 160);
    uint64_t v100 = v8;
    long long v24 = *(_OWORD *)(v9 + 128);
    __src[0] = *(_OWORD *)(v9 + 112);
    __src[1] = v24;
    long long v25 = *(_OWORD *)(v9 + 160);
    long long v26 = *(_OWORD *)(v9 + 176);
    __src[2] = *(_OWORD *)(v9 + 144);
    __src[3] = v25;
    uint64_t v27 = *(void *)(v9 + 88);
    uint64_t v28 = *(void *)(v9 + 96);
    uint64_t v29 = *(void *)(v9 + 104);
    unsigned int v30 = *(unsigned __int8 *)(v9 + 296);
    __src[4] = v26;
    uint64_t v62 = v11;
    uint64_t v63 = v12;
    *(void *)&long long v68 = v11;
    *((void *)&v68 + 1) = v12;
    uint64_t v64 = v14;
    uint64_t v65 = v13;
    *(void *)&long long v69 = v13;
    *((void *)&v69 + 1) = v14;
    if (NavigationColumnState.ColumnContent.isPresentingViewDestinationView(_:)((uint64_t *)&v68))
    {
      long long v34 = v56;
      uint64_t v35 = v57;
      uint64_t v36 = v58;
      uint64_t v37 = v59;
      if ((unint64_t)v56 >> 1 == 0xFFFFFFFF)
      {
        uint64_t v16 = *((void *)&v96 + 1);
        uint64_t v37 = *((void *)&v97 + 1);
        uint64_t v36 = v97;
        uint64_t v35 = *(void *)v98;
        long long v34 = *(_OWORD *)&v98[8];
      }
      long long v74 = *(_OWORD *)v98;
      long long v75 = *(_OWORD *)&v98[16];
      long long v70 = v94;
      long long v71 = v95;
      long long v72 = v96;
      long long v73 = v97;
      long long v68 = v92;
      long long v69 = v93;
      uint64_t v76 = v99;
      uint64_t v77 = v16;
      uint64_t v78 = v36;
      uint64_t v79 = v37;
      uint64_t v80 = v35;
      long long v81 = v34;
      uint64_t v82 = a1;
      uint64_t v83 = v62;
      uint64_t v84 = v12;
      uint64_t v85 = v65;
      uint64_t v86 = v64;
      uint64_t v87 = 1;
      uint64_t v88 = 0;
      uint64_t v89 = 0;
      char v90 = 14;
      destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v68, v31, v32, v33);
      __src[0] = xmmword_18834FC50;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(&v68, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 0;
      memcpy(a7, __src, 0x11CuLL);
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v12, v65);
      return (void *)outlined retain of NavigationRequest((uint64_t)&v92);
    }
    else
    {
      if (v30 >= 2) {
        *(unsigned char *)(v9 + 296) = 0;
      }
      *(void *)&__src[0] = a1;
      *((void *)&__src[0] + 1) = v62;
      *(void *)&__src[1] = v12;
      *((void *)&__src[1] + 1) = v65;
      *(void *)&__src[2] = v64;
      *((void *)&__src[2] + 1) = a4;
      *(void *)&__src[3] = a5;
      swift_retain();
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v12, v65);
      uint64_t v41 = NavigationColumnState.ColumnContent.presentView(_:from:)((uint64_t)__src, a2);
      uint64_t v43 = v42;
      unsigned __int8 v45 = v44;
      int v46 = v44;
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v63, v65);
      swift_release();
      if (v46 == 1)
      {
        uint64_t v47 = (void *)swift_allocObject();
        _OWORD v47[2] = v41;
        v47[3] = v27;
        v47[4] = v28;
        v47[5] = v29;
        outlined copy of Binding<AnyNavigationPath>?(v27, v28);
        static Update.enqueueAction(_:)();
        swift_release();
      }
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v68);
      *(void *)&__src[0] = v41;
      *((void *)&__src[0] + 1) = v43;
      LOBYTE(__src[1]) = v45;
      outlined init with take of NavigationState.UpdateResult(&v68, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 1;
      return memcpy(a7, __src, 0x11CuLL);
    }
  }
  if (*(unsigned __int8 *)(v9 + 24) > 1u) {
    goto LABEL_20;
  }
  unint64_t v39 = *(void *)(a6 + 168);
  if (v39 >> 1 == 0xFFFFFFFF)
  {
    uint64_t v16 = *((void *)&v96 + 1);
    uint64_t v21 = *((void *)&v97 + 1);
    uint64_t v20 = v97;
    unint64_t v39 = *(void *)&v98[8];
    uint64_t v22 = *(void *)v98;
  }
  unint64_t v40 = v39 >> 62;
  if (v40)
  {
    if (v40 != 1) {
      goto LABEL_20;
    }
    uint64_t v16 = v20;
    LOBYTE(v20) = v21;
    if (v21 == 6) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v22 = v21;
  }
  if (v20 - 2 < 4)
  {
LABEL_20:
    lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError();
    swift_allocError();
    *(_OWORD *)uint64_t v48 = 0u;
    *(_OWORD *)(v48 + 16) = 0u;
    *(unsigned char *)(v48 + 32) = 5;
    return (void *)swift_willThrow();
  }
  if ((_BYTE)v20)
  {
    uint64_t v49 = 2;
  }
  else
  {
    uint64_t v49 = 1;
    if (v22 != 3) {
      uint64_t v49 = 2;
    }
  }
  long long v50 = *(_OWORD *)(a6 + 112);
  long long v74 = *(_OWORD *)(a6 + 96);
  long long v75 = v50;
  uint64_t v51 = *(void *)(a6 + 128);
  long long v52 = *(_OWORD *)(a6 + 48);
  long long v70 = *(_OWORD *)(a6 + 32);
  long long v71 = v52;
  long long v53 = *(_OWORD *)(a6 + 80);
  long long v72 = *(_OWORD *)(a6 + 64);
  long long v73 = v53;
  long long v54 = *(_OWORD *)(a6 + 16);
  long long v68 = *(_OWORD *)a6;
  long long v69 = v54;
  uint64_t v76 = v51;
  uint64_t v77 = v16;
  uint64_t v78 = v49;
  uint64_t v79 = v22;
  uint64_t v80 = 0;
  long long v81 = 0uLL;
  uint64_t v82 = a1;
  uint64_t v83 = v11;
  uint64_t v84 = v12;
  uint64_t v85 = v13;
  uint64_t v86 = v14;
  uint64_t v87 = a4;
  uint64_t v88 = a5;
  uint64_t v89 = 0;
  char v90 = 12;
  uint64_t v55 = v13;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v68, -1, a3, a4);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(&v68, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  memcpy(a7, __src, 0x11CuLL);
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v12, v55);
  return (void *)outlined retain of NavigationRequest((uint64_t)&v92);
}

void *NavigationColumnState.programmaticallyDismissView(identifier:request:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = v3;
  unint64_t v76 = a1[1];
  uint64_t v5 = a1[3];
  uint64_t v74 = *a1;
  uint64_t v75 = a1[2];
  long long v6 = *(_OWORD *)(a2 + 112);
  long long v117 = *(_OWORD *)(a2 + 96);
  long long v118 = v6;
  uint64_t v66 = *(void *)(a2 + 136);
  uint64_t v119 = *(void *)(a2 + 128);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v113 = *(_OWORD *)(a2 + 32);
  long long v114 = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  long long v115 = *(_OWORD *)(a2 + 64);
  long long v116 = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v111 = *(_OWORD *)a2;
  long long v112 = v9;
  uint64_t v68 = *(void *)(a2 + 152);
  uint64_t v69 = *(void *)(a2 + 144);
  uint64_t v64 = *(void *)(a2 + 160);
  uint64_t v55 = *(void *)(a2 + 184);
  uint64_t v56 = *(void *)(a2 + 192);
  uint64_t v57 = *(void *)(a2 + 200);
  uint64_t v58 = *(void *)(a2 + 208);
  uint64_t v59 = *(void *)(a2 + 216);
  uint64_t v60 = *(void *)(a2 + 224);
  uint64_t v61 = *(void *)(a2 + 232);
  uint64_t v62 = *(void *)(a2 + 240);
  uint64_t v10 = v3[14];
  uint64_t v80 = v3[15];
  uint64_t v12 = v3[16];
  uint64_t v11 = v3[17];
  uint64_t v14 = v3[18];
  uint64_t v13 = v3[19];
  uint64_t v15 = v4[20];
  uint64_t v16 = v4[21];
  unint64_t v17 = v10 & 0xF000000000000007;
  uint64_t v78 = v4[22];
  uint64_t v79 = v15;
  uint64_t v77 = v4[23];
  uint64_t v71 = v13;
  uint64_t v73 = v16;
  unsigned __int8 v54 = *(unsigned char *)(a2 + 248);
  unint64_t v65 = *(void *)(a2 + 168);
  if ((v16 & 0x8000000000000000) == 0)
  {
    if ((v10 & 0x8000000000000000) == 0 || v17 == 0xF000000000000007)
    {
      unsigned int v22 = *((unsigned __int8 *)v4 + 24);
LABEL_11:
      __int16 v23 = *(_WORD *)((char *)v4 + 297);
      char v24 = *((unsigned char *)v4 + 296);
      uint64_t v25 = v4[36];
      uint64_t v26 = v4[34];
      char v27 = *((unsigned char *)v4 + 264);
      uint64_t v29 = v4[31];
      uint64_t v28 = v4[32];
      uint64_t v30 = v4[28];
      uint64_t v31 = v4[13];
      uint64_t v32 = v4[2];
      int v33 = *((_DWORD *)v4 + 2);
      *(void *)__src = *v4;
      *(_DWORD *)&__src[8] = v33;
      *(void *)&__src[16] = v32;
      unsigned int v67 = v22;
      __src[24] = v22;
      long long v34 = *((_OWORD *)v4 + 3);
      *(_OWORD *)&__src[32] = *((_OWORD *)v4 + 2);
      *(_OWORD *)&__src[48] = v34;
      *(_OWORD *)&__src[64] = *((_OWORD *)v4 + 4);
      *(void *)&__src[80] = v4[10];
      *(_OWORD *)&__src[88] = *(_OWORD *)(v4 + 11);
      *(void *)&__src[104] = v31;
      *(void *)&__src[112] = v10;
      *(void *)&__src[120] = v80;
      *(void *)&__src[128] = v12;
      *(void *)&__src[136] = v11;
      *(void *)&__src[144] = v14;
      *(void *)&__src[152] = v13;
      *(void *)&__src[160] = v15;
      uint64_t v35 = v78;
      *(void *)&__src[168] = v16;
      *(void *)&__src[176] = v78;
      *(void *)&__src[184] = v77;
      long long v36 = *((_OWORD *)v4 + 13);
      *(_OWORD *)&__src[192] = *((_OWORD *)v4 + 12);
      *(_OWORD *)&__src[208] = v36;
      *(void *)&__src[224] = v30;
      *(_OWORD *)&__src[232] = *(_OWORD *)(v4 + 29);
      *(void *)&__src[248] = v29;
      *(void *)&__src[256] = v28;
      __src[264] = v27;
      *(void *)&__src[272] = v26;
      *(void *)&unsigned char __src[280] = v4[35];
      uint64_t v82 = v25;
      char v83 = v24;
      __int16 v84 = v23;
      outlined copy of NavigationColumnState.ColumnContent(v10, v80, v12, v11, v14, v13, v15, v16);
      outlined retain of NavigationColumnState((uint64_t *)__src);
      swift_release();
      uint64_t v63 = v14;
      outlined consume of NavigationColumnState.ReplacedRoot?(v10, v80, v12, v11);
      outlined release of NavigationColumnState((uint64_t *)__src);
      goto LABEL_15;
    }
    uint64_t v18 = v80;
    outlined copy of NavigationColumnState.ReplacedRoot(v10, v80, v12, v11);
    goto LABEL_5;
  }
  if (v17 == 0xF000000000000007)
  {
    outlined consume of NavigationColumnState.ColumnContent(v10, v80, v12, v11, v14, v13, v15, v16);
LABEL_13:
    unsigned int v22 = *((unsigned __int8 *)v4 + 24);
    goto LABEL_14;
  }
  if ((v10 & 0x8000000000000000) == 0) {
    goto LABEL_13;
  }
  uint64_t v18 = v80;
  outlined copy of NavigationColumnState.ReplacedRoot?(v10, v80, v12, v11);
LABEL_5:
  *(void *)__src = v18;
  *(void *)&__src[8] = v12;
  *(void *)&__src[16] = v11;
  *(void *)&__src[24] = v14;
  *(void *)&long long v87 = v74;
  *((void *)&v87 + 1) = v76;
  *(void *)&long long v88 = v75;
  *((void *)&v88 + 1) = v5;
  outlined copy of NavigationColumnState.ColumnContent(v10, v18, v12, v11, v14, v13, v15, v16);
  swift_retain();
  outlined copy of Text.LineStyle?(v12, v11);
  uint64_t v19 = v13;
  char v20 = NavigationLinkSelectionIdentifier.matches(_:)(&v87);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v12, v11);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v12, v11);
  uint64_t v21 = v19;
  uint64_t v15 = v79;
  outlined consume of NavigationColumnState.ColumnContent(v10, v18, v12, v11, v14, v21, v79, v16);
  if (v20)
  {
    NavigationColumnState.ejectAll()();
    *((unsigned char *)v4 + 296) = 0;
LABEL_36:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v87);
    *(_OWORD *)__src = xmmword_18834FC50;
    __src[16] = 2;
    outlined init with take of NavigationState.UpdateResult(&v87, &__src[24]);
    *(void *)&__src[276] = 1;
    return memcpy(a3, __src, 0x11CuLL);
  }
  unsigned int v22 = *((unsigned __int8 *)v4 + 24);
  uint64_t v13 = v71;
  if ((v16 & 0x8000000000000000) == 0) {
    goto LABEL_11;
  }
LABEL_14:
  unsigned int v67 = v22;
  uint64_t v63 = v14;
  uint64_t v35 = MEMORY[0x1E4FBC860];
  specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
LABEL_15:
  swift_retain();
  outlined copy of Text.LineStyle?(v76, v75);
  uint64_t v70 = specialized Collection.firstIndex(where:)(v35, v74, v76, v75, v5);
  char v38 = v37;
  swift_release();
  outlined consume of Text.LineStyle?(v76, v75);
  swift_bridgeObjectRelease();
  uint64_t result = (void *)swift_bridgeObjectRelease();
  if ((v38 & 1) == 0)
  {
    if (__OFADD__(v70, 1))
    {
      __break(1u);
    }
    else
    {
      if (v16 < 0) {
        goto LABEL_36;
      }
      outlined copy of NavigationColumnState.ReplacedRoot?(v10, v80, v12, v11);
      swift_retain();
      uint64_t v43 = v78;
      swift_bridgeObjectRetain();
      uint64_t v44 = v77;
      swift_bridgeObjectRetain();
      specialized Collection<>.dismiss(from:)(v70 + 1, v78, v77);
      uint64_t result = (void *)outlined consume of NavigationColumnState.ColumnContent(v10, v80, v12, v11, v63, v71, v79, v73);
      uint64_t v85 = v78;
      uint64_t v86 = v77;
      int64_t v45 = *(void *)(v78 + 16);
      int64_t v46 = v45 - v70;
      if (!__OFSUB__(v45, v70))
      {
        if (!v46)
        {
          uint64_t v50 = v71;
          uint64_t v47 = v11;
          uint64_t v48 = v80;
          goto LABEL_35;
        }
        uint64_t v47 = v11;
        uint64_t v48 = v80;
        if ((v46 & 0x8000000000000000) == 0)
        {
          uint64_t result = (void *)specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(*(void *)(v78 + 16), v70 - v45, 0, v78);
          if (v49)
          {
LABEL_49:
            __break(1u);
            return result;
          }
          if (v45 >= (uint64_t)result)
          {
            specialized IdentifiedArray.replaceSubrange<A>(_:with:)((uint64_t)result, v45);
            uint64_t v43 = v85;
            uint64_t v44 = v86;
            uint64_t v50 = v71;
LABEL_35:
            v4[14] = v10;
            v4[15] = v48;
            v4[16] = v12;
            v4[17] = v47;
            v4[18] = v63;
            v4[19] = v50;
            v4[20] = v79;
            v4[21] = v73;
            v4[22] = v43;
            v4[23] = v44;
            goto LABEL_36;
          }
LABEL_48:
          __break(1u);
          goto LABEL_49;
        }
LABEL_47:
        __break(1u);
        goto LABEL_48;
      }
    }
    __break(1u);
    goto LABEL_47;
  }
  if (v67 > 1)
  {
LABEL_33:
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)&v87);
    *(_OWORD *)__src = xmmword_18834FC50;
    __src[16] = 2;
    outlined init with take of NavigationState.UpdateResult(&v87, &__src[24]);
    *(void *)&__src[276] = 0;
    return memcpy(a3, __src, 0x11CuLL);
  }
  if (v65 >> 1 != 0xFFFFFFFF)
  {
    uint64_t v51 = v64;
    unint64_t v52 = v65 >> 62;
    if (v65 >> 62) {
      goto LABEL_27;
    }
LABEL_31:
    uint64_t v51 = v68;
    goto LABEL_32;
  }
  uint64_t v66 = *((void *)&v115 + 1);
  uint64_t v51 = v117;
  uint64_t v68 = *((void *)&v116 + 1);
  uint64_t v69 = v116;
  unint64_t v52 = *((void *)&v117 + 1) >> 62;
  if (!(*((void *)&v117 + 1) >> 62)) {
    goto LABEL_31;
  }
LABEL_27:
  if (v52 != 1) {
    goto LABEL_33;
  }
  uint64_t v66 = v69;
  LOBYTE(v69) = v68;
  if (v68 == 6) {
    goto LABEL_33;
  }
LABEL_32:
  if (v69 - 2 < 4) {
    goto LABEL_33;
  }
  if ((_BYTE)v69)
  {
    uint64_t v53 = 2;
  }
  else
  {
    uint64_t v53 = 1;
    if (v51 != 3) {
      uint64_t v53 = 2;
    }
  }
  long long v93 = v117;
  long long v94 = v118;
  long long v89 = v113;
  long long v90 = v114;
  long long v91 = v115;
  long long v92 = v116;
  long long v87 = v111;
  long long v88 = v112;
  uint64_t v95 = v119;
  uint64_t v96 = v66;
  uint64_t v97 = v53;
  uint64_t v98 = v51;
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v102 = v55;
  uint64_t v103 = v56;
  uint64_t v104 = v57;
  uint64_t v105 = v58;
  uint64_t v106 = v59;
  uint64_t v107 = v60;
  uint64_t v108 = v61;
  uint64_t v109 = v62;
  unsigned __int8 v110 = v54;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(&v87, v40, v41, v42);
  *(_OWORD *)__src = xmmword_18834FC50;
  __src[16] = 2;
  outlined init with take of NavigationState.UpdateResult(&v87, &__src[24]);
  *(void *)&__src[276] = 0;
  memcpy(a3, __src, 0x11CuLL);
  outlined copy of NavigationRequest.Action?(v55, v56, v57, v58, v59, v60, v61, v62, v54);
  return (void *)outlined retain of NavigationRequest((uint64_t)&v111);
}

void *NavigationColumnState.presentView(_:identifier:dismiss:request:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  long long v7 = (void *)v6;
  uint64_t v11 = a6;
  uint64_t v13 = *a2;
  uint64_t v12 = a2[1];
  uint64_t v15 = a2[2];
  uint64_t v14 = a2[3];
  long long v16 = *(_OWORD *)(a5 + 112);
  long long v81 = *(_OWORD *)(a5 + 96);
  long long v82 = v16;
  uint64_t v83 = *(void *)(a5 + 128);
  long long v17 = *(_OWORD *)(a5 + 48);
  v79[2] = *(_OWORD *)(a5 + 32);
  v79[3] = v17;
  long long v18 = *(_OWORD *)(a5 + 80);
  v79[4] = *(_OWORD *)(a5 + 64);
  long long v80 = v18;
  long long v19 = *(_OWORD *)(a5 + 16);
  v79[0] = *(_OWORD *)a5;
  v79[1] = v19;
  int v20 = *(unsigned __int8 *)(v6 + 24);
  if (*((void *)&v81 + 1) >> 62)
  {
    if (*((void *)&v81 + 1) >> 62 != 1 || BYTE8(v80) == 6 || v20 != BYTE8(v80))
    {
LABEL_11:
      uint64_t v56 = *(unsigned __int8 *)(v6 + 24);
      uint64_t v58 = v14;
      uint64_t v60 = v13;
      *(unsigned char *)(v6 + 296) = 1;
      swift_retain();
      uint64_t v25 = a1;
      swift_retain();
      uint64_t v26 = v12;
      uint64_t v27 = v12;
      uint64_t v28 = v15;
      outlined copy of Text.LineStyle?(v27, v15);
      uint64_t v29 = a4;
      swift_retain();
      NavigationColumnState.ejectAll()();
      uint64_t v30 = *(void *)(v6 + 112);
      uint64_t v31 = *(void *)(v6 + 120);
      uint64_t v32 = *(void *)(v6 + 128);
      uint64_t v33 = *(void *)(v6 + 136);
      uint64_t v34 = *(void *)(v6 + 144);
      uint64_t v35 = *(void *)(v6 + 152);
      uint64_t v36 = *(void *)(v6 + 160);
      uint64_t v37 = *(void *)(v6 + 168);
      uint64_t v39 = v7[22];
      uint64_t v38 = v7[23];
      if (v37 < 0)
      {
        outlined consume of NavigationColumnState.ColumnContent(v30, v31, v32, v33, v34, v35, v36, v37);
        uint64_t v39 = 0;
        uint64_t v38 = 0;
        uint64_t v37 = 0x8000000000000000;
      }
      else
      {
        outlined consume of NavigationColumnState.ReplacedRoot?(v30, v31, v32, v33);
      }
      v7[14] = v25 | 0x8000000000000000;
      v7[15] = v60;
      v7[16] = v26;
      v7[17] = v28;
      v7[18] = v58;
      v7[19] = a3;
      v7[20] = v29;
      v7[21] = v37;
      v7[22] = v39;
      v7[23] = v38;
      uint64_t v43 = v7[2];
      uint64_t v44 = v7[4];
      uint64_t v45 = 0;
      uint64_t v11 = a6;
      switch(v56)
      {
        case 1:
          goto LABEL_18;
        case 2:
          uint64_t v45 = v44 == 3;
          goto LABEL_18;
        case 5:
          uint64_t v45 = 2;
LABEL_18:
          long long v46 = *(_OWORD *)(a5 + 112);
          v65[6] = *(_OWORD *)(a5 + 96);
          v65[7] = v46;
          uint64_t v47 = *(void *)(a5 + 128);
          long long v48 = *(_OWORD *)(a5 + 48);
          _DWORD v65[2] = *(_OWORD *)(a5 + 32);
          v65[3] = v48;
          long long v49 = *(_OWORD *)(a5 + 80);
          v65[4] = *(_OWORD *)(a5 + 64);
          v65[5] = v49;
          long long v50 = *(_OWORD *)(a5 + 16);
          v65[0] = *(_OWORD *)a5;
          v65[1] = v50;
          uint64_t v66 = v47;
          uint64_t v67 = v43;
          uint64_t v68 = v45;
          uint64_t v69 = v44;
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          uint64_t v72 = 0;
          uint64_t v73 = 4;
          long long v74 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          uint64_t v77 = 0;
          char v78 = 22;
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v65, v40, v41, v42);
          outlined retain of NavigationRequest((uint64_t)v79);
          break;
        default:
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v65);
          break;
      }
      outlined init with take of NavigationState.UpdateResult(v65, __src);
      goto LABEL_20;
    }
  }
  else if (v20 != v80)
  {
    goto LABEL_11;
  }
  if ((*(void *)(v6 + 168) & 0x8000000000000000) != 0) {
    goto LABEL_11;
  }
  uint64_t v61 = *(void *)(v6 + 168);
  uint64_t v21 = *(void *)(v6 + 112);
  uint64_t v57 = *(void *)(v6 + 128);
  uint64_t v59 = *(void *)(v6 + 120);
  uint64_t v54 = *(void *)(v6 + 144);
  uint64_t v55 = *(void *)(v6 + 136);
  uint64_t v52 = *(void *)(v6 + 160);
  uint64_t v53 = *(void *)(v6 + 152);
  long long v22 = *(_OWORD *)(v6 + 176);
  if (*(unsigned __int8 *)(v6 + 296) >= 2u) {
    *(unsigned char *)(v6 + 296) = 0;
  }
  __src[0] = v22;
  uint64_t v23 = *(void *)(v22 + 16);
  v64[0] = a1;
  v64[1] = v13;
  v64[2] = v12;
  v64[3] = v15;
  v64[4] = v14;
  v64[5] = a3;
  v64[6] = a4;
  swift_retain();
  swift_retain();
  outlined copy of Text.LineStyle?(v12, v15);
  swift_retain();
  specialized IdentifiedArray.replaceSubrange<A>(_:with:)(v23, v23, v64);
  swift_release();
  swift_release();
  outlined consume of Text.LineStyle?(v12, v15);
  swift_release();
  *(void *)(v6 + 112) = v21;
  *(void *)(v6 + 120) = v59;
  *(void *)(v6 + 128) = v57;
  *(void *)(v6 + 136) = v55;
  *(void *)(v6 + 144) = v54;
  *(void *)(v6 + 152) = v53;
  *(void *)(v6 + 160) = v52;
  *(void *)(v6 + 168) = v61;
  *(_OWORD *)(v6 + 176) = __src[0];
  _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__src);
LABEL_20:
  outlined init with take of NavigationState.UpdateResult(__src, v65);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v65, (long long *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 1;
  return memcpy(v11, __src, 0x11CuLL);
}

void *NavigationColumnState.updateView(_:identifier:request:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v86 = a4;
  uint64_t v87 = a1;
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v7 - 8);
  long long v82 = (char *)&v68 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = *a2;
  uint64_t v9 = a2[1];
  uint64_t v12 = a2[2];
  uint64_t v11 = a2[3];
  long long v13 = *(_OWORD *)(a3 + 112);
  long long v112 = *(_OWORD *)(a3 + 96);
  long long v113 = v13;
  uint64_t v14 = *(void *)(a3 + 128);
  uint64_t v74 = *(void *)(a3 + 136);
  uint64_t v114 = v14;
  long long v15 = *(_OWORD *)(a3 + 48);
  long long v108 = *(_OWORD *)(a3 + 32);
  long long v109 = v15;
  long long v16 = *(_OWORD *)(a3 + 80);
  long long v110 = *(_OWORD *)(a3 + 64);
  long long v111 = v16;
  long long v17 = *(_OWORD *)(a3 + 16);
  long long v106 = *(_OWORD *)a3;
  long long v107 = v17;
  char v78 = *(uint8_t **)(a3 + 144);
  uint64_t v79 = v10;
  uint64_t v77 = *(void *)(a3 + 152);
  uint64_t v76 = *(void *)(a3 + 160);
  unint64_t v75 = *(void *)(a3 + 168);
  uint64_t v18 = *(void *)(a3 + 184);
  uint64_t v83 = v4;
  __int16 v84 = (uint8_t *)v18;
  uint64_t v19 = *(void *)(a3 + 200);
  uint64_t v85 = *(void *)(a3 + 192);
  uint64_t v20 = *(void *)(a3 + 208);
  uint64_t v21 = *(void *)(a3 + 216);
  uint64_t v22 = *(void *)(a3 + 224);
  uint64_t v23 = *(void *)(a3 + 232);
  uint64_t v24 = *(void *)(a3 + 240);
  uint64_t v25 = *(unsigned __int8 *)(a3 + 248);
  *(void *)&v105[0] = v10;
  *((void *)&v105[0] + 1) = v9;
  uint64_t v80 = v9;
  uint64_t v81 = v11;
  *(void *)&v105[1] = v12;
  *((void *)&v105[1] + 1) = v11;
  if (NavigationColumnState.ColumnContent.replaceViewDestinationView(_:identifier:)(v87, (uint64_t *)v105))
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v88);
    v105[0] = xmmword_18834FC50;
    LOBYTE(v105[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v88, (_OWORD *)((char *)&v105[1] + 8));
    *(void *)((char *)&v105[17] + 4) = 0x100000000;
    uint64_t v26 = v86;
    return memcpy(v26, v105, 0x11CuLL);
  }
  uint64_t v28 = v77;
  uint64_t v27 = (uint64_t)v78;
  uint64_t v29 = v25;
  uint64_t v30 = v84;
  uint64_t v31 = v85;
  uint64_t v32 = v21;
  uint64_t v33 = v79;
  uint64_t v34 = v80;
  uint64_t v35 = v81;
  if (v83[24] > 1u)
  {
LABEL_12:
    uint64_t v41 = (uint64_t)v82;
    static Log.navigation.getter();
    uint64_t v42 = type metadata accessor for Logger();
    uint64_t v43 = *(void *)(v42 - 8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42) == 1)
    {
      outlined destroy of Logger?(v41);
      uint64_t v44 = v86;
    }
    else
    {
      uint64_t v87 = v43;
      uint64_t v45 = v33;
      swift_retain();
      uint64_t v46 = v34;
      outlined copy of Text.LineStyle?(v34, v12);
      swift_retain();
      outlined copy of Text.LineStyle?(v34, v12);
      uint64_t v47 = Logger.logObject.getter();
      os_log_type_t v48 = static os_log_type_t.error.getter();
      int v49 = v48;
      if (os_log_type_enabled(v47, v48))
      {
        LODWORD(v85) = v49;
        long long v50 = (uint8_t *)swift_slowAlloc();
        uint64_t v51 = swift_slowAlloc();
        __int16 v84 = (uint8_t *)v51;
        uint64_t v83 = v50;
        *(_DWORD *)long long v50 = 136315138;
        *(void *)&v88[0] = v51;
        char v78 = v50 + 4;
        *(void *)&v105[0] = v45;
        *((void *)&v105[0] + 1) = v46;
        *(void *)&v105[1] = v12;
        *((void *)&v105[1] + 1) = v35;
        uint64_t v52 = NavigationLinkSelectionIdentifier.description.getter();
        *(void *)&v105[0] = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v52, v53, (uint64_t *)v88);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.LineStyle?(v46, v12);
        swift_release();
        outlined consume of Text.LineStyle?(v46, v12);
        uint64_t v54 = v83;
        _os_log_impl(&dword_1872C6000, v47, (os_log_type_t)v85, "Failed to update view destination view with ID: %s", v83, 0xCu);
        uint64_t v55 = (uint64_t)v84;
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v55, -1, -1);
        MEMORY[0x18C119C60](v54, -1, -1);
      }
      else
      {
        swift_release();

        outlined consume of Text.LineStyle?(v34, v12);
        swift_release();
        outlined consume of Text.LineStyle?(v34, v12);
      }
      uint64_t v44 = v86;
      (*(void (**)(uint64_t, uint64_t))(v87 + 8))(v41, v42);
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v88);
    v105[0] = xmmword_18834FC50;
    LOBYTE(v105[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v88, (_OWORD *)((char *)&v105[1] + 8));
    *(void *)((char *)&v105[17] + 4) = 0;
    uint64_t v26 = v44;
    return memcpy(v26, v105, 0x11CuLL);
  }
  uint64_t v36 = v19;
  uint64_t v37 = v20;
  if (v75 >> 1 != 0xFFFFFFFF)
  {
    uint64_t v39 = v76;
    uint64_t v38 = v77;
    unint64_t v40 = v75 >> 62;
    if (v75 >> 62) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t v39 = v38;
    goto LABEL_11;
  }
  uint64_t v27 = v111;
  uint64_t v74 = *((void *)&v110 + 1);
  uint64_t v38 = *((void *)&v111 + 1);
  uint64_t v39 = v112;
  unint64_t v40 = *((void *)&v112 + 1) >> 62;
  if (!(*((void *)&v112 + 1) >> 62)) {
    goto LABEL_10;
  }
LABEL_6:
  if (v40 != 1) {
    goto LABEL_12;
  }
  uint64_t v74 = v27;
  uint64_t v27 = v38;
  if (v38 == 6) {
    goto LABEL_12;
  }
LABEL_11:
  if (v27 - 2 < 4) {
    goto LABEL_12;
  }
  if ((_BYTE)v27)
  {
    uint64_t v57 = 2;
  }
  else if (v39 == 3)
  {
    uint64_t v57 = 1;
  }
  else
  {
    uint64_t v57 = 2;
  }
  uint64_t v58 = v24;
  uint64_t v59 = v23;
  uint64_t v60 = v32;
  uint64_t v61 = v74;
  int v69 = v29;
  uint64_t v70 = v37;
  uint64_t v71 = v32;
  uint64_t v72 = v58;
  uint64_t v73 = v22;
  uint64_t v87 = v36;
  uint64_t v62 = v36;
  uint64_t v63 = v37;
  uint64_t v64 = v23;
  char v65 = v29;
  if (v29 == 255)
  {
    long long v82 = (char *)*((void *)&v106 + 1);
    uint64_t v83 = (uint8_t *)v106;
    uint64_t v63 = *((void *)&v107 + 1);
    uint64_t v81 = v107;
    uint64_t v22 = *((void *)&v108 + 1);
    uint64_t v60 = v108;
    uint64_t v58 = *((void *)&v109 + 1);
    uint64_t v64 = v109;
    char v65 = v110;
    uint64_t v66 = v59;
    uint64_t v67 = v57;
    outlined copy of NavigationRequest.Action(v106, *((uint64_t *)&v106 + 1), v107, *((uint64_t *)&v107 + 1), v108, *((uint64_t *)&v108 + 1), v109, *((uint64_t *)&v109 + 1), v110);
    uint64_t v62 = v81;
    uint64_t v31 = (uint64_t)v82;
    uint64_t v30 = v83;
    uint64_t v57 = v67;
    uint64_t v59 = v66;
    uint64_t v61 = v74;
  }
  v88[6] = v112;
  v88[7] = v113;
  v88[2] = v108;
  v88[3] = v109;
  v88[4] = v110;
  v88[5] = v111;
  v88[0] = v106;
  v88[1] = v107;
  uint64_t v89 = v114;
  uint64_t v90 = v61;
  uint64_t v91 = v57;
  uint64_t v92 = v39;
  uint64_t v93 = 0;
  uint64_t v94 = 0;
  uint64_t v95 = 0;
  uint64_t v96 = v30;
  uint64_t v97 = v31;
  uint64_t v98 = v62;
  uint64_t v99 = v63;
  uint64_t v100 = v60;
  uint64_t v101 = v22;
  uint64_t v102 = v64;
  uint64_t v103 = v58;
  char v104 = v65;
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v88, v29, v27, v28);
  v105[0] = xmmword_18834FC50;
  LOBYTE(v105[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v88, (_OWORD *)((char *)&v105[1] + 8));
  *(void *)((char *)&v105[17] + 4) = 0;
  memcpy(v86, v105, 0x11CuLL);
  outlined copy of NavigationRequest.Action?((uint64_t)v84, v85, v87, v70, v71, v73, v59, v72, v69);
  return (void *)outlined retain of NavigationRequest((uint64_t)&v106);
}

void *NavigationColumnState.accumulatedDismiss(count:request:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v7 = a5;
  long long v8 = *(_OWORD *)(a2 + 112);
  long long v60 = *(_OWORD *)(a2 + 96);
  long long v61 = v8;
  uint64_t v62 = *(void *)(a2 + 128);
  long long v9 = *(_OWORD *)(a2 + 48);
  v57[2] = *(_OWORD *)(a2 + 32);
  v57[3] = v9;
  long long v10 = *(_OWORD *)(a2 + 80);
  long long v58 = *(_OWORD *)(a2 + 64);
  long long v59 = v10;
  long long v11 = *(_OWORD *)(a2 + 16);
  v57[0] = *(_OWORD *)a2;
  v57[1] = v11;
  long long v12 = *(_OWORD *)(a2 + 136);
  long long v13 = *(_OWORD *)(a2 + 152);
  long long v14 = *(_OWORD *)(a2 + 168);
  uint64_t v15 = *(void *)(v5 + 16);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 24);
  uint64_t v17 = *(void *)(v5 + 32);
  uint64_t v18 = *(void *)(v5 + 120);
  uint64_t v19 = *(void *)(v5 + 128);
  uint64_t v20 = *(void *)(v5 + 136);
  uint64_t v21 = *(void *)(v5 + 144);
  uint64_t v22 = *(void *)(v5 + 168);
  uint64_t v23 = *(void *)(v5 + 176);
  if (*((void *)&v60 + 1) >> 62
    || v15 != *((void *)&v58 + 1)
    || v16 != v59
    || v17 != *((void *)&v59 + 1))
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      uint64_t v43 = *(unsigned __int8 *)(v5 + 24);
      long long v44 = *(_OWORD *)(a2 + 168);
      long long v45 = *(_OWORD *)(a2 + 152);
      long long v46 = *(_OWORD *)(a2 + 136);
      uint64_t v47 = *(void *)(v5 + 32);
      uint64_t v48 = *(void *)(v5 + 16);
      uint64_t v49 = a1;
      uint64_t v53 = *(void *)(v5 + 152);
      uint64_t v54 = *(uint64_t (**)(uint64_t))(*(void *)v22 + 88);
      uint64_t v51 = *(void *)(v5 + 112);
      uint64_t v52 = *(void *)(v5 + 160);
      outlined copy of NavigationColumnState.ColumnContent(v51, v18, v19, v20, v21, v53, v52, v22);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v24 = swift_bridgeObjectRetain();
      uint64_t v25 = v54(v24);
      swift_release();
      BOOL v26 = __OFADD__(v25, 1);
      uint64_t v27 = v25 + 1;
      if (v26)
      {
        __break(1u);
      }
      else
      {
        uint64_t v28 = *(void *)(v23 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        outlined consume of NavigationColumnState.ColumnContent(v51, v18, v19, v20, v21, v53, v52, v22);
        uint64_t v29 = v27 + v28;
        if (!__OFADD__(v27, v28))
        {
          uint64_t v7 = a5;
          uint64_t v17 = v47;
          uint64_t v15 = v48;
          long long v13 = v45;
          long long v12 = v46;
          long long v14 = v44;
          uint64_t v16 = v43;
          a1 = v49 + v29;
          if (!__OFADD__(v49, v29)) {
            goto LABEL_9;
          }
LABEL_13:
          __break(1u);
LABEL_14:
          if (v17 == 3) {
            uint64_t v30 = 1;
          }
          else {
            uint64_t v30 = 2;
          }
LABEL_17:
          long long v31 = *(_OWORD *)(a2 + 112);
          __src[6] = *(_OWORD *)(a2 + 96);
          __src[7] = v31;
          uint64_t v32 = *(void *)(a2 + 128);
          long long v33 = *(_OWORD *)(a2 + 48);
          __src[2] = *(_OWORD *)(a2 + 32);
          __src[3] = v33;
          long long v34 = *(_OWORD *)(a2 + 80);
          __src[4] = *(_OWORD *)(a2 + 64);
          __src[5] = v34;
          long long v35 = *(_OWORD *)(a2 + 16);
          __src[0] = *(_OWORD *)a2;
          __src[1] = v35;
          *(void *)&__src[8] = v32;
          *((void *)&__src[8] + 1) = v15;
          *(void *)&__src[9] = v30;
          *((void *)&__src[9] + 1) = v17;
          memset(&__src[10], 0, 24);
          *((void *)&__src[11] + 1) = a1;
          memset(&__src[12], 0, 56);
          char v36 = 15;
LABEL_19:
          BYTE8(__src[15]) = v36;
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src, a2, a3, a4);
          outlined retain of NavigationRequest((uint64_t)v57);
          goto LABEL_20;
        }
      }
      __break(1u);
      JUMPOUT(0x187C694C4);
    }
    BOOL v26 = __OFADD__(a1++, 1);
    if (v26) {
      goto LABEL_13;
    }
  }
LABEL_9:
  uint64_t v30 = 2;
  switch(v16)
  {
    case 1:
      goto LABEL_17;
    case 2:
      long long v37 = *(_OWORD *)(a2 + 112);
      __src[6] = *(_OWORD *)(a2 + 96);
      __src[7] = v37;
      uint64_t v38 = *(void *)(a2 + 128);
      long long v39 = *(_OWORD *)(a2 + 48);
      __src[2] = *(_OWORD *)(a2 + 32);
      __src[3] = v39;
      long long v40 = *(_OWORD *)(a2 + 80);
      __src[4] = *(_OWORD *)(a2 + 64);
      __src[5] = v40;
      long long v41 = *(_OWORD *)(a2 + 16);
      __src[0] = *(_OWORD *)a2;
      __src[1] = v41;
      *(long long *)((char *)&__src[8] + 8) = v12;
      *(long long *)((char *)&__src[9] + 8) = v13;
      *(long long *)((char *)&__src[10] + 8) = v14;
      *(void *)&__src[8] = v38;
      *((void *)&__src[11] + 1) = a1;
      memset(&__src[12], 0, 56);
      char v36 = 9;
      goto LABEL_19;
    case 3:
    case 4:
    case 5:
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__src);
      break;
    default:
      goto LABEL_14;
  }
LABEL_20:
  outlined init with take of NavigationState.UpdateResult(__src, v56);
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v56, (long long *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  return memcpy(v7, __src, 0x11CuLL);
}

void *NavigationColumnState.presentValueInList(value:isSelectionChange:selectionPopsSubsequentColumn:request:activeBinding:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, char a7@<W6>, uint64_t a8@<X7>, void *a9@<X8>)
{
  long long v11 = *(_OWORD *)(a4 + 112);
  v49[6] = *(_OWORD *)(a4 + 96);
  v49[7] = v11;
  uint64_t v50 = *(void *)(a4 + 128);
  long long v12 = *(_OWORD *)(a4 + 48);
  v49[2] = *(_OWORD *)(a4 + 32);
  v49[3] = v12;
  long long v13 = *(_OWORD *)(a4 + 80);
  v49[4] = *(_OWORD *)(a4 + 64);
  v49[5] = v13;
  long long v14 = *(_OWORD *)(a4 + 16);
  v49[0] = *(_OWORD *)a4;
  v49[1] = v14;
  uint64_t v15 = *(void *)(a8 + 16);
  if (v15 == 1 || (uint64_t v16 = *(void *)(a8 + 32)) == 0)
  {
    uint64_t v26 = 256;
    long long v27 = *(_OWORD *)(a4 + 112);
    if ((a3 & 1) == 0) {
      uint64_t v26 = 0;
    }
    v36[6] = *(_OWORD *)(a4 + 96);
    _OWORD v36[7] = v27;
    uint64_t v28 = *(void *)(a4 + 128);
    long long v29 = *(_OWORD *)(a4 + 48);
    v36[2] = *(_OWORD *)(a4 + 32);
    v36[3] = v29;
    long long v30 = *(_OWORD *)(a4 + 80);
    v36[4] = *(_OWORD *)(a4 + 64);
    v36[5] = v30;
    long long v31 = *(_OWORD *)(a4 + 16);
    v36[0] = *(_OWORD *)a4;
    v36[1] = v31;
    long long v38 = *(_OWORD *)(a4 + 136);
    long long v39 = *(_OWORD *)(a4 + 152);
    long long v40 = *(_OWORD *)(a4 + 168);
    uint64_t v37 = v28;
    uint64_t v41 = a1;
    uint64_t v42 = a5;
    uint64_t v43 = a6;
    unint64_t v44 = v26 & 0xFFFFFFFFFFFFFFFELL | a7 & 1;
    long long v45 = 0u;
    long long v46 = 0u;
    char v47 = 10;
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v36, a2, a3, a4);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v36, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 0;
    memcpy(a9, __src, 0x11CuLL);
    swift_retain();
    swift_retain();
    swift_retain();
    return (void *)outlined retain of NavigationRequest((uint64_t)v49);
  }
  else
  {
    unsigned __int16 v17 = *(_WORD *)(a8 + 64);
    uint64_t v32 = *(void *)(a8 + 56);
    uint64_t v51 = *(void *)(a8 + 48);
    uint64_t v18 = *(void *)(a8 + 40);
    uint64_t v19 = *(void *)(a8 + 24);
    uint64_t v20 = *(void *)a8;
    uint64_t v21 = *(void *)(a8 + 8);
    (*(void (**)(void *__return_ptr))(*(void *)a1 + 112))(v34);
    if (*(unsigned __int8 *)(v9 + 24) >= 3u) {
      char v22 = 3;
    }
    else {
      char v22 = *(unsigned char *)(v9 + 24);
    }
    outlined init with take of NavigationUpdateEvent.Action((uint64_t)v34, (uint64_t)v35);
    v35[57] = v22;
    outlined init with copy of NavigationUpdateEvent((uint64_t)v35, (uint64_t)__src);
    uint64_t v23 = swift_allocObject();
    *(void *)(v23 + 16) = v16;
    *(void *)(v23 + 24) = v18;
    long long v24 = __src[1];
    *(_OWORD *)(v23 + 32) = __src[0];
    *(_OWORD *)(v23 + 48) = v24;
    *(_OWORD *)(v23 + 64) = __src[2];
    *(_OWORD *)(v23 + 74) = *(_OWORD *)((char *)&__src[2] + 10);
    outlined copy of AppIntentExecutor?(v16);
    outlined copy of AppIntentExecutor?(v16);
    outlined copy of NavigationSplitViewState?(v20, v21, v15, v19, v16, v18, v51, v32, v17, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    static Update.enqueueAction(_:)();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v16);
    outlined destroy of NavigationUpdateEvent((uint64_t)v35);
    outlined copy of NavigationSplitViewState?(v20, v21, v15, v19, v16, v18, v51, v32, v17, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v36);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v36, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = 0;
    return memcpy(a9, __src, 0x11CuLL);
  }
}

uint64_t closure #2 in NavigationColumnState.update(for:shouldAnimate:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    uint64_t result = outlined destroy of Logger?((uint64_t)v9);
  }
  else
  {
    long long v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1872C6000, v13, v14, "<Navigation clientBoundPath>: Enqueueing replacement", v15, 2u);
      MEMORY[0x18C119C60](v15, -1, -1);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  if (a2)
  {
    v16[1] = a4;
    outlined copy of Binding<AnyNavigationPath>?(a1, a2);
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

int64_t specialized IdentifiedArray.popLast(_:)(int64_t result)
{
  if (result < 0)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  int64_t v2 = result;
  uint64_t v3 = *v1;
  int64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = -result;
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v4, -result, 0, *v1);
  if (v6) {
    int64_t v7 = 0;
  }
  else {
    int64_t v7 = result;
  }
  if (v4 < v7) {
    goto LABEL_14;
  }
  if (v7 < 0)
  {
LABEL_15:
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (!v2)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return v7;
  }
  uint64_t result = specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(v4, v5, 0, v3);
  if ((v8 & 1) == 0)
  {
    uint64_t v9 = result;
    if (v4 >= result)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      specialized IdentifiedArray.replaceSubrange<A>(_:with:)(v9, v4);
      return v7;
    }
    goto LABEL_16;
  }
LABEL_17:
  __break(1u);
  return result;
}

uint64_t closure #1 in closure #1 in NavigationColumnState.pop(_:request:splitViewState:)(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != result)
  {
    uint64_t v4 = result;
    uint64_t v13 = a3 + 32;
    uint64_t v14 = *(void *)(a3 + 16);
    uint64_t v5 = a2 - 1;
    swift_bridgeObjectRetain();
    uint64_t result = swift_bridgeObjectRetain();
    uint64_t v6 = a2;
    do
    {
      if (__OFSUB__(v6--, 1))
      {
        __break(1u);
LABEL_13:
        __break(1u);
LABEL_14:
        __break(1u);
LABEL_15:
        __break(1u);
        return result;
      }
      if (v6 < v4 || v6 >= a2) {
        goto LABEL_13;
      }
      if (v6 < 0) {
        goto LABEL_14;
      }
      if (v5 >= v14) {
        goto LABEL_15;
      }
      char v8 = (void *)(v13 + 56 * v6);
      uint64_t v9 = v8[2];
      uint64_t v10 = v8[3];
      uint64_t v11 = (void (*)(uint64_t))v8[5];
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v9, v10);
      uint64_t v12 = swift_retain();
      v11(v12);
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v9, v10);
      uint64_t result = swift_release();
    }
    while (v6 != v4);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #3 in NavigationColumnState.pop(_:request:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  uint64_t v10 = type metadata accessor for Logger();
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    uint64_t result = outlined destroy of Logger?((uint64_t)v9);
  }
  else
  {
    uint64_t v13 = Logger.logObject.getter();
    os_log_type_t v14 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl(&dword_1872C6000, v13, v14, "<Navigation clientBoundPath>: Enqueueing replacement", v15, 2u);
      MEMORY[0x18C119C60](v15, -1, -1);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v9, v10);
  }
  if (a2)
  {
    if (a4)
    {
      v16[1] = a4;
      outlined copy of Binding<AnyNavigationPath>?(a1, a2);
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
      swift_release();
      return swift_release();
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  uint64_t v9 = type metadata accessor for Logger();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    uint64_t result = outlined destroy of Logger?((uint64_t)v8);
  }
  else
  {
    uint64_t v12 = Logger.logObject.getter();
    os_log_type_t v13 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v12, v13))
    {
      os_log_type_t v14 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)os_log_type_t v14 = 0;
      _os_log_impl(&dword_1872C6000, v12, v13, "<Navigation clientBoundPath>: Enqueueing removeAll", v14, 2u);
      MEMORY[0x18C119C60](v14, -1, -1);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v8, v9);
  }
  if (a2)
  {
    v19[0] = a1;
    v19[1] = a2;
    v19[2] = a3;
    type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
    uint64_t v16 = v15;
    swift_retain();
    swift_retain();
    swift_retain();
    unsigned __int16 v17 = MEMORY[0x18C113DA0](&v20, v16);
    uint64_t v18 = (*(uint64_t (**)(void *))(*(void *)v20 + 88))(v17);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v20 + 104))();
      swift_release();
    }
    (*(void (**)(uint64_t))(*(void *)v20 + 128))(v18);
    v19[0] = v20;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t closure #1 in NavigationColumnState.presentValue(_:request:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    uint64_t result = outlined destroy of Logger?((uint64_t)v10);
  }
  else
  {
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)uint64_t v16 = 0;
      _os_log_impl(&dword_1872C6000, v14, v15, "<Navigation clientBoundPath>: Enqueueing push", v16, 2u);
      MEMORY[0x18C119C60](v16, -1, -1);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  if (a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a2, a3, a4);
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.navigation.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    uint64_t result = outlined destroy of Logger?((uint64_t)v10);
  }
  else
  {
    os_log_type_t v14 = Logger.logObject.getter();
    os_log_type_t v15 = static os_log_type_t.default.getter();
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)uint64_t v16 = 134217984;
      v19[0] = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v14, v15, "<Navigation clientBoundPath>: Enqueueing pop %ld", v16, 0xCu);
      MEMORY[0x18C119C60](v16, -1, -1);
    }

    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
  }
  if (a3)
  {
    v19[0] = a2;
    v19[1] = a3;
    v19[2] = a4;
    type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
    uint64_t v18 = v17;
    swift_retain();
    swift_retain();
    swift_retain();
    MEMORY[0x18C113DA0](&v20, v18);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      uint64_t v20 = (*(uint64_t (**)(void))(*(void *)v20 + 104))();
      swift_release();
    }
    (*(void (**)(uint64_t))(*(void *)v20 + 128))(a1);
    v19[0] = v20;
    dispatch thunk of AnyLocation.set(_:transaction:)();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for Identifiable.id.getter in conformance NavigationViewDestinationView@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)a1 = *(void *)(v1 + 8);
  *(void *)(a1 + 8) = v2;
  long long v4 = *(_OWORD *)(v1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  swift_retain();

  return outlined copy of Text.LineStyle?(v2, v4);
}

char *specialized IdentifiedArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t *a3)
{
  long long v4 = v3;
  if (a1 != a2)
  {
    unint64_t v29 = a1;
    if (a2 < a1)
    {
LABEL_67:
      __break(1u);
      goto LABEL_68;
    }
    if (a1 >= a2)
    {
LABEL_68:
      __break(1u);
      goto LABEL_69;
    }
    uint64_t v30 = 56 * a1;
    while ((v29 & 0x8000000000000000) == 0)
    {
      if (v29 >= *(void *)(*v4 + 16)) {
        goto LABEL_57;
      }
      long long v31 = (void *)(*v4 + v30);
      uint64_t v33 = v31[5];
      unint64_t v32 = v31[6];
      uint64_t v35 = v31[7];
      uint64_t v34 = v31[8];
      swift_retain();
      outlined copy of Text.LineStyle?(v32, v35);
      swift_bridgeObjectRetain();
      unint64_t v36 = specialized __RawDictionaryStorage.find<A>(_:)(v33, v32, v35, v34);
      LOBYTE(v34) = v37;
      swift_bridgeObjectRelease();
      if (v34)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v39 = v4[1];
        v4[1] = 0x8000000000000000;
        long long v40 = v4;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        uint64_t v41 = *(void *)(v39 + 48) + 32 * v36;
        uint64_t v42 = *(void *)(v41 + 8);
        uint64_t v43 = *(void *)(v41 + 16);
        swift_release();
        outlined consume of Text.LineStyle?(v42, v43);
        specialized _NativeDictionary._delete(at:)(v36, v39);
        v40[1] = v39;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.LineStyle?(v32, v35);
        long long v4 = v40;
      }
      else
      {
        swift_release();
        outlined consume of Text.LineStyle?(v32, v35);
      }
      ++v29;
      v30 += 56;
      if (a2 == v29) {
        goto LABEL_2;
      }
    }
    goto LABEL_56;
  }
LABEL_2:
  int64_t v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  int64_t v65 = 1 - v5;
  if (__OFSUB__(1, v5))
  {
LABEL_65:
    __break(1u);
    goto LABEL_66;
  }
  int64_t v6 = *(void *)(*v4 + 16);
  int64_t v66 = v6;
  if (v6 < a2)
  {
LABEL_66:
    __break(1u);
    goto LABEL_67;
  }
  uint64_t v68 = v4;
  if (v6 != a2)
  {
    unint64_t v44 = a2;
    if (v6 <= a2)
    {
LABEL_69:
      __break(1u);
LABEL_70:
      uint64_t result = (char *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
      return result;
    }
    uint64_t v45 = 56 * a2;
    do
    {
      if ((v44 & 0x8000000000000000) != 0) {
        goto LABEL_58;
      }
      if (v44 >= *(void *)(*v4 + 16)) {
        goto LABEL_59;
      }
      unint64_t v46 = v44 + v65;
      if (__OFADD__(v44, v65)) {
        goto LABEL_60;
      }
      uint64_t v69 = v45;
      uint64_t v47 = *v4 + v45;
      uint64_t v49 = *(void *)(v47 + 40);
      unint64_t v48 = *(void *)(v47 + 48);
      long long v70 = *(_OWORD *)(v47 + 56);
      swift_retain();
      outlined copy of Text.LineStyle?(v48, v70);
      char v50 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v51 = (void *)v4[1];
      v4[1] = 0x8000000000000000;
      unint64_t v53 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48, v70, *((uint64_t *)&v70 + 1));
      uint64_t v54 = v51[2];
      BOOL v55 = (v52 & 1) == 0;
      uint64_t v56 = v54 + v55;
      if (__OFADD__(v54, v55)) {
        goto LABEL_61;
      }
      char v57 = v52;
      if (v51[3] >= v56)
      {
        long long v4 = v68;
        if (v50)
        {
          if (v52) {
            goto LABEL_38;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          if (v57) {
            goto LABEL_38;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v56, v50);
        unint64_t v58 = specialized __RawDictionaryStorage.find<A>(_:)(v49, v48, v70, *((uint64_t *)&v70 + 1));
        if ((v57 & 1) != (v59 & 1)) {
          goto LABEL_70;
        }
        unint64_t v53 = v58;
        long long v4 = v68;
        if (v57)
        {
LABEL_38:
          *(void *)(v51[7] + 8 * v53) = v46;
          goto LABEL_39;
        }
      }
      v51[(v53 >> 6) + 8] |= 1 << v53;
      uint64_t v60 = v51[6] + 32 * v53;
      *(void *)uint64_t v60 = v49;
      *(void *)(v60 + 8) = v48;
      *(_OWORD *)(v60 + 16) = v70;
      *(void *)(v51[7] + 8 * v53) = v46;
      uint64_t v61 = v51[2];
      BOOL v14 = __OFADD__(v61, 1);
      uint64_t v62 = v61 + 1;
      if (v14) {
        goto LABEL_63;
      }
      v51[2] = v62;
      swift_retain();
      outlined copy of Text.LineStyle?(v48, v70);
LABEL_39:
      ++v44;
      v4[1] = v51;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v48, v70);
      uint64_t v45 = v69 + 56;
    }
    while (v66 != v44);
  }
  uint64_t v7 = *a3;
  uint64_t v8 = a3[1];
  unint64_t v10 = a3[2];
  uint64_t v9 = a3[3];
  uint64_t v11 = a3[4];
  outlined retain of NavigationViewDestinationView((uint64_t)a3);
  uint64_t v12 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    __break(1u);
LABEL_58:
    __break(1u);
LABEL_59:
    __break(1u);
LABEL_60:
    __break(1u);
LABEL_61:
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  uint64_t v13 = a1;
  while (v7)
  {
    swift_retain();
    outlined copy of Text.LineStyle?(v10, v9);
    char v15 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = (void *)v4[1];
    v4[1] = 0x8000000000000000;
    unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10, v9, v11);
    uint64_t v19 = v16[2];
    BOOL v20 = (v17 & 1) == 0;
    uint64_t v21 = v19 + v20;
    if (__OFADD__(v19, v20)) {
      goto LABEL_55;
    }
    char v22 = v17;
    if (v16[3] >= v21)
    {
      if (v15)
      {
        if (v17) {
          goto LABEL_8;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v22) {
          goto LABEL_8;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v21, v15);
      unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(v8, v10, v9, v11);
      if ((v22 & 1) != (v24 & 1)) {
        goto LABEL_70;
      }
      unint64_t v18 = v23;
      if (v22)
      {
LABEL_8:
        *(void *)(v16[7] + 8 * v18) = v13;
        goto LABEL_9;
      }
    }
    v16[(v18 >> 6) + 8] |= 1 << v18;
    uint64_t v25 = (uint64_t *)(v16[6] + 32 * v18);
    *uint64_t v25 = v8;
    v25[1] = v10;
    v25[2] = v9;
    v25[3] = v11;
    *(void *)(v16[7] + 8 * v18) = v13;
    uint64_t v26 = v16[2];
    BOOL v14 = __OFADD__(v26, 1);
    uint64_t v27 = v26 + 1;
    if (v14) {
      goto LABEL_62;
    }
    void v16[2] = v27;
    swift_retain();
    outlined copy of Text.LineStyle?(v10, v9);
LABEL_9:
    uint64_t v13 = v12;
    long long v4 = v68;
    v68[1] = v16;
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Text.LineStyle?(v10, v9);
    swift_release();
    swift_release();
    outlined consume of Text.LineStyle?(v10, v9);
    swift_release();
    uint64_t v11 = 0;
    uint64_t v9 = 0;
    unint64_t v10 = 0;
    uint64_t v8 = 0;
    uint64_t v7 = 0;
    BOOL v14 = __OFADD__(v12++, 1);
    if (v14) {
      goto LABEL_54;
    }
  }
  outlined consume of NavigationViewDestinationView?(0, 0, 0, 0);
  outlined retain of NavigationViewDestinationView((uint64_t)a3);

  return specialized Array.replaceSubrange<A>(_:with:)(a1, a2, (uint64_t)a3);
}

uint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = a4 + a5;
  if (__OFADD__(a4, a5))
  {
    __break(1u);
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }
  if (v5 < a3 || a3 < a4 || result < a4 || v5 < result) {
    goto LABEL_19;
  }
  uint64_t v6 = a3 - result;
  if (__OFSUB__(a3, result))
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_14;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_14:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7)
  {
LABEL_21:
    __break(1u);
LABEL_22:
    __break(1u);
    return result;
  }
  if (result < a4 || v5 < result) {
    goto LABEL_22;
  }
  return result;
}

unint64_t specialized RandomAccessCollection.index(_:offsetBy:limitedBy:)(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v4 = *(void *)(a4 + 16);
  if (v4 < result || v4 < a3)
  {
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v6 = a3 - result;
  if (a2 >= 1)
  {
    if (v6 < 0 || v6 >= (unint64_t)a2) {
      goto LABEL_13;
    }
    return 0;
  }
  if (v6 <= 0 && v6 > a2) {
    return 0;
  }
LABEL_13:
  BOOL v7 = __OFADD__(result, a2);
  result += a2;
  if (v7) {
    goto LABEL_16;
  }
  if (result > v4) {
LABEL_17:
  }
    __break(1u);
  return result;
}

uint64_t specialized IdentifiedArray.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2)
{
  uint64_t v3 = v2;
  int64_t v4 = a2;
  if (a1 != a2)
  {
    unint64_t v7 = a1;
    if (a2 < a1)
    {
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    if (a1 >= a2)
    {
LABEL_49:
      __break(1u);
      goto LABEL_50;
    }
    uint64_t v8 = 56 * a1;
    while ((v7 & 0x8000000000000000) == 0)
    {
      if (v7 >= *(void *)(*v3 + 16)) {
        goto LABEL_39;
      }
      uint64_t v9 = (void *)(*v3 + v8);
      uint64_t v11 = v9[5];
      unint64_t v10 = v9[6];
      uint64_t v13 = v9[7];
      uint64_t v12 = v9[8];
      swift_retain();
      outlined copy of Text.LineStyle?(v10, v13);
      swift_bridgeObjectRetain();
      unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(v11, v10, v13, v12);
      LOBYTE(v12) = v15;
      swift_bridgeObjectRelease();
      if (v12)
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v17 = v3[1];
        v3[1] = 0x8000000000000000;
        unint64_t v18 = v3;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          specialized _NativeDictionary.copy()();
        }
        uint64_t v19 = *(void *)(v17 + 48) + 32 * v14;
        uint64_t v20 = *(void *)(v19 + 8);
        uint64_t v21 = *(void *)(v19 + 16);
        swift_release();
        outlined consume of Text.LineStyle?(v20, v21);
        specialized _NativeDictionary._delete(at:)(v14, v17);
        v18[1] = v17;
        swift_release();
        swift_bridgeObjectRelease();
        outlined consume of Text.LineStyle?(v10, v13);
        uint64_t v3 = v18;
        int64_t v4 = a2;
      }
      else
      {
        swift_release();
        outlined consume of Text.LineStyle?(v10, v13);
      }
      ++v7;
      v8 += 56;
      if (v4 == v7) {
        goto LABEL_2;
      }
    }
    __break(1u);
LABEL_39:
    __break(1u);
LABEL_40:
    __break(1u);
LABEL_41:
    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    __break(1u);
LABEL_44:
    __break(1u);
    goto LABEL_45;
  }
LABEL_2:
  if (__OFSUB__(v4, a1))
  {
LABEL_45:
    __break(1u);
    goto LABEL_46;
  }
  uint64_t v45 = a1 - v4;
  if (__OFSUB__(0, v4 - a1))
  {
LABEL_46:
    __break(1u);
    goto LABEL_47;
  }
  int64_t v5 = *(void *)(*v3 + 16);
  int64_t v46 = v5;
  if (v5 < v4)
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }
  if (v5 == v4)
  {
LABEL_6:
    return specialized Array.replaceSubrange<A>(_:with:)(a1, a2);
  }
  unint64_t v22 = a2;
  if (v5 > a2)
  {
    uint64_t v23 = 56 * a2;
    unint64_t v44 = v3;
    while (1)
    {
      if ((v22 & 0x8000000000000000) != 0) {
        goto LABEL_40;
      }
      if (v22 >= *(void *)(*v3 + 16)) {
        goto LABEL_41;
      }
      if (__OFADD__(v22, v45)) {
        goto LABEL_42;
      }
      unint64_t v47 = v22 + v45;
      uint64_t v24 = *v3 + v23;
      uint64_t v26 = *(void *)(v24 + 40);
      unint64_t v25 = *(void *)(v24 + 48);
      long long v48 = *(_OWORD *)(v24 + 56);
      swift_retain();
      outlined copy of Text.LineStyle?(v25, v48);
      char v27 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v28 = (void *)v3[1];
      v3[1] = 0x8000000000000000;
      unint64_t v30 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25, v48, *((uint64_t *)&v48 + 1));
      uint64_t v31 = v28[2];
      BOOL v32 = (v29 & 1) == 0;
      uint64_t v33 = v31 + v32;
      if (__OFADD__(v31, v32)) {
        goto LABEL_43;
      }
      char v34 = v29;
      if (v28[3] >= v33)
      {
        if (v27)
        {
          char v37 = v28;
          if (v29) {
            goto LABEL_22;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          char v37 = v28;
          if (v34) {
            goto LABEL_22;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v33, v27);
        unint64_t v35 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v25, v48, *((uint64_t *)&v48 + 1));
        if ((v34 & 1) != (v36 & 1)) {
          goto LABEL_51;
        }
        unint64_t v30 = v35;
        char v37 = v28;
        if (v34)
        {
LABEL_22:
          *(void *)(v37[7] + 8 * v30) = v47;
          goto LABEL_23;
        }
      }
      v37[(v30 >> 6) + 8] |= 1 << v30;
      uint64_t v38 = v37[6] + 32 * v30;
      *(void *)uint64_t v38 = v26;
      *(void *)(v38 + 8) = v25;
      *(_OWORD *)(v38 + 16) = v48;
      *(void *)(v37[7] + 8 * v30) = v47;
      uint64_t v39 = v37[2];
      BOOL v40 = __OFADD__(v39, 1);
      uint64_t v41 = v39 + 1;
      if (v40) {
        goto LABEL_44;
      }
      v37[2] = v41;
      swift_retain();
      outlined copy of Text.LineStyle?(v25, v48);
LABEL_23:
      ++v22;
      uint64_t v3 = v44;
      v44[1] = v37;
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Text.LineStyle?(v25, v48);
      v23 += 56;
      if (v46 == v22) {
        goto LABEL_6;
      }
    }
  }
LABEL_50:
  __break(1u);
LABEL_51:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized Collection.firstIndex(where:)(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = a4;
  uint64_t v8 = 0;
  int v18 = a3;
  unint64_t v17 = HIDWORD(a3);
  uint64_t v9 = (void *)(a1 + 40);
  uint64_t v20 = *(void *)(a1 + 16);
  do
  {
    uint64_t v12 = v9[1];
    uint64_t v13 = v9[2];
    if (*v9) {
      BOOL v14 = a2 == 0;
    }
    else {
      BOOL v14 = 1;
    }
    if (v14)
    {
      if (v13 == 1 || v6 == 1)
      {
        if (v9[3] == a5) {
          return v8;
        }
      }
      else
      {
        v24[0] = v9[1];
        v24[1] = v13;
        v22[0] = v18;
        v22[1] = v17;
        uint64_t v23 = v6;
        if (MEMORY[0x18C10D6E0](v24, v22)) {
          return v8;
        }
      }
    }
    else
    {
      unint64_t v25 = *(uint64_t (**)(uint64_t))(*(void *)*v9 + 176);
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(v12, v13);
      swift_retain();
      swift_retain();
      uint64_t v10 = swift_retain();
      char v11 = v25(v10);
      uint64_t v5 = v20;
      swift_release();
      swift_release();
      swift_release_n();
      outlined consume of Text.LineStyle?(v12, v13);
      uint64_t v6 = a4;
      swift_release();
      if (v11) {
        return v8;
      }
    }
    ++v8;
    v9 += 7;
  }
  while (v5 != v8);
  return 0;
}

uint64_t partial apply for closure #2 in NavigationColumnState.update(for:shouldAnimate:splitViewState:)()
{
  return closure #2 in NavigationColumnState.update(for:shouldAnimate:splitViewState:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_187C6B2FC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187C6B334()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.ColumnContent.dismissReplacedRootView()()
{
  return closure #1 in NavigationColumnState.ColumnContent.dismissReplacedRootView()(v0 + 16);
}

uint64_t partial apply for closure #3 in NavigationColumnState.pop(_:request:splitViewState:)()
{
  return closure #3 in NavigationColumnState.pop(_:request:splitViewState:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_187C6B388()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in NavigationColumnState.pop(_:request:splitViewState:)()
{
  return closure #1 in closure #1 in NavigationColumnState.pop(_:request:splitViewState:)(v0[2], v0[3], v0[4]);
}

uint64_t outlined init with take of NavigationUpdateEvent.Action(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with copy of NavigationUpdateEvent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t partial apply for closure #1 in NavigationSplitViewState.handleEvent(_:)()
{
  return closure #1 in NavigationSplitViewState.handleEvent(_:)(*(uint64_t (**)(uint64_t))(v0 + 16), *(void *)(v0 + 24), v0 + 32);
}

uint64_t outlined destroy of NavigationUpdateEvent(uint64_t a1)
{
  return a1;
}

uint64_t partial apply for closure #1 in NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)()
{
  return closure #1 in NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)(v0[2], v0[3], v0[4]);
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.RequestError and conformance NavigationAuthority.RequestError);
  }
  return result;
}

uint64_t sub_187C6B558()
{
  swift_release();
  if (*(void *)(v0 + 32))
  {
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.presentValue(_:request:splitViewState:)()
{
  return closure #1 in NavigationColumnState.presentValue(_:request:splitViewState:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t objectdestroy_17Tm_0()
{
  swift_release();
  if (*(unsigned __int8 *)(v0 + 88) - 1 <= 2) {
    __swift_destroy_boxed_opaque_existential_1(v0 + 32);
  }

  return swift_deallocObject();
}

uint64_t objectdestroy_24Tm()
{
  if (*(void *)(v0 + 24))
  {
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.ejectAll()()
{
  return closure #1 in NavigationColumnState.ejectAll()(v0[2], v0[3], v0[4]);
}

uint64_t objectdestroy_8Tm()
{
  swift_release();
  swift_release();
  if (*(void *)(v0 + 40) != 1) {
    swift_release();
  }
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187C6B6CC()
{
  if (*(void *)(v0 + 32))
  {
    swift_release();
    swift_release();
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)()
{
  return closure #1 in NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t destroy for NavigationColumnState.ColumnContent(uint64_t *a1)
{
  return outlined consume of NavigationColumnState.ColumnContent(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7]);
}

uint64_t *initializeWithCopy for NavigationColumnState.ColumnContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  outlined copy of NavigationColumnState.ColumnContent(*a2, v4, v5, v6, v7, v8, v9, v10);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  return a1;
}

uint64_t *assignWithCopy for NavigationColumnState.ColumnContent(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v21 = a2[9];
  outlined copy of NavigationColumnState.ColumnContent(*a2, v4, v5, v6, v7, v8, v9, v10);
  uint64_t v12 = *a1;
  uint64_t v13 = a1[1];
  uint64_t v14 = a1[2];
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  uint64_t v17 = a1[5];
  uint64_t v18 = a1[6];
  uint64_t v19 = a1[7];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v21;
  outlined consume of NavigationColumnState.ColumnContent(v12, v13, v14, v15, v16, v17, v18, v19);
  return a1;
}

uint64_t assignWithTake for NavigationColumnState.ColumnContent(uint64_t a1, _OWORD *a2)
{
  uint64_t v3 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(void *)(a1 + 56);
  long long v11 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v11;
  long long v12 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v12;
  *(_OWORD *)(a1 + 64) = a2[4];
  outlined consume of NavigationColumnState.ColumnContent(v3, v5, v4, v6, v7, v8, v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationColumnState.ColumnContent(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)(a1 + 56) >> 57) >> 6) | (2
                                                           * ((*(void *)(a1 + 56) >> 57) & 0x38 | *(void *)(a1 + 56) & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState.ColumnContent(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = 0u;
      *(_OWORD *)unint64_t result = 0u;
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(void *)(result + 64) = 0;
      *(void *)(result + 72) = 0;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationColumnState.ColumnContent(uint64_t a1)
{
  return *(void *)(a1 + 56) >> 63;
}

uint64_t destructiveProjectEnumData for NavigationColumnState.ColumnContent(uint64_t result)
{
  *(void *)(result + 56) &= ~0x8000000000000000;
  return result;
}

uint64_t destructiveInjectEnumTag for NavigationColumnState.ColumnContent(uint64_t result, uint64_t a2)
{
  *(void *)(result + 56) = *(void *)(result + 56) & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState.ColumnContent()
{
  return &type metadata for NavigationColumnState.ColumnContent;
}

uint64_t destroy for NavigationViewDestinationView(uint64_t a1)
{
  swift_release();
  swift_release();
  if (*(void *)(a1 + 24) != 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for NavigationViewDestinationView(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  uint64_t v5 = a2 + 2;
  uint64_t v6 = a2[3];
  swift_retain();
  swift_retain();
  if (v6 == 1)
  {
    *(_OWORD *)(a1 + 16) = *v5;
  }
  else
  {
    *(void *)(a1 + 16) = *(void *)v5;
    *(void *)(a1 + 24) = v6;
    swift_retain();
  }
  uint64_t v7 = a2[5];
  uint64_t v8 = a2[6];
  *(void *)(a1 + 32) = a2[4];
  *(void *)(a1 + 40) = v7;
  *(void *)(a1 + 48) = v8;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationViewDestinationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  uint64_t v4 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) != 1)
  {
    if (v4 != 1)
    {
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 16);
    goto LABEL_6;
  }
  if (v4 == 1)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    goto LABEL_8;
  }
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
LABEL_8:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for NavigationViewDestinationView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v4 = (void *)(a2 + 16);
  if (*(void *)(a1 + 24) != 1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    if (v5 != 1)
    {
      *(void *)(a1 + 16) = *v4;
      *(void *)(a1 + 24) = v5;
      swift_release();
      goto LABEL_6;
    }
    outlined destroy of _ViewList_ID.Canonical(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v4;
LABEL_6:
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationViewDestinationView(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationViewDestinationView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationViewDestinationView()
{
  return &type metadata for NavigationViewDestinationView;
}

uint64_t initializeWithCopy for NavigationColumnState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  if (v4)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    uint64_t v5 = *(void *)(a2 + 56);
    uint64_t v6 = *(void *)(a2 + 64);
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = v5;
    uint64_t v7 = *(void *)(a2 + 72);
    *(void *)(a1 + 64) = v6;
    *(void *)(a1 + 72) = v7;
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v8;
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  uint64_t v9 = *(void *)(a2 + 96);
  if (v9)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = v9;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
  }
  uint64_t v10 = *(void *)(a2 + 112);
  uint64_t v11 = *(void *)(a2 + 120);
  uint64_t v12 = *(void *)(a2 + 128);
  uint64_t v13 = *(void *)(a2 + 136);
  uint64_t v14 = *(void *)(a2 + 144);
  uint64_t v15 = *(void *)(a2 + 152);
  uint64_t v16 = *(void *)(a2 + 160);
  uint64_t v17 = *(void *)(a2 + 168);
  uint64_t v23 = *(void *)(a2 + 176);
  uint64_t v24 = *(void *)(a2 + 184);
  outlined copy of NavigationColumnState.ColumnContent(v10, v11, v12, v13, v14, v15, v16, v17);
  *(void *)(a1 + 112) = v10;
  *(void *)(a1 + 120) = v11;
  *(void *)(a1 + 128) = v12;
  *(void *)(a1 + 136) = v13;
  *(void *)(a1 + 144) = v14;
  *(void *)(a1 + 152) = v15;
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = v17;
  *(void *)(a1 + 176) = v23;
  *(void *)(a1 + 184) = v24;
  uint64_t v18 = *(void *)(a2 + 200);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = v18;
  uint64_t v19 = *(void *)(a2 + 216);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = v19;
  uint64_t v20 = *(void *)(a2 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(void *)(a1 + 232) = v20;
  uint64_t v21 = *(void *)(a2 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(void *)(a1 + 248) = v21;
  *(_OWORD *)(a1 + 256) = *(_OWORD *)(a2 + 256);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a2 + 297);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for NavigationColumnState(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v6)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    }
    else
    {
      outlined destroy of NavigationListState(a1 + 40);
      long long v7 = *(_OWORD *)((char *)v5 + 28);
      long long v8 = v5[1];
      *uint64_t v4 = *v5;
      v4[1] = v8;
      *(_OWORD *)((char *)v4 + 28) = v7;
    }
  }
  else if (v6)
  {
    *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v9 = *v5;
    long long v10 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 68) = *(_OWORD *)(a2 + 68);
    *uint64_t v4 = v9;
    *(_OWORD *)(a1 + 56) = v10;
  }
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  uint64_t v11 = (_OWORD *)(a1 + 88);
  uint64_t v12 = (_OWORD *)(a2 + 88);
  uint64_t v13 = *(void *)(a2 + 96);
  if (*(void *)(a1 + 96))
  {
    if (v13)
    {
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_retain();
      swift_release();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_retain();
      swift_release();
    }
    else
    {
      outlined destroy of Binding<AnyNavigationPath>(a1 + 88);
      uint64_t v14 = *(void *)(a2 + 104);
      _OWORD *v11 = *v12;
      *(void *)(a1 + 104) = v14;
    }
  }
  else if (v13)
  {
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    swift_retain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v15 = *v12;
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    _OWORD *v11 = v15;
  }
  uint64_t v16 = *(void *)(a2 + 112);
  uint64_t v17 = *(void *)(a2 + 120);
  uint64_t v18 = *(void *)(a2 + 128);
  uint64_t v19 = *(void *)(a2 + 136);
  uint64_t v20 = *(void *)(a2 + 144);
  uint64_t v21 = *(void *)(a2 + 152);
  uint64_t v22 = *(void *)(a2 + 160);
  uint64_t v23 = *(void *)(a2 + 168);
  uint64_t v33 = *(void *)(a2 + 176);
  uint64_t v34 = *(void *)(a2 + 184);
  outlined copy of NavigationColumnState.ColumnContent(v16, v17, v18, v19, v20, v21, v22, v23);
  uint64_t v24 = *(void *)(a1 + 112);
  uint64_t v25 = *(void *)(a1 + 120);
  uint64_t v26 = *(void *)(a1 + 128);
  uint64_t v27 = *(void *)(a1 + 136);
  uint64_t v28 = *(void *)(a1 + 144);
  uint64_t v29 = *(void *)(a1 + 152);
  uint64_t v30 = *(void *)(a1 + 160);
  uint64_t v31 = *(void *)(a1 + 168);
  *(void *)(a1 + 112) = v16;
  *(void *)(a1 + 120) = v17;
  *(void *)(a1 + 128) = v18;
  *(void *)(a1 + 136) = v19;
  *(void *)(a1 + 144) = v20;
  *(void *)(a1 + 152) = v21;
  *(void *)(a1 + 160) = v22;
  *(void *)(a1 + 168) = v23;
  *(void *)(a1 + 176) = v33;
  *(void *)(a1 + 184) = v34;
  outlined consume of NavigationColumnState.ColumnContent(v24, v25, v26, v27, v28, v29, v30, v31);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_retain();
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_retain();
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_retain();
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(_DWORD *)(a1 + 280) = *(_DWORD *)(a2 + 280);
  *(_DWORD *)(a1 + 284) = *(_DWORD *)(a2 + 284);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a2 + 297);
  return a1;
}

uint64_t outlined destroy of Binding<AnyNavigationPath>(uint64_t a1)
{
  type metadata accessor for Binding<AnyNavigationPath>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyNavigationPath>, (uint64_t)&type metadata for AnyNavigationPath, MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *__swift_memcpy299_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x12BuLL);
}

uint64_t assignWithTake for NavigationColumnState(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v4 = (_OWORD *)(a1 + 40);
  uint64_t v5 = (_OWORD *)(a2 + 40);
  if (*(void *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6)
    {
      *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_bridgeObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
      goto LABEL_6;
    }
    outlined destroy of NavigationListState((uint64_t)v4);
  }
  long long v7 = v5[1];
  *uint64_t v4 = *v5;
  v4[1] = v7;
  *(_OWORD *)((char *)v4 + 28) = *(_OWORD *)((char *)v5 + 28);
LABEL_6:
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  if (!*(void *)(a1 + 96))
  {
LABEL_10:
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    goto LABEL_11;
  }
  uint64_t v8 = *(void *)(a2 + 96);
  if (!v8)
  {
    outlined destroy of Binding<AnyNavigationPath>(a1 + 88);
    goto LABEL_10;
  }
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  *(void *)(a1 + 96) = v8;
  swift_release();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_release();
LABEL_11:
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120);
  uint64_t v11 = *(void *)(a1 + 128);
  uint64_t v12 = *(void *)(a1 + 136);
  uint64_t v13 = *(void *)(a1 + 144);
  uint64_t v14 = *(void *)(a1 + 152);
  uint64_t v15 = *(void *)(a1 + 160);
  uint64_t v16 = *(void *)(a1 + 168);
  long long v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v17;
  long long v18 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v18;
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  outlined consume of NavigationColumnState.ColumnContent(v9, v10, v11, v12, v13, v14, v15, v16);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  swift_bridgeObjectRelease();
  uint64_t v19 = *(void *)(a2 + 224);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = v19;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_release();
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_release();
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  swift_release();
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = *(unsigned char *)(a2 + 264);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = *(void *)(a2 + 288);
  swift_release();
  *(unsigned char *)(a1 + 296) = *(unsigned char *)(a2 + 296);
  *(_WORD *)(a1 + 297) = *(_WORD *)(a2 + 297);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationColumnState(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 299)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 192);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 298) = 0;
    *(_WORD *)(result + 296) = 0;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 299) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 192) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 299) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState()
{
  return &type metadata for NavigationColumnState;
}

uint64_t destroy for NavigationColumnState.ReplacedRoot(uint64_t *a1)
{
  return outlined consume of NavigationColumnState.ReplacedRoot(*a1, a1[1], a1[2], a1[3]);
}

uint64_t *initializeWithCopy for NavigationColumnState.ReplacedRoot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  outlined copy of NavigationColumnState.ReplacedRoot(*a2, v4, v5, v6);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  return a1;
}

uint64_t *assignWithCopy for NavigationColumnState.ReplacedRoot(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  outlined copy of NavigationColumnState.ReplacedRoot(*a2, v4, v5, v6);
  uint64_t v10 = *a1;
  uint64_t v11 = a1[1];
  uint64_t v12 = a1[2];
  uint64_t v13 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  outlined consume of NavigationColumnState.ReplacedRoot(v10, v11, v12, v13);
  return a1;
}

uint64_t assignWithTake for NavigationColumnState.ReplacedRoot(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v3;
  outlined consume of NavigationColumnState.ReplacedRoot(v4, v6, v5, v7);
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationColumnState.ReplacedRoot(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7F && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 127);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 6) | (2 * ((*(void *)a1 >> 57) & 0x38 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7E) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState.ReplacedRoot(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7E)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 127;
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7F) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 1) & 0x3F | ((-a2 & 0x7F) << 6);
      *(void *)unint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
      *(_OWORD *)(result + 8) = 0u;
      *(_OWORD *)(result + 24) = 0u;
      *(_OWORD *)(result + 40) = 0u;
    }
  }
  return result;
}

uint64_t getEnumTag for NavigationColumnState.ReplacedRoot(void *a1)
{
  return *a1 >> 63;
}

void *destructiveProjectEnumData for NavigationColumnState.ReplacedRoot(void *result)
{
  *result &= ~0x8000000000000000;
  return result;
}

uint64_t *destructiveInjectEnumTag for NavigationColumnState.ReplacedRoot(uint64_t *result, uint64_t a2)
{
  *unint64_t result = *result & 0xFFFFFFFFFFFFFF8 | (a2 << 63);
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState.ReplacedRoot()
{
  return &type metadata for NavigationColumnState.ReplacedRoot;
}

uint64_t storeEnumTagSinglePayload for NavigationColumnState.TransientUpdateState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)unint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C6CA6CLL);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for NavigationColumnState.TransientUpdateState()
{
  return &type metadata for NavigationColumnState.TransientUpdateState;
}

unsigned char *storeEnumTagSinglePayload for HysteresisState(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C6CB70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

void *type metadata accessor for HysteresisState()
{
  return &unk_1ED41A1C0;
}

unint64_t lazy protocol witness table accessor for type HysteresisState and conformance HysteresisState()
{
  unint64_t result = lazy protocol witness table cache variable for type HysteresisState and conformance HysteresisState;
  if (!lazy protocol witness table cache variable for type HysteresisState and conformance HysteresisState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HysteresisState and conformance HysteresisState);
  }
  return result;
}

void type metadata accessor for (Int, Int, NavigationState.StackContent.ChangeKind)()
{
  if (!lazy cache variable for type metadata for (Int, Int, NavigationState.StackContent.ChangeKind))
  {
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (Int, Int, NavigationState.StackContent.ChangeKind));
    }
  }
}

uint64_t specialized static NavigationColumnState.change(from:to:previousSplitViewState:splitViewState:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v3 = v1;
  uint64_t v5 = v4;
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0(v10, (uint64_t)v98, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
  _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0(v5, (uint64_t)v97, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
  uint64_t v75 = *(void *)(v7 + 16);
  if (!v75) {
    return 1;
  }
  uint64_t v70 = *(void *)(v9 + 16);
  if (!v70)
  {
LABEL_194:
    __break(1u);
LABEL_195:
    __break(1u);
    goto LABEL_196;
  }
  uint64_t v11 = 0;
  uint64_t v72 = v7 + 32;
  uint64_t v73 = v9 + 32;
  uint64_t v69 = v7;
  uint64_t v68 = v9;
  while (2)
  {
    memcpy(__dst, (const void *)(v73 + 304 * v11), 0x12BuLL);
    uint64_t v12 = (const void *)(v72 + 304 * v11);
    memcpy(__src, v12, 0x12BuLL);
    memcpy(v105, (const void *)(v73 + 304 * v11), 0x12BuLL);
    switch(LOBYTE(v105[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(__src);
        outlined retain of NavigationColumnState(v105);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v105, v11, v9))
        {
LABEL_8:
          outlined release of NavigationColumnState(v105);
          goto LABEL_6;
        }
        if (v11 + 1 >= v70)
        {
LABEL_28:
          outlined release of NavigationColumnState(v105);
          goto LABEL_29;
        }
        memcpy(v106, (const void *)(v73 + 304 * (v11 + 1)), 0x12BuLL);
        switch(LOBYTE(v106[3]))
        {
          case 1:
            outlined retain of NavigationColumnState(v106);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v106, v11 + 1, v9))
            {
LABEL_15:
              outlined release of NavigationColumnState(v106);
              goto LABEL_8;
            }
            if (v11 + 2 >= v70)
            {
LABEL_27:
              outlined release of NavigationColumnState(v106);
              goto LABEL_28;
            }
            memcpy(v107, (const void *)(v73 + 304 * (v11 + 2)), 0x12BuLL);
            switch(LOBYTE(v107[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v107);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v107, v11 + 2, v9))
                {
                  outlined release of NavigationColumnState(v107);
                  goto LABEL_15;
                }
                if (v11 + 3 >= v70)
                {
                  outlined release of NavigationColumnState(v107);
                  goto LABEL_27;
                }
                memcpy(v108, (const void *)(v73 + 304 * (v11 + 3)), 0x12BuLL);
                switch(LOBYTE(v108[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v108);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v108, v11 + 3, v9))
                    {
                      outlined release of NavigationColumnState(v108);
                      outlined release of NavigationColumnState(v107);
                      outlined release of NavigationColumnState(v106);
                      char v13 = 0;
                    }
                    else if (v11 + 4 >= v70)
                    {
                      outlined release of NavigationColumnState(v108);
                      outlined release of NavigationColumnState(v107);
                      outlined release of NavigationColumnState(v106);
                      char v13 = 1;
                    }
                    else
                    {
                      memcpy(v109, (const void *)(v73 + 304 * (v11 + 4)), 0x12BuLL);
                      switch(LOBYTE(v109[3]))
                      {
                        case 1:
                          outlined retain of NavigationColumnState(v109);
                          if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v109, v11 + 4, v68))
                          {
                            outlined release of NavigationColumnState(v109);
                            goto LABEL_114;
                          }
                          if (v11 + 5 >= v70)
                          {
                            outlined release of NavigationColumnState(v109);
                            goto LABEL_133;
                          }
                          memcpy(v110, (const void *)(v73 + 304 * (v11 + 5)), 0x12BuLL);
                          switch(LOBYTE(v110[3]))
                          {
                            case 1:
                              outlined retain of NavigationColumnState(v110);
                              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v110, v11 + 5, v68))
                              {
                                outlined release of NavigationColumnState(v110);
                                goto LABEL_128;
                              }
                              if (v11 + 6 >= v70)
                              {
                                outlined release of NavigationColumnState(v110);
                                goto LABEL_154;
                              }
                              char v13 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v11 + 6, v68, (uint64_t)v98);
                              outlined release of NavigationColumnState(v110);
                              outlined release of NavigationColumnState(v109);
                              outlined release of NavigationColumnState(v108);
                              break;
                            case 2:
                              outlined retain of NavigationColumnState(v110);
                              char v46 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v110, v11 + 5, v68);
                              outlined release of NavigationColumnState(v110);
                              outlined release of NavigationColumnState(v109);
                              outlined release of NavigationColumnState(v108);
                              char v13 = v46 ^ 1;
                              break;
                            case 5:
LABEL_154:
                              outlined release of NavigationColumnState(v109);
                              outlined release of NavigationColumnState(v108);
                              char v13 = 1;
                              break;
                            default:
LABEL_128:
                              outlined release of NavigationColumnState(v109);
                              outlined release of NavigationColumnState(v108);
                              char v13 = 0;
                              break;
                          }
                          outlined release of NavigationColumnState(v107);
                          break;
                        case 2:
                          outlined retain of NavigationColumnState(v109);
                          char v44 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v109, v11 + 4, v68);
                          outlined release of NavigationColumnState(v109);
                          outlined release of NavigationColumnState(v108);
                          outlined release of NavigationColumnState(v107);
                          char v13 = v44 ^ 1;
                          break;
                        case 5:
LABEL_133:
                          outlined release of NavigationColumnState(v108);
                          outlined release of NavigationColumnState(v107);
                          char v13 = 1;
                          break;
                        default:
LABEL_114:
                          outlined release of NavigationColumnState(v108);
                          outlined release of NavigationColumnState(v107);
                          char v13 = 0;
                          break;
                      }
                      outlined release of NavigationColumnState(v106);
                    }
                    uint64_t v9 = v68;
                    uint64_t v7 = v69;
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v108);
                    char v42 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v108, v11 + 3, v9);
                    outlined release of NavigationColumnState(v108);
                    outlined release of NavigationColumnState(v107);
                    outlined release of NavigationColumnState(v106);
                    char v13 = v42 ^ 1;
                    break;
                  case 5:
                    outlined release of NavigationColumnState(v107);
                    outlined release of NavigationColumnState(v106);
                    char v13 = 1;
                    break;
                  default:
                    outlined release of NavigationColumnState(v107);
                    outlined release of NavigationColumnState(v106);
                    char v13 = 0;
                    break;
                }
                outlined release of NavigationColumnState(v105);
                break;
              case 2:
                outlined retain of NavigationColumnState(v107);
                char v14 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v107, v11 + 2, v9);
                outlined release of NavigationColumnState(v107);
                goto LABEL_17;
              case 5:
                goto LABEL_27;
              default:
                goto LABEL_15;
            }
            break;
          case 2:
            outlined retain of NavigationColumnState(v106);
            char v14 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v106, v11 + 1, v9);
LABEL_17:
            outlined release of NavigationColumnState(v106);
            goto LABEL_10;
          case 5:
            goto LABEL_28;
          default:
            goto LABEL_8;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(__src);
        outlined retain of NavigationColumnState(v105);
        char v14 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v98, (uint64_t)v105, v11, v9);
LABEL_10:
        outlined release of NavigationColumnState(v105);
        char v13 = v14 ^ 1;
        break;
      case 5:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(__src);
LABEL_29:
        char v13 = 1;
        break;
      default:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(__src);
LABEL_6:
        char v13 = 0;
        break;
    }
    memcpy(v99, v12, 0x12BuLL);
    switch(LOBYTE(v99[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v99);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v99, v11, v7))goto LABEL_63; {
        if (v11 + 1 >= v75)
        }
          goto LABEL_90;
        break;
      case 2:
        outlined retain of NavigationColumnState(v99);
        char v39 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v99, v11, v7);
LABEL_66:
        outlined release of NavigationColumnState(v99);
        char v40 = v39 ^ 1;
        if (v13) {
          goto LABEL_67;
        }
        goto LABEL_87;
      case 5:
        if ((v13 & 1) == 0) {
          goto LABEL_179;
        }
        goto LABEL_91;
      default:
        if ((v13 & 1) == 0) {
          goto LABEL_32;
        }
        goto LABEL_164;
    }
    memcpy(v100, (const void *)(v72 + 304 * (v11 + 1)), 0x12BuLL);
    switch(LOBYTE(v100[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v100);
        if ((specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v100, v11 + 1, v7) & 1) == 0)
        {
          if (v11 + 2 >= v75)
          {
            outlined release of NavigationColumnState(v100);
LABEL_90:
            outlined release of NavigationColumnState(v99);
            if ((v13 & 1) == 0)
            {
LABEL_179:
              if (v70 >= v11)
              {
                uint64_t v58 = swift_bridgeObjectRetain();
                uint64_t v2 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v58, (uint64_t)v98, v11, (2 * v70) | 1);
                outlined release of NavigationColumnState(__src);
                outlined release of NavigationColumnState(__dst);
                swift_bridgeObjectRelease();
                return v2;
              }
LABEL_196:
              __break(1u);
LABEL_197:
              __break(1u);
LABEL_198:
              __break(1u);
LABEL_199:
              __break(1u);
LABEL_200:
              __break(1u);
              JUMPOUT(0x187C6E8B8);
            }
          }
          else
          {
            memcpy(v101, (const void *)(v72 + 304 * (v11 + 2)), 0x12BuLL);
            switch(LOBYTE(v101[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v101);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v101, v11 + 2, v7))
                {
                  outlined release of NavigationColumnState(v101);
LABEL_86:
                  outlined release of NavigationColumnState(v100);
                  outlined release of NavigationColumnState(v99);
                  char v40 = 0;
                  if ((v13 & 1) == 0) {
                    goto LABEL_87;
                  }
                }
                else if (v11 + 3 >= v75)
                {
                  outlined release of NavigationColumnState(v101);
LABEL_102:
                  outlined release of NavigationColumnState(v100);
                  outlined release of NavigationColumnState(v99);
                  char v40 = 1;
                  if ((v13 & 1) == 0)
                  {
LABEL_87:
                    if (v40) {
                      goto LABEL_179;
                    }
                    goto LABEL_32;
                  }
                }
                else
                {
                  memcpy(v102, (const void *)(v72 + 304 * (v11 + 3)), 0x12BuLL);
                  switch(LOBYTE(v102[3]))
                  {
                    case 1:
                      outlined retain of NavigationColumnState(v102);
                      if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v102, v11 + 3, v7))
                      {
                        outlined release of NavigationColumnState(v102);
                        outlined release of NavigationColumnState(v101);
                        outlined release of NavigationColumnState(v100);
                        char v40 = 0;
                      }
                      else if (v11 + 4 >= v75)
                      {
                        outlined release of NavigationColumnState(v102);
                        outlined release of NavigationColumnState(v101);
                        outlined release of NavigationColumnState(v100);
                        char v40 = 1;
                      }
                      else
                      {
                        memcpy(v103, (const void *)(v72 + 304 * (v11 + 4)), 0x12BuLL);
                        switch(LOBYTE(v103[3]))
                        {
                          case 1:
                            outlined retain of NavigationColumnState(v103);
                            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v103, v11 + 4, v69))
                            {
                              outlined release of NavigationColumnState(v103);
                              goto LABEL_117;
                            }
                            if (v11 + 5 >= v75)
                            {
                              outlined release of NavigationColumnState(v103);
                              goto LABEL_138;
                            }
                            memcpy(v104, (const void *)(v72 + 304 * (v11 + 5)), 0x12BuLL);
                            switch(LOBYTE(v104[3]))
                            {
                              case 1:
                                outlined retain of NavigationColumnState(v104);
                                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v104, v11 + 5, v69))
                                {
                                  outlined release of NavigationColumnState(v104);
                                  goto LABEL_131;
                                }
                                if (v11 + 6 >= v75)
                                {
                                  outlined release of NavigationColumnState(v104);
                                  goto LABEL_157;
                                }
                                char v40 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v11 + 6, v69, (uint64_t)v97);
                                outlined release of NavigationColumnState(v104);
                                outlined release of NavigationColumnState(v103);
                                outlined release of NavigationColumnState(v102);
                                break;
                              case 2:
                                outlined retain of NavigationColumnState(v104);
                                char v47 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v104, v11 + 5, v69);
                                outlined release of NavigationColumnState(v104);
                                outlined release of NavigationColumnState(v103);
                                outlined release of NavigationColumnState(v102);
                                char v40 = v47 ^ 1;
                                break;
                              case 5:
LABEL_157:
                                outlined release of NavigationColumnState(v103);
                                outlined release of NavigationColumnState(v102);
                                char v40 = 1;
                                break;
                              default:
LABEL_131:
                                outlined release of NavigationColumnState(v103);
                                outlined release of NavigationColumnState(v102);
                                char v40 = 0;
                                break;
                            }
                            outlined release of NavigationColumnState(v101);
                            break;
                          case 2:
                            outlined retain of NavigationColumnState(v103);
                            char v45 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v103, v11 + 4, v69);
                            outlined release of NavigationColumnState(v103);
                            outlined release of NavigationColumnState(v102);
                            outlined release of NavigationColumnState(v101);
                            char v40 = v45 ^ 1;
                            break;
                          case 5:
LABEL_138:
                            outlined release of NavigationColumnState(v102);
                            outlined release of NavigationColumnState(v101);
                            char v40 = 1;
                            break;
                          default:
LABEL_117:
                            outlined release of NavigationColumnState(v102);
                            outlined release of NavigationColumnState(v101);
                            char v40 = 0;
                            break;
                        }
                        outlined release of NavigationColumnState(v100);
                      }
                      uint64_t v9 = v68;
                      uint64_t v7 = v69;
                      break;
                    case 2:
                      outlined retain of NavigationColumnState(v102);
                      char v43 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v102, v11 + 3, v7);
                      outlined release of NavigationColumnState(v102);
                      outlined release of NavigationColumnState(v101);
                      outlined release of NavigationColumnState(v100);
                      char v40 = v43 ^ 1;
                      break;
                    case 5:
                      outlined release of NavigationColumnState(v101);
                      outlined release of NavigationColumnState(v100);
                      char v40 = 1;
                      break;
                    default:
                      outlined release of NavigationColumnState(v101);
                      outlined release of NavigationColumnState(v100);
                      char v40 = 0;
                      break;
                  }
                  outlined release of NavigationColumnState(v99);
                  if ((v13 & 1) == 0) {
                    goto LABEL_87;
                  }
                }
LABEL_67:
                if ((v40 & 1) == 0) {
                  goto LABEL_164;
                }
                break;
              case 2:
                outlined retain of NavigationColumnState(v101);
                char v39 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v101, v11 + 2, v7);
                outlined release of NavigationColumnState(v101);
                goto LABEL_83;
              case 5:
                goto LABEL_102;
              default:
                goto LABEL_86;
            }
          }
LABEL_91:
          outlined release of NavigationColumnState(__src);
          outlined release of NavigationColumnState(__dst);
          ++v11;
LABEL_92:
          if (v11 >= v75) {
            return 1;
          }
          if (v11 >= (unint64_t)v70) {
            goto LABEL_194;
          }
          continue;
        }
        outlined release of NavigationColumnState(v100);
LABEL_63:
        outlined release of NavigationColumnState(v99);
        if (v13)
        {
LABEL_164:
          uint64_t v48 = swift_bridgeObjectRetain();
          BOOL v49 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v48, (uint64_t)v97, v11, (2 * v75) | 1) != 1;
          outlined release of NavigationColumnState(__src);
          outlined release of NavigationColumnState(__dst);
          swift_bridgeObjectRelease();
          return 2 * v49;
        }
LABEL_32:
        if (v11 == v75 - 1)
        {
          memcpy(v93, __src, sizeof(v93));
          memcpy(v94, __dst, 0x12BuLL);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v94, v50, v51, v52);
          _s7SwiftUI17NavigationRequestV7KeyKindOSgWObTm_0((uint64_t)v94, (uint64_t)v92, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
          NavigationColumnState.change(from:)((uint64_t)v92);
          if (!v3) {
            uint64_t v2 = v53;
          }
          outlined release of NavigationColumnState(__dst);
          outlined release of NavigationColumnState(__src);
        }
        else
        {
          uint64_t v71 = v11;
          uint64_t v15 = __dst[17];
          uint64_t v88 = __dst[15];
          uint64_t v90 = __dst[18];
          uint64_t v91 = __dst[19];
          uint64_t v76 = __dst[16];
          uint64_t v77 = __dst[20];
          uint64_t v16 = __dst[21];
          uint64_t v111 = __dst[22];
          uint64_t v87 = __dst[14];
          int v17 = LOBYTE(__dst[37]);
          if (((~__dst[14] & 0xF000000000000007) != 0) != (LOBYTE(__dst[37]) == 1))
          {
            outlined retain of NavigationColumnState(__dst);
            MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
            outlined release of NavigationColumnState(__dst);
          }
          uint64_t v78 = __src[16];
          uint64_t v79 = __src[14];
          uint64_t v83 = __src[17];
          uint64_t v85 = __src[15];
          uint64_t v18 = __src[18];
          uint64_t v19 = __src[19];
          uint64_t v20 = __src[20];
          uint64_t v21 = __src[21];
          uint64_t v81 = __src[22];
          int v22 = LOBYTE(__src[37]);
          if (((~__src[14] & 0xF000000000000007) != 0) != (LOBYTE(__src[37]) == 1))
          {
            outlined retain of NavigationColumnState(__src);
            MEMORY[0x18C112B90](0xD00000000000017BLL, 0x8000000188326C10);
            outlined release of NavigationColumnState(__src);
          }
          if ((v17 == 1) != (v22 == 1)) {
            goto LABEL_161;
          }
          uint64_t v74 = v16;
          if (v16 < 0)
          {
            if (v21 < 0)
            {
              uint64_t v26 = v3;
              uint64_t v25 = MEMORY[0x1E4FBC860];
              specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
              goto LABEL_46;
            }
            outlined retain of NavigationColumnState(__src);
            outlined copy of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ReplacedRoot?(v79, v85, v78, v83);
            outlined release of NavigationColumnState(__src);
            swift_release();
            goto LABEL_161;
          }
          outlined retain of NavigationColumnState(__dst);
          outlined copy of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ReplacedRoot?(v87, v88, v76, v15);
          outlined release of NavigationColumnState(__dst);
          swift_release();
          outlined retain of NavigationColumnState(__dst);
          outlined copy of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ReplacedRoot?(v87, v88, v76, v15);
          outlined release of NavigationColumnState(__dst);
          if (v21 < 0)
          {
            outlined release of NavigationColumnState(__src);
            outlined release of NavigationColumnState(__dst);
LABEL_176:
            swift_release();
            return 2;
          }
          outlined retain of NavigationColumnState(__src);
          uint64_t v2 = v81;
          outlined copy of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          outlined consume of NavigationColumnState.ReplacedRoot?(v79, v85, v78, v83);
          outlined release of NavigationColumnState(__src);
          uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v21 + 136))(v16);
          if (v3)
          {
            outlined release of NavigationColumnState(__src);
            outlined release of NavigationColumnState(__dst);
            swift_release();
            swift_release();
            return v2;
          }
          uint64_t v2 = v23;
          if ((v24 & 1) == 0)
          {
            outlined copy of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
            outlined retain of NavigationColumnState(__src);
            outlined copy of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
            swift_release();
            outlined consume of NavigationColumnState.ReplacedRoot?(v79, v85, v78, v83);
            uint64_t v111 = *(void *)(v81 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
            outlined release of NavigationColumnState(__src);
            if (v111) {
              goto LABEL_171;
            }
            uint64_t v63 = swift_bridgeObjectRetain();
            uint64_t v64 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v63, (uint64_t)v97, v71 + 1, (2 * v75) | 1);
            swift_release();
            swift_release();
            outlined release of NavigationColumnState(__src);
            outlined release of NavigationColumnState(__dst);
            swift_bridgeObjectRelease();
            if (!v64) {
              return v2;
            }
            return 2;
          }
          if (v23 != 1)
          {
            if ((unint64_t)(v23 - 2) < 2)
            {
LABEL_171:
              outlined release of NavigationColumnState(__src);
              outlined release of NavigationColumnState(__dst);
              swift_release();
              swift_release();
              return 2;
            }
            uint64_t v56 = v111;
            outlined copy of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v16);
            outlined retain of NavigationColumnState(__dst);
            outlined copy of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v16);
            swift_release();
            outlined consume of NavigationColumnState.ReplacedRoot?(v87, v88, v76, v15);
            uint64_t v86 = *(void *)(v56 + 16);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            outlined consume of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v16);
            outlined release of NavigationColumnState(__dst);
            if (v86)
            {
              outlined release of NavigationColumnState(__src);
              outlined release of NavigationColumnState(__dst);
              swift_release();
              goto LABEL_176;
            }
            if (v70 <= v71) {
              goto LABEL_200;
            }
            uint64_t v66 = swift_bridgeObjectRetain();
            uint64_t v67 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v66, (uint64_t)v98, v71 + 1, (2 * v70) | 1);
            swift_release();
            swift_release();
            outlined release of NavigationColumnState(__src);
            outlined release of NavigationColumnState(__dst);
            swift_bridgeObjectRelease();
            if (v67) {
              return 2;
            }
            return 0;
          }
          swift_release();
          swift_release();
          outlined retain of NavigationColumnState(__dst);
          uint64_t v25 = v111;
          outlined copy of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v16);
          swift_release();
          uint64_t v26 = v3;
          outlined consume of NavigationColumnState.ReplacedRoot?(v87, v88, v76, v15);
          outlined release of NavigationColumnState(__dst);
LABEL_46:
          uint64_t v27 = *(void *)(v25 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v80 = v26;
          if (v21 < 0)
          {
            uint64_t v2 = MEMORY[0x1E4FBC860];
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
          }
          else
          {
            outlined retain of NavigationColumnState(__src);
            uint64_t v2 = v81;
            outlined copy of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
            swift_release();
            outlined consume of NavigationColumnState.ReplacedRoot?(v79, v85, v78, v83);
            outlined release of NavigationColumnState(__src);
          }
          uint64_t v28 = *(void *)(v2 + 16);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if (!v27)
          {
            if (!v28) {
              goto LABEL_75;
            }
            if (v70 <= v71) {
              goto LABEL_197;
            }
            uint64_t v59 = swift_bridgeObjectRetain();
            uint64_t v60 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v59, (uint64_t)v98, v71 + 1, (2 * v70) | 1);
            swift_bridgeObjectRelease();
            if (!v60)
            {
              uint64_t v61 = swift_bridgeObjectRetain();
              uint64_t v62 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v61, (uint64_t)v97, v71 + 1, (2 * v75) | 1);
              outlined release of NavigationColumnState(__src);
              outlined release of NavigationColumnState(__dst);
              swift_bridgeObjectRelease();
              if (v62) {
                return 2;
              }
              return 0;
            }
            goto LABEL_161;
          }
          if (v28)
          {
            if (v27 != v28) {
              goto LABEL_161;
            }
            if (v21 < 0)
            {
              uint64_t v2 = MEMORY[0x1E4FBC860];
              specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
              uint64_t v29 = v74;
              if ((v74 & 0x8000000000000000) == 0) {
                goto LABEL_54;
              }
            }
            else
            {
              outlined retain of NavigationColumnState(__src);
              uint64_t v2 = v81;
              outlined copy of NavigationColumnState.ColumnContent(v79, v85, v78, v83, v18, v19, v20, v21);
              swift_release();
              outlined consume of NavigationColumnState.ReplacedRoot?(v79, v85, v78, v83);
              outlined release of NavigationColumnState(__src);
              uint64_t v29 = v74;
              if ((v74 & 0x8000000000000000) == 0)
              {
LABEL_54:
                outlined retain of NavigationColumnState(__dst);
                outlined copy of NavigationColumnState.ColumnContent(v87, v88, v76, v15, v90, v91, v77, v29);
                swift_release();
                outlined consume of NavigationColumnState.ReplacedRoot?(v87, v88, v76, v15);
                outlined release of NavigationColumnState(__dst);
                uint64_t v30 = *(void *)(v2 + 16);
                if (v30) {
                  goto LABEL_55;
                }
LABEL_73:
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
LABEL_74:
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
                swift_bridgeObjectRelease_n();
LABEL_75:
                uint64_t v9 = v68;
                outlined release of NavigationColumnState(__src);
                outlined release of NavigationColumnState(__dst);
                uint64_t v11 = v71 + 1;
                uint64_t v3 = v80;
                uint64_t v7 = v69;
                if (__OFADD__(v71, 1)) {
                  goto LABEL_195;
                }
                goto LABEL_92;
              }
            }
            uint64_t v41 = MEMORY[0x1E4FBC860];
            specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
            uint64_t v111 = v41;
            uint64_t v30 = *(void *)(v2 + 16);
            if (!v30) {
              goto LABEL_73;
            }
LABEL_55:
            uint64_t v31 = *(void *)(v111 + 16);
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v32 = 0;
            uint64_t v82 = v2;
            while (1)
            {
              if (!v31) {
                goto LABEL_74;
              }
              uint64_t v84 = v30;
              uint64_t v33 = *(void *)(v2 + v32 + 48);
              uint64_t v34 = *(void *)(v2 + v32 + 56);
              uint64_t v35 = *(void *)(v2 + v32 + 32);
              uint64_t v36 = *(void *)(v111 + v32 + 32);
              uint64_t v37 = *(void *)(v111 + v32 + 48);
              uint64_t v38 = *(void *)(v111 + v32 + 56);
              uint64_t v89 = *(uint64_t (**)(uint64_t))(*(void *)v35 + 112);
              swift_retain();
              swift_retain();
              outlined copy of Text.LineStyle?(v33, v34);
              swift_retain();
              swift_retain();
              swift_retain();
              outlined copy of Text.LineStyle?(v37, v38);
              swift_retain();
              LOBYTE(v89) = v89(v36);
              swift_release();
              swift_release();
              outlined consume of Text.LineStyle?(v33, v34);
              swift_release();
              swift_release();
              swift_release();
              outlined consume of Text.LineStyle?(v37, v38);
              swift_release();
              if ((v89 & 1) == 0) {
                break;
              }
              v32 += 56;
              --v31;
              uint64_t v2 = v82;
              uint64_t v30 = v84 - 1;
              if (v84 == 1) {
                goto LABEL_74;
              }
            }
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
            swift_bridgeObjectRelease_n();
LABEL_161:
            outlined release of NavigationColumnState(__src);
            outlined release of NavigationColumnState(__dst);
            return 2;
          }
          uint64_t v54 = swift_bridgeObjectRetain();
          uint64_t v55 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v54, (uint64_t)v97, v71 + 1, (2 * v75) | 1);
          swift_bridgeObjectRelease();
          if (!v55)
          {
            if (v70 <= v71) {
              goto LABEL_198;
            }
            swift_bridgeObjectRetain();
            uint64_t v65 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v69, (uint64_t)v97, v71 + 1, (2 * v70) | 1);
            outlined release of NavigationColumnState(__src);
            outlined release of NavigationColumnState(__dst);
            swift_bridgeObjectRelease();
            uint64_t v2 = v65 + 1;
            if (!__OFADD__(v65, 1)) {
              return v2;
            }
            goto LABEL_199;
          }
          outlined release of NavigationColumnState(__src);
          outlined release of NavigationColumnState(__dst);
          return 2;
        }
        return v2;
      case 2:
        outlined retain of NavigationColumnState(v100);
        char v39 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v97, (uint64_t)v100, v11 + 1, v7);
LABEL_83:
        outlined release of NavigationColumnState(v100);
        goto LABEL_66;
      case 5:
        goto LABEL_90;
      default:
        goto LABEL_63;
    }
  }
}

uint64_t type metadata completion function for PlainListBody()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for PlainListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(a3 + 16) - 8;
  size_t v9 = ((v7 + 16) & ~v7) + *(void *)(v6 + 64);
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *(_DWORD *)(*(void *)v8 + 80);
  if ((v11 | v7) <= 7
    && ((*(_DWORD *)(*(void *)v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v11 + v9 + 1) & ~v11) + *(void *)(*(void *)v8 + 64) <= 0x18)
  {
    uint64_t v15 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v22 = ~v7;
    uint64_t v23 = *(void *)(a3 + 16);
    if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
    {
      uint64_t v17 = ~v11;
      if ((*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v15 + v7 + 8) & ~v7))
      {
LABEL_14:
        memcpy(__dst, __src, v9);
LABEL_17:
        *((unsigned char *)__dst + v9) = *((unsigned char *)__src + v9);
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v10 + 16))(((unint64_t)__dst + v9 + v11 + 1) & v17, ((unint64_t)__src + v9 + v11 + 1) & v17, v23);
        return __dst;
      }
    }
    else
    {
      uint64_t v16 = *v15;
      if ((unint64_t)*v15 >= 0xFFFFFFFF) {
        LODWORD(v16) = -1;
      }
      uint64_t v17 = ~v11;
      if (v16 != -1) {
        goto LABEL_14;
      }
    }
    void *__dst = *__src;
    uint64_t v18 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v18 = *v15;
    uint64_t v21 = ((unint64_t)v18 + v7 + 8) & v22;
    uint64_t v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v19(v21, ((unint64_t)v15 + v7 + 8) & v22, v5);
    goto LABEL_17;
  }
  uint64_t v14 = *__src;
  void *__dst = *__src;
  __dst = (void *)(v14 + (((v11 | v7) & 0xF8 ^ 0x1F8) & ((v11 | v7) + 16)));
  swift_retain();
  return __dst;
}

uint64_t destroy for PlainListBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = ~v6;
  uint64_t v8 = *(void *)(v5 + 64);
  size_t v9 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v5 + 84) & 0x80000000) != 0)
  {
    if (!(*(unsigned int (**)(unint64_t))(v5 + 48))(((unint64_t)v9 + v6 + 8) & v7))
    {
LABEL_5:
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v5 + 8))(((unint64_t)v9 + v6 + 8) & v7, v4);
    }
  }
  else
  {
    uint64_t v10 = *v9;
    if ((unint64_t)*v9 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    if (v10 == -1) {
      goto LABEL_5;
    }
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (a1 + v8 + ((v6 + 16) & v7) + *(unsigned __int8 *)(v11 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

void *initializeWithCopy for PlainListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *__dst = *__src;
    uint64_t v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v15 = *v12;
    uint64_t v19 = ((unint64_t)v15 + v8 + 8) & v9;
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v16(v19, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  *((unsigned char *)__dst + v14) = *((unsigned char *)__src + v14);
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v17 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v17 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return __dst;
}

void *assignWithCopy for PlainListBody(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v34 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    size_t v32 = ((v9 + 16) & ~v9) + v10;
    uint64_t v17 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v18 = v17(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    uint64_t v19 = v17;
    int v30 = v18;
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    int v15 = v19(((unint64_t)v13 + v9 + 8) & ~v9, v8, v6);
    size_t v11 = v32;
    uint64_t v3 = a3;
    if (!v30)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *v4;
        swift_retain();
        swift_release();
        void *v12 = *v13;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 24))(((unint64_t)v12 + v9 + 8) & v34, ((unint64_t)v13 + v9 + 8) & v34, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v9 + 8) & v34, v6);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *v4;
    void *v12 = *v13;
    uint64_t v20 = ((unint64_t)v12 + v9 + 8) & v34;
    unint64_t v21 = (unint64_t)v13 + v9 + 8;
    uint64_t v22 = v5;
    uint64_t v23 = v4;
    uint64_t v24 = v6;
    unint64_t v25 = v21 & v34;
    uint64_t v26 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    uint64_t v27 = v24;
    uint64_t v4 = v23;
    uint64_t v5 = v22;
    v26(v20, v25, v27);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, v4, v11);
LABEL_12:
  *((unsigned char *)v5 + v11) = *((unsigned char *)v4 + v11);
  uint64_t v28 = *(void *)(*(void *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v28 + 24))(((unint64_t)v5 + v11 + *(unsigned __int8 *)(v28 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80), ((unint64_t)v4 + v11 + *(unsigned __int8 *)(v28 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  return v5;
}

void *initializeWithTake for PlainListBody(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *__dst = *__src;
    int v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    void *v15 = *v12;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v15 + v8 + 8) & v9, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  *((unsigned char *)__dst + v14) = *((unsigned char *)__src + v14);
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v16 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return __dst;
}

void *assignWithTake for PlainListBody(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v7 + 64);
  size_t v11 = ((v9 + 16) & ~v9) + v10;
  uint64_t v12 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v24 = ~v9;
  if ((v8 & 0x80000000) != 0)
  {
    size_t v21 = ((v9 + 16) & ~v9) + v10;
    uint64_t v16 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48);
    int v19 = v16(((unint64_t)v12 + v9 + 8) & ~v9, v8, v6);
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v5 = a1;
    int v15 = v16(((unint64_t)v13 + v9 + 8) & ~v9, v8, v6);
    uint64_t v3 = a3;
    uint64_t v4 = a2;
    size_t v11 = v21;
    if (!v19)
    {
LABEL_5:
      if (!v15)
      {
        *uint64_t v5 = *v4;
        swift_release();
        void *v12 = *v13;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 40))(((unint64_t)v12 + v9 + 8) & v24, ((unint64_t)v13 + v9 + 8) & v24, v6);
        goto LABEL_12;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v7 + 8))(((unint64_t)v12 + v9 + 8) & v24, v6);
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v14 = *v13;
    if (*v13 >= 0xFFFFFFFFuLL) {
      LODWORD(v14) = -1;
    }
    int v15 = v14 + 1;
    if (*v12 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v15)
  {
    *uint64_t v5 = *v4;
    void *v12 = *v13;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v7 + 32))(((unint64_t)v12 + v9 + 8) & v24, ((unint64_t)v13 + v9 + 8) & v24, v6);
    goto LABEL_12;
  }
LABEL_9:
  memcpy(v5, v4, v11);
LABEL_12:
  *((unsigned char *)v5 + v11) = *((unsigned char *)v4 + v11);
  uint64_t v17 = *(void *)(*(void *)(v3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 40))(((unint64_t)v5 + v11 + *(unsigned __int8 *)(v17 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v4 + v11 + *(unsigned __int8 *)(v17 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return v5;
}

uint64_t getEnumTagSinglePayload for PlainListBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF) {
    int v6 = 0x7FFFFFFF;
  }
  else {
    int v6 = *(_DWORD *)(v4 + 84);
  }
  unsigned int v7 = v6 - 1;
  uint64_t v8 = *(void *)(a3 + 16);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= v10) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = v7;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v14 = ((v11 + 16) & ~v11) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64);
  int v15 = a2 - v13;
  if (a2 <= v13) {
    goto LABEL_28;
  }
  uint64_t v16 = ((v12 + v14 + 1) & ~v12) + *(void *)(*(void *)(v8 - 8) + 64);
  char v17 = 8 * v16;
  if (v16 <= 3)
  {
    unsigned int v20 = ((v15 + ~(-1 << v17)) >> v17) + 1;
    if (HIWORD(v20))
    {
      int v18 = *(_DWORD *)((char *)a1 + v16);
      if (!v18) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 > 0xFF)
    {
      int v18 = *(unsigned __int16 *)((char *)a1 + v16);
      if (!*(unsigned __int16 *)((char *)a1 + v16)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v20 < 2)
    {
LABEL_28:
      if (v7 >= v10)
      {
        uint64_t v26 = (unint64_t *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v5 & 0x80000000) != 0)
        {
          unsigned int v28 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v26 + v11 + 8) & ~v11);
        }
        else
        {
          unint64_t v27 = *v26;
          if (v27 >= 0xFFFFFFFF) {
            LODWORD(v27) = -1;
          }
          unsigned int v28 = v27 + 1;
        }
        if (v28 >= 2) {
          return v28 - 1;
        }
        else {
          return 0;
        }
      }
      else
      {
        uint64_t v24 = ((unint64_t)a1 + v12 + v14 + 1) & ~v12;
        unint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
        return v25(v24, v10, v8);
      }
    }
  }
  int v18 = *((unsigned __int8 *)a1 + v16);
  if (!*((unsigned char *)a1 + v16)) {
    goto LABEL_28;
  }
LABEL_18:
  int v21 = (v18 - 1) << v17;
  if (v16 > 3) {
    int v21 = 0;
  }
  if (v16)
  {
    if (v16 <= 3) {
      int v22 = v16;
    }
    else {
      int v22 = 4;
    }
    switch(v22)
    {
      case 2:
        int v23 = *a1;
        break;
      case 3:
        int v23 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v23 = *(_DWORD *)a1;
        break;
      default:
        int v23 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v23 = 0;
  }
  return v13 + (v23 | v21) + 1;
}

void storeEnumTagSinglePayload for PlainListBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v12 = *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  uint64_t v13 = *(unsigned __int8 *)(v9 + 80);
  unsigned int v14 = v8 - 1;
  if (v8 - 1 <= v10) {
    unsigned int v15 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v15 = v8 - 1;
  }
  uint64_t v16 = ((v11 + 16) & ~v11) + v12;
  size_t v17 = ((v13 + v16 + 1) & ~v13) + *(void *)(v9 + 64);
  BOOL v18 = a3 >= v15;
  unsigned int v19 = a3 - v15;
  if (v19 != 0 && v18)
  {
    if (v17 <= 3)
    {
      unsigned int v23 = ((v19 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
      if (HIWORD(v23))
      {
        int v20 = 4;
      }
      else if (v23 >= 0x100)
      {
        int v20 = 2;
      }
      else
      {
        int v20 = v23 > 1;
      }
    }
    else
    {
      int v20 = 1;
    }
  }
  else
  {
    int v20 = 0;
  }
  if (v15 < a2)
  {
    unsigned int v21 = ~v15 + a2;
    if (v17 < 4)
    {
      int v22 = (v21 >> (8 * v17)) + 1;
      if (v17)
      {
        int v24 = v21 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v24;
          a1[2] = BYTE2(v24);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v24;
        }
        else
        {
          *a1 = v24;
        }
      }
    }
    else
    {
      bzero(a1, v17);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v17] = v22;
        return;
      case 2:
        *(_WORD *)&a1[v17] = v22;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v17] = v22;
        return;
      default:
        return;
    }
  }
  switch(v20)
  {
    case 1:
      a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v17] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x187C6FE34);
    case 4:
      *(_DWORD *)&a1[v17] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v14 >= v10)
        {
          if (v14 >= a2)
          {
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                uint64_t v31 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v33 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v34 = a2 + 1;
                  v33(((unint64_t)v31 + v11 + 8) & ~v11, v34);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v32 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v32 = a2;
                  }
                  *uint64_t v31 = v32;
                }
              }
            }
            else
            {
              if (v16 <= 3) {
                int v29 = ~(-1 << (8 * v16));
              }
              else {
                int v29 = -1;
              }
              if (v16)
              {
                int v27 = v29 & (a2 - v8);
                if (v16 <= 3) {
                  int v30 = ((v11 + 16) & ~v11) + v12;
                }
                else {
                  int v30 = 4;
                }
                bzero(a1, ((v11 + 16) & ~v11) + v12);
                switch(v30)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)a1 = v27;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)a1 = v27;
                    a1[2] = BYTE2(v27);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)a1 = v27;
                    break;
                  default:
LABEL_52:
                    *a1 = v27;
                    break;
                }
              }
            }
          }
          else
          {
            if (v16 <= 3) {
              int v26 = ~(-1 << (8 * v16));
            }
            else {
              int v26 = -1;
            }
            if (v16)
            {
              int v27 = v26 & (a2 - v8);
              if (v16 <= 3) {
                int v28 = ((v11 + 16) & ~v11) + v12;
              }
              else {
                int v28 = 4;
              }
              bzero(a1, ((v11 + 16) & ~v11) + v12);
              switch(v28)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
        else
        {
          unint64_t v25 = *(void (**)(unint64_t))(v9 + 56);
          v25((unint64_t)&a1[v13 + 1 + v16] & ~v13);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PlainListBody()
{
  return swift_getGenericMetadata();
}

uint64_t associated type witness table accessor for View.Body : View in PlainListBody<A, B>()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t PlainListBody.init(selection:isOutline:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t)@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t v9 = type metadata accessor for PlainListBody();
  *(unsigned char *)(a4 + *(int *)(v9 + 52)) = a2;
  return a3(v9, v10, v11, v12);
}

uint64_t PlainListBody.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v30 = a2;
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v4 = a1[5];
  v24[0] = type metadata accessor for PlainListBody.CollectionViewBody();
  v24[1] = type metadata accessor for PlainListBody.TableViewRoot();
  uint64_t v25 = type metadata accessor for _VariadicView.Tree();
  unint64_t v26 = lazy protocol witness table accessor for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled();
  v47[0] = &unk_1ED45AEA8;
  v47[1] = v24[0];
  _OWORD v47[2] = v25;
  v47[3] = v26;
  uint64_t v6 = type metadata accessor for StaticIf();
  type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>();
  uint64_t v28 = v7;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v29 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v24 - v12;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v15);
  size_t v17 = (char *)v24 - v16;
  uint64_t v36 = v2;
  uint64_t v37 = v3;
  uint64_t v38 = v5;
  uint64_t v39 = v4;
  uint64_t v40 = v27;
  uint64_t v31 = v2;
  uint64_t v32 = v3;
  uint64_t v33 = v5;
  uint64_t v34 = v4;
  uint64_t v35 = v27;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v46 = v5;
  uint64_t v23 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  LOBYTE(v47[0]) = 2;
  uint64_t v43 = WitnessTable;
  uint64_t v44 = v23;
  uint64_t v19 = swift_getWitnessTable();
  MEMORY[0x18C113660](v47, v6, v28, v19);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, v6);
  unint64_t v20 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v41 = v19;
  unint64_t v42 = v20;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  unsigned int v21 = *(void (**)(char *, uint64_t))(v29 + 8);
  v21(v10, v8);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v21)(v13, v8);
}

uint64_t closure #1 in PlainListBody.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v9 = type metadata accessor for PlainListBody.CollectionViewBody();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v19 - v14;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v16 = type metadata accessor for PlainListBody();
  PlainListBody.collectionViewBody.getter(v16, (uint64_t)v12);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  size_t v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t PlainListBody.collectionViewBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v17 - v8;
  uint64_t v10 = *(void *)(a1 + 16);
  double v12 = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v14, v3 + *(int *)(a1 + 56), v10, v12);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3, v6);
  return PlainListBody.CollectionViewBody.init(content:selection:)((uint64_t)v14, (uint64_t)v9, v10, a2);
}

uint64_t closure #2 in PlainListBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v29 = a4;
  uint64_t v30 = a5;
  uint64_t v33 = a1;
  uint64_t v34 = a6;
  type metadata accessor for Binding();
  uint64_t v32 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v32 - 8);
  MEMORY[0x1F4188790](v32);
  double v12 = (char *)&v29 - v11;
  uint64_t v42 = a2;
  uint64_t v43 = a3;
  uint64_t v44 = a4;
  uint64_t v45 = a5;
  uint64_t v13 = type metadata accessor for PlainListBody.TableViewRoot();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v29 - v14;
  uint64_t v16 = type metadata accessor for _VariadicView.Tree();
  uint64_t v31 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  BOOL v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v20 = MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v29 - v21;
  uint64_t v23 = v33;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))(v12, v33, v32, v20);
  uint64_t v24 = (uint64_t)v12;
  uint64_t v25 = v29;
  uint64_t v26 = v30;
  PlainListBody.TableViewRoot.init(selection:)(v24, (uint64_t)v15);
  uint64_t v35 = a2;
  uint64_t v36 = a3;
  uint64_t v37 = v25;
  uint64_t v38 = v26;
  uint64_t v39 = v23;
  _VariadicView.Tree.init(_:content:)();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v41 = v25;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v18);
  uint64_t v27 = *(void (**)(char *, uint64_t))(v31 + 8);
  v27(v18, v16);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  return ((uint64_t (*)(char *, uint64_t))v27)(v22, v16);
}

uint64_t PlainListBody.TableViewRoot.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = swift_getKeyPath();
  *(_WORD *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = swift_getKeyPath();
  *(_WORD *)(a2 + 24) = 0;
  uint64_t v4 = a2 + *(int *)(type metadata accessor for PlainListBody.TableViewRoot() + 56);
  type metadata accessor for Binding();
  uint64_t v5 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(v4, a1, v5);
}

uint64_t closure #1 in closure #2 in PlainListBody.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13[0] = v7;
  v13[1] = v8;
  v13[2] = v9;
  v13[3] = v10;
  uint64_t v11 = type metadata accessor for PlainListBody();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v11 + 56));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t PlainListBody.CollectionViewBody.init(content:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = swift_getKeyPath();
  *(_WORD *)(a4 + 8) = 0;
  *(void *)(a4 + 16) = swift_getKeyPath();
  *(_WORD *)(a4 + 24) = 0;
  *(void *)(a4 + 32) = swift_getKeyPath();
  *(_OWORD *)(a4 + 40) = 0u;
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(_OWORD *)(a4 + 82) = 0u;
  uint64_t v8 = type metadata accessor for PlainListBody.CollectionViewBody();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + *(int *)(v8 + 60), a1, a3);
  uint64_t v9 = a4 + *(int *)(v8 + 64);
  type metadata accessor for Binding();
  uint64_t v10 = type metadata accessor for Optional();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v9, a2, v10);
}

uint64_t PlainListBody.CollectionViewBody.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v67 = a2;
  uint64_t v64 = *(void *)(a1 + 24);
  uint64_t v5 = v64;
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v61 = *(void *)(v6 - 8);
  uint64_t v62 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v58 = (char *)&v47 - v7;
  uint64_t v50 = type metadata accessor for UICollectionLayoutListConfiguration.Appearance();
  uint64_t v8 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v68 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = *(void *)(a1 + 16);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(a1 + 32);
  unint64_t v12 = lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
  uint64_t v89 = v11;
  unint64_t v90 = v12;
  uint64_t v66 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v59 = *(void *)(a1 + 40);
  uint64_t v60 = WitnessTable;
  *(void *)&long long v91 = v10;
  *((void *)&v91 + 1) = v5;
  *(void *)&long long v92 = WitnessTable;
  *((void *)&v92 + 1) = v59;
  uint64_t v54 = type metadata accessor for CollectionViewListRoot();
  uint64_t v63 = *(void *)(v54 - 8);
  MEMORY[0x1F4188790](v54);
  uint64_t v56 = (uint64_t)&v47 - v14;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>();
  uint64_t v55 = v15;
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v65 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v53 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  char v57 = (char *)&v47 - v18;
  uint64_t v51 = *(void *)(v10 - 8);
  uint64_t v19 = v51;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v47 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v49 = v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v47 - v24;
  View.scrollContentBackground(_:)(0, v48, v11);
  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v25, v10);
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v68, *MEMORY[0x1E4FB10D0], v50);
  uint64_t v26 = *(void *)v3;
  uint64_t v27 = *(unsigned __int8 *)(v3 + 8);
  LODWORD(v11) = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v3, v27, *(unsigned char *)(v3 + 9));
  uint64_t v50 = specialized Environment.wrappedValue.getter(v26, v27 | (v11 << 8));
  LODWORD(v48) = v28 & 1;
  outlined consume of Environment<CGFloat?>.Content(v26, v27, v11);
  uint64_t v29 = *(void *)(v3 + 16);
  uint64_t v30 = *(unsigned __int8 *)(v3 + 24);
  LODWORD(v27) = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v29, v30, *(unsigned char *)(v3 + 25));
  double v31 = COERCE_DOUBLE(specialized Environment.wrappedValue.getter(v29, v30 | (v27 << 8)));
  LOBYTE(v19) = v32;
  outlined consume of Environment<CGFloat?>.Content(v29, v30, v27);
  if (v19) {
    double v33 = 26.0;
  }
  else {
    double v33 = v31;
  }
  uint64_t v34 = v3 + *(int *)(a1 + 64);
  uint64_t v35 = (uint64_t)v58;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 16))(v58, v34, v62);
  long long v36 = *(_OWORD *)(v3 + 80);
  long long v93 = *(_OWORD *)(v3 + 64);
  long long v94 = v36;
  __int16 v95 = *(_WORD *)(v3 + 96);
  long long v37 = *(_OWORD *)(v3 + 48);
  long long v91 = *(_OWORD *)(v3 + 32);
  long long v92 = v37;
  outlined retain of Environment<ListPadding>((uint64_t)&v91, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined copy of Environment<ListPadding>.Content);
  specialized Environment.wrappedValue.getter((uint64_t)v80);
  outlined retain of Environment<ListPadding>((uint64_t)&v91, (void (*)(void, void, void, void, void, void, void, void, _WORD))outlined consume of Environment<ListPadding>.Content);
  v71[0] = v80[0];
  uint64_t v72 = v81;
  char v73 = v82;
  uint64_t v74 = v83;
  char v75 = v84;
  uint64_t v76 = v85;
  char v77 = v86;
  uint64_t v78 = v87;
  char v79 = v88;
  uint64_t v38 = v56;
  uint64_t v39 = CollectionViewListRoot.init(content:style:minRowHeight:minHeaderHeight:selection:listPadding:)((uint64_t)v49, v68, v50, v48, v35, v71, v10, v56, v33);
  uint64_t v41 = v53;
  uint64_t v40 = v54;
  MEMORY[0x18C113660](v39, v54, v55, &protocol witness table for CollectionViewListRoot<A, B>);
  (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v38, v40);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v25, v10);
  unint64_t v42 = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v69 = &protocol witness table for CollectionViewListRoot<A, B>;
  unint64_t v70 = v42;
  uint64_t v43 = v52;
  swift_getWitnessTable();
  uint64_t v44 = v57;
  static ViewBuilder.buildExpression<A>(_:)(v41);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v65 + 8);
  v45(v41, v43);
  static ViewBuilder.buildExpression<A>(_:)(v44);
  return ((uint64_t (*)(char *, uint64_t))v45)(v44, v43);
}

uint64_t static PlainListBody.TableViewRoot._viewListOptions.getter()
{
  uint64_t v0 = unk_1ED414F60;
  if ((unk_1ED414F60 & ~qword_1ED414F58) == 0) {
    uint64_t v0 = 0;
  }
  uint64_t v1 = qword_1ED414F68;
  if ((qword_1ED414F68 & ~(v0 | qword_1ED414F58)) == 0) {
    uint64_t v1 = 0;
  }
  return v1 | v0 | qword_1ED414F58;
}

uint64_t PlainListBody.TableViewRoot.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v42 = a2;
  type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v43 = &v32[-v8];
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v39 = v5;
  uint64_t v40 = v9;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v10 = type metadata accessor for TableViewListDataSource();
  uint64_t v38 = v10;
  uint64_t WitnessTable = swift_getWitnessTable();
  v49[0] = v10;
  v49[1] = v5;
  v49[2] = WitnessTable;
  v49[3] = v9;
  uint64_t v11 = type metadata accessor for TableViewListCore();
  uint64_t v41 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v32[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = &v32[-v15];
  outlined init with copy of _VariadicView_Children(a1, (uint64_t)v48);
  uint64_t v17 = *(void *)v3;
  uint64_t v18 = *(unsigned __int8 *)(v3 + 8);
  int v19 = *(unsigned __int8 *)(v3 + 9);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v3, v18, *(unsigned char *)(v3 + 9));
  uint64_t v34 = specialized Environment.wrappedValue.getter(v17, v18 | (v19 << 8));
  int v33 = v20 & 1;
  outlined consume of Environment<CGFloat?>.Content(v17, v18, v19);
  uint64_t v21 = *(void *)(v3 + 16);
  uint64_t v22 = *(unsigned __int8 *)(v3 + 24);
  int v23 = *(unsigned __int8 *)(v3 + 25);
  outlined copy of Environment<CGFloat?>.Content(v21, v22, *(unsigned char *)(v3 + 25));
  uint64_t v24 = specialized Environment.wrappedValue.getter(v21, v22 | (v23 << 8));
  LOBYTE(v5) = v25;
  outlined consume of Environment<CGFloat?>.Content(v21, v22, v23);
  double v26 = *(double *)&v24;
  if (v5) {
    double v26 = 26.0;
  }
  double v27 = TableViewListDataSource.init(_:style:minRowHeight:minHeaderHeight:)((uint64_t)v48, 0, v34, v33, (uint64_t)v49, v26);
  uint64_t v28 = (uint64_t)v43;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v44 + 16))(v43, v3 + *(int *)(v42 + 56), v45, v27);
  uint64_t v29 = v38;
  TableViewListCore.Configuration.init()(v47);
  TableViewListCore.init(dataSource:selection:configuration:)((uint64_t)v49, v28, v47, v29, (uint64_t)v13);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v30 = *(void (**)(unsigned char *, uint64_t))(v41 + 8);
  v30(v13, v11);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(unsigned char *, uint64_t))v30)(v16, v11);
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance PlainListBody<A, B>.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static _VariadicView_Root._viewListOptions.getter in conformance PlainListBody<A, B>.TableViewRoot()
{
  return static PlainListBody.TableViewRoot._viewListOptions.getter();
}

uint64_t type metadata accessor for PlainListBody.CollectionViewBody()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for PlainListBody.TableViewRoot()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled()
{
  unint64_t result = lazy protocol witness table cache variable for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled;
  if (!lazy protocol witness table cache variable for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CollectionViewPlainListsEnabled and conformance CollectionViewPlainListsEnabled);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>);
    }
  }
}

uint64_t partial apply for closure #1 in PlainListBody.body.getter()
{
  return partial apply for closure #1 in PlainListBody.body.getter(closure #1 in PlainListBody.body.getter);
}

uint64_t partial apply for closure #2 in PlainListBody.body.getter()
{
  return partial apply for closure #1 in PlainListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in PlainListBody.body.getter);
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier>();
    lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v3, ScrollContentBackgroundModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t partial apply for closure #1 in closure #2 in PlainListBody.body.getter()
{
  return partial apply for closure #1 in PlainListBody.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in closure #2 in PlainListBody.body.getter);
}

uint64_t partial apply for closure #1 in PlainListBody.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t type metadata completion function for PlainListBody.TableViewRoot()
{
  type metadata accessor for Binding();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = ~(v7 | 7);
  if (v7 <= 7
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0
    && (((v7 | 7) + 26) & ~(v7 | 7)) + ((v7 + 16) & (unint64_t)~v7) + *(void *)(v5 + 64) <= 0x18)
  {
    uint64_t v33 = *(void *)(a3 + 24);
    uint64_t __n = ((v7 + 16) & ~v7) + *(void *)(v5 + 64);
    uint64_t v12 = *(void *)a2;
    char v13 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v14 = *(unsigned char *)(a2 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v14, v13);
    *(void *)a1 = v12;
    *(unsigned char *)(a1 + 8) = v14;
    *(unsigned char *)(a1 + 9) = v13;
    unint64_t v15 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v16 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v17 = *(void *)v16;
    char v18 = *(unsigned char *)(v16 + 9);
    unsigned __int8 v19 = *(unsigned char *)(v16 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v16, v19, v18);
    *(void *)unint64_t v15 = v17;
    *(unsigned char *)(v15 + 8) = v19;
    *(unsigned char *)(v15 + 9) = v18;
    char v20 = (void *)((v15 + 17) & v8);
    uint64_t v21 = (void *)((v16 + 17) & v8);
    uint64_t v22 = (uint64_t *)(((unint64_t)v21 + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v6 & 0x80000000) != 0)
    {
      uint64_t v25 = v33;
      int v26 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48))(((unint64_t)v22 + v7 + 8) & ~v7, v6, v33);
      uint64_t v24 = ~v7;
      if (v26)
      {
LABEL_14:
        memcpy(v20, v21, __n);
        return a1;
      }
    }
    else
    {
      uint64_t v23 = *v22;
      if ((unint64_t)*v22 >= 0xFFFFFFFF) {
        LODWORD(v23) = -1;
      }
      uint64_t v24 = ~v7;
      uint64_t v25 = v33;
      if (v23 != -1) {
        goto LABEL_14;
      }
    }
    *char v20 = *v21;
    double v27 = (void *)(((unint64_t)v20 + 15) & 0xFFFFFFFFFFFFFFF8);
    *double v27 = *v22;
    uint64_t v28 = ((unint64_t)v27 + v7 + 8) & v24;
    uint64_t v29 = ((unint64_t)v22 + v7 + 8) & v24;
    uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    v30(v28, v29, v25);
    return a1;
  }
  uint64_t v11 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  a1 = v11 + ((v7 + 16) & v8);
  swift_retain();
  return a1;
}

uint64_t destroy for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  uint64_t v5 = *(void *)(a2 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v4 + (v8 | 7) + 10) & ~(v8 | 7);
  uint64_t v10 = ~v8;
  uint64_t v11 = (uint64_t *)((v9 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) != 0)
  {
    uint64_t v15 = *(void *)(v5 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v6 + 48))(((unint64_t)v11 + v8 + 8) & v10);
    uint64_t v7 = v15;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v12 = *v11;
  if ((unint64_t)*v11 >= 0xFFFFFFFF) {
    LODWORD(v12) = -1;
  }
  uint64_t result = (v12 + 1);
  if (v12 == -1)
  {
LABEL_7:
    uint64_t v16 = v7;
    swift_release();
    swift_release();
    unsigned __int8 v14 = *(uint64_t (**)(unint64_t, uint64_t))(v16 + 8);
    return v14(((unint64_t)v11 + v8 + 8) & v10, v5);
  }
  return result;
}

uint64_t initializeWithCopy for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v8, v7);
  *(void *)a1 = v6;
  *(unsigned char *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 9) = v7;
  unint64_t v9 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v11 = *(void *)v10;
  LOBYTE(v6) = *(unsigned char *)(v10 + 9);
  unsigned __int8 v12 = *(unsigned char *)(v10 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v10, v12, v6);
  *(void *)unint64_t v9 = v11;
  *(unsigned char *)(v9 + 8) = v12;
  *(unsigned char *)(v9 + 9) = v6;
  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v16 = (v15 | 7) + 10;
  uint64_t v17 = (void *)((v16 + v9) & ~(v15 | 7));
  char v18 = (void *)((v16 + v10) & ~(v15 | 7));
  uint64_t v19 = ~v15;
  uint64_t v20 = *(void *)(v14 + 64);
  uint64_t v21 = (uint64_t *)(((unint64_t)v18 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v14 + 84) & 0x80000000) == 0)
  {
    uint64_t v22 = *v21;
    if ((unint64_t)*v21 >= 0xFFFFFFFF) {
      LODWORD(v22) = -1;
    }
    if (v22 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v17 = *v18;
    uint64_t v23 = (void *)(((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v23 = *v21;
    uint64_t v24 = ((unint64_t)v23 + v15 + 8) & v19;
    uint64_t v25 = *(void (**)(uint64_t, unint64_t, uint64_t))(v14 + 16);
    swift_retain();
    swift_retain();
    v25(v24, ((unint64_t)v21 + v15 + 8) & v19, v13);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v14 + 48))(((unint64_t)v21 + v15 + 8) & v19)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v17, v18, ((v15 + 16) & ~v15) + v20);
  return a1;
}

uint64_t assignWithCopy for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  char v7 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v8 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v8, v7);
  uint64_t v9 = *(void *)a1;
  char v10 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v6;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v9, v11, v10);
  unint64_t v12 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  LOBYTE(v6) = *(unsigned char *)(v13 + 9);
  unsigned __int8 v15 = *(unsigned char *)(v13 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v13, v15, v6);
  uint64_t v16 = *(void *)v12;
  char v17 = *(unsigned char *)(v12 + 9);
  *(void *)unint64_t v12 = v14;
  uint64_t v18 = *(unsigned __int8 *)(v12 + 8);
  *(unsigned char *)(v12 + 8) = v15;
  *(unsigned char *)(v12 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v16, v18, v17);
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (v21 | 7) + 10;
  uint64_t v23 = (void *)((v22 + v12) & ~(v21 | 7));
  unint64_t v24 = v22 + v13;
  uint64_t v25 = (void *)(v24 & ~(v21 | 7));
  uint64_t v26 = *(unsigned int *)(v20 + 84);
  uint64_t v27 = ~v21;
  uint64_t v28 = *(void *)(v20 + 64);
  size_t v29 = ((v21 + 16) & ~v21) + v28;
  uint64_t v30 = (void *)(((unint64_t)v23 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v26 & 0x80000000) != 0)
  {
    uint64_t v44 = v24 & ~(v21 | 7);
    long long v37 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v20 + 48);
    size_t __n = ((v21 + 16) & ~v21) + v28;
    int v38 = v37(((unint64_t)v30 + v21 + 8) & v27, v26, v19);
    uint64_t v39 = v37;
    int v42 = v38;
    double v31 = (void *)((v44 + 15) & 0xFFFFFFFFFFFFFFF8);
    int v33 = v39(((unint64_t)v31 + v21 + 8) & v27, v26, v19);
    size_t v29 = __n;
    uint64_t v25 = (void *)v44;
    if (!v42)
    {
LABEL_5:
      if (!v33)
      {
        *uint64_t v23 = *v25;
        swift_retain();
        swift_release();
        *uint64_t v30 = *v31;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 24))(((unint64_t)v30 + v21 + 8) & v27, ((unint64_t)v31 + v21 + 8) & v27, v19);
        return a1;
      }
      size_t v34 = v29;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v20 + 8))(((unint64_t)v30 + v21 + 8) & v27, v19);
      uint64_t v35 = v23;
      long long v36 = v25;
      size_t v29 = v34;
      goto LABEL_10;
    }
  }
  else
  {
    double v31 = (void *)(((unint64_t)v25 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v32 = *v31;
    if (*v31 >= 0xFFFFFFFFuLL) {
      LODWORD(v32) = -1;
    }
    int v33 = v32 + 1;
    if (*v30 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v33)
  {
    *uint64_t v23 = *v25;
    *uint64_t v30 = *v31;
    uint64_t v40 = *(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 16);
    swift_retain();
    swift_retain();
    v40(((unint64_t)v30 + v21 + 8) & v27, ((unint64_t)v31 + v21 + 8) & v27, v19);
    return a1;
  }
  uint64_t v35 = v23;
  long long v36 = v25;
LABEL_10:
  memcpy(v35, v36, v29);
  return a1;
}

uint64_t initializeWithTake for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v5 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)v5;
  *(_WORD *)(v4 + 8) = *(_WORD *)(v5 + 8);
  *(void *)unint64_t v4 = v6;
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + 10;
  uint64_t v11 = (char *)((v10 + v4) & ~(v9 | 7));
  unint64_t v12 = (void *)((v10 + v5) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = *(void *)(v8 + 64);
  unsigned __int8 v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v16 = *v15;
    if ((unint64_t)*v15 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    if (v16 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v11 = *v12;
    unint64_t v17 = (unint64_t)(v11 + 15);
    *(void *)(v17 & 0xFFFFFFFFFFFFFFF8) = *v15;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))((v9 + 8 + (v17 & 0xFFFFFFFFFFFFFFF8)) & v13, ((unint64_t)v15 + v9 + 8) & v13, v7);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v15 + v9 + 8) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, ((v9 + 16) & ~v9) + v14);
  return a1;
}

uint64_t assignWithTake for PlainListBody.TableViewRoot(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  uint64_t v18 = *(void *)(a3 + 24);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v21 = (v20 | 7) + 10;
  uint64_t v22 = (void *)((v21 + v11) & ~(v20 | 7));
  unint64_t v23 = v21 + v12;
  unint64_t v24 = (void *)(v23 & ~(v20 | 7));
  uint64_t v25 = *(unsigned int *)(v19 + 84);
  uint64_t v26 = ~v20;
  size_t v27 = ((v20 + 16) & ~v20) + *(void *)(v19 + 64);
  uint64_t v28 = (void *)(((unint64_t)v22 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v25 & 0x80000000) != 0)
  {
    uint64_t v41 = v23 & ~(v20 | 7);
    uint64_t v35 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v19 + 48);
    uint64_t v40 = ((v20 + 16) & ~v20) + *(void *)(*(void *)(v18 - 8) + 64);
    int v36 = v35(((unint64_t)v28 + v20 + 8) & ~v20, v25, v18);
    long long v37 = v35;
    int v39 = v36;
    size_t v29 = (void *)((v41 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v26 = ~v20;
    int v31 = v37(((unint64_t)v29 + v20 + 8) & ~v20, v25, v18);
    size_t v27 = v40;
    unint64_t v24 = (void *)v41;
    if (!v39)
    {
LABEL_5:
      if (!v31)
      {
        *uint64_t v22 = *v24;
        swift_release();
        *uint64_t v28 = *v29;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 40))(((unint64_t)v28 + v20 + 8) & v26, ((unint64_t)v29 + v20 + 8) & v26, v18);
        return a1;
      }
      size_t v32 = v27;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v19 + 8))(((unint64_t)v28 + v20 + 8) & v26, v18);
      int v33 = v22;
      size_t v34 = v24;
      size_t v27 = v32;
      goto LABEL_10;
    }
  }
  else
  {
    size_t v29 = (void *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v30 = *v29;
    if (*v29 >= 0xFFFFFFFFuLL) {
      LODWORD(v30) = -1;
    }
    int v31 = v30 + 1;
    if (*v28 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v31)
  {
    *uint64_t v22 = *v24;
    *uint64_t v28 = *v29;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v19 + 32))(((unint64_t)v28 + v20 + 8) & v26, ((unint64_t)v29 + v20 + 8) & v26, v18);
    return a1;
  }
  int v33 = v22;
  size_t v34 = v24;
LABEL_10:
  memcpy(v33, v34, v27);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainListBody.TableViewRoot(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    int v7 = 0x7FFFFFFF;
  }
  else {
    int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  if (v7 - 1 >= a2) {
    goto LABEL_25;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + ((v8 + 26) & ~v8);
  char v10 = 8 * v9;
  if (v9 > 3) {
    goto LABEL_7;
  }
  unsigned int v13 = (((1 << v10) + a2 - v7) >> v10) + 1;
  if (HIWORD(v13))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_15;
    }
LABEL_25:
    uint64_t v17 = (unint64_t *)(((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + v8 + 10) & ~v8) + 15) & 0xFFFFFFFFFFFFFFF8);
    if ((v5 & 0x80000000) != 0)
    {
      unsigned int v19 = (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)v17 + v6 + 8) & ~v6);
    }
    else
    {
      unint64_t v18 = *v17;
      if (v18 >= 0xFFFFFFFF) {
        LODWORD(v18) = -1;
      }
      unsigned int v19 = v18 + 1;
    }
    if (v19 >= 2) {
      return v19 - 1;
    }
    else {
      return 0;
    }
  }
  if (v13 > 0xFF)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_15;
    }
    goto LABEL_25;
  }
  if (v13 < 2) {
    goto LABEL_25;
  }
LABEL_7:
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_25;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 <= 3) {
      int v15 = ((v6 + 16) & ~v6)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + ((v8 + 26) & ~v8);
    else {
      int v15 = 4;
    }
    switch(v15)
    {
      case 2:
        int v16 = *a1;
        break;
      case 3:
        int v16 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v16 = *(_DWORD *)a1;
        break;
      default:
        int v16 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v16 = 0;
  }
  return (v16 | v14) + v7;
}

void storeEnumTagSinglePayload for PlainListBody.TableViewRoot(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  unsigned int v9 = v8 - 1;
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  size_t v12 = ((v10 + 16) & ~v10) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v13 = (((v10 | 7) + 26) & ~(v10 | 7)) + v12;
  if (v8 - 1 >= a3)
  {
    int v14 = 0;
LABEL_13:
    if (v9 >= a2) {
      goto LABEL_21;
    }
    goto LABEL_14;
  }
  int v14 = 1;
  if (v13 > 3) {
    goto LABEL_13;
  }
  unsigned int v15 = (((1 << (8 * v13)) + a3 - v8) >> (8 * v13)) + 1;
  if (HIWORD(v15))
  {
    int v14 = 4;
    if (v9 >= a2) {
      goto LABEL_21;
    }
  }
  else
  {
    if (v15 >= 0x100) {
      int v14 = 2;
    }
    else {
      int v14 = v15 > 1;
    }
    if (v9 >= a2)
    {
LABEL_21:
      switch(v14)
      {
        case 1:
          a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 2:
          *(_WORD *)&a1[v13] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_26;
        case 3:
          goto LABEL_57;
        case 4:
          *(_DWORD *)&a1[v13] = 0;
          goto LABEL_25;
        default:
LABEL_25:
          if (a2)
          {
LABEL_26:
            uint64_t v11 = v10 | 7;
            unint64_t v19 = (((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + v11 + 10) & ~v11;
            if (a2 + 1 <= v8)
            {
              if (a2 != -1)
              {
                unint64_t v23 = (void *)((v19 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v7 & 0x80000000) != 0)
                {
                  uint64_t v25 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
                  uint64_t v26 = a2 + 1;
                  v25(((unint64_t)v23 + v10 + 8) & ~v10, v26);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v24 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v24 = a2;
                  }
                  *unint64_t v23 = v24;
                }
              }
            }
            else
            {
              if (v12 <= 3) {
                int v20 = ~(-1 << (8 * v12));
              }
              else {
                int v20 = -1;
              }
              if (v12)
              {
                int v21 = v20 & (a2 - v8);
                if (v12 <= 3) {
                  int v22 = v12;
                }
                else {
                  int v22 = 4;
                }
                bzero((void *)((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + v11 + 10) & ~v11), v12);
                switch(v22)
                {
                  case 2:
                    *(_WORD *)unint64_t v19 = v21;
                    break;
                  case 3:
                    *(_WORD *)unint64_t v19 = v21;
                    *(unsigned char *)(v19 + 2) = BYTE2(v21);
                    break;
                  case 4:
                    *(_DWORD *)unint64_t v19 = v21;
                    break;
                  default:
                    *(unsigned char *)unint64_t v19 = v21;
                    break;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
LABEL_14:
  unsigned int v16 = a2 - v8;
  if (v13 < 4)
  {
    int v17 = (v16 >> (8 * v13)) + 1;
    if (v13)
    {
      int v18 = v16 & ~(-1 << (8 * v13));
      bzero(a1, v13);
      if (v13 == 3)
      {
        *(_WORD *)a1 = v18;
        a1[2] = BYTE2(v18);
      }
      else if (v13 == 2)
      {
        *(_WORD *)a1 = v18;
      }
      else
      {
        *a1 = v18;
      }
    }
  }
  else
  {
    bzero(a1, (((v10 | 7) + 26) & ~(v10 | 7)) + v12);
    *(_DWORD *)a1 = v16;
    int v17 = 1;
  }
  switch(v14)
  {
    case 1:
      a1[v13] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v13] = v17;
      break;
    case 3:
LABEL_57:
      __break(1u);
      JUMPOUT(0x187C72C14);
    case 4:
      *(_DWORD *)&a1[v13] = v17;
      break;
    default:
      return;
  }
}

uint64_t type metadata completion function for PlainListBody.CollectionViewBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    type metadata accessor for Binding();
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  if ((v9 | v7) <= 7
    && ((*(_DWORD *)(v8 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) == 0
    && ((v9 + 16) & ~v9)
     + *(void *)(*(void *)(v5 - 8) + 64)
     + (((v9 | 7) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v7 + 98) & ~v7)) & ~(v9 | 7)) <= 0x18)
  {
    uint64_t __n = ((v9 + 16) & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
    uint64_t v54 = *(void *)(v5 - 8);
    uint64_t v55 = *(void *)(a3 + 24);
    uint64_t v51 = v9 | 7;
    uint64_t v52 = ~(v9 | 7);
    uint64_t v14 = *(void *)a2;
    char v15 = *(unsigned char *)(a2 + 9);
    unsigned __int8 v16 = *(unsigned char *)(a2 + 8);
    uint64_t v48 = *(void *)(*(void *)(a3 + 16) - 8);
    uint64_t v49 = *(void *)(a3 + 16);
    int v53 = *(_DWORD *)(v8 + 84);
    uint64_t v50 = *(void *)(v48 + 64);
    outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v16, v15);
    *(void *)a1 = v14;
    *(unsigned char *)(a1 + 8) = v16;
    *(unsigned char *)(a1 + 9) = v15;
    uint64_t v56 = a1;
    unint64_t v17 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v19 = *(void *)v18;
    LOBYTE(v14) = *(unsigned char *)(v18 + 9);
    unsigned __int8 v20 = *(unsigned char *)(v18 + 8);
    outlined copy of Environment<CGFloat?>.Content(*(void *)v18, v20, v14);
    *(void *)unint64_t v17 = v19;
    *(unsigned char *)(v17 + 8) = v20;
    *(unsigned char *)(v17 + 9) = v14;
    unint64_t v21 = (v17 + 17) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v18 + 17) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v25 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v22 + 24);
    uint64_t v27 = *(void *)(v22 + 32);
    uint64_t v28 = *(void *)(v22 + 56);
    uint64_t v44 = *(void *)(v22 + 48);
    uint64_t v45 = *(void *)(v22 + 40);
    char v46 = *(unsigned char *)(v22 + 64);
    char v47 = *(unsigned char *)(v22 + 65);
    outlined copy of Environment<ListPadding>.Content(*(void *)v22, v24, v25, v26, v27, v45, v44, v28, v46, v47);
    *(void *)unint64_t v21 = v23;
    *(void *)(v21 + 8) = v24;
    *(void *)(v21 + 16) = v25;
    *(void *)(v21 + 24) = v26;
    *(void *)(v21 + 32) = v27;
    *(void *)(v21 + 40) = v45;
    *(void *)(v21 + 48) = v44;
    *(void *)(v21 + 56) = v28;
    *(unsigned char *)(v21 + 64) = v46;
    *(unsigned char *)(v21 + 65) = v47;
    uint64_t v29 = (v22 + v7 + 66) & ~v7;
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v48 + 16))((v21 + v7 + 66) & ~v7, v29, v49);
    uint64_t v30 = (void *)((((v21 + v7 + 66) & ~v7) + v50 + v51) & v52);
    int v31 = (void *)((v29 + v50 + v51) & v52);
    size_t v32 = (uint64_t *)(((unint64_t)v31 + 15) & 0xFFFFFFFFFFFFFFF8);
    if (v53 < 0)
    {
      uint64_t v35 = v54;
      uint64_t v34 = v55;
      int v37 = (*(uint64_t (**)(unint64_t))(v54 + 48))(((unint64_t)v32 + v9 + 8) & ~v9);
      uint64_t v36 = ~v9;
      if (v37)
      {
LABEL_14:
        memcpy(v30, v31, __n);
        return v56;
      }
    }
    else
    {
      uint64_t v33 = *v32;
      if ((unint64_t)*v32 >= 0xFFFFFFFF) {
        LODWORD(v33) = -1;
      }
      uint64_t v34 = v55;
      uint64_t v35 = v54;
      uint64_t v36 = ~v9;
      if (v33 != -1) {
        goto LABEL_14;
      }
    }
    *uint64_t v30 = *v31;
    int v38 = (void *)(((unint64_t)v30 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v38 = *v32;
    uint64_t v39 = ((unint64_t)v38 + v9 + 8) & v36;
    uint64_t v40 = ((unint64_t)v32 + v9 + 8) & v36;
    uint64_t v41 = *(void (**)(uint64_t, uint64_t, uint64_t))(v35 + 16);
    swift_retain();
    swift_retain();
    v41(v39, v40, v34);
    return v56;
  }
  uint64_t v12 = *(void *)a2;
  *(void *)a1 = *(void *)a2;
  unint64_t v13 = v12 + (((v9 | v7) & 0xF8 ^ 0x1F8) & ((v9 | v7) + 16));
  swift_retain();
  return v13;
}

uint64_t destroy for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2)
{
  outlined consume of Environment<CGFloat?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8), *(unsigned char *)(a1 + 9));
  unint64_t v4 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<CGFloat?>.Content(*(void *)v4, *(unsigned __int8 *)(v4 + 8), *(unsigned char *)(v4 + 9));
  unint64_t v5 = (v4 + 17) & 0xFFFFFFFFFFFFFFF8;
  outlined consume of Environment<ListPadding>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(void *)(v5 + 32), *(void *)(v5 + 40), *(void *)(v5 + 48), *(void *)(v5 + 56), *(unsigned char *)(v5 + 64), *(unsigned char *)(v5 + 65));
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80) + 66) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = v11;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v8 + v9 + (v13 | 7)) & ~(v13 | 7);
  uint64_t v15 = ~v13;
  unsigned __int8 v16 = (uint64_t *)((v14 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v11 + 84) & 0x80000000) != 0)
  {
    uint64_t v20 = *(void *)(v10 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v11 + 48))(((unint64_t)v16 + v13 + 8) & v15);
    uint64_t v12 = v20;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v17 = *v16;
  if ((unint64_t)*v16 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  uint64_t result = (v17 + 1);
  if (v17 == -1)
  {
LABEL_7:
    uint64_t v21 = v12;
    swift_release();
    swift_release();
    uint64_t v19 = *(uint64_t (**)(unint64_t, uint64_t))(v21 + 8);
    return v19(((unint64_t)v16 + v13 + 8) & v15, v10);
  }
  return result;
}

uint64_t initializeWithCopy for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  *(void *)a1 = v5;
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  uint64_t v45 = a1;
  unint64_t v8 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = *(void *)v9;
  LOBYTE(v5) = *(unsigned char *)(v9 + 9);
  unsigned __int8 v11 = *(unsigned char *)(v9 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v9, v11, v5);
  *(void *)unint64_t v8 = v10;
  *(unsigned char *)(v8 + 8) = v11;
  *(unsigned char *)(v8 + 9) = v5;
  unint64_t v12 = (v8 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v13 = (v9 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v14 = *(void *)v13;
  uint64_t v15 = *(void *)(v13 + 8);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = *(void *)(v13 + 24);
  uint64_t v18 = *(void *)(v13 + 32);
  uint64_t v19 = *(void *)(v13 + 40);
  uint64_t v20 = *(void *)(v13 + 48);
  uint64_t v21 = *(void *)(v13 + 56);
  char v42 = *(unsigned char *)(v13 + 64);
  char v43 = *(unsigned char *)(v13 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v13, v15, v16, v17, v18, v19, v20, v21, v42, v43);
  *(void *)unint64_t v12 = v14;
  *(void *)(v12 + 8) = v15;
  *(void *)(v12 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  *(void *)(v12 + 32) = v18;
  *(void *)(v12 + 40) = v19;
  *(void *)(v12 + 48) = v20;
  *(void *)(v12 + 56) = v21;
  *(unsigned char *)(v12 + 64) = v42;
  *(unsigned char *)(v12 + 65) = v43;
  uint64_t v22 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v23 = v22 + 16;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = (v24 + 66 + v12) & ~v24;
  uint64_t v26 = (v24 + 66 + v13) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v25, v26);
  uint64_t v27 = *(void *)(v23 + 48);
  uint64_t v28 = *(void *)(a3 + 24);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = (v30 | 7) + v27;
  size_t v32 = (void *)((v31 + v25) & ~(v30 | 7));
  uint64_t v33 = (void *)((v31 + v26) & ~(v30 | 7));
  uint64_t v34 = ~v30;
  uint64_t v35 = *(void *)(v29 + 64);
  uint64_t v36 = (uint64_t *)(((unint64_t)v33 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v29 + 84) & 0x80000000) == 0)
  {
    uint64_t v37 = *v36;
    if ((unint64_t)*v36 >= 0xFFFFFFFF) {
      LODWORD(v37) = -1;
    }
    if (v37 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *size_t v32 = *v33;
    int v38 = (void *)(((unint64_t)v32 + 15) & 0xFFFFFFFFFFFFFFF8);
    *int v38 = *v36;
    uint64_t v39 = ((unint64_t)v38 + v30 + 8) & v34;
    uint64_t v40 = *(void (**)(uint64_t, unint64_t, uint64_t))(v29 + 16);
    swift_retain();
    swift_retain();
    v40(v39, ((unint64_t)v36 + v30 + 8) & v34, v28);
    return v45;
  }
  if (!(*(unsigned int (**)(unint64_t))(v29 + 48))(((unint64_t)v36 + v30 + 8) & v34)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v32, v33, ((v30 + 16) & ~v30) + v35);
  return v45;
}

uint64_t assignWithCopy for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)a2;
  char v6 = *(unsigned char *)(a2 + 9);
  unsigned __int8 v7 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)a2, v7, v6);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = v5;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v7;
  *(unsigned char *)(a1 + 9) = v6;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  uint64_t v63 = a1;
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v13 = *(void *)v12;
  LOBYTE(v5) = *(unsigned char *)(v12 + 9);
  unsigned __int8 v14 = *(unsigned char *)(v12 + 8);
  outlined copy of Environment<CGFloat?>.Content(*(void *)v12, v14, v5);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = v13;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v14;
  *(unsigned char *)(v11 + 9) = v5;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)(v18 + 16);
  uint64_t v23 = *(void *)(v18 + 24);
  uint64_t v24 = *(void *)(v18 + 32);
  uint64_t v25 = *(void *)(v18 + 40);
  uint64_t v26 = *(void *)(v18 + 48);
  uint64_t v27 = *(void *)(v18 + 56);
  char v64 = *(unsigned char *)(v18 + 64);
  char v66 = *(unsigned char *)(v18 + 65);
  outlined copy of Environment<ListPadding>.Content(*(void *)v18, v20, v22, v23, v24, v25, v26, v27, v64, v66);
  uint64_t v28 = *(void *)v21;
  uint64_t v29 = *(void *)(v21 + 8);
  uint64_t v30 = *(void *)(v21 + 16);
  uint64_t v31 = *(void *)(v21 + 24);
  uint64_t v32 = *(void *)(v21 + 32);
  uint64_t v33 = *(void *)(v21 + 40);
  uint64_t v34 = *(void *)(v21 + 48);
  uint64_t v35 = *(void *)(v21 + 56);
  char v36 = *(unsigned char *)(v21 + 64);
  char v37 = *(unsigned char *)(v21 + 65);
  *(void *)unint64_t v21 = v19;
  *(void *)(v21 + 8) = v20;
  *(void *)(v21 + 16) = v22;
  *(void *)(v21 + 24) = v23;
  *(void *)(v21 + 32) = v24;
  *(void *)(v21 + 40) = v25;
  *(void *)(v21 + 48) = v26;
  *(void *)(v21 + 56) = v27;
  *(unsigned char *)(v21 + 64) = v64;
  *(unsigned char *)(v21 + 65) = v66;
  outlined consume of Environment<ListPadding>.Content(v28, v29, v30, v31, v32, v33, v34, v35, v36, v37);
  uint64_t v38 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v39 = v38 + 24;
  uint64_t v40 = *(unsigned __int8 *)(v38 + 80);
  uint64_t v41 = (v40 + 66 + v21) & ~v40;
  uint64_t v42 = (v40 + 66 + v18) & ~v40;
  (*(void (**)(uint64_t, uint64_t))(v38 + 24))(v41, v42);
  uint64_t v43 = *(void *)(a3 + 24);
  uint64_t v44 = *(void *)(v43 - 8);
  uint64_t v45 = *(unsigned __int8 *)(v44 + 80);
  uint64_t v46 = (v45 | 7) + *(void *)(v39 + 40);
  char v47 = (void *)((v46 + v41) & ~(v45 | 7));
  uint64_t v48 = (void *)((v46 + v42) & ~(v45 | 7));
  uint64_t v49 = *(unsigned int *)(v44 + 84);
  uint64_t v50 = ~v45;
  size_t v51 = ((v45 + 16) & ~v45) + *(void *)(v44 + 64);
  uint64_t v52 = (void *)(((unint64_t)v47 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v49 & 0x80000000) != 0)
  {
    uint64_t v65 = ((v45 + 16) & ~v45) + *(void *)(v44 + 64);
    uint64_t v56 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v44 + 48);
    int v62 = v56(((unint64_t)v52 + v45 + 8) & ~v45, v49, v43);
    int v53 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v50 = ~v45;
    int v55 = v56(((unint64_t)v53 + v45 + 8) & ~v45, v49, v43);
    size_t v51 = v65;
    if (!v62)
    {
LABEL_5:
      if (!v55)
      {
        *char v47 = *v48;
        swift_retain();
        swift_release();
        *uint64_t v52 = *v53;
        swift_retain();
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v44 + 24))(((unint64_t)v52 + v45 + 8) & v50, ((unint64_t)v53 + v45 + 8) & v50, v43);
        return v63;
      }
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v44 + 8))(((unint64_t)v52 + v45 + 8) & v50, v43);
      goto LABEL_9;
    }
  }
  else
  {
    int v53 = (void *)(((unint64_t)v48 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v54 = *v53;
    if (*v53 >= 0xFFFFFFFFuLL) {
      LODWORD(v54) = -1;
    }
    int v55 = v54 + 1;
    if (*v52 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v55)
  {
    *char v47 = *v48;
    *uint64_t v52 = *v53;
    uint64_t v57 = v50;
    uint64_t v58 = ((unint64_t)v52 + v45 + 8) & v50;
    uint64_t v59 = ((unint64_t)v53 + v45 + 8) & v57;
    uint64_t v60 = *(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16);
    swift_retain();
    swift_retain();
    v60(v58, v59, v43);
    return v63;
  }
LABEL_9:
  memcpy(v47, v48, v51);
  return v63;
}

uint64_t initializeWithTake for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  unint64_t v5 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)v6;
  *(_WORD *)(v5 + 8) = *(_WORD *)(v6 + 8);
  *(void *)unint64_t v5 = v7;
  unint64_t v8 = (v5 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v6 + 17) & 0xFFFFFFFFFFFFFFF8;
  long long v11 = *(_OWORD *)(v9 + 32);
  long long v10 = *(_OWORD *)(v9 + 48);
  long long v12 = *(_OWORD *)(v9 + 16);
  *(_WORD *)(v8 + 64) = *(_WORD *)(v9 + 64);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = v10;
  *(_OWORD *)(v8 + 16) = v12;
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 32;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 66 + v8) & ~v15;
  uint64_t v17 = (v15 + 66 + v9) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 32))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 32);
  uint64_t v19 = *(void *)(a3 + 24);
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(unsigned __int8 *)(v20 + 80);
  uint64_t v22 = (v21 | 7) + v18;
  uint64_t v23 = (char *)((v22 + v16) & ~(v21 | 7));
  uint64_t v24 = (void *)((v22 + v17) & ~(v21 | 7));
  uint64_t v25 = ~v21;
  uint64_t v26 = *(void *)(v20 + 64);
  uint64_t v27 = (uint64_t *)(((unint64_t)v24 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v20 + 84) & 0x80000000) == 0)
  {
    uint64_t v28 = *v27;
    if ((unint64_t)*v27 >= 0xFFFFFFFF) {
      LODWORD(v28) = -1;
    }
    if (v28 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *(void *)uint64_t v23 = *v24;
    unint64_t v29 = (unint64_t)(v23 + 15);
    *(void *)(v29 & 0xFFFFFFFFFFFFFFF8) = *v27;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v20 + 32))((v21 + 8 + (v29 & 0xFFFFFFFFFFFFFFF8)) & v25, ((unint64_t)v27 + v21 + 8) & v25, v19);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v20 + 48))(((unint64_t)v27 + v21 + 8) & v25)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v23, v24, ((v21 + 16) & ~v21) + v26);
  return a1;
}

uint64_t assignWithTake for PlainListBody.CollectionViewBody(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(unsigned char *)(a2 + 8);
  char v7 = *(unsigned char *)(a2 + 9);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 9);
  *(void *)a1 = *(void *)a2;
  uint64_t v10 = *(unsigned __int8 *)(a1 + 8);
  *(unsigned char *)(a1 + 8) = v6;
  *(unsigned char *)(a1 + 9) = v7;
  outlined consume of Environment<CGFloat?>.Content(v8, v10, v9);
  unint64_t v11 = (a1 + 17) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v12 = (a2 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v13 = *(unsigned char *)(v12 + 8);
  char v14 = *(unsigned char *)(v12 + 9);
  uint64_t v15 = *(void *)v11;
  char v16 = *(unsigned char *)(v11 + 9);
  *(void *)unint64_t v11 = *(void *)v12;
  uint64_t v17 = *(unsigned __int8 *)(v11 + 8);
  *(unsigned char *)(v11 + 8) = v13;
  *(unsigned char *)(v11 + 9) = v14;
  outlined consume of Environment<CGFloat?>.Content(v15, v17, v16);
  unint64_t v18 = (v12 + 17) & 0xFFFFFFFFFFFFFFF8;
  char v19 = *(unsigned char *)(v18 + 64);
  char v20 = *(unsigned char *)(v18 + 65);
  unint64_t v21 = (v11 + 17) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v22 = *(void *)v21;
  uint64_t v23 = *(void *)(v21 + 8);
  uint64_t v24 = *(void *)(v21 + 16);
  uint64_t v25 = *(void *)(v21 + 24);
  uint64_t v26 = *(void *)(v21 + 32);
  uint64_t v27 = *(void *)(v21 + 40);
  uint64_t v28 = *(void *)(v21 + 48);
  uint64_t v29 = *(void *)(v21 + 56);
  char v30 = *(unsigned char *)(v21 + 64);
  char v31 = *(unsigned char *)(v21 + 65);
  long long v32 = *(_OWORD *)(v18 + 16);
  long long v33 = *(_OWORD *)(v18 + 32);
  long long v34 = *(_OWORD *)(v18 + 48);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v18;
  *(_OWORD *)(v21 + 16) = v32;
  *(_OWORD *)(v21 + 32) = v33;
  *(_OWORD *)(v21 + 48) = v34;
  *(unsigned char *)(v21 + 64) = v19;
  *(unsigned char *)(v21 + 65) = v20;
  outlined consume of Environment<ListPadding>.Content(v22, v23, v24, v25, v26, v27, v28, v29, v30, v31);
  uint64_t v35 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v36 = v35 + 40;
  uint64_t v37 = *(unsigned __int8 *)(v35 + 80);
  uint64_t v38 = (v37 + 66 + v21) & ~v37;
  uint64_t v39 = (v37 + 66 + v18) & ~v37;
  (*(void (**)(uint64_t, uint64_t))(v35 + 40))(v38, v39);
  uint64_t v40 = *(void *)(a3 + 24);
  uint64_t v41 = *(void *)(v40 - 8);
  uint64_t v42 = *(unsigned __int8 *)(v41 + 80);
  uint64_t v43 = (v42 | 7) + *(void *)(v36 + 24);
  uint64_t v44 = (void *)((v43 + v38) & ~(v42 | 7));
  uint64_t v45 = (void *)((v43 + v39) & ~(v42 | 7));
  uint64_t v46 = *(unsigned int *)(v41 + 84);
  uint64_t v47 = ~v42;
  size_t v48 = ((v42 + 16) & ~v42) + *(void *)(v41 + 64);
  uint64_t v49 = (void *)(((unint64_t)v44 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((v46 & 0x80000000) != 0)
  {
    uint64_t v56 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v41 + 48);
    uint64_t v61 = ((v42 + 16) & ~v42) + *(void *)(*(void *)(v40 - 8) + 64);
    int v57 = v56(((unint64_t)v49 + v42 + 8) & ~v42, v46, v40);
    uint64_t v58 = v56;
    int v60 = v57;
    uint64_t v50 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v47 = ~v42;
    int v52 = v58(((unint64_t)v50 + v42 + 8) & ~v42, v46, v40);
    size_t v48 = v61;
    if (!v60)
    {
LABEL_5:
      if (!v52)
      {
        *uint64_t v44 = *v45;
        swift_release();
        *uint64_t v49 = *v50;
        swift_release();
        (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 40))(((unint64_t)v49 + v42 + 8) & v47, ((unint64_t)v50 + v42 + 8) & v47, v40);
        return a1;
      }
      size_t v53 = v48;
      swift_release();
      swift_release();
      (*(void (**)(unint64_t, uint64_t))(v41 + 8))(((unint64_t)v49 + v42 + 8) & v47, v40);
      uint64_t v54 = v44;
      int v55 = v45;
      size_t v48 = v53;
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v50 = (void *)(((unint64_t)v45 + 15) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v51 = *v50;
    if (*v50 >= 0xFFFFFFFFuLL) {
      LODWORD(v51) = -1;
    }
    int v52 = v51 + 1;
    if (*v49 > 0xFFFFFFFEuLL) {
      goto LABEL_5;
    }
  }
  if (!v52)
  {
    *uint64_t v44 = *v45;
    *uint64_t v49 = *v50;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v41 + 32))(((unint64_t)v49 + v42 + 8) & v47, ((unint64_t)v50 + v42 + 8) & v47, v40);
    return a1;
  }
  uint64_t v54 = v44;
  int v55 = v45;
LABEL_10:
  memcpy(v54, v55, v48);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlainListBody.CollectionViewBody(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7;
  unsigned int v9 = *(_DWORD *)(v7 + 84);
  if (v9 <= 0x7FFFFFFF) {
    int v10 = 0x7FFFFFFF;
  }
  else {
    int v10 = *(_DWORD *)(v7 + 84);
  }
  unsigned int v11 = v10 - 1;
  uint64_t v12 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v13 = *(void *)(*(void *)(v4 - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= v11) {
    unsigned int v15 = v11;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v5 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v16 = v14 | 7;
  int v17 = a2 - v15;
  if (a2 <= v15) {
    goto LABEL_28;
  }
  uint64_t v18 = ((v14 + 16) & ~v14)
      + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
      + ((v16 + v13 + ((v12 + 98) & ~v12)) & ~v16);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v22 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v22))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v22 < 2)
    {
LABEL_28:
      unint64_t v26 = ((((((unint64_t)a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v12 + 66) & ~v12;
      if (v6 >= v11)
      {
        char v30 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v5 + 48);
        return v30(v26, v6, v4);
      }
      else
      {
        uint64_t v27 = (unint64_t *)((((v26 + v13 + v16) & ~v16) + 15) & 0xFFFFFFFFFFFFFFF8);
        if ((v9 & 0x80000000) != 0)
        {
          unsigned int v29 = (*(uint64_t (**)(unint64_t))(v8 + 48))(((unint64_t)v27 + v14 + 8) & ~v14);
        }
        else
        {
          unint64_t v28 = *v27;
          if (v28 >= 0xFFFFFFFF) {
            LODWORD(v28) = -1;
          }
          unsigned int v29 = v28 + 1;
        }
        if (v29 >= 2) {
          return v29 - 1;
        }
        else {
          return 0;
        }
      }
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_28;
  }
LABEL_18:
  int v23 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v23 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v24 = ((v14 + 16) & ~v14)
    }
          + *(_DWORD *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)
          + ((v16 + v13 + ((v12 + 98) & ~v12)) & ~v16);
    else {
      int v24 = 4;
    }
    switch(v24)
    {
      case 2:
        int v25 = *a1;
        break;
      case 3:
        int v25 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v25 = *(_DWORD *)a1;
        break;
      default:
        int v25 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v25 = 0;
  }
  return v15 + (v25 | v23) + 1;
}

void storeEnumTagSinglePayload for PlainListBody.CollectionViewBody(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  if (v9 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  unsigned int v14 = v13 - 1;
  if (v7 <= v13 - 1) {
    unsigned int v15 = v13 - 1;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v16 = v12 | 7;
  size_t v17 = ((v12 + 16) & ~v12) + *(void *)(v8 + 64);
  size_t v18 = (((v12 | 7) + v11 + ((v10 + 98) & ~v10)) & ~(v12 | 7)) + v17;
  BOOL v19 = a3 >= v15;
  unsigned int v20 = a3 - v15;
  if (v20 != 0 && v19)
  {
    if (v18 <= 3)
    {
      unsigned int v25 = ((v20 + ~(-1 << (8 * v18))) >> (8 * v18)) + 1;
      if (HIWORD(v25))
      {
        int v21 = 4;
      }
      else if (v25 >= 0x100)
      {
        int v21 = 2;
      }
      else
      {
        int v21 = v25 > 1;
      }
    }
    else
    {
      int v21 = 1;
    }
  }
  else
  {
    int v21 = 0;
  }
  if (v15 < a2)
  {
    unsigned int v22 = ~v15 + a2;
    if (v18 < 4)
    {
      int v23 = (v22 >> (8 * v18)) + 1;
      if (v18)
      {
        int v26 = v22 & ~(-1 << (8 * v18));
        bzero(a1, v18);
        if (v18 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v18 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v18);
      *(_DWORD *)a1 = v22;
      int v23 = 1;
    }
    switch(v21)
    {
      case 1:
        a1[v18] = v23;
        return;
      case 2:
        *(_WORD *)&a1[v18] = v23;
        return;
      case 3:
        goto LABEL_72;
      case 4:
        *(_DWORD *)&a1[v18] = v23;
        return;
      default:
        return;
    }
  }
  uint64_t v24 = ~v16;
  switch(v21)
  {
    case 1:
      a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v18] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_72:
      __break(1u);
      JUMPOUT(0x187C7459CLL);
    case 4:
      *(_DWORD *)&a1[v18] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        unint64_t v27 = (((((unint64_t)(a1 + 17) & 0xFFFFFFFFFFFFFFF8) + 17) & 0xFFFFFFFFFFFFFFF8) + v10 + 66) & ~v10;
        if (v7 >= v14)
        {
          long long v32 = *(void (**)(unint64_t))(v6 + 56);
          v32(v27);
        }
        else
        {
          unint64_t v28 = (v27 + v11 + v16) & v24;
          if (v14 >= a2)
          {
            if (a2 + 1 <= v13)
            {
              if (a2 != -1)
              {
                uint64_t v35 = (void *)((v28 + 15) & 0xFFFFFFFFFFFFFFF8);
                if ((v9 & 0x80000000) != 0)
                {
                  uint64_t v37 = *(void (**)(unint64_t, uint64_t))(v8 + 56);
                  uint64_t v38 = a2 + 1;
                  v37(((unint64_t)v35 + v12 + 8) & ~v12, v38);
                }
                else
                {
                  if (((a2 + 1) & 0x80000000) != 0) {
                    uint64_t v36 = a2 - 0x7FFFFFFF;
                  }
                  else {
                    uint64_t v36 = a2;
                  }
                  *uint64_t v35 = v36;
                }
              }
            }
            else
            {
              if (v17 <= 3) {
                int v33 = ~(-1 << (8 * v17));
              }
              else {
                int v33 = -1;
              }
              if (v17)
              {
                int v30 = v33 & (a2 - v13);
                if (v17 <= 3) {
                  int v34 = v17;
                }
                else {
                  int v34 = 4;
                }
                bzero((void *)((v27 + v11 + v16) & v24), v17);
                switch(v34)
                {
                  case 2:
LABEL_64:
                    *(_WORD *)unint64_t v28 = v30;
                    break;
                  case 3:
LABEL_65:
                    *(_WORD *)unint64_t v28 = v30;
                    *(unsigned char *)(v28 + 2) = BYTE2(v30);
                    break;
                  case 4:
LABEL_66:
                    *(_DWORD *)unint64_t v28 = v30;
                    break;
                  default:
LABEL_52:
                    *(unsigned char *)unint64_t v28 = v30;
                    break;
                }
              }
            }
          }
          else
          {
            if (v17 <= 3) {
              int v29 = ~(-1 << (8 * v17));
            }
            else {
              int v29 = -1;
            }
            if (v17)
            {
              int v30 = v29 & (a2 - v13);
              if (v17 <= 3) {
                int v31 = v17;
              }
              else {
                int v31 = 4;
              }
              bzero((void *)((v27 + v11 + v16) & v24), v17);
              switch(v31)
              {
                case 2:
                  goto LABEL_64;
                case 3:
                  goto LABEL_65;
                case 4:
                  goto LABEL_66;
                default:
                  goto LABEL_52;
              }
            }
          }
        }
      }
      return;
  }
}

void *type metadata accessor for CollectionViewPlainListsEnabled()
{
  return &unk_1ED45AEA8;
}

uint64_t sub_187C745F4()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for PlainListBody<A, B>.TableViewRoot(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in PlainListBody<A, B>.TableViewRoot()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t associated type witness table accessor for View.Body : View in PlainListBody<A, B>.CollectionViewBody()
{
  return associated type witness table accessor for View.Body : View in SidebarListBody<A, B>();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance CollectionViewPlainListsEnabled()
{
  PropertyList.subscript.getter();
  if (v2 == 1 && (static InterfaceIdiomPredicate.evaluate(inputs:)() & 1) == 0)
  {
    lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
    char v0 = static UserDefaultKeyedFeature.isEnabled.getter() ^ 1;
  }
  else
  {
    char v0 = 0;
  }
  return v0 & 1;
}

unint64_t lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature;
  if (!lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature);
  }
  return result;
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>)
  {
    type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>();
    type metadata accessor for ViewInputFlagModifier<ListConcatenatesFooters>();
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>(&lazy protocol witness table cache variable for type InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>> and conformance InvertedViewInputPredicate<A>, (void (*)(uint64_t))type metadata accessor for InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>);
    }
  }
}

void type metadata accessor for ViewInputFlagModifier<ListConcatenatesFooters>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ListConcatenatesFooters>)
  {
    lazy protocol witness table accessor for type ListConcatenatesFooters and conformance ListConcatenatesFooters();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ListConcatenatesFooters>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<VisionInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<InterfaceIdiomPredicate<VisionInterfaceIdiom>>, ViewInputFlagModifier<ListConcatenatesFooters>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

ValueMetadata *type metadata accessor for DisableCollectionViewPlainListsFeature()
{
  return &type metadata for DisableCollectionViewPlainListsFeature;
}

uint64_t sub_187C74B2C()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_187C74BF4()
{
  return &protocol witness table for TableViewListCore<A, B>;
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance DisableCollectionViewPlainListsFeature()
{
  return 0xD000000000000037;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.getter in conformance DisableCollectionViewPlainListsFeature()
{
  return static DisableCollectionViewPlainListsFeature.cachedValue;
}

uint64_t protocol witness for static UserDefaultKeyedFeature.cachedValue.setter in conformance DisableCollectionViewPlainListsFeature(char a1)
{
  uint64_t result = swift_beginAccess();
  static DisableCollectionViewPlainListsFeature.cacheduint64_t Value = a1;
  return result;
}

uint64_t (*protocol witness for static UserDefaultKeyedFeature.cachedValue.modify in conformance DisableCollectionViewPlainListsFeature())()
{
  return _defaultSwiftUIActivityEnvironmentLoggingEnabled.modify;
}

uint64_t protocol witness for static Feature.isEnabled.getter in conformance DisableCollectionViewPlainListsFeature()
{
  lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();

  return static UserDefaultKeyedFeature.isEnabled.getter();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance DisableCollectionViewPlainListsFeature()
{
  lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DisableCollectionViewPlainListsFeature()
{
  return PropertyList.subscript.setter();
}

uint64_t protocol witness for static PropertyKey.defaultValue.getter in conformance DisableCollectionViewPlainListsFeature@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  unint64_t v4 = lazy protocol witness table accessor for type DisableCollectionViewPlainListsFeature and conformance DisableCollectionViewPlainListsFeature();
  uint64_t result = (*(uint64_t (**)(uint64_t, unint64_t))(v4 + 16))(a1, v4);
  *a2 = result & 1;
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in DisableCollectionViewPlainListsFeature()
{
  return &protocol witness table for DisableCollectionViewPlainListsFeature;
}

uint64_t SharePreview.init(_:image:icon:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X6>, uint64_t a4@<X7>, uint64_t a5@<X8>)
{
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v8 = type metadata accessor for SharePreview();
  uint64_t v9 = a5 + *(int *)(v8 + 56);
  uint64_t v10 = *(void *)(a3 - 8);
  unsigned int v20 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v10 + 56);
  v20(v9, 1, 1, a3);
  uint64_t v11 = a5 + *(int *)(v8 + 60);
  uint64_t v12 = *(void *)(a4 - 8);
  unsigned int v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(v11, 1, 1, a4);
  *(void *)(a5 + 32) = Text.init(_:tableName:bundle:comment:)();
  *(void *)(a5 + 40) = v14;
  *(void *)(a5 + 48) = v15 & 1;
  *(void *)(a5 + 56) = v16;
  uint64_t v17 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v9, v17);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v10 + 32))(v9, a1, a3);
  v20(v9, 0, 1, a3);
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v11, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v11, a2, a4);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v13)(v11, 0, 1, a4);
}

uint64_t type metadata accessor for SharePreview()
{
  return swift_getGenericMetadata();
}

uint64_t SharePreview.init<A>(_:image:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v46 = a3;
  uint64_t v12 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v37 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a7 + 32) = 0u;
  *(_OWORD *)(a7 + 48) = 0u;
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  uint64_t v47 = v15;
  uint64_t v48 = v16;
  uint64_t v49 = v17;
  uint64_t v50 = v18;
  uint64_t v19 = type metadata accessor for SharePreview();
  uint64_t v37 = a7 + *(int *)(v19 + 56);
  uint64_t v20 = *(void *)(a4 - 8);
  uint64_t v39 = *(void (**)(void))(v20 + 56);
  uint64_t v40 = v20 + 56;
  v39();
  uint64_t v21 = a7 + *(int *)(v19 + 60);
  uint64_t v38 = a5;
  uint64_t v22 = *(void *)(a5 - 8);
  uint64_t v41 = v21;
  uint64_t v42 = v22;
  int v23 = *(void (**)(void))(v22 + 56);
  uint64_t v43 = v22 + 56;
  uint64_t v44 = v23;
  v23();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  uint64_t v24 = Text.init<A>(_:)();
  uint64_t v26 = v25;
  uint64_t v28 = v27;
  uint64_t v30 = v29 & 1;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
  outlined consume of Text?(*(void *)(a7 + 32), *(void *)(a7 + 40), *(void *)(a7 + 48), *(void *)(a7 + 56));
  *(void *)(a7 + 32) = v24;
  *(void *)(a7 + 40) = v26;
  *(void *)(a7 + 48) = v30;
  *(void *)(a7 + 56) = v28;
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v32 = v37;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v37, v31);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 32))(v32, v45, a4);
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v39)(v32, 0, 1, a4);
  uint64_t v33 = v38;
  uint64_t v34 = type metadata accessor for Optional();
  uint64_t v35 = v41;
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v34 - 8) + 8))(v41, v34);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v42 + 32))(v35, v46, v33);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v44)(v35, 0, 1, v33);
}

uint64_t SharePreview.init(_:image:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  *(_OWORD *)a9 = 0u;
  *(_OWORD *)(a9 + 16) = 0u;
  uint64_t v12 = type metadata accessor for SharePreview();
  uint64_t v13 = a9 + *(int *)(v12 + 56);
  uint64_t v14 = *(void *)(a7 - 8);
  uint64_t v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v21(v13, 1, 1, a7);
  uint64_t v15 = a9 + *(int *)(v12 + 60);
  uint64_t v16 = *(void *)(a8 - 8);
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v17(v15, 1, 1, a8);
  *(void *)(a9 + 32) = a1;
  *(void *)(a9 + 40) = a2;
  *(void *)(a9 + 48) = a3 & 1;
  *(void *)(a9 + 56) = a4;
  uint64_t v18 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v13, v18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v13, a5, a7);
  v21(v13, 0, 1, a7);
  uint64_t v19 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(v15, v19);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, a6, a8);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v17)(v15, 0, 1, a8);
}

uint64_t SharePreview<>.init(_:icon:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(unsigned char *)(a3 + 64) = 1;
  uint64_t v5 = a3 + *(int *)(type metadata accessor for SharePreview() + 60);
  uint64_t v6 = *(void *)(a2 - 8);
  unsigned int v7 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);
  v7(v5, 1, 1, a2);
  *(void *)(a3 + 32) = Text.init(_:tableName:bundle:comment:)();
  *(void *)(a3 + 40) = v8;
  *(void *)(a3 + 48) = v9 & 1;
  *(void *)(a3 + 56) = v10;
  uint64_t v11 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v5, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v5, a1, a2);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v7)(v5, 0, 1, a2);
}

uint64_t SharePreview<>.init<A>(_:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v29 = a2;
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a6 + 32) = 0u;
  *(_OWORD *)(a6 + 48) = 0u;
  *(_OWORD *)a6 = 0u;
  *(_OWORD *)(a6 + 16) = 0u;
  *(unsigned char *)(a6 + 64) = 1;
  uint64_t v30 = MEMORY[0x1E4FBC248];
  uint64_t v31 = v13;
  uint64_t v32 = MEMORY[0x1E4F24970];
  uint64_t v33 = v14;
  uint64_t v15 = a6 + *(int *)(type metadata accessor for SharePreview() + 60);
  uint64_t v16 = *(void *)(a3 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v16 + 56);
  v28(v15, 1, 1, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, a1, a4);
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v26 = v18;
  uint64_t v27 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21 & 1;
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
  outlined consume of Text?(*(void *)(a6 + 32), *(void *)(a6 + 40), *(void *)(a6 + 48), *(void *)(a6 + 56));
  *(void *)(a6 + 32) = v27;
  *(void *)(a6 + 40) = v20;
  uint64_t v23 = v26;
  *(void *)(a6 + 48) = v22;
  *(void *)(a6 + 56) = v23;
  uint64_t v24 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v15, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32))(v15, v29, a3);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v28)(v15, 0, 1, a3);
}

uint64_t SharePreview<>.init(_:icon:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  *(unsigned char *)(a7 + 64) = 1;
  uint64_t v13 = a7 + *(int *)(type metadata accessor for SharePreview() + 60);
  uint64_t v14 = *(void *)(a6 - 8);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  v15(v13, 1, 1, a6);
  *(void *)(a7 + 32) = a1;
  *(void *)(a7 + 40) = a2;
  *(void *)(a7 + 48) = a3 & 1;
  *(void *)(a7 + 56) = a4;
  uint64_t v16 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(v13, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v13, a5, a6);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v15)(v13, 0, 1, a6);
}

uint64_t SharePreview<>.init(_:image:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, uint64_t a3@<X8>)
{
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  uint64_t v5 = type metadata accessor for SharePreview();
  uint64_t v6 = a3 + *(int *)(v5 + 56);
  uint64_t v7 = *(void *)(a2 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  v8(v6, 1, 1, a2);
  *(unsigned char *)(a3 + *(int *)(v5 + 60)) = 1;
  *(void *)(a3 + 32) = Text.init(_:tableName:bundle:comment:)();
  *(void *)(a3 + 40) = v9;
  *(void *)(a3 + 48) = v10 & 1;
  *(void *)(a3 + 56) = v11;
  uint64_t v12 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v6, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v6, a1, a2);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v8)(v6, 0, 1, a2);
}

uint64_t SharePreview<>.init<A>(_:image:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v29 = a1;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  uint64_t v32 = v11;
  uint64_t v33 = MEMORY[0x1E4FBC248];
  uint64_t v34 = v12;
  uint64_t v35 = MEMORY[0x1E4F24970];
  uint64_t v13 = type metadata accessor for SharePreview();
  uint64_t v14 = a5 + *(int *)(v13 + 56);
  uint64_t v15 = *(void *)(a3 - 8);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
  v30(v14, 1, 1, a3);
  *(unsigned char *)(a5 + *(int *)(v13 + 60)) = 1;
  uint64_t v16 = v29;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v29, a4);
  uint64_t v17 = Text.init<A>(_:)();
  uint64_t v27 = v18;
  uint64_t v28 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21 & 1;
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v16, a4);
  outlined consume of Text?(*(void *)(a5 + 32), *(void *)(a5 + 40), *(void *)(a5 + 48), *(void *)(a5 + 56));
  *(void *)(a5 + 32) = v28;
  *(void *)(a5 + 40) = v20;
  uint64_t v23 = v27;
  *(void *)(a5 + 48) = v22;
  *(void *)(a5 + 56) = v23;
  uint64_t v24 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v24 - 8) + 8))(v14, v24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 32))(v14, v31, a3);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v30)(v14, 0, 1, a3);
}

uint64_t SharePreview<>.init(_:image:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  *(_OWORD *)a7 = 0u;
  *(_OWORD *)(a7 + 16) = 0u;
  uint64_t v11 = type metadata accessor for SharePreview();
  uint64_t v12 = a7 + *(int *)(v11 + 56);
  uint64_t v13 = *(void *)(a6 - 8);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
  v14(v12, 1, 1, a6);
  *(unsigned char *)(a7 + *(int *)(v11 + 60)) = 1;
  *(void *)(a7 + 32) = a1;
  *(void *)(a7 + 40) = a2;
  *(void *)(a7 + 48) = a3 & 1;
  *(void *)(a7 + 56) = a4;
  uint64_t v15 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(v12, v15);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 32))(v12, a5, a6);
  return ((uint64_t (*)(uint64_t, void, uint64_t, uint64_t))v14)(v12, 0, 1, a6);
}

uint64_t SharePreview<>.init(_:)@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_WORD *)(a1 + 64) = 257;
  uint64_t result = Text.init(_:tableName:bundle:comment:)();
  *(void *)(a1 + 32) = result;
  *(void *)(a1 + 40) = v3;
  *(void *)(a1 + 48) = v4 & 1;
  *(void *)(a1 + 56) = v5;
  return result;
}

uint64_t SharePreview<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_WORD *)(a3 + 64) = 257;
  (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))((char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  uint64_t v12 = v11;
  uint64_t v14 = v13 & 1;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
  uint64_t result = outlined consume of Text?(0, 0, 0, 0);
  *(void *)(a3 + 32) = v8;
  *(void *)(a3 + 40) = v10;
  *(void *)(a3 + 48) = v14;
  *(void *)(a3 + 56) = v12;
  return result;
}

double SharePreview<>.init(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_WORD *)(a5 + 64) = 257;
  *(void *)(a5 + 32) = a1;
  *(void *)(a5 + 40) = a2;
  *(void *)(a5 + 48) = a3 & 1;
  *(void *)(a5 + 56) = a4;
  return result;
}

_OWORD *SharePreview<>.init(metadata:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_WORD *)(a2 + 64) = 257;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  _bridgeAnythingToObjectiveC<A>(_:)();
  _AssertIsLPLinkMetadata();
  swift_unknownObjectRelease();
  outlined destroy of Any?(a2);

  return outlined init with take of Any(a1, (_OWORD *)a2);
}

uint64_t type metadata completion function for SharePreview()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for Optional();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for SharePreview(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v5 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v9 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v10 = *(void *)(v6 - 8);
  uint64_t v11 = *(_DWORD *)(v10 + 80);
  if (*(_DWORD *)(v10 + 84)) {
    uint64_t v12 = *(void *)(*(void *)(v6 - 8) + 64);
  }
  else {
    uint64_t v12 = *(void *)(*(void *)(v6 - 8) + 64) + 1;
  }
  if ((v11 | v8) > 7
    || ((*(_DWORD *)(v10 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000) != 0
    || v12 + ((v9 + v11 + ((v8 + 64) & ~v8)) & ~v11) > 0x18)
  {
    uint64_t v15 = *a2;
    *(void *)a1 = *a2;
    uint64_t v16 = v15 + (((v11 | v8) & 0xF8 ^ 0x1F8) & ((v11 | v8) + 16));
    swift_retain();
  }
  else
  {
    unint64_t v17 = a2[3];
    uint64_t v35 = v5;
    uint64_t v36 = v6;
    size_t v33 = v12;
    size_t __n = v9;
    if (v17 < 0xFFFFFFFF)
    {
      long long v18 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v18;
    }
    else
    {
      *(void *)(a1 + 24) = v17;
      (**(void (***)(uint64_t, uint64_t *))(v17 - 8))(a1, a2);
    }
    uint64_t v19 = ~v8;
    unint64_t v20 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v21 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v37 = a1;
    if (*(void *)(v21 + 24) < 0xFFFFFFFFuLL)
    {
      long long v25 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)unint64_t v20 = *(_OWORD *)v21;
      *(_OWORD *)(v20 + 16) = v25;
    }
    else
    {
      uint64_t v22 = *(void *)v21;
      uint64_t v23 = *(void *)(v21 + 8);
      char v24 = *(unsigned char *)(v21 + 16);
      outlined copy of Text.Storage(*(void *)v21, v23, v24);
      *(void *)unint64_t v20 = v22;
      *(void *)(v20 + 8) = v23;
      *(unsigned char *)(v20 + 16) = v24;
      *(void *)(v20 + 24) = *(void *)(v21 + 24);
      swift_bridgeObjectRetain();
    }
    uint64_t v26 = ~v11;
    uint64_t v27 = (void *)((v20 + v8 + 32) & v19);
    uint64_t v28 = (v21 + v8 + 32) & v19;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v28, 1, v35))
    {
      uint64_t v29 = (const void *)((v21 + v8 + 32) & v19);
      size_t v30 = __n;
      memcpy(v27, v29, __n);
      uint64_t v31 = v36;
    }
    else
    {
      (*(void (**)(void *, unint64_t, uint64_t))(v7 + 16))(v27, (v21 + v8 + 32) & v19, v35);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v27, 0, 1, v35);
      uint64_t v31 = v36;
      size_t v30 = __n;
    }
    if ((*(unsigned int (**)(size_t, uint64_t, uint64_t))(v10 + 48))((v28 + v30 + v11) & v26, 1, v31))
    {
      memcpy((void *)(((unint64_t)v27 + v30 + v11) & v26), (const void *)((v28 + v30 + v11) & v26), v33);
    }
    else
    {
      (*(void (**)(unint64_t, size_t, uint64_t))(v10 + 16))(((unint64_t)v27 + v30 + v11) & v26, (v28 + v30 + v11) & v26, v31);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v10 + 56))(((unint64_t)v27 + v30 + v11) & v26, 0, 1, v31);
    }
    return v37;
  }
  return v16;
}

uint64_t destroy for SharePreview(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  unint64_t v4 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v4 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unint64_t v7 = (v4 + *(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v7, 1, v5)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v7, v5);
  }
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v13 = *(void *)(v8 - 8);
  unint64_t v9 = *(void *)(v6 + 64) + v7;
  if (!*(_DWORD *)(v6 + 84)) {
    ++v9;
  }
  unint64_t v10 = (v9 + *(unsigned __int8 *)(v13 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v10, 1, v8);
  if (!result)
  {
    uint64_t v12 = *(uint64_t (**)(unint64_t, uint64_t))(v13 + 8);
    return v12(v10, v8);
  }
  return result;
}

uint64_t initializeWithCopy for SharePreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 < 0xFFFFFFFF)
  {
    long long v7 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v7;
  }
  else
  {
    *(void *)(a1 + 24) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
  }
  unint64_t v8 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v9 + 24) < 0xFFFFFFFFuLL)
  {
    long long v13 = *(_OWORD *)(v9 + 16);
    *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
    *(_OWORD *)(v8 + 16) = v13;
  }
  else
  {
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(void *)(v9 + 8);
    char v12 = *(unsigned char *)(v9 + 16);
    outlined copy of Text.Storage(*(void *)v9, v11, v12);
    *(void *)unint64_t v8 = v10;
    *(void *)(v8 + 8) = v11;
    *(unsigned char *)(v8 + 16) = v12;
    *(void *)(v8 + 24) = *(void *)(v9 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  unint64_t v17 = (void *)((v8 + v16 + 32) & ~v16);
  long long v18 = (const void *)((v9 + v16 + 32) & ~v16);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v15 + 48))(v18, 1, v14))
  {
    int v19 = *(_DWORD *)(v15 + 84);
    size_t v20 = *(void *)(v15 + 64);
    if (v19) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v20 + 1;
    }
    memcpy(v17, v18, v21);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v15 + 16))(v17, v18, v14);
    uint64_t v23 = *(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56);
    uint64_t v22 = v15 + 56;
    v23(v17, 0, 1, v14);
    int v19 = *(_DWORD *)(v22 + 28);
    size_t v20 = *(void *)(v22 + 8);
  }
  if (v19) {
    size_t v24 = v20;
  }
  else {
    size_t v24 = v20 + 1;
  }
  uint64_t v25 = *(void *)(a3 + 24);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v26 + 80);
  uint64_t v28 = v24 + v27;
  uint64_t v29 = (void *)(((unint64_t)v17 + v28) & ~v27);
  size_t v30 = (const void *)(((unint64_t)v18 + v28) & ~v27);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v26 + 48))(v30, 1, v25))
  {
    if (*(_DWORD *)(v26 + 84)) {
      size_t v31 = *(void *)(v26 + 64);
    }
    else {
      size_t v31 = *(void *)(v26 + 64) + 1;
    }
    memcpy(v29, v30, v31);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v29, v30, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v29, 0, 1, v25);
  }
  return a1;
}

uint64_t assignWithCopy for SharePreview(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      *(void *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      goto LABEL_8;
    }
  }
  else
  {
    if (v6 >= 0xFFFFFFFF)
    {
      __swift_assign_boxed_opaque_existential_0((uint64_t *)a1, (uint64_t *)a2);
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
LABEL_8:
  unint64_t v8 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = *(void *)(v9 + 24);
  if (*(void *)(v8 + 24) < 0xFFFFFFFFuLL)
  {
    if (v10 >= 0xFFFFFFFF)
    {
      uint64_t v17 = *(void *)v9;
      uint64_t v18 = *(void *)(v9 + 8);
      char v19 = *(unsigned char *)(v9 + 16);
      outlined copy of Text.Storage(*(void *)v9, v18, v19);
      *(void *)unint64_t v8 = v17;
      *(void *)(v8 + 8) = v18;
      *(unsigned char *)(v8 + 16) = v19;
      *(void *)(v8 + 24) = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
  }
  else
  {
    if (v10 >= 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)v9;
      uint64_t v12 = *(void *)(v9 + 8);
      char v13 = *(unsigned char *)(v9 + 16);
      outlined copy of Text.Storage(*(void *)v9, v12, v13);
      uint64_t v14 = *(void *)v8;
      uint64_t v15 = *(void *)(v8 + 8);
      char v16 = *(unsigned char *)(v8 + 16);
      *(void *)unint64_t v8 = v11;
      *(void *)(v8 + 8) = v12;
      *(unsigned char *)(v8 + 16) = v13;
      outlined consume of Text.Storage(v14, v15, v16);
      *(void *)(v8 + 24) = *(void *)(v9 + 24);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      goto LABEL_15;
    }
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  long long v20 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + 16) = v20;
LABEL_15:
  uint64_t v21 = *(void *)(a3 + 16);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(unsigned __int8 *)(v22 + 80);
  size_t v24 = (void *)((v8 + v23 + 32) & ~v23);
  uint64_t v25 = (void *)((v9 + v23 + 32) & ~v23);
  uint64_t v26 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v22 + 48);
  int v27 = v26(v24, 1, v21);
  int v28 = v26(v25, 1, v21);
  if (v27)
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 16))(v24, v25, v21);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v24, 0, 1, v21);
      goto LABEL_26;
    }
    int v29 = *(_DWORD *)(v22 + 84);
    size_t v30 = *(void *)(v22 + 64);
  }
  else
  {
    if (!v28)
    {
      (*(void (**)(void *, void *, uint64_t))(v22 + 24))(v24, v25, v21);
      goto LABEL_26;
    }
    (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
    int v29 = *(_DWORD *)(v22 + 84);
    size_t v30 = *(void *)(v22 + 64);
  }
  if (v29) {
    size_t v31 = v30;
  }
  else {
    size_t v31 = v30 + 1;
  }
  memcpy(v24, v25, v31);
LABEL_26:
  uint64_t v32 = *(void *)(v22 + 64);
  if (!*(_DWORD *)(v22 + 84)) {
    ++v32;
  }
  uint64_t v33 = *(void *)(a3 + 24);
  uint64_t v34 = *(void *)(v33 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v36 = v32 + v35;
  uint64_t v37 = (void *)(((unint64_t)v24 + v36) & ~v35);
  uint64_t v38 = (void *)(((unint64_t)v25 + v36) & ~v35);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v34 + 48);
  int v40 = v39(v37, 1, v33);
  int v41 = v39(v38, 1, v33);
  if (v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 16))(v37, v38, v33);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v34 + 56))(v37, 0, 1, v33);
      return a1;
    }
    int v42 = *(_DWORD *)(v34 + 84);
    size_t v43 = *(void *)(v34 + 64);
  }
  else
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v34 + 24))(v37, v38, v33);
      return a1;
    }
    uint64_t v45 = *(void (**)(void *, uint64_t))(v34 + 8);
    uint64_t v44 = v34 + 8;
    v45(v37, v33);
    int v42 = *(_DWORD *)(v44 + 76);
    size_t v43 = *(void *)(v44 + 56);
  }
  if (v42) {
    size_t v46 = v43;
  }
  else {
    size_t v46 = v43 + 1;
  }
  memcpy(v37, v38, v46);
  return a1;
}

_OWORD *initializeWithTake for SharePreview(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  unint64_t v6 = (_OWORD *)(((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v7 = (_OWORD *)(((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8);
  long long v8 = v7[1];
  *unint64_t v6 = *v7;
  v6[1] = v8;
  uint64_t v9 = *(void *)(a3 + 16);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (void *)(((unint64_t)v6 + v11 + 32) & ~v11);
  char v13 = (const void *)(((unint64_t)v7 + v11 + 32) & ~v11);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v13, 1, v9))
  {
    int v14 = *(_DWORD *)(v10 + 84);
    size_t v15 = *(void *)(v10 + 64);
    if (v14) {
      size_t v16 = v15;
    }
    else {
      size_t v16 = v15 + 1;
    }
    memcpy(v12, v13, v16);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v12, v13, v9);
    uint64_t v18 = *(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56);
    uint64_t v17 = v10 + 56;
    v18(v12, 0, 1, v9);
    int v14 = *(_DWORD *)(v17 + 28);
    size_t v15 = *(void *)(v17 + 8);
  }
  if (v14) {
    size_t v19 = v15;
  }
  else {
    size_t v19 = v15 + 1;
  }
  uint64_t v20 = *(void *)(a3 + 24);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v23 = v19 + v22;
  size_t v24 = (void *)(((unint64_t)v12 + v23) & ~v22);
  uint64_t v25 = (const void *)(((unint64_t)v13 + v23) & ~v22);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v21 + 48))(v25, 1, v20))
  {
    if (*(_DWORD *)(v21 + 84)) {
      size_t v26 = *(void *)(v21 + 64);
    }
    else {
      size_t v26 = *(void *)(v21 + 64) + 1;
    }
    memcpy(v24, v25, v26);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v21 + 32))(v24, v25, v20);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v24, 0, 1, v20);
  }
  return a1;
}

uint64_t assignWithTake for SharePreview(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL) {
    __swift_destroy_boxed_opaque_existential_1(a1);
  }
  long long v6 = a2[1];
  *(_OWORD *)a1 = *a2;
  *(_OWORD *)(a1 + 16) = v6;
  unint64_t v7 = (a1 + 39) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = ((unint64_t)a2 + 39) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v7 + 24) >= 0xFFFFFFFFuLL)
  {
    if (*(void *)(v8 + 24) >= 0xFFFFFFFFuLL)
    {
      char v9 = *(unsigned char *)(v8 + 16);
      uint64_t v10 = *(void *)v7;
      uint64_t v11 = *(void *)(v7 + 8);
      char v12 = *(unsigned char *)(v7 + 16);
      *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
      *(unsigned char *)(v7 + 16) = v9;
      outlined consume of Text.Storage(v10, v11, v12);
      *(void *)(v7 + 24) = *(void *)(v8 + 24);
      swift_bridgeObjectRelease();
      goto LABEL_8;
    }
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  long long v13 = *(_OWORD *)(v8 + 16);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  *(_OWORD *)(v7 + 16) = v13;
LABEL_8:
  uint64_t v14 = *(void *)(a3 + 16);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v8 + v16;
  uint64_t v18 = (void *)((v7 + v16 + 32) & ~v16);
  size_t v19 = (void *)((v17 + 32) & ~v16);
  uint64_t v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v15 + 48);
  int v21 = v20(v18, 1, v14);
  int v22 = v20(v19, 1, v14);
  if (v21)
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 32))(v18, v19, v14);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_19;
    }
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v22)
    {
      (*(void (**)(void *, void *, uint64_t))(v15 + 40))(v18, v19, v14);
      goto LABEL_19;
    }
    (*(void (**)(void *, uint64_t))(v15 + 8))(v18, v14);
    int v23 = *(_DWORD *)(v15 + 84);
    size_t v24 = *(void *)(v15 + 64);
  }
  if (v23) {
    size_t v25 = v24;
  }
  else {
    size_t v25 = v24 + 1;
  }
  memcpy(v18, v19, v25);
LABEL_19:
  uint64_t v26 = *(void *)(v15 + 64);
  if (!*(_DWORD *)(v15 + 84)) {
    ++v26;
  }
  uint64_t v27 = *(void *)(a3 + 24);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v28 + 80);
  uint64_t v30 = v26 + v29;
  size_t v31 = (void *)(((unint64_t)v18 + v30) & ~v29);
  uint64_t v32 = (void *)(((unint64_t)v19 + v30) & ~v29);
  uint64_t v33 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v28 + 48);
  int v34 = v33(v31, 1, v27);
  int v35 = v33(v32, 1, v27);
  if (v34)
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 32))(v31, v32, v27);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v28 + 56))(v31, 0, 1, v27);
      return a1;
    }
    int v36 = *(_DWORD *)(v28 + 84);
    size_t v37 = *(void *)(v28 + 64);
  }
  else
  {
    if (!v35)
    {
      (*(void (**)(void *, void *, uint64_t))(v28 + 40))(v31, v32, v27);
      return a1;
    }
    uint64_t v39 = *(void (**)(void *, uint64_t))(v28 + 8);
    uint64_t v38 = v28 + 8;
    v39(v31, v27);
    int v36 = *(_DWORD *)(v38 + 76);
    size_t v37 = *(void *)(v38 + 56);
  }
  if (v36) {
    size_t v40 = v37;
  }
  else {
    size_t v40 = v37 + 1;
  }
  memcpy(v31, v32, v40);
  return a1;
}

uint64_t getEnumTagSinglePayload for SharePreview(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  unsigned int v10 = v9 - 1;
  if (!v9) {
    unsigned int v10 = 0;
  }
  if (v6 <= v10) {
    unsigned int v11 = v10;
  }
  else {
    unsigned int v11 = v6;
  }
  if (v11 <= 0x7FFFFFFE) {
    unsigned int v12 = 2147483646;
  }
  else {
    unsigned int v12 = v11;
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!v5) {
    ++v13;
  }
  uint64_t v14 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v15 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v16 = *(void *)(*(void *)(v7 - 8) + 64);
  if (!v9) {
    ++v16;
  }
  if (!a2) {
    return 0;
  }
  int v17 = a2 - v12;
  if (a2 <= v12) {
    goto LABEL_36;
  }
  uint64_t v18 = v16 + ((v13 + v15 + ((v14 + 64) & ~v14)) & ~v15);
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
    if (v21 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
    if (v21 < 2)
    {
LABEL_36:
      if (v11 <= 0x7FFFFFFE)
      {
        unint64_t v25 = *((void *)a1 + 3);
        if (v25 >= 0xFFFFFFFF) {
          LODWORD(v25) = -1;
        }
        if ((v25 + 1) >= 2) {
          return v25;
        }
        else {
          return 0;
        }
      }
      unint64_t v27 = ((((unint64_t)a1 + 39) & 0xFFFFFFFFFFFFFFF8) + v14 + 32) & ~v14;
      if (v6 == v12)
      {
        if (v5 >= 2)
        {
          unsigned int v28 = (*(uint64_t (**)(unint64_t))(v4 + 48))(v27);
          goto LABEL_49;
        }
      }
      else if (v9 >= 2)
      {
        unsigned int v28 = (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v8 + 48))((v27 + v13 + v15) & ~v15, v9, v7);
LABEL_49:
        if (v28 >= 2) {
          return v28 - 1;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_36;
  }
LABEL_26:
  int v22 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v22 = 0;
  }
  if (v18)
  {
    if (v18 <= 3) {
      int v23 = v18;
    }
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v24 = 0;
  }
  return v12 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for SharePreview(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  if (v8) {
    unsigned int v9 = v8 - 1;
  }
  else {
    unsigned int v9 = 0;
  }
  uint64_t v10 = *(void *)(a4 + 24);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int *)(v11 + 84);
  uint64_t v13 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  unsigned int v15 = v12 - 1;
  if (!v12) {
    unsigned int v15 = 0;
  }
  if (v9 <= v15) {
    unsigned int v16 = v15;
  }
  else {
    unsigned int v16 = v9;
  }
  if (v16 <= 0x7FFFFFFE) {
    unsigned int v17 = 2147483646;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v8) {
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  }
  else {
    uint64_t v18 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + 1;
  }
  if (v12) {
    uint64_t v19 = *(void *)(*(void *)(v10 - 8) + 64);
  }
  else {
    uint64_t v19 = *(void *)(*(void *)(v10 - 8) + 64) + 1;
  }
  size_t v20 = v19 + ((v18 + v14 + ((v13 + 64) & ~v13)) & ~v14);
  BOOL v21 = a3 >= v17;
  unsigned int v22 = a3 - v17;
  if (v22 == 0 || !v21)
  {
LABEL_27:
    if (v17 < a2) {
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  if (v20 > 3)
  {
    int v6 = 1;
    if (v17 < a2) {
      goto LABEL_28;
    }
    goto LABEL_35;
  }
  unsigned int v23 = ((v22 + ~(-1 << (8 * v20))) >> (8 * v20)) + 1;
  if (!HIWORD(v23))
  {
    if (v23 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v23 > 1;
    }
    goto LABEL_27;
  }
  int v6 = 4;
  if (v17 < a2)
  {
LABEL_28:
    unsigned int v24 = ~v17 + a2;
    if (v20 < 4)
    {
      int v25 = (v24 >> (8 * v20)) + 1;
      if (v20)
      {
        int v26 = v24 & ~(-1 << (8 * v20));
        bzero(a1, v20);
        if (v20 == 3)
        {
          *(_WORD *)a1 = v26;
          a1[2] = BYTE2(v26);
        }
        else if (v20 == 2)
        {
          *(_WORD *)a1 = v26;
        }
        else
        {
          *a1 = v26;
        }
      }
    }
    else
    {
      bzero(a1, v20);
      *(_DWORD *)a1 = v24;
      int v25 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v20] = v25;
        return;
      case 2:
        *(_WORD *)&a1[v20] = v25;
        return;
      case 3:
        goto LABEL_62;
      case 4:
        *(_DWORD *)&a1[v20] = v25;
        return;
      default:
        return;
    }
  }
LABEL_35:
  switch(v6)
  {
    case 1:
      a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 2:
      *(_WORD *)&a1[v20] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_40;
    case 3:
LABEL_62:
      __break(1u);
      JUMPOUT(0x187C77E5CLL);
    case 4:
      *(_DWORD *)&a1[v20] = 0;
      goto LABEL_39;
    default:
LABEL_39:
      if (a2)
      {
LABEL_40:
        if (v16 > 0x7FFFFFFE)
        {
          unint64_t v27 = (((unint64_t)(a1 + 39) & 0xFFFFFFFFFFFFFFF8) + v13 + 32) & ~v13;
          if (v9 == v17)
          {
            if (v8 >= 2)
            {
              uint64_t v28 = a2 + 1;
              uint64_t v29 = *(void (**)(unint64_t, uint64_t))(v7 + 56);
              v29(v27, v28);
            }
          }
          else if (v12 >= 2)
          {
            unint64_t v30 = (v27 + v18 + v14) & ~v14;
            uint64_t v31 = a2 + 1;
            uint64_t v32 = *(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56);
            v32(v30, v31, v12, v10);
          }
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(_OWORD *)a1 = 0u;
          *((_OWORD *)a1 + 1) = 0u;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *((void *)a1 + 3) = a2;
        }
      }
      return;
  }
}

ValueMetadata *type metadata accessor for UIKitTextSelectionRepresentation()
{
  return &type metadata for UIKitTextSelectionRepresentation;
}

uint64_t static UIKitTextSelectionRepresentation.makeSelectableTextChildView<A>(_:resolvedText:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t UIKitTextSelectionRepresentation.SelectableTextChildQuery.value.getter()
{
  return swift_retain();
}

uint64_t protocol witness for Rule.value.getter in conformance UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = UIKitTextSelectionRepresentation.SelectableTextChildQuery.value.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static PlatformTextSelectionRepresentation.makeSelectableText(resolvedText:inputs:) in conformance UIKitTextSelectionRepresentation()
{
  return static UIKitTextSelectionRepresentation.makeSelectableTextChildView<A>(_:resolvedText:inputs:)();
}

uint64_t type metadata accessor for SelectableTextChildView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for UIKitTextSelectionRepresentation.SelectableTextChildQuery()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeBufferWithCopyOfBuffer for SelectableTextChildView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for SelectableTextChildView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SelectableTextChildView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in UIKitTextSelectionRepresentation.SelectableTextChildQuery<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for View.Body : View in SelectableTextChildView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SelectableTextChildView.body.getter@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v51 = a3;
  int v63 = a2;
  uint64_t v62 = a6;
  type metadata accessor for <<opaque return type of Gesture.truePreference<A>(_:)>>.0();
  uint64_t v60 = v9;
  uint64_t v61 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  int v55 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v52 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v50 = (char *)&v45 - v11;
  uint64_t v53 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  char v64 = (char *)&v45 - v12;
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v54 = (char *)&v45 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v56 = (char *)&v45 - v15;
  swift_retain();
  uint64_t v47 = a1;
  ResolvedStyledText.accessibilityText.getter();
  uint64_t v46 = a4;
  AccessibilityStyledTextContentView.init(text:unresolvedText:renderer:needsDrawingGroup:)();
  uint64_t v16 = v79;
  uint64_t v17 = (uint64_t)v80;
  LOBYTE(a4) = v81;
  uint64_t v71 = v78;
  uint64_t v72 = v79;
  char v73 = v80;
  char v74 = v81;
  uint64_t v75 = v82;
  uint64_t v76 = v83;
  char v77 = v84;
  type metadata accessor for AccessibilityStyledTextContentView();
  uint64_t v18 = v50;
  AccessibilityStyledTextContentView.body.getter();
  swift_release();
  outlined consume of Text.Storage(v16, v17, a4);
  swift_bridgeObjectRelease();
  swift_release();
  char v69 = v63;
  uint64_t v19 = v51;
  uint64_t v70 = v51;
  _s7SwiftUI5StateVySbGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  uint64_t v20 = v71;
  uint64_t v21 = v72;
  char v22 = (char)v73;
  uint64_t v23 = static Anchor.Source<A>.bounds.getter();
  uint64_t v24 = v46;
  uint64_t v25 = AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = v47;
  View.textSelectionMenu(text:isPresented:anchor:)(v47, v20, v21, v22, v23, v25, AssociatedConformanceWitness);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v52 + 8))(v18, v25);
  uint64_t v27 = swift_allocObject();
  *(void *)(v27 + 16) = v24;
  *(void *)(v27 + 24) = a5;
  *(void *)(v27 + 32) = v26;
  *(unsigned char *)(v27 + 40) = v63;
  *(void *)(v27 + 48) = v19;
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = partial apply for closure #1 in SelectableTextChildView.body.getter;
  *(void *)(v28 + 24) = v27;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = partial apply for closure #1 in Gesture<>.callbacks(pressing:pressed:);
  uint64_t v81 = v28;
  type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>();
  uint64_t v30 = v29;
  uint64_t v31 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v32 = v55;
  Gesture.cancellable()();
  swift_release();
  swift_release();
  unint64_t v33 = lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier();
  uint64_t v67 = AssociatedConformanceWitness;
  unint64_t v68 = v33;
  uint64_t v34 = v53;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v78 = v30;
  uint64_t v79 = MEMORY[0x1E4F40C78];
  uint64_t v80 = (uint64_t (*)(uint64_t, uint64_t, char))v31;
  uint64_t v81 = MEMORY[0x1E4F40C70];
  swift_getOpaqueTypeConformance2();
  int v36 = v54;
  uint64_t v37 = v34;
  uint64_t v38 = v60;
  uint64_t v39 = v64;
  View.gesture<A>(_:including:)();
  (*(void (**)(char *, uint64_t))(v61 + 8))(v32, v38);
  (*(void (**)(char *, uint64_t))(v58 + 8))(v39, v37);
  uint64_t v40 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  uint64_t v65 = WitnessTable;
  uint64_t v66 = v40;
  uint64_t v41 = v57;
  swift_getWitnessTable();
  int v42 = v56;
  static ViewBuilder.buildExpression<A>(_:)(v36);
  size_t v43 = *(void (**)(char *, uint64_t))(v59 + 8);
  v43(v36, v41);
  static ViewBuilder.buildExpression<A>(_:)(v42);
  return ((uint64_t (*)(char *, uint64_t))v43)(v42, v41);
}

uint64_t closure #1 in SelectableTextChildView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_retain();
    dispatch thunk of AnyLocation.set(_:transaction:)();
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for View.body.getter in conformance SelectableTextChildView<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SelectableTextChildView.body.getter(*(void *)v2, *(unsigned __int8 *)(v2 + 8), *(void *)(v2 + 16), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

void one-time initialization function for maximumDistance()
{
  static TextSelectionGesture.maximumDistance = 0x4024000000000000;
}

uint64_t TextSelectionGesture.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v36 = a1;
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
  uint64_t v2 = v1;
  uint64_t v29 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v29 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
  uint64_t v33 = v5;
  uint64_t v30 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
  uint64_t v32 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v31 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>();
  uint64_t v35 = v10;
  MEMORY[0x1F4188790](v10);
  uint64_t v34 = (char *)&v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (one-time initialization token for maximumDistance != -1) {
    swift_once();
  }
  default argument 0 of DistanceGesture.init(minimumDistance:maximumDistance:)();
  DistanceGesture.init(minimumDistance:maximumDistance:)();
  uint64_t v12 = v43;
  uint64_t v13 = v44;
  uint64_t v41 = 0;
  memset(v40, 0, sizeof(v40));
  char v42 = 2;
  outlined init with copy of CoordinateSpace((uint64_t)v40, (uint64_t)v37);
  outlined init with copy of CoordinateSpaceGesture<CGFloat>((uint64_t)v37, (uint64_t)&v46);
  v45[0] = v12;
  v45[1] = v13;
  outlined destroy of CoordinateSpaceGesture<CGFloat>((uint64_t)v37);
  outlined destroy of CoordinateSpace((uint64_t)v40);
  v37[0] = 0;
  uint64_t v38 = specialized closure #1 in Gesture.longPressPhase();
  uint64_t v39 = 0;
  LOBYTE(v40[0]) = 0;
  *(_OWORD *)((char *)v40 + 8) = xmmword_188391050;
  BYTE8(v40[1]) = 0;
  type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
  uint64_t v15 = v14;
  type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
  uint64_t v17 = v16;
  uint64_t v18 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>);
  uint64_t v19 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>);
  Gesture.enabled<A>(by:)();
  type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
  uint64_t v21 = v20;
  *(void *)&v40[0] = v15;
  *((void *)&v40[0] + 1) = v17;
  uint64_t v22 = MEMORY[0x1E4FBB390];
  *(void *)&v40[1] = MEMORY[0x1E4FBB390];
  *((void *)&v40[1] + 1) = v18;
  uint64_t v41 = v19;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  uint64_t v24 = lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
  Gesture.gated<A>(by:)();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v4, v2);
  *(void *)&v40[0] = v2;
  *((void *)&v40[0] + 1) = v21;
  *(void *)&v40[1] = v22;
  *((void *)&v40[1] + 1) = OpaqueTypeConformance2;
  uint64_t v41 = v24;
  swift_getOpaqueTypeConformance2();
  uint64_t v25 = (uint64_t)v31;
  uint64_t v26 = v33;
  Gesture.eventFilter<A>(forType:_:)();
  (*(void (**)(char *, uint64_t))(v30 + 8))(v7, v26);
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  uint64_t v27 = (uint64_t)v34;
  Gesture.eventFilter<A>(forType:_:)();
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>(v25, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
  LOBYTE(v40[0]) = 2;
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>);
  Gesture.dependency(_:)();
  outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>(v27, (uint64_t (*)(void))type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>);
  return outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>((uint64_t)v45, (uint64_t (*)(void))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
}

BOOL closure #2 in TextSelectionGesture.body.getter(uint64_t a1)
{
  return *(unsigned char *)(a1 + 24) != 2;
}

uint64_t specialized closure #1 in Gesture.longPressPhase()@<X0>(uint64_t result@<X0>, _WORD *a2@<X8>)
{
  if (*(unsigned char *)(result + 72) == 1)
  {
    *a2 = 513;
  }
  else
  {
    _s7SwiftUI5StateVySbGMaTm_1(0, &lazy cache variable for type metadata for GesturePhase<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3F5F8]);
    return GesturePhase.withValue<A>(_:)();
  }
  return result;
}

{
  if (*(unsigned char *)(result + 24) == 1)
  {
    *a2 = 513;
  }
  else
  {
    type metadata accessor for DurationGesture<TappableEvent>(0, &lazy cache variable for type metadata for GesturePhase<TappableEvent>, MEMORY[0x1E4F3F7B8], MEMORY[0x1E4F3F5F8]);
    return GesturePhase.withValue<A>(_:)();
  }
  return result;
}

void type metadata accessor for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>)
  {
    type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type CallbacksGesture<PressableGestureCallbacks<Bool>> and conformance CallbacksGesture<A>, (void (*)(uint64_t))type metadata accessor for CallbacksGesture<PressableGestureCallbacks<Bool>>);
    lazy protocol witness table accessor for type TextSelectionGesture and conformance TextSelectionGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CallbacksGesture<PressableGestureCallbacks<Bool>>, TextSelectionGesture>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextSelectionGesture and conformance TextSelectionGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSelectionGesture and conformance TextSelectionGesture;
  if (!lazy protocol witness table cache variable for type TextSelectionGesture and conformance TextSelectionGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSelectionGesture and conformance TextSelectionGesture);
  }
  return result;
}

uint64_t sub_187C794C0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SelectableTextChildView.body.getter()
{
  return closure #1 in SelectableTextChildView.body.getter(*(void *)(v0 + 32), *(unsigned __int8 *)(v0 + 40), *(void *)(v0 + 48));
}

uint64_t sub_187C79514()
{
  if (*(void *)(v0 + 16)) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Gesture<>.callbacks(pressing:pressed:)(uint64_t a1, uint64_t a2, char a3)
{
  return closure #1 in Gesture<>.callbacks(pressing:pressed:)(a1, a2, a3 & 1, *(uint64_t (**)(void))(v3 + 16));
}

unint64_t lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier;
  if (!lazy protocol witness table cache variable for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier);
  }
  return result;
}

void *type metadata accessor for TextSelectionGesture()
{
  return &unk_1ED433210;
}

uint64_t sub_187C795C4()
{
  type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>();
  type metadata accessor for ModifiedContent();
  swift_getAssociatedConformanceWitness();
  lazy protocol witness table accessor for type TextSelectionMenuModifier and conformance TextSelectionMenuModifier();
  swift_getWitnessTable();
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>, (void (*)(uint64_t))type metadata accessor for AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0>);
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in TextSelectionGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>)
  {
    uint64_t v0 = MEMORY[0x1E4F3F638];
    _s7SwiftUI25PressableGestureCallbacks33_C70334A42970E36EF599A57E69899EA7LLVySbGMaTm_0(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, Bool>, MEMORY[0x1E4F3F638], MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F370]);
    _s7SwiftUI25PressableGestureCallbacks33_C70334A42970E36EF599A57E69899EA7LLVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, v0, MEMORY[0x1E4F3F630], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>();
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>;
  if (!lazy protocol witness table cache variable for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>)
  {
    _s7SwiftUI25PressableGestureCallbacks33_C70334A42970E36EF599A57E69899EA7LLVySbGMaTm_0(255, &lazy cache variable for type metadata for MapGesture<SpatialEvent, Bool>, MEMORY[0x1E4F3F638], MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapGesture<SpatialEvent, Bool> and conformance MapGesture<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>;
  if (!lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>)
  {
    _s7SwiftUI25PressableGestureCallbacks33_C70334A42970E36EF599A57E69899EA7LLVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3F630], MEMORY[0x1E4F3F758]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>)
  {
    uint64_t v0 = MEMORY[0x1E4F3F638];
    _s7SwiftUI5StateVySbGMaTm_1(255, &lazy cache variable for type metadata for DurationGesture<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3FB10]);
    _s7SwiftUI25PressableGestureCallbacks33_C70334A42970E36EF599A57E69899EA7LLVySbGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>, v0, MEMORY[0x1E4F3F630], MEMORY[0x1E4F3F758]);
    lazy protocol witness table accessor for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>();
    lazy protocol witness table accessor for type EventListener<SpatialEvent> and conformance EventListener<A>();
    unint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>;
  if (!lazy protocol witness table cache variable for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>)
  {
    _s7SwiftUI5StateVySbGMaTm_1(255, &lazy cache variable for type metadata for DurationGesture<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3FB10]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DurationGesture<SpatialEvent> and conformance DurationGesture<A>);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>)
  {
    _s7SwiftUI5StateVySbGMaTm_1(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F40910]);
    lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>();
    lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>;
  if (!lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>)
  {
    _s7SwiftUI5StateVySbGMaTm_1(255, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F40910]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CoordinateSpaceGesture<CGFloat> and conformance CoordinateSpaceGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DistanceGesture and conformance DistanceGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture;
  if (!lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DistanceGesture and conformance DistanceGesture);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>)
  {
    _s7SwiftUI5StateVySbGMaTm_1(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F4E8]);
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>();
    type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<SpatialEvent, Bool>, EventListener<SpatialEvent>>);
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<SpatialEvent>, EventListener<SpatialEvent>>);
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    swift_getOpaqueTypeConformance2();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
    }
  }
}

{
  uint64_t (*v0)(void, uint64_t);
  unint64_t v1;
  uint64_t v2;

  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>)
  {
    unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F4E8];
    type metadata accessor for DurationGesture<TappableEvent>(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F4E8]);
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    lazy protocol witness table accessor for type CategoryGesture<Bool> and conformance CategoryGesture<A>((unint64_t *)&lazy protocol witness table cache variable for type EventFilter<Bool> and conformance EventFilter<A>, &lazy cache variable for type metadata for EventFilter<Bool>, v0);
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>();
    type metadata accessor for <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0();
    type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>();
    type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<MapGesture<TappableEvent, Bool>, EventListener<TappableEvent>>);
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<DurationGesture<TappableEvent>, EventListener<TappableEvent>>);
    swift_getOpaqueTypeConformance2();
    swift_getOpaqueTypeConformance2();
    lazy protocol witness table accessor for type AddGestureModifier<<<opaque return type of Gesture.truePreference<A>(_:)>>.0> and conformance AddGestureModifier<A>(&lazy protocol witness table cache variable for type ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>);
    swift_getOpaqueTypeConformance2();
    uint64_t v1 = type metadata accessor for ModifierGesture();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
    }
  }
}

void type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>)
  {
    _s7SwiftUI5StateVySbGMaTm_1(255, &lazy cache variable for type metadata for EventFilter<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F3F4E8]);
    type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>();
    lazy protocol witness table accessor for type EventFilter<Bool> and conformance EventFilter<A>();
    lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>);
    }
  }
}

uint64_t outlined init with copy of CoordinateSpaceGesture<CGFloat>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI5StateVySbGMaTm_1(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CoordinateSpaceGesture<CGFloat>(uint64_t a1)
{
  _s7SwiftUI5StateVySbGMaTm_1(0, &lazy cache variable for type metadata for CoordinateSpaceGesture<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F40910]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of ModifierGesture<CoordinateSpaceGesture<CGFloat>, DistanceGesture>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_187C7A264()
{
  type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>();
  lazy protocol witness table accessor for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<Bool>, ModifierGesture<EventFilter<Bool>, <<opaque return type of Gesture.combined<A, B>(with:body:)>>.0>>);
  return swift_getOpaqueTypeConformance2();
}

uint64_t NavigationLink<>.init<A>(presenting:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v18 = a5;
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v17 - v14, a1, v11, v13);
  NavigationLink<>.init<A>(value:label:)((uint64_t)v15, a2, a3, a4, v18, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, v11);
}

double NavigationLink<>.init<A>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v35 = a7;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v34 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v34 - v18, a5, v15, v17);
  uint64_t v36 = a1;
  uint64_t v37 = a2;
  char v38 = a3;
  uint64_t v39 = a4;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v19, MEMORY[0x1E4F41420], a6, MEMORY[0x1E4F41418], v35, (uint64_t)&v40);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a5, v15);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v20 = v41;
  char v21 = v42;
  char v22 = v44;
  uint64_t v23 = v45;
  char v24 = v46;
  char v25 = v47;
  uint64_t v26 = v48;
  char v27 = v49;
  int v28 = v50;
  uint64_t v29 = v51;
  char v30 = v52;
  uint64_t v31 = v53;
  double result = *(double *)&v40;
  long long v33 = v43;
  *(_OWORD *)a8 = v40;
  *(unsigned char *)(a8 + 16) = v20;
  *(unsigned char *)(a8 + 17) = v21;
  *(_OWORD *)(a8 + 24) = v33;
  *(unsigned char *)(a8 + 40) = v22;
  *(void *)(a8 + 48) = v23;
  *(unsigned char *)(a8 + 56) = v24;
  *(unsigned char *)(a8 + 57) = v25;
  *(void *)(a8 + 64) = v26;
  *(unsigned char *)(a8 + 72) = v27;
  *(_DWORD *)(a8 + 80) = v28;
  *(void *)(a8 + 88) = v29;
  *(unsigned char *)(a8 + 96) = v30;
  *(void *)(a8 + 104) = v31;
  return result;
}

double NavigationLink<>.init<A>(_:presenting:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v35 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v35 - v18, a5, v15, v17);
  double v20 = NavigationLink<>.init<A>(_:value:)(a1, a2, a3, a4, (uint64_t)v19, a6, v36, (uint64_t)&v37);
  (*(void (**)(uint64_t, uint64_t, double))(v16 + 8))(a5, v15, v20);
  char v21 = v38;
  char v22 = v39;
  char v23 = v41;
  uint64_t v24 = v42;
  char v25 = v43;
  char v26 = v44;
  uint64_t v27 = v45;
  char v28 = v46;
  int v29 = v47;
  uint64_t v30 = v48;
  char v31 = v49;
  uint64_t v32 = v50;
  double result = *(double *)&v37;
  long long v34 = v40;
  *(_OWORD *)a8 = v37;
  *(unsigned char *)(a8 + 16) = v21;
  *(unsigned char *)(a8 + 17) = v22;
  *(_OWORD *)(a8 + 24) = v34;
  *(unsigned char *)(a8 + 40) = v23;
  *(void *)(a8 + 48) = v24;
  *(unsigned char *)(a8 + 56) = v25;
  *(unsigned char *)(a8 + 57) = v26;
  *(void *)(a8 + 64) = v27;
  *(unsigned char *)(a8 + 72) = v28;
  *(_DWORD *)(a8 + 80) = v29;
  *(void *)(a8 + 88) = v30;
  *(unsigned char *)(a8 + 96) = v31;
  *(void *)(a8 + 104) = v32;
  return result;
}

double NavigationLink<>.init<A, B>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  uint64_t v18 = &v33[-v17];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v15 + 16))(&v33[-v17], a2, v14, v16);
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v38 = a1;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v18, MEMORY[0x1E4F41420], a4, MEMORY[0x1E4F41418], a6, (uint64_t)&v39);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(a2, v14);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  char v19 = v40;
  char v20 = v41;
  char v21 = v43;
  uint64_t v22 = v44;
  char v23 = v45;
  char v24 = v46;
  uint64_t v25 = v47;
  char v26 = v48;
  int v27 = v49;
  uint64_t v28 = v50;
  char v29 = v51;
  uint64_t v30 = v52;
  double result = *(double *)&v39;
  long long v32 = v42;
  *(_OWORD *)a7 = v39;
  *(unsigned char *)(a7 + 16) = v19;
  *(unsigned char *)(a7 + 17) = v20;
  *(_OWORD *)(a7 + 24) = v32;
  *(unsigned char *)(a7 + 40) = v21;
  *(void *)(a7 + 48) = v22;
  *(unsigned char *)(a7 + 56) = v23;
  *(unsigned char *)(a7 + 57) = v24;
  *(void *)(a7 + 64) = v25;
  *(unsigned char *)(a7 + 72) = v26;
  *(_DWORD *)(a7 + 80) = v27;
  *(void *)(a7 + 88) = v28;
  *(unsigned char *)(a7 + 96) = v29;
  *(void *)(a7 + 104) = v30;
  return result;
}

uint64_t closure #1 in NavigationLink<>.init<A, B>(_:value:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t partial apply for closure #1 in NavigationLink<>.init<A, B>(_:value:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in NavigationLink<>.init<A, B>(_:value:)(*(void *)(v1 + 48), a1);
}

{
  uint64_t v1;

  return closure #1 in NavigationLink<>.init<A, B>(_:value:)(*(void *)(v1 + 64), a1);
}

double NavigationLink<>.init<A, B>(_:presenting:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v36 - v14;
  uint64_t v16 = *(void *)(a3 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  char v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, a1, a3, v18);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2, v12);
  double v21 = NavigationLink<>.init<A, B>(_:value:)((uint64_t)v20, (uint64_t)v15, a3, a4, v36, v37, (uint64_t)&v38);
  (*(void (**)(uint64_t, uint64_t, double))(v13 + 8))(a2, v12, v21);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a3);
  char v22 = v39;
  char v23 = v40;
  char v24 = v42;
  uint64_t v25 = v43;
  char v26 = v44;
  char v27 = v45;
  uint64_t v28 = v46;
  char v29 = v47;
  int v30 = v48;
  uint64_t v31 = v49;
  char v32 = v50;
  uint64_t v33 = v51;
  double result = *(double *)&v38;
  long long v35 = v41;
  *(_OWORD *)a7 = v38;
  *(unsigned char *)(a7 + 16) = v22;
  *(unsigned char *)(a7 + 17) = v23;
  *(_OWORD *)(a7 + 24) = v35;
  *(unsigned char *)(a7 + 40) = v24;
  *(void *)(a7 + 48) = v25;
  *(unsigned char *)(a7 + 56) = v26;
  *(unsigned char *)(a7 + 57) = v27;
  *(void *)(a7 + 64) = v28;
  *(unsigned char *)(a7 + 72) = v29;
  *(_DWORD *)(a7 + 80) = v30;
  *(void *)(a7 + 88) = v31;
  *(unsigned char *)(a7 + 96) = v32;
  *(void *)(a7 + 104) = v33;
  return result;
}

uint64_t NavigationLink<>.init<A>(value:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  double v15 = MEMORY[0x1F4188790](a1);
  uint64_t v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v18(v15);
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a8;
  uint64_t v19 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in NavigationLink<>.init<A>(value:label:), (uint64_t)v22, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for NavigationLinkPresentedValue, v20, (uint64_t)&v29);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8))(a1, v19);
  return NavigationLink.init<>(label:presentedValue:)((uint64_t)v17, v29, a2, a7);
}

uint64_t NavigationLink<>.init<A>(presenting:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8)
{
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v19 = a4;
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v18 - v15, a1, v12, v14);
  NavigationLink<>.init<A>(value:label:)((uint64_t)v16, a2, a3, v19, v20, v21, a7, a8);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, v12);
}

double NavigationLink<>.init<A>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v39 = a8;
  uint64_t v38 = a7;
  uint64_t v37 = a10;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (char *)&v36 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))((char *)&v36 - v20, a5, v17, v19);
  uint64_t v40 = a1;
  uint64_t v41 = a2;
  char v42 = a3;
  uint64_t v43 = a4;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v21, MEMORY[0x1E4F41420], a6, MEMORY[0x1E4F41418], v38, v39, (uint64_t)&v44, v37);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a5, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v22 = v45;
  char v23 = v46;
  char v24 = v48;
  uint64_t v25 = v49;
  char v26 = v50;
  char v27 = v51;
  uint64_t v28 = v52;
  char v29 = v53;
  int v30 = v54;
  uint64_t v31 = v55;
  char v32 = v56;
  uint64_t v33 = v57;
  double result = *(double *)&v44;
  long long v35 = v47;
  *(_OWORD *)a9 = v44;
  *(unsigned char *)(a9 + 16) = v22;
  *(unsigned char *)(a9 + 17) = v23;
  *(_OWORD *)(a9 + 24) = v35;
  *(unsigned char *)(a9 + 40) = v24;
  *(void *)(a9 + 48) = v25;
  *(unsigned char *)(a9 + 56) = v26;
  *(unsigned char *)(a9 + 57) = v27;
  *(void *)(a9 + 64) = v28;
  *(unsigned char *)(a9 + 72) = v29;
  *(_DWORD *)(a9 + 80) = v30;
  *(void *)(a9 + 88) = v31;
  *(unsigned char *)(a9 + 96) = v32;
  *(void *)(a9 + 104) = v33;
  return result;
}

double NavigationLink<>.init<A>(_:presenting:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10)
{
  uint64_t v38 = a7;
  uint64_t v39 = a8;
  uint64_t v37 = a4;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v36 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v36 - v19, a5, v16, v18);
  double v21 = NavigationLink<>.init<A>(_:value:)(a1, a2, a3, v37, (uint64_t)v20, a6, v38, v39, (uint64_t)&v40, a10);
  (*(void (**)(uint64_t, uint64_t, double))(v17 + 8))(a5, v16, v21);
  char v22 = v41;
  char v23 = v42;
  char v24 = v44;
  uint64_t v25 = v45;
  char v26 = v46;
  char v27 = v47;
  uint64_t v28 = v48;
  char v29 = v49;
  int v30 = v50;
  uint64_t v31 = v51;
  char v32 = v52;
  uint64_t v33 = v53;
  double result = *(double *)&v40;
  long long v35 = v43;
  *(_OWORD *)a9 = v40;
  *(unsigned char *)(a9 + 16) = v22;
  *(unsigned char *)(a9 + 17) = v23;
  *(_OWORD *)(a9 + 24) = v35;
  *(unsigned char *)(a9 + 40) = v24;
  *(void *)(a9 + 48) = v25;
  *(unsigned char *)(a9 + 56) = v26;
  *(unsigned char *)(a9 + 57) = v27;
  *(void *)(a9 + 64) = v28;
  *(unsigned char *)(a9 + 72) = v29;
  *(_DWORD *)(a9 + 80) = v30;
  *(void *)(a9 + 88) = v31;
  *(unsigned char *)(a9 + 96) = v32;
  *(void *)(a9 + 104) = v33;
  return result;
}

double NavigationLink<>.init<A, B>(_:value:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v36 = a7;
  uint64_t v35 = a5;
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v35 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v35 - v19, a2, v16, v18);
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = v35;
  uint64_t v40 = a6;
  uint64_t v41 = v36;
  uint64_t v42 = a8;
  uint64_t v43 = a1;
  NavigationLink<>.init<A>(value:label:)((uint64_t)v20, MEMORY[0x1E4F41420], a4, MEMORY[0x1E4F41418], a6, v36, (uint64_t)&v44, a8);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a2, v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 8))(a1, a3);
  char v21 = v45;
  char v22 = v46;
  char v23 = v48;
  uint64_t v24 = v49;
  char v25 = v50;
  char v26 = v51;
  uint64_t v27 = v52;
  char v28 = v53;
  int v29 = v54;
  uint64_t v30 = v55;
  char v31 = v56;
  uint64_t v32 = v57;
  double result = *(double *)&v44;
  long long v34 = v47;
  *(_OWORD *)a9 = v44;
  *(unsigned char *)(a9 + 16) = v21;
  *(unsigned char *)(a9 + 17) = v22;
  *(_OWORD *)(a9 + 24) = v34;
  *(unsigned char *)(a9 + 40) = v23;
  *(void *)(a9 + 48) = v24;
  *(unsigned char *)(a9 + 56) = v25;
  *(unsigned char *)(a9 + 57) = v26;
  *(void *)(a9 + 64) = v27;
  *(unsigned char *)(a9 + 72) = v28;
  *(_DWORD *)(a9 + 80) = v29;
  *(void *)(a9 + 88) = v30;
  *(unsigned char *)(a9 + 96) = v31;
  *(void *)(a9 + 104) = v32;
  return result;
}

double NavigationLink<>.init<A, B>(_:presenting:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v40 = a7;
  uint64_t v41 = a8;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v14 = type metadata accessor for Optional();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = *(void *)(a3 - 8);
  double v20 = MEMORY[0x1F4188790](v19);
  char v22 = (char *)&v38 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v22, a1, a3, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  double v23 = NavigationLink<>.init<A, B>(_:value:)((uint64_t)v22, (uint64_t)v17, a3, a4, v38, v39, v40, v41, (uint64_t)&v42);
  (*(void (**)(uint64_t, uint64_t, double))(v15 + 8))(a2, v14, v23);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(a1, a3);
  char v24 = v43;
  char v25 = v44;
  char v26 = v46;
  uint64_t v27 = v47;
  char v28 = v48;
  char v29 = v49;
  uint64_t v30 = v50;
  char v31 = v51;
  int v32 = v52;
  uint64_t v33 = v53;
  char v34 = v54;
  uint64_t v35 = v55;
  double result = *(double *)&v42;
  long long v37 = v45;
  *(_OWORD *)a9 = v42;
  *(unsigned char *)(a9 + 16) = v24;
  *(unsigned char *)(a9 + 17) = v25;
  *(_OWORD *)(a9 + 24) = v37;
  *(unsigned char *)(a9 + 40) = v26;
  *(void *)(a9 + 48) = v27;
  *(unsigned char *)(a9 + 56) = v28;
  *(unsigned char *)(a9 + 57) = v29;
  *(void *)(a9 + 64) = v30;
  *(unsigned char *)(a9 + 72) = v31;
  *(_DWORD *)(a9 + 80) = v32;
  *(void *)(a9 + 88) = v33;
  *(unsigned char *)(a9 + 96) = v34;
  *(void *)(a9 + 104) = v35;
  return result;
}

void *__swift_initWithCopy_strong(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  return a1;
}

uint64_t __swift_destroy_strong()
{
  return swift_release();
}

void *__swift_assignWithCopy_strong(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  return a1;
}

void *__swift_assignWithTake_strong(void *a1, void *a2)
{
  *a1 = *a2;
  swift_release();
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF08PlatformfB8Protocol_So8NSObjectCXcs5NeverOTg503_s7d4UI17fg58C41_accessibilityUserDefinedLinkedUIElementsSayypGSgvgAA08h3C15bi4_So8J62CXcACcfu_32df5be316035e77621aaf8da9181039cbAcaG_AIXcTf3nnnpk_nTf1cn_n(unint64_t a1)
{
  if (a1 >> 62)
  {
LABEL_27:
    swift_bridgeObjectRetain();
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray.reserveCapacity(_:)();
    if (v2 < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t v4 = 0;
      while (1)
      {
        if (v4 == v2)
        {
LABEL_25:
          __break(1u);
LABEL_26:
          __break(1u);
          goto LABEL_27;
        }
        uint64_t v5 = (a1 & 0xC000000000000001) != 0
           ? (char *)MEMORY[0x18C117680](v4, a1)
           : (char *)*(id *)(a1 + 32 + 8 * v4);
        uint64_t v6 = v5;
        uint64_t v7 = &v5[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
        swift_beginAccess();
        uint64_t v8 = *(void *)v7;
        uint64_t v9 = *(void *)(*(void *)v7 + 16);
        if (v9) {
          break;
        }
        swift_bridgeObjectRetain();
LABEL_7:
        swift_bridgeObjectRelease();
LABEL_8:
        ++v4;
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
        specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized ContiguousArray._endMutation()();
        if (v4 == v2) {
          return v12;
        }
      }
      swift_bridgeObjectRetain();
      uint64_t v10 = v8 + 40 * v9;
      while (1)
      {
        if (v9 > *(void *)(v8 + 16))
        {
          __break(1u);
          goto LABEL_25;
        }
        uint64_t v11 = (void *)AccessibilityAttachment.platformElement.getter();

        if (v11) {
          break;
        }
        v10 -= 40;
        if (!--v9) {
          goto LABEL_7;
        }
      }
      if (v9 > *(void *)(v8 + 16)) {
        goto LABEL_26;
      }
      uint64_t result = AccessibilityAttachment.platformElement.getter();
      if (result)
      {

        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned Bool)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  LOBYTE(v1) = v1(v2);
  swift_release();
  return v1 & 1;
}

void specialized MutableCollection<>.sort(by:)(void **a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for IndexPath() - 8);
  double v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    double v3 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v3);
  }
  uint64_t v4 = v3[2];
  v5[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v5[1] = v4;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v5);
  *a1 = v3;
}

{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  void v6[2];

  type metadata accessor for (ToolbarStorage.Entry, Int)();
  double v3 = *(void *)(v2 - 8);
  uint64_t v4 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = (void *)specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v4);
  }
  uint64_t v5 = v4[2];
  v6[0] = (char *)v4 + ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  v6[1] = v5;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v6);
  *a1 = v4;
}

{
  void *v2;
  uint64_t v3;
  uint64_t v4[2];

  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v2 = specialized _ContiguousArrayBuffer._consumeAndCreateNew()(v2);
  }
  double v3 = v2[2];
  v4[0] = (uint64_t)(v2 + 4);
  v4[1] = v3;
  specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(v4);
  *a1 = v2;
}

uint64_t specialized AccessibilityCollectionViewTableDataSource.visitNodes<A>(applying:at:)(uint64_t *a1, uint64_t a2)
{
  void (*v49)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  id v57;
  uint64_t *v58;
  void *v59;
  void v60[4];
  long long v61;
  long long v62;
  uint64_t v63;
  char v64;
  long long v65;
  long long v66;
  uint64_t v67;
  unsigned __int8 v68;

  unint64_t v3 = v2;
  type metadata accessor for Text.Style?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v46 - v7;
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v2, (uint64_t)&v65);
  if (!*((void *)&v66 + 1))
  {
    _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)&v65, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    return outlined destroy of AccessibilityTableContext??((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Text.Style?);
  }
  outlined init with copy of TableDataSourceAdaptor((uint64_t)&v65, (uint64_t)&v61);
  outlined destroy of AnyAccessibilityValue?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListDataSource, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
  if ((AccessibilityCollectionViewTableDataSource.hasGlobalHeader.getter() & 1) != 0 && __OFSUB__(a2--, 1))
  {
    __break(1u);
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  TableSections.firstIndexPath(from:)(a2, (uint64_t)v8);
  outlined destroy of TableDataSourceAdaptor((uint64_t)&v61);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return outlined destroy of AccessibilityTableContext??((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Text.Style?);
  }
  uint64_t v58 = a1;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  uint64_t v14 = *(void **)(v2 + 192);
  if (!v14) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v16 = objc_msgSend(v14, sel_cellForItemAtIndexPath_, isa);

  if (!v16) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  type metadata accessor for TableCollectionViewCell();
  uint64_t v17 = swift_dynamicCastClass();
  if (!v17)
  {

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  uint64_t v18 = *(void **)(v17 + direct field offset for ListCollectionViewCellBase.host);
  id v19 = v18;

  if (!v18) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, MEMORY[0x1E4FBB320]);
  lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
  ViewRendererHost.updateViewGraph<A>(body:)();
  unint64_t v3 = (unint64_t)static AccessibilityCore.queryFilter(elements:options:)(v65, 4);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v47 = v12;
  id v48 = v19;
  if (!(v3 >> 62))
  {
    uint64_t v21 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v21) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
LABEL_56:
  swift_bridgeObjectRetain();
  uint64_t v21 = _CocoaArrayWrapper.endIndex.getter();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v21) {
    goto LABEL_16;
  }
LABEL_11:
  int v52 = v3 & 0xC000000000000001;
  char v54 = v3;
  if ((v3 & 0xC000000000000001) != 0)
  {
    id v22 = (id)MEMORY[0x18C117680](0, v3);
  }
  else
  {
    if (!*(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return result;
    }
    id v22 = *(id *)(v3 + 32);
  }
  double v23 = v22;
  id v24 = v48;
  BOOL v25 = AccessibilityNode.CellVisitor.visit(node:)(v22);

  if (!v25)
  {
    swift_bridgeObjectRelease();

    uint64_t v12 = v47;
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  unint64_t v3 = v54;
  if (v21 == 1)
  {
LABEL_16:
    swift_bridgeObjectRelease();

    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v47, v9);
  }
  uint64_t v46 = v54 & 0xFFFFFFFFFFFFFF8;
  uint64_t v26 = 5;
  char v51 = MEMORY[0x1E4FBC840] + 8;
  while (1)
  {
    unint64_t v27 = v26 - 4;
    if (v52)
    {
      id v28 = (id)MEMORY[0x18C117680](v26 - 4, v3);
      uint64_t v29 = v26 - 3;
      if (__OFADD__(v27, 1)) {
        goto LABEL_54;
      }
    }
    else
    {
      if (v27 >= *(void *)(v46 + 16)) {
        goto LABEL_55;
      }
      id v28 = *(id *)(v3 + 8 * v26);
      uint64_t v29 = v26 - 3;
      if (__OFADD__(v27, 1)) {
        goto LABEL_54;
      }
    }
    uint64_t v30 = v21;
    char v56 = v29;
    uint64_t v57 = v28;
    uint64_t v53 = *v58;
    uint64_t v31 = v58[2];
    uint64_t v55 = v58[1];
    uint64_t v50 = v31;
    AccessibilityNode.attachment.getter((uint64_t *)&v65);
    uint64_t v32 = v65;

    if (*(void *)(v32 + 16)
      && (unint64_t v33 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
          (v34 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v32 + 56) + 40 * v33, (uint64_t)&v61);
      uint64_t v36 = *((void *)&v62 + 1);
      uint64_t v35 = v63;
      __swift_project_boxed_opaque_existential_1(&v61, *((uint64_t *)&v62 + 1));
      char v49 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v35 + 8);
      swift_bridgeObjectRetain();
      v49(v60, v36, v35);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v61);
    }
    else
    {
      memset(v60, 0, sizeof(v60));
      swift_bridgeObjectRetain();
    }
    long long v37 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v51, MEMORY[0x1E4FBB718]);
    _sypSgMaTm_5(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, v37);
    if (swift_dynamicCast())
    {
      _s7SwiftUI4PathVSgWObTm_0((uint64_t)&v61, (uint64_t)&v65, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
    }
    else
    {
      int v63 = 0;
      uint64_t v61 = 0u;
      uint64_t v62 = 0u;
      char v64 = -2;
      uint64_t v65 = 0u;
      uint64_t v66 = 0u;
      uint64_t v67 = 0;
      unint64_t v68 = -1;
      outlined destroy of AccessibilityTableContext??((uint64_t)&v61, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(void))type metadata accessor for AccessibilityTextLayoutProperties??);
    }
    swift_bridgeObjectRelease_n();
    uint64_t v21 = v30;
    unint64_t v3 = v54;
    uint64_t v38 = v57;
    if (v68 == 255) {
      goto LABEL_24;
    }
    _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)&v65, (uint64_t)&v61, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
    if (v64 == 2) {
      break;
    }
    if (v64 != 1)
    {
      outlined destroy of AccessibilityTableContext((uint64_t)&v61);
LABEL_24:
      outlined destroy of AnyAccessibilityValue?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
      goto LABEL_25;
    }
    if ((void)v61 != v53) {
      goto LABEL_24;
    }
    uint64_t v39 = *((void *)&v61 + 1);
    uint64_t v40 = v55;
    outlined destroy of AnyAccessibilityValue?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    if (v39 == v40) {
      goto LABEL_48;
    }
LABEL_25:

    ++v26;
    if (v56 == v21) {
      goto LABEL_16;
    }
  }
  if (v55 < 0 || v55 >= *((uint64_t *)&v61 + 1)) {
    goto LABEL_24;
  }
  uint64_t v41 = v61;
  outlined destroy of AnyAccessibilityValue?((uint64_t)&v65, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  if (v41 != v53) {
    goto LABEL_25;
  }
LABEL_48:
  AccessibilityNode.platformElement.getter();
  if (!v42) {
    id v42 = v38;
  }
  char v43 = v42;
  uint64_t v12 = v47;
  id v44 = v48;
  uint64_t v59 = &unk_1ED5149B0;
  uint64_t v45 = swift_dynamicCastObjCProtocolConditional();

  if (!v45) {
  swift_unknownObjectRelease();
  }
  swift_bridgeObjectRelease();

  v58[2] = v45;
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

void specialized AccessibilityCollectionViewTableDataSource.visitHeaderNodes<A>(applying:)(void *a1)
{
  void (*v52)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t (*v53)(void, uint64_t);
  ValueMetadata *v54;
  unint64_t *v55;
  int8x16_t v56;
  ValueMetadata *v57;
  ValueMetadata *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  void *v65;
  char *v66;
  BOOL v67;
  uint64_t v68;
  unint64_t v69;
  ValueMetadata *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  char v74;
  uint64_t v75;
  uint64_t v76;
  void (*v77)(long long *__return_ptr, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t (*v79)(void, uint64_t);
  void (**v80)(unint64_t *, ValueMetadata *, unint64_t *);
  int8x16_t v81;
  ValueMetadata *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t v91;
  void *v92;
  id v93;
  char *v94;
  uint64_t v95;
  void (*v96)(ValueMetadata *, uint64_t, uint64_t, unint64_t *);
  void (**v97)(unint64_t *, unint64_t *);
  unint64_t v98;
  void (**v99)(unint64_t *, ValueMetadata *, unint64_t *);
  unint64_t *v100;
  unint64_t v101;
  id *v102;
  id *v103;
  id *v104;
  ValueMetadata *v105;
  long long v106;
  long long v107;
  unsigned __int8 v108;
  void *v109;
  void v110[5];
  char v111;
  unsigned __int8 v112;
  unsigned __int8 v113;
  long long v114;
  long long v115;
  long long v116;
  long long v117;
  long long v118;
  long long v119;
  long long v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  void *v126;
  _OWORD v127[2];
  long long v128;
  long long v129;
  long long v130;
  long long v131;
  long long v132;
  long long v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;

  uint64_t v4 = (unint64_t *)type metadata accessor for IndexPath();
  uint64_t v5 = *(v4 - 1);
  MEMORY[0x1F4188790](v4);
  uint64_t KeyPath = (unint64_t *)((char *)&v90 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Text.Style?(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (ValueMetadata *)((char *)&v90 - v9);
  uint64_t v11 = *(void **)(v1 + 192);
  if (!v11) {
    return;
  }
  outlined init with copy of ShadowListDataSource<TableDataSourceAdaptor>?(v1, (uint64_t)&v114);
  if (!*((void *)&v115 + 1))
  {
    _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)&v114, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?);
    return;
  }
  uint64_t v105 = v10;
  uint64_t v134 = v122;
  uint64_t v135 = v123;
  uint64_t v136 = v124;
  uint64_t v137 = v125;
  uint64_t v130 = v118;
  uint64_t v131 = v119;
  uint64_t v132 = v120;
  unint64_t v133 = v121;
  v127[0] = v114;
  v127[1] = v115;
  __int16 v128 = v116;
  uint64_t v129 = v117;
  outlined init with copy of TableDataSourceAdaptor((uint64_t)v127, (uint64_t)&v114);
  unint64_t v12 = BYTE8(v124);
  outlined init with copy of TableDataSourceAdaptor((uint64_t)&v114, (uint64_t)v110);
  int v13 = v113;
  uint64_t v14 = v11;
  outlined destroy of TableDataSourceAdaptor((uint64_t)v110);
  outlined destroy of TableDataSourceAdaptor((uint64_t)&v114);
  if ((v12 & 1) != 0 || v13 == 2)
  {
    outlined destroy of AnyAccessibilityValue?((uint64_t)v127, (uint64_t)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListDataSource, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);

    return;
  }
  if (TableDataSourceAdaptor.headerDisplayMode.getter() == 1)
  {
    long long v93 = (id)*MEMORY[0x1E4FB2770];
    long long v94 = v14;
    id v15 = objc_msgSend(v14, sel_indexPathsForVisibleSupplementaryElementsOfKind_);
    uint64_t v16 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    *(void *)&uint64_t v114 = v16;
    swift_bridgeObjectRetain();
    specialized MutableCollection<>.sort(by:)((void **)&v114);
    swift_bridgeObjectRelease();
    uint64_t v14 = *(char **)(v114 + 16);
    uint64_t v17 = v105;
    long long v91 = v114;
    if (!v14)
    {
      uint64_t v14 = v94;
      (*(void (**)(ValueMetadata *, uint64_t, uint64_t, unint64_t *))(v5 + 56))(v105, 1, 1, v4);
LABEL_34:
      swift_release();
      goto LABEL_35;
    }
    long long v92 = a1;
    id v19 = *(id **)(v5 + 16);
    unint64_t v18 = v5 + 16;
    a1 = (void *)(v114 + ((*(unsigned __int8 *)(v18 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 64)));
    __int16 v95 = *(void *)(v18 + 56);
    uint64_t v101 = (unint64_t)v4;
    uint64_t v102 = (id *)(v18 + 32);
    uint64_t v99 = (void (**)(unint64_t *, ValueMetadata *, unint64_t *))(v18 + 16);
    uint64_t v100 = KeyPath;
    uint64_t v97 = (void (**)(unint64_t *, unint64_t *))(v18 - 8);
    uint64_t v98 = v18;
    uint64_t v103 = (id *)(v18 + 40);
    char v104 = v19;
    unint64_t v90 = (v18 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    ((void (*)(ValueMetadata *, void *, unint64_t *))v19)(v105, a1, v4);
    while (1)
    {
      uint64_t v96 = (void (*)(ValueMetadata *, uint64_t, uint64_t, unint64_t *))*v103;
      v96(v17, 0, 1, v4);
      if (((unsigned int (*)(ValueMetadata *, uint64_t, unint64_t *))*v102)(v17, 1, v4) == 1)
      {
        swift_release();
        a1 = v92;
        uint64_t v14 = v94;
        goto LABEL_35;
      }
      (*v99)(KeyPath, v17, v4);
      uint64_t v20 = IndexPath.section.getter();
      _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)v127, (uint64_t)v110, (uint64_t)&lazy cache variable for type metadata for ShadowListUpdateRecorder<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListUpdateRecorder, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
      specialized ShadowSectionCollection.init(_:)(v110, (uint64_t)&v114);
      unint64_t v12 = v20 & ~(v20 >> 63);
      uint64_t v21 = outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for ShadowSectionCollection<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowSectionCollection, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
      unint64_t v22 = *((void *)&v137 + 1);
      uint64_t v2 = (id *)v137;
      if (*(void *)(*((void *)&v137 + 1) + 16) || *(void *)(v137 + 16))
      {
        MEMORY[0x1F4188790](v21);
        uint64_t v4 = &v90;
        *(&v90 - 2) = (unint64_t)&type metadata for TableDataSourceAdaptor;
        *(&v90 - 1) = lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor();
        uint64_t KeyPath = (unint64_t *)swift_getKeyPath();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        uint64_t updated = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF7SwiftUI22ConcatenatedCollectionVySayAF10ListUpdateOyS2iGGALG_AKs5NeverOTB503_s7d10UI24ShadowhI114RecorderV12initialIndexy10SectionIDs_0H0QZ_03RowJ0_AFQZtAG_AIt_tFAA0dE0OyAgIGALcfu_AA22TableDataSourceAdaptorV_TG5s7KeyPathCyA2KGTf1cn_nTf4ng_n(v22, (uint64_t)v2);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_release_n();
        unint64_t v22 = (unint64_t)v127;
        unint64_t v12 = specialized ShadowListUpdateRecorder.applyUpdates<A>(_:to:)(updated, v12);
        swift_bridgeObjectRelease();
      }
      if ((v12 & 0x8000000000000000) != 0)
      {
        __break(1u);
LABEL_127:
        __break(1u);
        goto LABEL_128;
      }
      if (v12 >= *(void *)(*((void *)&v128 + 1) + 16)) {
        goto LABEL_127;
      }
      int v24 = *(unsigned __int8 *)(*((void *)&v128 + 1) + 96 * v12 + 40);
      outlined init with copy of TableDataSourceAdaptor((uint64_t)v127, (uint64_t)&v114);
      if (v24 == 1)
      {
        outlined destroy of TableDataSourceAdaptor((uint64_t)&v114);
        uint64_t KeyPath = v100;
        uint64_t v4 = (unint64_t *)v101;
      }
      else
      {
        outlined init with copy of TableDataSourceAdaptor((uint64_t)&v114, (uint64_t)v110);
        uint64_t KeyPath = v100;
        uint64_t v4 = (unint64_t *)v101;
        if (v12)
        {
          outlined destroy of TableDataSourceAdaptor((uint64_t)v110);
          outlined destroy of TableDataSourceAdaptor((uint64_t)&v114);
LABEL_10:
          (*v97)(KeyPath, v4);
          goto LABEL_11;
        }
        unint64_t v12 = v112;
        outlined init with copy of TableDataSourceAdaptor((uint64_t)v110, (uint64_t)&v106);
        int v28 = v108;
        outlined destroy of TableDataSourceAdaptor((uint64_t)&v106);
        outlined destroy of TableDataSourceAdaptor((uint64_t)v110);
        outlined destroy of TableDataSourceAdaptor((uint64_t)&v114);
        if ((v12 & 1) != 0 || v28 == 2) {
          goto LABEL_10;
        }
      }
      uint64_t v2 = (id *)v93;
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      unint64_t v12 = (unint64_t)objc_msgSend(v94, sel_supplementaryViewForElementKind_atIndexPath_, v2, isa, v90, v91);

      if (!v12) {
        goto LABEL_10;
      }
      type metadata accessor for TableCollectionViewCell();
      uint64_t v26 = swift_dynamicCastClass();
      if (!v26)
      {

        goto LABEL_10;
      }
      unint64_t v27 = *(void **)(v26 + direct field offset for ListCollectionViewCellBase.host);
      if (v27)
      {
        int v63 = v27;
        swift_release();
        type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
        type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for [AccessibilityNode], (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNode, MEMORY[0x1E4FBB320]);
        lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
        long long v93 = v63;
        ViewRendererHost.updateViewGraph<A>(body:)();
        uint64_t v2 = (id *)static AccessibilityCore.queryFilter(elements:options:)(v114, 4);
        swift_bridgeObjectRelease();
        if ((unint64_t)v2 >> 62) {
          goto LABEL_143;
        }
        a1 = v92;
        uint64_t v103 = *(id **)(((unint64_t)v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v103) {
          goto LABEL_90;
        }
        goto LABEL_95;
      }
      (*v97)(KeyPath, v4);

LABEL_11:
      a1 = (void *)((char *)a1 + v95);
      --v14;
      uint64_t v17 = v105;
      if (!v14)
      {
        a1 = v92;
        uint64_t v14 = v94;
        v96(v105, 1, 1, v4);
        goto LABEL_34;
      }
      ((void (*)(ValueMetadata *, void *, unint64_t *))v104)(v105, a1, v4);
    }
  }
  while (1)
  {
LABEL_35:
    uint64_t v29 = (void *)MEMORY[0x18C115780](0xD000000000000011, 0x80000001883361A0);
    id v30 = objc_msgSend(v14, sel_visibleSupplementaryViewsOfKind_, v29);

    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionReusableView);
    unint64_t v22 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    if (v22 >> 62)
    {
LABEL_128:
      swift_bridgeObjectRetain();
      unint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (!v31)
      {
LABEL_129:

        swift_bridgeObjectRelease();
        goto LABEL_130;
      }
    }
    else
    {
      unint64_t v31 = *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v31) {
        goto LABEL_129;
      }
    }
    if ((v22 & 0xC000000000000001) != 0)
    {
      uint64_t v32 = (id *)MEMORY[0x18C117680](0, v22);
    }
    else
    {
      if (!*(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        __break(1u);
LABEL_136:
        __break(1u);
        goto LABEL_137;
      }
      uint64_t v32 = (id *)*(id *)(v22 + 32);
    }
    char v104 = v32;
    swift_bridgeObjectRelease();
    type metadata accessor for TableGlobalHeader();
    unint64_t v33 = (void *)swift_dynamicCastClass();
    if (!v33) {
      goto LABEL_57;
    }
    char v34 = (void (*)(ValueMetadata *, uint64_t, uint64_t, unint64_t *))objc_msgSend(v33, sel_contentView);
    swift_getObjectType();
    uint64_t v35 = swift_conformsToProtocol2();
    if (v35) {
      uint64_t v36 = v35;
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v96 = v34;
    if (v35) {
      unint64_t v12 = (unint64_t)v34;
    }
    else {
      unint64_t v12 = 0;
    }
    if (!v12)
    {

LABEL_57:
      id v42 = v104;
LABEL_58:

      goto LABEL_130;
    }
    uint64_t ObjectType = swift_getObjectType();
    unint64_t v38 = ViewRendererHost.accessibilityNodes.getter(ObjectType, v36);
    unint64_t v31 = (unint64_t)static AccessibilityCore.queryFilter(elements:options:)(v38, 4);
    swift_bridgeObjectRelease();
    if (!(v31 >> 62))
    {
      uint64_t v102 = *(id **)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10);
      if (!v102) {
        goto LABEL_55;
      }
      goto LABEL_50;
    }
LABEL_137:
    swift_bridgeObjectRetain();
    char v88 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    uint64_t v102 = (id *)v88;
    if (!v88) {
      goto LABEL_55;
    }
LABEL_50:
    uint64_t v99 = (void (**)(unint64_t *, ValueMetadata *, unint64_t *))(v31 & 0xC000000000000001);
    uint64_t v101 = v31;
    if ((v31 & 0xC000000000000001) != 0)
    {
      id v39 = (id)MEMORY[0x18C117680](0, v31);
      goto LABEL_53;
    }
    if (*(void *)((v31 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
      break;
    }
    __break(1u);
LABEL_141:
    __break(1u);
LABEL_142:
    __break(1u);
LABEL_143:
    swift_bridgeObjectRetain();
    uint64_t v89 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    a1 = v92;
    uint64_t v103 = (id *)v89;
    if (v89)
    {
LABEL_90:
      uint64_t v98 = (unint64_t)v2 & 0xC000000000000001;
      uint64_t v102 = v2;
      if (((unint64_t)v2 & 0xC000000000000001) != 0)
      {
        char v64 = (id)MEMORY[0x18C117680](0, v2);
      }
      else
      {
        if (!*(void *)(((unint64_t)v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          swift_release();
          __break(1u);
          return;
        }
        char v64 = v2[4];
      }
      uint64_t v65 = v64;
      uint64_t v66 = v94;
      uint64_t v67 = AccessibilityNode.HeaderVisitor.visit(node:)(v64);

      if (!v67)
      {
        swift_bridgeObjectRelease();

LABEL_97:
        (*v97)(KeyPath, v4);
        goto LABEL_130;
      }
      uint64_t v2 = v102;
      if (v103 == (id *)1) {
        goto LABEL_95;
      }
      long long v91 = (unint64_t)v102 & 0xFFFFFFFFFFFFFF8;
      unint64_t v68 = 5;
      uint64_t v96 = (void (*)(ValueMetadata *, uint64_t, uint64_t, unint64_t *))(MEMORY[0x1E4FBC840] + 8);
      do
      {
        char v69 = v68 - 4;
        if (v98)
        {
          uint64_t v70 = (ValueMetadata *)MEMORY[0x18C117680](v68 - 4, v2);
        }
        else
        {
          if (v69 >= *(void *)(v91 + 16)) {
            goto LABEL_142;
          }
          uint64_t v70 = (ValueMetadata *)v2[v68];
        }
        if (__OFADD__(v69, 1)) {
          goto LABEL_141;
        }
        char v104 = (id *)(v68 - 3);
        uint64_t v105 = v70;
        uint64_t v71 = v92[1];
        uint64_t v99 = (void (**)(unint64_t *, ValueMetadata *, unint64_t *))*v92;
        __int16 v95 = v71;
        AccessibilityNode.attachment.getter((uint64_t *)&v114);
        uint64_t v72 = v114;

        if (*(void *)(v72 + 16)
          && (char v73 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
              (v74 & 1) != 0))
        {
          outlined init with copy of TableColumnList(*(void *)(v72 + 56) + 40 * v73, (uint64_t)v110);
          uint64_t v75 = v110[3];
          uint64_t v76 = v110[4];
          __swift_project_boxed_opaque_existential_1(v110, v110[3]);
          char v77 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v76 + 8);
          swift_bridgeObjectRetain();
          uint64_t v78 = v76;
          uint64_t v4 = (unint64_t *)v101;
          v77(&v106, v75, v78);
          uint64_t KeyPath = v100;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
        }
        else
        {
          long long v106 = 0u;
          long long v107 = 0u;
          swift_bridgeObjectRetain();
        }
        uint64_t v79 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
        _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Any?, (uint64_t)v96, MEMORY[0x1E4FBB718]);
        _sypSgMaTm_5(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, v79);
        if (swift_dynamicCast())
        {
          _s7SwiftUI4PathVSgWObTm_0((uint64_t)v110, (uint64_t)&v114, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext);
        }
        else
        {
          memset(v110, 0, sizeof(v110));
          uint64_t v111 = -2;
          uint64_t v114 = 0u;
          long long v115 = 0u;
          *(void *)&long long v116 = 0;
          BYTE8(v116) = -1;
          outlined destroy of AccessibilityTableContext??((uint64_t)v110, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, (uint64_t (*)(void))type metadata accessor for AccessibilityTextLayoutProperties??);
        }
        char v43 = v105;
        swift_bridgeObjectRelease_n();
        if (BYTE8(v116) == 255) {
          goto LABEL_100;
        }
        _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)&v114, (uint64_t)v110, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
        uint64_t v80 = (void (**)(unint64_t *, ValueMetadata *, unint64_t *))v110[0];
        if (v111 == 3)
        {
          outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
          if (v80 == v99)
          {
LABEL_121:
            AccessibilityNode.platformElement.getter();
            if (!v82) {
              uint64_t v82 = v43;
            }
            id v44 = v82;
            uint64_t v83 = v92;
            uint64_t v14 = v94;
            long long v109 = &unk_1ED5149B0;
            char v84 = swift_dynamicCastObjCProtocolConditional();
            if (v84)
            {
              uint64_t v85 = v84;
              _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
              char v86 = swift_allocObject();
              *(_OWORD *)(v86 + 16) = xmmword_188351940;
              *(void *)(v86 + 32) = v85;
              *(void *)&uint64_t v114 = v86;
              specialized Array._endMutation()();
              uint64_t v87 = v114;

              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              v83[1] = v87;
            }
            else
            {
LABEL_133:
              swift_bridgeObjectRelease();
            }
            goto LABEL_97;
          }
        }
        else
        {
          if (v111 != 4
            || (uint64_t v81 = vorrq_s8(*(int8x16_t *)&v110[1], *(int8x16_t *)&v110[3]),
                *(void *)&vorr_s8(*(int8x8_t *)v81.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v81, v81, 8uLL)) | v110[0]))
          {
            outlined destroy of AccessibilityTableContext((uint64_t)v110);
LABEL_100:
            outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
            goto LABEL_101;
          }
          outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
          if (!v99) {
            goto LABEL_121;
          }
        }
LABEL_101:

        ++v68;
        a1 = v92;
        uint64_t v2 = v102;
      }
      while (v104 != v103);
    }
LABEL_95:
    swift_bridgeObjectRelease();

    (*v97)(KeyPath, v4);
    uint64_t v14 = v94;
  }
  id v39 = *(id *)(v31 + 32);
LABEL_53:
  uint64_t v40 = v39;
  BOOL v41 = AccessibilityNode.HeaderVisitor.visit(node:)(v39);

  if (!v41)
  {
    swift_bridgeObjectRelease();

    id v42 = (id *)v96;
    goto LABEL_58;
  }
  unint64_t v31 = v101;
  if (v102 == (id *)1)
  {
LABEL_55:

    swift_bridgeObjectRelease();
    goto LABEL_130;
  }
  __int16 v95 = v101 & 0xFFFFFFFFFFFFFF8;
  unint64_t v12 = 5;
  uint64_t v98 = MEMORY[0x1E4FBC840] + 8;
  char v43 = &type metadata for AccessibilityTableContext;
  long long v92 = a1;
  while (1)
  {
    uint64_t v2 = (id *)v43;
    id v44 = (ValueMetadata *)(v12 - 4);
    if (v99)
    {
      uint64_t v45 = (ValueMetadata *)MEMORY[0x18C117680](v12 - 4, v31);
      uint64_t v46 = (id *)(v12 - 3);
      if (__OFADD__(v44, 1)) {
        goto LABEL_132;
      }
    }
    else
    {
      if ((unint64_t)v44 >= *(void *)(v95 + 16)) {
        goto LABEL_136;
      }
      uint64_t v45 = (ValueMetadata *)*(id *)(v31 + 8 * v12);
      uint64_t v46 = (id *)(v12 - 3);
      if (__OFADD__(v44, 1))
      {
LABEL_132:
        __break(1u);
        goto LABEL_133;
      }
    }
    uint64_t v103 = v46;
    uint64_t v100 = (unint64_t *)*a1;
    uint64_t v97 = (void (**)(unint64_t *, unint64_t *))a1[1];
    uint64_t v105 = v45;
    AccessibilityNode.attachment.getter((uint64_t *)&v114);
    uint64_t v4 = (unint64_t *)v114;

    if (v4[2]
      && (unint64_t v47 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.TableContextKey),
          (v48 & 1) != 0))
    {
      outlined init with copy of TableColumnList(v4[7] + 40 * v47, (uint64_t)v110);
      uint64_t v49 = v110[3];
      uint64_t v50 = v110[4];
      __swift_project_boxed_opaque_existential_1(v110, v110[3]);
      char v51 = v14;
      int v52 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v50 + 8);
      swift_bridgeObjectRetain();
      v52(&v106, v49, v50);
      uint64_t v14 = v51;
      a1 = v92;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v110);
    }
    else
    {
      long long v106 = 0u;
      long long v107 = 0u;
      swift_bridgeObjectRetain();
    }
    uint64_t v53 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v98, MEMORY[0x1E4FBB718]);
    uint64_t KeyPath = &lazy cache variable for type metadata for AccessibilityTableContext?;
    char v43 = (ValueMetadata *)v2;
    _sypSgMaTm_5(0, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v2, v53);
    if (swift_dynamicCast())
    {
      _s7SwiftUI4PathVSgWObTm_0((uint64_t)v110, (uint64_t)&v114, &lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v2);
    }
    else
    {
      memset(v110, 0, sizeof(v110));
      uint64_t v111 = -2;
      uint64_t v114 = 0u;
      long long v115 = 0u;
      *(void *)&long long v116 = 0;
      BYTE8(v116) = -1;
      outlined destroy of AccessibilityTableContext??((uint64_t)v110, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext??, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v2, (uint64_t (*)(void))type metadata accessor for AccessibilityTextLayoutProperties??);
    }
    char v54 = v105;
    swift_bridgeObjectRelease_n();
    if (BYTE8(v116) == 255) {
      goto LABEL_62;
    }
    _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)&v114, (uint64_t)v110, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v2, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
    uint64_t v55 = (unint64_t *)v110[0];
    if (v111 == 3) {
      break;
    }
    if (v111 != 4
      || (char v56 = vorrq_s8(*(int8x16_t *)&v110[1], *(int8x16_t *)&v110[3]),
          *(void *)&vorr_s8(*(int8x8_t *)v56.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v56, v56, 8uLL)) | v110[0]))
    {
      outlined destroy of AccessibilityTableContext((uint64_t)v110);
      char v43 = (ValueMetadata *)v2;
LABEL_62:
      outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v43, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
      goto LABEL_63;
    }
    char v43 = (ValueMetadata *)v2;
    outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v2, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    if (!v100) {
      goto LABEL_84;
    }
LABEL_63:

    ++v12;
    unint64_t v31 = v101;
    if (v103 == v102) {
      goto LABEL_55;
    }
  }
  outlined destroy of AnyAccessibilityValue?((uint64_t)&v114, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)v2, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  char v43 = (ValueMetadata *)v2;
  if (v55 != v100) {
    goto LABEL_63;
  }
LABEL_84:
  AccessibilityNode.platformElement.getter();
  if (!v57) {
    uint64_t v57 = v54;
  }
  uint64_t v58 = v57;
  uint64_t v126 = &unk_1ED5149B0;
  uint64_t v59 = swift_dynamicCastObjCProtocolConditional();
  if (v59)
  {
    uint64_t v60 = v59;
    _sypSgMaTm_5(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v61 = swift_allocObject();
    *(_OWORD *)(v61 + 16) = xmmword_188351940;
    *(void *)(v61 + 32) = v60;
    *(void *)&uint64_t v114 = v61;
    specialized Array._endMutation()();
    uint64_t v62 = v114;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1[1] = v62;
  }
  else
  {
    swift_bridgeObjectRelease();
  }
LABEL_130:
  outlined destroy of AnyAccessibilityValue?((uint64_t)v127, (uint64_t)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t)lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t)type metadata accessor for ShadowListDataSource, (uint64_t (*)(void))type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>);
}

uint64_t AccessibilityNode.accessibilityUserInputLabels.getter(uint64_t (*a1)(uint64_t, id))
{
  AccessibilityNode.attachment.getter(v8);

  uint64_t v3 = swift_bridgeObjectRetain();
  uint64_t v4 = specialized AccessibilityProperties.subscript.getter(v3);
  swift_bridgeObjectRelease_n();
  if (!v4) {
    return 0;
  }
  id v5 = v1;
  uint64_t v6 = a1(v4, v5);
  swift_bridgeObjectRelease();

  return v6;
}

id @objc AccessibilityNode.accessibilityLabel.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x18C115780](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t AccessibilityNode.accessibilityHint.getter()
{
  AccessibilityNode.attachment.getter(v7);
  uint64_t v0 = v7[0];

  v7[0] = v0;
  uint64_t v1 = AccessibilityProperties.hints.getter();
  swift_bridgeObjectRelease();
  if (one-time initialization token for comma != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Accessibility.comma;
  uint64_t v3 = qword_1EB308110;
  char v4 = byte_1EB308118;
  outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized AccessibilityNode.resolvedPlainTexts(_:separator:)(v1);
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t AccessibilityNode.accessibilityAttributedHint.getter()
{
  AccessibilityNode.attachment.getter(v7);
  uint64_t v0 = v7[0];

  v7[0] = v0;
  uint64_t v1 = AccessibilityProperties.hints.getter();
  swift_bridgeObjectRelease();
  if (one-time initialization token for comma != -1) {
    swift_once();
  }
  uint64_t v2 = static Text.Accessibility.comma;
  uint64_t v3 = qword_1EB308110;
  char v4 = byte_1EB308118;
  outlined copy of Text.Storage(static Text.Accessibility.comma, qword_1EB308110, byte_1EB308118);
  swift_bridgeObjectRetain();
  uint64_t v5 = specialized AccessibilityNode.resolvedAttributedTexts(_:includeDefaultAttributes:separator:)(v1);
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t AccessibilityNode.accessibilityLanguage.getter()
{
  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for Locale?, MEMORY[0x1E4F27A78], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v1 - 8);
  uint64_t v3 = (char *)&v11 - v2;
  uint64_t v4 = type metadata accessor for Locale();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  AccessibilityNode.attachment.getter((uint64_t *)&v11);
  uint64_t v8 = v11;

  *(void *)&long long v11 = v8;
  AccessibilityProperties.locale.getter();
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v3, 1, v4) == 1)
  {
    long long v11 = *(_OWORD *)(v0 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment);
    EnvironmentValues.locale.getter();
    outlined destroy of AccessibilityTableContext??((uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for Locale?, MEMORY[0x1E4F27A78], MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Text.Style?);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v3, v4);
  }
  uint64_t v9 = Locale.bcp47LanguageCode.getter();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return v9;
}

unint64_t AccessibilityNode.accessibilityTextualContext.getter()
{
  AccessibilityNode.attachment.getter(v2);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (char *)v2);
  swift_bridgeObjectRelease_n();
  if (LOBYTE(v2[0]) == 8) {
    return 0;
  }
  else {
    return AccessibilityTextContentType.platformValue.getter();
  }
}

double AccessibilityNode.accessibilityFrame.getter()
{
  LOBYTE(v12[0]) = 4;
  AccessibilityNode.contentFrame(with:)(v12, (uint64_t)v11);
  outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v11, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for CGRect?, (uint64_t)type metadata accessor for CGRect, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Style?);
  if (v13) {
    goto LABEL_7;
  }
  CGFloat v1 = *(double *)v12;
  CGFloat v2 = *(double *)&v12[1];
  CGFloat v3 = *(double *)&v12[2];
  CGFloat v4 = *(double *)&v12[3];
  if (!MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost])) {
    goto LABEL_7;
  }
  self;
  uint64_t v5 = (void *)swift_dynamicCastObjCClass();
  if (!v5) {
    swift_unknownObjectRelease();
  }
  uint64_t v6 = (UIView *)objc_msgSend(v5, sel_window);

  if (v6)
  {
    v14.origin.x = v1;
    v14.origin.y = v2;
    v14.size.width = v3;
    v14.size.height = v4;
    *(void *)&double v7 = (unint64_t)UIAccessibilityConvertFrameToScreenCoordinates(v14, v6);
  }
  else
  {
LABEL_7:
    v10.receiver = v0;
    v10.super_class = (Class)type metadata accessor for AccessibilityNode();
    objc_msgSendSuper2(&v10, sel_accessibilityFrame);
    return v8;
  }
  return v7;
}

UIBezierPath *AccessibilityNode.accessibilityPath.getter()
{
  CGFloat v1 = v0;
  AccessibilityNode.contentPath.getter((uint64_t)v14);
  uint64_t v2 = v14[0];
  uint64_t v3 = v14[1];
  uint64_t v4 = v14[2];
  uint64_t v5 = v14[3];
  char v6 = v15;
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v14, (uint64_t)v16, &lazy cache variable for type metadata for Path?, MEMORY[0x1E4F413B0]);
  if (v16[32] == 255)
  {
    v13.receiver = v1;
    v13.super_class = (Class)type metadata accessor for AccessibilityNode();
    return (UIBezierPath *)objc_msgSendSuper2(&v13, sel_accessibilityPath);
  }
  else
  {
    uint64_t v17 = v2;
    uint64_t v18 = v3;
    uint64_t v19 = v4;
    uint64_t v20 = v5;
    char v21 = v6;
    double v7 = (void *)Path.cgPath.getter();
    double v8 = (UIBezierPath *)objc_msgSend(self, sel_bezierPathWithCGPath_, v7);

    outlined release of Path?((uint64_t)v14);
    if (MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]))
    {
      self;
      uint64_t v9 = (void *)swift_dynamicCastObjCClass();
      if (!v9) {
        swift_unknownObjectRelease();
      }
      objc_super v10 = (UIView *)objc_msgSend(v9, sel_window);

      if (v10)
      {
        long long v11 = UIAccessibilityConvertPathToScreenCoordinates(v8, v10);

        return v11;
      }
    }
  }
  return v8;
}

Swift::Int __swiftcall AccessibilityNode._accessibilitySortPriority()()
{
  AccessibilityNode.attachment.getter(v5);

  uint64_t v0 = swift_bridgeObjectRetain();
  double v1 = COERCE_DOUBLE(specialized AccessibilityProperties.subscript.getter(v0));
  char v3 = v2;
  Swift::Int result = swift_bridgeObjectRelease_n();
  if (v3) {
    return 0;
  }
  if (v1 >= 9.22337204e18) {
    return 0x7FFFFFFFFFFFFFFFLL;
  }
  if (v1 <= -9.22337204e18) {
    return 0x8000000000000000;
  }
  if ((~*(void *)&v1 & 0x7FF0000000000000) != 0)
  {
    if (v1 > -9.22337204e18) {
      return (uint64_t)v1;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

__C::CGRect __swiftcall AccessibilityNode._accessibilityBounds(for:)(__C::_NSRange a1)
{
  Swift::Int length = a1.length;
  Swift::Int location = a1.location;
  AccessibilityNode.attachment.getter((uint64_t *)&v30);

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)&v30);
  swift_bridgeObjectRelease_n();
  if (v30 == 0.0) {
    goto LABEL_12;
  }
  if (*(void *)(*(void *)&v30 + 16) != 1)
  {
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  uint64_t v5 = *(void *)(*(void *)&v30 + 32);
  uint64_t v6 = *(void *)(*(void *)&v30 + 40);
  char v7 = *(unsigned char *)(*(void *)&v30 + 48);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v5, v6, v7);
  swift_bridgeObjectRelease();
  double v8 = *(void **)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  double v30 = *(double *)&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment];
  id v31 = v8;
  v29[0] = 0;
  v29[1] = 0;
  swift_retain();
  swift_retain();
  default argument 2 of Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  uint64_t v9 = (void *)Text.resolveAttributedString(in:includeDefaultAttributes:options:idiom:)();
  outlined consume of Text.Storage(v5, v6, v7);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if (!v9)
  {
LABEL_12:
    v28.receiver = v1;
    v28.super_class = (Class)type metadata accessor for AccessibilityNode();
    objc_msgSendSuper2(&v28, sel__accessibilityBoundsForRange_, location, length);
    CGFloat x = v20;
    CGFloat y = v21;
    CGFloat width = v22;
    CGFloat height = v23;
    goto LABEL_13;
  }
  specialized AccessibilityNode.withLayoutManager<A>(_:_:)(v9, location, length, (uint64_t)v29);
  outlined init with take of AccessibilityTextLayoutProperties??((uint64_t)v29, (uint64_t)&v30, (uint64_t)&lazy cache variable for type metadata for CGRect?, (uint64_t)type metadata accessor for CGRect, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Text.Style?);
  if (v34 == 1) {
    goto LABEL_11;
  }
  CGFloat v10 = v30;
  CGFloat v11 = *(double *)&v31;
  CGFloat v12 = v32;
  CGFloat v13 = v33;
  if (!MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost])) {
    goto LABEL_11;
  }
  self;
  CGRect v14 = (void *)swift_dynamicCastObjCClass();
  if (!v14) {
    swift_unknownObjectRelease();
  }
  char v15 = (UIView *)objc_msgSend(v14, sel_window);

  if (!v15)
  {
LABEL_11:

    goto LABEL_12;
  }
  v35.origin.CGFloat x = v10;
  v35.origin.CGFloat y = v11;
  v35.size.CGFloat width = v12;
  v35.size.CGFloat height = v13;
  CGRect v36 = UIAccessibilityConvertFrameToScreenCoordinates(v35, v15);
  CGFloat x = v36.origin.x;
  CGFloat y = v36.origin.y;
  CGFloat width = v36.size.width;
  CGFloat height = v36.size.height;

LABEL_13:
  double v24 = x;
  double v25 = y;
  double v26 = width;
  double v27 = height;
  result.size.CGFloat height = v27;
  result.size.CGFloat width = v26;
  result.origin.CGFloat y = v25;
  result.origin.CGFloat x = v24;
  return result;
}

_OWORD *AccessibilityNode.accessibilityContainer()@<X0>(_OWORD *a1@<X8>)
{
  AccessibilityNode.accessibilityParent(options:)(0, (uint64_t)&v10);
  if (v11) {
    return outlined init with take of Any(&v10, a1);
  }
  uint64_t v4 = MEMORY[0x18C119DF0](&v1[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost]);
  uint64_t v5 = MEMORY[0x1E4FBC840];
  if (v4)
  {
    uint64_t v6 = v4;
    *((void *)&v9 + 1) = swift_getObjectType();
    *(void *)&long long v8 = v6;
    outlined init with take of Any(&v8, a1);
  }
  else
  {
    v7.receiver = v1;
    v7.super_class = (Class)type metadata accessor for AccessibilityNode();
    if (objc_msgSendSuper2(&v7, sel_accessibilityContainer))
    {
      _bridgeAnyObjectToAny(_:)();
      swift_unknownObjectRelease();
    }
    else
    {
      long long v8 = 0u;
      long long v9 = 0u;
    }
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)&v8, (uint64_t)a1, (unint64_t *)&lazy cache variable for type metadata for Any?, v5 + 8);
  }
  return (_OWORD *)outlined destroy of AnyAccessibilityValue?((uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for Any?, v5 + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
}

void AccessibilityNode.accessibilityParent(options:)(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent);
  if (!v5)
  {
    if (MEMORY[0x18C119DF0](v2 + OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_viewRendererHost))
    {
      self;
      uint64_t v11 = swift_dynamicCastObjCClass();
      if (v11)
      {
        uint64_t v12 = v11;
        AccessibilityNode.visibility.getter(&v14);
        if ((v14 & 0x20) != 0)
        {
          *(void *)(a2 + 24) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIView);
          *(void *)a2 = v12;
          return;
        }
      }
      swift_unknownObjectRelease();
    }
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return;
  }
  id v13 = (id)v5;
  if ((a1 & 1) == 0 && (AccessibilityNode.visibility.getter(&v14), (v14 & 0x20) != 0))
  {
    AccessibilityNode.accessibilityParent(options:)(a1);
  }
  else
  {
    AccessibilityNode.platformElement.getter();
    if (!v6) {
      id v6 = v13;
    }
    objc_super v7 = v6;
    type metadata accessor for HostingScrollView();
    uint64_t v8 = swift_dynamicCastClass();
    if (v8)
    {
      long long v9 = *(void **)(v8 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
      *(void *)(a2 + 24) = type metadata accessor for HostingScrollView.PlatformGroupContainer();
      id v10 = v9;

      *(void *)a2 = v10;
    }
    else
    {

      *(void *)(a2 + 24) = type metadata accessor for AccessibilityNode();
      *(void *)a2 = v13;
    }
  }
}

id @objc AccessibilityNode._accessibilityUserTestingParent()(void *a1)
{
  id v1 = a1;
  AccessibilityNode.accessibilityParent(options:)(1, (uint64_t)v10);

  uint64_t v2 = v11;
  if (v11)
  {
    char v3 = __swift_project_boxed_opaque_existential_1(v10, v11);
    uint64_t v4 = *(void *)(v2 - 8);
    double v5 = MEMORY[0x1F4188790](v3);
    objc_super v7 = (char *)v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v4 + 16))(v7, v5);
    uint64_t v8 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v7, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

double AccessibilityNode.accessibilityActivationPoint.getter()
{
  id v1 = v0;
  AccessibilityNode.attachment.getter(v19.i64);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, &v19);
  swift_bridgeObjectRelease();
  if (v21)
  {
    int8x16_t v3 = v19;
    char v4 = v20;
    int v5 = ~(_BYTE)v20;
    outlined consume of AccessibilityActivationPointStorage?(v19.i64[0], v19.i64[1], v20, v21);
    swift_bridgeObjectRelease();
    if (v5)
    {
      int8x16_t v19 = v3;
      LOBYTE(v20) = v4;
      id v6 = v0;
      *(double *)&uint64_t v7 = COERCE_DOUBLE(AccessibilityNode.resolvedActivationPoint(for:)((long long *)v19.i8));
      char v9 = v8;

      goto LABEL_6;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  *(double *)&uint64_t v7 = COERCE_DOUBLE(AccessibilityNode.childActivationPoint(implicit:)(0));
  char v9 = v10;
LABEL_6:
  if (v9 == -1)
  {
    uint64_t v11 = AccessibilityNode.implicitActivationPoint.getter();
    if (v12 == -1)
    {
      objc_msgSend(v1, sel_accessibilityFrame);
      CGFloat x = v22.origin.x;
      CGFloat y = v22.origin.y;
      CGFloat width = v22.size.width;
      CGFloat height = v22.size.height;
      double v13 = v22.origin.x + CGRectGetWidth(v22) * 0.5;
      v23.origin.CGFloat x = x;
      v23.origin.CGFloat y = y;
      v23.size.CGFloat width = width;
      v23.size.CGFloat height = height;
      CGRectGetHeight(v23);
      return v13;
    }
    uint64_t v7 = v11;
  }
  return *(double *)&v7;
}

Class @objc AccessibilityNode.accessibilityDragSourceDescriptors.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3(0);

  if (v5)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityLocationDescriptor);
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }

  return v6.super.isa;
}

id AccessibilityNode.accessibilityViewIsModal.getter()
{
  id v1 = v0;
  AccessibilityNode.attachment.getter(v7);
  uint64_t v2 = v7[0];

  v7[0] = v2;
  char v6 = 14;
  char v3 = AccessibilityProperties.subscript.getter();
  swift_bridgeObjectRelease();
  if (v3 != 2) {
    return (id)(v3 & 1);
  }
  v5.receiver = v1;
  v5.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v5, sel_accessibilityViewIsModal);
}

uint64_t AccessibilityNode.accessibilityNavigationStyle.getter()
{
  LOBYTE(v12) = 4;
  AccessibilityNode.impliedVisibility(consideringParent:with:)(1, (unsigned __int8 *)&v12, v14);
  if (v14[0] - 1 > 1)
  {
    char v10 = (objc_class *)type metadata accessor for AccessibilityNode();
    v15.receiver = v0;
    v15.super_class = v10;
    return (uint64_t)objc_msgSendSuper2(&v15, sel_accessibilityNavigationStyle);
  }
  else
  {
    swift_beginAccess();
    unint64_t v1 = swift_bridgeObjectRetain();
    unint64_t v2 = specialized Sequence.filter(_:)(v1, 0);
    swift_bridgeObjectRelease();
    if (v2 >> 62) {
      goto LABEL_24;
    }
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    for (; v3; uint64_t v3 = _CocoaArrayWrapper.endIndex.getter())
    {
      uint64_t v4 = 4;
      while (1)
      {
        id v5 = (v2 & 0xC000000000000001) != 0 ? (id)MEMORY[0x18C117680](v4 - 4, v2) : *(id *)(v2 + 8 * v4);
        char v6 = v5;
        uint64_t v7 = v4 - 3;
        if (__OFADD__(v4 - 4, 1)) {
          break;
        }
        AccessibilityNode.visibility.getter(&v12);
        char v8 = v12;
        if ((v12 & 4) != 0 || (v12 & 8) != 0 && (v13 & 4) == 0) {
          goto LABEL_16;
        }
        if ((v12 & 0x10) != 0) {
          goto LABEL_22;
        }
        if ((v12 & 0x40) != 0) {
          goto LABEL_16;
        }
        if ((v12 & 1) == 0)
        {
          if ((v12 & 2) != 0)
          {
LABEL_22:
            swift_bridgeObjectRelease_n();

            return 1;
          }
LABEL_16:

          goto LABEL_17;
        }

        if ((v8 & 2) != 0)
        {
          swift_bridgeObjectRelease_n();
          return 1;
        }
LABEL_17:
        ++v4;
        if (v7 == v3) {
          goto LABEL_25;
        }
      }
      __break(1u);
LABEL_24:
      swift_bridgeObjectRetain();
    }
LABEL_25:
    uint64_t v9 = 2;
    swift_bridgeObjectRelease_n();
  }
  return v9;
}

BOOL AccessibilityNode._accessibilityExplicitlyNonInteractable.getter()
{
  AccessibilityNode.attachment.getter(v4);
  uint64_t v0 = v4[0];

  v4[0] = v0;
  char v1 = AccessibilityProperties.subscript.getter();
  swift_bridgeObjectRelease();
  return (v1 & 1) == 0 && v1 != 2;
}

unint64_t AccessibilityNode.accessibilityCustomActions.getter()
{
  AccessibilityNode.attachment.getter(v10);

  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized AccessibilityProperties.subscript.getter(v1);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
  swift_retain();
  uint64_t v4 = swift_retain();
  id v5 = specialized Sequence<>.resolved(in:)(v4, v3, v2);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  char v6 = v0;
  unint64_t v7 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionV8ResolvedVG_So021UIAccessibilityCustomH0Cs5NeverOTg503_s7d4UI17g20NodeC26accessibilityk15ActionsSaySo015j2F6h19CGSgvgAfA03AnycI0V8I6VXEfU_AF0gO0CTf1cn_nTf4ng_n((uint64_t)v5);
  swift_bridgeObjectRelease();

  if (v7 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v9) {
      return v7;
    }
    goto LABEL_3;
  }
  if (!*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
LABEL_3:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v7;
}

BOOL closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a2 + 16;
  swift_beginAccess();
  uint64_t v5 = MEMORY[0x18C119DF0](v4);
  if (v5)
  {
    char v6 = (void *)v5;
    id v7 = objc_msgSend(a3, sel_string);
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    char v10 = v9;

    v11._countAndFlagsBits = v8;
    v11._object = v10;
    Swift::Bool v12 = AccessibilityNode.sendAction(named:)(v11);

    swift_bridgeObjectRelease();
  }
  else
  {
    return 0;
  }
  return v12;
}

id AccessibilityNode.accessibilityDirectTouchOptions.getter()
{
  AccessibilityNode.attachment.getter(&v4);

  uint64_t v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, &v4);
  swift_bridgeObjectRelease_n();
  if (v4 != 2) {
    return v5;
  }
  v3.receiver = v0;
  v3.super_class = (Class)type metadata accessor for AccessibilityNode();
  return objc_msgSendSuper2(&v3, sel_accessibilityDirectTouchOptions);
}

char *AccessibilityNode._accessibilityUserDefinedLinkedUIElements.getter()
{
  uint64_t v1 = 0;
  uint64_t v2 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_relationshipScope];
  if (v2)
  {
    objc_super v3 = v0;
    Swift::UInt v4 = *(void *)&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_id];
    swift_beginAccess();
    uint64_t v5 = *(void *)(v2 + 32);
    if (*(void *)(v5 + 16) && (unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(v4, 2u), (v7 & 1) != 0))
    {
      uint64_t v8 = *(void *)(*(void *)(v5 + 56) + 8 * v6);
      swift_endAccess();
      swift_retain();
      swift_bridgeObjectRetain();
      unint64_t v9 = specialized Sequence.reduce<A>(into:_:)(MEMORY[0x1E4FBC860], v8, v2, 2u);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_endAccess();
      swift_retain();
      unint64_t v9 = MEMORY[0x1E4FBC860];
    }
    id v10 = v3;
    uint64_t v11 = specialized _ArrayProtocol.filter(_:)(v9, (uint64_t)v10);
    swift_release();
    swift_bridgeObjectRelease();

    if (v11 < 0 || (v11 & 0x4000000000000000) != 0)
    {
      unint64_t v16 = swift_bridgeObjectRetain();
      unint64_t v12 = (unint64_t)specialized _copyCollectionToContiguousArray<A>(_:)(v16);
      swift_bridgeObjectRelease();
    }
    else
    {
      unint64_t v12 = v11 & 0xFFFFFFFFFFFFFF8;
      swift_bridgeObjectRetain();
    }
    v17[0] = v12;
    specialized MutableCollection<>.sort(by:)((uint64_t *)v17, 0, 4, 2);
    swift_bridgeObjectRelease();
    unint64_t v13 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_AF08PlatformfB8Protocol_So8NSObjectCXcs5NeverOTg503_s7d4UI17fg58C41_accessibilityUserDefinedLinkedUIElementsSayypGSgvgAA08h3C15bi4_So8J62CXcACcfu_32df5be316035e77621aaf8da9181039cbAcaG_AIXcTf3nnnpk_nTf1cn_n(v17[0]);
    swift_release();
    if (v13 >> 62)
    {
      swift_bridgeObjectRetain();
      uint64_t v14 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v14) {
        goto LABEL_11;
      }
    }
    else if (*(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_11:
      uint64_t v1 = specialized _arrayForceCast<A, B>(_:)(v13);
      swift_bridgeObjectRelease();
      return v1;
    }
    swift_bridgeObjectRelease();
    return 0;
  }
  return v1;
}

Swift::Bool __swiftcall AccessibilityNode.accessibilityScroll(_:)(UIAccessibilityScrollDirection a1)
{
  if ((unint64_t)(a1 - 1) >= 6)
  {
    Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else if (specialized AccessibilityNode.sendAction<A>(_:value:)(0x30102000103uLL >> (8 * (a1 - 1))))
  {
    return 1;
  }
  else
  {
    v4.receiver = v1;
    v4.super_class = (Class)type metadata accessor for AccessibilityNode();
    return objc_msgSendSuper2(&v4, sel_accessibilityScroll_, a1);
  }
  return result;
}

Swift::Bool __swiftcall AccessibilityNode._accessibilityCanPerformAction(_:)(Swift::UInt32 a1)
{
  uint64_t v2 = *(void *)&a1;
  if (a1 != 2007 && a1 != 2006 && a1 != 2008 && a1 != 2009 && a1 != 2019 && a1 != 2020) {
    goto LABEL_24;
  }
  AccessibilityNode.attachment.getter(v18);

  uint64_t v8 = swift_bridgeObjectRetain();
  uint64_t v9 = specialized AccessibilityProperties.subscript.getter(v8);
  swift_bridgeObjectRelease_n();
  uint64_t v10 = *(void *)(v9 + 16);
  if (!v10)
  {
LABEL_23:
    swift_bridgeObjectRelease();
LABEL_24:
    unint64_t v16 = (objc_class *)type metadata accessor for AccessibilityNode();
    v19.receiver = v1;
    v19.super_class = v16;
    return objc_msgSendSuper2(&v19, sel__accessibilityCanPerformAction_, v2);
  }
  uint64_t v11 = (void *)(v9 + 32);
  swift_bridgeObjectRetain();
  while (1)
  {
    uint64_t v12 = v11[3];
    uint64_t v13 = v11[4];
    __swift_project_boxed_opaque_existential_1(v11, v12);
    uint64_t v14 = *(uint64_t (**)(unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v13 + 80);
    unint64_t v15 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
    if (v14(v15, &type metadata for AccessibilityScrollAction, v15, v12, v13)) {
      break;
    }
    v11 += 6;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      goto LABEL_23;
    }
  }
  swift_bridgeObjectRelease_n();
  return 1;
}

void AccessibilityNode.applyProperties(to:includingRelations:)(void *a1, char a2)
{
  objc_super v3 = v2;
  uint64_t v5 = a1;
  objc_msgSend(a1, sel_setAccessibilityContainer_, objc_msgSend(v2, sel_accessibilityContainer));
  swift_unknownObjectRelease();
  id v6 = objc_msgSend(v2, sel_accessibilityLanguage);
  objc_msgSend(v5, sel_setAccessibilityLanguage_, v6);

  if (v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] == 1)
  {
    v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_platformElementPropertiesDirty] = 0;
    AccessibilityNode.attachment.getter(&aBlock);
    uint64_t v7 = aBlock;

    uint64_t aBlock = v7;
    AccessibilityNode.applyProperties(_:to:)(&aBlock, v5);
    swift_bridgeObjectRelease();
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(0, 0, 0, 0, 0x7DAu, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(0, 0, 0, 1uLL, 0x7DDu, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(2, 0, 0x7D4u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(2, 1, 0x7D5u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(0, 0x7D7u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(2, 0x7D6u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(3, 0x7D8u, v5);
    specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(1, 0x7D9u, v5);
    AccessibilityNode.attachment.getter(&aBlock);

    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = specialized AccessibilityProperties.subscript.getter(v8);
    swift_bridgeObjectRelease_n();
    uint64_t v10 = *(void *)&v3[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_environment + 8];
    swift_retain();
    uint64_t v11 = swift_retain();
    uint64_t v12 = specialized Sequence<>.resolved(in:)(v11, v10, v9);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v13 = (void *)*((void *)v12 + 2);
    swift_bridgeObjectRelease();
    uint64_t v14 = &unk_18834C000;
    if (v13)
    {
      uint64_t v15 = swift_allocObject();
      swift_unknownObjectWeakInit();
      CGRect v36 = partial apply for closure #1 in AccessibilityNode.applyProperties(to:includingRelations:);
      uint64_t v37 = v15;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v33 = 1107296256;
      char v34 = thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?);
      uint64_t v35 = (uint64_t)&block_descriptor_37;
      uint64_t v13 = _Block_copy(&aBlock);
      swift_release();
    }
    objc_msgSend(v5, sel_setAccessibilityCustomActionsBlock_, v13);
    _Block_release(v13);
    AccessibilityNode.attachment.getter(&aBlock);

    uint64_t v16 = swift_bridgeObjectRetain();
    uint64_t v17 = specialized AccessibilityProperties.subscript.getter(v16);
    swift_bridgeObjectRelease_n();
    uint64_t v18 = *(void *)(v17 + 16);
    if (v18)
    {
      id v31 = v5;
      objc_super v19 = (void *)(v17 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t aBlock = 0;
        uint64_t v33 = 0;
        char v34 = 0;
        uint64_t v35 = 2;
        uint64_t v21 = v19[3];
        uint64_t v20 = v19[4];
        __swift_project_boxed_opaque_existential_1(v19, v21);
        CGRect v22 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v20 + 80);
        unint64_t v23 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
        if (v22(&aBlock, &type metadata for AccessibilityVoidAction, v23, v21, v20)) {
          break;
        }
        v19 += 6;
        if (!--v18)
        {
          swift_bridgeObjectRelease_n();
          double v24 = 0;
          uint64_t v5 = v31;
          uint64_t v14 = (void *)&unk_18834C000;
          goto LABEL_11;
        }
      }
      swift_bridgeObjectRelease_n();
      uint64_t v25 = swift_allocObject();
      swift_unknownObjectWeakInit();
      CGRect v36 = partial apply for closure #2 in AccessibilityNode.applyProperties(to:includingRelations:);
      uint64_t v37 = v25;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v14 = &unk_18834C000;
      uint64_t v33 = 1107296256;
      char v34 = thunk for @escaping @callee_guaranteed () -> (@unowned Bool);
      uint64_t v35 = (uint64_t)&block_descriptor_8;
      double v24 = _Block_copy(&aBlock);
      swift_release();
      uint64_t v5 = v31;
    }
    else
    {
      swift_bridgeObjectRelease();
      double v24 = 0;
    }
LABEL_11:
    objc_msgSend(v5, sel_setAccessibilityMagicTapBlock_, v24);
    _Block_release(v24);
    type metadata accessor for HostingScrollView();
    uint64_t v26 = swift_dynamicCastClass();
    if (v26)
    {
      double v27 = *(void **)(v26 + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
      uint64_t v28 = swift_allocObject();
      swift_unknownObjectWeakInit();
      CGRect v36 = partial apply for closure #1 in AccessibilityNode.applyChildren(to:);
      uint64_t v37 = v28;
      uint64_t aBlock = MEMORY[0x1E4F143A8];
      uint64_t v33 = v14[362];
      char v34 = thunk for @escaping @callee_guaranteed () -> (@owned [Any]?);
      uint64_t v35 = (uint64_t)&block_descriptor_4;
      uint64_t v29 = _Block_copy(&aBlock);
      id v30 = v5;
      swift_release();
      objc_msgSend(v27, sel_setAccessibilityElementsBlock_, v29);
      _Block_release(v29);
      objc_msgSend(v27, sel_setShouldGroupAccessibilityChildren_, 1);
    }
    if (a2) {
      AccessibilityNode.applyRelations(to:)(v5);
    }
  }
}

void specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t a1, uint64_t a2), unint64_t a4, unsigned int a5, void *a6)
{
  uint64_t v10 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v11 = NSClassFromString(v10);

  if (v11)
  {
    AccessibilityNode.attachment.getter(&aBlock);

    uint64_t v12 = swift_bridgeObjectRetain();
    uint64_t v13 = specialized AccessibilityProperties.subscript.getter(v12);
    swift_bridgeObjectRelease_n();
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
      id v23 = a6;
      unsigned int v24 = a5;
      uint64_t v15 = (void *)(v13 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t aBlock = a1;
        uint64_t v28 = a2;
        uint64_t v29 = a3;
        id v30 = (void *)a4;
        uint64_t v16 = v15[3];
        uint64_t v17 = v15[4];
        __swift_project_boxed_opaque_existential_1(v15, v16);
        uint64_t v18 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v17 + 80);
        unint64_t v19 = lazy protocol witness table accessor for type AccessibilityVoidAction and conformance AccessibilityVoidAction();
        if (v18(&aBlock, &type metadata for AccessibilityVoidAction, v19, v16, v17)) {
          break;
        }
        v15 += 6;
        if (!--v14)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      swift_bridgeObjectRelease_n();
      if (objc_msgSend(v23, sel_respondsToSelector_, sel__accessibilitySetActionBlock_withValue_forKey_))
      {
        uint64_t v20 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v21 = (void *)swift_allocObject();
        _OWORD v21[2] = v20;
        v21[3] = a1;
        v21[4] = a2;
        v21[5] = a3;
        void v21[6] = a4;
        id v31 = partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:);
        double v32 = v21;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v28 = 1107296256;
        uint64_t v29 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool);
        id v30 = &block_descriptor_35;
        CGRect v22 = _Block_copy(&aBlock);
        outlined copy of AccessibilityActionKind.ActionKind(a1, a2, (char)a3, a4);
        swift_release();
        objc_msgSend(v23, sel__accessibilitySetActionBlock_withValue_forKey_, v22, 0, v24);
        _Block_release(v22);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(char a1, char a2, unsigned int a3, void *a4)
{
  uint64_t v8 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v9 = NSClassFromString(v8);

  if (v9)
  {
    AccessibilityNode.attachment.getter(&aBlock);

    uint64_t v10 = swift_bridgeObjectRetain();
    uint64_t v11 = specialized AccessibilityProperties.subscript.getter(v10);
    swift_bridgeObjectRelease_n();
    uint64_t v12 = *(void *)(v11 + 16);
    if (v12)
    {
      char v21 = a2;
      id v22 = a4;
      unsigned int v23 = a3;
      uint64_t v13 = (void *)(v11 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        LOBYTE(aBlock) = a1;
        uint64_t v15 = v13[3];
        uint64_t v14 = v13[4];
        __swift_project_boxed_opaque_existential_1(v13, v15);
        uint64_t v16 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v14 + 80);
        unint64_t v17 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
        if (v16(&aBlock, &type metadata for AccessibilityAdjustableAction, v17, v15, v14)) {
          break;
        }
        v13 += 6;
        if (!--v12)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      swift_bridgeObjectRelease_n();
      if (objc_msgSend(v22, sel_respondsToSelector_, sel__accessibilitySetActionBlock_withValue_forKey_))
      {
        uint64_t v18 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v19 = swift_allocObject();
        *(void *)(v19 + 16) = v18;
        *(unsigned char *)(v19 + 24) = a1;
        *(unsigned char *)(v19 + 25) = v21 & 1;
        uint64_t v28 = partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:);
        uint64_t v29 = v19;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v25 = 1107296256;
        uint64_t v26 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool);
        double v27 = &block_descriptor_28_0;
        uint64_t v20 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v22, sel__accessibilitySetActionBlock_withValue_forKey_, v20, 0, v23);
        _Block_release(v20);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

void specialized AccessibilityNode.applyAction<A>(_:value:key:to:)(char a1, unsigned int a2, void *a3)
{
  id v6 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v7 = NSClassFromString(v6);

  if (v7)
  {
    AccessibilityNode.attachment.getter(&aBlock);

    uint64_t v8 = swift_bridgeObjectRetain();
    uint64_t v9 = specialized AccessibilityProperties.subscript.getter(v8);
    swift_bridgeObjectRelease_n();
    uint64_t v10 = *(void *)(v9 + 16);
    if (v10)
    {
      char v19 = a1;
      id v20 = a3;
      unsigned int v21 = a2;
      uint64_t v11 = (void *)(v9 + 32);
      swift_bridgeObjectRetain();
      while (1)
      {
        uint64_t v13 = v11[3];
        uint64_t v12 = v11[4];
        __swift_project_boxed_opaque_existential_1(v11, v13);
        uint64_t v14 = *(uint64_t (**)(unint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v12 + 80);
        unint64_t v15 = lazy protocol witness table accessor for type AccessibilityScrollAction and conformance AccessibilityScrollAction();
        if (v14(v15, &type metadata for AccessibilityScrollAction, v15, v13, v12)) {
          break;
        }
        v11 += 6;
        if (!--v10)
        {
          swift_bridgeObjectRelease_n();
          return;
        }
      }
      swift_bridgeObjectRelease_n();
      if (objc_msgSend(v20, sel_respondsToSelector_, sel__accessibilitySetActionBlock_withValue_forKey_))
      {
        uint64_t v16 = swift_allocObject();
        swift_unknownObjectWeakInit();
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v16;
        *(unsigned char *)(v17 + 24) = v19;
        uint64_t v26 = partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:);
        uint64_t v27 = v17;
        uint64_t aBlock = MEMORY[0x1E4F143A8];
        uint64_t v23 = 1107296256;
        unsigned int v24 = thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool);
        uint64_t v25 = &block_descriptor_21;
        uint64_t v18 = _Block_copy(&aBlock);
        swift_release();
        objc_msgSend(v20, sel__accessibilitySetActionBlock_withValue_forKey_, v18, 0, v21);
        _Block_release(v18);
      }
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
}

uint64_t closure #1 in AccessibilityNode.applyProperties(to:includingRelations:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  objc_super v3 = v2;
  id v4 = objc_msgSend(v2, sel_accessibilityCustomActions);

  if (!v4) {
    return MEMORY[0x1E4FBC860];
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  return v5;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(a1, &lazy cache variable for type metadata for UIAccessibilityCustomAction);
}

id closure #2 in AccessibilityNode.applyProperties(to:includingRelations:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (!v2) {
    return 0;
  }
  objc_super v3 = v2;
  id v4 = objc_msgSend(v2, sel_accessibilityPerformMagicTap);

  return v4;
}

void AccessibilityNode.applyRelations(to:)(void *a1)
{
  objc_super v3 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v4 = NSClassFromString(v3);

  if (v4)
  {
    id v5 = objc_msgSend(v1, sel__accessibilityUserDefinedLinkedUIElements);
    if (v5)
    {
      id v6 = v5;
      uint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (objc_msgSend(a1, sel_respondsToSelector_, sel__setAccessibilityLinkedUIElementsBlock_))
      {
        uint64_t v8 = swift_allocObject();
        *(void *)(v8 + 16) = v7;
        void v10[4] = protocol witness for KeyedEncodingContainerProtocol.codingPath.getter in conformance _JSONKeyedEncodingContainer<A>;
        v10[5] = v8;
        v10[0] = MEMORY[0x1E4F143A8];
        v10[1] = 1107296256;
        uint64_t v10[2] = thunk for @escaping @callee_guaranteed () -> (@owned [Any]?);
        void v10[3] = &block_descriptor_14;
        uint64_t v9 = _Block_copy(v10);
        swift_release();
        objc_msgSend(a1, sel__setAccessibilityLinkedUIElementsBlock_, v9);
        _Block_release(v9);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
  }
}

id thunk for @escaping @callee_guaranteed () -> (@owned String?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  uint64_t v5 = v4;
  swift_release();
  if (v5)
  {
    id v6 = (void *)MEMORY[0x18C115780](v3, v5);
    swift_bridgeObjectRelease();
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void *closure #4 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, SEL *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v3);
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = [v4 *a2];

    if (v6)
    {
      id v7 = AXAttributedStringCreate(v6);
      uint64_t v5 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v5;
}

void *closure #7 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = objc_msgSend(v2, sel_accessibilityIdentifier);

    if (v4)
    {
      uint64_t v3 = (void *)static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

Class closure #8 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, SEL *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  Class result = (Class)MEMORY[0x18C119DF0](v3);
  if (result)
  {
    Class v5 = result;
    [result *a2];

    return Int._bridgeToObjectiveC()().super.super.isa;
  }
  return result;
}

double closure #10 in AccessibilityNode.applyProperties(_:to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7 = a3 + 16;
  swift_beginAccess();
  uint64_t v8 = (void *)MEMORY[0x18C119DF0](v7);
  if (v8
    && (uint64_t v9 = v8,
        id v10 = objc_msgSend(v8, sel_accessibilityDataTableCellElementForRow_column_, a1, a2),
        v9,
        v10))
  {
    *(void *)(a4 + 24) = swift_getObjectType();
    *(void *)a4 = v10;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
  }
  return result;
}

id thunk for @escaping @callee_guaranteed (@unowned Int, @unowned Int) -> (@out Any?)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v5)(void *__return_ptr, uint64_t, uint64_t);
  uint64_t v6;
  void *v7;
  uint64_t v8;
  double v9;
  uint64_t v10;
  char *v11;
  void *v12;
  void v14[3];
  uint64_t v15;
  uint64_t vars8;

  Class v5 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(a1 + 32);
  swift_retain();
  v5(v14, a2, a3);
  swift_release();
  id v6 = v15;
  if (v15)
  {
    uint64_t v7 = __swift_project_boxed_opaque_existential_1(v14, v15);
    uint64_t v8 = *(void *)(v6 - 8);
    uint64_t v9 = MEMORY[0x1F4188790](v7);
    uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v8 + 16))(v11, v9);
    uint64_t v12 = (void *)_bridgeAnythingToObjectiveC<A>(_:)();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v6);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  }
  else
  {
    uint64_t v12 = 0;
  }

  return v12;
}

char *closure #11 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  id v4 = (void *)MEMORY[0x18C119DF0](v3);
  if (!v4) {
    return 0;
  }
  Class v5 = v4;
  id v6 = (char *)objc_msgSend(v4, sel_accessibilityHeaderElementsForColumn_, a1);

  if (v6)
  {
    type metadata accessor for UIAccessibilityContainerDataTableCell();
    unint64_t v7 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

    id v6 = specialized _arrayForceCast<A, B>(_:)(v7);
    swift_bridgeObjectRelease();
  }
  return v6;
}

Class thunk for @escaping @callee_guaranteed (@unowned Int) -> (@owned [Any]?)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  swift_retain();
  uint64_t v4 = v3(a2);
  swift_release();
  if (v4)
  {
    v5.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v5.super.Class isa = 0;
  }

  return v5.super.isa;
}

Class closure #12 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  Class result = (Class)MEMORY[0x18C119DF0](v1);
  if (result)
  {
    Class v3 = result;
    [(objc_class *)result accessibilityColumnRange];

    return _NSRange._bridgeToObjectiveC()().super.isa;
  }
  return result;
}

double thunk for @escaping @callee_guaranteed () -> (@unowned CGPoint)(uint64_t a1)
{
  uint64_t v1 = *(double (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  double v3 = v1(v2);
  swift_release();
  return v3;
}

double closure #15 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  if (!v2) {
    return 0.0;
  }
  double v3 = v2;
  objc_msgSend(v2, sel_accessibilityFrame);
  double v5 = v4;

  return v5;
}

double thunk for @escaping @callee_guaranteed () -> (@unowned CGRect)(uint64_t a1)
{
  uint64_t v1 = *(double (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  double v3 = v1(v2);
  swift_release();
  return v3;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [AXCustomContent]?)(uint64_t a1)
{
  return thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(a1, (unint64_t *)&lazy cache variable for type metadata for AXCustomContent);
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [UIAccessibilityCustomAction]?)(uint64_t a1, unint64_t *a2)
{
  double v3 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v4 = swift_retain();
  uint64_t v5 = v3(v4);
  swift_release();
  if (v5)
  {
    type metadata accessor for NSObject(0, a2);
    v6.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v6.super.Class isa = 0;
  }

  return v6.super.isa;
}

uint64_t closure #18 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (!v2) {
    return *MEMORY[0x1E4FB2570];
  }
  double v3 = (void *)v2;
  uint64_t v4 = AccessibilityNode.resolvedTraits.getter();

  return v4;
}

uint64_t thunk for @escaping @callee_guaranteed () -> (@unowned UIAccessibilityTraits)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  return v3;
}

id closure #16 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1, SEL *a2)
{
  uint64_t v3 = a1 + 16;
  swift_beginAccess();
  uint64_t v4 = (void *)MEMORY[0x18C119DF0](v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = v4;
  id v6 = [v4 *a2];

  return v6;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed Any?) -> (@unowned Bool)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(uint64_t (**)(long long *))(a1 + 32);
  if (a2)
  {
    *((void *)&v7 + 1) = swift_getObjectType();
    *(void *)&long long v6 = a2;
  }
  else
  {
    long long v6 = 0u;
    long long v7 = 0u;
  }
  swift_retain();
  swift_unknownObjectRetain();
  char v4 = v3(&v6);
  swift_release();
  outlined destroy of AnyAccessibilityValue?((uint64_t)&v6, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  return v4 & 1;
}

Class thunk for @escaping @callee_guaranteed () -> (@owned [Any]?)(uint64_t a1)
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(a1 + 32);
  uint64_t v2 = swift_retain();
  uint64_t v3 = v1(v2);
  swift_release();
  if (v3)
  {
    v4.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v4.super.Class isa = 0;
  }

  return v4.super.isa;
}

void *closure #1 in AccessibilityNode.applyChildren(to:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = (void *)MEMORY[0x18C119DF0](v1);
  uint64_t v3 = v2;
  if (v2)
  {
    id v4 = objc_msgSend(v2, sel_accessibilityElements);

    if (v4)
    {
      uint64_t v3 = (void *)static Array._unconditionallyBridgeFromObjectiveC(_:)();
    }
    else
    {
      return 0;
    }
  }
  return v3;
}

uint64_t AccessibilityNode.accessibilityIdentifier.getter()
{
  AccessibilityNode.attachment.getter(&v2);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)&v2);
  swift_bridgeObjectRelease_n();
  if (!v3) {
    return 0;
  }
  if (v4 < 2u) {
    return v2;
  }
  swift_bridgeObjectRelease();
  return 0;
}

void *closure #2 in AccessibilityNode.actionNames.getter()
{
  AccessibilityNode.attachment.getter(v9);

  uint64_t v0 = swift_bridgeObjectRetain();
  uint64_t v1 = specialized AccessibilityProperties.subscript.getter(v0);
  swift_bridgeObjectRelease_n();
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    id v3 = (void *)(v1 + 32);
    swift_bridgeObjectRetain();
    while (1)
    {
      LOBYTE(v9[0]) = 2;
      uint64_t v4 = v3[3];
      uint64_t v5 = v3[4];
      __swift_project_boxed_opaque_existential_1(v3, v4);
      long long v6 = *(uint64_t (**)(uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v5 + 80);
      unint64_t v7 = lazy protocol witness table accessor for type AccessibilityAdjustableAction and conformance AccessibilityAdjustableAction();
      if (v6(v9, &type metadata for AccessibilityAdjustableAction, v7, v4, v5)) {
        break;
      }
      v3 += 6;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n();
        return (void *)MEMORY[0x1E4FBC860];
      }
    }
    swift_bridgeObjectRelease_n();
    return &outlined read-only object #0 of closure #2 in AccessibilityNode.actionNames.getter;
  }
  else
  {
    swift_bridgeObjectRelease();
    return (void *)MEMORY[0x1E4FBC860];
  }
}

id AccessibilityNode._accessibilityAutomationType()()
{
  uint64_t v1 = v0;
  AccessibilityNode.attachment.getter((uint64_t *)&v41);
  uint64_t v2 = v41;

  *(void *)&long long v40 = v2;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  long long v3 = v41;
  AccessibilityNode.attachment.getter((uint64_t *)&v41);
  uint64_t v4 = v41;

  *(void *)&long long v41 = v4;
  uint64_t v5 = AccessibilityProperties.explicitAutomationType.getter();
  char v7 = v6;
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0) {
    return (id)v5;
  }
  AccessibilityNode.attachment.getter((uint64_t *)&v40);

  uint64_t v8 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v8, &v41);
  swift_bridgeObjectRelease_n();
  if (v44)
  {
    long long v40 = v3;
    AccessibilityValueStorage.impliedRole(for:)((uint64_t *)&v40);
    uint64_t v5 = v9;
    __int16 v11 = v10;
    outlined destroy of AccessibilityValueStorage((uint64_t)&v41);
    if ((v11 & 0x101) == 0) {
      return (id)v5;
    }
  }
  else
  {
    outlined destroy of AnyAccessibilityValue?((uint64_t)&v41, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  }
  AccessibilityNode.attachment.getter((uint64_t *)&v41);

  uint64_t v12 = swift_bridgeObjectRetain();
  uint64_t v13 = specialized AccessibilityProperties.subscript.getter(v12);
  swift_bridgeObjectRelease_n();
  uint64_t v14 = *(void *)(v13 + 16);
  if (!v14)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    long long v41 = v3;
    uint64_t v33 = AccessibilityNullableOptionSet<>.automationType.getter();
    if (v34)
    {
      uint64_t v35 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
      Class v36 = NSClassFromString(v35);

      if (!v36) {
        return 0;
      }
      v39.receiver = v1;
      v39.super_class = (Class)type metadata accessor for AccessibilityNode();
      return objc_msgSendSuper2(&v39, sel__accessibilityAutomationType);
    }
    return (id)v33;
  }
  uint64_t v37 = *(void *)(v13 + 16);
  unint64_t v38 = v1;
  uint64_t v15 = v13 + 32;
  while (1)
  {
    outlined init with copy of AnyAccessibilityAction(v15, (uint64_t)&v41);
    uint64_t v16 = v42;
    uint64_t v17 = v43;
    __swift_project_boxed_opaque_existential_1(&v41, v42);
    long long v40 = v3;
    uint64_t v18 = *(void (**)(long long *, uint64_t, uint64_t))(v17 + 48);
    swift_bridgeObjectRetain();
    v18(&v40, v16, v17);
    if ((v19 & 0x100) == 0) {
      break;
    }
    outlined destroy of AnyAccessibilityAction((uint64_t)&v41);
    swift_bridgeObjectRelease();
LABEL_9:
    v15 += 48;
    if (!--v14)
    {
      swift_bridgeObjectRelease();
      uint64_t v1 = v38;
      goto LABEL_23;
    }
  }
  char v20 = v19;
  outlined destroy of AnyAccessibilityAction((uint64_t)&v41);
  swift_bridgeObjectRelease();
  if (v20) {
    goto LABEL_9;
  }
  unint64_t v21 = v37 + 1;
  uint64_t v22 = v13 + 48 * v37 - 16;
  while (1)
  {
    if (v21 - 2 >= *(void *)(v13 + 16))
    {
      __break(1u);
LABEL_30:
      __break(1u);
LABEL_31:
      id result = (id)outlined destroy of AnyAccessibilityAction((uint64_t)&v41);
      goto LABEL_32;
    }
    outlined init with copy of AnyAccessibilityAction(v22, (uint64_t)&v41);
    uint64_t v23 = v42;
    uint64_t v24 = v43;
    __swift_project_boxed_opaque_existential_1(&v41, v42);
    long long v40 = v3;
    (*(void (**)(long long *, uint64_t, uint64_t))(v24 + 48))(&v40, v23, v24);
    if ((v25 & 0x100) == 0) {
      break;
    }
    outlined destroy of AnyAccessibilityAction((uint64_t)&v41);
LABEL_14:
    --v21;
    v22 -= 48;
    if (v21 < 2) {
      goto LABEL_30;
    }
  }
  char v26 = v25;
  outlined destroy of AnyAccessibilityAction((uint64_t)&v41);
  if (v26) {
    goto LABEL_14;
  }
  outlined init with copy of AnyAccessibilityAction(v22, (uint64_t)&v41);
  uint64_t v27 = v42;
  uint64_t v28 = v43;
  __swift_project_boxed_opaque_existential_1(&v41, v42);
  long long v40 = v3;
  (*(void (**)(long long *, uint64_t, uint64_t))(v28 + 48))(&v40, v27, v28);
  if ((v30 & 0x100) != 0) {
    goto LABEL_31;
  }
  uint64_t v5 = v29;
  char v31 = v30;
  id result = (id)outlined destroy of AnyAccessibilityAction((uint64_t)&v41);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return (id)v5;
  }
LABEL_32:
  __break(1u);
  return result;
}

Swift::String_optional __swiftcall AccessibilityNode._accessibilityRoleDescription()()
{
  AccessibilityNode.attachment.getter(v27);

  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = specialized AccessibilityProperties.subscript.getter(v1);
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease_n();
  if (v8)
  {
    swift_bridgeObjectRetain();
    outlined copy of Text.Storage(v2, v4, v6 & 1);
    uint64_t v9 = AccessibilityNode.resolvedPlainText(_:)(v2, v4, v6, v8);
    Class v11 = v10;
    outlined consume of Text?(v2, v4, v6, v8);
    char v12 = v6 & 1;
    if (v11)
    {
      outlined consume of Text.Storage(v2, v4, v12);
      swift_bridgeObjectRelease();
      uint64_t v13 = ((unint64_t)v11 >> 56) & 0xF;
      if (((unint64_t)v11 & 0x2000000000000000) == 0) {
        uint64_t v13 = v9 & 0xFFFFFFFFFFFFLL;
      }
      if (v13) {
        goto LABEL_20;
      }
    }
    else
    {
      outlined consume of Text.Storage(v2, v4, v12);
    }
    swift_bridgeObjectRelease();
  }
  uint64_t v14 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v11 = NSClassFromString(v14);

  if (!v11)
  {
    uint64_t v9 = 0;
    goto LABEL_20;
  }
  AccessibilityNode.platformElement.getter();
  if (!v15) {
    goto LABEL_16;
  }
  uint64_t v16 = v15;
  id v17 = objc_msgSend(v15, sel__accessibilityRoleDescription);

  if (!v17) {
    goto LABEL_16;
  }
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  Class v11 = v18;

  uint64_t v19 = ((unint64_t)v11 >> 56) & 0xF;
  if (((unint64_t)v11 & 0x2000000000000000) == 0) {
    uint64_t v19 = v9 & 0xFFFFFFFFFFFFLL;
  }
  if (!v19)
  {
    swift_bridgeObjectRelease();
LABEL_16:
    v26.receiver = v0;
    v26.super_class = (Class)type metadata accessor for AccessibilityNode();
    id v20 = objc_msgSendSuper2(&v26, sel__accessibilityRoleDescription);
    if (v20)
    {
      unint64_t v21 = v20;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      Class v11 = v22;
    }
    else
    {
      uint64_t v9 = 0;
      Class v11 = 0;
    }
  }
LABEL_20:
  uint64_t v23 = v9;
  uint64_t v24 = v11;
  result.value._object = v24;
  result.value._countAndFlagsBits = v23;
  return result;
}

double AccessibilityNode._accessibilityMinValue()(void (*a1)(long long *__return_ptr, uint64_t))
{
  AccessibilityNode.attachment.getter(v8);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v9);
  uint64_t v3 = swift_bridgeObjectRelease_n();
  if (!v9[5])
  {
    outlined destroy of AnyAccessibilityValue?((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    long long v10 = 0u;
    long long v11 = 0u;
    goto LABEL_6;
  }
  a1(&v10, v3);
  outlined destroy of AccessibilityValueStorage((uint64_t)v9);
  if (!*((void *)&v11 + 1))
  {
LABEL_6:
    outlined destroy of AnyAccessibilityValue?((uint64_t)&v10, (uint64_t)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    return NAN;
  }
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    return NAN;
  }
  id v4 = v9[0];
  objc_msgSend(v9[0], sel_doubleValue);
  double v6 = v5;

  return v6;
}

double AccessibilityNode._accessibilityNumberValue()()
{
  AccessibilityNode.attachment.getter(v5);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, v6);
  swift_bridgeObjectRelease_n();
  if (!v7)
  {
    outlined destroy of AnyAccessibilityValue?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AccessibilityValueStorage?, MEMORY[0x1E4F40E80], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    return NAN;
  }
  uint64_t v1 = (void *)AccessibilityValueStorage.platformNumberValue.getter();
  outlined destroy of AccessibilityValueStorage((uint64_t)v6);
  if (!v1) {
    return NAN;
  }
  objc_msgSend(v1, sel_doubleValue);
  double v3 = v2;

  return v3;
}

uint64_t AccessibilityNode._accessibilityExpandedStatus()()
{
  uint64_t v1 = v0;
  AccessibilityNode.attachment.getter(v11);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, v12);
  swift_bridgeObjectRelease_n();
  if (!v13)
  {
    id v4 = &lazy cache variable for type metadata for AccessibilityValueStorage?;
    uint64_t v5 = MEMORY[0x1E4F40E80];
    uint64_t v6 = MEMORY[0x1E4FBB718];
    uint64_t v7 = v12;
LABEL_9:
    outlined destroy of AnyAccessibilityValue?((uint64_t)v7, (uint64_t)v4, v5, v6, (uint64_t (*)(void))_sypSgMaTm_5);
    goto LABEL_10;
  }
  _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)v12, (uint64_t)v14, (uint64_t)&lazy cache variable for type metadata for AnyAccessibilityValue?, MEMORY[0x1E4F40788], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
  outlined destroy of AccessibilityValueStorage((uint64_t)v12);
  if (!v15)
  {
    id v4 = &lazy cache variable for type metadata for AnyAccessibilityValue?;
    uint64_t v5 = MEMORY[0x1E4F40788];
    uint64_t v6 = MEMORY[0x1E4FBB718];
    uint64_t v7 = v14;
    goto LABEL_9;
  }
  lazy protocol witness table accessor for type AccessibilityDisclosureValue and conformance AccessibilityDisclosureValue();
  AnyAccessibilityValue.as<A>(_:)();
  outlined destroy of AnyAccessibilityValue((uint64_t)v14);
  if (v16 != 2)
  {
    if (v16) {
      return 1;
    }
    else {
      return 2;
    }
  }
LABEL_10:
  uint64_t v8 = (NSString *)MEMORY[0x18C115780](0x4774694B49555841, 0xEB0000000065756CLL);
  Class v9 = NSClassFromString(v8);

  uint64_t result = 0;
  if (v9)
  {
    v10.receiver = v1;
    v10.super_class = (Class)type metadata accessor for AccessibilityNode();
    return (uint64_t)objc_msgSendSuper2(&v10, sel__accessibilityExpandedStatus);
  }
  return result;
}

uint64_t AccessibilityNode.accessibilityDataTableCellElement(forRow:column:)(uint64_t a1, uint64_t a2)
{
  AccessibilityNode.attachment.getter((uint64_t *)&v11);

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)&v11);
  swift_bridgeObjectRelease_n();
  if (v14)
  {
    if (v14 == 255) {
      outlined destroy of AnyAccessibilityValue?((uint64_t)&v11, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    }
    else {
      outlined destroy of AccessibilityTableContext((uint64_t)&v11);
    }
    return 0;
  }
  outlined init with take of OptionalBinaryInteger(&v11, (uint64_t)v15);
  outlined init with copy of TableColumnList((uint64_t)v15, (uint64_t)&v11);
  if (a1)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
LABEL_16:
    *(void *)&long long v11 = a1;
    *((void *)&v11 + 1) = a2;
    uint64_t v12 = 0;
    __swift_project_boxed_opaque_existential_1(v15, v16);
    specialized AccessibilityCollectionViewTableDataSource.visitNodes<A>(applying:at:)((uint64_t *)&v11, a1);
    uint64_t v5 = v12;
    goto LABEL_17;
  }
  __swift_project_boxed_opaque_existential_1(&v11, v13);
  char v6 = AccessibilityCollectionViewTableDataSource.hasGlobalHeader.getter();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v11);
  if ((v6 & 1) == 0) {
    goto LABEL_16;
  }
  uint64_t v9 = a2;
  unint64_t v10 = 0;
  __swift_project_boxed_opaque_existential_1(v15, v16);
  specialized AccessibilityCollectionViewTableDataSource.visitHeaderNodes<A>(applying:)(&v9);
  unint64_t v7 = v10;
  if (!v10)
  {
    uint64_t v5 = 0;
    goto LABEL_17;
  }
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t result = _CocoaArrayWrapper.endIndex.getter();
    uint64_t v5 = result;
    if (!result) {
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t result = swift_bridgeObjectRetain();
    if (!v5)
    {
LABEL_15:
      swift_bridgeObjectRelease_n();
LABEL_17:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v15);
      return v5;
    }
  }
  if ((v7 & 0xC000000000000001) != 0)
  {
    uint64_t v5 = MEMORY[0x18C117680](0, v7);
    goto LABEL_15;
  }
  if (*(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    uint64_t v5 = *(void *)(v7 + 32);
    swift_unknownObjectRetain();
    goto LABEL_15;
  }
  __break(1u);
  return result;
}

uint64_t AccessibilityNode.accessibilityRowCount()(uint64_t (*a1)(void))
{
  AccessibilityNode.attachment.getter((uint64_t *)v5);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v5);
  swift_bridgeObjectRelease_n();
  if (v6)
  {
    if (v6 == 255) {
      outlined destroy of AnyAccessibilityValue?((uint64_t)v5, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    }
    else {
      outlined destroy of AccessibilityTableContext((uint64_t)v5);
    }
    return 0;
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v5, (uint64_t)v7);
    __swift_project_boxed_opaque_existential_1(v7, v7[3]);
    uint64_t v3 = a1();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v7);
  }
  return v3;
}

Swift::OpaquePointer_optional __swiftcall AccessibilityNode.accessibilityHeaderElements(forColumn:)(Swift::Int forColumn)
{
  AccessibilityNode.attachment.getter((uint64_t *)v6);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v6);
  swift_bridgeObjectRelease_n();
  if (v7)
  {
    if (v7 == 255) {
      outlined destroy of AnyAccessibilityValue?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    }
    else {
      outlined destroy of AccessibilityTableContext((uint64_t)v6);
    }
    uint64_t v4 = 0;
  }
  else
  {
    outlined init with take of OptionalBinaryInteger(v6, (uint64_t)v8);
    v6[0] = (unint64_t)forColumn;
    __swift_project_boxed_opaque_existential_1(v8, v8[3]);
    specialized AccessibilityCollectionViewTableDataSource.visitHeaderNodes<A>(applying:)(v6);
    uint64_t v4 = (void *)*((void *)&v6[0] + 1);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  }
  uint64_t v5 = v4;
  result.value._rawuint64_t Value = v5;
  result.is_nil = v3;
  return result;
}

BOOL AccessibilityNode.CellVisitor.visit(node:)(void *a1)
{
  uint64_t v2 = v1;
  BOOL v4 = specialized AccessibilityNode.CellVisitor.isTargetCell(node:)((uint64_t)a1, *v1, v1[1]);
  if (v4)
  {
    AccessibilityNode.platformElement.getter();
    if (!v5) {
      id v5 = a1;
    }
    unsigned __int8 v6 = v5;
    uint64_t v7 = swift_dynamicCastObjCProtocolConditional();
    if (!v7) {

    }
    swift_unknownObjectRelease();
    uint64_t v2[2] = v7;
  }
  return !v4;
}

__C::_NSRange __swiftcall AccessibilityNode.accessibilityColumnRange()()
{
  AccessibilityNode.attachment.getter(v13);

  uint64_t v1 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v1, (uint64_t)v13);
  swift_bridgeObjectRelease_n();
  if (v14 == 255) {
    goto LABEL_9;
  }
  _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)v13, (uint64_t)&v9, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
  if (v11 == 1)
  {
    id v2 = v10;
    uint64_t v3 = 1;
    goto LABEL_10;
  }
  if (v11 == 2)
  {
    id v2 = 0;
    uint64_t v3 = (uint64_t)v10;
    goto LABEL_10;
  }
  if (v11 != 3)
  {
    outlined destroy of AccessibilityTableContext((uint64_t)&v9);
LABEL_9:
    BOOL v4 = (objc_class *)type metadata accessor for AccessibilityNode();
    v12.receiver = v0;
    v12.super_class = v4;
    id v2 = objc_msgSendSuper2(&v12, sel_accessibilityColumnRange);
    uint64_t v3 = v5;
    goto LABEL_10;
  }
  id v2 = v9;
  uint64_t v3 = 1;
LABEL_10:
  outlined destroy of AnyAccessibilityValue?((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  Swift::Int v6 = (Swift::Int)v2;
  Swift::Int v7 = v3;
  result.Swift::Int length = v7;
  result.Swift::Int location = v6;
  return result;
}

__C::_NSRange __swiftcall AccessibilityNode.accessibilityRowRange()()
{
  uint64_t v1 = (uint64_t)v0;
  AccessibilityNode.attachment.getter((uint64_t *)v20);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v20);
  swift_bridgeObjectRelease_n();
  if (v21 != 255)
  {
    _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)v20, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
    if (v17 == 1 || v17 == 2)
    {
      Swift::Int v3 = *(void *)&v16[0];
      outlined destroy of AnyAccessibilityValue?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
      uint64_t v4 = 1;
      goto LABEL_16;
    }
    if (v17 == 3)
    {
      outlined destroy of AnyAccessibilityValue?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
      Swift::Int v3 = 0;
      uint64_t v4 = 1;
      goto LABEL_16;
    }
    outlined destroy of AccessibilityTableContext((uint64_t)v16);
  }
  outlined destroy of AnyAccessibilityValue?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  uint64_t v5 = MEMORY[0x18C119DF0](&v0[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_parent]);
  if (!v5)
  {
LABEL_15:
    char v11 = (objc_class *)type metadata accessor for AccessibilityNode();
    v19.receiver = v0;
    v19.super_class = v11;
    Swift::Int v3 = (Swift::Int)objc_msgSendSuper2(&v19, sel_accessibilityRowRange);
    uint64_t v4 = v12;
    goto LABEL_16;
  }
  Swift::Int v6 = (void *)v5;
  AccessibilityNode.attachment.getter((uint64_t *)v20);
  id v7 = v20[0];

  *(void *)&v16[0] = v7;
  AccessibilityProperties.traits.getter();
  swift_bridgeObjectRelease();
  v16[0] = *(_OWORD *)v20;
  char v18 = 26;
  if ((AccessibilityNullableOptionSet<>.subscript.getter() & 1) == 0)
  {

    goto LABEL_15;
  }
  unint64_t v8 = (unint64_t)static AccessibilityCore.queryChildren(element:options:)((uint64_t)v6, 2);
  specialized Collection<>.firstIndex(of:)(v1, v8);
  if (v10) {
    uint64_t v9 = NSNotFound.getter();
  }
  Swift::Int v3 = v9;
  if (v8 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();

    swift_bridgeObjectRelease_n();
  }
  else
  {
    uint64_t v4 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);

    swift_bridgeObjectRelease();
  }
LABEL_16:
  Swift::Int v13 = v3;
  Swift::Int v14 = v4;
  result.Swift::Int length = v14;
  result.Swift::Int location = v13;
  return result;
}

id AccessibilityNode._accessibilityIsFirstSibling(for:)(uint64_t a1)
{
  if (a1 == 2)
  {
    AccessibilityNode.attachment.getter(v6);

    uint64_t v3 = swift_bridgeObjectRetain();
    specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)v6);
    swift_bridgeObjectRelease_n();
    if (v7 == 3) {
      return (id)(v6[0] == 0);
    }
    if (v7 == 255) {
      outlined destroy of AnyAccessibilityValue?((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
    }
    else {
      outlined destroy of AccessibilityTableContext((uint64_t)v6);
    }
  }
  uint64_t v5 = (objc_class *)type metadata accessor for AccessibilityNode();
  v8.receiver = v1;
  v8.super_class = v5;
  return objc_msgSendSuper2(&v8, sel__accessibilityIsFirstSiblingForType_, a1);
}

Swift::String_optional __swiftcall AccessibilityNode._accessibilityDataSeriesName()()
{
  AccessibilityNode.attachment.getter(&v16);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v14);
  swift_bridgeObjectRelease_n();
  uint64_t v1 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v14, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v15, (uint64_t)&v16, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v1);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)&v16) == 1) {
    goto LABEL_5;
  }
  uint64_t v2 = v16;
  uint64_t v3 = (uint64_t)v17;
  char v4 = v18;
  uint64_t v5 = v19;
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v2, v3, v4);
  Swift::Int v6 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v2, v3, v4, v5);
  outlined consume of Text.Storage(v2, v3, v4);
  swift_bridgeObjectRelease();
  if (!v6)
  {
    outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v15);
LABEL_5:
    uint64_t v8 = 0;
    char v10 = 0;
    goto LABEL_6;
  }
  id v7 = objc_msgSend(v6, sel_string);
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  char v10 = v9;

  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v15);
LABEL_6:
  uint64_t v11 = v8;
  uint64_t v12 = v10;
  result.value._object = v12;
  result.value._countAndFlagsBits = v11;
  return result;
}

id @objc AccessibilityNode.accessibilityHint.getter(void *a1, uint64_t a2, uint64_t (*a3)(void))
{
  id v4 = a1;
  uint64_t v5 = a3();
  uint64_t v7 = v6;

  if (v7)
  {
    uint64_t v8 = (void *)MEMORY[0x18C115780](v5, v7);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v8 = 0;
  }

  return v8;
}

uint64_t AccessibilityNode._accessibilityDataSeriesType()()
{
  AccessibilityNode.attachment.getter(v5);

  uint64_t v0 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v0, (uint64_t)v3);
  swift_bridgeObjectRelease_n();
  uint64_t v1 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v1);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v5) == 1) {
    return 0;
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v4);
  return v6;
}

unint64_t AccessibilityNode._accessibilityDataSeriesValues(for:)(uint64_t a1)
{
  AccessibilityNode.attachment.getter(v14);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v13, (uint64_t)v14, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v14) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    id v4 = &v16;
  }
  else
  {
    if (a1)
    {
LABEL_7:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
      return 0;
    }
    id v4 = &v15;
  }
  uint64_t v5 = MEMORY[0x1E4F412E8];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v11, (uint64_t)v10, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v10) == 1) {
    goto LABEL_7;
  }
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  uint64_t v8 = swift_bridgeObjectRetain();
  unint64_t v6 = specialized _arrayForceCast<A, B>(_:)(v8);
  swift_bridgeObjectRelease();
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v9 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v13);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v11, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  swift_bridgeObjectRelease();
  if (!v9)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v6;
}

Class @objc AccessibilityNode._accessibilityDataSeriesGridlinePositions(for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  id v6 = a1;
  uint64_t v7 = a4(a3);

  if (v7)
  {
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
  }
  else
  {
    v8.super.Class isa = 0;
  }

  return v8.super.isa;
}

uint64_t AccessibilityNode._accessibilityDataSeriesUnitLabel(for:)(uint64_t a1)
{
  AccessibilityNode.attachment.getter(v23);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v21);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v21, (uint64_t)v22, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v23) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    id v4 = &v25;
  }
  else
  {
    if (a1)
    {
LABEL_11:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v22);
      return 0;
    }
    id v4 = &v24;
  }
  uint64_t v5 = MEMORY[0x1E4F412E8];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v20, (uint64_t)v15, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v15) == 1) {
    goto LABEL_11;
  }
  uint64_t v6 = v19;
  if (!v19) {
    goto LABEL_11;
  }
  uint64_t v7 = v16;
  uint64_t v8 = v17;
  char v9 = v18;
  char v10 = v18 & 1;
  swift_bridgeObjectRetain();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined copy of Text?(v7, v8, v9, v6);
  outlined copy of Text.Storage(v7, v8, v10);
  uint64_t v11 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v7, v8, v9, v6);
  outlined consume of Text?(v7, v8, v9, v6);
  if (!v11)
  {
    outlined consume of Text.Storage(v7, v8, v9 & 1);
    swift_bridgeObjectRelease();
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    goto LABEL_11;
  }
  id v12 = objc_msgSend(v11, sel_string);
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();

  outlined consume of Text.Storage(v7, v8, v9 & 1);
  swift_bridgeObjectRelease();
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v20, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v22);
  return v13;
}

id @objc AccessibilityNode._accessibilityDataSeriesTitle(for:)(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  id v6 = a1;
  uint64_t v7 = a4(a3);
  uint64_t v9 = v8;

  if (v9)
  {
    char v10 = (void *)MEMORY[0x18C115780](v7, v9);
    swift_bridgeObjectRelease();
  }
  else
  {
    char v10 = 0;
  }

  return v10;
}

Class AccessibilityNode._accessibilityDataSeriesMaximumValue(for:)(uint64_t a1)
{
  AccessibilityNode.attachment.getter(v12);

  uint64_t v2 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v2, (uint64_t)v10);
  swift_bridgeObjectRelease_n();
  uint64_t v3 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v10, (uint64_t)v11, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v11, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v3);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v12) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    id v4 = &v14;
    goto LABEL_6;
  }
  if (!a1)
  {
    id v4 = &v13;
LABEL_6:
    uint64_t v5 = MEMORY[0x1E4F412E8];
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)v4, (uint64_t)v9, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
    _s7SwiftUI4PathVSgWObTm_0((uint64_t)v9, (uint64_t)v8, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v5);
    if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v8) != 1
      && (v8[96] & 1) == 0)
    {
      Class isa = CGFloat._bridgeToObjectiveC()().super.super.isa;
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
      return isa;
    }
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v11);
  return 0;
}

uint64_t AccessibilityNode._accessibilityDataSeriesValueDescription(forPosition:axis:)(uint64_t a1, double a2)
{
  AccessibilityNode.attachment.getter(v24);

  uint64_t v4 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v4, (uint64_t)v22);
  swift_bridgeObjectRelease_n();
  uint64_t v5 = MEMORY[0x1E4F412F0];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v22, (uint64_t)v23, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, MEMORY[0x1E4F412F0]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v23, (uint64_t)v24, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration?, v5);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v24) == 1) {
    return 0;
  }
  if (a1 == 1)
  {
    id v6 = &v26;
  }
  else
  {
    if (a1)
    {
LABEL_15:
      outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v23);
      return 0;
    }
    id v6 = &v25;
  }
  uint64_t v7 = MEMORY[0x1E4F412E8];
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v6, (uint64_t)v21, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, MEMORY[0x1E4F412E8]);
  _s7SwiftUI4PathVSgWObTm_0((uint64_t)v21, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDataSeriesConfiguration.AxisConfiguration?, v7);
  if (_s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg((uint64_t)v19) == 1) {
    goto LABEL_15;
  }
  uint64_t v8 = *(void *)(v20 + 16);
  if (!v8) {
    goto LABEL_15;
  }
  uint64_t v9 = (double *)(v20 + 72);
  while (*(v9 - 1) > a2 || *v9 <= a2)
  {
    v9 += 6;
    if (!--v8) {
      goto LABEL_15;
    }
  }
  uint64_t v13 = *((void *)v9 - 5);
  uint64_t v14 = *((void *)v9 - 4);
  char v15 = *((unsigned char *)v9 - 24);
  uint64_t v16 = *((void *)v9 - 2);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v13, v14, v15);
  swift_bridgeObjectRetain();
  outlined copy of Text.Storage(v13, v14, v15);
  uint64_t v17 = (void *)AccessibilityNode.resolvedAttributedText(_:includeDefaultAttributes:)(v13, v14, v15, v16);
  outlined consume of Text.Storage(v13, v14, v15);
  swift_bridgeObjectRelease();
  if (v17)
  {
    id v18 = objc_msgSend(v17, sel_string);
    uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)();

    outlined consume of Text.Storage(v13, v14, v15);
    swift_bridgeObjectRelease();
    outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
    outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v23);
    return v11;
  }
  outlined release of AccessibilityDataSeriesConfiguration?((uint64_t)v23);
  outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(v21, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?);
  outlined consume of Text.Storage(v13, v14, v15);
  swift_bridgeObjectRelease();
  return 0;
}

Class @objc AccessibilityNode._accessibilityNodeChildrenUnsorted.getter(void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  id v6 = a1;
  uint64_t v7 = static AccessibilityCore.queryChildren(element:options:)((uint64_t)v6, a3);
  swift_getKeyPath();
  swift_retain();
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_yps5NeverOTg503_s7d4UI17fg16CAA08PlatformC15b35Protocol_So8NSObjectCXcIeggo_ACyps5H11OIegnrzr_TRAhF0lfbN0_So0P0CXcIeggo_Tf1cn_nTf4ng_n((unint64_t)v7, a4);

  swift_bridgeObjectRelease();
  swift_release_n();
  v8.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();

  return v8.super.isa;
}

uint64_t implicit closure #1 in AccessibilityNode._accessibilityNodeChildrenUnsorted.getter(void *a1)
{
  id v1 = a1;
  swift_getAtKeyPath();

  return v3;
}

char *specialized Sequence<>.resolved(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void (*v45)(unsigned long long *__return_ptr, uint64_t, uint64_t);
  unsigned long long v46;
  char v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char v54;
  unint64_t v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t (*v62)(uint64_t, uint64_t);
  id v63;
  void *v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;
  char v71;
  uint64_t v72;
  id v73;
  unint64_t v74;
  unint64_t v75;
  char v76;
  char *v77;
  uint64_t v78;
  void v80[2];
  char *v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  long long v86;
  long long v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  id v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  void *v100;
  uint64_t v101;
  long long v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  uint64_t v106;
  char v107;
  long long v108;
  uint64_t v109;
  uint64_t v110;
  char v111;
  char v112;
  __int16 v113;
  _OWORD v114[2];
  _OWORD v115[8];
  _OWORD v116[2];
  unsigned long long v117;
  long long v118;
  long long v119;
  unsigned long long v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  unsigned char v127[19];
  uint64_t v128;

  type metadata accessor for Text.Style?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, MEMORY[0x1E4F413C8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  NSArray v8 = (char *)v80 - v7;
  uint64_t v9 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)v80 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)&long long v117 = a1;
  *((void *)&v117 + 1) = a2;
  uint64_t v12 = type metadata accessor for Text.Style();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56))(v8, 1, 1, v12);
  __int16 v95 = a2;
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  uint64_t v81 = v11;
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  __int16 v128 = MEMORY[0x1E4FBC870];
  uint64_t v98 = *(void *)(a3 + 16);
  if (!v98)
  {
    char v15 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_36;
  }
  uint64_t v97 = a3 + 32;
  uint64_t v13 = *MEMORY[0x1E4FB2430];
  v80[0] = a3;
  v80[1] = v13;
  swift_bridgeObjectRetain();
  uint64_t v14 = 0;
  char v15 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v89 = a1;
  do
  {
    uint64_t v19 = (void *)(v97 + 48 * v14);
    uint64_t v20 = v19[3];
    uint64_t v21 = v19[4];
    __swift_project_boxed_opaque_existential_1(v19, v20);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v20, v21);
    if (v25)
    {
      uint64_t v26 = v22;
      uint64_t v27 = v23;
      *(void *)&long long v117 = a1;
      *((void *)&v117 + 1) = v95;
      v114[0] = 0uLL;
      uint64_t v28 = v24;
      LOBYTE(v100) = v24 & 1;
      uint64_t v29 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
      if (v29)
      {
        __int16 v30 = v29;
        uint64_t v96 = v28;
        if ((uint64_t)objc_msgSend(v29, sel_length) > 0)
        {
          long long v94 = v27;
          uint64_t v31 = v128;
          swift_bridgeObjectRetain();
          id v32 = v30;
          uint64_t v33 = NSObject.hashValue.getter();

          if (*(void *)(v31 + 16))
          {
            uint64_t v34 = static Hasher._hash(seed:_:)();
            uint64_t v35 = -1 << *(unsigned char *)(v31 + 32);
            unint64_t v36 = v34 & ~v35;
            if ((*(void *)(v31 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36))
            {
              uint64_t v37 = *(void *)(v31 + 48);
              if (*(void *)(v37 + 8 * v36) == v33)
              {
LABEL_16:
                uint64_t v39 = v26;
                char v40 = v96 & 1;

                swift_bridgeObjectRelease();
                outlined consume of Text.Storage(v39, v94, v40);
LABEL_33:
                a1 = v89;
                goto LABEL_5;
              }
              uint64_t v38 = ~v35;
              while (1)
              {
                unint64_t v36 = (v36 + 1) & v38;
                if (((*(void *)(v31 + 56 + ((v36 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v36) & 1) == 0) {
                  break;
                }
                if (*(void *)(v37 + 8 * v36) == v33) {
                  goto LABEL_16;
                }
              }
            }
          }
          long long v92 = v15;
          long long v93 = v26;
          swift_bridgeObjectRelease();
          id v41 = v32;
          uint64_t v42 = NSObject.hashValue.getter();

          specialized Set._Variant.insert(_:)((uint64_t *)&v117, v42);
          uint64_t v43 = v19[3];
          uint64_t v44 = v19[4];
          __swift_project_boxed_opaque_existential_1(v19, v43);
          uint64_t v45 = *(void (**)(unsigned long long *__return_ptr, uint64_t, uint64_t))(v44 + 24);
          long long v91 = v41;
          v45(&v117, v43, v44);
          uint64_t v46 = v117;
          unint64_t v47 = v118;
          char v48 = *((void *)&v118 + 1);
          if (*((void *)&v118 + 1))
          {
            if (*((void *)&v118 + 1) == 1)
            {
              unint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)();
              uint64_t v59 = v58;
              int v52 = v46 >> 64;
              char v51 = v46;
              uint64_t v53 = v59;
              char v54 = v47;
              uint64_t v55 = 1;
              goto LABEL_25;
            }
            if (*((void *)&v118 + 1) != 2)
            {
              *(void *)&v114[0] = v89;
              *((void *)&v114[0] + 1) = v95;
              uint64_t v100 = 0;
              uint64_t v101 = 0;
              outlined copy of Text.Storage(v117, *((uint64_t *)&v117 + 1), v118 & 1);
              swift_bridgeObjectRetain();
              uint64_t v99 = v47 & 1;
              unint64_t v90 = static AccessibilityCore.textResolvedToPlainText(_:in:updateResolvableAttributes:resolveSuffix:idiom:)();
              uint64_t v50 = v49;
              outlined consume of Text.Storage(v46, *((uint64_t *)&v46 + 1), v47 & 1);
              swift_bridgeObjectRelease();
              int v52 = v46 >> 64;
              char v51 = v46;
              uint64_t v53 = v50;
              char v54 = v47;
              uint64_t v55 = v48;
LABEL_25:
              outlined consume of AccessibilityActionCategory?(v51, v52, v54, v55);
              goto LABEL_26;
            }
          }
          else
          {
            outlined consume of AccessibilityActionCategory?(v117, *((uint64_t *)&v117 + 1), v118, 0);
          }
          unint64_t v90 = 0;
          uint64_t v53 = 0;
LABEL_26:
          uint64_t v60 = v19[3];
          uint64_t v61 = v19[4];
          __swift_project_boxed_opaque_existential_1(v19, v60);
          uint64_t v62 = *(uint64_t (**)(uint64_t, uint64_t))(v61 + 16);
          swift_bridgeObjectRetain();
          int v63 = (id)v62(v60, v61);
          if (v63)
          {
            Image.resolve(in:)();
            swift_release();
            v115[6] = v125;
            v115[7] = v126;
            v116[0] = *(_OWORD *)v127;
            *(_DWORD *)((char *)v116 + 15) = *(_DWORD *)&v127[15];
            v115[2] = v121;
            v115[3] = v122;
            v115[4] = v123;
            v115[5] = v124;
            v114[0] = v117;
            v114[1] = v118;
            v115[0] = v119;
            v115[1] = v120;
            char v64 = (void *)v117;
            uint64_t v65 = v119;
            uint64_t v66 = BYTE8(v119);
            uint64_t v67 = *(void *)((char *)v115 + 12);
            unint64_t v68 = v120 >> 32;
            char v88 = v53;
            char v69 = BYTE12(v120);
            char v86 = v121;
            uint64_t v87 = v118;
            uint64_t v85 = *((void *)&v122 + 1);
            uint64_t v70 = v122;
            uint64_t v83 = BYTE1(v123);
            char v84 = v123;
            uint64_t v82 = WORD1(v123);
            uint64_t v71 = BYTE8(v117);
            outlined copy of GraphicsImage.Contents?((id)v117, SBYTE8(v117));
            outlined release of Image.Resolved((uint64_t)v114);
            uint64_t v100 = v64;
            LOBYTE(v101) = v71;
            uint64_t v102 = v87;
            uint64_t v103 = v65;
            char v104 = v66;
            uint64_t v105 = v67;
            long long v106 = v68;
            long long v107 = v69;
            uint64_t v53 = v88;
            long long v108 = v86;
            long long v109 = v70;
            long long v110 = v85;
            uint64_t v111 = v84;
            long long v112 = v83;
            long long v113 = v82;
            int v63 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(1, 0, 0);
            outlined consume of GraphicsImage.Contents?(v64, v71);
          }
          uint64_t v72 = v93;
          swift_bridgeObjectRelease();
          char v73 = v91;

          char v15 = v92;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            char v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v15 + 2) + 1, 1, v15);
          }
          uint64_t v75 = *((void *)v15 + 2);
          char v74 = *((void *)v15 + 3);
          if (v75 >= v74 >> 1) {
            char v15 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v74 > 1), v75 + 1, 1, v15);
          }
          uint64_t v76 = v96 & 1;
          *((void *)v15 + 2) = v75 + 1;
          char v77 = &v15[32 * v75];
          uint64_t v78 = v90;
          *((void *)v77 + 4) = v73;
          *((void *)v77 + 5) = v78;
          *((void *)v77 + 6) = v53;
          *((void *)v77 + 7) = v63;
          outlined consume of Text.Storage(v72, v94, v76);

          goto LABEL_33;
        }
        char v56 = v26;
        uint64_t v57 = v96 & 1;

        uint64_t v17 = v56;
        uint64_t v18 = v27;
        char v16 = v57;
      }
      else
      {
        char v16 = v28 & 1;
        uint64_t v17 = v26;
        uint64_t v18 = v27;
      }
      outlined consume of Text.Storage(v17, v18, v16);
LABEL_5:
      swift_bridgeObjectRelease();
    }
    ++v14;
  }
  while (v14 != v98);
  swift_bridgeObjectRelease();
LABEL_36:
  _s7SwiftUI22ImageResolutionContextVWOhTm_0((uint64_t)v81, MEMORY[0x1E4F40970]);
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_187C85440()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in AccessibilityNode.applyProperties(to:includingRelations:)()
{
  return closure #1 in AccessibilityNode.applyProperties(to:includingRelations:)(v0);
}

uint64_t thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool)(uint64_t a1, void *a2)
{
  uint64_t v3 = *(uint64_t (**)(void))(a1 + 32);
  swift_retain();
  id v4 = a2;
  LOBYTE(v3) = v3();
  swift_release();

  return v3 & 1;
}

void specialized UnsafeMutableBufferPointer._stableSortImpl(by:)(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for IndexPath();
  uint64_t v5 = *(void **)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v136 = (char *)&v131 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v151 = (char *)&v131 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v146 = (char *)&v131 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v147 = (char *)&v131 - v12;
  Swift::Int v13 = a1[1];
  Swift::Int v14 = _minimumMergeRunLength(_:)(v13);
  if (v14 >= v13)
  {
    if (v13 < 0) {
      goto LABEL_140;
    }
    if (v13) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v13, 1, a1);
    }
    return;
  }
  if (v13 >= 0) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v13 + 1;
  }
  if (v13 < -1) {
    goto LABEL_148;
  }
  uint64_t v149 = v4;
  long long v150 = a1;
  Swift::Int v133 = v14;
  if (v13 < 2)
  {
    uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
    unint64_t v138 = MEMORY[0x1E4FBC860]
         + ((*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80));
    uint64_t v132 = MEMORY[0x1E4FBC860];
    if (v13 != 1)
    {
      unint64_t v21 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_106:
      if (v21 >= 2)
      {
        uint64_t v125 = *v150;
        do
        {
          unint64_t v126 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_135;
          }
          if (!v125) {
            goto LABEL_147;
          }
          uint64_t v127 = *(void *)&v19[16 * v126 + 32];
          uint64_t v128 = *(void *)&v19[16 * v21 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v125 + v5[9] * v127, v125 + v5[9] * *(void *)&v19[16 * v21 + 16], v125 + v5[9] * v128, v138);
          if (v2) {
            break;
          }
          if (v128 < v127) {
            goto LABEL_136;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v19);
          }
          if (v126 >= *((void *)v19 + 2)) {
            goto LABEL_137;
          }
          uint64_t v129 = &v19[16 * v126 + 32];
          *(void *)uint64_t v129 = v127;
          *((void *)v129 + 1) = v128;
          unint64_t v130 = *((void *)v19 + 2);
          if (v21 > v130) {
            goto LABEL_138;
          }
          memmove(&v19[16 * v21 + 16], &v19[16 * v21 + 32], 16 * (v130 - v21));
          *((void *)v19 + 2) = v130 - 1;
          unint64_t v21 = v130 - 1;
        }
        while (v130 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(void *)(v132 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    uint64_t v16 = v15 >> 1;
    uint64_t v17 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v17 + 16) = v16;
    unint64_t v18 = (*((unsigned __int8 *)v5 + 80) + 32) & ~(unint64_t)*((unsigned __int8 *)v5 + 80);
    uint64_t v132 = v17;
    unint64_t v138 = v17 + v18;
  }
  Swift::Int v20 = 0;
  uint64_t v144 = (void (**)(char *, uint64_t))(v5 + 1);
  uint64_t v145 = v5 + 2;
  long long v154 = (void (**)(char *, uint64_t, uint64_t))(v5 + 4);
  uint64_t v19 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v139 = v5;
  while (1)
  {
    Swift::Int v22 = v20;
    Swift::Int v23 = v20 + 1;
    Swift::Int v137 = v20;
    if (v20 + 1 >= v13) {
      goto LABEL_37;
    }
    uint64_t v24 = v149;
    uint64_t v25 = *v150;
    uint64_t v141 = v25;
    Swift::Int v142 = v20 + 1;
    Swift::Int v153 = v139[9];
    Swift::Int v26 = v153;
    uint64_t v27 = (void (*)(char *, uint64_t, uint64_t))v139[2];
    v27(v147, v25 + v153 * v23, v149);
    uint64_t v28 = v25 + v26 * v22;
    uint64_t v29 = v146;
    v27(v146, v28, v24);
    uint64_t v30 = lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
    uint64_t v31 = v147;
    Swift::Int v148 = v30;
    LODWORD(v152) = dispatch thunk of static Comparable.< infix(_:_:)();
    Swift::Int v32 = v13;
    uint64_t v33 = (void (*)(char *, uint64_t))v139[1];
    uint64_t v34 = v29;
    Swift::Int v22 = v137;
    v33(v34, v24);
    v33(v31, v24);
    Swift::Int v35 = v153;
    Swift::Int v23 = v22 + 2;
    Swift::Int v143 = v32;
    if (v22 + 2 >= v32)
    {
      Swift::Int v13 = v143;
      if ((v152 & 1) == 0) {
        goto LABEL_37;
      }
    }
    else
    {
      uint64_t v134 = v19;
      uint64_t v131 = v2;
      v142 *= v153;
      uint64_t v36 = v141;
      Swift::Int v37 = v153 * v23;
      while (1)
      {
        Swift::Int v38 = v23;
        uint64_t v39 = v147;
        uint64_t v40 = v149;
        v27(v147, v36 + v37, v149);
        id v41 = v146;
        v27(v146, v36 + v142, v40);
        int v42 = dispatch thunk of static Comparable.< infix(_:_:)();
        v33(v41, v40);
        v33(v39, v40);
        if ((v152 ^ v42)) {
          break;
        }
        Swift::Int v23 = v38 + 1;
        Swift::Int v35 = v153;
        v36 += v153;
        if (v143 == v38 + 1)
        {
          Swift::Int v13 = v143;
          Swift::Int v23 = v143;
          uint64_t v2 = v131;
          uint64_t v19 = v134;
          Swift::Int v22 = v137;
          if (v152) {
            goto LABEL_25;
          }
          goto LABEL_37;
        }
      }
      uint64_t v2 = v131;
      uint64_t v19 = v134;
      Swift::Int v23 = v38;
      Swift::Int v22 = v137;
      Swift::Int v13 = v143;
      Swift::Int v35 = v153;
      if ((v152 & 1) == 0) {
        goto LABEL_37;
      }
    }
LABEL_25:
    if (v23 < v22) {
      goto LABEL_141;
    }
    if (v22 >= v23)
    {
LABEL_37:
      unint64_t v47 = v150;
      goto LABEL_38;
    }
    uint64_t v134 = v19;
    uint64_t v43 = 0;
    uint64_t v44 = v35 * (v23 - 1);
    Swift::Int v45 = v23 * v35;
    uint64_t v46 = v22 * v35;
    unint64_t v47 = v150;
    Swift::Int v148 = v23;
    do
    {
      if (v22 != v23 + v43 - 1)
      {
        uint64_t v49 = v141;
        if (!v141) {
          goto LABEL_146;
        }
        uint64_t v50 = v2;
        unint64_t v51 = v141 + v46;
        int v52 = (char *)(v141 + v44);
        uint64_t v152 = *v154;
        v152(v136, v141 + v46, v149);
        if (v46 < v44 || v51 >= v49 + v45)
        {
          uint64_t v48 = v149;
          swift_arrayInitWithTakeFrontToBack();
        }
        else
        {
          uint64_t v48 = v149;
          if (v46 != v44) {
            swift_arrayInitWithTakeBackToFront();
          }
        }
        v152(v52, (uint64_t)v136, v48);
        uint64_t v2 = v50;
        unint64_t v47 = v150;
        Swift::Int v23 = v148;
        Swift::Int v35 = v153;
      }
      ++v22;
      --v43;
      v44 -= v35;
      v45 -= v35;
      v46 += v35;
    }
    while (v22 < v23 + v43);
    uint64_t v19 = v134;
    Swift::Int v22 = v137;
    Swift::Int v13 = v143;
LABEL_38:
    uint64_t v53 = v149;
    if (v23 >= v13) {
      goto LABEL_57;
    }
    if (__OFSUB__(v23, v22)) {
      goto LABEL_139;
    }
    if (v23 - v22 >= v133) {
      goto LABEL_57;
    }
    if (__OFADD__(v22, v133)) {
      goto LABEL_142;
    }
    Swift::Int v54 = v22 + v133 >= v13 ? v13 : v22 + v133;
    if (v54 < v22) {
      break;
    }
    if (v23 != v54)
    {
      uint64_t v134 = v19;
      uint64_t v131 = v2;
      uint64_t v55 = v139[9];
      uint64_t v140 = (void (*)(char *, uint64_t, uint64_t))v139[2];
      uint64_t v141 = v55;
      uint64_t v56 = v55 * (v23 - 1);
      Swift::Int v57 = v23 * v55;
      Swift::Int v135 = v54;
      do
      {
        uint64_t v59 = 0;
        Swift::Int v148 = v23;
        Swift::Int v142 = v57;
        Swift::Int v143 = v56;
        while (1)
        {
          uint64_t v60 = *v47;
          uint64_t v152 = (void (*)(char *, uint64_t, uint64_t))(v57 + v59);
          Swift::Int v153 = v22;
          Swift::Int v61 = v57 + v59 + v60;
          uint64_t v62 = v147;
          int v63 = v47;
          char v64 = v140;
          v140(v147, v61, v53);
          uint64_t v65 = v56 + v59 + v60;
          uint64_t v66 = v146;
          v64(v146, v65, v53);
          lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
          LOBYTE(v60) = dispatch thunk of static Comparable.< infix(_:_:)();
          uint64_t v67 = *v144;
          (*v144)(v66, v53);
          v67(v62, v53);
          if ((v60 & 1) == 0) {
            break;
          }
          uint64_t v68 = *v63;
          if (!*v63) {
            goto LABEL_144;
          }
          Swift::Int v57 = v142;
          uint64_t v56 = v143;
          char v69 = (char *)(v68 + v143 + v59);
          uint64_t v70 = *v154;
          uint64_t v71 = v149;
          (*v154)(v151, v68 + v142 + v59, v149);
          uint64_t v53 = v71;
          swift_arrayInitWithTakeFrontToBack();
          v70(v69, (uint64_t)v151, v71);
          v59 -= v141;
          Swift::Int v22 = v153 + 1;
          Swift::Int v58 = v148;
          unint64_t v47 = v150;
          if (v148 == v153 + 1) {
            goto LABEL_49;
          }
        }
        Swift::Int v58 = v148;
        uint64_t v53 = v149;
        unint64_t v47 = v63;
        Swift::Int v57 = v142;
        uint64_t v56 = v143;
LABEL_49:
        Swift::Int v23 = v58 + 1;
        v56 += v141;
        v57 += v141;
        Swift::Int v22 = v137;
      }
      while (v23 != v135);
      Swift::Int v23 = v135;
      uint64_t v2 = v131;
      uint64_t v19 = v134;
    }
LABEL_57:
    if (v23 < v22) {
      goto LABEL_134;
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    Swift::Int v148 = v23;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v19 + 2) + 1, 1, v19);
    }
    unint64_t v74 = *((void *)v19 + 2);
    unint64_t v73 = *((void *)v19 + 3);
    unint64_t v21 = v74 + 1;
    if (v74 >= v73 >> 1) {
      uint64_t v19 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v73 > 1), v74 + 1, 1, v19);
    }
    *((void *)v19 + 2) = v21;
    uint64_t v75 = v19 + 32;
    uint64_t v76 = &v19[16 * v74 + 32];
    Swift::Int v77 = v148;
    *(void *)uint64_t v76 = v22;
    *((void *)v76 + 1) = v77;
    if (v74)
    {
      while (1)
      {
        unint64_t v78 = v21 - 1;
        if (v21 >= 4)
        {
          uint64_t v83 = &v75[16 * v21];
          uint64_t v84 = *((void *)v83 - 8);
          uint64_t v85 = *((void *)v83 - 7);
          BOOL v89 = __OFSUB__(v85, v84);
          uint64_t v86 = v85 - v84;
          if (v89) {
            goto LABEL_123;
          }
          uint64_t v88 = *((void *)v83 - 6);
          uint64_t v87 = *((void *)v83 - 5);
          BOOL v89 = __OFSUB__(v87, v88);
          uint64_t v81 = v87 - v88;
          char v82 = v89;
          if (v89) {
            goto LABEL_124;
          }
          unint64_t v90 = v21 - 2;
          long long v91 = &v75[16 * v21 - 32];
          uint64_t v93 = *(void *)v91;
          uint64_t v92 = *((void *)v91 + 1);
          BOOL v89 = __OFSUB__(v92, v93);
          uint64_t v94 = v92 - v93;
          if (v89) {
            goto LABEL_126;
          }
          BOOL v89 = __OFADD__(v81, v94);
          uint64_t v95 = v81 + v94;
          if (v89) {
            goto LABEL_129;
          }
          if (v95 >= v86)
          {
            long long v113 = &v75[16 * v78];
            uint64_t v115 = *(void *)v113;
            uint64_t v114 = *((void *)v113 + 1);
            BOOL v89 = __OFSUB__(v114, v115);
            uint64_t v116 = v114 - v115;
            if (v89) {
              goto LABEL_133;
            }
            BOOL v106 = v81 < v116;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            uint64_t v107 = *((void *)v19 + 4);
            uint64_t v108 = *((void *)v19 + 5);
            BOOL v89 = __OFSUB__(v108, v107);
            uint64_t v100 = v108 - v107;
            char v101 = v89;
            goto LABEL_88;
          }
          uint64_t v80 = *((void *)v19 + 4);
          uint64_t v79 = *((void *)v19 + 5);
          BOOL v89 = __OFSUB__(v79, v80);
          uint64_t v81 = v79 - v80;
          char v82 = v89;
        }
        if (v82) {
          goto LABEL_125;
        }
        unint64_t v90 = v21 - 2;
        uint64_t v96 = &v75[16 * v21 - 32];
        uint64_t v98 = *(void *)v96;
        uint64_t v97 = *((void *)v96 + 1);
        BOOL v99 = __OFSUB__(v97, v98);
        uint64_t v100 = v97 - v98;
        char v101 = v99;
        if (v99) {
          goto LABEL_128;
        }
        uint64_t v102 = &v75[16 * v78];
        uint64_t v104 = *(void *)v102;
        uint64_t v103 = *((void *)v102 + 1);
        BOOL v89 = __OFSUB__(v103, v104);
        uint64_t v105 = v103 - v104;
        if (v89) {
          goto LABEL_131;
        }
        if (__OFADD__(v100, v105)) {
          goto LABEL_132;
        }
        if (v100 + v105 >= v81)
        {
          BOOL v106 = v81 < v105;
LABEL_94:
          if (v106) {
            unint64_t v78 = v90;
          }
          goto LABEL_96;
        }
LABEL_88:
        if (v101) {
          goto LABEL_127;
        }
        long long v109 = &v75[16 * v78];
        uint64_t v111 = *(void *)v109;
        uint64_t v110 = *((void *)v109 + 1);
        BOOL v89 = __OFSUB__(v110, v111);
        uint64_t v112 = v110 - v111;
        if (v89) {
          goto LABEL_130;
        }
        if (v112 < v100) {
          goto LABEL_14;
        }
LABEL_96:
        unint64_t v117 = v78 - 1;
        if (v78 - 1 >= v21)
        {
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
          goto LABEL_143;
        }
        if (!*v150) {
          goto LABEL_145;
        }
        long long v118 = v19;
        uint64_t v119 = &v75[16 * v117];
        uint64_t v120 = *(void *)v119;
        uint64_t v121 = &v75[16 * v78];
        uint64_t v122 = *((void *)v121 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(*v150 + v139[9] * *(void *)v119, *v150 + v139[9] * *(void *)v121, *v150 + v139[9] * v122, v138);
        if (v2) {
          goto LABEL_117;
        }
        if (v122 < v120) {
          goto LABEL_120;
        }
        if (v78 > *((void *)v118 + 2)) {
          goto LABEL_121;
        }
        uint64_t v123 = v118;
        *(void *)uint64_t v119 = v120;
        *(void *)&v75[16 * v117 + 8] = v122;
        unint64_t v124 = *((void *)v118 + 2);
        if (v78 >= v124) {
          goto LABEL_122;
        }
        uint64_t v19 = v123;
        unint64_t v21 = v124 - 1;
        memmove(&v75[16 * v78], v121 + 16, 16 * (v124 - 1 - v78));
        *((void *)v19 + 2) = v124 - 1;
        if (v124 <= 2) {
          goto LABEL_14;
        }
      }
    }
    unint64_t v21 = 1;
LABEL_14:
    Swift::Int v13 = v150[1];
    Swift::Int v20 = v148;
    uint64_t v5 = v139;
    if (v148 >= v13) {
      goto LABEL_106;
    }
  }
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  Swift::Int v15;
  Swift::Int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  Swift::Int v22;
  unint64_t v23;
  Swift::Int v24;
  uint64_t v25;
  Swift::Int v26;
  uint64_t v27;
  Swift::Int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  Swift::Int v46;
  uint64_t v47;
  Swift::Int v48;
  Swift::Int v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  Swift::Int v54;
  Swift::Int v55;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  char *v60;
  Swift::Int v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  BOOL v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  BOOL v83;
  uint64_t v84;
  char v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  BOOL v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  uint64_t v110;
  Swift::Int v111;
  Swift::Int v112;
  uint64_t v113;
  Swift::Int v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  Swift::Int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  Swift::Int v134;
  uint64_t v135;
  char *v136;
  Swift::Int v137;
  uint64_t v138;
  Swift::Int v139;
  void *v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  Swift::Int v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  Swift::Int v149;
  uint64_t v150;
  uint64_t v151;
  Swift::Int v152;
  Swift::Int v153;
  Swift::Int v154;
  Swift::Int v155;

  uint64_t v2 = v1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  long long v150 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v138 = (uint64_t)&v132 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v151 = (uint64_t)&v132 - v8;
  MEMORY[0x1F4188790](v9);
  Swift::Int v148 = (uint64_t)&v132 - v10;
  MEMORY[0x1F4188790](v11);
  uint64_t v147 = (uint64_t)&v132 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v146 = (uint64_t)&v132 - v14;
  uint64_t v15 = a1[1];
  uint64_t v16 = _minimumMergeRunLength(_:)(v15);
  if (v16 >= v15)
  {
    if (v15 < 0) {
      goto LABEL_141;
    }
    if (v15) {
      specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(0, v15, 1, a1);
    }
    return;
  }
  if (v15 >= 0) {
    uint64_t v17 = v15;
  }
  else {
    uint64_t v17 = v15 + 1;
  }
  if (v15 < -1) {
    goto LABEL_149;
  }
  Swift::Int v142 = v5;
  uint64_t v134 = v16;
  if (v15 < 2)
  {
    unint64_t v21 = (char *)MEMORY[0x1E4FBC860];
    uint64_t v141 = MEMORY[0x1E4FBC860]
         + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    Swift::Int v133 = MEMORY[0x1E4FBC860];
    if (v15 != 1)
    {
      Swift::Int v23 = *(void *)(MEMORY[0x1E4FBC860] + 16);
LABEL_107:
      if (v23 >= 2)
      {
        unint64_t v126 = *a1;
        do
        {
          uint64_t v127 = v23 - 2;
          if (v23 < 2) {
            goto LABEL_136;
          }
          if (!v126) {
            goto LABEL_148;
          }
          uint64_t v128 = *(void *)&v21[16 * v127 + 32];
          uint64_t v129 = *(void *)&v21[16 * v23 + 24];
          specialized _merge<A>(low:mid:high:buffer:by:)(v126 + *(void *)(v142 + 72) * v128, v126 + *(void *)(v142 + 72) * *(void *)&v21[16 * v23 + 16], v126 + *(void *)(v142 + 72) * v129, v141);
          if (v2) {
            break;
          }
          if (v129 < v128) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v21);
          }
          if (v127 >= *((void *)v21 + 2)) {
            goto LABEL_138;
          }
          unint64_t v130 = &v21[16 * v127 + 32];
          *(void *)unint64_t v130 = v128;
          *((void *)v130 + 1) = v129;
          uint64_t v131 = *((void *)v21 + 2);
          if (v23 > v131) {
            goto LABEL_139;
          }
          memmove(&v21[16 * v23 + 16], &v21[16 * v23 + 32], 16 * (v131 - v23));
          *((void *)v21 + 2) = v131 - 1;
          Swift::Int v23 = v131 - 1;
        }
        while (v131 > 2);
      }
LABEL_118:
      swift_bridgeObjectRelease();
      *(void *)(v133 + 16) = 0;
      swift_bridgeObjectRelease();
      return;
    }
  }
  else
  {
    unint64_t v18 = v17 >> 1;
    uint64_t v19 = static Array._allocateBufferUninitialized(minimumCapacity:)();
    *(void *)(v19 + 16) = v18;
    Swift::Int v20 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
    Swift::Int v133 = v19;
    uint64_t v141 = v19 + v20;
  }
  Swift::Int v22 = 0;
  unint64_t v21 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v140 = a1;
  while (1)
  {
    uint64_t v24 = v22 + 1;
    unint64_t v139 = v22;
    if (v22 + 1 < v15)
    {
      uint64_t v136 = v21;
      uint64_t v25 = *a1;
      Swift::Int v26 = *(void *)(v142 + 72);
      long long v155 = v24;
      uint64_t v27 = v25 + v26 * v24;
      uint64_t v28 = v26;
      long long v154 = v26;
      uint64_t v29 = v25;
      Swift::Int v143 = v25;
      uint64_t v30 = v146;
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v27, v146, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      uint64_t v31 = v147;
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v29 + v28 * v139, v147, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      Swift::Int v153 = v15;
      Swift::Int v32 = v150;
      uint64_t v33 = *(int *)(v150 + 48);
      uint64_t v34 = v148;
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v30, v148, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v152 = *(void *)(v30 + v33);
      *(void *)(v34 + v33) = v152;
      outlined destroy of ToolbarStorage.Entry(v34, type metadata accessor for ToolbarStorage.Entry);
      Swift::Int v35 = *(int *)(v32 + 48);
      uint64_t v15 = v153;
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v31, v34, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v149 = *(void *)(v31 + v35);
      *(void *)(v34 + v35) = v149;
      outlined destroy of ToolbarStorage.Entry(v34, type metadata accessor for ToolbarStorage.Entry);
      outlined destroy of ToolbarStorage.Entry(v31, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      outlined destroy of ToolbarStorage.Entry(v30, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      Swift::Int v22 = v139;
      uint64_t v24 = v139 + 2;
      if (v139 + 2 < v15)
      {
        Swift::Int v135 = v2;
        uint64_t v36 = v143;
        uint64_t v144 = v154 * v24;
        uint64_t v145 = v154 * v155;
        while (1)
        {
          LODWORD(v155) = v152 < v149;
          Swift::Int v37 = v146;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v36 + v144, v146, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          Swift::Int v38 = v147;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v36 + v145, v147, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          uint64_t v39 = v150;
          uint64_t v40 = *(int *)(v150 + 48);
          id v41 = v148;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v37, v148, type metadata accessor for ToolbarStorage.Entry);
          int v42 = *(void *)(v37 + v40);
          *(void *)(v41 + v40) = v42;
          outlined destroy of ToolbarStorage.Entry(v41, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v43 = *(int *)(v39 + 48);
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v38, v41, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v44 = *(void *)(v38 + v43);
          *(void *)(v41 + v43) = v44;
          outlined destroy of ToolbarStorage.Entry(v41, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ToolbarStorage.Entry(v38, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          outlined destroy of ToolbarStorage.Entry(v37, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          if (v155 == v42 >= v44) {
            break;
          }
          ++v24;
          uint64_t v15 = v153;
          v36 += v154;
          if (v153 == v24)
          {
            uint64_t v24 = v153;
            uint64_t v2 = v135;
            Swift::Int v22 = v139;
            a1 = v140;
            goto LABEL_22;
          }
        }
        uint64_t v2 = v135;
        Swift::Int v22 = v139;
        a1 = v140;
        uint64_t v15 = v153;
      }
LABEL_22:
      unint64_t v21 = v136;
      if (v152 < v149)
      {
        if (v24 < v22) {
          goto LABEL_142;
        }
        if (v22 < v24)
        {
          Swift::Int v135 = v2;
          Swift::Int v45 = 0;
          uint64_t v46 = v154;
          unint64_t v47 = v154 * (v24 - 1);
          uint64_t v48 = v24 * v154;
          uint64_t v49 = v22;
          uint64_t v50 = v22 * v154;
          do
          {
            if (v49 != v24 + v45 - 1)
            {
              unint64_t v51 = v143;
              if (!v143) {
                goto LABEL_147;
              }
              int v52 = v143 + v50;
              uint64_t v53 = v143 + v47;
              outlined init with take of (ToolbarStorage.Entry, Int)(v143 + v50, v138, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
              if (v50 < v47 || v52 >= v51 + v48)
              {
                swift_arrayInitWithTakeFrontToBack();
                uint64_t v46 = v154;
              }
              else
              {
                uint64_t v46 = v154;
                if (v50 != v47) {
                  swift_arrayInitWithTakeBackToFront();
                }
              }
              outlined init with take of (ToolbarStorage.Entry, Int)(v138, v53, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
            }
            ++v49;
            --v45;
            v47 -= v46;
            v48 -= v46;
            v50 += v46;
          }
          while (v49 < v24 + v45);
          uint64_t v2 = v135;
          unint64_t v21 = v136;
          Swift::Int v22 = v139;
          a1 = v140;
          uint64_t v15 = v153;
        }
      }
    }
    if (v24 >= v15) {
      goto LABEL_48;
    }
    unint64_t v73 = __OFSUB__(v24, v22);
    Swift::Int v54 = v24 - v22;
    if (v73) {
      goto LABEL_140;
    }
    if (v54 < v134) {
      break;
    }
    Swift::Int v22 = v139;
LABEL_48:
    if (v24 < v22) {
      goto LABEL_135;
    }
LABEL_49:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v149 = v24;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v21 + 2) + 1, 1, v21);
    }
    Swift::Int v58 = *((void *)v21 + 2);
    Swift::Int v57 = *((void *)v21 + 3);
    Swift::Int v23 = v58 + 1;
    if (v58 >= v57 >> 1) {
      unint64_t v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v57 > 1), v58 + 1, 1, v21);
    }
    *((void *)v21 + 2) = v23;
    uint64_t v59 = v21 + 32;
    uint64_t v60 = &v21[16 * v58 + 32];
    Swift::Int v61 = v149;
    *(void *)uint64_t v60 = v139;
    *((void *)v60 + 1) = v61;
    if (v58)
    {
      while (1)
      {
        uint64_t v62 = v23 - 1;
        if (v23 >= 4)
        {
          uint64_t v67 = &v59[16 * v23];
          uint64_t v68 = *((void *)v67 - 8);
          char v69 = *((void *)v67 - 7);
          unint64_t v73 = __OFSUB__(v69, v68);
          uint64_t v70 = v69 - v68;
          if (v73) {
            goto LABEL_124;
          }
          uint64_t v72 = *((void *)v67 - 6);
          uint64_t v71 = *((void *)v67 - 5);
          unint64_t v73 = __OFSUB__(v71, v72);
          uint64_t v65 = v71 - v72;
          uint64_t v66 = v73;
          if (v73) {
            goto LABEL_125;
          }
          unint64_t v74 = v23 - 2;
          uint64_t v75 = &v59[16 * v23 - 32];
          Swift::Int v77 = *(void *)v75;
          uint64_t v76 = *((void *)v75 + 1);
          unint64_t v73 = __OFSUB__(v76, v77);
          unint64_t v78 = v76 - v77;
          if (v73) {
            goto LABEL_127;
          }
          unint64_t v73 = __OFADD__(v65, v78);
          uint64_t v79 = v65 + v78;
          if (v73) {
            goto LABEL_130;
          }
          if (v79 >= v70)
          {
            uint64_t v97 = &v59[16 * v62];
            BOOL v99 = *(void *)v97;
            uint64_t v98 = *((void *)v97 + 1);
            unint64_t v73 = __OFSUB__(v98, v99);
            uint64_t v100 = v98 - v99;
            if (v73) {
              goto LABEL_134;
            }
            unint64_t v90 = v65 < v100;
            goto LABEL_85;
          }
        }
        else
        {
          if (v23 != 3)
          {
            long long v91 = *((void *)v21 + 4);
            uint64_t v92 = *((void *)v21 + 5);
            unint64_t v73 = __OFSUB__(v92, v91);
            uint64_t v84 = v92 - v91;
            uint64_t v85 = v73;
            goto LABEL_79;
          }
          char v64 = *((void *)v21 + 4);
          int v63 = *((void *)v21 + 5);
          unint64_t v73 = __OFSUB__(v63, v64);
          uint64_t v65 = v63 - v64;
          uint64_t v66 = v73;
        }
        if (v66) {
          goto LABEL_126;
        }
        unint64_t v74 = v23 - 2;
        uint64_t v80 = &v59[16 * v23 - 32];
        char v82 = *(void *)v80;
        uint64_t v81 = *((void *)v80 + 1);
        uint64_t v83 = __OFSUB__(v81, v82);
        uint64_t v84 = v81 - v82;
        uint64_t v85 = v83;
        if (v83) {
          goto LABEL_129;
        }
        uint64_t v86 = &v59[16 * v62];
        uint64_t v88 = *(void *)v86;
        uint64_t v87 = *((void *)v86 + 1);
        unint64_t v73 = __OFSUB__(v87, v88);
        BOOL v89 = v87 - v88;
        if (v73) {
          goto LABEL_132;
        }
        if (__OFADD__(v84, v89)) {
          goto LABEL_133;
        }
        if (v84 + v89 >= v65)
        {
          unint64_t v90 = v65 < v89;
LABEL_85:
          if (v90) {
            uint64_t v62 = v74;
          }
          goto LABEL_87;
        }
LABEL_79:
        if (v85) {
          goto LABEL_128;
        }
        uint64_t v93 = &v59[16 * v62];
        uint64_t v95 = *(void *)v93;
        uint64_t v94 = *((void *)v93 + 1);
        unint64_t v73 = __OFSUB__(v94, v95);
        uint64_t v96 = v94 - v95;
        if (v73) {
          goto LABEL_131;
        }
        if (v96 < v84) {
          goto LABEL_14;
        }
LABEL_87:
        char v101 = v62 - 1;
        if (v62 - 1 >= v23)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        uint64_t v102 = *a1;
        if (!*a1) {
          goto LABEL_146;
        }
        uint64_t v103 = v21;
        uint64_t v104 = &v59[16 * v101];
        uint64_t v105 = *(void *)v104;
        BOOL v106 = &v59[16 * v62];
        uint64_t v107 = *((void *)v106 + 1);
        specialized _merge<A>(low:mid:high:buffer:by:)(v102 + *(void *)(v142 + 72) * *(void *)v104, v102 + *(void *)(v142 + 72) * *(void *)v106, v102 + *(void *)(v142 + 72) * v107, v141);
        if (v2) {
          goto LABEL_118;
        }
        if (v107 < v105) {
          goto LABEL_121;
        }
        if (v62 > *((void *)v103 + 2)) {
          goto LABEL_122;
        }
        *(void *)uint64_t v104 = v105;
        *(void *)&v59[16 * v101 + 8] = v107;
        uint64_t v108 = *((void *)v103 + 2);
        if (v62 >= v108) {
          goto LABEL_123;
        }
        unint64_t v21 = v103;
        Swift::Int v23 = v108 - 1;
        memmove(&v59[16 * v62], v106 + 16, 16 * (v108 - 1 - v62));
        *((void *)v103 + 2) = v108 - 1;
        a1 = v140;
        if (v108 <= 2) {
          goto LABEL_14;
        }
      }
    }
    Swift::Int v23 = 1;
LABEL_14:
    uint64_t v15 = a1[1];
    Swift::Int v22 = v149;
    if (v149 >= v15) {
      goto LABEL_107;
    }
  }
  if (__OFADD__(v139, v134)) {
    goto LABEL_143;
  }
  if (v139 + v134 >= v15) {
    uint64_t v55 = v15;
  }
  else {
    uint64_t v55 = v139 + v134;
  }
  if (v55 >= v139)
  {
    if (v24 == v55)
    {
      if (v24 < v139) {
        goto LABEL_135;
      }
    }
    else
    {
      Swift::Int v135 = v2;
      uint64_t v136 = v21;
      long long v109 = *(void *)(v142 + 72);
      uint64_t v110 = v109 * (v24 - 1);
      Swift::Int v143 = v109;
      uint64_t v111 = v24 * v109;
      Swift::Int v137 = v55;
      do
      {
        long long v113 = 0;
        uint64_t v114 = v139;
        uint64_t v149 = v24;
        uint64_t v144 = v111;
        uint64_t v145 = v110;
        while (1)
        {
          long long v154 = v114;
          uint64_t v115 = *a1;
          Swift::Int v153 = v111 + v113;
          uint64_t v116 = v146;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v111 + v113 + v115, v146, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          uint64_t v152 = v110 + v113;
          unint64_t v117 = v110 + v113 + v115;
          long long v118 = v147;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v117, v147, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          uint64_t v119 = v150;
          uint64_t v120 = *(int *)(v150 + 48);
          uint64_t v121 = v148;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v116, v148, type metadata accessor for ToolbarStorage.Entry);
          long long v155 = *(void *)(v116 + v120);
          *(void *)(v121 + v120) = v155;
          outlined destroy of ToolbarStorage.Entry(v121, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v122 = *(int *)(v119 + 48);
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v118, v121, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v123 = *(void *)(v118 + v122);
          *(void *)(v121 + v122) = v123;
          outlined destroy of ToolbarStorage.Entry(v121, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ToolbarStorage.Entry(v118, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          outlined destroy of ToolbarStorage.Entry(v116, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          if (v155 >= v123) {
            break;
          }
          unint64_t v124 = *a1;
          if (!*a1) {
            goto LABEL_145;
          }
          uint64_t v111 = v144;
          uint64_t v110 = v145;
          uint64_t v125 = v124 + v145 + v113;
          outlined init with take of (ToolbarStorage.Entry, Int)(v124 + v144 + v113, v151, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          swift_arrayInitWithTakeFrontToBack();
          outlined init with take of (ToolbarStorage.Entry, Int)(v151, v125, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          v113 -= v143;
          uint64_t v114 = v154 + 1;
          uint64_t v112 = v149;
          if (v149 == v154 + 1) {
            goto LABEL_97;
          }
        }
        uint64_t v112 = v149;
        uint64_t v111 = v144;
        uint64_t v110 = v145;
LABEL_97:
        uint64_t v24 = v112 + 1;
        v110 += v143;
        v111 += v143;
      }
      while (v24 != v137);
      uint64_t v24 = v137;
      uint64_t v2 = v135;
      unint64_t v21 = v136;
      if (v137 < v139) {
        goto LABEL_135;
      }
    }
    goto LABEL_49;
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized MutableCollection<>._insertionSort(within:sortedEnd:by:)(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v31 = a1;
  uint64_t v7 = type metadata accessor for IndexPath();
  MEMORY[0x1F4188790](v7);
  id v41 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  Swift::Int v37 = (char *)&v29 - v10;
  v13.n128_f64[0] = MEMORY[0x1F4188790](v11);
  uint64_t v36 = (char *)&v29 - v14;
  uint64_t v39 = a3;
  uint64_t v30 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void (**)(void, void, void, __n128))(v12 + 16);
    uint64_t v15 = v12 + 16;
    uint64_t v17 = *(void *)(v15 + 56);
    Swift::Int v32 = (void (**)(char *, uint64_t))(v15 - 8);
    uint64_t v33 = v16;
    uint64_t v34 = a4;
    uint64_t v35 = v15;
    uint64_t v40 = (void (**)(char *, uint64_t, uint64_t))(v15 + 16);
    uint64_t v44 = v17 * (v39 - 1);
    uint64_t v38 = v17;
    uint64_t v43 = v17 * v39;
LABEL_5:
    uint64_t v18 = 0;
    uint64_t v42 = v31;
    while (1)
    {
      uint64_t v19 = *a4;
      uint64_t v20 = v43 + v18 + *a4;
      unint64_t v21 = v36;
      Swift::Int v22 = (void (*)(char *, uint64_t, uint64_t))v33;
      v33(v36, v20, v7, v13);
      Swift::Int v23 = v37;
      v22(v37, v44 + v18 + v19, v7);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
      LOBYTE(v22) = dispatch thunk of static Comparable.< infix(_:_:)();
      uint64_t v24 = *v32;
      (*v32)(v23, v7);
      uint64_t v25 = v21;
      a4 = v34;
      v24(v25, v7);
      if ((v22 & 1) == 0)
      {
LABEL_4:
        v44 += v38;
        v43 += v38;
        if (++v39 == v30) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v26 = *a4;
      if (!*a4) {
        break;
      }
      uint64_t v27 = (char *)(v26 + v44 + v18);
      uint64_t v28 = *v40;
      (*v40)(v41, v26 + v43 + v18, v7);
      swift_arrayInitWithTakeFrontToBack();
      v28(v27, (uint64_t)v41, v7);
      v18 -= v38;
      if (v39 == ++v42) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  uint64_t v35 = a1;
  type metadata accessor for (ToolbarStorage.Entry, Int)();
  uint64_t v43 = v7;
  MEMORY[0x1F4188790](v7);
  uint64_t v44 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v38 = (char *)&v33 - v10;
  MEMORY[0x1F4188790](v11);
  Swift::Int v37 = (char *)&v33 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v36 = (uint64_t)&v33 - v15;
  uint64_t v42 = a3;
  uint64_t v34 = a2;
  if (a3 != a2)
  {
    uint64_t v16 = *(void *)(v14 + 72);
    uint64_t v17 = v16 * (v42 - 1);
    uint64_t v39 = v16;
    uint64_t v18 = v16 * v42;
    uint64_t v20 = (uint64_t)v37;
    uint64_t v19 = (uint64_t)v38;
LABEL_5:
    unint64_t v21 = 0;
    unint64_t v47 = v35;
    uint64_t v40 = v18;
    id v41 = v17;
    while (1)
    {
      Swift::Int v22 = *a4;
      uint64_t v46 = v18 + v21;
      Swift::Int v23 = v18 + v21 + v22;
      uint64_t v24 = v36;
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v23, v36, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      Swift::Int v45 = v17 + v21;
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v17 + v21 + v22, v20, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      uint64_t v25 = v43;
      uint64_t v26 = *(int *)(v43 + 48);
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v24, v19, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v48 = *(void *)(v24 + v26);
      *(void *)(v19 + v26) = v48;
      outlined destroy of ToolbarStorage.Entry(v19, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v27 = a4;
      uint64_t v28 = *(int *)(v25 + 48);
      _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v20, v19, type metadata accessor for ToolbarStorage.Entry);
      uint64_t v29 = *(void *)(v20 + v28);
      *(void *)(v19 + v28) = v29;
      a4 = v27;
      uint64_t v17 = v41;
      outlined destroy of ToolbarStorage.Entry(v19, type metadata accessor for ToolbarStorage.Entry);
      outlined destroy of ToolbarStorage.Entry(v20, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      uint64_t v30 = v24;
      uint64_t v18 = v40;
      outlined destroy of ToolbarStorage.Entry(v30, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      if (v48 >= v29)
      {
LABEL_4:
        v17 += v39;
        v18 += v39;
        if (++v42 == v34) {
          return;
        }
        goto LABEL_5;
      }
      uint64_t v31 = *a4;
      if (!*a4) {
        break;
      }
      Swift::Int v32 = v31 + v17 + v21;
      outlined init with take of (ToolbarStorage.Entry, Int)(v31 + v18 + v21, v44, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      swift_arrayInitWithTakeFrontToBack();
      outlined init with take of (ToolbarStorage.Entry, Int)(v44, v32, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
      v21 -= v39;
      if (v42 == ++v47) {
        goto LABEL_4;
      }
    }
    __break(1u);
  }
}

uint64_t specialized _merge<A>(low:mid:high:buffer:by:)(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8 = type metadata accessor for IndexPath();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v56 = (char *)v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v55 = (char *)v49 - v12;
  uint64_t v57 = *(void *)(v13 + 72);
  if (!v57)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v57 == -1) {
    goto LABEL_68;
  }
  int64_t v14 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v57 == -1) {
    goto LABEL_69;
  }
  uint64_t v15 = (uint64_t)(a2 - a1) / v57;
  unint64_t v60 = a1;
  unint64_t v59 = a4;
  uint64_t v16 = v14 / v57;
  if (v15 >= v14 / v57)
  {
    if ((v16 & 0x8000000000000000) == 0)
    {
      uint64_t v18 = v16 * v57;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
        uint64_t v19 = v9;
      }
      else
      {
        uint64_t v19 = v9;
        if (a4 != a2) {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      unint64_t v34 = a4 + v18;
      unint64_t v58 = a4 + v18;
      unint64_t v60 = a2;
      unint64_t v52 = a1;
      if (v18 >= 1 && a1 < a2)
      {
        unint64_t v36 = -v57;
        uint64_t v38 = *(void (**)(char *, unint64_t, uint64_t))(v19 + 16);
        uint64_t v37 = v19 + 16;
        v49[1] = v37 - 8;
        uint64_t v50 = v38;
        unint64_t v53 = -v57;
        uint64_t v54 = v37;
        unint64_t v51 = a4;
        uint64_t v39 = v55;
        uint64_t v40 = (void (**)(char *, uint64_t))(v37 - 8);
        do
        {
          uint64_t v57 = a3 + v36;
          id v41 = v50;
          v50(v39, v34 + v36, v8);
          unint64_t v42 = a2 + v36;
          unint64_t v43 = a3;
          uint64_t v44 = v56;
          v41(v56, v42, v8);
          lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
          LOBYTE(v41) = dispatch thunk of static Comparable.< infix(_:_:)();
          Swift::Int v45 = *v40;
          (*v40)(v44, v8);
          v45(v39, v8);
          if (v41)
          {
            a3 = v57;
            if (v43 < a2 || v57 >= a2)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v46 = v51;
            }
            else
            {
              unint64_t v46 = v51;
              if (v43 != a2) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            unint64_t v36 = v53;
            v60 += v53;
          }
          else
          {
            a3 = v57;
            unint64_t v47 = v58;
            v58 += v53;
            if (v43 < v47 || v57 >= v47)
            {
              swift_arrayInitWithTakeFrontToBack();
              unint64_t v42 = a2;
              unint64_t v36 = v53;
              unint64_t v46 = v51;
            }
            else
            {
              unint64_t v46 = v51;
              if (v43 != v47) {
                swift_arrayInitWithTakeBackToFront();
              }
              unint64_t v42 = a2;
              unint64_t v36 = v53;
            }
          }
          unint64_t v34 = v58;
          if (v58 <= v46) {
            break;
          }
          a2 = v42;
        }
        while (v42 > v52);
      }
      goto LABEL_66;
    }
  }
  else if ((v15 & 0x8000000000000000) == 0)
  {
    uint64_t v17 = v15 * v57;
    if (a4 < a1 || a1 + v17 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v53 = a4 + v17;
    unint64_t v58 = a4 + v17;
    if (v17 >= 1 && a2 < a3)
    {
      unint64_t v21 = *(void (**)(char *, unint64_t, uint64_t))(v9 + 16);
      uint64_t v54 = v9 + 16;
      Swift::Int v22 = (void (**)(char *, uint64_t))(v9 + 8);
      do
      {
        unint64_t v23 = a3;
        uint64_t v24 = v55;
        v21(v55, a2, v8);
        unint64_t v25 = a4;
        uint64_t v26 = v56;
        v21(v56, v25, v8);
        lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type IndexPath and conformance IndexPath, MEMORY[0x1E4F27DE8]);
        char v27 = dispatch thunk of static Comparable.< infix(_:_:)();
        uint64_t v28 = *v22;
        (*v22)(v26, v8);
        v28(v24, v8);
        unint64_t v29 = v60;
        if (v27)
        {
          unint64_t v30 = a2 + v57;
          if (v60 < a2 || v60 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v60 == a2) {
              unint64_t v29 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        else
        {
          unint64_t v32 = v59 + v57;
          if (v60 < v59 || v60 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            a3 = v23;
          }
          else
          {
            a3 = v23;
            if (v60 != v59) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          unint64_t v59 = v32;
          unint64_t v30 = a2;
        }
        unint64_t v60 = v29 + v57;
        a4 = v59;
        if (v59 >= v53) {
          break;
        }
        a2 = v30;
      }
      while (v30 < a3);
    }
LABEL_66:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v60, &v59, (uint64_t *)&v58);
    return 1;
  }
LABEL_70:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  BOOL v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;

  type metadata accessor for (ToolbarStorage.Entry, Int)();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v8);
  Swift::Int v61 = (uint64_t)&v54 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  int v63 = (uint64_t)&v54 - v12;
  MEMORY[0x1F4188790](v13);
  uint64_t v62 = (char *)&v54 - v14;
  uint64_t v16 = *(void *)(v15 + 72);
  if (!v16)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_62;
  }
  uint64_t v17 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v16 == -1) {
    goto LABEL_63;
  }
  uint64_t v18 = (uint64_t)(a2 - a1) / v16;
  uint64_t v66 = a1;
  uint64_t v65 = a4;
  uint64_t v19 = v17 / v16;
  if (v18 >= v17 / v16)
  {
    if ((v19 & 0x8000000000000000) == 0)
    {
      unint64_t v21 = v19 * v16;
      if (a4 < a2 || a2 + v21 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      unint64_t v36 = a4 + v21;
      char v64 = a4 + v21;
      uint64_t v66 = a2;
      if (v21 >= 1 && a1 < a2)
      {
        uint64_t v38 = -v16;
        unint64_t v60 = v9;
        uint64_t v55 = a4;
        uint64_t v56 = -v16;
        uint64_t v57 = a1;
        uint64_t v39 = (uint64_t)v62;
        do
        {
          unint64_t v58 = a2;
          unint64_t v59 = a3 + v38;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v36 + v38, v39, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          uint64_t v40 = a2 + v38;
          id v41 = a2 + v38;
          unint64_t v42 = v63;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v41, v63, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          unint64_t v43 = a3;
          uint64_t v44 = *(int *)(v9 + 48);
          Swift::Int v45 = v61;
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v39, v61, type metadata accessor for ToolbarStorage.Entry);
          unint64_t v46 = *(void *)(v39 + v44);
          *(void *)(v45 + v44) = v46;
          outlined destroy of ToolbarStorage.Entry(v45, type metadata accessor for ToolbarStorage.Entry);
          unint64_t v47 = *(int *)(v9 + 48);
          _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v42, v45, type metadata accessor for ToolbarStorage.Entry);
          uint64_t v48 = *(void *)(v42 + v47);
          *(void *)(v45 + v47) = v48;
          outlined destroy of ToolbarStorage.Entry(v45, type metadata accessor for ToolbarStorage.Entry);
          outlined destroy of ToolbarStorage.Entry(v42, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          outlined destroy of ToolbarStorage.Entry(v39, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
          if (v46 >= v48)
          {
            uint64_t v40 = v58;
            a3 = v59;
            unint64_t v52 = v64;
            v64 += v56;
            uint64_t v38 = v56;
            if (v43 < v52 || v59 >= v52)
            {
              uint64_t v9 = v60;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v50 = v55;
              unint64_t v51 = v57;
            }
            else
            {
              uint64_t v9 = v60;
              unint64_t v51 = v57;
              if (v43 != v52) {
                swift_arrayInitWithTakeBackToFront();
              }
              uint64_t v50 = v55;
            }
          }
          else
          {
            uint64_t v38 = v56;
            a3 = v59;
            if (v43 < v58 || v59 >= v58)
            {
              uint64_t v9 = v60;
              swift_arrayInitWithTakeFrontToBack();
              uint64_t v50 = v55;
              unint64_t v51 = v57;
            }
            else
            {
              uint64_t v49 = v43 == v58;
              uint64_t v9 = v60;
              uint64_t v50 = v55;
              unint64_t v51 = v57;
              if (!v49) {
                swift_arrayInitWithTakeBackToFront();
              }
            }
            v66 += v38;
          }
          unint64_t v36 = v64;
          if (v64 <= v50) {
            break;
          }
          a2 = v40;
        }
        while (v40 > v51);
      }
      goto LABEL_60;
    }
  }
  else if ((v18 & 0x8000000000000000) == 0)
  {
    uint64_t v20 = v18 * v16;
    if (a4 < a1 || a1 + v20 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    unint64_t v59 = a4 + v20;
    char v64 = a4 + v20;
    if (v20 >= 1 && a2 < a3)
    {
      unint64_t v60 = v9;
      unint64_t v58 = a3;
      uint64_t v56 = v16;
      unint64_t v23 = (uint64_t)v62;
      do
      {
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a2, v23, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
        uint64_t v24 = v63;
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(a4, v63, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
        unint64_t v25 = *(int *)(v9 + 48);
        uint64_t v26 = v61;
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v23, v61, type metadata accessor for ToolbarStorage.Entry);
        char v27 = v9;
        uint64_t v28 = *(void *)(v23 + v25);
        *(void *)(v26 + v25) = v28;
        outlined destroy of ToolbarStorage.Entry(v26, type metadata accessor for ToolbarStorage.Entry);
        unint64_t v29 = *(int *)(v27 + 48);
        _s7SwiftUI14ToolbarStorageV5EntryVWOcTm_0(v24, v26, type metadata accessor for ToolbarStorage.Entry);
        unint64_t v30 = *(void *)(v24 + v29);
        *(void *)(v26 + v29) = v30;
        outlined destroy of ToolbarStorage.Entry(v26, type metadata accessor for ToolbarStorage.Entry);
        outlined destroy of ToolbarStorage.Entry(v24, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
        outlined destroy of ToolbarStorage.Entry(v23, (uint64_t (*)(void))type metadata accessor for (ToolbarStorage.Entry, Int));
        uint64_t v31 = v66;
        if (v28 >= v30)
        {
          unint64_t v32 = v56;
          uint64_t v35 = v65 + v56;
          if (v66 < v65 || v66 >= v35)
          {
            uint64_t v9 = v60;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v34 = v58;
          }
          else
          {
            unint64_t v34 = v58;
            uint64_t v9 = v60;
            if (v66 != v65) {
              swift_arrayInitWithTakeBackToFront();
            }
          }
          uint64_t v65 = v35;
          uint64_t v33 = a2;
        }
        else
        {
          unint64_t v32 = v56;
          uint64_t v33 = a2 + v56;
          if (v66 < a2 || v66 >= v33)
          {
            uint64_t v9 = v60;
            swift_arrayInitWithTakeFrontToBack();
            unint64_t v34 = v58;
          }
          else
          {
            unint64_t v34 = v58;
            uint64_t v9 = v60;
            if (v66 == a2) {
              uint64_t v31 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront();
            }
          }
        }
        uint64_t v66 = v31 + v32;
        a4 = v65;
        if (v65 >= v59) {
          break;
        }
        a2 = v33;
      }
      while (v33 < v34);
    }
LABEL_60:
    specialized $defer #1 <A>() in _merge<A>(low:mid:high:buffer:by:)(&v66, &v65, (uint64_t *)&v64);
    return 1;
  }
LABEL_64:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = a3[1];
  uint64_t v5 = a3[2];
  uint64_t v6 = a3[3];
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x18C119DF0](v7);
  if (v8)
  {
    uint64_t v9 = (void *)v8;
    char v10 = specialized AccessibilityNode.sendAction<A>(_:value:)(v3, v4, v5, v6);
  }
  else
  {
    char v10 = 0;
  }
  return v10 & 1;
}

void *partial apply for closure #1 in AccessibilityNode.applyChildren(to:)()
{
  return closure #1 in AccessibilityNode.applyChildren(to:)(v0);
}

id partial apply for closure #2 in AccessibilityNode.applyProperties(to:includingRelations:)()
{
  return closure #2 in AccessibilityNode.applyProperties(to:includingRelations:)(v0);
}

uint64_t sub_187C86A8C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  char v4 = *a4;
  uint64_t v5 = a2 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    char v8 = specialized AccessibilityNode.sendAction<A>(_:value:)(v4);
  }
  else
  {
    char v8 = 0;
  }
  return v8 & 1;
}

uint64_t sub_187C86B30()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(a1, *(void *)(v3 + 16), a3, (char *)(v3 + 24));
}

uint64_t specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  char v4 = *a3;
  char v5 = *a4;
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](v6);
  if (v7)
  {
    char v8 = (void *)v7;
    char v9 = specialized AccessibilityNode.sendAction<A>(_:value:)(v4, v5);
  }
  else
  {
    char v9 = 0;
  }
  return v9 & 1;
}

uint64_t sub_187C86BF4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(uint64_t a1)
{
  return specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(a1, *(void *)(v1 + 16), (char *)(v1 + 24), (char *)(v1 + 25));
}

{
  uint64_t v1;

  return specialized closure #1 in AccessibilityNode.applyAction<A>(_:value:key:to:)(a1, *(void *)(v1 + 16), (uint64_t *)(v1 + 24));
}

uint64_t sub_187C86C3C()
{
  swift_release();
  if (*(void *)(v0 + 48) >= 5uLL)
  {
    outlined consume of Text.Storage(*(void *)(v0 + 24), *(void *)(v0 + 32), *(unsigned char *)(v0 + 40));
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

void *partial apply for closure #6 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #4 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityAttributedHint);
}

uint64_t sub_187C86CC4()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #17 in AccessibilityNode.applyProperties(_:to:)()
{
  return Array<A>.resolve(in:)();
}

uint64_t partial apply for closure #18 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #18 in AccessibilityNode.applyProperties(_:to:)(v0);
}

char *_sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI17AccessibilityNodeCG_yps5NeverOTg503_s7d4UI17fg16CAA08PlatformC15b35Protocol_So8NSObjectCXcIeggo_ACyps5H11OIegnrzr_TRAhF0lfbN0_So0P0CXcIeggo_Tf1cn_nTf4ng_n(unint64_t a1, uint64_t (*a2)(void))
{
  if (a1 >> 62) {
    goto LABEL_15;
  }
  uint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  while (1)
  {
    uint64_t v5 = MEMORY[0x1E4FBC860];
    if (!v4) {
      return (char *)v5;
    }
    uint64_t v15 = MEMORY[0x1E4FBC860];
    uint64_t result = specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4 & ~(v4 >> 63), 0);
    if (v4 < 0) {
      break;
    }
    uint64_t v7 = 0;
    uint64_t v5 = v15;
    while (v4 != v7)
    {
      if ((a1 & 0xC000000000000001) != 0) {
        id v8 = (id)MEMORY[0x18C117680](v7, a1);
      }
      else {
        id v8 = *(id *)(a1 + 8 * v7 + 32);
      }
      char v9 = v8;
      uint64_t v10 = a2();
      uint64_t ObjectType = swift_getObjectType();

      *(void *)&long long v13 = v10;
      uint64_t v15 = v5;
      unint64_t v12 = *(void *)(v5 + 16);
      unint64_t v11 = *(void *)(v5 + 24);
      if (v12 >= v11 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1);
        uint64_t v5 = v15;
      }
      ++v7;
      *(void *)(v5 + 16) = v12 + 1;
      outlined init with take of Any(&v13, (_OWORD *)(v5 + 32 * v12 + 32));
      if (v4 == v7) {
        return (char *)v5;
      }
    }
    __break(1u);
LABEL_15:
    swift_bridgeObjectRetain();
    uint64_t v4 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  __break(1u);
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI22AnyAccessibilityActionV8ResolvedVG_So021UIAccessibilityCustomH0Cs5NeverOTg503_s7d4UI17g20NodeC26accessibilityk15ActionsSaySo015j2F6h19CGSgvgAfA03AnycI0V8I6VXEfU_AF0gO0CTf1cn_nTf4ng_n(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray.reserveCapacity(_:)();
    uint64_t v4 = (void **)(a1 + 56);
    do
    {
      uint64_t v6 = *(v4 - 3);
      uint64_t v5 = (uint64_t)*(v4 - 2);
      uint64_t v7 = (uint64_t)*(v4 - 1);
      id v8 = *v4;
      uint64_t v9 = swift_allocObject();
      swift_unknownObjectWeakInit();
      uint64_t v10 = (void *)swift_allocObject();
      uint64_t v10[2] = v9;
      void v10[3] = v6;
      uint64_t v19 = v5;
      void v10[4] = v5;
      v10[5] = v7;
      void v10[6] = v8;
      id v11 = objc_allocWithZone(MEMORY[0x1E4FB13B8]);
      aBlock[4] = partial apply for closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter;
      aBlock[5] = v10;
      aBlock[0] = MEMORY[0x1E4F143A8];
      aBlock[1] = 1107296256;
      aBlock[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomAction) -> (@unowned Bool);
      aBlock[3] = &block_descriptor_131;
      unint64_t v12 = _Block_copy(aBlock);
      id v13 = v8;
      id v14 = v6;
      swift_bridgeObjectRetain();
      id v15 = v13;
      swift_retain();
      id v16 = v14;
      swift_bridgeObjectRetain();
      id v17 = objc_msgSend(v11, sel_initWithAttributedName_image_actionHandler_, v16, v15, v12);
      _Block_release(v12);
      swift_release();
      swift_release();
      if (objc_msgSend(v17, sel_respondsToSelector_, sel_localizedActionRotorCategory))
      {
        if (v7) {
          uint64_t v18 = MEMORY[0x18C115780](v19, v7);
        }
        else {
          uint64_t v18 = 0;
        }
        objc_msgSend(v17, sel_setLocalizedActionRotorCategory_, v18);
        swift_bridgeObjectRelease();

        id v16 = (id)v18;
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      v4 += 4;

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()();
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)();
      specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)();
      specialized ContiguousArray._endMutation()();
      --v2;
    }
    while (v2);
    return v21;
  }
  return result;
}

id partial apply for closure #19 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #16 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityChartDescriptor);
}

id partial apply for closure #16 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #16 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityPath);
}

double partial apply for closure #15 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #15 in AccessibilityNode.applyProperties(_:to:)(v0);
}

uint64_t sub_187C8732C()
{
  return swift_deallocObject();
}

double partial apply for closure #14 in AccessibilityNode.applyProperties(_:to:)()
{
  return *(double *)(v0 + 16);
}

uint64_t outlined consume of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

Class partial apply for closure #12 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #12 in AccessibilityNode.applyProperties(_:to:)(v0);
}

Class partial apply for closure #8 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #8 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityColumnCount);
}

Class partial apply for closure #9 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #8 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityRowCount);
}

double partial apply for closure #10 in AccessibilityNode.applyProperties(_:to:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #10 in AccessibilityNode.applyProperties(_:to:)(a1, a2, v3, a3);
}

char *partial apply for closure #11 in AccessibilityNode.applyProperties(_:to:)(uint64_t a1)
{
  return closure #11 in AccessibilityNode.applyProperties(_:to:)(a1, v1);
}

void *partial apply for closure #7 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #7 in AccessibilityNode.applyProperties(_:to:)(v0);
}

void *partial apply for closure #5 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #4 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityAttributedValue);
}

void *partial apply for closure #4 in AccessibilityNode.applyProperties(_:to:)()
{
  return closure #4 in AccessibilityNode.applyProperties(_:to:)(v0, (SEL *)&selRef_accessibilityAttributedLabel);
}

uint64_t sub_187C8744C()
{
  return swift_deallocObject();
}

uint64_t sub_187C8745C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in AccessibilityNode.applyProperties(_:to:)()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_187C87474()
{
  return swift_deallocObject();
}

unint64_t type metadata accessor for UIAccessibilityContainerDataTableCell()
{
  unint64_t result = lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell;
  if (!lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIAccessibilityContainerDataTableCell);
  }
  return result;
}

void sub_187C874DC(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *a1;
  AccessibilityNode.platformElement.getter();
  if (!v4) {
    id v4 = v3;
  }
  *a2 = v4;
}

uint64_t partial apply for implicit closure #1 in AccessibilityLazyLayoutNode.accessibilityElements.getter(void *a1)
{
  return implicit closure #1 in AccessibilityNode._accessibilityNodeChildrenUnsorted.getter(a1);
}

uint64_t outlined release of AccessibilityDataSeriesConfiguration?(uint64_t a1)
{
  long long v4 = *(_OWORD *)(a1 + 240);
  long long v3 = *(_OWORD *)(a1 + 208);
  outlined consume of AccessibilityDataSeriesConfiguration?(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    v4,
    *((uint64_t *)&v4 + 1));
  return a1;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32)
{
  if (a4)
  {
    outlined consume of Text.Storage(result, a2, a3 & 1);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a8, a9, a10, a11, a12, a13, a14, a15, a16);
    return outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined consume of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined consume of Text?(result, a2, a3, a4);
    outlined consume of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s7SwiftUI36AccessibilityDataSeriesConfigurationV04AxisF0VSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t outlined copy of AccessibilityDataSeriesConfiguration.AxisConfiguration?(uint64_t result, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    outlined copy of Text?(result, a2, a3, a4);
    outlined copy of Text?(a5, a6, a7, a8);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *outlined retain of AccessibilityDataSeriesConfiguration.AxisConfiguration?(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

void type metadata accessor for Text.Style?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>?()
{
  if (!lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?)
  {
    type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>(255, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>, (uint64_t (*)(void))lazy protocol witness table accessor for type TableDataSourceAdaptor and conformance TableDataSourceAdaptor, (uint64_t (*)(uint64_t, ValueMetadata *, uint64_t))type metadata accessor for ShadowListDataSource);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ShadowListDataSource<TableDataSourceAdaptor>?);
    }
  }
}

void type metadata accessor for AccessibilityTextLayoutProperties??(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _sypSgMaTm_5(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for Optional();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ShadowListDataSource<TableDataSourceAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, ValueMetadata *, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3();
    unint64_t v8 = a4(a1, &type metadata for TableDataSourceAdaptor, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t sub_187C87B08()
{
  return 16;
}

__n128 sub_187C87B14(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

void type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    }
  }
}

uint64_t specialized AccessibilityNode.HeaderVisitor.isTargetHeader(node:)(uint64_t a1, uint64_t a2)
{
  AccessibilityNode.attachment.getter(v12);

  uint64_t v3 = swift_bridgeObjectRetain();
  specialized AccessibilityProperties.subscript.getter(v3, (uint64_t)v12);
  swift_bridgeObjectRelease_n();
  if (v13 == 255) {
    goto LABEL_6;
  }
  _s7SwiftUI25AccessibilityTableContextOSgWOcTm_0((uint64_t)v12, (uint64_t)&v8, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_sypSgMaTm_5);
  if (v11 == 3)
  {
    BOOL v6 = v8 == a2;
  }
  else
  {
    if (v11 != 4
      || (int8x16_t v4 = vorrq_s8(v9, v10),
          *(void *)&vorr_s8(*(int8x8_t *)v4.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v4, v4, 8uLL)) | v8))
    {
      outlined destroy of AccessibilityTableContext((uint64_t)&v8);
LABEL_6:
      uint64_t v5 = 0;
      goto LABEL_12;
    }
    BOOL v6 = a2 == 0;
  }
  uint64_t v5 = v6;
LABEL_12:
  outlined destroy of AnyAccessibilityValue?((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for AccessibilityTableContext?, (uint64_t)&type metadata for AccessibilityTableContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_sypSgMaTm_5);
  return v5;
}

uint64_t _s7SwiftUI22ImageResolutionContextVWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_187C880F4()
{
  swift_release();

  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

BOOL partial apply for closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter(uint64_t a1)
{
  return closure #1 in closure #1 in AccessibilityNode.accessibilityCustomActions.getter(a1, *(void *)(v1 + 16), *(void **)(v1 + 24));
}

uint64_t outlined init with take of AccessibilityTextLayoutProperties??(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t outlined destroy of AccessibilityTableContext??(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t *outlined release of AccessibilityTextLayoutProperties??(uint64_t *a1)
{
  return a1;
}

uint64_t outlined consume of AccessibilityTextLayoutProperties??(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a15 != 2)
  {
    return outlined consume of AccessibilityTextLayoutProperties?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15);
  }
  return result;
}

uint64_t closure #1 in AccessibilityNode.hasAction<A>(_:)specialized partial apply(void *a1)
{
  return partial apply for specialized closure #1 in AccessibilityNode.hasAction<A>(_:)(a1) & 1;
}

uint64_t View.alert<A, B>(_:isPresented:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>, long long a9, uint64_t a10, uint64_t a11)
{
  uint64_t v28 = a5;
  int v27 = a4;
  long long v26 = a9;
  double v16 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v18 + 16))((char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), v16);
  uint64_t v19 = Text.init<A>(_:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  View.alert<A>(_:isPresented:actions:)(v19, v20, v22 & 1, v24, a2, a3, v27, v28, a8, a6, a7, v26, *((uint64_t *)&v26 + 1), a11);
  outlined consume of Text.Storage(v19, v21, v23);
  return swift_bridgeObjectRelease();
}

uint64_t View.alert<A, B>(_:isPresented:actions:message:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t (*a4)(uint64_t)@<X7>, uint64_t a5@<X8>, uint64_t a6, void (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  char v23 = v22 & 1;
  View.alert<A, B>(_:isPresented:actions:message:)(v19, v20, v22 & 1, v24, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14);
  outlined consume of Text.Storage(v19, v21, v23);

  return swift_bridgeObjectRelease();
}

uint64_t View.alert<A, B, C>(_:isPresented:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  unint64_t v36 = a5;
  uint64_t v30 = a8;
  uint64_t v31 = a7;
  uint64_t v32 = a6;
  uint64_t v33 = a2;
  int v35 = a4;
  uint64_t v34 = a3;
  uint64_t v29 = a9;
  uint64_t v28 = a12;
  double v17 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  View.alert<A, B>(_:isPresented:actions:message:)(v20, v21, v23 & 1, v25, v33, v34, v35, v36, v29, v32, v31, v30, a10, v28, a13, a14, a16, a17);
  outlined consume of Text.Storage(v20, v22, v24);
  return swift_bridgeObjectRelease();
}

uint64_t View.alert<A, B>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v17 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v19 = v18;
  char v21 = v20 & 1;
  View.alert<A, B>(_:isPresented:presenting:actions:)(v17, v18, v20 & 1, v22, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
  outlined consume of Text.Storage(v17, v19, v21);

  return swift_bridgeObjectRelease();
}

uint64_t View.alert<A, B>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v28 = a12;
  uint64_t v29 = a13;
  uint64_t v30 = a14;
  uint64_t v31 = a15;
  uint64_t v32 = a16;
  uint64_t v33 = a5;
  uint64_t v34 = a6;
  char v35 = a7;
  uint64_t v36 = a8;
  uint64_t v37 = a10;
  uint64_t v38 = a11;
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  return View.alert<A>(_:isPresented:actions:)(a1, a2, a3 & 1, a4, a5, a6, a7, (uint64_t (*)(uint64_t))partial apply for closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:), a9, (uint64_t)v27, a12, v23, a15, WitnessTable);
}

uint64_t View.alert<A, B, C>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, long long a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v32 = a5;
  uint64_t v28 = a8;
  uint64_t v29 = a2;
  int v31 = a4;
  uint64_t v30 = a3;
  long long v27 = a11;
  double v17 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v19 + 16))((char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0), v17);
  uint64_t v20 = Text.init<A>(_:)();
  uint64_t v22 = v21;
  char v24 = v23 & 1;
  View.alert<A, B>(_:isPresented:presenting:actions:)(v20, v21, v23 & 1, v25, v29, v30, v31, v32, a9, a6, a7, v28, v27, *((uint64_t *)&v27 + 1), a12, a14);
  outlined consume of Text.Storage(v20, v22, v24);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  v43[1] = a6;
  uint64_t v44 = a5;
  uint64_t v47 = a4;
  LODWORD(v51) = a3;
  uint64_t v50 = a2;
  uint64_t v53 = a8;
  uint64_t v52 = a11;
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  v43[0] = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v48 = (char *)v43 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v45 = *(void *)(v17 - 8);
  uint64_t v46 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v43 - v18;
  uint64_t v49 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  long long v26 = (char *)v43 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)v43 - v28;
  uint64_t v55 = a1;
  uint64_t v56 = v50;
  char v57 = v51;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v58);
  if (v58 == 1)
  {
    uint64_t v51 = v13;
    uint64_t v31 = v45;
    uint64_t v30 = v46;
    (*(void (**)(char *, uint64_t, uint64_t))(v45 + 16))(v19, v47, v46);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v49 + 48))(v19, 1, a9) != 1)
    {
      uint64_t v35 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 32))(v22, v19, a9);
      uint64_t v36 = v43[0];
      v44(v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, a9);
      uint64_t v37 = v36;
      uint64_t v34 = v52;
      static ViewBuilder.buildExpression<A>(_:)(v36);
      uint64_t v38 = v51;
      uint64_t v39 = *(void (**)(uint64_t, uint64_t))(v51 + 8);
      v39(v37, a7);
      uint64_t v40 = v48;
      static ViewBuilder.buildExpression<A>(_:)(v48);
      v39((uint64_t)v40, a7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v26, 0, 1, a7);
      uint64_t v32 = (uint64_t)v29;
      uint64_t v33 = (uint64_t)v26;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
    uint64_t v13 = v51;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v26, 1, 1, a7);
  uint64_t v32 = (uint64_t)v29;
  uint64_t v33 = (uint64_t)v26;
  uint64_t v34 = v52;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v33, v32);
  id v41 = *(void (**)(char *, uint64_t))(v24 + 8);
  v41(v26, v23);
  uint64_t v54 = v34;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v41)(v29, v23);
}

uint64_t partial apply for closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.alert<A, B>(_:isPresented:presenting:actions:)(*(void *)(v1 + 56), *(void *)(v1 + 64), *(unsigned __int8 *)(v1 + 72), *(void *)(v1 + 80), *(void (**)(char *))(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 24), a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48));
}

uint64_t View.alert<A, B, C>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, int a3@<W6>, uint64_t a4@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v23 = v22;
  char v25 = v24 & 1;
  View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(v21, v22, v24 & 1, v26, a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15,
    a16);
  outlined consume of Text.Storage(v21, v23, v25);

  return swift_bridgeObjectRelease();
}

uint64_t View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, long long a10, uint64_t a11, long long a12, long long a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v36 = a5;
  uint64_t v32 = a8;
  uint64_t v33 = a2;
  int v35 = a4;
  uint64_t v34 = a3;
  long long v30 = a12;
  long long v31 = a10;
  long long v29 = a13;
  double v19 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v21 + 16))((char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0), v19);
  uint64_t v22 = Text.init<A>(_:)();
  uint64_t v24 = v23;
  char v26 = v25 & 1;
  View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(v22, v23, v25 & 1, v27, v33, v34, v35, v36, a9, a6, a7, v32, v31, *((uint64_t *)&v31 + 1), v30, *((uint64_t *)&v30 + 1), v29, *((uint64_t *)&v29 + 1), a15,
    a16);
  outlined consume of Text.Storage(v22, v24, v26);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v46 = a6;
  uint64_t v47 = a5;
  uint64_t v50 = a4;
  LODWORD(v54) = a3;
  uint64_t v53 = a2;
  uint64_t v56 = a8;
  uint64_t v55 = a12;
  uint64_t v14 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v44 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v18 - 8);
  uint64_t v49 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v44 - v19;
  uint64_t v52 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v44 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v44 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  long long v30 = (char *)&v44 - v29;
  uint64_t v58 = a1;
  uint64_t v59 = v53;
  char v60 = v54;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v61);
  if (v61 == 1)
  {
    uint64_t v54 = v14;
    uint64_t v32 = v48;
    uint64_t v31 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v20, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v20, 1, a10) != 1)
    {
      uint64_t v36 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v23, v20, a10);
      uint64_t v37 = v45;
      v47(v23);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, a10);
      uint64_t v38 = v37;
      uint64_t v35 = v55;
      static ViewBuilder.buildExpression<A>(_:)(v37);
      uint64_t v39 = v54;
      uint64_t v40 = *(void (**)(char *, uint64_t))(v54 + 8);
      v40(v38, a7);
      id v41 = v51;
      static ViewBuilder.buildExpression<A>(_:)(v51);
      v40(v41, a7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(v27, 0, 1, a7);
      uint64_t v33 = (uint64_t)v30;
      uint64_t v34 = (uint64_t)v27;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v31);
    uint64_t v14 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v27, 1, 1, a7);
  uint64_t v33 = (uint64_t)v30;
  uint64_t v34 = (uint64_t)v27;
  uint64_t v35 = v55;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v34, v33);
  unint64_t v42 = *(void (**)(char *, uint64_t))(v25 + 8);
  v42(v27, v24);
  uint64_t v57 = v35;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v42)(v30, v24);
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:));
}

uint64_t closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v44 = a6;
  uint64_t v45 = a5;
  uint64_t v48 = a4;
  LODWORD(v52) = a3;
  uint64_t v51 = a2;
  uint64_t v54 = a7;
  uint64_t v13 = *(void *)(a8 - 8);
  uint64_t v53 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v49 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  unint64_t v43 = (char *)&v42 - v16;
  uint64_t v17 = type metadata accessor for Optional();
  uint64_t v46 = *(void *)(v17 - 8);
  uint64_t v47 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v42 - v18;
  uint64_t v50 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v42 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional();
  uint64_t v24 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v42 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v42 - v28;
  uint64_t v56 = a1;
  uint64_t v57 = v51;
  char v58 = v52;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v59);
  if (v59 == 1)
  {
    uint64_t v52 = v13;
    uint64_t v31 = v46;
    uint64_t v30 = v47;
    (*(void (**)(char *, uint64_t, uint64_t))(v46 + 16))(v19, v48, v47);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v50 + 48))(v19, 1, a9) != 1)
    {
      uint64_t v35 = v50;
      (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v22, v19, a9);
      uint64_t v36 = v49;
      v45(v22);
      (*(void (**)(char *, uint64_t))(v35 + 8))(v22, a9);
      uint64_t v37 = v43;
      uint64_t v34 = v53;
      static ViewBuilder.buildExpression<A>(_:)(v36);
      uint64_t v38 = v52;
      uint64_t v39 = *(void (**)(char *, uint64_t))(v52 + 8);
      v39(v49, a8);
      static ViewBuilder.buildExpression<A>(_:)(v37);
      v39(v37, a8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v38 + 56))(v26, 0, 1, a8);
      uint64_t v32 = (uint64_t)v29;
      uint64_t v33 = (uint64_t)v26;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v19, v30);
    uint64_t v13 = v52;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v26, 1, 1, a8);
  uint64_t v32 = (uint64_t)v29;
  uint64_t v33 = (uint64_t)v26;
  uint64_t v34 = v53;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v33, v32);
  uint64_t v40 = *(void (**)(char *, uint64_t))(v24 + 8);
  v40(v26, v23);
  uint64_t v55 = v34;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(char *, uint64_t))v40)(v29, v23);
}

uint64_t partial apply for closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))closure #2 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:));
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:presenting:actions:message:)(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 72), *(void *)(v1 + 80), *(unsigned __int8 *)(v1 + 88), *(void *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64));
}

uint64_t View.alert<A, B>(isPresented:error:actions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v33 = a6;
  uint64_t v28 = a7;
  uint64_t v29 = a9;
  uint64_t v31 = a2;
  uint64_t v32 = a5;
  int v27 = a3;
  uint64_t v30 = a1;
  uint64_t v15 = type metadata accessor for Optional();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = &v26[-v18];
  (*(void (**)(unsigned char *, uint64_t, uint64_t, double))(v16 + 16))(&v26[-v18], a4, v15, v17);
  uint64_t v20 = *(void *)(a8 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v20 + 48))(v19, 1, a8) == 1)
  {
    uint64_t v21 = 0;
    unint64_t v22 = 0xE000000000000000;
    a8 = v15;
  }
  else
  {
    uint64_t v21 = LocalizedError.alertTitle.getter();
    unint64_t v22 = v23;
    uint64_t v16 = v20;
  }
  (*(void (**)(unsigned char *, uint64_t))(v16 + 8))(v19, a8);
  v34[0] = v21;
  v34[1] = v22;
  unint64_t v24 = lazy protocol witness table accessor for type String and conformance String();
  View.errorAlert<A, B, C>(_:isPresented:actions:message:)((uint64_t)v34, v30, v31, v27 & 1, v32, v33, (void (*)(uint64_t))destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation, 0, v29, v28, MEMORY[0x1E4FBB1A0], a10, MEMORY[0x1E4F417F8], a11, v24, a13, MEMORY[0x1E4F417F0]);
  return swift_bridgeObjectRelease();
}

uint64_t LocalizedError.alertTitle.getter()
{
  uint64_t result = dispatch thunk of LocalizedError.errorDescription.getter();
  if (!v1)
  {
    static os_log_type_t.fault.getter();
    uint64_t v2 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    return Error.localizedDescription.getter();
  }
  return result;
}

uint64_t View.errorAlert<A, B, C>(_:isPresented:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t (*a5)(void)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v62 = a8;
  int v63 = a7;
  uint64_t v60 = a6;
  uint64_t v61 = a5;
  char v17 = a4;
  int v49 = a4;
  uint64_t v67 = a3;
  uint64_t v56 = a1;
  uint64_t v65 = a9;
  uint64_t v66 = a14;
  uint64_t v58 = a15;
  uint64_t v51 = a17;
  uint64_t v50 = a16;
  uint64_t v53 = a13;
  uint64_t v64 = a10;
  uint64_t v48 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v59 = (char *)&v46 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = v20;
  uint64_t v57 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v21);
  unint64_t v23 = (char *)&v46 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ModifiedContent();
  MEMORY[0x1F4188790](v24);
  uint64_t v54 = (char *)&v46 - v25;
  uint64_t v26 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v29 = (char *)&v46 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v30 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  uint64_t v75 = a16;
  unint64_t v76 = v30;
  uint64_t WitnessTable = swift_getWitnessTable();
  *(void *)&long long v68 = v24;
  *((void *)&v68 + 1) = a13;
  *(void *)&long long v69 = WitnessTable;
  *((void *)&v69 + 1) = a17;
  uint64_t v31 = type metadata accessor for AlertModifier();
  uint64_t v32 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v46 - v33;
  uint64_t v46 = a2;
  *(void *)&long long v68 = a2;
  *((void *)&v68 + 1) = v67;
  LOBYTE(v69) = v17;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v74);
  int v47 = v74;
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v29, v56, v48);
  swift_retain();
  swift_retain();
  uint64_t v58 = Text.init<A>(_:)();
  uint64_t v56 = v35;
  LOBYTE(v26) = v36;
  uint64_t v38 = v37;
  uint64_t v39 = v61();
  uint64_t v40 = (uint64_t)v54;
  uint64_t v41 = v55;
  MEMORY[0x18C113660](v39, v55, &unk_1ED418F28, v50);
  uint64_t v42 = (*(uint64_t (**)(char *, uint64_t))(v57 + 8))(v23, v41);
  uint64_t v43 = (uint64_t)v59;
  v63(v42);
  uint64_t v73 = 0;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v68 = 0u;
  __n128 v44 = AlertModifier.init(presentedValue:isPresented:title:actions:message:auxiliaryContent:representsError:)(v47, v46, v67, v49, v58, v56, v26 & 1, v38, (uint64_t)v34, v40, v43, &v68, 1, v24, v53);
  MEMORY[0x18C113660](v34, v64, v31, v66, v44);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v34, v31);
}

uint64_t View.alert<A, B, C>(isPresented:error:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v59 = a2;
  uint64_t v53 = a7;
  uint64_t v54 = a8;
  uint64_t v48 = a5;
  int v49 = a6;
  int v47 = a3;
  uint64_t v58 = a9;
  uint64_t v55 = a16;
  uint64_t v56 = a17;
  uint64_t v52 = a13;
  uint64_t v50 = a12;
  uint64_t v57 = a10;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  unint64_t v23 = (char *)&v44 - v22;
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16);
  uint64_t v51 = a4;
  v24((char *)&v44 - v22, a4, v19, v21);
  uint64_t v25 = *(void *)(a11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, a11) == 1)
  {
    uint64_t v26 = 0;
    unint64_t v27 = 0xE000000000000000;
  }
  else
  {
    uint64_t v26 = LocalizedError.alertTitle.getter();
    unint64_t v27 = v28;
    uint64_t v20 = v25;
    uint64_t v19 = a11;
  }
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v23, v19);
  uint64_t v46 = &v44;
  v62[0] = v26;
  v62[1] = v27;
  MEMORY[0x1F4188790](v29);
  uint64_t v44 = a1;
  uint64_t v45 = &v44 - 16;
  uint64_t v31 = v56;
  uint64_t v30 = v57;
  *(&v44 - 14) = v57;
  *(&v44 - 13) = a11;
  uint64_t v32 = v52;
  *(&v44 - 12) = v50;
  *(&v44 - 11) = v32;
  *(&v44 - 10) = a14;
  *(&v44 - 9) = a15;
  uint64_t v33 = v55;
  uint64_t v34 = v59;
  int v35 = v47 & 1;
  MEMORY[0x1F4188790](v36);
  int v49 = &v44 - 16;
  *(&v44 - 14) = v30;
  *(&v44 - 13) = a11;
  *(&v44 - 12) = v37;
  *(&v44 - 11) = v32;
  *(&v44 - 10) = a14;
  *(&v44 - 9) = a15;
  uint64_t v38 = type metadata accessor for Optional();
  uint64_t v39 = type metadata accessor for Optional();
  unint64_t v40 = lazy protocol witness table accessor for type String and conformance String();
  uint64_t v61 = v33;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v60 = v31;
  uint64_t v42 = swift_getWitnessTable();
  View.errorAlert<A, B, C>(_:isPresented:actions:message:)((uint64_t)v62, v44, v34, v35, partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:), (uint64_t)v45, (void (*)(uint64_t))partial apply for closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:), (uint64_t)v49, v58, v30, MEMORY[0x1E4FBB1A0], v38, v39, a14, v40, WitnessTable, v42);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v44[1] = a6;
  uint64_t v45 = a5;
  uint64_t v49 = a4;
  LODWORD(v53) = a3;
  uint64_t v52 = a2;
  uint64_t v55 = a8;
  uint64_t v15 = *(void *)(a9 - 8);
  uint64_t v54 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v50 = (char *)v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v46 = (char *)v44 - v18;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v47 = *(void *)(v19 - 8);
  uint64_t v48 = v19;
  MEMORY[0x1F4188790](v19);
  double v21 = (char *)v44 - v20;
  uint64_t v51 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v44 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  unint64_t v28 = (char *)v44 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)v44 - v30;
  uint64_t v57 = a1;
  uint64_t v58 = v52;
  char v59 = v53;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v60);
  if (v60 == 1)
  {
    uint64_t v53 = v15;
    uint64_t v33 = v47;
    uint64_t v32 = v48;
    (*(void (**)(char *, uint64_t, uint64_t))(v47 + 16))(v21, v49, v48);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v51 + 48))(v21, 1, a7) != 1)
    {
      uint64_t v37 = v51;
      (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v24, v21, a7);
      uint64_t v38 = v50;
      v45(v24);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v24, a7);
      uint64_t v39 = v46;
      uint64_t v36 = v54;
      static ViewBuilder.buildExpression<A>(_:)(v38);
      uint64_t v40 = v53;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v53 + 8);
      v41(v50, a9);
      static ViewBuilder.buildExpression<A>(_:)(v39);
      v41(v39, a9);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, a9);
      uint64_t v34 = (uint64_t)v31;
      uint64_t v35 = (uint64_t)v28;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v32);
    uint64_t v15 = v53;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v28, 1, 1, a9);
  uint64_t v34 = (uint64_t)v31;
  uint64_t v35 = (uint64_t)v28;
  uint64_t v36 = v54;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v35, v34);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v26 + 8);
  v42(v28, v25);
  uint64_t v56 = v36;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v31);
  return ((uint64_t (*)(char *, uint64_t))v42)(v31, v25);
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:));
}

uint64_t closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v45[1] = a6;
  uint64_t v46 = a5;
  uint64_t v50 = a4;
  LODWORD(v54) = a3;
  uint64_t v53 = a2;
  uint64_t v56 = a8;
  uint64_t v16 = *(void *)(a10 - 8);
  uint64_t v55 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v51 = (char *)v45 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v47 = (char *)v45 - v19;
  uint64_t v20 = type metadata accessor for Optional();
  uint64_t v48 = *(void *)(v20 - 8);
  uint64_t v49 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)v45 - v21;
  uint64_t v52 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)v45 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)v45 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)v45 - v31;
  uint64_t v58 = a1;
  uint64_t v59 = v53;
  char v60 = v54;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v61);
  if (v61 == 1)
  {
    uint64_t v54 = v16;
    uint64_t v34 = v48;
    uint64_t v33 = v49;
    (*(void (**)(char *, uint64_t, uint64_t))(v48 + 16))(v22, v50, v49);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v22, 1, a7) != 1)
    {
      uint64_t v38 = v52;
      (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v25, v22, a7);
      uint64_t v39 = v51;
      v46(v25);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v25, a7);
      uint64_t v40 = v47;
      uint64_t v37 = v55;
      static ViewBuilder.buildExpression<A>(_:)(v39);
      uint64_t v41 = v54;
      uint64_t v42 = *(void (**)(char *, uint64_t))(v54 + 8);
      v42(v51, a10);
      static ViewBuilder.buildExpression<A>(_:)(v40);
      v42(v40, a10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v41 + 56))(v29, 0, 1, a10);
      uint64_t v35 = (uint64_t)v32;
      uint64_t v36 = (uint64_t)v29;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v34 + 8))(v22, v33);
    uint64_t v16 = v54;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v29, 1, 1, a10);
  uint64_t v35 = (uint64_t)v32;
  uint64_t v36 = (uint64_t)v29;
  uint64_t v37 = v55;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v36, v35);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v27 + 8);
  v43(v29, v26);
  uint64_t v57 = v37;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v32);
  return ((uint64_t (*)(char *, uint64_t))v43)(v32, v26);
}

uint64_t partial apply for closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:)()
{
  return partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))closure #2 in View.alert<A, B, C>(isPresented:error:actions:message:));
}

uint64_t partial apply for closure #1 in View.alert<A, B, C>(isPresented:error:actions:message:)(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1(*(void *)(v1 + 80), *(void *)(v1 + 88), *(unsigned __int8 *)(v1 + 96), *(void *)(v1 + 104), *(void *)(v1 + 112), *(void *)(v1 + 120), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(void *)(v1 + 72));
}

uint64_t View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t (*a11)(uint64_t), uint64_t a12, void (*a13)(uint64_t), uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v80 = a8;
  int v90 = a7;
  uint64_t v104 = a6;
  uint64_t v89 = a5;
  uint64_t v105 = a2;
  uint64_t v106 = a4;
  int v97 = a3;
  uint64_t v98 = a1;
  uint64_t v92 = a9;
  uint64_t v103 = a22;
  uint64_t v85 = a13;
  uint64_t v83 = a12;
  uint64_t v88 = a21;
  uint64_t v101 = a20;
  uint64_t v81 = a11;
  v76[1] = a10;
  uint64_t v78 = a17;
  uint64_t v82 = a14;
  uint64_t v95 = a15;
  uint64_t v94 = *(void *)(a15 - 8);
  unint64_t v86 = *(void *)(v94 + 64);
  uint64_t v100 = a19;
  uint64_t v102 = a18;
  MEMORY[0x1F4188790](a1);
  BOOL v99 = (char *)v76 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v91 = *(void *)(v23 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v84 = (char *)v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v77 = *(void *)(v26 - 8);
  uint64_t v79 = *(void *)(v77 + 64);
  MEMORY[0x1F4188790](v27);
  uint64_t v96 = (char *)v76 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)v76 - v30;
  uint64_t v32 = *(void *)(a16 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v35 = (char *)v76 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v93 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v93 - 8);
  uint64_t v37 = *(void *)(v36 + 64);
  MEMORY[0x1F4188790](v93);
  v76[0] = (char *)v76 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v38);
  uint64_t v40 = (char *)v76 - v39;
  uint64_t v109 = 0;
  v97 &= 1u;
  uint64_t v41 = Text.assertUnstyled(_:options:)();
  uint64_t v42 = v80(v41);
  MEMORY[0x18C113660](v42, a16, &unk_1ED418F28, v101);
  uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v35, a16);
  uint64_t v44 = v81(v43);
  v85(v44);
  uint64_t v45 = v94;
  uint64_t v46 = v95;
  (*(void (**)(char *, void, uint64_t))(v94 + 16))(v99, v87, v95);
  uint64_t v87 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v87((char *)v76 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0), v40, v93);
  uint64_t v47 = v77 + 32;
  uint64_t v85 = *(void (**)(uint64_t))(v77 + 32);
  uint64_t v48 = v78;
  ((void (*)(char *, char *, uint64_t))v85)(v96, v31, v78);
  unint64_t v49 = (*(unsigned __int8 *)(v45 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
  unint64_t v50 = v49 + v86;
  unint64_t v86 = (v49 + v86 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v51 = (v50 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v52 = (*(unsigned __int8 *)(v36 + 80) + v51 + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80);
  unint64_t v53 = (v37 + *(unsigned __int8 *)(v47 + 48) + v52) & ~(unint64_t)*(unsigned __int8 *)(v47 + 48);
  uint64_t v54 = (char *)swift_allocObject();
  uint64_t v55 = v46;
  *((void *)v54 + 2) = v46;
  *((void *)v54 + 3) = a16;
  uint64_t v56 = v48;
  uint64_t v58 = v101;
  uint64_t v57 = v102;
  *((void *)v54 + 4) = v48;
  *((void *)v54 + 5) = v57;
  uint64_t v59 = v99;
  *((void *)v54 + 6) = v100;
  *((void *)v54 + 7) = v58;
  uint64_t v60 = v88;
  uint64_t v61 = v103;
  *((void *)v54 + 8) = v88;
  *((void *)v54 + 9) = v61;
  (*(void (**)(char *, char *, uint64_t))(v94 + 32))(&v54[v49], v59, v55);
  uint64_t v62 = &v54[v86];
  uint64_t v63 = v104;
  *(void *)uint64_t v62 = v89;
  *((void *)v62 + 1) = v63;
  v62[16] = v90;
  uint64_t v64 = &v54[v51];
  uint64_t v65 = v105;
  *(void *)uint64_t v64 = v98;
  *((void *)v64 + 1) = v65;
  v64[16] = v97;
  uint64_t v66 = &v54[v52];
  *((void *)v64 + 3) = v106;
  uint64_t v67 = v93;
  v87(v66, (char *)v76[0], v93);
  ((void (*)(char *, char *, uint64_t))v85)(&v54[v53], v96, v56);
  unint64_t v68 = lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier();
  uint64_t v113 = v58;
  unint64_t v114 = v68;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v109 = v67;
  uint64_t v110 = v56;
  uint64_t v111 = WitnessTable;
  uint64_t v112 = v60;
  type metadata accessor for AlertModifier();
  uint64_t v70 = type metadata accessor for ModifiedContent();
  uint64_t v107 = v100;
  uint64_t v108 = &protocol witness table for AlertModifier<A, B>;
  uint64_t v71 = swift_getWitnessTable();
  uint64_t v72 = v102;
  uint64_t v73 = v70;
  unsigned __int8 v74 = v84;
  View.bindInputs<A>(transform:)((uint64_t)partial apply for closure #1 in View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:), (uint64_t)v54, v102, v73, v103, v71, v92);
  swift_retain();
  swift_retain();
  outlined copy of Text.Storage(v98, v105, v97);
  swift_bridgeObjectRetain();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v91 + 8))(v74, v72);
}

uint64_t sub_187C8B8D4()
{
  uint64_t v2 = *((void *)v0 + 2);
  uint64_t v1 = *((void *)v0 + 3);
  uint64_t v3 = *((void *)v0 + 4);
  uint64_t v12 = v3;
  uint64_t v4 = *(void *)(v2 - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 80) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (v5 + *(void *)(v4 + 64) + 31) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v7 = *(void *)(type metadata accessor for ModifiedContent() - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v3 - 8);
  unint64_t v10 = (v8 + *(void *)(v7 + 64) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  (*(void (**)(char *, uint64_t))(v4 + 8))(&v0[v5], v2);
  swift_release();
  swift_release();
  outlined consume of Text.Storage(*(void *)&v0[v6], *(void *)&v0[v6 + 8], v0[v6 + 16]);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(*(void *)(v1 - 8) + 8))(&v0[v8], v1);
  (*(void (**)(char *, uint64_t))(v9 + 8))(&v0[v10], v12);

  return swift_deallocObject();
}

uint64_t View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v72 = a16;
  uint64_t v73 = a17;
  uint64_t v74 = a18;
  uint64_t v75 = a19;
  uint64_t v76 = a20;
  uint64_t v77 = a21;
  uint64_t v78 = a22;
  uint64_t v79 = a23;
  uint64_t v80 = a24;
  uint64_t v81 = a5;
  uint64_t v82 = a6;
  char v83 = a7;
  uint64_t v84 = a8;
  uint64_t v85 = a10;
  uint64_t v86 = a11;
  uint64_t v56 = a16;
  uint64_t v57 = a17;
  uint64_t v58 = a18;
  uint64_t v59 = a19;
  uint64_t v60 = a20;
  uint64_t v61 = a21;
  uint64_t v62 = a22;
  uint64_t v63 = a23;
  uint64_t v64 = a24;
  uint64_t v65 = a5;
  uint64_t v66 = a6;
  char v67 = a7;
  uint64_t v68 = a8;
  uint64_t v69 = a12;
  uint64_t v70 = a13;
  uint64_t v40 = a16;
  uint64_t v41 = a17;
  uint64_t v42 = a18;
  uint64_t v43 = a19;
  uint64_t v44 = a20;
  uint64_t v45 = a21;
  uint64_t v46 = a22;
  uint64_t v47 = a23;
  uint64_t v48 = a24;
  uint64_t v49 = a5;
  uint64_t v50 = a6;
  char v51 = a7;
  uint64_t v52 = a8;
  uint64_t v53 = a14;
  uint64_t v54 = a15;
  uint64_t v26 = type metadata accessor for Optional();
  uint64_t v27 = type metadata accessor for Optional();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v30 = swift_getWitnessTable();
  uint64_t v31 = swift_getWitnessTable();
  return View.alert<A, B, C>(_:isPresented:actions:message:auxiliaryContent:)(a1, a2, a3 & 1, a4, a5, a6, a7, (uint64_t (*)(uint64_t))partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:), a9, (uint64_t)v71, (uint64_t (*)(uint64_t))partial apply for closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:), (uint64_t)v55, (void (*)(uint64_t))partial apply for closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:), (uint64_t)v39, a16, v26, v27, v28, a21,
           WitnessTable,
           v30,
           v31);
}

uint64_t closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v51 = a4;
  LODWORD(v55) = a3;
  uint64_t v54 = a2;
  uint64_t v57 = a8;
  uint64_t v56 = a13;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v46 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v52 = (char *)&v45 - v18;
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v19 - 8);
  uint64_t v50 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v45 - v20;
  uint64_t v53 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)&v45 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  uint64_t v28 = (char *)&v45 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v45 - v30;
  uint64_t v59 = a1;
  uint64_t v60 = v54;
  char v61 = v55;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v62);
  if (v62 == 1)
  {
    uint64_t v55 = v15;
    uint64_t v33 = v49;
    uint64_t v32 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v21, v51, v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v21, 1, a11) != 1)
    {
      uint64_t v37 = v53;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v24, v21, a11);
      uint64_t v38 = v46;
      v48(v24);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v24, a11);
      uint64_t v39 = v38;
      uint64_t v36 = v56;
      static ViewBuilder.buildExpression<A>(_:)(v38);
      uint64_t v40 = v55;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v55 + 8);
      v41(v39, a7);
      uint64_t v42 = v52;
      static ViewBuilder.buildExpression<A>(_:)(v52);
      v41(v42, a7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v28, 0, 1, a7);
      uint64_t v34 = (uint64_t)v31;
      uint64_t v35 = (uint64_t)v28;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v21, v32);
    uint64_t v15 = v55;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56))(v28, 1, 1, a7);
  uint64_t v34 = (uint64_t)v31;
  uint64_t v35 = (uint64_t)v28;
  uint64_t v36 = v56;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v35, v34);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v26 + 8);
  v43(v28, v25);
  uint64_t v58 = v36;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v31);
  return ((uint64_t (*)(char *, uint64_t))v43)(v31, v25);
}

uint64_t partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)()
{
  return partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:));
}

uint64_t closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(char *)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v47 = a6;
  uint64_t v48 = a5;
  uint64_t v51 = a4;
  LODWORD(v55) = a3;
  uint64_t v54 = a2;
  uint64_t v57 = a7;
  uint64_t v56 = a13;
  uint64_t v14 = *(void *)(a8 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v46 = (char *)&v45 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v52 = (char *)&v45 - v17;
  uint64_t v18 = type metadata accessor for Optional();
  uint64_t v49 = *(void *)(v18 - 8);
  uint64_t v50 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v45 - v19;
  uint64_t v53 = *(void *)(a10 - 8);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v45 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Optional();
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v45 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)&v45 - v29;
  uint64_t v59 = a1;
  uint64_t v60 = v54;
  char v61 = v55;
  type metadata accessor for Binding<Bool>();
  MEMORY[0x18C113DA0](&v62);
  if (v62 == 1)
  {
    uint64_t v55 = v14;
    uint64_t v32 = v49;
    uint64_t v31 = v50;
    (*(void (**)(char *, uint64_t, uint64_t))(v49 + 16))(v20, v51, v50);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v20, 1, a10) != 1)
    {
      uint64_t v36 = v53;
      (*(void (**)(char *, char *, uint64_t))(v53 + 32))(v23, v20, a10);
      uint64_t v37 = v46;
      v48(v23);
      (*(void (**)(char *, uint64_t))(v36 + 8))(v23, a10);
      uint64_t v38 = v37;
      uint64_t v39 = v37;
      uint64_t v35 = v56;
      static ViewBuilder.buildExpression<A>(_:)(v39);
      uint64_t v40 = v55;
      uint64_t v41 = *(void (**)(char *, uint64_t))(v55 + 8);
      v41(v38, a8);
      uint64_t v42 = v52;
      static ViewBuilder.buildExpression<A>(_:)(v52);
      v41(v42, a8);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v40 + 56))(v27, 0, 1, a8);
      uint64_t v33 = (uint64_t)v30;
      uint64_t v34 = (uint64_t)v27;
      goto LABEL_6;
    }
    (*(void (**)(char *, uint64_t))(v32 + 8))(v20, v31);
    uint64_t v14 = v55;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v27, 1, 1, a8);
  uint64_t v33 = (uint64_t)v30;
  uint64_t v34 = (uint64_t)v27;
  uint64_t v35 = v56;
LABEL_6:
  static ToolbarContentBuilder.buildIf<A>(_:)(v34, v33);
  uint64_t v43 = *(void (**)(char *, uint64_t))(v25 + 8);
  v43(v27, v24);
  uint64_t v58 = v35;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v43)(v30, v24);
}

uint64_t partial apply for closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)()
{
  return partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))closure #2 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:));
}

uint64_t partial apply for closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)()
{
  return partial apply for closure #1 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))closure #3 in View.alert<A, B, C, D>(_:isPresented:presenting:actions:message:auxiliaryContent:));
}

uint64_t sub_187C8C670()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8C738()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8C7F8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8C8BC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8C9C0()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8CACC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8CBFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8CD30()
{
  return swift_getWitnessTable();
}

_UNKNOWN **sub_187C8CE60()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

_UNKNOWN **sub_187C8CE6C()
{
  return &protocol witness table for ViewInputsBinding<A, B>;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ActionsModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ActionsModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a1 = KeyPath;
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = v4;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = result;
  *(unsigned char *)(a1 + 56) = 0;
  return result;
}

uint64_t sub_187C8CF3C()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StyleContextWriter<DialogActionStyleContext> and conformance StyleContextWriter<A>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>();
    type metadata accessor for StyleContextWriter<DialogActionStyleContext>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>();
    type metadata accessor for _ViewModifier_Content<ActionsModifier>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<PlatformItemListTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListTextFieldStyle and conformance PlatformItemListTextFieldStyle, (uint64_t)&type metadata for PlatformItemListTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>)
  {
    type metadata accessor for _ViewModifier_Content<ActionsModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ActionsModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier, (uint64_t)&unk_1ED418F28, MEMORY[0x1E4F408E0]);
    type metadata accessor for _ViewModifier_Content<ActionsModifier>(255, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type PlatformItemListButtonStyle and conformance PlatformItemListButtonStyle, (uint64_t)&type metadata for PlatformItemListButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<ActionsModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for StyleContextWriter<DialogActionStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<DialogActionStyleContext>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, (void (*)(void))lazy protocol witness table accessor for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<ActionsModifier>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>>, TextFieldStyleModifier<PlatformItemListTextFieldStyle>>, StyleContextWriter<DialogActionStyleContext>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<ActionsModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<ActionsModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ActionsModifier and conformance ActionsModifier, (uint64_t)&unk_1ED418F28, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<ActionsModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

uint64_t @objc InteropResponder.cut(_:)(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    id v3 = a1;
    swift_unknownObjectRetain();
    _bridgeAnyObjectToAny(_:)();

    swift_unknownObjectRelease();
  }
  else
  {
    memset(v5, 0, sizeof(v5));
  }
  return outlined destroy of CommandAction?((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for Any?);
}

uint64_t protocol witness for static PreferenceKey.defaultValue.getter in conformance ResponderCommandsKey@<X0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  *a1 = static ResponderCommandsKey.defaultValue;

  return swift_bridgeObjectRetain();
}

__n128 OnCommandModifier.body(content:)@<Q0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  unsigned __int8 v4 = *(unsigned char *)(v1 + 48);
  uint64_t v5 = *(void *)(v1 + 56);
  if (v5)
  {
    type metadata accessor for GraphHost();
    swift_retain_n();
    if (static GraphHost.isUpdating.getter())
    {
      swift_release();
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      swift_release();
      unsigned __int8 v4 = v11;
    }
    uint64_t v7 = 0;
  }
  else
  {
    char v16 = *(unsigned char *)(v1 + 48);
    static os_log_type_t.fault.getter();
    unint64_t v6 = (void *)static Log.runtimeIssuesLog.getter();
    os_log(_:dso:log:_:_:)();

    static Binding.constant(_:)();
    uint64_t v5 = *((void *)&v11 + 1);
    uint64_t v7 = v11;
    unsigned __int8 v4 = v12.n128_u8[0];
  }
  outlined init with copy of OnCommandModifier(v2, (uint64_t)&v11);
  uint64_t v8 = swift_allocObject();
  long long v9 = v14;
  *(_OWORD *)(v8 + 48) = v13;
  *(_OWORD *)(v8 + 64) = v9;
  *(unsigned char *)(v8 + 80) = v15;
  __n128 result = v12;
  *(_OWORD *)(v8 + 16) = v11;
  *(__n128 *)(v8 + 32) = result;
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 17) = 1;
  *(void *)(a1 + 24) = partial apply for closure #1 in OnCommandModifier.body(content:);
  *(void *)(a1 + 32) = v8;
  return result;
}

uint64_t closure #1 in OnCommandModifier.body(content:)(uint64_t result, uint64_t a2)
{
  uint64_t v3 = result;
  char v4 = *(unsigned char *)(a2 + 48);
  if (*(void *)(a2 + 56))
  {
    type metadata accessor for GraphHost();
    swift_retain();
    if (static GraphHost.isUpdating.getter())
    {
      dispatch thunk of AnyLocation.wasRead.setter();
      __n128 result = swift_release();
      if ((v4 & 1) == 0) {
        return result;
      }
    }
    else
    {
      dispatch thunk of AnyLocation.get()();
      __n128 result = swift_release();
      if ((v9[0] & 1) == 0) {
        return result;
      }
    }
  }
  else if (!*(unsigned char *)(a2 + 48))
  {
    return result;
  }
  uint64_t v5 = *(void *)a2;
  uint64_t v6 = *(void *)v3;
  if (*(void *)(*(void *)v3 + 16)
    && (unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(*(void *)a2), (v8 & 1) != 0))
  {
    outlined init with copy of TableColumnList(*(void *)(v6 + 56) + 40 * v7, (uint64_t)v9);
    return outlined destroy of CommandAction?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CommandAction?);
  }
  else
  {
    uint64_t v10 = 0;
    memset(v9, 0, sizeof(v9));
    outlined destroy of CommandAction?((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for CommandAction?);
    outlined init with copy of TableColumnList(a2 + 8, (uint64_t)v9);
    return specialized Dictionary.subscript.setter((uint64_t)v9, v5);
  }
}

void View.pasteDestination<A>(for:action:validator:)()
{
}

void View.cuttable<A>(for:_:action:)()
{
}

void View.cuttable<A>(for:action:)()
{
}

void View.copyable<A>(_:payload:)()
{
}

void View.copyable<A>(_:)()
{
}

void View.onCommand(_:perform:)()
{
}

void View.onPasteCommand(of:perform:)()
{
}

{
  View.onPasteCommand(of:perform:)();
}

void View.onPasteCommand<A>(of:validator:perform:)()
{
}

{
  View.onPasteCommand<A>(of:validator:perform:)();
}

void View.onCutCommand(perform:)()
{
}

uint64_t type metadata accessor for InteropResponder()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type OnCommandModifier and conformance OnCommandModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnCommandModifier and conformance OnCommandModifier;
  if (!lazy protocol witness table cache variable for type OnCommandModifier and conformance OnCommandModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnCommandModifier and conformance OnCommandModifier);
  }
  return result;
}

uint64_t sub_187C8D928()
{
  return swift_getWitnessTable();
}

uint64_t get_witness_table_7SwiftUI4ViewRz16CoreTransferable0E0Rd__r__lAA15ModifiedContentVyxAA17OnCommandModifier33_1D7D458D08B5AD38421D04B7C887FEF0LLVGAaBHPxAaBHD1__AiA0cJ0HPyHCHCTm()
{
  return swift_getWitnessTable();
}

uint64_t initializeWithCopy for OnCommandModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 32) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 8, a2 + 8);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for OnCommandModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for OnCommandModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for OnCommandModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 65)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OnCommandModifier(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 65) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for OnCommandModifier()
{
  return &unk_1ED424218;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in OnCommandModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined init with copy of OnCommandModifier(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_187C8DC48()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 24);
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in OnCommandModifier.body(content:)(uint64_t a1)
{
  return closure #1 in OnCommandModifier.body(content:)(a1, v1 + 16);
}

void type metadata accessor for CommandAction?()
{
  if (!lazy cache variable for type metadata for CommandAction?)
  {
    type metadata accessor for CommandAction();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CommandAction?);
    }
  }
}

uint64_t outlined destroy of CommandAction?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for ResponderCommandsKey()
{
  return &type metadata for ResponderCommandsKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>();
    _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ResponderCommandsKey>, (uint64_t)&type metadata for ResponderCommandsKey, (uint64_t)&protocol witness table for ResponderCommandsKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>, _PreferenceTransformModifier<ResponderCommandsKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>)
  {
    type metadata accessor for _ViewModifier_Content<OnCommandModifier>();
    _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for FocusStateBindingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A0], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusStateBindingModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<OnCommandModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<OnCommandModifier>)
  {
    lazy protocol witness table accessor for type OnCommandModifier and conformance OnCommandModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<OnCommandModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<OnCommandModifier>, FocusStateBindingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for _ViewModifier_Content<OnCommandModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<OnCommandModifier> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>)
  {
    _s7SwiftUI25FocusStateBindingModifier33_274D264A38B51DC68ACC48A91353B7D0LLVySbGMaTm_0(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ResponderCommandsKey>, (uint64_t)&type metadata for ResponderCommandsKey, (uint64_t)&protocol witness table for ResponderCommandsKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ResponderCommandsKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t specialized static ResponderCommandsKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

void View.onCopyCommand(perform:)()
{
}

uint64_t SearchSuggestionsModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ViewModifier_Content();
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v23 = lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v34 = &type metadata for EnvironmentValues.SearchSuggestions;
  uint64_t v35 = v5;
  unint64_t v36 = v23;
  uint64_t v37 = v6;
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  long long v9 = (char *)&v22 - v8;
  type metadata accessor for ViewInputFlagModifier<SearchHasSuggestions>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<SearchHasSuggestions>, (void (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v22 - v15;
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  uint64_t v29 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, (void (*)(double))partial apply for closure #1 in SearchSuggestionsModifier.body(content:), (uint64_t)v26, v4, (uint64_t)&type metadata for EnvironmentValues.SearchSuggestions, v5, WitnessTable);
  uint64_t v32 = WitnessTable;
  uint64_t v33 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v18 = swift_getWitnessTable();
  unint64_t HasSuggestions = lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions();
  View.input<A>(_:)((uint64_t)&type metadata for SearchHasSuggestions, v7, (uint64_t)&type metadata for SearchHasSuggestions, v18, HasSuggestions);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  uint64_t v30 = v18;
  uint64_t v31 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v10);
}

uint64_t closure #1 in SearchSuggestionsModifier.body(content:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchHasSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchHasSuggestions(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions);
}

uint64_t View.searchSuggestions<A>(_:)(void (*a1)(double), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SearchSuggestionsModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  a1(v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a4);
  MEMORY[0x18C113660](v15, a3, v11, v17);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for SearchSuggestionsModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.searchable<A>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v41 = a7;
  uint64_t v38 = a5;
  uint64_t v44 = a3;
  uint64_t v37 = a1;
  uint64_t v49 = a9;
  uint64_t v48 = a16;
  uint64_t v42 = a15;
  uint64_t v45 = a14;
  uint64_t v46 = a11;
  uint64_t v39 = a10;
  uint64_t v47 = a12;
  uint64_t v40 = a13;
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v21 = v20;
  MEMORY[0x1F4188790](v20);
  unint64_t v23 = (char *)&v37 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v43 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v37 - v25;
  v59[0] = *v38;
  swift_retain();
  uint64_t v27 = a2;
  swift_retain();
  uint64_t v28 = a4;
  swift_bridgeObjectRetain();
  uint64_t v29 = v41;
  uint64_t v30 = v39;
  outlined copy of Text?(a6, v41, a8, v39);
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v37, v27, v44, v28, 0, 0, 0, v59, (uint64_t)v23, a6, v29, a8, v30);
  uint64_t v31 = v40;
  uint64_t v32 = v42;
  MEMORY[0x18C113660](v23, v40, v21, v42);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v23);
  uint64_t v33 = v45;
  uint64_t v51 = v31;
  uint64_t v52 = v45;
  uint64_t v53 = v32;
  uint64_t v54 = v48;
  uint64_t v55 = v46;
  uint64_t v56 = v47;
  uint64_t v34 = lazy protocol witness table accessor for type TextField<EmptyView> and conformance TextField<A>(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (void (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>);
  uint64_t v57 = v32;
  uint64_t v58 = v34;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #1 in View.searchable<A>(text:placement:prompt:suggestions:), (uint64_t)v50, v24, v33, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v43 + 8))(v26, v24);
}

uint64_t outlined destroy of SearchModifier<TextField<EmptyView>>(uint64_t a1)
{
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t View.searchable<A>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, int a7@<W7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  int v35 = a7;
  v34[1] = a6;
  v34[0] = a5;
  uint64_t v43 = a8;
  uint64_t v36 = a14;
  uint64_t v37 = a3;
  uint64_t v39 = a13;
  uint64_t v40 = a10;
  uint64_t v41 = a11;
  uint64_t v42 = a15;
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v19 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)v34 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v34 - v23;
  v53[0] = *(unsigned char *)v34[0];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v25 = Text.init(_:tableName:bundle:comment:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(a1, a2, v37, a4, 0, 0, 0, v53, (uint64_t)v21, v25, v27, v26 & 1, v28);
  uint64_t v29 = v36;
  MEMORY[0x18C113660](v21, a12, v19, v36);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v21);
  uint64_t v30 = v39;
  uint64_t v45 = a12;
  uint64_t v46 = v39;
  uint64_t v47 = v29;
  uint64_t v48 = v42;
  uint64_t v49 = v40;
  uint64_t v50 = v41;
  uint64_t v31 = lazy protocol witness table accessor for type TextField<EmptyView> and conformance TextField<A>(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (void (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>);
  uint64_t v51 = v29;
  uint64_t v52 = v31;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #1 in View.searchable<A>(text:placement:prompt:suggestions:), (uint64_t)v44, v22, v30, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v24, v22);
}

uint64_t closure #1 in View.searchable<A>(text:placement:prompt:suggestions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  v12(v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  double v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a4);
}

uint64_t partial apply for closure #1 in View.searchable<A>(text:placement:prompt:suggestions:)()
{
  return closure #1 in View.searchable<A>(text:placement:prompt:suggestions:)(v0[6], v0[7], v0[2], v0[3]);
}

uint64_t View.searchable<A, B>(text:placement:prompt:suggestions:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned __int8 *a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v52 = a7;
  uint64_t v53 = a8;
  uint64_t v43 = a5;
  uint64_t v46 = a4;
  uint64_t v50 = a3;
  uint64_t v44 = a2;
  uint64_t v54 = a9;
  uint64_t v51 = a14;
  uint64_t v45 = a15;
  uint64_t v49 = a13;
  uint64_t v17 = *(void *)(a12 - 8);
  uint64_t v48 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)&v42 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for SearchModifier<TextField<EmptyView>>();
  uint64_t v21 = v20;
  MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v24 - 8);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)&v42 - v26;
  v66[0] = *v43;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v19, a6, a12, v25);
  uint64_t v28 = a1;
  swift_retain();
  uint64_t v29 = v44;
  swift_retain();
  uint64_t v30 = v46;
  swift_bridgeObjectRetain();
  uint64_t v31 = v45;
  uint64_t v32 = Text.init<A>(_:)();
  SearchModifier.init<>(text:isPresented:placement:prompt:)(v28, v29, v50, v30, 0, 0, 0, v66, (uint64_t)v23, v32, v34, v33 & 1, v35);
  uint64_t v36 = v21;
  uint64_t v37 = v49;
  MEMORY[0x18C113660](v23, a10, v36, v49);
  outlined destroy of SearchModifier<TextField<EmptyView>>((uint64_t)v23);
  uint64_t v38 = v48;
  uint64_t v56 = a10;
  uint64_t v57 = v48;
  uint64_t v58 = a12;
  uint64_t v59 = v37;
  uint64_t v60 = v51;
  uint64_t v61 = v31;
  uint64_t v62 = v52;
  uint64_t v63 = v53;
  uint64_t v39 = lazy protocol witness table accessor for type TextField<EmptyView> and conformance TextField<A>(&lazy protocol witness table cache variable for type SearchModifier<TextField<EmptyView>> and conformance SearchModifier<A>, (void (*)(uint64_t))type metadata accessor for SearchModifier<TextField<EmptyView>>);
  uint64_t v64 = v37;
  uint64_t v65 = v39;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.searchSuggestions<A>(_:)((void (*)(double))partial apply for closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:), (uint64_t)v55, v24, v38, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v27, v24);
}

uint64_t closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  v12(v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  double v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a4);
}

uint64_t partial apply for closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)()
{
  return closure #1 in View.searchable<A, B>(text:placement:prompt:suggestions:)(v0[8], v0[9], v0[2], v0[3]);
}

uint64_t SearchCustomAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  swift_getWitnessTable();
  uint64_t v4 = type metadata accessor for _ViewModifier_Content();
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v23 = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v34 = &type metadata for EnvironmentValues.SearchCustomAccessory;
  uint64_t v35 = v5;
  unint64_t v36 = v23;
  uint64_t v37 = v6;
  type metadata accessor for OptionalSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v24 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  double v9 = (char *)&v22 - v8;
  type metadata accessor for ViewInputFlagModifier<SearchHasSuggestions>(255, &lazy cache variable for type metadata for ViewInputFlagModifier<HasCustomAccessory>, (void (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  double v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  char v16 = (char *)&v22 - v15;
  uint64_t v27 = v5;
  uint64_t v28 = v6;
  uint64_t v29 = v2;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.optionalViewAlias<A, B>(_:_:)((uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, (void (*)(double))partial apply for closure #1 in SearchCustomAccessoryModifier.body(content:), (uint64_t)v26, v4, (uint64_t)&type metadata for EnvironmentValues.SearchCustomAccessory, v5, WitnessTable, v23, v6);
  uint64_t v32 = WitnessTable;
  char v33 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v18 = swift_getWitnessTable();
  HasCustomAccessorCGFloat y = lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory();
  View.input<A>(_:)((uint64_t)&unk_1ED427EA8, v7, (uint64_t)&unk_1ED427EA8, v18, HasCustomAccessory);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v9, v7);
  uint64_t v30 = v18;
  uint64_t v31 = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v11 + 8);
  v20(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v16);
  return ((uint64_t (*)(char *, uint64_t))v20)(v16, v10);
}

uint64_t closure #1 in SearchCustomAccessoryModifier.body(content:)@<X0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*a1 == 1)
  {
    uint64_t v5 = &a1[*(int *)(type metadata accessor for SearchCustomAccessoryModifier() + 36)];
    uint64_t v10 = *(void *)(a2 - 8);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v10 + 16))(a3, v5, a2);
    uint64_t v6 = v10;
    uint64_t v7 = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a2 - 8);
    uint64_t v7 = 1;
  }
  uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56);

  return v8(a3, v7, 1, a2);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance HasCustomAccessory(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance SearchHasSuggestions(a1, a2, a3, (void (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance HasCustomAccessory(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchHasSuggestions(a1, a2, a3, a4, (void (*)(void))lazy protocol witness table accessor for type HasCustomAccessory and conformance HasCustomAccessory);
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance SearchHasSuggestions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void))
{
  return PropertyList.subscript.setter();
}

uint64_t View.customSearchAccessory<A>(isActive:accessory:)(uint64_t a1, void (*a2)(double), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = a6;
  uint64_t v19 = a4;
  char v8 = a1;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for SearchCustomAccessoryModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  char v16 = (char *)&v18 - v15;
  a2(v14);
  *char v16 = v8;
  (*(void (**)(unsigned char *, char *, uint64_t))(v9 + 32))(&v16[*(int *)(v12 + 36)], v11, a5);
  MEMORY[0x18C113660](v16, v19, v12, v20);
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v13 + 8))(v16, v12);
}

uint64_t type metadata accessor for SearchCustomAccessoryModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187C8FCFC(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for SearchSuggestionsModifier);
}

uint64_t sub_187C8FD28()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8FE30()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C8FF38(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for SearchCustomAccessoryModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA25SearchSuggestionsModifierVyqd__GGAaBHPxAaBHD1__AgA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for SearchCustomAccessoryModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SearchCustomAccessoryModifier(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SearchCustomAccessoryModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 1) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187C90490);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 1] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for SearchSuggestionsModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SearchSuggestionsModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187C9082CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in SearchHasSuggestions()
{
  return &protocol witness table for SearchHasSuggestions;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchCustomAccessoryModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SearchSuggestionsModifier<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t partial apply for closure #1 in SearchSuggestionsModifier.body(content:)()
{
  return closure #1 in SearchSuggestionsModifier.body(content:)(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

void type metadata accessor for ViewInputFlagModifier<SearchHasSuggestions>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for ViewInputFlagModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t partial apply for closure #1 in SearchCustomAccessoryModifier.body(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in SearchCustomAccessoryModifier.body(content:)(*(unsigned char **)(v1 + 32), *(void *)(v1 + 16), a1);
}

void *type metadata accessor for HasCustomAccessory()
{
  return &unk_1ED427EA8;
}

uint64_t sub_187C90B7C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C90CCC()
{
  return swift_getWitnessTable();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in HasCustomAccessory()
{
  return &protocol witness table for HasCustomAccessory;
}

uint64_t thunk for @escaping @callee_guaranteed (@in_guaranteed AVKitPressableCaptureButton, @in_guaranteed AVKitPressableCaptureButton.Phase) -> (@out ())(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void AVKitCaptureButtonBridge.attachInteraction()()
{
  id v1 = objc_msgSend(self, sel__cameraShutterConfigurationsWithOptionsProvider_, 0);
  type metadata accessor for _UIPhysicalButtonConfiguration();
  lazy protocol witness table accessor for type _UIPhysicalButtonConfiguration and conformance NSObject();
  static Set._unconditionallyBridgeFromObjectiveC(_:)();

  id v2 = objc_allocWithZone(MEMORY[0x1E4FB2240]);
  uint64_t v3 = v0;
  Class isa = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v5 = objc_msgSend(v2, sel_initWithConfigurations_delegate_, isa, v3);

  uint64_t v6 = (void *)MEMORY[0x18C119DF0](&v3[direct field offset for AVKitCaptureButtonBridge.host]);
  if (v6)
  {
    unsigned int v7 = v6;
    objc_msgSend(v6, sel_addInteraction_, v5);

    size_t v8 = *(void **)&v3[direct field offset for AVKitCaptureButtonBridge.interaction];
    *(void *)&v3[direct field offset for AVKitCaptureButtonBridge.interaction] = v5;
  }
  else
  {
    __break(1u);
  }
}

char *AVKitCaptureButtonBridge.dispatchCameraCapture(_:)(void *a1)
{
  if ((uint64_t)objc_msgSend(a1, sel__numberOfStages) < 2) {
    goto LABEL_5;
  }
  uint64_t v3 = (char *)objc_msgSend(a1, sel__stage);
  uint64_t result = (char *)objc_msgSend(a1, sel__numberOfStages);
  if (__OFSUB__(result, 1))
  {
    __break(1u);
    return result;
  }
  if (v3 == result - 1) {
    BOOL v5 = objc_msgSend(a1, sel__stagePhase) != (id)1;
  }
  else {
LABEL_5:
  }
    BOOL v5 = 0;
  uint64_t result = (char *)objc_msgSend(a1, sel__numberOfStages);
  if (result == (char *)1)
  {
    uint64_t result = (char *)objc_msgSend(a1, sel__state);
    if (!v5)
    {
      if (result == (char *)1) {
        return result;
      }
      uint64_t v6 = &selRef__state;
      goto LABEL_12;
    }
  }
  else if (!v5)
  {
    return result;
  }
  uint64_t v6 = &selRef__stagePhase;
LABEL_12:
  uint64_t result = (char *)[a1 *v6];
  unsigned int v7 = *(void (**)(char *, char *))(v1 + direct field offset for AVKitCaptureButtonBridge.dispatch);
  if (v7)
  {
    if ((unint64_t)result >= 4) {
      char v8 = 4;
    }
    else {
      char v8 = (char)result;
    }
    char v10 = 0;
    char v9 = v8;
    swift_retain();
    v7(&v10, &v9);
    return (char *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v7);
  }
  return result;
}

void @objc AVKitCaptureButtonBridge._physicalButtonInteraction(_:handle:withActiveActions:)(void *a1, uint64_t a2, void *a3, void *a4)
{
  id v6 = a3;
  id v7 = a4;
  id v8 = a1;
  specialized AVKitCaptureButtonBridge._physicalButtonInteraction(_:handle:withActiveActions:)(v7);
}

char *specialized AVKitCaptureButtonBridge._physicalButtonInteraction(_:handle:withActiveActions:)(void *a1)
{
  uint64_t result = (char *)objc_msgSend(a1, sel__button);
  if (result == (char *)5)
  {
    return AVKitCaptureButtonBridge.dispatchCameraCapture(_:)(a1);
  }
  else
  {
    unint64_t v4 = *(void (**)(char *, char *))(v1 + direct field offset for AVKitCaptureButtonBridge.dispatch);
    if (v4)
    {
      swift_retain();
      id v5 = objc_msgSend(a1, sel__button);
      unint64_t v6 = 0x200000102uLL >> (8 * v5);
      if ((unint64_t)v5 >= 6) {
        LOBYTE(v6) = 2;
      }
      char v10 = v6;
      id v7 = objc_msgSend(a1, sel__state);
      char v8 = 4;
      if ((unint64_t)v7 < 4) {
        char v8 = (char)v7;
      }
      char v9 = v8;
      v4(&v10, &v9);
      return (char *)outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v4);
    }
  }
  return result;
}

uint64_t sub_187C91330()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI27AVKitPressableCaptureButtonVAC5PhaseOytIegnnr_AcEIegnn_TRTA_0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

unint64_t type metadata accessor for _UIPhysicalButtonConfiguration()
{
  unint64_t result = lazy cache variable for type metadata for _UIPhysicalButtonConfiguration;
  if (!lazy cache variable for type metadata for _UIPhysicalButtonConfiguration)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for _UIPhysicalButtonConfiguration);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIPhysicalButtonConfiguration and conformance NSObject()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIPhysicalButtonConfiguration and conformance NSObject;
  if (!lazy protocol witness table cache variable for type _UIPhysicalButtonConfiguration and conformance NSObject)
  {
    type metadata accessor for _UIPhysicalButtonConfiguration();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIPhysicalButtonConfiguration and conformance NSObject);
  }
  return result;
}

uint64_t View.tabPlatformIdentified()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  return MEMORY[0x18C113660](&v3, a1, &type metadata for TabPlatformIdentified, a2);
}

UIImage_optional __swiftcall PlatformItem.makeTabBarItemImage()()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v13) == 1
    || (outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v14, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?), _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v9) == 1))
  {
    uint64_t v2 = 0;
  }
  else if (v11)
  {
    swift_unknownObjectRetain();
    self;
    uint64_t v2 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    unint64_t v4 = v9;
    char v5 = v10;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    uint64_t v6 = v8;
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
    outlined copy of GraphicsImage.Contents?(v4, v5);
    swift_retain();
    uint64_t v2 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v6);
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v4, v5);
  }
  uint64_t v3 = (objc_class *)v2;
  result.value.super.Class isa = v3;
  result.is_nil = v1;
  return result;
}

uint64_t View.containerValue<A>(_:_:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v7 = *(void *)(*MEMORY[0x1E4FBBC10] + *a1 + 8);
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](a1);
  char v10 = (char *)&v18 - v9;
  uint64_t v11 = type metadata accessor for _ContainerValueWritingModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (uint64_t **)((char *)&v18 - v14);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a2, v7, v13);
  _ContainerValueWritingModifier.init(keyPath:value:)(a1, (uint64_t)v10, v15);
  MEMORY[0x18C113660](v15, a3, v11, v18);
  unsigned int v16 = *(uint64_t (**)(uint64_t **, uint64_t))(v12 + 8);
  swift_retain();
  return v16(v15, v11);
}

uint64_t partial apply for closure #1 in View.tabItem<A>(_:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.tabItem<A>(_:)(*(uint64_t (**)(double))(v1 + 48), *(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t ContainerValues.tabItemLabel_v0.getter()
{
  return ContainerValues.subscript.getter();
}

uint64_t key path getter for ContainerValues.tabItemLabel_v0 : ContainerValues@<X0>(void *a1@<X8>)
{
  uint64_t result = ContainerValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t sub_187C918E4@<X0>(void *a1@<X8>)
{
  uint64_t result = ContainerValues.subscript.getter();
  *a1 = v3;
  return result;
}

uint64_t key path setter for ContainerValues.tabItemLabel_v0 : ContainerValues()
{
  return ContainerValues.subscript.setter();
}

uint64_t sub_187C9198C()
{
  return ContainerValues.subscript.setter();
}

uint64_t ContainerValues.tabItemLabel_v0.setter()
{
  return ContainerValues.subscript.setter();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance TabPlatformIdentified@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = Namespace.wrappedValue.getter();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = 0;
  return result;
}

uint64_t TabItemLabel_v0.body.getter@<X0>(void *a1@<X8>)
{
  *a1 = *v1;
  return swift_retain();
}

uint64_t ContainerValues.tabItemLabel_v0.modify(void *a1, char a2)
{
  a1[1] = *a1;
  if ((a2 & 1) == 0) {
    return ContainerValues.subscript.setter();
  }
  swift_retain();
  ContainerValues.subscript.setter();

  return swift_release();
}

uint64_t associated type witness table accessor for View.Body : View in TabItemLabel_v0()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TabItemLabel_v0()
{
  return &type metadata for TabItemLabel_v0;
}

uint64_t ChildIndexProjection.hash(into:)()
{
  outlined init with copy of _VariadicView_Children(v0 + 16, (uint64_t)v5);
  uint64_t v6 = 0;
  if (!_VariadicView_Children.endIndex.getter()) {
    return outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E4FBBC18]);
  }
  uint64_t v1 = 0;
  while (1)
  {
    _VariadicView_Children.subscript.getter();
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if (v1 < 0 || v1 >= result) {
      break;
    }
    uint64_t v6 = v1 + 1;
    uint64_t v4[2] = v4[8];
    v4[3] = v4[9];
    v4[4] = v4[10];
    void v4[5] = v4[11];
    v4[0] = v4[6];
    v4[1] = v4[7];
    _ViewList_View.viewID.getter();
    AnyHashable.hash(into:)();
    outlined destroy of AnyHashable((uint64_t)v3);
    outlined destroy of _VariadicView_Children.Element((uint64_t)v4);
    uint64_t v1 = v6;
    if (v1 == _VariadicView_Children.endIndex.getter()) {
      return outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for IndexingIterator<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E4FBBC18]);
    }
  }
  __break(1u);
  return result;
}

uint64_t ChildIndexProjection.get(base:)()
{
  outlined init with copy of _VariadicView_Children(v0 + 16, (uint64_t)v3);
  specialized Sequence.first(where:)((uint64_t (*)(unsigned char *))partial apply for closure #1 in ChildIndexProjection.get(base:), (uint64_t)&v4);
  outlined destroy of EnumeratedSequence<_VariadicView_Children>((uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for EnumeratedSequence<_VariadicView_Children>, (uint64_t (*)(void))lazy protocol witness table accessor for type _VariadicView_Children and conformance _VariadicView_Children, MEMORY[0x1E4FBBCF8]);
  if (v5[3])
  {
    uint64_t v1 = v4;
    outlined destroy of _VariadicView_Children.Element((uint64_t)v5);
  }
  else
  {
    outlined destroy of (offset: Int, element: _VariadicView_Children.Element)?((uint64_t)&v4);
    return 0;
  }
  return v1;
}

uint64_t closure #1 in ChildIndexProjection.get(base:)(void *a1, uint64_t a2)
{
  v5[5] = *a1;
  outlined init with copy of _VariadicView_Children.Element((uint64_t)(a1 + 1), (uint64_t)v6);
  _ViewList_View.viewID.getter();
  outlined destroy of _VariadicView_Children.Element((uint64_t)v6);
  char v3 = MEMORY[0x18C1174E0](v5, a2);
  outlined destroy of AnyHashable((uint64_t)v5);
  return v3 & 1;
}

uint64_t ChildIndexProjection.set(base:newValue:)(uint64_t result, uint64_t a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = _VariadicView_Children.endIndex.getter();
    uint64_t result = _VariadicView_Children.endIndex.getter();
    if (result < 0)
    {
      __break(1u);
    }
    else
    {
      uint64_t result = _VariadicView_Children.endIndex.getter();
      if ((v5 & 0x8000000000000000) == 0 && result >= v5)
      {
        if (v5 > a2)
        {
          outlined destroy of AnyHashable(v4);
          _VariadicView_Children.subscript.getter();
          _ViewList_View.viewID.getter();
          return outlined destroy of _VariadicView_Children.Element((uint64_t)&v6);
        }
        return result;
      }
    }
    __break(1u);
  }
  return result;
}

uint64_t ChildIndexProjection.__deallocating_deinit()
{
  outlined destroy of _VariadicView_Children(v0 + 16);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ChildIndexProjection()
{
  return self;
}

uint64_t sub_187C91E74()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>()
{
  if (!lazy cache variable for type metadata for _ContainerValueWritingModifier<TabItemLabel_v0?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for TabItemLabel_v0?);
    unint64_t v0 = type metadata accessor for _ContainerValueWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContainerValueWritingModifier<TabItemLabel_v0?>);
    }
  }
}

uint64_t sub_187C92144()
{
  return MEMORY[0x1E4F41610];
}

void *type metadata accessor for TabItemLabelKey()
{
  return &unk_1ED41C068;
}

ValueMetadata *type metadata accessor for TabPlatformIdentified()
{
  return &type metadata for TabPlatformIdentified;
}

uint64_t protocol witness for Projection.get(base:) in conformance ChildIndexProjection@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = ChildIndexProjection.get(base:)();
  *(void *)a1 = result;
  *(unsigned char *)(a1 + 8) = v3 & 1;
  return result;
}

uint64_t protocol witness for Projection.set(base:newValue:) in conformance ChildIndexProjection(uint64_t a1, uint64_t a2)
{
  return ChildIndexProjection.set(base:newValue:)(a1, *(void *)a2, *(unsigned char *)(a2 + 8));
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance ChildIndexProjection()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance ChildIndexProjection()
{
  return ChildIndexProjection.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ChildIndexProjection()
{
  return Hasher._finalize()();
}

uint64_t base witness table accessor for Equatable in ChildIndexProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>(&lazy protocol witness table cache variable for type ChildIndexProjection and conformance ChildIndexProjection, a2, (void (*)(uint64_t))type metadata accessor for ChildIndexProjection);
}

uint64_t lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in ChildIndexProjection(uint64_t a1, uint64_t a2)
{
  return lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>(&lazy protocol witness table cache variable for type ChildIndexProjection and conformance ChildIndexProjection, a2, (void (*)(uint64_t))type metadata accessor for ChildIndexProjection);
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in TabPlatformIdentified()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t outlined destroy of (offset: Int, element: _VariadicView_Children.Element)?(uint64_t a1)
{
  type metadata accessor for (offset: Int, element: _VariadicView_Children.Element)?(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of EnumeratedSequence<_VariadicView_Children>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(0, a2, a3, MEMORY[0x1E4F40A38], a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t _ContainerValueWritingModifier.init(keyPath:value:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t **a3@<X8>)
{
  uint64_t v4 = *a1;
  *a3 = a1;
  uint64_t v5 = *(void *)(*MEMORY[0x1E4FBBC10] + v4 + 8);
  uint64_t v6 = (char *)a3 + *(int *)(type metadata accessor for _ContainerValueWritingModifier() + 28);
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32);

  return v7(v6, a2, v5);
}

ValueMetadata *type metadata accessor for TabPlatformIdentifierKey()
{
  return &type metadata for TabPlatformIdentifierKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>();
    lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<TabPlatformIdentifierKey> and conformance _TraitWritingModifier<A>, 255, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<TabPlatformIdentifierKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TabPlatformIdentified>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified, (uint64_t)&type metadata for TabPlatformIdentified, MEMORY[0x1E4F408E0]);
    type metadata accessor for _TraitWritingModifier<TabPlatformIdentifierKey>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<TabPlatformIdentified>, _TraitWritingModifier<TabPlatformIdentifierKey>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<TabPlatformIdentifierKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<TabPlatformIdentifierKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<TabPlatformIdentifierKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>;
  if (!lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>)
  {
    type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>(255, &lazy cache variable for type metadata for _ViewModifier_Content<TabPlatformIdentified>, (uint64_t (*)(void))lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified, (uint64_t)&type metadata for TabPlatformIdentified, MEMORY[0x1E4F408E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewModifier_Content<TabPlatformIdentified> and conformance _ViewModifier_Content<A>);
  }
  return result;
}

void UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(void *a1, unint64_t a2, void *a3)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v71 = v3;
  if (a2)
  {
    uint64_t v13 = specialized UICollectionViewListCoordinatorBase.numberOfSections(in:)();
    if (v13 < 0)
    {
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v4 = v68;
    MEMORY[0x1F4188790](v13);
    v68[-2] = v3;
    v68[-1] = a1;
    uint64_t v15 = specialized Sequence.first(where:)((uint64_t)partial apply for closure #1 in UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:), (uint64_t)&v68[-4], 0, v14);
    if ((v16 & 1) == 0)
    {
      MEMORY[0x18C10A880](0, v15);
      Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      id v18 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

      if (v18)
      {
        type metadata accessor for AnyListCollectionViewCell();
        uint64_t v19 = (void *)swift_dynamicCastClass();
        if (v19)
        {
          uint64_t v20 = v19;
          id v21 = objc_msgSend(v19, sel_contentView);
          objc_msgSend(v21, sel_frame);
          CGFloat v23 = v22;
          CGFloat v25 = v24;
          CGFloat v27 = v26;
          CGFloat v29 = v28;

          v73.origin.CGFloat x = v23;
          v73.origin.CGFloat y = v25;
          v73.size.CGFloat width = v27;
          v73.size.CGFloat height = v29;
          double MinX = CGRectGetMinX(v73);
          id v31 = objc_msgSend(v20, sel_contentView);
          objc_msgSend(v31, sel_bounds);
          double v33 = v32;
          double v35 = v34;

          uint64_t v36 = static HorizontalAlignment.listRowSeparatorLeading.getter();
          uint64_t v37 = *(uint64_t (**)(uint64_t, double, double))((*MEMORY[0x1E4FBC8C8] & *v20) + 0x68);
          uint64_t v4 = (void *)((*MEMORY[0x1E4FBC8C8] & *v20) + 104);
          *(double *)&uint64_t v38 = COERCE_DOUBLE(v37(v36, v33, v35));
          if (v39)
          {
            uint64_t v52 = static HorizontalAlignment.leadingText.getter();
            *(double *)&uint64_t v53 = COERCE_DOUBLE(v37(v52, v33, v35));
            char v55 = v54;

            double v41 = *(double *)&v53;
            if (v55) {
              double v41 = 0.0;
            }
          }
          else
          {
            double v40 = *(double *)&v38;

            double v41 = v40;
          }
          *(double *)((char *)v71 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v71) + 0x300)) = MinX + v41;
        }
        else
        {
        }
      }
    }
  }
  else
  {
    *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x300)) = 0;
  }
  uint64_t v70 = a3;
  uint64_t v42 = *MEMORY[0x1E4FB2770];
  id v69 = a1;
  id v43 = objc_msgSend(a1, sel_visibleSupplementaryViewsOfKind_, v42);
  v68[1] = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UICollectionReusableView);
  unint64_t v44 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  v68[2] = ObjectType;
  if (v44 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v45 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    a3 = v71;
    if (!v45) {
      goto LABEL_26;
    }
  }
  else
  {
    uint64_t v45 = *(void *)((v44 & 0xFFFFFFFFFFFFFF8) + 0x10);
    a3 = v71;
    if (!v45) {
      goto LABEL_26;
    }
  }
  a2 = *(void *)((*MEMORY[0x1E4FBC8C8] & *a3) + 0x300);
  if (v45 < 1)
  {
    __break(1u);
    goto LABEL_40;
  }
  for (uint64_t i = 0; i != v45; ++i)
  {
    if ((v44 & 0xC000000000000001) != 0) {
      id v47 = (id)MEMORY[0x18C117680](i, v44);
    }
    else {
      id v47 = *(id *)(v44 + 8 * i + 32);
    }
    uint64_t v48 = v47;
    type metadata accessor for TableCollectionViewCell();
    uint64_t v49 = swift_dynamicCastClass();
    if (v49
      && (*(void *)(v49 + direct field offset for TableCollectionViewCell.headerLeadingMargin) = *(void *)((char *)a3 + a2),
          (uint64_t v50 = *(void **)(v49 + direct field offset for ListCollectionViewCellBase.host)) != 0))
    {
      __int16 v72 = 2;
      type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
      _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
      id v51 = v50;
      a3 = v71;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
    else
    {
    }
  }
LABEL_26:
  swift_bridgeObjectRelease();
  uint64_t v4 = v70;
  if (v70)
  {
    uint64_t v56 = v70;
    goto LABEL_34;
  }
  unint64_t v57 = static UICollectionViewListCoordinatorBase.globalHeaderKind.getter();
  uint64_t v58 = (void *)MEMORY[0x18C115780](v57);
  swift_bridgeObjectRelease();
  id v59 = objc_msgSend(v69, sel_visibleSupplementaryViewsOfKind_, v58);

  a2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  if (a2 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain();
    uint64_t v67 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v67) {
      goto LABEL_30;
    }
LABEL_42:
    swift_bridgeObjectRelease();
    return;
  }
  if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
    goto LABEL_42;
  }
LABEL_30:
  if ((a2 & 0xC000000000000001) != 0)
  {
    id v60 = (id)MEMORY[0x18C117680](0, a2);
  }
  else
  {
    if (!*(void *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
      __break(1u);
      return;
    }
    id v60 = *(id *)(a2 + 32);
  }
  uint64_t v56 = v60;
  swift_bridgeObjectRelease();
LABEL_34:
  type metadata accessor for TableGlobalHeader();
  uint64_t v61 = swift_dynamicCastClass();
  if (v61)
  {
    uint64_t v62 = (void *)v61;
    double v63 = *(double *)((char *)a3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *a3) + 0x300));
    double v64 = *(double *)(v61 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin);
    *(double *)(v61 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin) = v63;
    uint64_t v65 = v4;
    if (v64 != v63) {
      objc_msgSend(v62, sel_setNeedsUpdateConfiguration);
    }
  }
  else
  {
    uint64_t v66 = v4;
  }
}

id closure #2 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess();
  uint64_t v4 = MEMORY[0x18C119DF0](v3);
  if (!v4) {
    return 0;
  }
  uint64_t v5 = (void *)v4;
  id v6 = UICollectionViewListCoordinatorBase.leadingSwipeActionsConfiguration(indexPath:)(a1);

  return v6;
}

uint64_t closure #3 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v7 = a2 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x18C119DF0](v7);
  if (!v8) {
    return 0;
  }
  uint64_t v9 = (void *)v8;
  v12[0] = a3;
  v12[1] = a4;
  swift_retain();
  swift_retain();
  uint64_t v10 = UICollectionViewListCoordinatorBase.trailingSwipeActionsConfiguration(indexPath:environment:)(a1, v12);
  swift_release();
  swift_release();

  return v10;
}

BOOL closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(*(void *)(a5 + 8) + 8);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  double v10 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v7 + 80))(a1, a3, v7, v10);
  swift_getAssociatedConformanceWitness();
  char v13 = dispatch thunk of Collection.isEmpty.getter();
  (*(void (**)(char *, uint64_t))(v9 + 8))(v12, AssociatedTypeWitness);
  return (v13 & 1) == 0;
}

void closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1, void *a2, char a3)
{
  uint64_t v5 = a1 + 16;
  swift_beginAccess();
  uint64_t v6 = MEMORY[0x18C119DF0](v5);
  if (v6)
  {
    uint64_t v7 = (void *)v6;
    UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(a2, a3 & 1, 0);
  }
}

id UICollectionViewListCoordinator.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  double v10 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v11 = type metadata accessor for ShadowListDataSource();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v30 - v13;
  id v31 = a1;
  uint64_t v32 = a3;
  double v33 = (void *)UICollectionViewListCoordinatorBase.collectionView(_:viewForSupplementaryElementOfKind:at:)(a1, a2, a3, a4);
  uint64_t v15 = (char *)v5 + *(void *)((*v10 & *v5) + 0x88);
  swift_beginAccess();
  char v16 = *(void (**)(char *, char *, uint64_t))(v12 + 16);
  v16(v14, v15, v11);
  LOBYTE(a3) = ShadowListDataSource.hasGlobalHeader.getter(v11);
  int v17 = *(void (**)(char *, uint64_t))(v12 + 8);
  v17(v14, v11);
  if (a3)
  {
    v16(v14, v15, v11);
    char v18 = ShadowListDataSource.hasGlobalHeader.getter(v11);
    v17(v14, v11);
    uint64_t v19 = v33;
    uint64_t v20 = v33;
    UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(v31, v18 & 1, v19);
  }
  if (static String._unconditionallyBridgeFromObjectiveC(_:)() == a2 && v21 == v32)
  {
    swift_bridgeObjectRelease();
    id v24 = v33;
  }
  else
  {
    char v23 = _stringCompareWithSmolCheck(_:_:expecting:)();
    swift_bridgeObjectRelease();
    id v24 = v33;
    if ((v23 & 1) == 0) {
      return v24;
    }
  }
  type metadata accessor for TableCollectionViewCell();
  uint64_t v25 = swift_dynamicCastClass();
  if (v25)
  {
    *(void *)(v25 + direct field offset for TableCollectionViewCell.headerLeadingMargin) = *(void *)((char *)v5 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v5) + 0x300));
    double v26 = *(void **)(v25 + direct field offset for ListCollectionViewCellBase.host);
    if (v26)
    {
      __int16 v34 = 2;
      type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>();
      _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>);
      id v27 = v24;
      id v28 = v26;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    }
  }
  return v24;
}

id @objc UICollectionViewListCoordinator.collectionView(_:viewForSupplementaryElementOfKind:at:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v11 = v10;
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v12 = a3;
  id v13 = a1;
  id v14 = UICollectionViewListCoordinator.collectionView(_:viewForSupplementaryElementOfKind:at:)(v12, v9, v11, (uint64_t)v8);

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  return v14;
}

uint64_t closure #1 in UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 204) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t result = MEMORY[0x1E4FBC860];
  }
  else
  {
    AGGraphGetValue();
    uint64_t result = swift_bridgeObjectRetain();
  }
  *a2 = result;
  return result;
}

Class @objc UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = type metadata accessor for IndexPath();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v9 = a3;
  id v10 = a1;
  Class v11 = specialized UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(v9);

  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);

  return v11;
}

id @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(void *a1, uint64_t a2, void *a3)
{
  type metadata accessor for IndexPath();
  uint64_t v5 = static Array._unconditionallyBridgeFromObjectiveC(_:)();
  id v6 = a3;
  id v7 = a1;
  id v8 = specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(v6, v5);

  swift_bridgeObjectRelease();

  return v8;
}

uint64_t closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)@<X0>(unsigned char *a1@<X8>)
{
  type metadata accessor for ShadowListDataSource();
  swift_getWitnessTable();
  type metadata accessor for _RowVisitationContext();
  uint64_t result = _RowVisitationContext.wantsClippedBackground.getter();
  *a1 = result & 1;
  return result;
}

id @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  return @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, char *))specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:));
}

id @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:dismissalPreviewForItemAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5)
{
  return @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)(a1, a2, a3, a4, a5, (uint64_t (*)(id, char *))specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:dismissalPreviewForItemAt:));
}

id @objc UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)(void *a1, uint64_t a2, void *a3, void *a4, uint64_t a5, uint64_t (*a6)(id, char *))
{
  uint64_t v10 = type metadata accessor for IndexPath();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  static IndexPath._unconditionallyBridgeFromObjectiveC(_:)();
  id v14 = a3;
  id v15 = a4;
  id v16 = a1;
  int v17 = (void *)a6(v14, v13);

  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);

  return v17;
}

uint64_t closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for TableHeaderView?(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?, (uint64_t)&type metadata for ContextMenuPreviewAction, MEMORY[0x1E4FBB718]);
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(void *)Value;
  uint64_t v3 = *(void *)(Value + 8);
  *(void *)a1 = *(void *)Value;
  *(void *)(a1 + 8) = v3;
  char v5 = *(unsigned char *)(Value + 16);
  *(unsigned char *)(a1 + 16) = v5;

  return outlined copy of ContextMenuPreviewAction?(v4, v3, v5);
}

uint64_t closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  return swift_release();
}

void @objc UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v8 = a3;
  id v9 = a4;
  swift_unknownObjectRetain();
  id v10 = a1;
  specialized UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(v8, v9, a5);

  swift_unknownObjectRelease();
}

uint64_t TableGlobalHeader.Wrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v49 = a2;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
  uint64_t v4 = *(void *)(a1 + 16);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = type metadata accessor for VStack();
  uint64_t v43 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v36 - v6;
  id v8 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for TableHeaderView?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UIKitCellState>, (uint64_t)&type metadata for UIKitCellState, MEMORY[0x1E4F411E8]);
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v45 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v37 = (char *)&v36 - v10;
  type metadata accessor for TableHeaderView?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], v8);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v46 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v38 = (char *)&v36 - v12;
  _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
  uint64_t v42 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v42 - 8);
  MEMORY[0x1F4188790](v42);
  double v40 = (char *)&v36 - v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  double v41 = (char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  unint64_t v44 = (char *)&v36 - v17;
  uint64_t v18 = *(void *)(a1 + 24);
  uint64_t v50 = v4;
  uint64_t v51 = v18;
  uint64_t v52 = v2;
  static HorizontalAlignment.center.getter();
  VStack.init(alignment:spacing:content:)();
  swift_getKeyPath();
  char v19 = *(unsigned char *)(v2 + 1);
  char v20 = *(unsigned char *)(v2 + 2);
  LOBYTE(v61) = *(unsigned char *)v2;
  BYTE1(v61) = v19;
  BYTE2(v61) = v20;
  uint64_t v21 = swift_getWitnessTable();
  double v22 = v37;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v43 + 8))(v7, v5);
  swift_getKeyPath();
  uint64_t v61 = *(void *)(v2 + 8);
  uint64_t v23 = _s7SwiftUI30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UIKitCellState> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UIKitCellState>, (uint64_t)&type metadata for UIKitCellState);
  uint64_t v59 = v21;
  uint64_t v60 = v23;
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = v38;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v45 + 8))(v22, v9);
  static Animation.easeIn(duration:)();
  LOBYTE(v61) = *(unsigned char *)v2;
  uint64_t v26 = _s7SwiftUI30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958]);
  uint64_t v57 = v24;
  uint64_t v58 = v26;
  uint64_t v27 = swift_getWitnessTable();
  id v28 = v40;
  View.animation<A>(_:value:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v46 + 8))(v25, v11);
  static Edge.Set.horizontal.getter();
  unint64_t v29 = lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
  uint64_t v55 = v27;
  unint64_t v56 = v29;
  uint64_t v30 = v42;
  uint64_t v31 = swift_getWitnessTable();
  uint64_t v32 = v41;
  View.padding(_:_:)();
  (*(void (**)(char *, uint64_t))(v47 + 8))(v28, v30);
  uint64_t v53 = v31;
  uint64_t v54 = MEMORY[0x1E4F3FA78];
  swift_getWitnessTable();
  double v33 = v44;
  static ViewBuilder.buildExpression<A>(_:)(v32);
  __int16 v34 = *(void (**)(char *, uint64_t))(v48 + 8);
  v34(v32, v14);
  static ViewBuilder.buildExpression<A>(_:)(v33);
  return ((uint64_t (*)(char *, uint64_t))v34)(v33, v14);
}

uint64_t closure #1 in TableGlobalHeader.Wrapper.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v25 = a3;
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v23 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  id v7 = (char *)&v23 - v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v24 = (char *)&v23 - v13;
  int v14 = *(unsigned __int8 *)(a1 + 2);
  type metadata accessor for TableGlobalHeader.Wrapper();
  View.padding(_:)();
  if (one-time initialization token for tableHeaderMinHeight != -1) {
    swift_once();
  }
  if (v14) {
    double v15 = 0.0;
  }
  else {
    double v15 = 1.0;
  }
  static Alignment.center.getter();
  v31[5] = a2;
  v31[6] = MEMORY[0x1E4F3FA78];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  (*(void (**)(char *, uint64_t))(v23 + 8))(v7, v5);
  v31[3] = WitnessTable;
  v31[4] = MEMORY[0x1E4F3FE50];
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v17 = v24;
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v11, v8);
  double v30 = v15;
  v31[0] = &v30;
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v17, v8);
  v31[1] = v11;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
  v29[0] = v19;
  v29[1] = v8;
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
  v29[2] = v20;
  unint64_t IsVisionEnabled = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>();
  uint64_t v27 = v16;
  unint64_t v28 = lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>();
  static ViewBuilder.buildBlock<each A>(_:)((uint64_t)v31, 3uLL, (uint64_t)v29);
  v18(v17, v8);
  return ((uint64_t (*)(char *, uint64_t))v18)(v11, v8);
}

uint64_t TableGlobalHeader.updateConfiguration(using:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v4 = type metadata accessor for UIBackgroundConfiguration();
  uint64_t v88 = *(void *)(v4 - 8);
  uint64_t v89 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v87 = (char *)&v73 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for UIBackgroundConfiguration?, MEMORY[0x1E4FB0F28], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v85 = (uint64_t (*)(uint64_t))MEMORY[0x1E4FB0F00];
  uint64_t v86 = (char *)&v73 - v8;
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for UICellConfigurationState?, MEMORY[0x1E4FB0F00], v6);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v84 = (char *)&v73 - v10;
  uint64_t v74 = type metadata accessor for UICellConfigurationState();
  uint64_t v11 = *(void *)(v74 - 8);
  MEMORY[0x1F4188790](v74);
  uint64_t v13 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int v14 = (int *)(type metadata accessor for UIHostingConfigurationStorage(0) - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>();
  uint64_t v18 = v17;
  uint64_t v75 = v17;
  MEMORY[0x1F4188790](v17);
  uint64_t v83 = (uint64_t)&v73 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  double v22 = (char *)&v73 - v21;
  MEMORY[0x1F4188790](v23);
  uint64_t v76 = (uint64_t)&v73 - v24;
  MEMORY[0x1F4188790](v25);
  uint64_t v79 = (uint64_t)&v73 - v26;
  uint64_t v77 = a1;
  Class isa = UICellConfigurationState._bridgeToObjectiveC()().super.super.isa;
  v117.receiver = v2;
  v117.super_class = ObjectType;
  objc_msgSendSuper2(&v117, sel__bridgedUpdateConfigurationUsingState_, isa);

  unint64_t v28 = &v22[*(int *)(v18 + 56)];
  *uint64_t v16 = 1;
  OptionalEdgeInsets.init()();
  *((void *)v16 + 9) = 0;
  v16[80] = 1;
  *((void *)v16 + 11) = 0;
  v16[96] = 1;
  *(_WORD *)(v16 + 97) = 1;
  unint64_t v29 = &v16[v14[11]];
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  uint64_t ObjectType = (objc_class *)(v11 + 56);
  uint64_t v30 = v74;
  v81(v29, 1, 1, v74);
  uint64_t v80 = v14;
  v16[v14[12]] = 0;
  *(void *)&v16[v14[13] + 8] = 0;
  swift_unknownObjectWeakInit();
  _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_1((uint64_t)v16, (uint64_t)v28, type metadata accessor for UIHostingConfigurationStorage);
  *(void *)double v22 = static HorizontalAlignment.center.getter();
  *((void *)v22 + 1) = 0;
  unsigned char v22[16] = 1;
  uint64_t v31 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v78 = v11 + 16;
  v31(v13, a1, v30);
  uint64_t v32 = (void (*)(uint64_t *, uint64_t, uint64_t))v31;
  char v33 = UICellConfigurationState.isEditing.getter();
  char v34 = UICellConfigurationState.isSelected.getter();
  char v35 = UICellConfigurationState.isPinned.getter();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v30);
  double v36 = *(double *)(v90 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_headerLeadingMargin) + -24.0;
  if (v36 <= 0.0) {
    double v36 = 0.0;
  }
  LOBYTE(v107) = v33 & 1;
  BYTE1(v107) = v34 & 1;
  BYTE2(v107) = v35 & 1;
  *((double *)&v107 + 1) = v36;
  uint64_t v37 = v90 + OBJC_IVAR____TtC7SwiftUI17TableGlobalHeader_globalHeader;
  swift_beginAccess();
  _s7SwiftUI15TableHeaderViewVSgWOcTm_0(v37, (uint64_t)&v108, (uint64_t)&lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for TableHeaderView?);
  *(_DWORD *)((char *)v116 + 15) = *(_DWORD *)&v111[15];
  long long v38 = v110;
  long long v115 = v110;
  v116[0] = *(_OWORD *)v111;
  long long v40 = v107;
  long long v39 = v108;
  long long v113 = v108;
  long long v114 = v109;
  long long v112 = v107;
  *(_OWORD *)(v22 + 56) = v109;
  *(_OWORD *)(v22 + 72) = v38;
  *(_OWORD *)(v22 + 88) = v116[0];
  *(_DWORD *)(v22 + 103) = *(_DWORD *)((char *)v116 + 15);
  *(_OWORD *)(v22 + 24) = v40;
  *(_OWORD *)(v22 + 40) = v39;
  *unint64_t v28 = 0;
  static Edge.Set.all.getter();
  uint64_t v41 = v76;
  outlined init with copy of MenuVisitor.MenuStackGroup((uint64_t)v22, v76, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  uint64_t v42 = v75;
  uint64_t v43 = v41 + *(int *)(v75 + 56);
  char v44 = *(unsigned char *)(v43 + 16);
  uint64_t v45 = *(void *)(v43 + 24);
  char v46 = *(unsigned char *)(v43 + 32);
  uint64_t v47 = *(void *)(v43 + 40);
  char v48 = *(unsigned char *)(v43 + 48);
  uint64_t v49 = *(void *)(v43 + 56);
  char v50 = *(unsigned char *)(v43 + 64);
  *(void *)&long long v107 = *(void *)(v43 + 8);
  BYTE8(v107) = v44;
  *(void *)&long long v108 = v45;
  BYTE8(v108) = v46;
  *(void *)&long long v109 = v47;
  BYTE8(v109) = v48;
  *(void *)&long long v110 = v49;
  BYTE8(v110) = v50;
  OptionalEdgeInsets.init(_:edges:)();
  uint64_t v91 = v99;
  char v92 = v100;
  uint64_t v93 = v101;
  char v94 = v102;
  uint64_t v95 = v103;
  char v96 = v104;
  uint64_t v97 = v105;
  char v98 = v106;
  OptionalEdgeInsets.adding(_:)();
  char v51 = BYTE8(v112);
  uint64_t v52 = v113;
  char v53 = BYTE8(v113);
  uint64_t v54 = v114;
  char v55 = BYTE8(v114);
  uint64_t v56 = v115;
  char v57 = BYTE8(v115);
  *(void *)(v43 + 8) = v112;
  *(unsigned char *)(v43 + 16) = v51;
  *(void *)(v43 + 24) = v52;
  *(unsigned char *)(v43 + 32) = v53;
  *(void *)(v43 + 40) = v54;
  *(unsigned char *)(v43 + 48) = v55;
  *(void *)(v43 + 56) = v56;
  *(unsigned char *)(v43 + 64) = v57;
  outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>((uint64_t)v22);
  uint64_t v58 = v79;
  outlined init with copy of MenuVisitor.MenuStackGroup(v41, v79, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  *(unsigned char *)(v58 + *(int *)(v42 + 56) + 97) = 0;
  outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>(v41);
  uint64_t v59 = v30;
  *((void *)&v108 + 1) = v30;
  *(void *)&long long v109 = MEMORY[0x1E4FB0EF8];
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v107);
  uint64_t v61 = v77;
  v32(boxed_opaque_existential_1, v77, v30);
  *((void *)&v113 + 1) = v42;
  *(void *)&long long v114 = _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView> and conformance UIHostingConfiguration<A, B>, (void (*)(uint64_t))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  uint64_t v62 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v112);
  uint64_t v63 = v83;
  outlined init with copy of MenuVisitor.MenuStackGroup(v58, v83, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  outlined init with copy of TableColumnList((uint64_t)&v107, (uint64_t)&v99);
  type metadata accessor for UIConfigurationState();
  uint64_t v64 = (uint64_t)v84;
  int v65 = swift_dynamicCast();
  v81((char *)v64, v65 ^ 1u, 1, v59);
  outlined assign with take of UICellConfigurationState?(v64, v63 + *(int *)(v42 + 56) + (uint64_t)v80[11], &lazy cache variable for type metadata for UICellConfigurationState?, v85);
  _s7SwiftUI29UIHostingConfigurationStorage33_57D99A1BF35446A09F91A1066009F644LLVWObTm_1(v63, (uint64_t)v62, (uint64_t (*)(void))type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
  outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>(v58);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v107);
  MEMORY[0x18C116970](&v112);
  uint64_t v66 = v87;
  static UIBackgroundConfiguration.listHeader()();
  *((void *)&v113 + 1) = v59;
  *(void *)&long long v114 = MEMORY[0x1E4FB0EF8];
  uint64_t v67 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v112);
  v32(v67, v61, v59);
  uint64_t v68 = v86;
  UIBackgroundConfiguration.updated(for:)();
  uint64_t v69 = v88;
  uint64_t v70 = v66;
  uint64_t v71 = v89;
  (*(void (**)(char *, uint64_t))(v88 + 8))(v70, v89);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v112);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v69 + 56))(v68, 0, 1, v71);
  return MEMORY[0x18C116990](v68);
}

BOOL partial apply for closure #1 in UICollectionViewListCoordinator.updateLeadingHeaderMargin(collectionView:hasGlobalHeader:existingView:)(uint64_t *a1)
{
  return specialized UICollectionViewListCoordinatorBase.collectionView(_:numberOfItemsInSection:)(*a1) > 0;
}

void type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>()
{
  if (!lazy cache variable for type metadata for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>)
  {
    type metadata accessor for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>();
    _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type VStack<TableGlobalHeader.Wrapper<TableHeaderView?>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>);
    unint64_t v0 = type metadata accessor for UIHostingConfiguration();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>);
    }
  }
}

void type metadata accessor for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>()
{
  if (!lazy cache variable for type metadata for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>)
  {
    type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>();
    _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type TableGlobalHeader.Wrapper<TableHeaderView?> and conformance TableGlobalHeader.Wrapper<A>, (void (*)(uint64_t))type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>);
    }
  }
}

void type metadata accessor for TableGlobalHeader.Wrapper<TableHeaderView?>()
{
  if (!lazy cache variable for type metadata for TableGlobalHeader.Wrapper<TableHeaderView?>)
  {
    type metadata accessor for TableHeaderView?(255, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type TableHeaderView? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for TableGlobalHeader.Wrapper();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TableGlobalHeader.Wrapper<TableHeaderView?>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TableHeaderView? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type TableHeaderView? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type TableHeaderView? and conformance <A> A?)
  {
    type metadata accessor for TableHeaderView?(255, &lazy cache variable for type metadata for TableHeaderView?, (uint64_t)&type metadata for TableHeaderView, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type TableHeaderView and conformance TableHeaderView();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderView? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableHeaderView and conformance TableHeaderView()
{
  unint64_t result = lazy protocol witness table cache variable for type TableHeaderView and conformance TableHeaderView;
  if (!lazy protocol witness table cache variable for type TableHeaderView and conformance TableHeaderView)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableHeaderView and conformance TableHeaderView);
  }
  return result;
}

uint64_t type metadata accessor for TableGlobalHeader.Wrapper()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of MenuVisitor.MenuStackGroup(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t outlined destroy of UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>(uint64_t a1)
{
  type metadata accessor for UIHostingConfiguration<VStack<TableGlobalHeader.Wrapper<TableHeaderView?>>, EmptyView>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t type metadata accessor for UIConfigurationState()
{
  unint64_t result = lazy cache variable for type metadata for UIConfigurationState;
  if (!lazy cache variable for type metadata for UIConfigurationState)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UIConfigurationState);
  }
  return result;
}

BOOL partial apply for closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(uint64_t a1)
{
  return closure #2 in implicit closure #1 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(a1, v1[6], v1[2], v1[3], v1[4]);
}

uint64_t sub_187C955A8()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187C955E0()
{
  swift_release();

  return swift_deallocObject();
}

void partial apply for closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)()
{
  closure #3 in UICollectionViewListCoordinator.update(_:to:transaction:performDiff:)(*(void *)(v0 + 48), *(void **)(v0 + 56), *(unsigned char *)(v0 + 64));
}

uint64_t sub_187C95634()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187C9567C()
{
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #2 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1)
{
  return closure #2 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(a1, *(void *)(v1 + 48));
}

uint64_t sub_187C956C4()
{
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(uint64_t a1)
{
  return closure #3 in UICollectionViewListCoordinator.listConfiguration(offset:metrics:environment:)(a1, *(void *)(v1 + 48), *(void **)(v1 + 56), *(void **)(v1 + 64));
}

Class specialized UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(void *a1)
{
  if (!static AppGraph.shared) {
    return 0;
  }
  swift_retain();
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v3 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (!v3) {
    goto LABEL_10;
  }
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v4 = (void *)swift_dynamicCastClass();
  if (!v4)
  {
    swift_release();

    return 0;
  }
  uint64_t v5 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v4) + 0x98))();
  uint64_t v7 = v6;

  if (v5 == 1
    || (outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v7),
        !v5))
  {
LABEL_10:
    swift_release();
    return 0;
  }
  swift_retain();
  uint64_t v8 = static Update.ensure<A>(_:)();
  uint64_t v9 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v5 + 80))(v8);
  SceneList.windowGroup(presenting:)(v9, __dst[0], __src);
  swift_bridgeObjectRelease();
  if (!*(void *)&__src[264])
  {
    swift_release();
    swift_release_n();
    outlined destroy of SceneList.Item?((uint64_t)__src, (uint64_t)&lazy cache variable for type metadata for SceneList.Item?, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for TableHeaderView?);
    return 0;
  }
  memcpy(__dst, __src, 0x118uLL);
  uint64_t v10 = __dst[17];
  uint64_t v11 = __dst[18];
  uint64_t v12 = LOBYTE(__dst[19]);
  uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 192);
  outlined copy of SceneID(__dst[17], __dst[18], __dst[19]);
  v14.super.Class isa = (Class)v13(v10, v11, v12);
  outlined consume of SceneID(v10, v11, v12);
  if (!v14.super.isa)
  {
    outlined destroy of SceneList.Item((uint64_t)__dst);
    swift_release();
    swift_release_n();
    return 0;
  }
  id v15 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1F70]), sel_init);
  *(void *)&__src[24] = type metadata accessor for UIWindowSceneProminentPlacement();
  *(void *)&__src[32] = _s7SwiftUI14_UIHostingViewCyAA15ModifiedContentVyAA08TableRowD0VAA010CollectionD12CellModifierVGGACyxGAA0D12RendererHostAAWlTm_0(&lazy protocol witness table cache variable for type UIWindowSceneProminentPlacement and conformance UIWindowSceneProminentPlacement, MEMORY[0x1E4FB1050]);
  __swift_allocate_boxed_opaque_existential_1((uint64_t *)__src);
  static UIWindowScenePlacement<>.prominent()();
  UIWindowSceneActivationRequestOptions.placement.setter();
  id v16 = v15;
  id v17 = objc_msgSend(a1, sel_window);
  if (v17)
  {
    uint64_t v18 = v17;
    id v19 = objc_msgSend(v17, sel_windowScene);
  }
  else
  {
    id v19 = 0;
  }
  objc_msgSend(v16, sel_setRequestingScene_, v19);

  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIWindowSceneActivationConfiguration);
  id v22 = v16;
  v25.value.super.super.Class isa = (Class)v16;
  v25.is_nil = 0;
  Class v20 = UIWindowSceneActivationConfiguration.init(userActivity:options:preview:)(v14, v25, v26).super.isa;

  swift_release_n();
  swift_release();
  outlined destroy of SceneList.Item((uint64_t)__dst);
  return v20;
}

id specialized UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)(void *a1, uint64_t a2)
{
  long long v38 = a1;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = (void *)(*MEMORY[0x1E4FBC8C8] & *v2);
  uint64_t v6 = v5[92];
  uint64_t v7 = v5[94];
  uint64_t v8 = type metadata accessor for ShadowListDataSource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v38 - v10;
  int v39 = static SemanticFeature.isEnabled.getter();
  uint64_t v12 = (char *)v2 + *(void *)((*v4 & *v2) + 0x88);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v9 + 16))(v11, v12, v8);
  uint64_t v41 = v6;
  uint64_t v42 = v5[93];
  uint64_t v43 = v7;
  uint64_t v44 = v5[95];
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a2, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:), (uint64_t)v40, v8, MEMORY[0x1E4FBB390], WitnessTable, (uint64_t)v45);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (LOBYTE(v45[0]) == 2)
  {
    if (v39)
    {
      char v14 = 0;
      goto LABEL_6;
    }
    return 0;
  }
  if (((v39 | LOBYTE(v45[0])) & 1) == 0) {
    return 0;
  }
  char v14 = LOBYTE(v45[0]) | v39 ^ 1;
LABEL_6:
  id v15 = v38;
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v17 = objc_msgSend(v15, sel_cellForItemAtIndexPath_, isa);

  if (!v17) {
    return 0;
  }
  type metadata accessor for AnyListCollectionViewCell();
  uint64_t v18 = (void *)swift_dynamicCastClass();
  if (v18)
  {
    id v19 = v18;
    id v20 = objc_msgSend(v18, sel_window);

    if (v20)
    {
      uint64_t v21 = MEMORY[0x18C113CA0]();
      long long v48 = 0u;
      long long v49 = 0u;
      unsigned __int8 v50 = 6;
      if ((*(uint64_t (**)(uint64_t))((*MEMORY[0x1E4FBC8C8] & *v19) + 0x90))(v21))
      {
        type metadata accessor for ViewResponder();
        if (swift_dynamicCastClass())
        {
          v51[0] = 4;
          hostingViewCoordinateSpace.getter();
          char v47 = 1;
          dispatch thunk of ViewResponder.addContentPath(to:kind:in:observer:)();
          swift_release();
          outlined destroy of CoordinateSpace((uint64_t)v45);
        }
        else
        {
          swift_release();
        }
      }
      v45[0] = v48;
      v45[1] = v49;
      unsigned __int8 v22 = v50;
      unsigned __int8 v46 = v50;
      uint64_t v24 = *((void *)&v48 + 1);
      uint64_t v23 = v48;
      uint64_t v26 = *((void *)&v49 + 1);
      uint64_t v25 = v49;
      outlined copy of Path.Storage(v48, *((uint64_t *)&v48 + 1), v49, *((uint64_t *)&v49 + 1), v50);
      char v27 = Path.isEmpty.getter();
      outlined release of Path((uint64_t)v45);
      if (v14 & 1 | ((v27 & 1) == 0))
      {
        id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1B28]), sel_init);
        id v29 = objc_msgSend(v19, sel_traitCollection);
        id v30 = objc_msgSend(v29, sel_userInterfaceIdiom);

        if (v30 != (id)6)
        {
          id v31 = objc_msgSend(self, sel_clearColor);
          objc_msgSend(v28, sel_setBackgroundColor_, v31);
        }
        outlined copy of Path.Storage(v23, v24, v25, v26, v22);
        char v32 = Path.isEmpty.getter();
        outlined release of Path((uint64_t)v45);
        if ((v32 & 1) == 0)
        {
          id v33 = objc_msgSend(v19, sel_contentView);
          objc_msgSend(v33, sel_frame);

          outlined copy of Path.Storage(v23, v24, v25, v26, v22);
          Path.offsetBy(dx:dy:)();
          outlined release of Path((uint64_t)v45);
          outlined release of Path((uint64_t)v45);
          uint64_t v23 = v51[0];
          uint64_t v24 = v51[1];
          uint64_t v25 = v51[2];
          uint64_t v26 = v51[3];
          unsigned __int8 v22 = v52;
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBezierPath);
          outlined copy of Path.Storage(v23, v24, v25, v26, v22);
          id v34 = UIBezierPath.init(_:)((uint64_t)v51);
          objc_msgSend(v28, sel_setVisiblePath_, v34);
        }
        id v35 = objc_allocWithZone(MEMORY[0x1E4FB1D48]);
        id v36 = v17;
        id v20 = objc_msgSend(v35, sel_initWithView_parameters_, v19, v28);

        outlined consume of Path.Storage(v23, v24, v25, v26, v22);
      }
      else
      {
        outlined release of Path((uint64_t)v45);
        id v20 = 0;
      }
      static Update.end()();
    }
  }
  else
  {
    id v20 = 0;
  }

  return v20;
}

uint64_t specialized UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(void *a1, void *a2, void *a3)
{
  _s5UIKit25UIBackgroundConfigurationVSgMaTm_0(0, &lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v32 - v7;
  uint64_t v9 = type metadata accessor for IndexPath();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v14 = objc_msgSend(a2, sel_identifier, v11);
  type metadata accessor for ContextMenuIdentity();
  uint64_t v15 = swift_dynamicCastClass();
  if (!v15)
  {
    swift_unknownObjectRelease();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1, 1, v9);
    return outlined destroy of SceneList.Item?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s5UIKit25UIBackgroundConfigurationVSgMaTm_0);
  }
  uint64_t v16 = v15 + OBJC_IVAR____TtC7SwiftUI19ContextMenuIdentity_sourceIndexPath;
  swift_beginAccess();
  _s7SwiftUI15TableHeaderViewVSgWOcTm_0(v16, (uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s5UIKit25UIBackgroundConfigurationVSgMaTm_0);
  swift_unknownObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1) {
    return outlined destroy of SceneList.Item?((uint64_t)v8, (uint64_t)&lazy cache variable for type metadata for IndexPath?, MEMORY[0x1E4F27DE8], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s5UIKit25UIBackgroundConfigurationVSgMaTm_0);
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v13, v8, v9);
  Class isa = IndexPath._bridgeToObjectiveC()().super.isa;
  id v18 = objc_msgSend(a1, sel_cellForItemAtIndexPath_, isa);

  if (v18)
  {
    type metadata accessor for AnyListCollectionViewCell();
    id v19 = (void *)swift_dynamicCastClass();
    if (v19)
    {
      uint64_t v20 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v19) + 0x78))();

      if (v20)
      {
        if ((*(unsigned char *)(v20 + 316) & 1) == 0)
        {
          int Attribute = AGWeakAttributeGetAttribute();
          if (Attribute != *MEMORY[0x1E4F4E7A0])
          {
            int v23 = Attribute;
            uint64_t v24 = AGGraphClearUpdate();
            MEMORY[0x1F4188790](v24);
            *((_DWORD *)&v32 - 4) = v23;
            type metadata accessor for TableHeaderView?(0, &lazy cache variable for type metadata for ContextMenuPreviewAction?, (uint64_t)&type metadata for ContextMenuPreviewAction, MEMORY[0x1E4FBB718]);
            static Update.dispatchImmediately<A>(_:)();
            AGGraphSetUpdate();
            char v25 = (char)v35;
            if (v35 > 0xFDu)
            {
              (*(void (**)(char *, uint64_t))(v10 + 8))(v13, v9);
              return swift_release();
            }
            uint64_t v26 = aBlock;
            uint64_t v27 = v34;
            if ((v35 & 0x80) == 0)
            {
              outlined copy of ContextMenuPreviewAction(aBlock, v34, (char)v35);
              objc_msgSend(a3, sel_setPreferredCommitStyle_, 0);
              uint64_t v28 = swift_allocObject();
              *(void *)(v28 + 16) = v26;
              *(void *)(v28 + 24) = v27;
              uint64_t v37 = partial apply for closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
              uint64_t v38 = v28;
              uint64_t aBlock = MEMORY[0x1E4F143A8];
              uint64_t v34 = 1107296256;
              id v35 = thunk for @escaping @callee_guaranteed () -> ();
              id v36 = &block_descriptor_34_0;
              id v29 = _Block_copy(&aBlock);
              outlined copy of ContextMenuPreviewAction(v26, v27, v25);
              swift_release();
              objc_msgSend(a3, sel_addAnimations_, v29);
              _Block_release(v29);
              outlined consume of ContextMenuPreviewAction?(v26, v27, v25);
              swift_release();
              outlined consume of ContextMenuPreviewAction?(v26, v27, v25);
              return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
            }
            swift_retain();
            swift_retain();
            objc_msgSend(a3, sel_setPreferredCommitStyle_, 1);
            uint64_t v30 = swift_allocObject();
            *(void *)(v30 + 16) = v26;
            *(void *)(v30 + 24) = v27;
            *(unsigned char *)(v30 + 32) = v25 & 1;
            uint64_t v37 = partial apply for closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:);
            uint64_t v38 = v30;
            uint64_t aBlock = MEMORY[0x1E4F143A8];
            uint64_t v34 = 1107296256;
            id v35 = thunk for @escaping @callee_guaranteed () -> ();
            id v36 = &block_descriptor_28_1;
            id v31 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_release();
            objc_msgSend(a3, sel_addAnimations_, v31);
            _Block_release(v31);
            outlined consume of ContextMenuPreviewAction?(v26, v27, v25);
            swift_release();
            swift_release();
          }
        }
        swift_release();
      }
    }
    else
    {
    }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t partial apply for closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in closure #1 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)(a1);
}

uint64_t sub_187C9675C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  return closure #3 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)();
}

uint64_t outlined consume of ContextMenuPreviewAction?(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 <= 0xFDu) {
    return outlined consume of ContextMenuPreviewAction(a1, a2, a3);
  }
  return a1;
}

uint64_t sub_187C967BC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  return static Update.ensure<A>(_:)();
}

uint64_t partial apply for closure #1 in closure #2 in UICollectionViewListCoordinator.collectionView(_:willPerformPreviewActionForMenuWith:animator:)()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)@<X0>(unsigned char *a1@<X8>)
{
  return closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfiguration:highlightPreviewForItemAt:)(a1);
}

uint64_t sub_187C96888()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(uint64_t a1)
{
  return closure #1 in UICollectionViewListCoordinator.collectionView(_:contextMenuConfigurationForItemsAt:point:)(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(_DWORD *)(v1 + 32));
}

uint64_t partial apply for closure #1 in UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in UICollectionViewListCoordinator.collectionView(_:sceneActivationConfigurationForItemAt:point:)(v1, a1);
}

uint64_t type metadata completion function for TableGlobalHeader.Wrapper()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  id v3 = (void *)a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 16) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    void *v3 = *a2;
    id v3 = (void *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(unsigned char *)(a1 + 2) = *((unsigned char *)a2 + 2);
    uint64_t v9 = (void *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v10 = (void *)(((unint64_t)a2 + 10) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v9 = *v10;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)v9 + v5 + 8) & ~v5, ((unint64_t)v10 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t destroy for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((((a1 + 10) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t initializeWithCopy for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = (void *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 16))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unsigned char *assignWithCopy for TableGlobalHeader.Wrapper(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = (void *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 24))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t initializeWithTake for TableGlobalHeader.Wrapper(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = (void *)((a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

unsigned char *assignWithTake for TableGlobalHeader.Wrapper(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v4 = (void *)((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v5 = (void *)((unint64_t)(a2 + 10) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v4 = *v5;
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 40))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for TableGlobalHeader.Wrapper(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 16) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8)
      }
                                                                      + v6
                                                                      + 8) & ~v6);
      unsigned int v15 = *a1;
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for TableGlobalHeader.Wrapper(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187C9715CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (((unint64_t)(a1 + 10) & 0xFFFFFFFFFFFFFFF8) + v9 + 8) & ~v9;
          id v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0xFE)
        {
          *(_WORD *)a1 = a2 - 255;
          a1[2] = (a2 - 255) >> 16;
        }
        else
        {
          *a1 = a2 + 1;
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in TableGlobalHeader.Wrapper<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>)
  {
    _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<IsVisionEnabledPredicate>, MEMORY[0x1E4F40D90], MEMORY[0x1E4F40D88], MEMORY[0x1E4F40F30]);
    _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E4F40808], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>)
  {
    _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<IsVisionEnabledPredicate>, MEMORY[0x1E4F40D90], MEMORY[0x1E4F40D88], MEMORY[0x1E4F40F30]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>)
  {
    _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<IsVisionEnabledPredicate>, MEMORY[0x1E4F40D90], MEMORY[0x1E4F40D88], MEMORY[0x1E4F40F30]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<IsVisionEnabledPredicate> and conformance InvertedViewInputPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>);
    }
  }
}

uint64_t partial apply for closure #1 in TableGlobalHeader.Wrapper.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in TableGlobalHeader.Wrapper.body.getter(*(void *)(v1 + 32), *(void *)(v1 + 24), a1);
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TableHeaderView?(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>;
  if (!lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>)
  {
    _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
    lazy protocol witness table accessor for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>)
  {
    _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for ModifiedContent<Divider, OpacityRendererEffect>, (uint64_t)&type metadata for Divider, MEMORY[0x1E4F40808], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, OpacityRendererEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t sub_187C97664()
{
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, ModifiedContent<Divider, OpacityRendererEffect>, EmptyView>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<InvertedViewInputPredicate<IsVisionEnabledPredicate>, Divider, EmptyView>();
  swift_getTupleTypeMetadata3();
  type metadata accessor for TupleView();
  swift_getWitnessTable();
  type metadata accessor for VStack();
  unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for TableHeaderView?(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UIKitCellState>, (uint64_t)&type metadata for UIKitCellState, MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  uint64_t v1 = MEMORY[0x1E4FBC958];
  type metadata accessor for TableHeaderView?(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], v0);
  type metadata accessor for ModifiedContent();
  _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  swift_getWitnessTable();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGACyxGAA04ViewF0AAWlTm_0(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<UIKitCellState> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<UIKitCellState>, (uint64_t)&type metadata for UIKitCellState);
  swift_getWitnessTable();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVy12CoreGraphics7CGFloatVGACyxGAA04ViewF0AAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, v1);
  swift_getWitnessTable();
  lazy protocol witness table accessor for type _AnimationModifier<Bool> and conformance _AnimationModifier<A>();
  swift_getWitnessTable();
  return swift_getWitnessTable();
}

uint64_t closure #1 in Sections.sectionIDs.getter()
{
  _ViewList_ID.init()();
  _ViewList_ID.elementID(at:)();
  swift_bridgeObjectRelease();
  _ViewList_ID.canonicalID.getter();

  return swift_bridgeObjectRelease();
}

uint64_t closure #2 in Sections.sectionIDs.getter()
{
  dispatch thunk of _ViewList_ID_Views.subscript.getter();
  _ViewList_ID.canonicalID.getter();

  return swift_bridgeObjectRelease();
}

unint64_t lazy protocol witness table accessor for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator;
  if (!lazy protocol witness table cache variable for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionedIdentifierAccumulator and conformance SectionedIdentifierAccumulator);
  }
  return result;
}

void type metadata accessor for _ViewList_ID._Views<[_ViewList_ID]>()
{
  if (!lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>)
  {
    type metadata accessor for [_ViewList_ID]();
    lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]();
    lazy protocol witness table accessor for type [_ViewList_ID] and conformance [A]();
    unint64_t v0 = type metadata accessor for _ViewList_ID._Views();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewList_ID._Views<[_ViewList_ID]>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type [_ViewList_ID] and conformance <A> [A]()
{
  unint64_t result = lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A];
  if (!lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A])
  {
    type metadata accessor for [_ViewList_ID]();
    lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [_ViewList_ID] and conformance <A> [A]);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewList_ID and conformance _ViewList_ID()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID;
  if (!lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewList_ID and conformance _ViewList_ID);
  }
  return result;
}

Swift::Bool __swiftcall Sections.hasHeader(at:)(Swift::Int at)
{
  uint64_t v3 = *(void *)(v1 + 56);
  if (*(unsigned char *)(v1 + 64) == 1)
  {
    swift_bridgeObjectRetain();
    swift_retain();
  }
  else
  {
    swift_bridgeObjectRetain();
  }
  Swift::Int v4 = *(void *)(v3 + 16);
  swift_release();
  swift_bridgeObjectRelease();
  outlined init with copy of Sections(v1, (uint64_t)v14);
  if (v4 <= at) {
    goto LABEL_14;
  }
  int v5 = v14[64];
  outlined init with copy of Sections((uint64_t)v14, (uint64_t)v12);
  if (v5 != 1)
  {
    outlined destroy of Sections((uint64_t)v12);
    outlined init with copy of Sections((uint64_t)v14, (uint64_t)v10);
    goto LABEL_13;
  }
  Swift::Int v6 = *(void *)(v13 + 16);
  outlined destroy of Sections((uint64_t)v12);
  Swift::Bool result = outlined init with copy of Sections((uint64_t)v14, (uint64_t)v10);
  if (v6 <= at)
  {
LABEL_13:
    outlined destroy of Sections((uint64_t)v10);
LABEL_14:
    outlined destroy of Sections((uint64_t)v14);
    outlined init with copy of Sections(v1, (uint64_t)v12);
    goto LABEL_15;
  }
  if (at < 0)
  {
    __break(1u);
    goto LABEL_18;
  }
  if (*(void *)(v11 + 16) <= (unint64_t)at)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  char v8 = *(unsigned char *)(v11 + 16 * at + 40);
  outlined destroy of Sections((uint64_t)v10);
  outlined destroy of Sections((uint64_t)v14);
  Swift::Bool result = outlined init with copy of Sections(v1, (uint64_t)v12);
  if (v8)
  {
LABEL_15:
    char v9 = 0;
    goto LABEL_16;
  }
  if (*(void *)(v13 + 16) > (unint64_t)at)
  {
    char v9 = *(unsigned char *)(v13 + 16 * at + 41);
LABEL_16:
    outlined destroy of Sections((uint64_t)v12);
    return v9;
  }
LABEL_19:
  __break(1u);
  return result;
}

Swift::Int __swiftcall Sections.footerOffset(forSectionAt:)(Swift::Int forSectionAt)
{
  outlined init with copy of Sections(v1, (uint64_t)v9);
  if (!v10 || !specialized Set.contains(_:)(forSectionAt, v10)) {
    goto LABEL_13;
  }
  outlined destroy of Sections((uint64_t)v9);
  Swift::Int v3 = forSectionAt + 1;
  if (__OFADD__(forSectionAt, 1))
  {
    __break(1u);
    goto LABEL_11;
  }
  uint64_t v4 = *(void *)(v1 + 56);
  if (v3 >= *(void *)(v4 + 16))
  {
    uint64_t v5 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
  }
  else
  {
    if (v3 < 0)
    {
LABEL_12:
      __break(1u);
LABEL_13:
      _StringGuts.grow(_:)(24);
      swift_bridgeObjectRelease();
      v8._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v8);
      swift_bridgeObjectRelease();
      Swift::Int result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    uint64_t v5 = *(void *)(v4 + 16 * v3 + 32);
  }
  BOOL v6 = __OFSUB__(v5, 1);
  Swift::Int result = v5 - 1;
  if (v6)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  return result;
}

Swift::Int Sections.rowIDs(forSectionAt:)@<X0>(Swift::Int a1@<X0>, Swift::Int *a2@<X8>)
{
  Swift::Int result = Sections.startOffset(forSectionAt:)(a1);
  Swift::Int v6 = a1 + 1;
  if (__OFADD__(a1, 1))
  {
    __break(1u);
    goto LABEL_15;
  }
  Swift::Int v7 = result;
  uint64_t v8 = v2[7];
  if (v6 >= *(void *)(v8 + 16))
  {
    Swift::Int result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
    Swift::Int v9 = result;
    uint64_t v10 = v2[9];
    if (!v10) {
      goto LABEL_9;
    }
LABEL_7:
    Swift::Int result = specialized Set.contains(_:)(a1, v10);
    if ((result & 1) != 0 && __OFSUB__(v9--, 1)) {
      goto LABEL_20;
    }
LABEL_9:
    if (v9 >= v7)
    {
      Swift::Int v12 = v2[11];
      swift_retain();
      Swift::Int result = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
      if ((result & 0x8000000000000000) == 0)
      {
        if ((v7 & 0x8000000000000000) == 0)
        {
          if (result >= v9)
          {
            *a2 = v7;
            a2[1] = v9;
            a2[2] = v12;
            a2[3] = (Swift::Int)closure #1 in Sections.rowIDs(forSectionAt:);
            a2[4] = 0;
            return result;
          }
          goto LABEL_18;
        }
LABEL_17:
        __break(1u);
LABEL_18:
        __break(1u);
        goto LABEL_19;
      }
LABEL_16:
      __break(1u);
      goto LABEL_17;
    }
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if ((v6 & 0x8000000000000000) == 0)
  {
    Swift::Int v9 = *(void *)(v8 + 16 * v6 + 32);
    uint64_t v10 = v2[9];
    if (!v10) {
      goto LABEL_9;
    }
    goto LABEL_7;
  }
LABEL_19:
  __break(1u);
LABEL_20:
  __break(1u);
  return result;
}

uint64_t closure #1 in Sections.rowIDs(forSectionAt:)()
{
  return _ViewList_ID.canonicalID.getter();
}

void *closure #1 in Sections.firstIndexPath<A>(for:)(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *result + 1;
  if (__OFADD__(*result, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v5 = *(void *)(a2 + 56);
    if (v3 >= *(void *)(v5 + 16))
    {
      uint64_t v6 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
      return (void *)(v6 < a3);
    }
    if ((v3 & 0x8000000000000000) == 0)
    {
      uint64_t v6 = *(void *)(v5 + 16 * v3 + 32);
      return (void *)(v6 < a3);
    }
  }
  __break(1u);
  return result;
}

uint64_t outlined destroy of Sections(uint64_t a1)
{
  return a1;
}

unint64_t partial apply for closure #1 in Sections.firstIndexPath(of:)(void *a1)
{
  return (unint64_t)closure #1 in Sections.firstIndexPath<A>(for:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t destroy for Sections(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for Sections(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  id v8 = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for Sections(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Sections(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Sections(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Sections(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)Swift::Int result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Sections()
{
  return &type metadata for Sections;
}

uint64_t getEnumTagSinglePayload for Sections.Item(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 10)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for Sections.Item(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)Swift::Int result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Sections.Item()
{
  return &type metadata for Sections.Item;
}

uint64_t PickerContent.keyboardShortcut(_:modifiers:localization:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5 = a1[1];
  char v6 = *a3;
  v8[0] = *a1;
  v8[1] = v5;
  uint64_t v8[2] = a2;
  char v9 = v6;
  return PickerContent.keyboardShortcut(_:)((uint64_t)v8, a4, a5);
}

void PickerContent.keyboardShortcut(modifiers:)()
{
}

uint64_t View.pickerKeyboardShortcut(_:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.pickerKeyboardShortcut(_:modifiers:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t View.pickerKeyboardShortcut(_:modifiers:localization:)()
{
  return View._trait<A>(_:_:)();
}

void static KeyboardShortcutPickerOptionTraitKey.defaultValue.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
}

uint64_t associated type witness table accessor for PickerContent.Body : PickerContent in _KeyboardShortcutPickerContent<A>()
{
  return swift_getWitnessTable();
}

uint64_t instantiation function for generic protocol witness table for _KeyboardShortcutPickerContent<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _KeyboardShortcutPickerContent(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) == 0 && ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFFFFFFFE7)
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v10 = *(void *)v11;
    *(void *)(v10 + 8) = *(void *)(v11 + 8);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(unsigned char *)(v10 + 24) = *(unsigned char *)(v11 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v9 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  return v4;
}

uint64_t assignWithCopy for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  return a1;
}

uint64_t assignWithTake for _KeyboardShortcutPickerContent(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *(void *)(v8 + 8);
  swift_bridgeObjectRelease();
  *(void *)(v7 + 16) = *(void *)(v8 + 16);
  *(unsigned char *)(v7 + 24) = *(unsigned char *)(v8 + 24);
  return a1;
}

void storeEnumTagSinglePayload for _KeyboardShortcutPickerContent(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 25;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFE)
            {
              unint64_t v21 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0x7FFFFFFE)
              {
                *(void *)unint64_t v21 = 0;
                *(void *)(v21 + 8) = 0;
                *(unsigned char *)(v21 + 24) = 0;
                *(void *)(v21 + 16) = 0;
                *(_DWORD *)unint64_t v21 = a2 - 0x7FFFFFFF;
              }
              else
              {
                *(void *)(v21 + 8) = a2;
              }
            }
            else
            {
              uint64_t v20 = *(void (**)(void))(v6 + 56);
              v20();
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187C98A14);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return;
  }
}

uint64_t sub_187C98A3C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C98B00()
{
  return swift_getWitnessTable();
}

uint64_t View.map<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v15 = *(void *)(a3 - 8);
  double v16 = MEMORY[0x1F4188790](a1);
  int v18 = (char *)v21 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v15 + 16))(v18, v7, v16);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(a7, v18, a3);
  v21[0] = a3;
  v21[1] = a4;
  _OWORD v21[2] = a5;
  v21[3] = a6;
  unsigned int v19 = (void *)(a7 + *(int *)(type metadata accessor for MappedViews() + 52));
  void *v19 = a1;
  v19[1] = a2;
  return swift_retain();
}

uint64_t type metadata accessor for MappedViews()
{
  return swift_getGenericMetadata();
}

void *initializeBufferWithCopyOfBuffer for MappedViewElement(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[2];
  a1[1] = a2[1];
  a1[2] = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MappedViewElement(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for MappedViewElement(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MappedViewElement()
{
  return &type metadata for MappedViewElement;
}

ValueMetadata *type metadata accessor for MappedViewElement.Placeholder()
{
  return &type metadata for MappedViewElement.Placeholder;
}

uint64_t getEnumTagSinglePayload for MappedViews(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187C98F18);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void storeEnumTagSinglePayload for MappedViews(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x187C9910CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          int v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            v18[1] = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *int v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

_UNKNOWN **base witness table accessor for View in MappedViews<A, B>()
{
  return &protocol witness table for MappedViews<A, B>;
}

_UNKNOWN **base witness table accessor for View in MappedViewElement.Placeholder()
{
  return &protocol witness table for MappedViewElement.Placeholder;
}

uint64_t static MappedViewElement.Placeholder._makeView(view:inputs:)(uint64_t a1, uint64_t *a2)
{
  int v2 = *((_DWORD *)a2 + 2);
  uint64_t v3 = a2[2];
  uint64_t v4 = a2[5];
  uint64_t v5 = a2[6];
  int v6 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v2;
  uint64_t v22 = v3;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v4;
  uint64_t v25 = v5;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v6;
  lazy protocol witness table accessor for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  if (v10)
  {
    uint64_t v7 = *(void *)(v10 + 32);
    unsigned int v8 = *(void (**)(uint64_t *))(v10 + 16);
    swift_retain();
    swift_retain();
    swift_release();
    uint64_t v19 = v7;
    PropertyList.subscript.setter();
    if (v8)
    {
      uint64_t v10 = v20;
      int v11 = v21;
      uint64_t v12 = v22;
      long long v13 = v23;
      uint64_t v14 = v24;
      uint64_t v15 = v25;
      long long v16 = v26;
      uint64_t v17 = v27;
      int v18 = v28;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v8(&v10);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v8);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
      swift_release_n();
      return swift_release_n();
    }
  }
  else
  {
    uint64_t v19 = 0;
    PropertyList.subscript.setter();
  }
  _ViewOutputs.init()();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void protocol witness for View.body.getter in conformance MappedViewElement.Placeholder()
{
}

uint64_t static MappedViews._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v47 = a7;
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v11 = *a1;
  uint64_t v12 = *(void *)a2;
  unsigned int v48 = *(_DWORD *)(a2 + 8);
  uint64_t v13 = *(void *)(a2 + 16);
  int v46 = *(_DWORD *)(a2 + 24);
  int v45 = *(_DWORD *)(a2 + 28);
  int v44 = *(_DWORD *)(a2 + 32);
  int v50 = *(_DWORD *)(a2 + 36);
  uint64_t v14 = *(void *)(a2 + 40);
  uint64_t v39 = *(void *)(a2 + 48);
  uint64_t v15 = *(void *)(a2 + 56);
  int v38 = *(_DWORD *)(a2 + 64);
  uint64_t v16 = *(void *)(a2 + 72);
  int v37 = *(unsigned __int8 *)(a2 + 80);
  LODWORD(v40) = v11;
  LODWORD(v51) = v11;
  uint64_t v49 = v16;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v43 = v14;
  swift_bridgeObjectRetain();
  unint64_t v55 = a3;
  uint64_t v56 = a4;
  uint64_t v41 = a4;
  unint64_t v57 = a5;
  uint64_t v58 = a6;
  type metadata accessor for MappedViews();
  uint64_t v35 = type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  uint64_t v17 = *(void *)(*(void *)(a3 - 8) + 64);
  uint64_t v36 = a6;
  uint64_t v42 = a5;
  if (v17) {
    closure #1 in static MappedViews._makeViewList(view:inputs:)(1, a3, v41, a5, a6);
  }
  v32[0] = v15 | 0x800;
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  v32[1] = v13;
  uint64_t v33 = a3;
  static View.makeDebuggableViewList(view:inputs:)();
  int v65 = v38;
  uint64_t v66 = v49;
  char v67 = v37;
  unsigned int v18 = _ViewListOutputs.makeAttribute(inputs:)();
  unsigned int v19 = _GraphValue.value.getter();
  uint64_t v34 = v12;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = v33;
  uint64_t v21 = v41;
  uint64_t v22 = v42;
  uint64_t v23 = v36;
  long long v40 = v32;
  unint64_t v55 = __PAIR64__(v19, v18);
  uint64_t v56 = v12;
  unint64_t v57 = __PAIR64__(HIDWORD(v13), v48);
  uint64_t v58 = v13;
  int v59 = v46;
  int v60 = v45;
  int v61 = v44;
  int v62 = v50;
  uint64_t v63 = v43;
  uint64_t v64 = default argument 3 of MappedViews.MappedList.Init.init(list:view:baseInputs:views:)();
  MEMORY[0x1F4188790](v64);
  uint64_t v51 = v20;
  uint64_t v52 = v21;
  uint64_t v53 = v22;
  uint64_t v54 = v23;
  uint64_t v30 = type metadata accessor for MappedViews.MappedList.Init();
  uint64_t WitnessTable = swift_getWitnessTable();
  _s14AttributeGraph0A0Vy7SwiftUI8ViewList_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v55, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_21, (uint64_t)&v29, v30, MEMORY[0x1E4FBC248], v24, MEMORY[0x1E4FBC278], v25);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  int v26 = v51;
  uint64_t v27 = v47;
  outlined destroy of _ViewListOutputs.Views(v47);
  *(_DWORD *)uint64_t v27 = v26;
  *(void *)(v27 + 8) = 0;
  *(unsigned char *)(v27 + 40) = 1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static MappedViews._makeViewList(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = a2;
  uint64_t v12 = a3;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v10[2] = type metadata accessor for MappedViews();
  void v10[3] = a2;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a2, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v11;
}

uint64_t default argument 3 of MappedViews.MappedList.Init.init(list:view:baseInputs:views:)()
{
  type metadata accessor for WeakAttribute();
  lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  type metadata accessor for Dictionary();
  type metadata accessor for MutableBox();
  uint64_t v1 = Dictionary.init()();
  return MEMORY[0x18C10C050](&v1);
}

uint64_t static MappedViews._viewListCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6 = *(_DWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  uint64_t v8 = *(void *)(a1 + 8) | 0x800;
  v12[0] = *(void *)a1;
  v12[1] = v8;
  int v13 = v6;
  uint64_t v14 = v7;
  uint64_t v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(a4 + 40);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = v9(v12, a2, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return v10;
}

uint64_t MappedViews.MappedList.Init.list.getter@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  return outlined init with copy of TableColumnList(Value, a1);
}

uint64_t MappedViews.MappedList.Init.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 8);
  int v4 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  int v7 = *(_DWORD *)(v1 + 32);
  int v6 = *(_DWORD *)(v1 + 36);
  int v13 = *(_DWORD *)(v1 + 40);
  int v14 = *(_DWORD *)(v1 + 4);
  int v12 = *(_DWORD *)(v1 + 44);
  uint64_t v9 = *(void *)(v1 + 48);
  uint64_t v8 = *(void *)(v1 + 56);
  MappedViews.MappedList.Init.list.getter((uint64_t)v15);
  a1[3] = type metadata accessor for MappedViews.MappedList();
  a1[4] = swift_getWitnessTable();
  uint64_t v10 = swift_allocObject();
  *a1 = v10;
  outlined init with take of OptionalBinaryInteger(v15, v10 + 16);
  *(void *)(v10 + 56) = v3;
  *(_DWORD *)(v10 + 64) = v4;
  *(void *)(v10 + 72) = v5;
  *(_DWORD *)(v10 + 80) = v7;
  *(_DWORD *)(v10 + 84) = v6;
  *(_DWORD *)(v10 + 88) = v13;
  *(_DWORD *)(v10 + 92) = v12;
  *(void *)(v10 + 96) = v9;
  *(_DWORD *)(v10 + 104) = v14;
  *(void *)(v10 + 112) = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return swift_retain();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MappedViews<A, B>.MappedList.Init(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t MappedViews.MappedList.count(style:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 8))(&v6, v3, v4);
}

uint64_t MappedViews.MappedList.estimatedCount(style:)(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = v1[3];
  uint64_t v4 = v1[4];
  __swift_project_boxed_opaque_existential_1(v1, v3);
  uint64_t v6 = v2;
  return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v4 + 16))(&v6, v3, v4);
}

uint64_t MappedViews.MappedList.traitKeys.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
}

uint64_t MappedViews.MappedList.viewIDs.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

uint64_t MappedViews.MappedList.traits.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 40))(v1, v2);
}

uint64_t MappedViews.MappedList.applyNodes(from:style:list:transform:to:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *a2;
  uint64_t v11 = *(void *)(v6 + 40);
  int v12 = *(_DWORD *)(v6 + 48);
  uint64_t v13 = *(void *)(v6 + 56);
  uint64_t v14 = *(void *)(v6 + 80);
  uint64_t v15 = *(void *)(v6 + 96);
  LODWORD(v21[0]) = *(_DWORD *)(v6 + 88);
  v21[1] = v11;
  int v22 = v12;
  uint64_t v23 = v13;
  long long v24 = *(_OWORD *)(v6 + 64);
  uint64_t v25 = v14;
  uint64_t v26 = v15;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  type metadata accessor for MappedViews.Transform();
  swift_getWitnessTable();
  _ViewList_SublistTransform.push<A>(_:)();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v16 = *(void *)(v6 + 24);
  uint64_t v17 = *(void *)(v6 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v6, v16);
  v21[0] = v10;
  LOBYTE(v16) = (*(uint64_t (**)(uint64_t, void *, unint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v17 + 48))(a1, v21, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6, v16, v17);
  _ViewList_SublistTransform.pop()();
  return v16 & 1;
}

uint64_t MappedViews.MappedList.firstOffset<A>(forID:style:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *a2;
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  uint64_t v13 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v13, a4, a5, v10, v11);
}

uint64_t protocol witness for ViewList.applyNodes(from:style:list:transform:to:) in conformance MappedViews<A, B>.MappedList(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MappedViews.MappedList.applyNodes(from:style:list:transform:to:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4, a5, a6);
}

uint64_t protocol witness for ViewList.firstOffset<A>(forID:style:) in conformance MappedViews<A, B>.MappedList(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MappedViews.MappedList.firstOffset<A>(forID:style:)(a1, a2, a5, a3, a4);
}

uint64_t MappedViews.Transform.apply(sublist:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *((void *)v3 + 1);
  int v18 = v3[4];
  int v19 = *v3;
  uint64_t v7 = *((void *)v3 + 3);
  uint64_t v8 = a1 + 32;
  uint64_t v10 = *((void *)v3 + 6);
  uint64_t v9 = *((void *)v3 + 7);
  outlined init with copy of TableColumnList(a1 + 32, (uint64_t)v20);
  uint64_t v11 = *(void *)(a1 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = *(void *)(a1 + 16);
  _ViewList_Sublist.list.getter();
  uint64_t v13 = AGCreateWeakAttribute();
  long long v14 = *(_OWORD *)(a2 + 32);
  long long v21 = *(_OWORD *)(a2 + 16);
  long long v22 = v14;
  *((void *)&v22 + 1) = type metadata accessor for MappedViews.MappedElements();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v15 = swift_allocObject();
  *(void *)&long long v21 = v15;
  outlined init with take of OptionalBinaryInteger(v20, v15 + 16);
  *(void *)(v15 + 56) = v6;
  *(_DWORD *)(v15 + 64) = v18;
  *(void *)(v15 + 72) = v7;
  uint64_t v16 = *((void *)v3 + 5);
  *(void *)(v15 + 80) = *((void *)v3 + 4);
  *(void *)(v15 + 88) = v16;
  *(void *)(v15 + 96) = v10;
  *(void *)(v15 + 104) = v12;
  *(void *)(v15 + 112) = v11;
  *(void *)(v15 + 120) = v13;
  *(_DWORD *)(v15 + 128) = v19;
  *(void *)(v15 + 136) = v9;
  swift_retain();
  __swift_destroy_boxed_opaque_existential_1(v8);
  return outlined init with take of OptionalBinaryInteger(&v21, v8);
}

uint64_t MappedViews.MappedElements.count.getter()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(v1, v2);
}

uint64_t MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  long long v12 = *(_OWORD *)(a3 + 48);
  id v26[2] = *(_OWORD *)(a3 + 32);
  v26[3] = v12;
  unsigned char v26[4] = *(_OWORD *)(a3 + 64);
  int v27 = *(_DWORD *)(a3 + 80);
  long long v13 = *(_OWORD *)(a3 + 16);
  v26[0] = *(_OWORD *)a3;
  v26[1] = v13;
  unsigned int Attribute = AGWeakAttributeGetAttribute();
  BOOL v15 = Attribute == *MEMORY[0x1E4F4E7A0];
  if (Attribute == *MEMORY[0x1E4F4E7A0]) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = Attribute;
  }
  int v17 = *(_DWORD *)(v7 + 112);
  uint64_t v18 = swift_allocObject();
  _ViewList_ID.elementID(at:)();
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a5;
  *(void *)(v19 + 24) = a6;
  char v20 = closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(a1, (uint64_t)partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?, @unowned Bool), v19, v7, a2, (uint64_t)v26, a4, v18, v17, v23, v16, (v16 | ((unint64_t)v15 << 32)) >> 32, *(_OWORD *)(a7 + 16), *(void *)(a7 + 32), *(void *)(a7 + 40));
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0) {
    return v20 & 1;
  }
  __break(1u);
  return result;
}

uint64_t closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, int a11, char a12, long long a13, uint64_t a14, uint64_t a15)
{
  outlined init with copy of TableColumnList(a4, (uint64_t)v42);
  uint64_t v19 = v43;
  uint64_t v20 = v44;
  __swift_project_boxed_opaque_existential_1(v42, v43);
  long long v21 = *(_OWORD *)(a6 + 48);
  _OWORD v40[2] = *(_OWORD *)(a6 + 32);
  v40[3] = v21;
  v40[4] = *(_OWORD *)(a6 + 64);
  int v41 = *(_DWORD *)(a6 + 80);
  long long v22 = *(_OWORD *)(a6 + 16);
  v40[0] = *(_OWORD *)a6;
  v40[1] = v22;
  long long v29 = a13;
  uint64_t v30 = a14;
  uint64_t v31 = a15;
  uint64_t v32 = a8;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  int v35 = a9;
  int v36 = a11;
  char v37 = a12 & 1;
  uint64_t v38 = a4;
  uint64_t v39 = a7;
  LOBYTE(a7) = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t), unsigned char *, uint64_t, uint64_t))(v20 + 16))(a1, a5, v40, a7, partial apply for closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:), v28, v19, v20);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v42);
  return a7 & 1;
}

uint64_t closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(uint64_t, uint64_t *, uint64_t (*)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>), uint64_t), uint64_t a7, int a8, int a9, char a10, uint64_t a11, uint64_t a12, long long a13, long long a14)
{
  int v16 = *((_DWORD *)a2 + 2);
  uint64_t v17 = a2[2];
  int v18 = *((_DWORD *)a2 + 20);
  uint64_t v19 = (_DWORD *)(a5 + 16);
  uint64_t v41 = *a2;
  int v42 = v16;
  uint64_t v43 = v17;
  long long v44 = *(_OWORD *)(a2 + 3);
  long long v45 = *(_OWORD *)(a2 + 5);
  long long v46 = *(_OWORD *)(a2 + 7);
  uint64_t v47 = a2[9];
  int v48 = v18;
  long long v33 = a13;
  long long v34 = a14;
  uint64_t v20 = type metadata accessor for MappedViews.MappedElements();
  (*(void (**)(long long *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(&v33, a11, v20);
  uint64_t v21 = swift_allocObject();
  long long v22 = v38;
  *(_OWORD *)(v21 + 136) = v37;
  *(_OWORD *)(v21 + 152) = v22;
  long long v23 = v40;
  *(_OWORD *)(v21 + 168) = v39;
  *(_OWORD *)(v21 + 184) = v23;
  long long v24 = v34;
  *(_OWORD *)(v21 + 72) = v33;
  *(_OWORD *)(v21 + 88) = v24;
  long long v25 = v36;
  *(_OWORD *)(v21 + 104) = v35;
  *(_OWORD *)(v21 + 16) = a13;
  *(_OWORD *)(v21 + 32) = a14;
  *(void *)(v21 + 48) = a5;
  *(_DWORD *)(v21 + 56) = a8;
  *(_DWORD *)(v21 + 60) = a9;
  *(unsigned char *)(v21 + 64) = a10 & 1;
  *(_OWORD *)(v21 + 120) = v25;
  *(void *)(v21 + 200) = a12;
  *(void *)(v21 + 208) = a3;
  *(void *)(v21 + 216) = a4;
  swift_retain();
  swift_retain();
  swift_retain();
  char v26 = a6(a1, &v41, partial apply for closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:), v21);
  swift_release();
  uint64_t result = swift_beginAccess();
  int v28 = *(_DWORD *)(a5 + 16);
  if (v28 == 0x7FFFFFFF)
  {
    __break(1u);
  }
  else
  {
    _DWORD *v19 = v28 + 1;
    return v26 & 1;
  }
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, void *a10, uint64_t a11, uint64_t a12)
{
  uint64_t v55 = a6;
  uint64_t v56 = a7;
  uint64_t v46 = a5;
  uint64_t v58 = a8;
  uint64_t v90 = *MEMORY[0x1E4F143B8];
  int v15 = *((_DWORD *)a1 + 2);
  uint64_t v16 = a1[2];
  uint64_t v50 = *a1;
  uint64_t v51 = v16;
  uint64_t v17 = a1[3];
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[6];
  uint64_t v53 = a1[5];
  uint64_t v54 = v19;
  uint64_t v20 = a1[7];
  uint64_t v21 = a1[8];
  uint64_t v22 = a1[9];
  int v48 = *((_DWORD *)a1 + 20);
  int v49 = v15;
  swift_beginAccess();
  uint64_t v23 = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  uint64_t v24 = *(void *)(a2 + 16);
  uint64_t v52 = &v45;
  uint64_t v63 = v24;
  uint64_t v64 = v23;
  *(_DWORD *)int v65 = a3;
  *(void *)&v65[4] = AGCreateWeakAttribute();
  int v60 = a10;
  uint64_t v71 = a9;
  __int16 v72 = a10;
  uint64_t v73 = a11;
  *(void *)&long long v74 = a12;
  uint64_t v57 = a12;
  uint64_t v25 = type metadata accessor for MappedViews.ElementView();
  uint64_t v61 = v25;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v26 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v63, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v59, v25, MEMORY[0x1E4FBC248], v26, MEMORY[0x1E4FBC278], v27);
  swift_bridgeObjectRelease();
  LODWORD(v25) = v71;
  swift_beginAccess();
  int v28 = *(void **)(a2 + 24);
  uint64_t v71 = *(void *)(a2 + 16);
  __int16 v72 = v28;
  _ViewList_ID.canonicalID.getter();
  uint64_t v29 = v64;
  int v47 = v25;
  uint64_t v88 = AGCreateWeakAttribute();
  char v89 = 0;
  uint64_t v80 = v63;
  uint64_t v81 = v29;
  swift_beginAccess();
  uint64_t v52 = a10;
  uint64_t v30 = v46;
  type metadata accessor for WeakAttribute();
  lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  type metadata accessor for Dictionary();
  Dictionary.subscript.setter();
  swift_endAccess();
  uint64_t v31 = *(void *)(a4 + 40);
  int v32 = *(_DWORD *)(a4 + 48);
  uint64_t v33 = *(void *)(a4 + 56);
  int v34 = *(_DWORD *)(a4 + 64);
  int v35 = *(_DWORD *)(a4 + 68);
  int v36 = *(_DWORD *)(a4 + 72);
  int v37 = *(_DWORD *)(a4 + 76);
  uint64_t v38 = *(void *)(a4 + 80);
  uint64_t v80 = v31;
  LODWORD(v81) = v32;
  uint64_t v82 = v33;
  int v83 = v34;
  int v84 = v35;
  int v85 = v36;
  int v86 = v37;
  uint64_t v87 = v38;
  if (v30)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    _GraphInputs.makeReusable(indirectMap:)();
    swift_release();
    uint64_t v39 = v80;
    int v32 = v81;
    uint64_t v33 = v82;
    int v34 = v83;
    int v35 = v84;
    int v36 = v85;
    int v37 = v86;
    uint64_t v38 = v87;
  }
  else
  {
    uint64_t v40 = v31;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v39 = v40;
  }
  uint64_t v71 = v50;
  LODWORD(v72) = v49;
  uint64_t v73 = v51;
  *(void *)&long long v74 = v17;
  *((void *)&v74 + 1) = v18;
  uint64_t v75 = v53;
  uint64_t v76 = v54;
  *(void *)&long long v77 = v20;
  *((void *)&v77 + 1) = v21;
  uint64_t v78 = v22;
  int v79 = v48;
  uint64_t v63 = v39;
  LODWORD(v64) = v32;
  *(void *)int v65 = v33;
  *(_DWORD *)&long long v65[8] = v34;
  *(_DWORD *)&v65[12] = v35;
  *(_DWORD *)&v65[16] = v36;
  *(_DWORD *)&v65[20] = v37;
  uint64_t v66 = v38;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.merge(_:ignoringPhase:)();
  lazy protocol witness table accessor for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput();
  uint64_t v41 = v56;
  swift_retain();
  PropertyList.subscript.getter();
  int v42 = (void *)swift_allocObject();
  v42[2] = v55;
  void v42[3] = v41;
  v42[4] = v63;
  uint64_t v88 = (uint64_t)v42;
  PropertyList.subscript.setter();
  uint64_t v43 = v52;
  _GraphValue.init(_:)();
  uint64_t v63 = v71;
  LODWORD(v64) = v72;
  *(void *)int v65 = v73;
  *(_OWORD *)&long long v65[8] = v74;
  uint64_t v66 = v75;
  uint64_t v67 = v76;
  long long v68 = v77;
  uint64_t v69 = v78;
  int v70 = v79;
  (*(void (**)(uint64_t *, uint64_t *, uint64_t *))(v57 + 24))(&v88, &v63, v43);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(v6 + 96);
  *(void *)&v48[0] = *(void *)(v6 + 88);
  *((void *)&v48[0] + 1) = v13;
  uint64_t result = _ViewList_ID.canonicalID.getter();
  if (a1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_19;
  }
  if (a1 > 0x7FFFFFFF)
  {
LABEL_19:
    __break(1u);
    return result;
  }
  unsigned int v55 = a1;
  outlined init with copy of TableColumnList(a2, (uint64_t)&v37);
  type metadata accessor for CVarArg(0, &lazy cache variable for type metadata for _ViewList_Elements);
  if ((swift_dynamicCast() & 1) == 0)
  {
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v43 = 0u;
    memset(v42, 0, sizeof(v42));
    swift_release();
    uint64_t v22 = type metadata accessor for Optional();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v22 - 8) + 8))(v42, v22);
    return 0;
  }
  uint64_t v34 = a3;
  char v35 = a5;
  long long v51 = v44;
  long long v52 = v45;
  long long v53 = v46;
  long long v54 = v47;
  v48[0] = v42[0];
  v48[1] = v42[1];
  long long v49 = v42[2];
  long long v50 = v43;
  unsigned int v16 = v55;
  unsigned int v15 = v56;
  uint64_t v17 = v57;
  uint64_t v18 = swift_retain();
  MEMORY[0x18C10C020](&v36, v18);
  uint64_t v19 = v36;
  *(void *)&v42[0] = __PAIR64__(v15, v16);
  unsigned int v33 = v15;
  *((void *)&v42[0] + 1) = v17;
  uint64_t v32 = *(void *)(a6 + 24);
  uint64_t v20 = type metadata accessor for WeakAttribute();
  unint64_t v21 = lazy protocol witness table accessor for type _ViewList_ID.Canonical and conformance _ViewList_ID.Canonical();
  MEMORY[0x18C115450](&v37, v42, v19, MEMORY[0x1E4F3F6D8], v20, v21);
  swift_release();
  swift_bridgeObjectRelease();
  if (v38)
  {
    swift_release();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(a6 - 8) + 8))(v48, a6);
    return 0;
  }
  uint64_t v31 = a6;
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    unint64_t v37 = __PAIR64__(v33, v16);
    uint64_t v38 = v17;
    swift_beginAccess();
    type metadata accessor for Dictionary();
    Dictionary.removeValue(forKey:)();
    swift_endAccess();
LABEL_15:
    swift_release();
    (*(void (**)(_OWORD *, uint64_t))(*(void *)(v31 - 8) + 8))(v48, v31);
    return 0;
  }
  uint64_t v23 = *(void *)(v6 + 24);
  uint64_t v24 = *(void *)(v6 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v6, v23);
  if (((*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, void, uint64_t, uint64_t))(v24 + 24))(a1, v48, v34, a4, v35 & 1, v23, v24) & 1) == 0)goto LABEL_14; {
  uint64_t v25 = *(void *)(v6 + 40);
  }
  uint64_t v26 = *(void *)(v6 + 56);
  uint64_t v27 = *(void *)(v6 + 80);
  DWORD2(v42[0]) = *(_DWORD *)(v6 + 48);
  *(void *)&v42[1] = v26;
  *(_OWORD *)((char *)&v42[1] + 8) = *(_OWORD *)(v6 + 64);
  *((void *)&v42[2] + 1) = v27;
  unint64_t v37 = *((void *)&v49 + 1);
  LODWORD(v38) = v50;
  uint64_t v39 = *((void *)&v50 + 1);
  long long v40 = v51;
  uint64_t v41 = v52;
  *(void *)&v42[0] = v25;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  char v28 = _GraphInputs.tryToReuse(by:indirectMap:testOnly:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v28 & 1) == 0)
  {
LABEL_14:
    static ReuseTrace.traceReuseViewInputsDifferentFailure()();
    goto LABEL_15;
  }
  if ((v35 & 1) == 0)
  {
    MEMORY[0x1F4188790](v17);
    long long v30 = *(_OWORD *)(v31 + 32);
    *(void *)&v42[0] = *(void *)(v31 + 16);
    *((void *)&v42[0] + 1) = v32;
    v42[1] = v30;
    uint64_t v29 = type metadata accessor for MappedViews.ElementView();
    MEMORY[0x1F4188790](v29);
    AGGraphMutateAttribute();
  }
  swift_release();
  (*(void (**)(_OWORD *, uint64_t))(*(void *)(v31 - 8) + 8))(v48, v31);
  return 1;
}

double closure #1 in MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 96);
  type metadata accessor for MappedViews.MappedElements();
  int v5 = *(_DWORD *)(a2 + 112);
  AGWeakAttributeGetAttribute();
  swift_bridgeObjectRetain();
  uint64_t v6 = AGCreateWeakAttribute();
  double result = *(double *)(a2 + 88);
  *(double *)a1 = result;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 20) = v6;
  return result;
}

uint64_t MappedViews.MappedElements.retain()()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  __swift_project_boxed_opaque_existential_1(v0, v1);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 32))(v1, v2);
}

double MappedViews.ElementView.list.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, a1);
  }
  else
  {
    *(void *)(a1 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

uint64_t MappedViews.ElementView.value.getter()
{
  return Rule.withObservation<A>(do:)();
}

uint64_t closure #1 in closure #1 in MappedViews.ElementView.value.getter(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, int a5, unint64_t a6, uint64_t a7, unint64_t a8, uint64_t a9)
{
  void (*v21)(void *__return_ptr, uint64_t, uint64_t);
  unint64_t v22;
  unsigned int v25;
  void v26[4];
  unsigned int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  int v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;

  int v12 = a4;
  unsigned int v33 = a6;
  uint64_t v34 = a7;
  unint64_t v14 = HIDWORD(a2);
  unint64_t v15 = HIDWORD(a4);
  char v35 = a8;
  uint64_t v36 = a9;
  unsigned int v16 = a2;
  uint64_t v17 = *(void (**)(void))(a1 + *(int *)(type metadata accessor for MappedViews() + 52));
  uint64_t v25 = v14;
  uint64_t v27 = v16;
  char v28 = v14;
  uint64_t v29 = a3;
  long long v30 = v12;
  uint64_t v31 = v15;
  uint64_t v32 = a5;
  v26[0] = a6;
  v26[1] = a7;
  id v26[2] = a8;
  v26[3] = a9;
  type metadata accessor for MappedViews.ElementView();
  MappedViews.ElementView.list.getter((uint64_t)&v33);
  uint64_t v18 = v36;
  if (v36)
  {
    uint64_t v19 = v37;
    __swift_project_boxed_opaque_existential_1(&v33, v36);
    uint64_t v20 = v17;
    unint64_t v21 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v19 + 40);
    swift_bridgeObjectRetain();
    v21(v26, v18, v19);
    uint64_t v17 = v20;
    uint64_t v22 = v26[0];
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v33);
  }
  else
  {
    swift_bridgeObjectRetain();
    outlined destroy of ViewList?((uint64_t)&v33);
    ViewTraitCollection.init()();
    uint64_t v22 = v33;
  }
  unsigned int v33 = __PAIR64__(v25, v16);
  uint64_t v34 = a3;
  char v35 = v22;
  v17(&v33);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance MappedViews<A, B>.ElementView(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MappedViews<A, B>()
{
  swift_getWitnessTable();

  return static MultiView._makeView(view:inputs:)();
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MappedViews<A, B>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static MappedViews._makeViewList(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a4);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance MappedViews<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static MappedViews._viewListCount(inputs:)(a1, *(void *)(a2 + 16), a3, *(void *)(a2 + 32));
}

void protocol witness for View.body.getter in conformance MappedViews<A, B>()
{
}

unint64_t lazy protocol witness table accessor for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput()
{
  unint64_t result = lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput;
  if (!lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput;
  if (!lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MappedViewElement.BodyInput and conformance MappedViewElement.BodyInput);
  }
  return result;
}

uint64_t type metadata accessor for MappedViews.MappedList.Init()
{
  return swift_getGenericMetadata();
}

uint64_t outlined destroy of _ViewListOutputs.Views(uint64_t a1)
{
  return a1;
}

uint64_t initializeWithCopy for MappedViews.MappedList.Init(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.MappedList.Init(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.MappedList.Init(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

void *type metadata accessor for MappedViewElement.BodyInput()
{
  return &unk_1ED423C40;
}

uint64_t base witness table accessor for _AttributeBody in MappedViews<A, B>.MappedList.Init()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for MappedViews.MappedList()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187C9B970()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for MappedViews.MappedList(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for MappedViews.MappedList(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.MappedList(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.MappedList(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MappedViews.Transform()
{
  return swift_getGenericMetadata();
}

uint64_t destroy for MappedViews.MappedList.Init()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for MappedViews.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v3 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v3;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.Transform(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  swift_release();
  return a1;
}

uint64_t type metadata accessor for MappedViews.MappedElements()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187C9BE4C()
{
  __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for MappedViews.MappedElements(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for MappedViews.MappedElements(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v5;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.MappedElements(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_DWORD *)(a1 + 92) = *(_DWORD *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for MappedViews.MappedElements(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for MappedViews.MappedElements(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 128)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappedViews.MappedElements(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 128) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

double partial apply for closure #1 in MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(uint64_t a1)
{
  return closure #1 in MappedViews.MappedElements.tryToReuseElement(at:by:at:indirectMap:testOnly:)(a1, *(void *)(v1 + 48));
}

uint64_t sub_187C9C23C()
{
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t sub_187C9C274()
{
  return swift_deallocObject();
}

uint64_t partial apply for thunk for @callee_guaranteed (@in_guaranteed _ViewInputs, @guaranteed @escaping @callee_guaranteed (@in_guaranteed _ViewInputs) -> (@out _ViewOutputs)) -> (@out _ViewOutputs?, @unowned Bool)()
{
  return (*(uint64_t (**)(void))(v0 + 16))() & 1;
}

uint64_t partial apply for closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = *(unsigned int *)(v4 + 76) | ((unint64_t)*(unsigned __int8 *)(v4 + 80) << 32);
  return closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(a1, a2, a3, a4, *(void *)(v4 + 48), *(uint64_t (**)(uint64_t, uint64_t *, uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>), uint64_t))(v4 + 56), *(void *)(v4 + 64), *(_DWORD *)(v4 + 72), v6, SBYTE4(v6), *(void *)(v4 + 88), *(void *)(v4 + 96), *(_OWORD *)(v4 + 16), *(_OWORD *)(v4 + 32)) & 1;
}

uint64_t sub_187C9C30C()
{
  swift_release();
  __swift_destroy_boxed_opaque_existential_1(v0 + 72);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in closure #1 in closure #1 in MappedViews.MappedElements.makeElements(from:inputs:indirectMap:body:)(a1, *(void *)(v2 + 48), *(_DWORD *)(v2 + 56), v2 + 72, *(void *)(v2 + 200), *(void *)(v2 + 208), *(void *)(v2 + 216), a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40));
}

uint64_t sub_187C9C3D8()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t initializeWithCopy for MappedViews.ElementView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 20) = *(void *)(a2 + 20);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MappedViews.ElementView(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for MappedViews.ElementView(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for MappedViews.ElementView(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 28)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MappedViews.ElementView(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 28) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 28) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in MappedViews<A, B>.ElementView()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in closure #1 in MappedViews.ElementView.value.getter(uint64_t a1)
{
  return closure #1 in closure #1 in MappedViews.ElementView.value.getter(a1, *(void *)(v1 + 48), *(void *)(v1 + 56), *(void *)(v1 + 64), *(_DWORD *)(v1 + 72), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t outlined destroy of ViewList?(uint64_t a1)
{
  _s14AttributeGraph0A0Vy7SwiftUI8ViewList_pGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ViewList?, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void (*LazyState.wrappedValue.modify(void *a1, uint64_t a2))(void **a1, char a2)
{
  uint64_t v5 = malloc(0x30uLL);
  *a1 = v5;
  *uint64_t v5 = a2;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a2 + 16);
  _OWORD v5[2] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[3] = v7;
  size_t v8 = *(void *)(v7 + 64);
  uint64_t v5[4] = malloc(v8);
  uint64_t v9 = malloc(v8);
  v5[5] = v9;
  LazyState.getValue(forReading:)(1, a2, (uint64_t)v9);
  return LazyState.wrappedValue.modify;
}

void LazyState.wrappedValue.modify(void **a1, char a2)
{
  uint64_t v2 = *a1;
  if (a2)
  {
    uint64_t v4 = *v2;
    uint64_t v3 = v2[1];
    (*(void (**)(void, void, void))(v2[3] + 16))(v2[4], v2[5], v2[2]);
    if (*(void *)(v3 + *(int *)(v4 + 28))) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    uint64_t v6 = (void *)v2[4];
    uint64_t v5 = (void *)v2[5];
    uint64_t v7 = v2[2];
    size_t v8 = *(void (**)(void *, uint64_t))(v2[3] + 8);
    v8(v6, v7);
    v8(v5, v7);
  }
  else
  {
    if (*(void *)(v2[1] + *(int *)(*v2 + 28))) {
      dispatch thunk of AnyLocation.set(_:transaction:)();
    }
    uint64_t v6 = (void *)v2[4];
    uint64_t v5 = (void *)v2[5];
    (*(void (**)(void *, void))(v2[3] + 8))(v5, v2[2]);
  }
  free(v5);
  free(v6);

  free(v2);
}

uint64_t static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)()
{
  return specialized static LazyState._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

uint64_t LazyState<A>.init()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a1;
  *(void *)(v6 + 24) = a2;

  return LazyState.init(wrappedValue:)((uint64_t)partial apply for implicit closure #1 in LazyState<A>.init(), v6, a3);
}

void LazyStatePropertyBox.destroy()()
{
  if (*(void *)(v0 + 8)) {
    StoredLocationBase.invalidate()();
  }
}

uint64_t LazyStatePropertyBox.reset()()
{
  if (*(void *)(v0 + 8))
  {
    StoredLocationBase.invalidate()();
    uint64_t result = swift_release();
  }
  *(void *)(v0 + 8) = 0;
  return result;
}

uint64_t sub_187C9C940()
{
  return swift_deallocObject();
}

uint64_t partial apply for implicit closure #1 in LazyState<A>.init()()
{
  return dispatch thunk of ExpressibleByNilLiteral.init(nilLiteral:)();
}

uint64_t sub_187C9C978@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for LazyState();
  return LazyState.wrappedValue.getter(v2, a1);
}

uint64_t sub_187C9C9B4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LazyState();
  return specialized State.wrappedValue.setter(a1, v2);
}

uint64_t sub_187C9C9F4()
{
  return 8;
}

void *sub_187C9CA00(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

void *initializeBufferWithCopyOfBuffer for LazyState(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v5 + 64) <= 0x10uLL) {
    uint64_t v6 = 16;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v4 = *(void *)a2;
    uint64_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
  }
  else
  {
    unsigned int v10 = a2[v6];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_19;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_19;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_19;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_19:
          int v14 = (v13 | (v11 << (8 * v6))) + 2;
          unsigned int v10 = v13 + 2;
          if (v6 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    if (v10 == 1)
    {
      (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
      char v15 = 1;
    }
    else
    {
      uint64_t v16 = *((void *)a2 + 1);
      *uint64_t v4 = *(void *)a2;
      v4[1] = v16;
      swift_retain();
      char v15 = 0;
    }
    *((unsigned char *)v4 + v6) = v15;
    *(void *)(((unint64_t)v4 + v6 + 8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return v4;
}

_OWORD *initializeWithTake for LazyState(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_13;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_13:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  if (v6 == 1)
  {
    (*(void (**)(_OWORD *, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
    char v11 = 1;
  }
  else
  {
    char v11 = 0;
    *a1 = *(_OWORD *)a2;
  }
  *((unsigned char *)a1 + v5) = v11;
  *(void *)(((unint64_t)a1 + v5 + 8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyState(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  unint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (v3 <= 0x10) {
    unint64_t v3 = 16;
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0x7FFFFFFF) {
    goto LABEL_23;
  }
  unint64_t v4 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v5 = v4 & 0xFFFFFFF8;
  unsigned int v6 = a2 - 2147483645;
  if ((v4 & 0xFFFFFFF8) != 0) {
    unsigned int v6 = 2;
  }
  if (v6 >= 0x10000) {
    int v7 = 4;
  }
  else {
    int v7 = 2;
  }
  if (v6 < 0x100) {
    int v8 = 1;
  }
  else {
    int v8 = v7;
  }
  if (v8 == 4)
  {
    int v9 = *(_DWORD *)((char *)a1 + v4);
    if (v9) {
      goto LABEL_19;
    }
LABEL_23:
    unint64_t v12 = *(void *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFFFF8);
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    if ((v12 + 1) >= 2) {
      return v12;
    }
    else {
      return 0;
    }
  }
  if (v8 != 2)
  {
    int v9 = *((unsigned __int8 *)a1 + v4);
    if (v9) {
      goto LABEL_19;
    }
    goto LABEL_23;
  }
  int v9 = *(unsigned __int16 *)((char *)a1 + v4);
  if (!v9) {
    goto LABEL_23;
  }
LABEL_19:
  int v11 = v9 - 1;
  if (v5)
  {
    int v11 = 0;
    LODWORD(v5) = *a1;
  }
  return (v5 | v11) + 0x7FFFFFFF;
}

void storeEnumTagSinglePayload for LazyState(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0x7FFFFFFF)
  {
    int v9 = 0;
  }
  else
  {
    unsigned int v7 = a3 - 2147483645;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v7 = 2;
    }
    if (v7 >= 0x10000) {
      int v8 = 4;
    }
    else {
      int v8 = 2;
    }
    if (v7 < 0x100) {
      int v9 = 1;
    }
    else {
      int v9 = v8;
    }
  }
  if (a2 > 0x7FFFFFFE)
  {
    if ((v5 & 0xFFFFFFF8) == 0xFFFFFFF0) {
      int v10 = a2 - 2147483646;
    }
    else {
      int v10 = 1;
    }
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
    {
      unsigned int v11 = a2 - 0x7FFFFFFF;
      bzero(a1, v6);
      *(_DWORD *)a1 = v11;
    }
    switch(v9)
    {
      case 1:
        a1[v6] = v10;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v10;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x187C9CFF0);
      case 4:
        *(_DWORD *)&a1[v6] = v10;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v9)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_25;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_26;
      default:
LABEL_25:
        if (a2) {
LABEL_26:
        }
          *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) = a2;
        break;
    }
  }
}

void *initializeBufferWithCopyOfBuffer for LazyState.Storage(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  if (*(void *)(v4 + 64) <= 0x10uLL) {
    uint64_t v5 = 16;
  }
  else {
    uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  int v6 = *(_DWORD *)(v4 + 80);
  if ((v6 & 0x1000F8) != 0 || (unint64_t)(v5 + 1) > 0x18)
  {
    uint64_t v8 = *(void *)a2;
    void *v3 = *(void *)a2;
    unint64_t v3 = (void *)(v8 + ((unsigned __int16)((v6 & 0xF8) + 23) & (unsigned __int16)~(v6 & 0xF8) & 0x1F8));
LABEL_24:
    swift_retain();
    return v3;
  }
  unsigned int v9 = a2[v5];
  unsigned int v10 = v9 - 2;
  if (v9 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v11 = v5;
    }
    else {
      uint64_t v11 = 4;
    }
    switch(v11)
    {
      case 1:
        int v12 = *a2;
        goto LABEL_19;
      case 2:
        int v12 = *(unsigned __int16 *)a2;
        goto LABEL_19;
      case 3:
        int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_19;
      case 4:
        int v12 = *(_DWORD *)a2;
LABEL_19:
        int v13 = (v12 | (v10 << (8 * v5))) + 2;
        unsigned int v9 = v12 + 2;
        if (v5 < 4) {
          unsigned int v9 = v13;
        }
        break;
      default:
        break;
    }
  }
  if (v9 != 1)
  {
    uint64_t v14 = *((void *)a2 + 1);
    void *v3 = *(void *)a2;
    v3[1] = v14;
    *((unsigned char *)v3 + v5) = 0;
    goto LABEL_24;
  }
  (*(void (**)(void *))(v4 + 16))(a1);
  *((unsigned char *)v3 + v5) = 1;
  return v3;
}

_OWORD *initializeWithTake for LazyState.Storage(_OWORD *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) <= 0x10uLL) {
    uint64_t v4 = 16;
  }
  else {
    uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  }
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_13;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_13;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_13;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_13:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  if (v5 == 1)
  {
    (*(void (**)(_OWORD *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
    *a1 = *(_OWORD *)a2;
  }
  *((unsigned char *)a1 + v4) = v10;
  return a1;
}

uint64_t getEnumTagSinglePayload for LazyState.Storage(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v4 = 16;
  if (*(void *)(v3 + 64) > 0x10uLL) {
    uint64_t v4 = *(void *)(v3 + 64);
  }
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_22;
  }
  uint64_t v5 = v4 + 1;
  char v6 = 8 * (v4 + 1);
  if ((v4 + 1) <= 3)
  {
    unsigned int v9 = ((a2 + ~(-1 << v6) - 254) >> v6) + 1;
    if (HIWORD(v9))
    {
      int v7 = *(_DWORD *)((char *)a1 + v5);
      if (!v7) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 > 0xFF)
    {
      int v7 = *(unsigned __int16 *)((char *)a1 + v5);
      if (!*(unsigned __int16 *)((char *)a1 + v5)) {
        goto LABEL_22;
      }
      goto LABEL_14;
    }
    if (v9 < 2)
    {
LABEL_22:
      unsigned int v11 = *((unsigned __int8 *)a1 + v4);
      if (v11 >= 2) {
        return (v11 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v7 = *((unsigned __int8 *)a1 + v5);
  if (!*((unsigned char *)a1 + v5)) {
    goto LABEL_22;
  }
LABEL_14:
  int v10 = (v7 - 1) << v6;
  if (v5 > 3) {
    int v10 = 0;
  }
  if (v5)
  {
    if (v5 > 3) {
      LODWORD(v5) = 4;
    }
    switch((int)v5)
    {
      case 2:
        LODWORD(v5) = *a1;
        break;
      case 3:
        LODWORD(v5) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v5) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v5) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v5 | v10) + 255;
}

void storeEnumTagSinglePayload for LazyState.Storage(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  unint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  if (v5 <= 0x10) {
    unint64_t v5 = 16;
  }
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_34:
        __break(1u);
        JUMPOUT(0x187C9D63CLL);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_22;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_23;
      default:
LABEL_22:
        if (a2) {
LABEL_23:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

_UNKNOWN **associated type witness table accessor for DynamicPropertyBox.Property : DynamicProperty in LazyStatePropertyBox<A>()
{
  return &protocol witness table for LazyState<A>;
}

uint64_t static OnMoveTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t static IsMoveDisabledTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t static OnMoveClipBackgroundTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t DynamicViewContent.onMove(perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a1)
  {
    uint64_t v8 = swift_allocObject();
    *(void *)(v8 + 16) = a1;
    *(void *)(v8 + 24) = a2;
    int v9 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ();
  }
  else
  {
    int v9 = 0;
    uint64_t v8 = 0;
  }
  v12[0] = v9;
  v12[1] = v8;
  outlined copy of AppIntentExecutor?(a1);
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  MEMORY[0x18C113660](v12, a3, v10, *(void *)(a4 + 8));
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v9);
}

uint64_t sub_187C9D784()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t DynamicViewContent.onMove(clipBackground:perform:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int v25 = a1;
  uint64_t v26 = a6;
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  uint64_t v11 = v10;
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  char v15 = (char *)&v24 - v14;
  if (a2)
  {
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = a2;
    *(void *)(v16 + 24) = a3;
    uint64_t v17 = thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @unowned Int) -> ()partial apply;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v16 = 0;
  }
  v29[0] = v17;
  v29[1] = v16;
  outlined copy of AppIntentExecutor?(a2);
  uint64_t v18 = *(void *)(a5 + 8);
  MEMORY[0x18C113660](v29, a4, v11, v18);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v17);
  LOBYTE(v29[0]) = v25 & 1;
  type metadata accessor for _TraitWritingModifier<OnDeleteDefaultTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveClipBackgroundTraitKey>);
  uint64_t v20 = v19;
  uint64_t v21 = lazy protocol witness table accessor for type _TraitWritingModifier<OnDeleteDefaultTraitKey> and conformance _TraitWritingModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<OnMoveTraitKey> and conformance _TraitWritingModifier<A>, &lazy cache variable for type metadata for _TraitWritingModifier<OnMoveTraitKey>);
  uint64_t v27 = v18;
  uint64_t v28 = v21;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v29, v12, v20, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t View.moveDisabled(_:)()
{
  return View._trait<A>(_:_:)();
}

ValueMetadata *type metadata accessor for OnMoveTraitKey()
{
  return &type metadata for OnMoveTraitKey;
}

ValueMetadata *type metadata accessor for OnMoveClipBackgroundTraitKey()
{
  return &type metadata for OnMoveClipBackgroundTraitKey;
}

uint64_t sub_187C9DA48()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C9DAFC()
{
  return swift_getWitnessTable();
}

uint64_t sub_187C9DC34()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for OnMoveDefaultTraitKey()
{
  return &type metadata for OnMoveDefaultTraitKey;
}

Swift::Void __swiftcall MoveInteraction.move(to:)(Swift::Int to)
{
  uint64_t v3 = type metadata accessor for MoveInteraction();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3);
  size_t v6 = (char *)v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v9 = (char *)v19 - v8;
  uint64_t v10 = *v1;
  if (*v1)
  {
    size_t v6 = (char *)v1[1];
    swift_retain();
    Swift::Int_optional v20 = IndexSet.integerLessThan(_:)(to);
    if (v20.is_nil || (BOOL v11 = __OFADD__(to, 1), ++to, !v11))
    {
      outlined init with copy of MoveInteraction((uint64_t)v1, (uint64_t)v9);
      unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
      uint64_t v13 = swift_allocObject();
      *(void *)(v13 + 16) = v10;
      *(void *)(v13 + 24) = v6;
      outlined init with take of MoveInteraction((uint64_t)v9, v13 + v12);
      *(void *)(v13 + ((v5 + v12 + 7) & 0xFFFFFFFFFFFFFFF8)) = to;
      swift_retain();
      static Update.enqueueAction(_:)();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v10);
      swift_release();
      return;
    }
    __break(1u);
  }
  outlined init with copy of MoveInteraction((uint64_t)v1, (uint64_t)v6);
  v19[2] = 0;
  void v19[3] = 0xE000000000000000;
  _StringGuts.grow(_:)(62);
  v14._object = (void *)0x80000001883365B0;
  v14._countAndFlagsBits = 0xD000000000000014;
  String.append(_:)(v14);
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  v15._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 0x209286E220;
  v16._object = (void *)0xA500000000000000;
  String.append(_:)(v16);
  v19[1] = to;
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 0xD000000000000021;
  v18._object = (void *)0x80000001883365D0;
  String.append(_:)(v18);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

unint64_t MoveInteraction.description.getter()
{
  _StringGuts.grow(_:)(42);
  swift_bridgeObjectRelease();
  type metadata accessor for MoveInteraction();
  type metadata accessor for IndexSet();
  lazy protocol witness table accessor for type IndexSet and conformance IndexSet();
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 0x6E65746E6F63202CLL;
  v1._object = (void *)0xED0000203A444974;
  String.append(_:)(v1);
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
  String.append(_:)(v2);
  swift_bridgeObjectRelease();
  v3._countAndFlagsBits = 41;
  v3._object = (void *)0xE100000000000000;
  String.append(_:)(v3);
  return 0xD000000000000018;
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @in_guaranteed Int) -> (@out ())(uint64_t a1, uint64_t a2)
{
  return thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet, @in_guaranteed Int) -> (@out ())(a1, a2, *(uint64_t (**)(uint64_t, uint64_t *))(v2 + 16));
}

_OWORD *initializeBufferWithCopyOfBuffer for MoveInteraction(_OWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    if (*a2)
    {
      uint64_t v7 = a2[1];
      *(void *)uint64_t v4 = *a2;
      *((void *)v4 + 1) = v7;
      swift_retain();
    }
    else
    {
      *a1 = *(_OWORD *)a2;
    }
    *((unsigned char *)v4 + 16) = *((unsigned char *)a2 + 16);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (char *)v4 + v9;
    uint64_t v11 = (uint64_t)a2 + v9;
    uint64_t v12 = type metadata accessor for IndexSet();
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16))(v10, v11, v12);
    *(void *)((char *)v4 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  }
  return v4;
}

uint64_t initializeWithCopy for MoveInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
    swift_retain();
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithCopy for MoveInteraction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    if (v6)
    {
      uint64_t v8 = a2[1];
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v8;
      swift_retain();
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = a2[1];
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_retain();
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 24))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t initializeWithTake for MoveInteraction(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v6;
  }
  else
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v7 = *(int *)(a3 + 24);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32))(v8, v9, v10);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(void *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t assignWithTake for MoveInteraction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  if (!*(void *)a1)
  {
    if (v6)
    {
      uint64_t v8 = a2[1];
      *(void *)a1 = v6;
      *(void *)(a1 + 8) = v8;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }
  if (!v6)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v7 = a2[1];
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  swift_release();
LABEL_8:
  *(unsigned char *)(a1 + 16) = *((unsigned char *)a2 + 16);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = (uint64_t)a2 + v9;
  uint64_t v12 = type metadata accessor for IndexSet();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 40))(v10, v11, v12);
  *(void *)(a1 + *(int *)(a3 + 28)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_187C9E514(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    uint64_t v9 = type metadata accessor for IndexSet();
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

void *sub_187C9E5D0(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    uint64_t v7 = type metadata accessor for IndexSet();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t outlined init with copy of MoveInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MoveInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187C9E734()
{
  uint64_t v1 = type metadata accessor for MoveInteraction();
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  swift_release();
  if (*(void *)(v0 + v2)) {
    swift_release();
  }
  unint64_t v3 = v0 + v2 + *(int *)(v1 + 24);
  uint64_t v4 = type metadata accessor for IndexSet();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(v3, v4);

  return swift_deallocObject();
}

uint64_t outlined init with take of MoveInteraction(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for MoveInteraction();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for specialized closure #1 in MoveInteraction.move(to:)()
{
  uint64_t v1 = type metadata accessor for MoveInteraction();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  return (*(uint64_t (**)(unint64_t, void))(v0 + 16))(v0 + *(int *)(v1 + 24) + v3, *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8)));
}

uint64_t static Group.create(_:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return Group.init(_content:)();
}

uint64_t Group.mapKitContent.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t destroy for SwiftUIAnySortComparator(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  long long v5 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v5;
  (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1 + 32, a2 + 32);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v6 = *(void *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v7;
  *(void *)(a1 + 112) = v6;
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for SwiftUIAnySortComparator(uint64_t *a1, uint64_t *a2)
{
  __swift_assign_boxed_opaque_existential_0(a1, a2);
  __swift_assign_boxed_opaque_existential_1(a1 + 4, a2 + 4);
  uint64_t v4 = a2[10];
  a1[9] = a2[9];
  a1[10] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[12];
  a1[11] = a2[11];
  a1[12] = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = a2[14];
  a1[13] = a2[13];
  a1[14] = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_release();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for SwiftUIAnySortComparator(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 120)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SwiftUIAnySortComparator(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 120) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 120) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SwiftUIAnySortComparator()
{
  return &type metadata for SwiftUIAnySortComparator;
}

uint64_t SwiftUIAnySortComparator.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8 = *(void *)(a2 - 8);
  double v9 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a1, a2, v9);
  AnyHashable.init<A>(_:)();
  a4[3] = a2;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a4);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v8 + 32))(boxed_opaque_existential_1, a1, a2);
  uint64_t v12 = swift_allocObject();
  *(void *)(v12 + 16) = a2;
  *(void *)(v12 + 24) = a3;
  a4[9] = (uint64_t)partial apply for closure #1 in SwiftUIAnySortComparator.init<A>(_:);
  a4[10] = v12;
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = a2;
  *(void *)(v13 + 24) = a3;
  a4[11] = (uint64_t)partial apply for closure #2 in SwiftUIAnySortComparator.init<A>(_:);
  a4[12] = v13;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a2;
  *(void *)(result + 24) = a3;
  a4[13] = (uint64_t)partial apply for closure #3 in SwiftUIAnySortComparator.init<A>(_:);
  a4[14] = result;
  return result;
}

uint64_t closure #1 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v22 = a3;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v21 - v12;
  uint64_t v14 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](v15);
  Swift::String v17 = (char *)&v21 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of Any(a1, (uint64_t)v25);
  swift_dynamicCast();
  outlined init with copy of Any(a2, (uint64_t)v24);
  swift_dynamicCast();
  outlined init with copy of Any(v22, (uint64_t)v23);
  swift_dynamicCast();
  uint64_t v18 = dispatch thunk of SortComparator.compare(_:_:)();
  uint64_t v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, AssociatedTypeWitness);
  v19(v13, AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v17, a4);
  return v18;
}

uint64_t closure #2 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v15 - v9;
  outlined init with take of Any(v11, v15);
  swift_dynamicCast();
  dispatch thunk of SortComparator.order.setter();
  a1[3] = a3;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(a1);
  uint64_t v13 = *(void (**)(uint64_t *, char *, uint64_t))(v5 + 16);
  v13(boxed_opaque_existential_1, v10, a3);
  v13((uint64_t *)v7, v10, a3);
  AnyHashable.init<A>(_:)();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v10, a3);
}

uint64_t closure #3 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = &v9[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  outlined init with copy of Any(v6, (uint64_t)v9);
  swift_dynamicCast();
  uint64_t v7 = dispatch thunk of SortComparator.order.getter() & 1;
  (*(void (**)(unsigned char *, uint64_t))(v3 + 8))(v5, a2);
  return v7;
}

uint64_t protocol witness for SortComparator.compare(_:_:) in conformance SwiftUIAnySortComparator(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v2 + 72))(v2, a1, a2);
}

uint64_t protocol witness for SortComparator.order.getter in conformance SwiftUIAnySortComparator()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 104))(v0) & 1;
}

uint64_t protocol witness for SortComparator.order.setter in conformance SwiftUIAnySortComparator(char a1)
{
  void (*v4)(void *__return_ptr, uint64_t, uint64_t);
  void v6[5];

  uint64_t v2 = v1;
  uint64_t v3 = a1 & 1;
  uint64_t v4 = *(void (**)(void *__return_ptr, uint64_t, uint64_t))(v2 + 88);
  swift_retain();
  v4(v6, v2, v3);
  swift_release();
  return outlined assign with take of AnyHashable((uint64_t)v6, v2 + 32);
}

void (*protocol witness for SortComparator.order.modify in conformance SwiftUIAnySortComparator(void *a1))(uint64_t a1)
{
  uint64_t v3 = malloc(0x38uLL);
  *a1 = v3;
  v3[5] = v1;
  *((unsigned char *)v3 + 48) = (*(uint64_t (**)(uint64_t))(v1 + 104))(v1) & 1;
  return protocol witness for SortComparator.order.modify in conformance SwiftUIAnySortComparator;
}

void protocol witness for SortComparator.order.modify in conformance SwiftUIAnySortComparator(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)(*(void *)a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(*(void *)a1 + 48);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(v2 + 88);
  swift_retain();
  v4(v2, v3);
  swift_release();
  outlined assign with take of AnyHashable((uint64_t)v1, v2 + 32);

  free(v1);
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SwiftUIAnySortComparator()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for Hashable.hash(into:) in conformance SwiftUIAnySortComparator()
{
  return AnyHashable.hash(into:)();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SwiftUIAnySortComparator()
{
  return Hasher._finalize()();
}

void protocol witness for static Equatable.== infix(_:_:) in conformance SwiftUIAnySortComparator()
{
}

unint64_t lazy protocol witness table accessor for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator;
  if (!lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator;
  if (!lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUIAnySortComparator and conformance SwiftUIAnySortComparator);
  }
  return result;
}

uint64_t sub_187C9F6C8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return closure #1 in SwiftUIAnySortComparator.init<A>(_:)(a1, a2, a3, *(void *)(v3 + 16));
}

uint64_t sub_187C9F6E0()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t *a1, char a2)
{
  return closure #2 in SwiftUIAnySortComparator.init<A>(_:)(a1, a2 & 1, *(void *)(v2 + 16));
}

uint64_t sub_187C9F6FC()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in SwiftUIAnySortComparator.init<A>(_:)(uint64_t a1)
{
  return closure #3 in SwiftUIAnySortComparator.init<A>(_:)(a1, *(void *)(v1 + 16));
}

uint64_t View.scrollContentBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v20 = a6;
  uint64_t v19 = a5;
  uint64_t v10 = type metadata accessor for Optional();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v18 - v12;
  swift_getKeyPath();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v14 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v15 = (char *)swift_allocObject();
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = a3;
  uint64_t v16 = v19;
  *((void *)v15 + 4) = a4;
  *((void *)v15 + 5) = v16;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v15[v14], v13, v10);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  return swift_release();
}

uint64_t View.scrollContentBackground(_:)(char a1, uint64_t a2, uint64_t a3)
{
  char v4 = a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for ScrollContentBackgroundModifier, a3);
}

uint64_t EnvironmentValues.scrollContentBackground.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ScrollContentBackgroundKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<ScrollContentBackgroundKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t closure #1 in View.scrollContentBackground<A>(_:)(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10[2] = a3;
  void v10[3] = a4;
  void v10[4] = a5;
  v10[5] = a6;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for implicit closure #1 in closure #1 in View.scrollContentBackground<A>(_:), (uint64_t)v10, MEMORY[0x1E4FBC248], MEMORY[0x1E4F3F700], v7, (uint64_t)&v11);
  uint64_t v8 = v11;
  uint64_t result = swift_release();
  *a1 = v8;
  return result;
}

uint64_t sub_187C9FAC0()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(type metadata accessor for Optional() - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v4 + 48))(v0 + v3, 1, v1)) {
    (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v3, v1);
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.scrollContentBackground<A>(_:)(void *a1)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for Optional() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in View.scrollContentBackground<A>(_:)(a1, v8, v3, v4, v5, v6);
}

uint64_t sub_187C9FC88()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<ScrollContentBackground>);
    }
  }
}

uint64_t sub_187C9FD80()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for ScrollContentBackgroundModifier(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187C9FEB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollContentBackgroundModifier()
{
  return &type metadata for ScrollContentBackgroundModifier;
}

uint64_t assignWithCopy for ScrollContentBackground(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t assignWithTake for ScrollContentBackground(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollContentBackground(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 10)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollContentBackground(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_WORD *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 10) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 10) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2;
    }
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ScrollContentBackgroundModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t implicit closure #1 in closure #1 in View.scrollContentBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = AnyShapeStyle.init<A>(_:)();
  *a2 = result;
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance ScrollContentBackgroundModifier@<X0>(uint64_t *a1@<X8>)
{
  char v3 = *v1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t result = swift_allocObject();
  *(unsigned char *)(result + 16) = v3;
  *a1 = KeyPath;
  a1[1] = (uint64_t)partial apply for closure #1 in ScrollContentBackgroundModifier.body(content:);
  a1[2] = result;
  return result;
}

uint64_t sub_187CA019C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ScrollContentBackgroundModifier.body(content:)(uint64_t result)
{
  *(unsigned char *)(result + 8) = *(unsigned char *)(v1 + 16);
  return result;
}

uint64_t partial apply for implicit closure #1 in closure #1 in View.scrollContentBackground<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return implicit closure #1 in closure #1 in View.scrollContentBackground<A>(_:)(a1, a2);
}

ValueMetadata *type metadata accessor for ScrollContentBackgroundKey()
{
  return &type metadata for ScrollContentBackgroundKey;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>();
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<ScrollContentBackgroundModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<ScrollContentBackgroundModifier>);
    lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<ScrollContentBackground> and conformance _EnvironmentKeyTransformModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>)
  {
    type metadata accessor for _ViewModifier_Content<ScrollContentBackgroundModifier>();
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<ScrollContentBackgroundModifier>, _EnvironmentKeyTransformModifier<ScrollContentBackground>>);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<ScrollContentBackgroundModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<ScrollContentBackgroundModifier>)
  {
    lazy protocol witness table accessor for type ScrollContentBackgroundModifier and conformance ScrollContentBackgroundModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<ScrollContentBackgroundModifier>);
    }
  }
}

uint64_t dispatch thunk of WidgetBundle.init()(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of WidgetBundle.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t WidgetBundleBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for WidgetBundleBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t closure #1 in WidgetBundleBodyAccessor.updateBody(of:changed:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v7 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v9 = (char *)&v12 - v8;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 32))(a2, a3, v7);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
}

uint64_t type metadata accessor for WidgetBundleBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance WidgetBundleBodyAccessor<A>(uint64_t result, char a2)
{
  return WidgetBundleBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t partial apply for closure #1 in WidgetBundleBodyAccessor.updateBody(of:changed:)()
{
  return closure #1 in WidgetBundleBodyAccessor.updateBody(of:changed:)(v0[4], v0[2], v0[3]);
}

uint64_t getEnumTagSinglePayload for PlatformViewControllerRepresentableAdaptor(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PlatformViewControllerRepresentableAdaptor(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187CA095CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t PlatformViewControllerRepresentableAdaptor.resetViewProvider(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)(a5 + 24) + 48))(a1, a2, a3, a4, *(void *)(a5 + 16));
}

uint64_t static PlatformViewControllerRepresentableAdaptor.dismantleViewProvider(_:coordinator:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t PlatformViewControllerRepresentableAdaptor._identifiedViewTree(in:)(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a2 + 24) + 80))(a1, *(void *)(a2 + 16));
}

uint64_t protocol witness for PlatformViewRepresentable.resetViewProvider(_:coordinator:destroy:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return PlatformViewControllerRepresentableAdaptor.resetViewProvider(_:coordinator:destroy:)(*a1, a2, a3, a4, a5);
}

uint64_t protocol witness for static PlatformViewRepresentable.dismantleViewProvider(_:coordinator:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return static PlatformViewControllerRepresentableAdaptor.dismantleViewProvider(_:coordinator:)(*a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for PlatformViewRepresentable._identifiedViewTree(in:) in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t *a1, uint64_t a2)
{
  return PlatformViewControllerRepresentableAdaptor._identifiedViewTree(in:)(*a1, a2);
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in PlatterButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for ButtonStyle.makeBody(configuration:) in conformance PlatterButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  int v4 = *v2;
  char v5 = *a1;
  char v6 = a1[1];
  char v7 = a1[2];
  if (v4 == 1) {
    uint64_t v8 = static Color.white.getter();
  }
  else {
    uint64_t v8 = static Color.primary.getter();
  }
  uint64_t v9 = v8;
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a2 = v5;
  *(unsigned char *)(a2 + 1) = v6;
  *(unsigned char *)(a2 + 2) = v7;
  *(unsigned char *)(a2 + 3) = v4;
  *(void *)(a2 + 8) = v9;
  *(void *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 24) = 257;
  *(void *)(a2 + 32) = result;
  *(_WORD *)(a2 + 40) = 0;
  return result;
}

uint64_t BackgroundShapeStyle._apply(to:)(uint64_t a1, char a2)
{
  if (a2) {
    return TintShapeStyle._apply(to:)();
  }
  id v3 = objc_allocWithZone(MEMORY[0x1E4FB1618]);
  v6[4] = closure #1 in static Color.clarityUIButtonBackground.getter;
  uint64_t v6[5] = 0;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 1107296256;
  long long v6[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
  v6[3] = &block_descriptor_39;
  int v4 = _Block_copy(v6);
  id v5 = objc_msgSend(v3, sel_initWithDynamicProvider_, v4);
  _Block_release(v4);
  swift_release();
  v6[0] = v5;
  type metadata accessor for UIColor();
  lazy protocol witness table accessor for type PlatterButtonStyleView<BackgroundShapeStyle> and conformance PlatterButtonStyleView<A>((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor, (void (*)(uint64_t))type metadata accessor for UIColor);
  Color.init<A>(provider:)();
  Color.opacity(_:)();
  swift_release();
  Color._apply(to:)();
  return swift_release();
}

uint64_t protocol witness for ShapeStyle._apply(to:) in conformance BackgroundShapeStyle(uint64_t a1)
{
  return BackgroundShapeStyle._apply(to:)(a1, *v1);
}

unsigned char *storeEnumTagSinglePayload for PlatterButtonStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187CA0CF0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

void *type metadata accessor for BackgroundShapeStyle()
{
  return &unk_1ED42FA80;
}

uint64_t sub_187CA0D28()
{
  return lazy protocol witness table accessor for type PlatterButtonStyleView<BackgroundShapeStyle> and conformance PlatterButtonStyleView<A>(&lazy protocol witness table cache variable for type PlatterButtonStyleView<BackgroundShapeStyle> and conformance PlatterButtonStyleView<A>, (void (*)(uint64_t))type metadata accessor for PlatterButtonStyleView<BackgroundShapeStyle>);
}

void type metadata accessor for PlatterButtonStyleView<BackgroundShapeStyle>()
{
  if (!lazy cache variable for type metadata for PlatterButtonStyleView<BackgroundShapeStyle>)
  {
    unint64_t v0 = type metadata accessor for PlatterButtonStyleView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatterButtonStyleView<BackgroundShapeStyle>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type PlatterButtonStyleView<BackgroundShapeStyle> and conformance PlatterButtonStyleView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DefaultPickerStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<HostingConfigurationContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ListMenuPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<HostingConfigurationContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<HostingConfigurationContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<ListMenuPickerStyle>);
    lazy protocol witness table accessor for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList()
{
  unint64_t result = lazy protocol witness table cache variable for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList;
  if (!lazy protocol witness table cache variable for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseMenuPickerStyleInList and conformance UseMenuPickerStyleInList);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedListStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<NavigationLinkPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<GroupedFormStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<GroupedFormStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<InlinePickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<MenuPickerStyle>);
    lazy protocol witness table accessor for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar()
{
  unint64_t result = lazy protocol witness table cache variable for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar;
  if (!lazy protocol witness table cache variable for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UseMenuPickerStyleInToolbar and conformance UseMenuPickerStyleInToolbar);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<MenuPickerStyle>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
    }
  }
}

uint64_t type metadata accessor for DefaultPickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DefaultPickerStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t DefaultPickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance DefaultPickerStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedPicker();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<HostingConfigurationContext>, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInList, PickerStyleWriter<ListMenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<InsetGroupedListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<GroupedFormStyleContext>, PickerStyleWriter<NavigationLinkPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<InlinePickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<UseMenuPickerStyleInToolbar, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v3, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<WheelPickerStyle>);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  int v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance DefaultPickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return DefaultPickerStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for DefaultPickerStyle()
{
  return &type metadata for DefaultPickerStyle;
}

void *type metadata accessor for UseMenuPickerStyleInToolbar()
{
  return &unk_1ED451130;
}

ValueMetadata *type metadata accessor for UseMenuPickerStyleInList()
{
  return &type metadata for UseMenuPickerStyleInList;
}

uint64_t base witness table accessor for _AttributeBody in DefaultPickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseMenuPickerStyleInList()
{
  if ((static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0
    || (static StyleContextAcceptsPredicate.evaluate(inputs:)() & 1) != 0)
  {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance UseMenuPickerStyleInToolbar()
{
  if (static StyleContextAcceptsPredicate.evaluate(inputs:)()) {
    return static SemanticFeature.isEnabled.getter() & 1;
  }
  else {
    return 0;
  }
}

uint64_t DismissImmersiveSpaceAction.callAsFunction()()
{
  type metadata accessor for MainActor();
  static MainActor.shared.getter();
  uint64_t v1 = dispatch thunk of Actor.unownedExecutor.getter();
  return MEMORY[0x1F4188298](OpenWindowAction.callAsFunction<A>(value:sharingBehavior:), v1, v0);
}

void EnvironmentValues.dismissImmersiveSpace.getter()
{
}

void sub_187CA23A0()
{
}

void sub_187CA23C8()
{
}

ValueMetadata *type metadata accessor for DismissImmersiveSpaceAction()
{
  return &type metadata for DismissImmersiveSpaceAction;
}

uint64_t PresentationSizing.proposedSize(for:context:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  long long v16 = *a2;
  uint64_t v7 = *((void *)a2 + 2);
  uint64_t v8 = *((void *)a2 + 3);
  char v9 = *((unsigned char *)a2 + 32);
  uint64_t v10 = *((void *)a2 + 5);
  char v11 = *((unsigned char *)a2 + 48);
  uint64_t v12 = *((void *)a2 + 7);
  char v15 = *((unsigned char *)a2 + 64);
  MEMORY[0x18C119DF0]();
  uint64_t v28 = *(void *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  long long v18 = v16;
  uint64_t v19 = v7;
  uint64_t v20 = v8;
  char v21 = v9;
  uint64_t v22 = v10;
  char v23 = v11;
  uint64_t v24 = v12;
  char v25 = v15;
  long long v26 = *(long long *)((char *)a2 + 72);
  uint64_t v13 = (*(uint64_t (**)(unsigned char *, long long *, uint64_t, uint64_t))(a4 + 16))(v27, &v18, a3, a4);
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v27);
  return v13;
}

{
  return PresentationSizing.proposedSize(for:context:)(a1, a2, a3, a4);
}

uint64_t PresentationSizing.proposedSize(for:context:)()
{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

{
  static Log.internalWarning(_:)();
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

void PresentationSizing.sizingOptions(context:)(void *a1@<X8>)
{
}

{
  *a1 = 0;
}

unint64_t implicit closure #1 in PresentationSizing.proposedSize(for:context:)()
{
  return 0xD000000000000077;
}

uint64_t AutomaticPresentationSizing.proposedSize(for:context:)()
{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

void static PresentationSizingOptions.minimum.getter(void *a1@<X8>)
{
  *a1 = 2;
}

double PresentationSubview.sizeThatFits(_:)()
{
  if (!MEMORY[0x18C119DF0](v0)) {
    return 0.0;
  }
  swift_getObjectType();
  _ProposedSize.init(_:)();
  ViewRendererHost.sizeThatFits(_:)();
  double v2 = v1;
  swift_unknownObjectRelease();
  return v2;
}

double PresentationSizingRoot.sizeThatFits(_:)(uint64_t a1, char a2)
{
  if (MEMORY[0x18C119DF0](v2))
  {
    swift_getObjectType();
    _ProposedSize.init(_:)();
    ViewRendererHost.sizeThatFits(_:)();
    double v6 = v5;
    swift_unknownObjectRelease();
  }
  else if (a2)
  {
    return 10.0;
  }
  else
  {
    return *(double *)&a1;
  }
  return v6;
}

uint64_t PresentationSizing.sticky(horizontal:vertical:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  v8.n128_f64[0] = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (v11) {
    char v12 = 2;
  }
  else {
    char v12 = 0;
  }
  char v13 = v12 | v7;
  (*(void (**)(char *, uint64_t, __n128))(v6 + 16))(v10, v3, v8);
  (*(void (**)(uint64_t, char *, uint64_t))(v6 + 32))(a3, v10, a2);
  uint64_t result = type metadata accessor for StickyPresentationSizing();
  *(unsigned char *)(a3 + *(int *)(result + 36)) = v13;
  return result;
}

uint64_t PresentationSizing.fitted(horizontal:vertical:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char v7 = a1;
  uint64_t v9 = *(void *)(a3 - 8);
  double v10 = MEMORY[0x1F4188790](a1);
  char v12 = (char *)&v14 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, double))(v9 + 16))(v12, v4, v10);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(a4, v12, a3);
  uint64_t result = type metadata accessor for _FittedPresentationSizing();
  *(unsigned char *)(a4 + *(int *)(result + 36)) = v7;
  *(unsigned char *)(a4 + *(int *)(result + 40)) = a2;
  return result;
}

uint64_t FormPresentationSizing.proposedSize(for:context:)()
{
  return FormPresentationSizing.proposedSize(for:context:)();
}

{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

uint64_t SharedBuiltinSheetMetrics.proposedSize.getter()
{
  uint64_t v1 = *(void *)(v0 + 16);
  double v2 = *(double *)(v0 + 48);
  int v3 = *(unsigned __int8 *)(v0 + 56);
  double v4 = *(double *)(v0 + 64);
  int v5 = *(unsigned __int8 *)(v0 + 72);
  if (*(unsigned char *)v0)
  {
    if (*(unsigned char *)v0 != 1)
    {
      *(double *)&uint64_t result = COERCE_DOUBLE(static ProposedViewSize.unspecified.getter());
      return result;
    }
    _UISheetPageSize();
  }
  else
  {
    id v7 = objc_msgSend(*(id *)(v0 + 8), sel_window);
    if (!v7 || (__n128 v8 = v7, v9 = objc_msgSend(v7, sel_screen), v8, !v9)) {
      id v9 = objc_msgSend(self, sel_mainScreen);
    }
    double v10 = self;
    objc_msgSend(v9, sel_bounds);
    double v12 = v11;
    double v14 = v13;

    objc_msgSend(v10, sel_defaultFormSheetSizeForScreenSize_, v12, v14);
  }
  double v15 = 0.0;
  double v16 = v2;
  double v17 = 240.0;
  if (v3) {
    double v18 = 240.0;
  }
  else {
    double v18 = v2;
  }
  if (!v5) {
    double v17 = v4;
  }
  double v19 = v18 + v17;
  if (v3) {
    double v16 = 240.0;
  }
  if (v1 == 2) {
    double v15 = v16;
  }
  if (v1 == 3) {
    double v15 = v19;
  }
  *(double *)&uint64_t result = v6 + v15;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing(uint64_t a1)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing(a1);
}

{
  uint64_t v2;
  unsigned char v4[8];
  uint64_t v5;

  MEMORY[0x18C119DF0]();
  int v5 = *(void *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  double v2 = SharedBuiltinSheetMetrics.proposedSize.getter();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing()
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing();
}

{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

uint64_t PagePresentationSizing.proposedSize(for:context:)()
{
  return FormPresentationSizing.proposedSize(for:context:)();
}

uint64_t PagePresentationSizing.sizingOptions(context:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyInterfaceIdiom.accepts<A>(_:)();
  uint64_t v3 = 2;
  if (result) {
    uint64_t v3 = 4;
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance PagePresentationSizing(uint64_t a1)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing(a1);
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance PagePresentationSizing()
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FormPresentationSizing();
}

uint64_t protocol witness for PresentationSizing.sizingOptions(context:) in conformance PagePresentationSizing@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyInterfaceIdiom.accepts<A>(_:)();
  uint64_t v3 = 2;
  if (result) {
    uint64_t v3 = 4;
  }
  *a1 = v3;
  return result;
}

uint64_t FittedPresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance FittedPresentationSizing(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  int v4 = *(unsigned __int8 *)(a2 + 32);
  MEMORY[0x18C119DF0]();
  uint64_t v8 = *(void *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  if (v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v3;
  }
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v7);
  return v5;
}

{
  uint64_t v2;

  uint64_t v2 = *(void *)(a2 + 16);
  if (*(unsigned __int8 *)(a2 + 32)) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t _FittedPresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a2[3];
  char v6 = *((unsigned char *)a2 + 32);
  uint64_t v7 = a2[5];
  char v8 = *((unsigned char *)a2 + 48);
  uint64_t v9 = a2[7];
  char v10 = *((unsigned char *)a2 + 64);
  uint64_t v12 = *a2;
  long long v13 = *(_OWORD *)(a2 + 1);
  uint64_t v14 = v5;
  char v15 = v6;
  uint64_t v16 = v7;
  char v17 = v8;
  uint64_t v18 = v9;
  char v19 = v10;
  long long v20 = *(_OWORD *)(a2 + 9);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t *, void))(*(void *)(a3 + 24) + 16))(a1, &v12, *(void *)(a3 + 16));
  if (*(unsigned char *)(v3 + *(int *)(a3 + 36))) {
    return 0;
  }
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(a1, a2, a3, a4, (uint64_t (*)(void))_FittedPresentationSizing.proposedSize(for:context:));
}

uint64_t protocol witness for PresentationSizing.sizingOptions(context:) in conformance _FittedPresentationSizing<A>(uint64_t *a1, uint64_t a2)
{
  return _FittedPresentationSizing.sizingOptions(context:)(a1, a2);
}

uint64_t View.presentationSizing<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = *(void *)(a3 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v9 + 16))((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), v11);
  unint64_t v12 = (*(unsigned __int8 *)(v9 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  long long v13 = (char *)swift_allocObject();
  *((void *)v13 + 2) = a2;
  *((void *)v13 + 3) = a3;
  *((void *)v13 + 4) = a4;
  *((void *)v13 + 5) = a5;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v13[v12], (char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0), a3);
  View.transformPreference<A>(_:_:)();
  return swift_release();
}

uint64_t closure #1 in View.presentationSizing<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _OWORD v11[3] = a4;
  v11[4] = a6;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v11);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(boxed_opaque_existential_1, a2, a4);
  return outlined assign with take of PresentationSizing?((uint64_t)v11, a1 + 96);
}

uint64_t sub_187CA33D4()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 24) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 24) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in View.presentationSizing<A>(_:)(uint64_t a1)
{
  return closure #1 in View.presentationSizing<A>(_:)(a1, (uint64_t)v1+ ((*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1[3] - 8) + 80)), v1[2], v1[3], v1[4], v1[5]);
}

uint64_t StickyPresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a2 + 8);
  double v5 = *(double *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  char v6 = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 40);
  char v8 = *(unsigned char *)(a2 + 48);
  uint64_t v9 = *(void *)(a2 + 56);
  char v10 = *(unsigned char *)(a2 + 64);
  v18[0] = *(void *)a2;
  v18[1] = v3;
  *(double *)&uint64_t v18[2] = v5;
  unsigned char v18[3] = v4;
  char v19 = v6;
  uint64_t v20 = v7;
  char v21 = v8;
  uint64_t v22 = v9;
  char v23 = v10;
  long long v24 = *(_OWORD *)(a2 + 72);
  uint64_t v11 = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)(a3 + 24) + 16))(a1, v18, *(void *)(a3 + 16));
  uint64_t v13 = v11;
  if ((v6 & 1) == 0)
  {
    LOBYTE(v18[0]) = v12 & 1;
    double v14 = PresentationSizingRoot.sizeThatFits(_:)(v11, v12 & 1);
    char v15 = Axis.Set.contains(_:)();
    if (v14 < v5) {
      double v16 = v5;
    }
    else {
      double v16 = v14;
    }
    if (v15) {
      uint64_t v13 = *(void *)&v16;
    }
    Axis.Set.contains(_:)();
  }
  return v13;
}

uint64_t _FittedPresentationSizing.sizingOptions(context:)(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = a1[3];
  char v3 = *((unsigned char *)a1 + 32);
  uint64_t v4 = a1[5];
  char v5 = *((unsigned char *)a1 + 48);
  uint64_t v6 = a1[7];
  char v7 = *((unsigned char *)a1 + 64);
  uint64_t v9 = *a1;
  long long v10 = *(_OWORD *)(a1 + 1);
  uint64_t v11 = v2;
  char v12 = v3;
  uint64_t v13 = v4;
  char v14 = v5;
  uint64_t v15 = v6;
  char v16 = v7;
  long long v17 = *(_OWORD *)(a1 + 9);
  return (*(uint64_t (**)(uint64_t *, void))(*(void *)(a2 + 24) + 24))(&v9, *(void *)(a2 + 16));
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance StickyPresentationSizing<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(a1, a2, a3, a4, (uint64_t (*)(void))StickyPresentationSizing.proposedSize(for:context:));
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance _FittedPresentationSizing<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  return a5();
}

uint64_t FormPresentationSizing.sizingOptions(context:)@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AnyInterfaceIdiom.accepts<A>(_:)();
  if (result)
  {
    uint64_t v3 = 4;
  }
  else
  {
    uint64_t result = AnyInterfaceIdiom.accepts<A>(_:)();
    uint64_t v3 = 2;
    if (result) {
      uint64_t v3 = 4;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance AutomaticPresentationSizing(uint64_t a1)
{
  MEMORY[0x18C119DF0]();
  uint64_t v5 = *(void *)(a1 + 8);
  swift_unknownObjectWeakInit();
  swift_unknownObjectRelease();
  uint64_t v2 = SharedBuiltinSheetMetrics.proposedSize.getter();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)v4);
  return v2;
}

uint64_t protocol witness for PresentationSizing.proposedSize(for:context:) in conformance AutomaticPresentationSizing()
{
  return SharedBuiltinSheetMetrics.proposedSize.getter();
}

uint64_t View.presentationSizeBehavior<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

uint64_t FormPresentationSizeBehavior.proposedSize(for:)()
{
  return 0x4082C00000000000;
}

uint64_t protocol witness for PresentationSizeBehavior.proposedSize(for:) in conformance FormPresentationSizeBehavior()
{
  return 0x4082C00000000000;
}

uint64_t dispatch thunk of PresentationSizing.proposedSize(for:context:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

{
  return (*(uint64_t (**)(void))(a4 + 16))();
}

uint64_t dispatch thunk of PresentationSizing.sizingOptions(context:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 24))();
}

ValueMetadata *type metadata accessor for PresentationSizingOptions()
{
  return &type metadata for PresentationSizingOptions;
}

ValueMetadata *type metadata accessor for PresentationSubview()
{
  return &type metadata for PresentationSubview;
}

ValueMetadata *type metadata accessor for PresentationSizingRoot()
{
  return &type metadata for PresentationSizingRoot;
}

uint64_t initializeWithCopy for PresentationSizingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  id v5 = v3;
  return a1;
}

uint64_t assignWithCopy for PresentationSizingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  uint64_t v8 = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 40) = v8;
  uint64_t v9 = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 56) = v9;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for PresentationSizingContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = *(void *)a2;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  return a1;
}

ValueMetadata *type metadata accessor for PresentationSizingContext()
{
  return &type metadata for PresentationSizingContext;
}

ValueMetadata *type metadata accessor for FittedPresentationSizing()
{
  return &type metadata for FittedPresentationSizing;
}

ValueMetadata *type metadata accessor for AutomaticPresentationSizing()
{
  return &type metadata for AutomaticPresentationSizing;
}

uint64_t dispatch thunk of PresentationSizeBehavior.proposedSize(for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))();
}

uint64_t initializeWithCopy for PresentationSizeBehaviorContext(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  id v5 = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PresentationSizeBehaviorContext(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)a2;
  id v5 = *(void **)a1;
  *(void *)a1 = *(void *)a2;
  id v6 = v4;

  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = v7;
  return a1;
}

uint64_t assignWithTake for PresentationSizeBehaviorContext(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for PresentationSizeBehaviorContext()
{
  return &type metadata for PresentationSizeBehaviorContext;
}

ValueMetadata *type metadata accessor for FormPresentationSizeBehavior()
{
  return &type metadata for FormPresentationSizeBehavior;
}

_UNKNOWN **sub_187CA3D90()
{
  return &protocol witness table for StickyPresentationSizing<A>;
}

_UNKNOWN **sub_187CA3D9C()
{
  return &protocol witness table for _FittedPresentationSizing<A>;
}

uint64_t sub_187CA3DA8()
{
  return swift_getWitnessTable();
}

uint64_t sub_187CA3E18(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t type metadata completion function for _FittedPresentationSizing()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for _FittedPresentationSizing(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(_DWORD *)(v5 + 80);
  if (v7 <= 7 && (unint64_t)(v6 + 2) <= 0x18 && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(void *, void *))(v5 + 16))(a1, a2);
    uint64_t v11 = (char *)v4 + v6;
    unsigned char *v11 = *((unsigned char *)a2 + v6);
    v11[1] = *((unsigned char *)a2 + v6 + 1);
  }
  else
  {
    uint64_t v10 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v10 + ((v7 + 16) & ~v7));
    swift_retain();
  }
  return v4;
}

uint64_t initializeWithCopy for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithCopy for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t initializeWithTake for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t assignWithTake for _FittedPresentationSizing(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24);
  uint64_t v7 = (unsigned char *)(v6 + a1);
  uint64_t v8 = (unsigned char *)(v6 + a2);
  *uint64_t v7 = *v8;
  v7[1] = v8[1];
  return a1;
}

uint64_t getEnumTagSinglePayload for _FittedPresentationSizing(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_22;
  }
  uint64_t v9 = v6 + 2;
  char v10 = 8 * (v6 + 2);
  if ((v6 + 2) > 3) {
    goto LABEL_7;
  }
  unsigned int v12 = ((v8 + ~(-1 << v10)) >> v10) + 1;
  if (HIWORD(v12))
  {
    int v11 = *(_DWORD *)((char *)a1 + v9);
    if (v11) {
      goto LABEL_14;
    }
  }
  else
  {
    if (v12 <= 0xFF)
    {
      if (v12 < 2) {
        goto LABEL_22;
      }
LABEL_7:
      int v11 = *((unsigned __int8 *)a1 + v9);
      if (!*((unsigned char *)a1 + v9)) {
        goto LABEL_22;
      }
LABEL_14:
      int v13 = (v11 - 1) << v10;
      if (v9 > 3) {
        int v13 = 0;
      }
      if (v9)
      {
        if (v9 > 3) {
          LODWORD(v9) = 4;
        }
        switch((int)v9)
        {
          case 2:
            LODWORD(v9) = *a1;
            break;
          case 3:
            LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
            break;
          case 4:
            LODWORD(v9) = *(_DWORD *)a1;
            break;
          default:
            LODWORD(v9) = *(unsigned __int8 *)a1;
            break;
        }
      }
      return v7 + (v9 | v13) + 1;
    }
    int v11 = *(unsigned __int16 *)((char *)a1 + v9);
    if (*(unsigned __int16 *)((char *)a1 + v9)) {
      goto LABEL_14;
    }
  }
LABEL_22:
  if (v5 >= 0xFE) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + v6);
  if (v15 < 2) {
    return 0;
  }
  return ((v15 + 2147483646) & 0x7FFFFFFF) + 1;
}

void storeEnumTagSinglePayload for _FittedPresentationSizing(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = v9 + 2;
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v9 != -2)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v9 + 2);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187CA4550);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 < 0xFE)
        {
          a1[v9] = a2 + 1;
        }
        else
        {
          uint64_t v18 = *(void (**)(void))(v6 + 56);
          v18();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for _FittedPresentationSizing()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for StickyPresentationSizing()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for StickyPresentationSizing(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = v6 + 1;
  char v9 = 8 * (v6 + 1);
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for StickyPresentationSizing(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64) + 1;
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (*(_DWORD *)(v6 + 64) != -1)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187CA49A8);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for StickyPresentationSizing()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for PresentationSizingOptions.Options()
{
  return &unk_1ED448178;
}

unint64_t lazy protocol witness table accessor for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options()
{
  unint64_t result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options;
  if (!lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PresentationSizingOptions.Options and conformance PresentationSizingOptions.Options);
  }
  return result;
}

void *specialized SheetSizing.sheetSizeThatFits<A>(host:subview:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v1, v3);
  uint64_t v6 = *(void *)(v1 + 48);
  uint64_t v7 = *(void *)(v1 + 56);
  uint64_t v8 = *(void *)(v1 + 64);
  char v21 = *(unsigned char *)(v1 + 72);
  uint64_t v20 = *(void *)(v1 + 80);
  char v19 = *(unsigned char *)(v1 + 88);
  uint64_t v18 = *(void *)(v1 + 96);
  char v17 = *(unsigned char *)(v1 + 104);
  uint64_t v15 = *(void *)(v1 + 120);
  uint64_t v16 = *(void *)(v1 + 112);
  uint64_t v23 = *(void *)(v1 + 40);
  uint64_t v5 = v23;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v8;
  char v27 = v21;
  uint64_t v28 = v20;
  char v29 = v19;
  uint64_t v30 = v18;
  char v31 = v17;
  uint64_t v32 = v16;
  uint64_t v33 = v15;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(v4 + 16))(a1, &v23, v3, v4);
  LOBYTE(v23) = v10 & 1;
  LOBYTE(v22) = v11 & 1;
  PresentationSizingRoot.sizeThatFits(_:)(v9, v10 & 1);
  uint64_t v12 = *(void *)(v1 + 24);
  uint64_t v13 = *(void *)(v1 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v1, v12);
  uint64_t v23 = v5;
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  uint64_t v26 = v8;
  char v27 = v21;
  uint64_t v28 = v20;
  char v29 = v19;
  uint64_t v30 = v18;
  char v31 = v17;
  uint64_t v32 = v16;
  uint64_t v33 = v15;
  return (*(void *(**)(uint64_t *__return_ptr, uint64_t *, uint64_t, uint64_t))(v13 + 24))(&v22, &v23, v12, v13);
}

uint64_t outlined assign with take of PresentationSizing?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for PresentationSizing?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

unint64_t type metadata accessor for PresentationSizing()
{
  unint64_t result = lazy cache variable for type metadata for PresentationSizing;
  if (!lazy cache variable for type metadata for PresentationSizing)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for PresentationSizing);
  }
  return result;
}

void destroy for SheetSizing(uint64_t a1)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  uint64_t v2 = *(void **)(a1 + 40);
}

uint64_t initializeWithCopy for SheetSizing(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void **)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = v5;
  *(void *)(a1 + 48) = v6;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  id v7 = v5;
  return a1;
}

uint64_t assignWithCopy for SheetSizing(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  long long v4 = *(void **)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  long long v7 = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v7;
  uint64_t v8 = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 80) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(void *)(a1 + 96) = v9;
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

uint64_t assignWithTake for SheetSizing(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  id v6 = *(void **)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;

  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  return a1;
}

ValueMetadata *type metadata accessor for SheetSizing()
{
  return &type metadata for SheetSizing;
}

void EnvironmentValues.withCurrentWindow.getter()
{
}

void sub_187CA500C()
{
}

void sub_187CA5034()
{
}

ValueMetadata *type metadata accessor for WithCurrentWindowAction()
{
  return &type metadata for WithCurrentWindowAction;
}

uint64_t type metadata accessor for ControlWidgetTemplateGraph()
{
  uint64_t result = type metadata singleton initialization cache for ControlWidgetTemplateGraph;
  if (!type metadata singleton initialization cache for ControlWidgetTemplateGraph) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for ControlWidgetTemplateGraph()
{
  return swift_initClassMetadata2();
}

uint64_t closure #1 in ControlWidgetTemplateGraph.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  char v10 = &v22[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0) - 12];
  uint64_t v12 = *v11;
  int v13 = *((_DWORD *)v11 + 2);
  uint64_t v14 = v11[2];
  int v15 = *((_DWORD *)v11 + 14);
  (*(void (**)(char *, double))(v7 + 16))(v10, v8);
  uint64_t v24 = a3;
  uint64_t v16 = type metadata accessor for Attribute();
  long long v21 = *(_OWORD *)(a1 + 40);
  uint64_t v17 = *(void *)(a1 + 24);
  uint64_t v18 = *(void *)(a1 + 32);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v10, (uint64_t)closure #1 in Attribute.init(value:)partial apply, (uint64_t)v23, a3, MEMORY[0x1E4FBC248], v16, MEMORY[0x1E4FBC278], v19);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, a3);
  _GraphValue.init(_:)();
  uint64_t v25 = v12;
  int v26 = v13;
  uint64_t v27 = v14;
  uint64_t v28 = v17;
  uint64_t v29 = v18;
  long long v30 = v21;
  int v31 = v15;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 40))(v22, &v25, a3, a4);
}

Swift::Void __swiftcall ControlWidgetTemplateGraph.instantiateOutputs()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)GraphHost.rootSubgraph.getter();
  AGGraphClearUpdate();
  id v3 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in ControlWidgetTemplateGraph.instantiateOutputs()(v1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  long long v4 = (void (*)(uint64_t *, void))GraphHost.hostPreferenceValues.modify();
  *uint64_t v5 = AGCreateWeakAttribute();
  v4(&v6, 0);
}

uint64_t closure #1 in ControlWidgetTemplateGraph.instantiateOutputs()(uint64_t a1)
{
  swift_beginAccess();
  uint64_t v2 = *(void *)(a1 + 72);
  int v3 = *(_DWORD *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  unsigned int v5 = *(_DWORD *)(a1 + 96);
  unsigned int v6 = *(_DWORD *)(a1 + 100);
  unsigned int v8 = *(_DWORD *)(a1 + 104);
  unsigned int v7 = *(_DWORD *)(a1 + 108);
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v20 = *(void *)(a1 + 16);
  long long v21 = *(_OWORD *)(a1 + 24);
  int v25 = HIDWORD(v2);
  int v26 = v3;
  uint64_t v27 = v4;
  unsigned int v28 = v5;
  unsigned int v29 = v6;
  unsigned int v30 = v8;
  unsigned int v31 = v7;
  uint64_t v32 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  GraphHost.Data.$hostPreferenceKeys.getter();
  PreferencesInputs.init(hostKeys:)();
  uint64_t v10 = v20;
  int v11 = v21;
  uint64_t v20 = v2;
  LODWORD(v21) = v3;
  *((void *)&v21 + 1) = v4;
  *(void *)&long long v22 = __PAIR64__(v6, v5);
  *((void *)&v22 + 1) = __PAIR64__(v7, v8);
  *(void *)&long long v23 = v9;
  *((void *)&v23 + 1) = v10;
  int v24 = v11;
  PreferenceKeys.add(_:)();
  uint64_t v12 = *(void (**)(uint64_t *))(a1 + 176);
  uint64_t v14 = v2;
  int v15 = v3;
  uint64_t v16 = v4;
  long long v17 = v22;
  long long v18 = v23;
  int v19 = v24;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v12(&v14);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return swift_release();
}

Swift::Void __swiftcall ControlWidgetTemplateGraph.uninstantiateOutputs()()
{
  uint64_t v0 = (void (*)(uint64_t *, void))GraphHost.hostPreferenceValues.modify();
  *uint64_t v1 = AGCreateWeakAttribute();
  v0(&v2, 0);
}

void ControlWidgetTemplateGraph.__allocating_init(data:)()
{
}

uint64_t ControlWidgetTemplateGraph.__ivar_destroyer()
{
  return swift_release();
}

uint64_t ControlWidgetTemplateGraph.__deallocating_deinit()
{
  GraphHost.deinit();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t ObjC metadata update function for ControlWidgetTemplateGraph()
{
  return type metadata accessor for ControlWidgetTemplateGraph();
}

uint64_t specialized ControlWidgetTemplateGraph.init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a1;
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v46 = *(void (**)(char *, double))(v6 + 16);
  uint64_t v48 = v6 + 16;
  long long v45 = v9;
  v46(v9, v8);
  uint64_t v49 = v6;
  unint64_t v10 = (*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v11 + v10, v9, a2);
  uint64_t v50 = v3;
  *(void *)(v3 + 176) = partial apply for closure #1 in ControlWidgetTemplateGraph.init<A>(_:);
  *(void *)(v3 + 184) = v11;
  swift_retain();
  GraphHost.Data.init()();
  uint64_t v12 = v62;
  unsigned int v55 = v60;
  unsigned int v56 = v61;
  uint64_t v36 = v62;
  LOBYTE(v11) = v63;
  int v44 = v63;
  int v35 = v64;
  LODWORD(v10) = v65;
  LODWORD(v6) = v66;
  int v43 = v65;
  int v42 = v66;
  int v13 = v67;
  int v41 = v67;
  LODWORD(a3) = v69;
  int v34 = v68;
  int v40 = v69;
  LODWORD(v9) = v70;
  int v14 = v71;
  int v39 = v70;
  int v38 = v71;
  uint64_t v54 = v72;
  int v32 = v73;
  uint64_t v53 = v74;
  int v15 = v75;
  int v37 = v75;
  int v33 = v76;
  HIDWORD(v31) = v77;
  int v57 = v78;
  uint64_t v52 = v79;
  id v51 = (id)AGSubgraphGetCurrent();
  int v60 = v55;
  uint64_t v61 = v56;
  int v62 = v12;
  unsigned __int8 v63 = v11;
  LOBYTE(v11) = v35;
  unsigned __int8 v64 = v35;
  int v65 = v10;
  int v66 = v6;
  int v67 = v13;
  int v16 = v34;
  int v68 = v34;
  int v69 = a3;
  int v70 = (int)v9;
  int v71 = v14;
  uint64_t v72 = v54;
  LODWORD(v10) = v32;
  int v73 = v32;
  uint64_t v74 = v53;
  int v17 = v33;
  int v75 = v15;
  int v76 = v33;
  LODWORD(v6) = HIDWORD(v31);
  int v77 = HIDWORD(v31);
  int v78 = v57;
  uint64_t v79 = v52;
  long long v18 = (void *)GraphHost.Data.globalSubgraph.getter();
  AGSubgraphSetCurrent();

  uint64_t v19 = (uint64_t)v45;
  ((void (*)(char *, uint64_t, uint64_t))v46)(v45, v47, a2);
  uint64_t v59 = a2;
  uint64_t v20 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v19, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v58, a2, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v19, a2);
  *(_DWORD *)(v50 + 192) = v60;
  swift_release();
  long long v23 = v55;
  long long v22 = v56;
  int v60 = v55;
  uint64_t v61 = v56;
  int v24 = v36;
  int v62 = v36;
  unsigned __int8 v63 = v44;
  unsigned __int8 v64 = v11;
  int v65 = v43;
  int v66 = v42;
  int v67 = v41;
  int v68 = v16;
  int v69 = v40;
  int v70 = v39;
  int v71 = v38;
  uint64_t v72 = v54;
  int v73 = v10;
  uint64_t v74 = v53;
  int v75 = v37;
  int v76 = v17;
  int v77 = v6;
  int v78 = v57;
  uint64_t v79 = v52;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v25 = v23;
  id v26 = v22;
  id v27 = v24;
  uint64_t v28 = GraphHost.init(data:)();
  unsigned int v29 = v51;
  AGSubgraphSetCurrent();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return v28;
}

uint64_t specialized ControlWidgetTemplateGraph.__allocating_init<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return specialized ControlWidgetTemplateGraph.init<A>(_:)(a1, a2, a3);
}

uint64_t sub_187CA5BF0()
{
  (*(void (**)(unint64_t))(*(void *)(*(void *)(v0 + 16) - 8) + 8))(v0+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v0 + 16) - 8) + 80)));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in ControlWidgetTemplateGraph.init<A>(_:)(uint64_t a1)
{
  return closure #1 in ControlWidgetTemplateGraph.init<A>(_:)(a1, v1+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v1 + 16) - 8) + 80)), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void View.clarityUIIdiom()()
{
}

uint64_t sub_187CA5CCC()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ClarityUIInterfaceIdiomModifier()
{
  return &type metadata for ClarityUIInterfaceIdiomModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in ClarityUIInterfaceIdiomModifier()
{
  return &protocol witness table for ClarityUIInterfaceIdiomModifier;
}

uint64_t static ClarityUIInterfaceIdiomModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, long long *))
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v3 = *((_DWORD *)a2 + 2);
  uint64_t v4 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v5 = *((_DWORD *)a2 + 7);
  unsigned int v7 = *((_DWORD *)a2 + 8);
  unsigned int v8 = *((_DWORD *)a2 + 9);
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  unsigned int v18 = *((_DWORD *)a2 + 15);
  unsigned int v19 = *((_DWORD *)a2 + 14);
  unsigned int v16 = *((_DWORD *)a2 + 17);
  unsigned int v17 = *((_DWORD *)a2 + 16);
  unsigned int v14 = *((_DWORD *)a2 + 19);
  unsigned int v15 = *((_DWORD *)a2 + 18);
  int v13 = *((_DWORD *)a2 + 20);
  uint64_t v30 = *a2;
  int v31 = v3;
  uint64_t v32 = v4;
  *(void *)&long long v33 = __PAIR64__(v5, v6);
  *((void *)&v33 + 1) = __PAIR64__(v8, v7);
  uint64_t v34 = v9;
  uint64_t v35 = v10;
  *(void *)&long long v36 = __PAIR64__(v18, v19);
  *((void *)&v36 + 1) = __PAIR64__(v16, v17);
  unint64_t v37 = __PAIR64__(v14, v15);
  int v38 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  AnyInterfaceIdiom.init<A>(_:)();
  long long v29 = v21;
  PropertyList.subscript.setter();
  _ViewInputs.environment.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type ClarityUIEnvironment and conformance ClarityUIEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.environment.setter();
  *(void *)&long long v21 = v30;
  DWORD2(v21) = v3;
  uint64_t v22 = v4;
  long long v23 = v33;
  uint64_t v24 = v9;
  uint64_t v25 = v10;
  long long v26 = v36;
  unint64_t v27 = __PAIR64__(v14, v15);
  int v28 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v11 = swift_bridgeObjectRetain();
  a3(v11, &v21);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

void protocol witness for ViewModifier.body(content:) in conformance ClarityUIInterfaceIdiomModifier()
{
}

double ClarityUIEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *(void *)&long long v12 = v4;
  *((void *)&v12 + 1) = v3;
  v9[0] = v4;
  v9[1] = v3;
  swift_retain();
  swift_retain();
  EnvironmentValues.dynamicTypeSize.getter();
  if (v8[0] <= 6u)
  {
    LOBYTE(v9[0]) = 7;
    EnvironmentValues.dynamicTypeSize.setter();
  }
  if (one-time initialization token for dividerThickness != -1) {
    swift_once();
  }
  EnvironmentValues.dividerThickness.setter();
  uint64_t v5 = *((void *)&v12 + 1);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  if (*((void *)&v12 + 1))
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v10 = 2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v9, (uint64_t)v8);
  type metadata accessor for EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ScrollEnvironmentPropertiesKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v9);
  uint64_t v6 = *((void *)&v12 + 1);
  if (*((void *)&v12 + 1))
  {
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  char v11 = 2;
  outlined init with copy of ScrollEnvironmentProperties((uint64_t)v9, (uint64_t)v8);
  swift_retain();
  PropertyList.subscript.setter();
  if (v6)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ScrollEnvironmentProperties((uint64_t)v9);
  double result = *(double *)&v12;
  *a1 = v12;
  return result;
}

double protocol witness for Rule.value.getter in conformance ClarityUIEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return ClarityUIEnvironment.value.getter(a1);
}

unint64_t lazy protocol witness table accessor for type ClarityUIEnvironment and conformance ClarityUIEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type ClarityUIEnvironment and conformance ClarityUIEnvironment;
  if (!lazy protocol witness table cache variable for type ClarityUIEnvironment and conformance ClarityUIEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ClarityUIEnvironment and conformance ClarityUIEnvironment);
  }
  return result;
}

void *type metadata accessor for ClarityUIEnvironment()
{
  return &unk_1ED4303D8;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance AlwaysOnTimelinesKey(uint64_t a1, void (*a2)(unint64_t *__return_ptr))
{
  a2(&v3);
  return specialized Array.append<A>(contentsOf:)(v3);
}

uint64_t EnvironmentValues.alwaysOnInvalidationHandler.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.alwaysOnInvalidationHandler.setter(uint64_t a1)
{
  outlined init with copy of TimelineInvalidationAction(a1, (uint64_t)v4);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<AlwaysOnInvalidationKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<AlwaysOnInvalidationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  return outlined destroy of weak AnyGestureResponder?(a1);
}

Swift::Void __swiftcall AnyAlwaysOnBridge.invalidate(for:)(Swift::String a1)
{
}

void AlwaysOnBridge.timelineRegistrations.didset(uint64_t *a1)
{
  uint64_t i = a1;
  unint64_t v20 = *(void *)(v1 + 48);
  if ((unint64_t)a1 >> 62)
  {
LABEL_41:
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    uint64_t v3 = _CocoaArrayWrapper.endIndex.getter();
  }
  else
  {
    uint64_t v3 = *(void *)(((unint64_t)a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
  }
  unsigned int v17 = i;
  uint64_t v4 = v20 & 0xFFFFFFFFFFFFFF8;
  if (v20 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v19 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = *(void *)((v20 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v5 = 0;
  unint64_t v6 = 0;
  for (uint64_t i = &OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule;
        ;
        uint64_t i = &OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule)
  {
    if (v6 == v3)
    {
      char v11 = 0;
      long long v12 = 0;
      unint64_t v6 = v3;
      if (v19 == v5) {
        goto LABEL_32;
      }
      goto LABEL_17;
    }
    if (((unint64_t)v17 & 0xC000000000000001) != 0)
    {
      int v13 = (char *)MEMORY[0x18C117680](v6, v17);
    }
    else
    {
      if ((v6 & 0x8000000000000000) != 0) {
        goto LABEL_38;
      }
      if (v6 >= *(void *)(((unint64_t)v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_39;
      }
      int v13 = (char *)(id)v17[v6 + 4];
    }
    char v11 = v13;
    if (__OFADD__(v6++, 1)) {
      goto LABEL_40;
    }
    if (v19 == v5) {
      break;
    }
LABEL_17:
    if ((v20 & 0xC000000000000001) != 0)
    {
      unsigned int v15 = (char *)MEMORY[0x18C117680](v5, v20);
    }
    else
    {
      if (v5 >= *(void *)(v4 + 16))
      {
        __break(1u);
LABEL_37:
        __break(1u);
LABEL_38:
        __break(1u);
LABEL_39:
        __break(1u);
LABEL_40:
        __break(1u);
        goto LABEL_41;
      }
      unsigned int v15 = (char *)*(id *)(v20 + 8 * v5 + 32);
    }
    long long v12 = v15;
    if (__OFADD__(v5, 1)) {
      goto LABEL_37;
    }
    if (!v11) {
      goto LABEL_32;
    }
    if (!v15) {
      goto LABEL_30;
    }
    outlined init with copy of TableColumnList((uint64_t)&v11[OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule], (uint64_t)v23);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Equatable);
    if (swift_dynamicCast())
    {
      outlined init with take of OptionalBinaryInteger(v21, (uint64_t)v24);
      uint64_t v7 = v25;
      unsigned int v18 = __swift_project_boxed_opaque_existential_1(v24, v25);
      uint64_t v8 = *(void *)&v12[OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule + 24];
      uint64_t v9 = __swift_project_boxed_opaque_existential_1(&v12[OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule], v8);
      v23[3] = v8;
      boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v23);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v8 - 8) + 16))(boxed_opaque_existential_1, v9, v8);
      uint64_t v4 = v20 & 0xFFFFFFFFFFFFFF8;
      LOBYTE(v9) = areEqual #1 <A>(_:_:) in static DateSequenceTimeline.== infix(_:_:)((uint64_t)v18, (uint64_t)v23, v7);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);

      if ((v9 & 1) == 0) {
        goto LABEL_28;
      }
    }
    else
    {
      uint64_t v22 = 0;
      memset(v21, 0, sizeof(v21));
      outlined destroy of LocationBasedSensoryFeedback?((uint64_t)v21, &lazy cache variable for type metadata for Equatable?, (unint64_t *)&lazy cache variable for type metadata for Equatable);

      if (v12 != v11)
      {
LABEL_28:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
        goto LABEL_34;
      }
    }
    ++v5;
  }
  if (v13)
  {
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();

    goto LABEL_34;
  }
  long long v12 = 0;
LABEL_32:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  if (!v12) {
    return;
  }

LABEL_34:
  v16._object = (void *)0x80000001883368A0;
  v16._countAndFlagsBits = 0xD00000000000001FLL;
  AlwaysOnBridge.invalidate(for:)(v16);
}

void AlwaysOnBridge.update(with:)(void *a1)
{
  uint64_t v2 = v1;
  *(unsigned char *)(v1 + 41) = 1;
  uint64_t v3 = *(void **)(v1 + 32);
  *(void *)(v2 + 32) = a1;
  id v4 = a1;

  uint64_t v5 = MEMORY[0x18C119DF0](v2 + 16);
  if (!v5)
  {
    __break(1u);
    goto LABEL_6;
  }
  unint64_t v6 = (void *)v5;
  id v7 = (id)specialized UIHostingController.host.getter();

  specialized _UIHostingView.viewGraph.getter();
  swift_retain();

  Transaction.disablesAnimations.setter();
  Transaction.disablesContentTransitions.setter();
  swift_retain();
  GraphHost.emptyTransaction(_:)();
  swift_release();
  uint64_t v8 = MEMORY[0x18C119DF0](v2 + 16);
  if (!v8)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v9 = (void *)v8;
  id v10 = (id)specialized UIHostingController.host.getter();

  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();

  uint64_t v11 = MEMORY[0x18C119DF0](v2 + 16);
  if (v11)
  {
    long long v12 = (void *)v11;
    id v13 = (id)specialized UIHostingController.host.getter();

    objc_msgSend(v13, sel_layoutIfNeeded);
    swift_release();
    swift_release();

    *(unsigned char *)(v2 + 41) = 0;
    return;
  }
LABEL_7:
  __break(1u);
}

uint64_t AlwaysOnBridge.timelines(for:)()
{
  unint64_t v1 = *(void *)(v0 + 48);
  if (v1 >> 62)
  {
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for BLSAlwaysOnTimeline);
    swift_bridgeObjectRetain();
    uint64_t v2 = _bridgeCocoaArray<A>(_:)();
  }
  else
  {
    swift_bridgeObjectRetain_n();
    dispatch thunk of __ContiguousArrayStorageBase.staticElementType.getter();
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for BLSAlwaysOnTimeline);
    uint64_t v2 = v1;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t AlwaysOnBridge.configureTransaction(_:)()
{
  ++*(void *)(v0 + 24);
  swift_retain();
  Transaction.addAnimationListener(allFinished:)();

  return swift_release();
}

uint64_t closure #1 in AlwaysOnBridge.configureTransaction(_:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)aBlock - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for DispatchQoS();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)aBlock - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  id v10 = (void *)static OS_dispatch_queue.main.getter();
  aBlock[4] = partial apply for closure #1 in closure #1 in AlwaysOnBridge.configureTransaction(_:);
  aBlock[5] = a1;
  aBlock[0] = MEMORY[0x1E4F143A8];
  aBlock[1] = 1107296256;
  aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
  aBlock[3] = &block_descriptor_40;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  aBlock[0] = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags();
  type metadata accessor for [DispatchWorkItemFlags](0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags], MEMORY[0x1E4FBCB00]);
  lazy protocol witness table accessor for type [DispatchWorkItemFlags] and conformance [A]();
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18C116870](0, v9, v5, v11);
  _Block_release(v11);

  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t AlwaysOnBridge.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

ValueMetadata *type metadata accessor for AlwaysOnTimelinesKey()
{
  return &type metadata for AlwaysOnTimelinesKey;
}

uint64_t implicit closure #1 in static SwiftUITextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)(void (*a1)(void))
{
  id v4 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for TimelineIdentifier()), sel_init);
  a1();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for [DispatchWorkItemFlags](0, &lazy cache variable for type metadata for [DateSequenceTimeline], (void (*)(uint64_t))type metadata accessor for DateSequenceTimeline);
  lazy protocol witness table accessor for type AlwaysOnTimelinePreferenceWriter and conformance AlwaysOnTimelinePreferenceWriter();
  uint64_t v2 = Attribute.init<A>(body:value:flags:update:)();

  return v2;
}

uint64_t AlwaysOnTimelinePreferenceWriter.value.getter(uint64_t a1)
{
  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TimelineSchedule?(Value, (uint64_t)&v10);
  if (v11)
  {
    outlined init with take of OptionalBinaryInteger(&v10, (uint64_t)v12);
    outlined init with copy of TableColumnList((uint64_t)v12, (uint64_t)&v10);
    uint64_t v3 = (objc_class *)type metadata accessor for DateSequenceTimeline();
    id v4 = objc_allocWithZone(v3);
    outlined init with copy of TableColumnList((uint64_t)&v10, (uint64_t)v4 + OBJC_IVAR____TtC7SwiftUI20DateSequenceTimeline_schedule);
    v9.receiver = v4;
    v9.super_class = v3;
    id v5 = objc_msgSendSuper2(&v9, sel_initWithIdentifier_configure_, a1, 0);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v10);
    type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
    uint64_t v6 = swift_allocObject();
    *(_OWORD *)(v6 + 16) = xmmword_188351940;
    *(void *)(v6 + 32) = v5;
    *(void *)&long long v10 = v6;
    specialized Array._endMutation()();
    uint64_t v7 = v10;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  }
  else
  {
    outlined destroy of LocationBasedSensoryFeedback?((uint64_t)&v10, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
    return MEMORY[0x1E4FBC860];
  }
  return v7;
}

uint64_t protocol witness for Rule.value.getter in conformance AlwaysOnTimelinePreferenceWriter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = AlwaysOnTimelinePreferenceWriter.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t partial apply for closure #1 in AlwaysOnBridge.configureTransaction(_:)()
{
  return closure #1 in AlwaysOnBridge.configureTransaction(_:)(v0);
}

void partial apply for closure #1 in closure #1 in AlwaysOnBridge.configureTransaction(_:)()
{
  --*(void *)(v0 + 24);
}

unint64_t lazy protocol witness table accessor for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags()
{
  unint64_t result = lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags;
  if (!lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags)
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags);
  }
  return result;
}

ValueMetadata *type metadata accessor for AlwaysOnFrameSpecifier()
{
  return &type metadata for AlwaysOnFrameSpecifier;
}

ValueMetadata *type metadata accessor for AlwaysOnInvalidationKey()
{
  return &type metadata for AlwaysOnInvalidationKey;
}

ValueMetadata *type metadata accessor for SwiftUITextAlwaysOnProvider()
{
  return &type metadata for SwiftUITextAlwaysOnProvider;
}

uint64_t partial apply for implicit closure #1 in static SwiftUITextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)()
{
  return implicit closure #1 in static SwiftUITextAlwaysOnProvider.makeAlwaysOn(inputs:schedule:outputs:)(*(void (**)(void))(v0 + 16));
}

void type metadata accessor for [DispatchWorkItemFlags](uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Array();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t outlined init with copy of TimelineSchedule?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for IntelligenceAppIntentsPayloadProviding?(0, &lazy cache variable for type metadata for TimelineSchedule?, (unint64_t *)&lazy cache variable for type metadata for TimelineSchedule);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

ValueMetadata *type metadata accessor for AlwaysOnTimelinePreferenceWriter()
{
  return &type metadata for AlwaysOnTimelinePreferenceWriter;
}

uint64_t TableRowContent.modifier<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  objc_super v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v15 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v3, a2, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  return ModifiedContent.init(content:modifier:)();
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance OnDeleteTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8 = MEMORY[0x1E4FBC248];
  static DynamicPropertyCache.fields(of:)();
  long long v9 = v41;
  char v10 = v42;
  int v11 = DWORD1(v42);
  long long v12 = *(_OWORD *)(a2 + 112);
  long long v37 = *(_OWORD *)(a2 + 96);
  long long v38 = v12;
  long long v39 = *(_OWORD *)(a2 + 128);
  uint64_t v40 = *(void *)(a2 + 144);
  long long v13 = *(_OWORD *)(a2 + 48);
  long long v33 = *(_OWORD *)(a2 + 32);
  long long v34 = v13;
  long long v14 = *(_OWORD *)(a2 + 80);
  long long v35 = *(_OWORD *)(a2 + 64);
  long long v36 = v14;
  long long v15 = *(_OWORD *)(a2 + 16);
  long long v31 = *(_OWORD *)a2;
  long long v32 = v15;
  int v30 = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<Never>, v8, (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TableRowContentModifierBodyAccessor);
  lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>();
  BodyAccessor.makeBody(container:inputs:fields:)();
  int v16 = v28;
  uint64_t v18 = *((void *)&v25 + 1);
  uint64_t v17 = v25;
  char v19 = v26;
  long long v47 = v37;
  long long v48 = v38;
  long long v49 = v39;
  uint64_t v50 = v40;
  long long v43 = v33;
  long long v44 = v34;
  long long v45 = v35;
  long long v46 = v36;
  long long v41 = v31;
  long long v42 = v32;
  outlined retain of _TableRowInputs((uint64_t)&v41);
  specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)(&v25, v28, &v41, a3, a4);
  outlined release of _TableRowInputs((uint64_t)&v41);
  uint64_t v20 = v25;
  int v21 = DWORD2(v25);
  if ((v19 & 1) == 0)
  {
    uint64_t v28 = v17;
    uint64_t v29 = v18;
    int v30 = v16;
    long long v25 = v9;
    char v26 = v10;
    int v27 = v11;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v41);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a5 = v20;
  *(_DWORD *)(a5 + 8) = v21;
  return result;
}

uint64_t static _TableRowContentModifier._makeRows(modifier:inputs:body:)@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  void (*v16)(uint64_t *__return_ptr, int *, long long *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  int v18;
  uint64_t result;
  uint64_t v20;
  int v21;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t v36;
  int v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  uint64_t v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  uint64_t v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  long long v62;
  long long v63;
  long long v64;
  long long v65;
  long long v66;
  uint64_t v67;

  long long v5 = a1[7];
  uint64_t v54 = a1[6];
  unsigned int v55 = v5;
  unsigned int v56 = a1[8];
  int v57 = *((void *)a1 + 18);
  long long v6 = a1[3];
  uint64_t v50 = a1[2];
  id v51 = v6;
  long long v7 = a1[5];
  uint64_t v52 = a1[4];
  uint64_t v53 = v7;
  long long v8 = a1[1];
  long long v48 = *a1;
  long long v49 = v8;
  static DynamicPropertyCache.fields(of:)();
  uint64_t v9 = *((void *)&v58 + 1);
  char v10 = v59;
  long long v44 = v54;
  long long v45 = v55;
  long long v46 = v56;
  long long v47 = v57;
  uint64_t v40 = v50;
  long long v41 = v51;
  long long v42 = v52;
  long long v43 = v53;
  long long v38 = v48;
  long long v39 = v49;
  long long v23 = v58;
  int v21 = DWORD1(v59);
  outlined retain of _TableRowInputs((uint64_t)&v48);
  type metadata accessor for TableRowContentModifierBodyAccessor();
  swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)();
  int v11 = v25;
  uint64_t v12 = *((void *)&v27 + 1);
  uint64_t v20 = v27;
  char v13 = v28;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned __int8 v64 = v44;
  int v65 = v45;
  int v66 = v46;
  int v60 = v40;
  uint64_t v61 = v41;
  int v62 = v42;
  unsigned __int8 v63 = v43;
  uint64_t v58 = v38;
  uint64_t v59 = v39;
  long long v33 = v44;
  long long v34 = v45;
  long long v35 = v46;
  uint64_t v29 = v40;
  int v30 = v41;
  long long v31 = v42;
  long long v32 = v43;
  int v67 = v47;
  long long v37 = v25;
  long long v36 = v47;
  int v27 = v38;
  uint64_t v28 = v39;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  int v16 = *(void (**)(uint64_t *__return_ptr, int *, long long *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 32);
  outlined retain of _TableRowInputs((uint64_t)&v58);
  v16(&v25, &v37, &v27, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
  outlined release of _TableRowInputs((uint64_t)&v58);
  uint64_t v17 = v25;
  uint64_t v18 = v26;
  if ((v13 & 1) == 0)
  {
    long long v25 = v20;
    char v26 = v12;
    long long v37 = v11;
    *(void *)&int v27 = v23;
    *((void *)&v27 + 1) = v9;
    LOBYTE(v28) = v10;
    DWORD1(v28) = v21;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _TableRowInputs((uint64_t)&v58);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a4 = v17;
  *(_DWORD *)(a4 + 8) = v18;
  return result;
}

uint64_t static _TableRowContentModifier._tableRowCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = *(_OWORD *)(a1 + 112);
  void v12[6] = *(_OWORD *)(a1 + 96);
  uint64_t v12[7] = v5;
  v12[8] = *(_OWORD *)(a1 + 128);
  uint64_t v13 = *(void *)(a1 + 144);
  long long v6 = *(_OWORD *)(a1 + 48);
  void v12[2] = *(_OWORD *)(a1 + 32);
  _OWORD v12[3] = v6;
  long long v7 = *(_OWORD *)(a1 + 80);
  void v12[4] = *(_OWORD *)(a1 + 64);
  uint64_t v12[5] = v7;
  long long v8 = *(_OWORD *)(a1 + 16);
  v12[0] = *(_OWORD *)a1;
  v12[1] = v8;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(_OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v12, a2, a3, AssociatedTypeWitness, AssociatedConformanceWitness);
}

{
  return static _TableRowContentModifier._tableRowCount(inputs:body:)(a1, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance DeleteDisabledTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance ItemProviderTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance OnInsertTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance DropOntoTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _TypeSelectEquivalentTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _HoverTableRowModifier@<X0>(uint64_t a1@<X1>, void (*a2)(uint64_t, _OWORD *)@<X2>, uint64_t a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)((uint64_t)v8, a2, a3);
}

uint64_t protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance OnDeleteTableRowModifier(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  long long v2 = *(_OWORD *)(a1 + 112);
  v7[6] = *(_OWORD *)(a1 + 96);
  v7[7] = v2;
  unsigned char v7[8] = *(_OWORD *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 144);
  long long v3 = *(_OWORD *)(a1 + 48);
  uint64_t v7[2] = *(_OWORD *)(a1 + 32);
  _OWORD v7[3] = v3;
  long long v4 = *(_OWORD *)(a1 + 80);
  void v7[4] = *(_OWORD *)(a1 + 64);
  unsigned char v7[5] = v4;
  long long v5 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v5;
  return a2(v7);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _ContextMenuTableRowModifier<A>@<X0>(long long *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static _TableRowContentModifier._makeRows(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t type metadata accessor for TableRowContentModifierBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TableRowContentModifierBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for TableRowContentModifierBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance TableRowContentModifierBodyAccessor<A>(uint64_t result, char a2)
{
  return TableRowContentModifierBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance Never@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  long long v6 = *(_OWORD *)(a2 + 112);
  v11[6] = *(_OWORD *)(a2 + 96);
  v11[7] = v6;
  unsigned char v11[8] = *(_OWORD *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 48);
  uint64_t v11[2] = *(_OWORD *)(a2 + 32);
  _OWORD v11[3] = v7;
  long long v8 = *(_OWORD *)(a2 + 80);
  v11[4] = *(_OWORD *)(a2 + 64);
  uint64_t v11[5] = v8;
  long long v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  return specialized static _TableRowContentModifier._makeRows(modifier:inputs:body:)(v5, (uint64_t)v11, a3, a4, a5);
}

uint64_t protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance Never(uint64_t a1)
{
  long long v1 = *(_OWORD *)(a1 + 112);
  void v6[6] = *(_OWORD *)(a1 + 96);
  v6[7] = v1;
  v6[8] = *(_OWORD *)(a1 + 128);
  uint64_t v7 = *(void *)(a1 + 144);
  long long v2 = *(_OWORD *)(a1 + 48);
  long long v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v2;
  long long v3 = *(_OWORD *)(a1 + 80);
  v6[4] = *(_OWORD *)(a1 + 64);
  uint64_t v6[5] = v3;
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance Never(v6);
}

uint64_t static ModifiedContent<>._makeRows(content:inputs:)(int *a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  int v10 = *a1;
  long long v11 = a2[7];
  long long v26 = a2[6];
  long long v27 = v11;
  long long v28 = a2[8];
  uint64_t v29 = *((void *)a2 + 18);
  long long v12 = a2[3];
  long long v22 = a2[2];
  long long v23 = v12;
  long long v13 = a2[5];
  long long v24 = a2[4];
  long long v25 = v13;
  long long v14 = a2[1];
  long long v20 = *a2;
  long long v21 = v14;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v17[6] = v26;
  v17[7] = v27;
  v17[8] = v28;
  uint64_t v18 = v29;
  v17[2] = v22;
  unint64_t v17[3] = v23;
  _OWORD v17[4] = v24;
  v17[5] = v25;
  v17[0] = v20;
  v17[1] = v21;
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a3;
  *(void *)(v15 + 24) = a4;
  *(void *)(v15 + 32) = a5;
  *(void *)(v15 + 40) = a6;
  *(_DWORD *)(v15 + 48) = v10;
  (*(void (**)(unsigned char *, _OWORD *, uint64_t (*)(uint64_t, long long *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v19, v17, partial apply for closure #2 in static ModifiedContent<>._makeRows(content:inputs:), v15, a4, a6);
  return swift_release();
}

uint64_t closure #1 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v6 = a1 + *(int *)(v5 + 36);
  uint64_t v10[2] = v5;
  void v10[3] = a3;
  uint64_t v7 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v6, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v10, a3, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  return v10[5];
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1)
{
  return closure #1 in static ModifiedContent<>._makeRows(content:inputs:)(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  long long v8 = a2[7];
  long long v22 = a2[6];
  long long v23 = v8;
  long long v24 = a2[8];
  uint64_t v25 = *((void *)a2 + 18);
  long long v9 = a2[3];
  long long v18 = a2[2];
  long long v19 = v9;
  long long v10 = a2[5];
  long long v20 = a2[4];
  long long v21 = v10;
  long long v11 = a2[1];
  long long v16 = *a2;
  long long v17 = v11;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  _OWORD v13[6] = v22;
  v13[7] = v23;
  unsigned char v13[8] = v24;
  uint64_t v14 = v25;
  v13[2] = v18;
  uint64_t v13[3] = v19;
  void v13[4] = v20;
  uint64_t v13[5] = v21;
  v13[0] = v16;
  v13[1] = v17;
  return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t))(a6 + 48))(v15, v13, a4, a6);
}

uint64_t sub_187CA8FE8()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, long long *a2)
{
  return closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(a1, a2, *(unsigned int *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t closure #1 in closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v7[2] = type metadata accessor for ModifiedContent();
  _OWORD v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t static ModifiedContent<>._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v9 = *(_OWORD *)(a1 + 112);
  v16[6] = *(_OWORD *)(a1 + 96);
  v16[7] = v9;
  char v16[8] = *(_OWORD *)(a1 + 128);
  uint64_t v17 = *(void *)(a1 + 144);
  long long v10 = *(_OWORD *)(a1 + 48);
  _OWORD v16[2] = *(_OWORD *)(a1 + 32);
  v16[3] = v10;
  long long v11 = *(_OWORD *)(a1 + 80);
  v16[4] = *(_OWORD *)(a1 + 64);
  v16[5] = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  v16[0] = *(_OWORD *)a1;
  v16[1] = v12;
  long long v13 = (void *)swift_allocObject();
  v13[2] = a2;
  uint64_t v13[3] = a3;
  void v13[4] = a4;
  uint64_t v13[5] = a5;
  uint64_t v14 = (*(uint64_t (**)(_OWORD *, uint64_t (*)(uint64_t), void *, uint64_t, uint64_t))(a5 + 40))(v16, partial apply for closure #1 in static ModifiedContent<>._tableRowCount(inputs:), v13, a3, a5);
  swift_release();
  return v14;
}

uint64_t sub_187CA9184()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static ModifiedContent<>._tableRowCount(inputs:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  unsigned char v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  uint64_t v8[2] = *(_OWORD *)(a1 + 32);
  void v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  v8[4] = *(_OWORD *)(a1 + 64);
  void v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(v2 + 56))(v8);
}

uint64_t static ModifiedContent<>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v4 = *(_OWORD *)(a1 + 112);
  id v9[6] = *(_OWORD *)(a1 + 96);
  void v9[7] = v4;
  unsigned char v9[8] = *(_OWORD *)(a1 + 128);
  uint64_t v10 = *(void *)(a1 + 144);
  long long v5 = *(_OWORD *)(a1 + 48);
  _OWORD v9[2] = *(_OWORD *)(a1 + 32);
  void v9[3] = v5;
  long long v6 = *(_OWORD *)(a1 + 80);
  v9[4] = *(_OWORD *)(a1 + 64);
  v9[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v7;
  return (*(uint64_t (**)(_OWORD *))(a4 + 64))(v9) & 1;
}

void ModifiedContent<>.tableRowBody.getter()
{
}

void protocol witness for TableRowContent.tableRowBody.getter in conformance <> ModifiedContent<A, B>()
{
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> ModifiedContent<A, B>(int *a1, long long *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeRows(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._tableRowCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static ModifiedContent<>._containsOutlineSymbol(inputs:)(a1, *(void *)(a2 + 16), a3, *(void *)(a3 - 8));
}

uint64_t ModifiedContent<>.data.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))(*(void *)(a1 + 16));
}

_UNKNOWN **associated type witness table accessor for _TableRowContentModifier.Body : _TableRowContentModifier in Never()
{
  return &protocol witness table for Never;
}

uint64_t associated type witness table accessor for TableRowContent.TableRowValue : Identifiable in <> ModifiedContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t instantiation function for generic protocol witness table for <> ModifiedContent<A, B>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t associated type witness table accessor for DynamicTableRowContent.Data : Collection in <> ModifiedContent<A, B>()
{
  return swift_getAssociatedConformanceWitness();
}

uint64_t protocol witness for DynamicTableRowContent.data.getter in conformance <> ModifiedContent<A, B>(uint64_t a1, uint64_t a2)
{
  return ModifiedContent<>.data.getter(a1, *(void *)(a2 - 8));
}

uint64_t dispatch thunk of _TableRowContentModifier.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static _TableRowContentModifier._makeRows(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 32))();
}

uint64_t dispatch thunk of static _TableRowContentModifier._tableRowCount(inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 40))();
}

uint64_t type metadata completion function for _TraitWritingTableRowModifier()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for _TraitWritingTableRowModifier(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if (v6 <= 7
    && *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) <= 0x18uLL
    && (*(_DWORD *)(v5 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v5 + 16))(a1, a2, AssociatedTypeWitness);
  }
  else
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for _TraitWritingTableRowModifier(uint64_t a1)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 8);

  return v3(a1, AssociatedTypeWitness);
}

uint64_t initializeWithCopy for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithCopy for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t initializeWithTake for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t assignWithTake for _TraitWritingTableRowModifier(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 40))(a1, a2, AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for _TraitWritingTableRowModifier(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t v4 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v7 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v9 = ((a2 - v5 + ~(-1 << v7)) >> v7) + 1;
    if (HIWORD(v9))
    {
      int v8 = *(_DWORD *)((char *)a1 + v6);
      if (!v8) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 > 0xFF)
    {
      int v8 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v9 < 2)
    {
LABEL_19:
      if (v5)
      {
        long long v11 = *(uint64_t (**)(unsigned __int16 *))(v4 + 48);
        return v11(a1);
      }
      return 0;
    }
  }
  int v8 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v10 = (v8 - 1) << v7;
  if (v6 > 3) {
    int v10 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v10) + 1;
}

void storeEnumTagSinglePayload for _TraitWritingTableRowModifier(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v9 = 0;
  }
  else if (v8 <= 3)
  {
    unsigned int v12 = ((a3 - v7 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
    if (HIWORD(v12))
    {
      int v9 = 4;
    }
    else if (v12 >= 0x100)
    {
      int v9 = 2;
    }
    else
    {
      int v9 = v12 > 1;
    }
  }
  else
  {
    int v9 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v10 = ~v7 + a2;
    if (v8 < 4)
    {
      int v11 = (v10 >> (8 * v8)) + 1;
      if (v8)
      {
        int v13 = v10 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v13;
          a1[2] = BYTE2(v13);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v13;
        }
        else
        {
          *a1 = v13;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v10;
      int v11 = 1;
    }
    switch(v9)
    {
      case 1:
        a1[v8] = v11;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v11;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v11;
        return;
      default:
        return;
    }
  }
  switch(v9)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187CA9C9CLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v14 = *(void (**)(unsigned char *, uint64_t))(v6 + 56);
        v14(a1, a2);
      }
      return;
  }
}

uint64_t type metadata accessor for _TraitWritingTableRowModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(int a1, uint64_t a2, void (*a3)(uint64_t, _OWORD *))
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<TypeSelectEquivalentKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 128);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>.AddTrait, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<TypeSelectEquivalentKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>.AddTrait, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey);
  *(void *)&long long v27 = v5;
  DWORD2(v27) = v6;
  *(void *)&long long v28 = v7;
  *((void *)&v28 + 1) = v10;
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v8;
  DWORD2(v30) = v20;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v12;
  *(void *)long long v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(void *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  long long v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  unint64_t v34;
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 128);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>.AddTrait, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>.AddTrait, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey);
  *(void *)&long long v27 = v5;
  DWORD2(v27) = v6;
  *(void *)&long long v28 = v7;
  *((void *)&v28 + 1) = v10;
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v8;
  DWORD2(v30) = v20;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v12;
  *(void *)long long v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(void *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  long long v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  unint64_t v34;
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<ItemProviderTraitKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 128);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>.AddTrait, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<ItemProviderTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<ItemProviderTraitKey>.AddTrait, (uint64_t)&type metadata for ItemProviderTraitKey, (uint64_t)&protocol witness table for ItemProviderTraitKey);
  *(void *)&long long v27 = v5;
  DWORD2(v27) = v6;
  *(void *)&long long v28 = v7;
  *((void *)&v28 + 1) = v10;
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v8;
  DWORD2(v30) = v20;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v12;
  *(void *)long long v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(void *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  long long v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  unint64_t v34;
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<OnInsertTraitKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 128);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>.AddTrait, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<OnInsertTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>.AddTrait, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey);
  *(void *)&long long v27 = v5;
  DWORD2(v27) = v6;
  *(void *)&long long v28 = v7;
  *((void *)&v28 + 1) = v10;
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v8;
  DWORD2(v30) = v20;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v12;
  *(void *)long long v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(void *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  long long v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  unint64_t v34;
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<OnDeleteTraitKey>>, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 128);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait, (uint64_t)&type metadata for OnDeleteTraitKey, (uint64_t)&protocol witness table for OnDeleteTraitKey);
  *(void *)&long long v27 = v5;
  DWORD2(v27) = v6;
  *(void *)&long long v28 = v7;
  *((void *)&v28 + 1) = v10;
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v8;
  DWORD2(v30) = v20;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v12;
  *(void *)long long v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(void *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  long long v20;
  long long v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  unint64_t v34;
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(_DWORD *)(a2 + 56);
  int v6 = *(void *)(a2 + 64);
  uint64_t v7 = *(_DWORD *)(a2 + 128);
  uint64_t v8 = *(void *)a2;
  uint64_t v9 = *(_DWORD *)(a2 + 8);
  uint64_t v10 = *(void *)(a2 + 16);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v13 = *(void *)(a2 + 24);
  uint64_t v14 = *(void *)(a2 + 32);
  uint64_t v15 = *(void *)(a2 + 72);
  long long v16 = *(void *)(a2 + 80);
  int v20 = *(_OWORD *)(a2 + 104);
  int v21 = *(_OWORD *)(a2 + 88);
  long long v17 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait();
  *(void *)&long long v27 = v8;
  DWORD2(v27) = v9;
  *(void *)&long long v28 = v10;
  *((void *)&v28 + 1) = v13;
  *(void *)&long long v29 = v14;
  *((void *)&v29 + 1) = v12;
  *(void *)&long long v30 = v11;
  DWORD2(v30) = v5;
  *(void *)&long long v31 = v6;
  *((void *)&v31 + 1) = v15;
  *(void *)long long v32 = v16;
  *(_OWORD *)&v32[8] = v21;
  *(_OWORD *)&v32[24] = v20;
  *(void *)&v32[40] = v17;
  LODWORD(v33) = v7;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  long long v18 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v18, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

{
  unsigned int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  long long v17;
  long long v18;
  uint64_t v19;
  int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  _OWORD v25[9];
  unint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  unsigned char v32[48];
  long long v33;
  unint64_t v34;
  uint64_t v35;

  uint64_t v35 = *MEMORY[0x1E4F143B8];
  LODWORD(v27) = a1;
  outlined retain of _TableRowInputs(a2);
  type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(0, &lazy cache variable for type metadata for _GraphValue<_TraitWritingTableRowModifier<TableRowHoverActionTraitKey>>, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey);
  unsigned int v4 = _GraphValue.value.getter();
  uint64_t v23 = *(void *)(a2 + 136);
  int v20 = *(_DWORD *)(a2 + 56);
  uint64_t v19 = *(void *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 128);
  unsigned int v22 = *(_DWORD *)(a2 + 144);
  uint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  *(void *)&long long v27 = __PAIR64__(*(_DWORD *)(a2 + 148), v4);
  uint64_t v10 = *(void *)(a2 + 24);
  uint64_t v11 = *(void *)(a2 + 32);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a2 + 80);
  long long v17 = *(_OWORD *)(a2 + 104);
  long long v18 = *(_OWORD *)(a2 + 88);
  uint64_t v14 = *(void *)(a2 + 120);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>.AddTrait, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
  lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<TableRowHoverActionTraitKey>.AddTrait, (uint64_t)&type metadata for TableRowHoverActionTraitKey, (uint64_t)&protocol witness table for TableRowHoverActionTraitKey);
  *(void *)&long long v27 = v5;
  DWORD2(v27) = v6;
  *(void *)&long long v28 = v7;
  *((void *)&v28 + 1) = v10;
  *(void *)&long long v29 = v11;
  *((void *)&v29 + 1) = v9;
  *(void *)&long long v30 = v8;
  DWORD2(v30) = v20;
  *(void *)&long long v31 = v19;
  *((void *)&v31 + 1) = v12;
  *(void *)long long v32 = v13;
  *(_OWORD *)&v32[8] = v18;
  *(_OWORD *)&v32[24] = v17;
  *(void *)&v32[40] = v14;
  LODWORD(v33) = v21;
  *((void *)&v33 + 1) = v23;
  unint64_t v34 = __PAIR64__(Attribute.init<A>(body:value:flags:update:)(), v22);
  v25[6] = *(_OWORD *)&v32[16];
  v25[7] = *(_OWORD *)&v32[32];
  unsigned char v25[8] = v33;
  unint64_t v26 = v34;
  v25[2] = v29;
  v25[3] = v30;
  v25[4] = v31;
  v25[5] = *(_OWORD *)v32;
  v25[0] = v27;
  v25[1] = v28;
  uint64_t v15 = outlined retain of _TableRowInputs((uint64_t)&v27);
  a3(v15, v25);
  outlined release of _TableRowInputs((uint64_t)&v27);
  return outlined release of _TableRowInputs((uint64_t)&v27);
}

uint64_t _TraitWritingTableRowModifier.AddTrait.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TraitWritingTableRowModifier();
  uint64_t Value = AGGraphGetValue();
  unsigned int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t _TraitWritingTableRowModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v7 = (char *)&v12 - v6;
  uint64_t v8 = type metadata accessor for _TraitWritingTableRowModifier();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v12 - v9;
  TableRow.MakeList.traits.getter(a1, &v12);
  if (v12) {
    uint64_t v13 = v12;
  }
  else {
    ViewTraitCollection.init()();
  }
  _TraitWritingTableRowModifier.AddTrait.modifier.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, AssociatedTypeWitness);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v13;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance _TraitWritingTableRowModifier<A>.AddTrait@<X0>(uint64_t *a1@<X8>)
{
  return _TraitWritingTableRowModifier.AddTrait.value.getter(*v1, a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance _TraitWritingTableRowModifier<A>.AddTrait(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

void protocol witness for _TableRowContentModifier.body.getter in conformance _TraitWritingTableRowModifier<A>()
{
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance _TraitWritingTableRowModifier<A>(uint64_t a1, long long *a2, void (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t a5)
{
  return static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait, (uint64_t)&protocol conformance descriptor for _TraitWritingTableRowModifier<A>.AddTrait, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_22);
}

uint64_t protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance _TraitWritingTableRowModifier<A>(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  return protocol witness for static _TableRowContentModifier._tableRowCount(inputs:body:) in conformance OnDeleteTableRowModifier(a1, a2);
}

uint64_t partial apply for closure #1 in TableRowContentModifierBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(uint64_t a1, long long *a2, void (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(uint64_t, uint64_t, uint64_t), uint64_t (*a8)(void, uint64_t, uint64_t), uint64_t a9, uint64_t a10)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v14 = a2[7];
  *(_OWORD *)&v38[32] = a2[6];
  long long v15 = a2[8];
  *(_OWORD *)&v38[48] = v14;
  long long v39 = v15;
  uint64_t v40 = *((void *)a2 + 18);
  long long v16 = a2[3];
  *(_OWORD *)&v36[16] = a2[2];
  long long v37 = v16;
  long long v17 = a2[5];
  *(_OWORD *)long long v38 = a2[4];
  *(_OWORD *)&v38[16] = v17;
  long long v18 = a2[1];
  long long v35 = *a2;
  *(_OWORD *)long long v36 = v18;
  outlined retain of _TableRowInputs((uint64_t)&v35);
  a7(255, a5, a6);
  type metadata accessor for _GraphValue();
  LODWORD(v29) = _GraphValue.value.getter();
  DWORD1(v29) = HIDWORD(v40);
  uint64_t v25 = a8(0, a5, a6);
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTraitCollection>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, a10, (uint64_t)v24, v25, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
  *(void *)&long long v29 = v35;
  DWORD2(v29) = DWORD2(v35);
  *(_OWORD *)&v30[8] = *(_OWORD *)&v36[8];
  *(void *)long long v30 = *(void *)v36;
  *(void *)&v30[24] = *(void *)&v36[24];
  *(void *)&long long v31 = v37;
  DWORD2(v31) = DWORD2(v37);
  *(void *)long long v32 = *(void *)v38;
  *(_OWORD *)&v32[8] = *(_OWORD *)&v38[8];
  *(_OWORD *)&v32[24] = *(_OWORD *)&v38[24];
  *(_OWORD *)&v32[40] = *(_OWORD *)&v38[40];
  *(void *)&v32[56] = *(void *)&v38[56];
  LODWORD(v33) = v39;
  *((void *)&v33 + 1) = *((void *)&v39 + 1);
  unint64_t v34 = __PAIR64__(v27[0], v40);
  v27[6] = *(_OWORD *)&v32[32];
  v27[7] = *(_OWORD *)&v32[48];
  unsigned char v27[8] = v33;
  unint64_t v28 = __PAIR64__(v27[0], v40);
  uint64_t v27[2] = *(_OWORD *)&v30[16];
  v27[3] = v31;
  v27[4] = *(_OWORD *)v32;
  v27[5] = *(_OWORD *)&v32[16];
  v27[0] = v29;
  v27[1] = *(_OWORD *)v30;
  uint64_t v21 = outlined retain of _TableRowInputs((uint64_t)&v29);
  a3(v21, v27);
  outlined release of _TableRowInputs((uint64_t)&v29);
  return outlined release of _TableRowInputs((uint64_t)&v29);
}

uint64_t TableRowTraitTransformerModifier.TransformTrait.value.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  uint64_t v6 = (char *)&v10 - v5;
  TableRow.MakeList.traits.getter(a1, &v10);
  uint64_t v7 = v10;
  if (v10)
  {
    uint64_t v11 = v10;
  }
  else
  {
    ViewTraitCollection.init()();
    uint64_t v7 = v11;
  }
  type metadata accessor for TableRowTraitTransformerModifier();
  uint64_t v8 = *(void (**)(char *))AGGraphGetValue();
  uint64_t v10 = v7;
  swift_retain();
  ViewTraitCollection.subscript.getter();
  v8(v6);
  swift_release();
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v11;
  return result;
}

uint64_t protocol witness for Rule.value.getter in conformance TableRowTraitTransformerModifier<A>.TransformTrait@<X0>(uint64_t *a1@<X8>)
{
  return TableRowTraitTransformerModifier.TransformTrait.value.getter(*v1, a1);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance TableRowTraitTransformerModifier<A>.TransformTrait(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static _TableRowContentModifier._makeRows(modifier:inputs:body:) in conformance TableRowTraitTransformerModifier<A>(uint64_t a1, long long *a2, void (*a3)(uint64_t, _OWORD *), uint64_t a4, uint64_t a5)
{
  return static _TraitWritingTableRowModifier._makeRows(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), (void (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TableRowTraitTransformerModifier, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TableRowTraitTransformerModifier.TransformTrait, (uint64_t)&protocol conformance descriptor for TableRowTraitTransformerModifier<A>.TransformTrait, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply);
}

uint64_t type metadata accessor for _TraitWritingTableRowModifier.AddTrait()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<ViewTraitCollection>()
{
  if (!lazy cache variable for type metadata for Attribute<ViewTraitCollection>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewTraitCollection>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait;
  if (!lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingTableRowModifier<DropOntoTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(255, &lazy cache variable for type metadata for TableRowContentModifierBodyAccessor<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TableRowContentModifierBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableRowContentModifierBodyAccessor<Never> and conformance TableRowContentModifierBodyAccessor<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type TableRowContentModifierBodyAccessor<DropOntoTableRowModifier> and conformance TableRowContentModifierBodyAccessor<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _GraphValue<_TraitWritingTableRowModifier<DropOntoTraitKey>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(255, a3, a4, a5, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
    unint64_t v6 = type metadata accessor for _GraphValue();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _TraitWritingTableRowModifier<OnDeleteTraitKey>.AddTrait and conformance _TraitWritingTableRowModifier<A>.AddTrait(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _TraitWritingTableRowModifier<DropOntoTraitKey>(255, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier.AddTrait);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for TableRowContentModifierBodyAccessor<DropOntoTableRowModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for TableRowContentModifierBodyAccessor();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t partial apply for closure #1 in closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(uint64_t a1)
{
  return closure #1 in closure #2 in static ModifiedContent<>._makeRows(content:inputs:)(a1, *(void *)(v1 + 16));
}

uint64_t type metadata accessor for TableRowTraitTransformerModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in _TraitWritingTableRowModifier<A>.AddTrait()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TableRowTraitTransformerModifier.TransformTrait()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in TableRowTraitTransformerModifier<A>.TransformTrait()
{
  return swift_getWitnessTable();
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI10VisibilityO_s5NeverOytTg503_s7c114UI28CustomizationOptionsModifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA10E6OXEfU_AD0X6ValuesVTf1cn_n(unsigned __int8 a1, uint64_t a2)
{
  int v2 = a1;
  if (a1 != 3)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationVisibilityKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationVisibilityKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(a2 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return v2 == 3;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI27ToolbarCustomizationOptionsV_s5NeverOytTB503_s7c4UI28fG107Modifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA07ToolbarcD0VXEfU0_AD0X6ValuesVTf1cn_n(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v3 = a2 & 1;
  if ((a2 & 1) == 0)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarCustomizationOptionsKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarCustomizationOptionsKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (*(void *)(a3 + 8))
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  return v3;
}

uint64_t UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

double protocol witness for UIViewControllerRepresentable._identifiedViewTree(in:) in conformance MulticolumnSplitViewRepresentable<A, B, C>@<D0>(uint64_t a1@<X8>)
{
  return UIViewControllerRepresentable._identifiedViewTree(in:)(a1);
}

double UIViewControllerRepresentable._identifiedViewTree(in:)@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 160) = 2;
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance MulticolumnSplitViewRepresentable<A, B, C>(void *a1@<X8>)
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MulticolumnSplitViewRepresentable<A, B, C>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MulticolumnSplitViewRepresentable<A, B, C>()
{
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance MulticolumnSplitViewRepresentable<A, B, C>()
{
}

void UIViewControllerRepresentable.body.getter()
{
}

void *specialized WithCommandFlag.SetFlag.value.getter(unint64_t a1)
{
  unint64_t v1 = HIDWORD(a1);
  uint64_t v2 = type metadata accessor for CommandsList.Item(0);
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (void *)((char *)v13 - v7);
  if (*MEMORY[0x1E4F4E7A0] == v1)
  {
    uint64_t v9 = (void *)MEMORY[0x1E4FBC860];
  }
  else
  {
    uint64_t v9 = *(void **)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WithCommandFlag);
  *uint64_t v8 = *(void *)AGGraphGetValue();
  type metadata accessor for CommandsList.Item.Value(0);
  swift_storeEnumTagMultiPayload();
  DisplayList.Version.init(forUpdate:)();
  *(void *)((char *)v8 + *(int *)(v2 + 20)) = v13[1];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0((uint64_t)v8, (uint64_t)v5, type metadata accessor for CommandsList.Item);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9[2] + 1, 1, v9);
  }
  unint64_t v11 = v9[2];
  unint64_t v10 = v9[3];
  if (v11 >= v10 >> 1) {
    uint64_t v9 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v10 > 1, v11 + 1, 1, v9);
  }
  _OWORD v9[2] = v11 + 1;
  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, (uint64_t)v9+ ((*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))+ *(void *)(v3 + 72) * v11, type metadata accessor for CommandsList.Item);
  _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v8, type metadata accessor for CommandsList.Item);
  return v9;
}

uint64_t specialized AccessibilityNodeAttachment.makeAttachment<A>(with:)@<X0>(void *a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for CodableAccessibilityAttachmentStorage();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v16[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  unint64_t v10 = &v16[-v9];
  uint64_t v11 = type metadata accessor for AccessibilityNodeAttachment.Storage();
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = &v16[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(v2, (uint64_t)v13, MEMORY[0x1E4F40FA0]);
  uint64_t result = swift_getEnumCaseMultiPayload();
  if (result != 1)
  {
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 32))(v10, v13, v4);
    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v5 + 16))(v7, v10, v4);
    lazy protocol witness table accessor for type UIKitAccessibilityPropertyApplicator and conformance UIKitAccessibilityPropertyApplicator();
    uint64_t v13 = v16;
    AccessibilityAttachment.init<A>(_:applicator:)();
    uint64_t result = (*(uint64_t (**)(unsigned char *, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v15 = *((void *)v13 + 1);
  *a1 = *(void *)v13;
  a1[1] = v15;
  return result;
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable @async () -> (@out ())(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc();
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = partial apply for closure #1 in closure #1 in AppDelegate.application(_:handleEventsForBackgroundURLSession:completionHandler:);
  return v4();
}

uint64_t protocol witness for UIViewControllerRepresentable._resetUIViewController(_:coordinator:destroy:) in conformance CustomizableDocumentViewControllerRepresentable(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  return a3();
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance CustomizableDocumentViewControllerRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED4578B0;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance CustomizableDocumentViewControllerRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance CustomizableDocumentViewControllerRepresentable()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance TabItemGroup.HostView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance TabItemGroup.HostView()
{
}

char *specialized DisplayList.HostedViews.Preference.value.getter()
{
  uint64_t v0 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0 - 8);
  int v3 = (Swift::UInt32 *)((char *)&v24 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v4 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *(void *)AGGraphGetValue();
  swift_beginAccess();
  uint64_t v7 = *(void *)(v6 + 128);
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v9 = v7 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));
  swift_bridgeObjectRetain();
  uint64_t result = (char *)swift_bridgeObjectRetain();
  unint64_t v11 = 0;
  uint64_t v27 = v8 - 1;
  long long v29 = (char *)MEMORY[0x1E4FBC860];
  LODWORD(v28) = 1;
  while (2)
  {
    unint64_t v12 = v11;
    while (1)
    {
      if (v12 >= *(void *)(v7 + 16))
      {
        __break(1u);
LABEL_36:
        __break(1u);
LABEL_37:
        __break(1u);
        goto LABEL_38;
      }
      _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(v9 + *(void *)(v1 + 72) * v12, (uint64_t)v3, type metadata accessor for DisplayList.HostedViewState.Key);
      if (*(void *)(v5 + 16) && (unint64_t v13 = specialized __RawDictionaryStorage.find<A>(_:)(v3), (v14 & 1) != 0))
      {
        outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v5 + 56) + 176 * v13, (uint64_t)&v30);
      }
      else
      {
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        long long v30 = 0u;
      }
      _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v3, type metadata accessor for DisplayList.HostedViewState.Key);
      if (*((void *)&v32 + 1)) {
        break;
      }
      uint64_t result = (char *)_s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)&v30, &lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo);
LABEL_5:
      if (v8 == ++v12) {
        goto LABEL_32;
      }
    }
    v41[8] = v38;
    v41[9] = v39;
    long long v42 = v40;
    v41[4] = v34;
    v41[5] = v35;
    v41[6] = v36;
    v41[7] = v37;
    v41[0] = v30;
    v41[1] = v31;
    v41[2] = v32;
    v41[3] = v33;
    if (!*((void *)&v39 + 1)
      || (*(void *)&long long v30 = *((void *)&v39 + 1),
          *((void *)&v30 + 1) = v42,
          (_ViewOutputs.subscript.getter() & 0x100000000) != 0))
    {
      uint64_t result = (char *)outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v41);
      goto LABEL_5;
    }
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for [ArchivedViewState], (uint64_t)&type metadata for ArchivedViewState, MEMORY[0x1E4FBB320]);
    uint64_t Value = (char **)AGGraphGetValue();
    long long v16 = *Value;
    if (v28)
    {
      swift_bridgeObjectRetain();
      outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v41);
      uint64_t result = (char *)swift_bridgeObjectRelease();
      long long v29 = v16;
      goto LABEL_31;
    }
    uint64_t v17 = *((void *)v16 + 2);
    uint64_t result = *Value;
    long long v18 = v29;
    int64_t v19 = *((void *)v29 + 2);
    uint64_t v28 = v17;
    int64_t v24 = v19;
    int64_t v26 = v19 + v17;
    if (__OFADD__(v19, v17)) {
      goto LABEL_36;
    }
    uint64_t v25 = result;
    swift_bridgeObjectRetain();
    uint64_t result = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (!result || v26 > *((void *)v18 + 3) >> 1)
    {
      if (v24 <= v26) {
        int64_t v20 = v26;
      }
      else {
        int64_t v20 = v24;
      }
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(result, v20, 1, v18);
      long long v29 = result;
    }
    if (!*((void *)v25 + 2))
    {
      if (!v28) {
        goto LABEL_30;
      }
      goto LABEL_37;
    }
    if ((*((void *)v29 + 3) >> 1) - *((void *)v29 + 2) < v28)
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }
    uint64_t result = (char *)swift_arrayInitWithCopy();
    if (!v28)
    {
LABEL_30:
      swift_bridgeObjectRelease();
      uint64_t result = (char *)outlined destroy of DisplayList.HostedViewState.ViewInfo((uint64_t)v41);
LABEL_31:
      LODWORD(v28) = 0;
      unint64_t v11 = v12 + 1;
      if (v27 != v12) {
        continue;
      }
LABEL_32:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v29;
    }
    break;
  }
  uint64_t v21 = *((void *)v29 + 2);
  BOOL v22 = __OFADD__(v21, v28);
  uint64_t v23 = v21 + v28;
  if (!v22)
  {
    *((void *)v29 + 2) = v23;
    goto LABEL_30;
  }
LABEL_39:
  __break(1u);
  return result;
}

uint64_t specialized DisplayListTransform.value.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for AccessibilityNodeAttachment();
  uint64_t v175 = *(void *)(v3 - 8);
  uint64_t v176 = v3;
  MEMORY[0x1F4188790](v3);
  long long v174 = (uint64_t *)((char *)&v157 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v5);
  uint64_t v178 = (uint64_t)&v157 - v6;
  long long v163 = v1;
  LODWORD(v7) = *MEMORY[0x1E4F4E7A0];
  if (v1[12] == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    __int16 v9 = *(_WORD *)(Value + 8);
    char v10 = *(unsigned char *)(Value + 10);
    uint64_t v210 = *(void *)Value;
    __int16 v211 = v9;
    char v212 = v10;
    swift_bridgeObjectRetain();
  }
  unint64_t v11 = v163;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t v13 = MEMORY[0x1E4FBC860];
  if (v163[14] != v7)
  {
    unint64_t v13 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    unint64_t v11 = v163;
  }
  int v173 = v11[11];
  long long v203 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
    __int16 v16 = v211;
    char v17 = v212;
    *a1 = v210;
    *((_WORD *)a1 + 4) = v16;
    *((unsigned char *)a1 + 10) = v17;
    return result;
  }
  uint64_t v209 = v12;
  int64_t v14 = v13 >> 62;
  if (v13 >> 62) {
    goto LABEL_125;
  }
LABEL_8:
  if (AGGraphGetCurrentAttribute() == v7)
  {
    __break(1u);
LABEL_127:
    __break(1u);
LABEL_128:
    __break(1u);
LABEL_129:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
  long long v159 = a1;
  AccessibilityAttachmentToken.init<A>(_:)();
  uint64_t v179 = v13;
  if (v14)
  {
    swift_bridgeObjectRetain();
    unint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if ((v13 & 0x8000000000000000) != 0) {
      goto LABEL_127;
    }
  }
  else
  {
    unint64_t v13 = *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v13)
  {
    swift_bridgeObjectRelease();
    uint64_t v162 = 0;
    goto LABEL_47;
  }
  uint64_t v162 = 0;
  int v18 = v163[7];
  LODWORD(v182) = v163[13];
  LODWORD(v180) = v7;
  LODWORD(v181) = v18;
  do
  {
    while (1)
    {
      if (*(double *)AGGraphGetValue() >= 0.001)
      {
        AccessibilityAttachment.init()();
        goto LABEL_30;
      }
      unsigned int v19 = dword_1ED430658;
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
      uint64_t v20 = Dictionary.init(minimumCapacity:)();
      type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
      int64_t v14 = v21;
      *(void *)&v204[8] = v21;
      uint64_t v22 = _s7SwiftUI22ArchivableLinkModifierVACSeAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
      *(void *)&v204[16] = v22;
      *(void *)&long long v203 = v19;
      outlined init with take of OptionalBinaryInteger(&v203, (uint64_t)&v195);
      LODWORD(v7) = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&long long v186 = v20;
      uint64_t v23 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v195, *((uint64_t *)&v196 + 1));
      a1 = &v157;
      double v24 = MEMORY[0x1F4188790](v23);
      int64_t v26 = (uint64_t *)((char *)&v157 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0));
      (*(void (**)(void *, double))(v27 + 16))(v26, v24);
      *((void *)&v188 + 1) = v14;
      uint64_t v189 = v22;
      *(void *)&long long v187 = *v26;
      unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AA8]);
      uint64_t v30 = *(void *)(v20 + 16);
      BOOL v31 = (v28 & 1) == 0;
      uint64_t v32 = v30 + v31;
      if (__OFADD__(v30, v31))
      {
        __break(1u);
LABEL_121:
        __break(1u);
LABEL_122:
        __break(1u);
LABEL_123:
        __break(1u);
LABEL_124:
        __break(1u);
LABEL_125:
        swift_bridgeObjectRetain();
        _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      }
      char v33 = v28;
      if (*(void *)(v20 + 24) >= v32)
      {
        if (v7)
        {
          long long v36 = (void *)v186;
          if ((v28 & 1) == 0) {
            goto LABEL_27;
          }
        }
        else
        {
          specialized _NativeDictionary.copy()();
          long long v36 = (void *)v186;
          if ((v33 & 1) == 0) {
            goto LABEL_27;
          }
        }
      }
      else
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v32, (char)v7);
        unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)(MEMORY[0x1E4F40AA8]);
        if ((v33 & 1) != (v35 & 1)) {
          goto LABEL_129;
        }
        unint64_t v29 = v34;
        long long v36 = (void *)v186;
        if ((v33 & 1) == 0)
        {
LABEL_27:
          uint64_t v38 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v187, *((uint64_t *)&v188 + 1));
          double v39 = MEMORY[0x1F4188790](v38);
          uint64_t v7 = (uint64_t *)((char *)&v157 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0));
          (*(void (**)(void *, double))(v41 + 16))(v7, v39);
          int64_t v184 = v14;
          uint64_t v185 = v22;
          *(void *)&long long v183 = *v7;
          v36[(v29 >> 6) + 8] |= 1 << v29;
          *(void *)(v36[6] + 8 * v29) = MEMORY[0x1E4F40AA8];
          outlined init with take of OptionalBinaryInteger(&v183, v36[7] + 40 * v29);
          uint64_t v42 = v36[2];
          BOOL v43 = __OFADD__(v42, 1);
          uint64_t v44 = v42 + 1;
          if (v43) {
            goto LABEL_121;
          }
          v36[2] = v44;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v187);
          goto LABEL_29;
        }
      }
      uint64_t v37 = v36[7] + 40 * v29;
      __swift_destroy_boxed_opaque_existential_1(v37);
      outlined init with take of OptionalBinaryInteger(&v187, v37);
LABEL_29:
      LODWORD(v7) = v180;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v195);
      swift_bridgeObjectRelease();
      *(void *)&long long v195 = v36;
      static AccessibilityAttachment.properties(_:)();
      swift_bridgeObjectRelease();
LABEL_30:
      if (v182 == v7) {
        goto LABEL_39;
      }
      uint64_t v45 = AGGraphGetValue();
      uint64_t v47 = *(void *)v45;
      long long v46 = *(void **)(v45 + 8);
      if (*(unsigned char *)(v45 + 16))
      {
        if (*(unsigned char *)(v45 + 16) != 1) {
          goto LABEL_39;
        }
        uint64_t v48 = swift_bridgeObjectRetain();
        uint64_t v49 = v162;
        uint64_t v50 = specialized Sequence.compactMap<A>(_:)(v48);
        uint64_t v162 = v49;
        static AccessibilityAttachment.combine(_:)(v50, (uint64_t *)&v195);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v47, v46, 1);
        long long v46 = (void *)*((void *)&v195 + 1);
        uint64_t v47 = v195;
      }
      else
      {
        id v51 = v46;
        swift_bridgeObjectRetain();
      }
      *(void *)&long long v195 = v47;
      AccessibilityProperties.merge(with:)((uint64_t *)&v195);
      long long v195 = v203;
      uint64_t v52 = (void *)AccessibilityAttachment.platformElement.getter();

      if (!v52)
      {
        *(void *)&long long v195 = v47;
        *((void *)&v195 + 1) = v46;
        if (AccessibilityAttachment.platformElement.getter()) {
          AccessibilityAttachment.platformElement.setter();
        }
      }
      swift_bridgeObjectRelease();

LABEL_39:
      long long v53 = v203;
      long long v195 = v203;
      if ((AccessibilityAttachment.isEmpty.getter() & 1) == 0) {
        break;
      }
      swift_bridgeObjectRelease();

      if (!--v13) {
        goto LABEL_45;
      }
    }
    uint64_t v54 = (char *)v209;
    id v55 = *((id *)&v53 + 1);
    swift_bridgeObjectRetain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v54 + 2) + 1, 1, v54);
    }
    unint64_t v57 = *((void *)v54 + 2);
    unint64_t v56 = *((void *)v54 + 3);
    if (v57 >= v56 >> 1) {
      uint64_t v54 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v56 > 1), v57 + 1, 1, v54);
    }
    *((void *)v54 + 2) = v57 + 1;
    *(_OWORD *)&v54[16 * v57 + 32] = v53;

    swift_bridgeObjectRelease();
    uint64_t v209 = (uint64_t)v54;
    --v13;
  }
  while (v13);
LABEL_45:
  swift_bridgeObjectRelease();
LABEL_47:
  uint64_t v58 = v163;
  long long v203 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  long long v203 = *(_OWORD *)AGGraphGetValue();
  MEMORY[0x18C10C240]();
  int v158 = v58[8];
  uint64_t v59 = (long long *)AGGraphGetValue();
  long long v60 = v59[1];
  long long v203 = *v59;
  *(_OWORD *)v204 = v60;
  CGFloat v61 = MEMORY[0x18C114450]();
  CGFloat v63 = v62;
  DisplayList.Version.init(forUpdate:)();
  int v172 = *((unsigned __int8 *)v58 + 4);
  uint64_t v160 = v203;
  if ((v172 & 1) == 0 || (uint64_t v166 = *(void *)(v209 + 16)) == 0)
  {
    uint64_t v161 = 0;
    uint64_t v65 = 1;
    goto LABEL_94;
  }
  uint64_t v165 = v209 + 32;
  uint64_t v157 = v209;
  swift_bridgeObjectRetain_n();
  uint64_t v64 = 0;
  uint64_t v161 = 0;
  uint64_t v65 = 1;
  uint64_t v164 = MEMORY[0x1E4FBC840] + 8;
  while (2)
  {
    uint64_t v177 = v65;
    int v66 = (unint64_t *)(v165 + 16 * v64);
    unint64_t v67 = *v66;
    uint64_t v7 = (void *)v66[1];
    int v68 = (uint64_t *)AGGraphGetValue();
    uint64_t v69 = *v68;
    uint64_t v179 = v68[1];
    uint64_t KeyPath = swift_getKeyPath();
    if (*(void *)(v67 + 16)
      && (unint64_t v71 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey),
          (v72 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v67 + 56) + 40 * v71, (uint64_t)&v203);
      int v73 = v7;
      unint64_t v74 = v67;
      uint64_t v75 = *(void *)&v204[8];
      uint64_t v76 = *(void *)&v204[16];
      __swift_project_boxed_opaque_existential_1(&v203, *(uint64_t *)&v204[8]);
      *(void *)&long long v182 = *(void *)(v76 + 8);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      id v77 = v73;
      swift_retain();
      uint64_t v78 = v75;
      unint64_t v67 = v74;
      uint64_t v7 = v73;
      ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v182)(&v195, v78, v76);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v203);
    }
    else
    {
      long long v195 = 0u;
      long long v196 = 0u;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain_n();
      uint64_t v79 = v7;
      swift_retain();
    }
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v164, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
    if (swift_dynamicCast())
    {
      uint64_t v80 = v203;
    }
    else
    {
      *(void *)&long long v203 = 0;
      if (one-time initialization token for defaultValue != -1) {
        swift_once();
      }
      uint64_t v80 = static AccessibilityProperties.ActionsKey.defaultValue;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    uint64_t v81 = *(void *)(v80 + 16);
    if (v81)
    {
      unint64_t v168 = v67;
      uint64_t v169 = KeyPath;
      uint64_t v170 = v7;
      uint64_t v171 = v64;
      uint64_t v82 = (void *)(v80 + 32);
      uint64_t v167 = v80;
      swift_bridgeObjectRetain();
      int v83 = (char *)MEMORY[0x1E4FBC860];
      do
      {
        uint64_t v85 = v82[3];
        uint64_t v86 = v82[4];
        __swift_project_boxed_opaque_existential_1(v82, v85);
        *(void *)&long long v195 = v69;
        *((void *)&v195 + 1) = v179;
        (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v86 + 96))(&v203, &v195, v85, v86);
        if ((void)v206)
        {
          long long v182 = v206;
          __int16 v87 = *(_WORD *)v204;
          long long v180 = v203;
          long long v181 = *(_OWORD *)&v204[8];
          char v88 = v205;
          uint64_t v89 = v207;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            int v83 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v83 + 2) + 1, 1, v83);
          }
          unint64_t v91 = *((void *)v83 + 2);
          unint64_t v90 = *((void *)v83 + 3);
          long long v92 = v182;
          if (v91 >= v90 >> 1)
          {
            uint64_t v93 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v90 > 1), v91 + 1, 1, v83);
            long long v92 = v182;
            int v83 = v93;
          }
          *((void *)v83 + 2) = v91 + 1;
          int v84 = &v83[72 * v91];
          *((_OWORD *)v84 + 2) = v180;
          *((_WORD *)v84 + 24) = v87;
          *(_OWORD *)(v84 + 56) = v181;
          v84[72] = v88 & 1;
          *((_OWORD *)v84 + 5) = v92;
          *((void *)v84 + 12) = v89;
        }
        v82 += 6;
        --v81;
      }
      while (v81);
      swift_bridgeObjectRelease();
      uint64_t v7 = v170;
      uint64_t v64 = v171;
      unint64_t v67 = v168;
      uint64_t KeyPath = v169;
    }
    else
    {
      int v83 = (char *)MEMORY[0x1E4FBC860];
    }
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v94 = *((void *)v83 + 2);
    swift_release();
    if (!v94)
    {
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();

      uint64_t v65 = v177;
      goto LABEL_51;
    }
    uint64_t v65 = v177;
    if (v177)
    {
      if (v177 == 1)
      {
        swift_bridgeObjectRelease();

        uint64_t v161 = KeyPath;
        uint64_t v65 = (uint64_t)v83;
        goto LABEL_51;
      }
      unint64_t v13 = v67;
      uint64_t v95 = *((void *)v83 + 2);
      int64_t v14 = *(void *)(v177 + 16);
      a1 = (uint64_t *)(v14 + v95);
      if (__OFADD__(v14, v95)) {
        goto LABEL_122;
      }
      swift_bridgeObjectRetain();
      char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
      if (isUniquelyReferenced_nonNull_native && (uint64_t)a1 <= *(void *)(v65 + 24) >> 1)
      {
        if (*((void *)v83 + 2))
        {
LABEL_81:
          if ((*(void *)(v65 + 24) >> 1) - *(void *)(v65 + 16) < v95) {
            goto LABEL_124;
          }
          swift_arrayInitWithCopy();
          if (v95)
          {
            uint64_t v97 = *(void *)(v65 + 16);
            BOOL v43 = __OFADD__(v97, v95);
            uint64_t v98 = v97 + v95;
            if (v43) {
              goto LABEL_128;
            }
            *(void *)(v65 + 16) = v98;
          }
          goto LABEL_90;
        }
      }
      else
      {
        if (v14 <= (uint64_t)a1) {
          int64_t v99 = v14 + v95;
        }
        else {
          int64_t v99 = v14;
        }
        uint64_t v65 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v99, 1, (char *)v65);
        if (*((void *)v83 + 2)) {
          goto LABEL_81;
        }
      }
      int64_t v14 = v13;
      if (v95) {
        goto LABEL_123;
      }
LABEL_90:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
    }
    else
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    swift_release();

LABEL_51:
    if (++v64 != v166) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease_n();
LABEL_94:
  char v100 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v210, &v209, v61, v63);
  uint64_t v101 = v209;
  int64_t v102 = *(void *)(v209 + 16);
  uint64_t v103 = MEMORY[0x1E4FBC860];
  uint64_t v177 = v65;
  if (!v102) {
    goto LABEL_113;
  }
  char v104 = v100;
  uint64_t v208 = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRetain();
  specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v102, 0);
  long long v183 = *(_OWORD *)(v163 + 2);
  char v105 = v104 & 1;
  uint64_t v179 = v101;
  char v106 = (void **)(v101 + 40);
  *(void *)&long long v182 = MEMORY[0x1E4FBC840] + 8;
  LODWORD(v180) = v104 & 1;
  while (2)
  {
    uint64_t v108 = (uint64_t)*(v106 - 1);
    long long v107 = *v106;
    if (*(void *)(v108 + 16)
      && (unint64_t v109 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
          (v110 & 1) != 0))
    {
      outlined init with copy of TableColumnList(*(void *)(v108 + 56) + 40 * v109, (uint64_t)&v203);
      uint64_t v111 = *(void *)&v204[8];
      uint64_t v112 = *(void *)&v204[16];
      __swift_project_boxed_opaque_existential_1(&v203, *(uint64_t *)&v204[8]);
      *(void *)&long long v181 = *(void *)(v112 + 8);
      id v113 = v107;
      swift_bridgeObjectRetain_n();
      id v114 = v113;
      uint64_t v115 = v112;
      char v105 = v180;
      ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v181)(&v195, v111, v115);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v203);
    }
    else
    {
      long long v195 = 0u;
      long long v196 = 0u;
      id v116 = v107;
      swift_bridgeObjectRetain_n();
      id v117 = v116;
    }
    long long v118 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v182, MEMORY[0x1E4FBB718]);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v118);
    if (swift_dynamicCast())
    {
      v204[1] = 0;
      uint64_t v120 = *((void *)&v203 + 1);
      uint64_t v119 = v203;
      char v121 = v204[0];
      swift_bridgeObjectRelease();
      if ((v121 & 1) == 0)
      {
        char v122 = 0;
        if (v172) {
          goto LABEL_103;
        }
LABEL_106:
        uint64_t v126 = (uint64_t)v174;
        *long long v174 = v108;
        *(void *)(v126 + 8) = v107;
        goto LABEL_107;
      }
    }
    else
    {
      long long v203 = 0uLL;
      *(_WORD *)v204 = 256;
      swift_bridgeObjectRelease();
    }
    uint64_t v119 = 0;
    uint64_t v120 = 0;
    char v122 = 1;
    if ((v172 & 1) == 0) {
      goto LABEL_106;
    }
LABEL_103:
    uint64_t v123 = (uint64_t *)AGGraphGetValue();
    uint64_t v125 = *v123;
    uint64_t v124 = v123[1];
    *(void *)&long long v195 = v108;
    *((void *)&v195 + 1) = v107;
    long long v203 = 0u;
    *(_OWORD *)v204 = 0u;
    *(void *)&v204[16] = v119;
    uint64_t v205 = v120;
    LOBYTE(v206) = v122;
    *(void *)&long long v187 = v125;
    *((void *)&v187 + 1) = v124;
    long long v186 = v183;
    swift_retain();
    swift_retain();
    uint64_t v126 = (uint64_t)v174;
    CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_107:
    type metadata accessor for AccessibilityNodeAttachment.Storage();
    swift_storeEnumTagMultiPayload();
    uint64_t v127 = v176;
    *(unsigned char *)(v126 + *(int *)(v176 + 20)) = v105;
    *(unsigned char *)(v126 + *(int *)(v127 + 24)) = 0;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v126, v178, MEMORY[0x1E4F40FA8]);
    swift_bridgeObjectRelease();

    uint64_t v103 = v208;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v103 + 16) + 1, 1);
      uint64_t v103 = v208;
    }
    unint64_t v129 = *(void *)(v103 + 16);
    unint64_t v128 = *(void *)(v103 + 24);
    if (v129 >= v128 >> 1)
    {
      specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v128 > 1, v129 + 1, 1);
      uint64_t v103 = v208;
    }
    v106 += 2;
    *(void *)(v103 + 16) = v129 + 1;
    _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v178, v103+ ((*(unsigned __int8 *)(v175 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v175 + 80))+ *(void *)(v175 + 72) * v129, MEMORY[0x1E4F40FA8]);
    if (--v102) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v65 = v177;
LABEL_113:
  swift_bridgeObjectRelease();
  uint64_t v130 = swift_allocObject();
  *(void *)(v130 + 16) = v103;
  *(void *)&long long v195 = v130;
  *((void *)&v195 + 1) = 0x4000000D00000000;
  *(void *)&long long v196 = v210;
  BYTE10(v196) = v212;
  WORD4(v196) = v211;
  if (v65 == 1)
  {
    uint64_t v131 = v163;
    int v132 = *v163;
    swift_bridgeObjectRetain();
  }
  else
  {
    Swift::Int v133 = (long long *)AGGraphGetValue();
    long long v134 = v133[1];
    long long v203 = *v133;
    *(_OWORD *)v204 = v134;
    uint64_t v135 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v135);
    int v132 = 0;
    uint64_t v131 = v163;
  }
  LODWORD(v186) = v132;
  *(void *)&long long v187 = v160;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v182) = *((unsigned __int8 *)v131 + 24);
  LOBYTE(v195) = v182;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v136 = v205;
  unint64_t v137 = v206;
  int v138 = (unsigned __int16)v207 | (BYTE2(v207) << 16);
  long long v195 = v203;
  long long v196 = *(_OWORD *)v204;
  uint64_t v197 = *(void *)&v204[16];
  uint64_t v198 = v205;
  long long v199 = v206;
  char v201 = BYTE2(v207);
  __int16 v200 = v207;
  int v202 = HIDWORD(v207);
  outlined copy of DisplayList.Item.Value(v205, v206);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  uint64_t v139 = v187;
  __int16 v140 = WORD4(v187);
  char v141 = BYTE10(v187);
  uint64_t v142 = v177;
  if (v177 == 1)
  {
    uint64_t result = outlined consume of DisplayList.Item.Value(v136, v137);
  }
  else
  {
    uint64_t v143 = swift_allocObject();
    *(void *)&long long v181 = v137;
    uint64_t v144 = (void *)v143;
    int v145 = *v131;
    uint64_t v146 = (long long *)AGGraphGetValue();
    long long v147 = v146[1];
    long long v195 = *v146;
    long long v196 = v147;
    swift_bridgeObjectRetain();
    LODWORD(v180) = v138;
    uint64_t v148 = v161;
    outlined copy of AccessibilityArchivableViewAttachment?(v161, 0, 0, v142);
    outlined copy of Environment<AppIntentExecutor?>.Content(v148, 0, 0);
    uint64_t v149 = swift_bridgeObjectRetain();
    uint64_t v179 = v136;
    double v150 = MEMORY[0x18C114450](v149);
    uint64_t v152 = v151;
    v144[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v144[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    uint64_t v153 = swift_allocObject();
    v144[2] = v153;
    *(void *)(v153 + 16) = v148;
    *(void *)(v153 + 24) = 0;
    *(unsigned char *)(v153 + 32) = 0;
    *(void *)(v153 + 40) = v142;
    *(_DWORD *)(v153 + 48) = v145;
    *(double *)(v153 + 56) = v150;
    *(void *)(v153 + 64) = v152;
    *(void *)&long long v187 = v144;
    *((void *)&v187 + 1) = 0x4000000C00000000;
    *(void *)&long long v188 = v139;
    BYTE10(v188) = v141;
    WORD4(v188) = v140;
    LODWORD(v208) = v145;
    *(void *)&long long v186 = v160;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v187) = v182;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v154 = v198;
    unint64_t v155 = v199;
    long long v187 = v195;
    long long v188 = v196;
    uint64_t v189 = v197;
    uint64_t v190 = v198;
    long long v191 = v199;
    char v193 = v201;
    __int16 v192 = v200;
    int v194 = v202;
    outlined copy of DisplayList.Item.Value(v198, v199);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v148, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v148, 0, 0, v142);
    outlined consume of DisplayList.Item.Value(v154, v155);
    outlined consume of DisplayList.Item.Value(v179, v181);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v139 = v186;
    __int16 v140 = WORD4(v186);
    char v141 = BYTE10(v186);
  }
  char v156 = v159;
  *long long v159 = v139;
  *((_WORD *)v156 + 4) = v140;
  *((unsigned char *)v156 + 10) = v141;
  return result;
}

void specialized DisplayListTransform.value.getter(uint64_t a1@<X8>)
{
  void (*v23)(long long *__return_ptr, uint64_t);
  uint64_t v24;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  __int16 v29;
  char v30;
  uint64_t v31;
  void *v32;
  void (*v33)(long long *__return_ptr, long long *, uint64_t);
  char *v34;
  void *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  id v48;
  void *v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  char *v53;
  void *v54;
  void *v55;
  char *v56;
  uint64_t v57;
  long long v58;
  char *v59;
  id v60;
  unint64_t v61;
  id v62;
  void *v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  int *v67;
  long long *v68;
  long long v69;
  CGFloat v70;
  double v71;
  CGFloat v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  void *v76;
  uint64_t *v77;
  uint64_t KeyPath;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  void (*v85)(long long *__return_ptr, uint64_t, uint64_t);
  id v86;
  id v87;
  int v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  char *v92;
  char *v93;
  uint64_t v94;
  uint64_t v95;
  __int16 v96;
  char v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  long long v101;
  char *v102;
  uint64_t v103;
  char *isUniquelyReferenced_nonNull_native;
  uint64_t v105;
  BOOL v106;
  char *v107;
  int64_t v108;
  char v109;
  uint64_t v110;
  int64_t v111;
  uint64_t v112;
  void **v113;
  void *v114;
  uint64_t v115;
  unint64_t v116;
  char v117;
  uint64_t v118;
  uint64_t v119;
  id v120;
  id v121;
  uint64_t v122;
  id v123;
  id v124;
  uint64_t (*v125)(void, uint64_t);
  uint64_t v126;
  uint64_t v127;
  char v128;
  char v129;
  uint64_t *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  int *v137;
  int v138;
  long long *v139;
  long long v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  uint64_t v145;
  __int16 v146;
  char v147;
  uint64_t v148;
  uint64_t v149;
  void *v150;
  int v151;
  long long *v152;
  long long v153;
  uint64_t v154;
  uint64_t v155;
  double v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  unint64_t v161;
  void *v162;
  uint64_t v163;
  int v164;
  int v165;
  void *v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  int *v170;
  uint64_t v171;
  char *v172;
  void *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  void *v177;
  uint64_t v178;
  id v179;
  int v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  long long v187;
  long long v188;
  long long v189;
  long long v190;
  long long v191;
  long long v192;
  uint64_t v193;
  uint64_t v194;
  long long v195;
  __int16 v196;
  char v197;
  int v198;
  long long v199;
  long long v200;
  uint64_t v201;
  uint64_t v202;
  long long v203;
  __int16 v204;
  char v205;
  int v206;
  long long v207;
  unsigned char v208[24];
  uint64_t v209;
  long long v210;
  uint64_t v211;
  uint64_t v212;
  char *v213;
  uint64_t v214;
  __int16 v215;
  char v216;
  long long v217;

  uint64_t v3 = type metadata accessor for AccessibilityNodeAttachment();
  long long v182 = *(void *)(v3 - 8);
  long long v183 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (uint64_t *)((char *)&v163 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v6);
  uint64_t v185 = (uint64_t)&v163 - v7;
  uint64_t v170 = v1;
  LODWORD(v8) = *MEMORY[0x1E4F4E7A0];
  if (v1[12] == *MEMORY[0x1E4F4E7A0])
  {
    DisplayList.init()();
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    __int16 v10 = *(_WORD *)(Value + 8);
    char v11 = *(unsigned char *)(Value + 10);
    v214 = *(void *)Value;
    v215 = v10;
    v216 = v11;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = v170;
  uint64_t v13 = MEMORY[0x1E4FBC860];
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v170[14] != v8)
  {
    uint64_t v14 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
    uint64_t v12 = v170;
  }
  long long v181 = v12[11];
  uint64_t v207 = *(_OWORD *)AGGraphGetValue();
  if ((EnvironmentValues.accessibilityEnabled.getter() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    unint64_t v29 = v215;
    uint64_t v30 = v216;
    *(void *)a1 = v214;
    *(_WORD *)(a1 + 8) = v29;
    *(unsigned char *)(a1 + 10) = v30;
    return;
  }
  v213 = (char *)v13;
  uint64_t v15 = (char *)((unint64_t)v14 >> 62);
  uint64_t v166 = (void *)a1;
  if ((unint64_t)v14 >> 62) {
    goto LABEL_153;
  }
  *(void *)&uint64_t v189 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
LABEL_9:
  __int16 v16 = v170;
  int v17 = v170[7];
  int v18 = (uint64_t **)AGGraphGetValue();
  unsigned int v19 = *v18;
  uint64_t v20 = **v18;
  int64_t v21 = *(uint64_t (**)(uint64_t))(v20 + 80);
  uint64_t v22 = v20 + 80;
  swift_retain();
  LODWORD(v21) = v21(v14);
  swift_release();
  uint64_t v177 = v5;
  uint64_t v165 = (int)v21;
  if (v21)
  {
    uint64_t v23 = *(void (**)(long long *__return_ptr, uint64_t))(**(void **)AGGraphGetValue() + 88);
    swift_retain();
    v23(&v207, v14);
    swift_release();
    swift_bridgeObjectRelease();
    if (v16[13] != v8)
    {
      double v24 = AGGraphGetValue();
      int64_t v26 = *(void *)v24;
      uint64_t v25 = *(void **)(v24 + 8);
      if (!*(unsigned char *)(v24 + 16))
      {
        double v62 = v25;
        swift_bridgeObjectRetain();
        uint64_t v169 = 0;
LABEL_63:
        *(void *)&long long v199 = v26;
        AccessibilityProperties.merge(with:)((uint64_t *)&v199);
        long long v199 = v207;
        CGFloat v63 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v63)
        {
          *(void *)&long long v199 = v26;
          *((void *)&v199 + 1) = v25;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }
        swift_bridgeObjectRelease();

LABEL_67:
        uint64_t v22 = *((void *)&v207 + 1);
        unsigned int v19 = (uint64_t *)v207;
        uint64_t v15 = (char *)*((id *)&v207 + 1);
        swift_bridgeObjectRetain();
        uint64_t v14 = MEMORY[0x1E4FBC860];
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          goto LABEL_156;
        }
        goto LABEL_68;
      }
      if (*(unsigned char *)(v24 + 16) == 1)
      {
        uint64_t v27 = swift_bridgeObjectRetain();
        char v28 = specialized Sequence.compactMap<A>(_:)(v27);
        uint64_t v169 = 0;
        static AccessibilityAttachment.combine(_:)(v28, (uint64_t *)&v199);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v26, v25, 1);
        uint64_t v25 = (void *)*((void *)&v199 + 1);
        int64_t v26 = v199;
        goto LABEL_63;
      }
    }
    uint64_t v169 = 0;
    goto LABEL_67;
  }
  if (AGGraphGetCurrentAttribute() == v8) {
    goto LABEL_155;
  }
  AccessibilityAttachmentToken.init<A>(_:)();
  int64_t v184 = v207;
  long long v180 = BYTE8(v207);
  if (v15)
  {
    swift_bridgeObjectRetain();
    BOOL v31 = _CocoaArrayWrapper.endIndex.getter();
    swift_bridgeObjectRelease();
    if (v31 < 0)
    {
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
      return;
    }
  }
  else
  {
    BOOL v31 = *(void *)((v14 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v31)
  {
    swift_bridgeObjectRelease();
    uint64_t v169 = 0;
    goto LABEL_71;
  }
  LODWORD(v188) = v17;
  uint64_t v32 = 0;
  uint64_t v169 = 0;
  LODWORD(v187) = v170[13];
  uint64_t v178 = v14 & 0xFFFFFFFFFFFFFF8;
  uint64_t v179 = (id)(v14 & 0xC000000000000001);
  LODWORD(v186) = v8;
  while (2)
  {
    uint64_t v5 = (void *)v31;
    uint64_t v15 = *(char **)AGGraphGetValue();
    if ((void)v189 != 1)
    {
      swift_retain();
      goto LABEL_36;
    }
    *(void *)&uint64_t v207 = v184;
    BYTE8(v207) = v180;
    char v33 = *(void (**)(long long *__return_ptr, long long *, uint64_t))(*(void *)v15 + 120);
    swift_retain_n();
    v33(&v199, &v207, v14);
    swift_release();
    if ((v199 & 0x40) != 0) {
      goto LABEL_36;
    }
    if (v179)
    {
      unint64_t v34 = (char *)MEMORY[0x18C117680](0, v14);
    }
    else
    {
      if (!*(void *)(v178 + 16)) {
        goto LABEL_149;
      }
      unint64_t v34 = (char *)*(id *)(v14 + 32);
    }
    char v35 = v34;
    long long v36 = &v34[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_attachmentsStorage];
    swift_beginAccess();
    uint64_t v37 = *(void *)v36;
    uint64_t v38 = *(void *)(*(void *)v36 + 16);
    if (!v38)
    {
      swift_bridgeObjectRetain();
LABEL_49:

      swift_bridgeObjectRelease();
      if (v179)
      {
        swift_retain();
        long long v53 = (char *)MEMORY[0x18C117680](0, v14);
      }
      else
      {
        uint64_t v54 = *(void **)(v14 + 32);
        swift_retain();
        long long v53 = v54;
      }
      id v55 = v53;
      LODWORD(v8) = v186;
      unint64_t v56 = &v53[OBJC_IVAR____TtC7SwiftUI17AccessibilityNode_children];
      swift_beginAccess();
      unint64_t v57 = *(void *)v56;
      swift_bridgeObjectRetain();

      (*(void (**)(long long *__return_ptr, uint64_t))(*(void *)v15 + 88))(&v207, v57);
      swift_release_n();
      swift_bridgeObjectRelease();
      if (v187 != v8) {
        goto LABEL_37;
      }
      goto LABEL_53;
    }
    swift_bridgeObjectRetain();
    unint64_t v8 = v37 + 40 * v38;
    while (1)
    {
      if (v38 > *(void *)(v37 + 16))
      {
        __break(1u);
LABEL_149:
        __break(1u);
LABEL_150:
        __break(1u);
LABEL_151:
        __break(1u);
LABEL_152:
        __break(1u);
LABEL_153:
        swift_bridgeObjectRetain();
        *(void *)&uint64_t v189 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
      double v39 = *(void *)v8;
      *(void *)&uint64_t v207 = *(void *)(v8 - 8);
      *((void *)&v207 + 1) = v39;
      uint64_t v40 = (void *)AccessibilityAttachment.platformElement.getter();

      if (v40) {
        break;
      }
      v8 -= 40;
      if (!--v38) {
        goto LABEL_49;
      }
    }
    if (v38 > *(void *)(v37 + 16)) {
      goto LABEL_158;
    }
    uint64_t v50 = *(void *)v8;
    *(void *)&uint64_t v207 = *(void *)(v8 - 8);
    *((void *)&v207 + 1) = v50;
    id v51 = AccessibilityAttachment.platformElement.getter();
    if (!v51) {
      goto LABEL_159;
    }
    uint64_t v52 = (void *)v51;

    swift_bridgeObjectRelease();
    LODWORD(v8) = v186;
LABEL_36:
    uint64_t v41 = v187;
    AccessibilityAttachment.init()();
    swift_release();
    if (v41 != v8)
    {
LABEL_37:
      uint64_t v42 = AGGraphGetValue();
      uint64_t v44 = *(void *)v42;
      BOOL v43 = *(void **)(v42 + 8);
      if (!*(unsigned char *)(v42 + 16))
      {
        uint64_t v48 = v43;
        swift_bridgeObjectRetain();
        goto LABEL_41;
      }
      if (*(unsigned char *)(v42 + 16) == 1)
      {
        uint64_t v45 = swift_bridgeObjectRetain();
        long long v46 = v169;
        uint64_t v47 = specialized Sequence.compactMap<A>(_:)(v45);
        uint64_t v169 = v46;
        static AccessibilityAttachment.combine(_:)(v47, (uint64_t *)&v199);
        swift_bridgeObjectRelease();
        outlined consume of AccessibilityAttachment.Tree(v44, v43, 1);
        BOOL v43 = (void *)*((void *)&v199 + 1);
        uint64_t v44 = v199;
LABEL_41:
        *(void *)&long long v199 = v44;
        AccessibilityProperties.merge(with:)((uint64_t *)&v199);
        long long v199 = v207;
        uint64_t v49 = (void *)AccessibilityAttachment.platformElement.getter();

        if (!v49)
        {
          *(void *)&long long v199 = v44;
          *((void *)&v199 + 1) = v43;
          if (AccessibilityAttachment.platformElement.getter()) {
            AccessibilityAttachment.platformElement.setter();
          }
        }
        swift_bridgeObjectRelease();
      }
    }
LABEL_53:
    uint64_t v58 = v207;
    long long v199 = v207;
    if (AccessibilityAttachment.isEmpty.getter())
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v59 = v213;
      long long v60 = *((id *)&v58 + 1);
      swift_bridgeObjectRetain();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v59 + 2) + 1, 1, v59);
      }
      unint64_t v8 = *((void *)v59 + 2);
      CGFloat v61 = *((void *)v59 + 3);
      if (v8 >= v61 >> 1) {
        uint64_t v59 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v61 > 1), v8 + 1, 1, v59);
      }
      *((void *)v59 + 2) = v8 + 1;
      *(_OWORD *)&v59[16 * v8 + 32] = v58;

      swift_bridgeObjectRelease();
      v213 = v59;
      LODWORD(v8) = v186;
    }
    uint64_t v32 = (void *)((char *)v32 + 1);
    BOOL v31 = (uint64_t)v5;
    if (v32 != v5) {
      continue;
    }
    break;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = v177;
LABEL_71:
  while (1)
  {
    unint64_t v67 = v170;
    uint64_t v207 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    uint64_t v207 = *(_OWORD *)AGGraphGetValue();
    MEMORY[0x18C10C240]();
    uint64_t v164 = v67[8];
    int v68 = (long long *)AGGraphGetValue();
    uint64_t v69 = v68[1];
    uint64_t v207 = *v68;
    *(_OWORD *)uint64_t v208 = v69;
    int v70 = MEMORY[0x18C114450]();
    char v72 = v71;
    DisplayList.Version.init(forUpdate:)();
    long long v180 = *((unsigned __int8 *)v67 + 4);
    uint64_t v167 = v207;
    if ((v180 & 1) == 0) {
      break;
    }
    int v173 = (void *)*((void *)v213 + 2);
    if (!v173) {
      break;
    }
    int v172 = v213 + 32;
    long long v163 = (uint64_t)v213;
    swift_bridgeObjectRetain_n();
    unint64_t v8 = 0;
    unint64_t v168 = 0;
    int v73 = 1;
    uint64_t v171 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      unint64_t v74 = &v172[16 * v8];
      uint64_t v75 = *(void *)v74;
      uint64_t v76 = (void *)*((void *)v74 + 1);
      id v77 = (uint64_t *)AGGraphGetValue();
      uint64_t v22 = *v77;
      long long v186 = v77[1];
      uint64_t KeyPath = swift_getKeyPath();
      uint64_t v79 = *(void *)(v75 + 16);
      int64_t v184 = v75;
      uint64_t v178 = v8;
      if (!v79) {
        goto LABEL_80;
      }
      uint64_t v80 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.ActionsKey);
      if (v81)
      {
        outlined init with copy of TableColumnList(*(void *)(v75 + 56) + 40 * v80, (uint64_t)&v207);
        uint64_t v82 = *(void *)&v208[8];
        int v83 = *(void *)&v208[16];
        __swift_project_boxed_opaque_existential_1(&v207, *(uint64_t *)&v208[8]);
        int v84 = v73;
        uint64_t v85 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(v83 + 8);
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        uint64_t v86 = v76;
        swift_retain();
        v85(&v199, v82, v83);
        int v73 = v84;
        unint64_t v8 = v178;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v207);
      }
      else
      {
LABEL_80:
        long long v199 = 0u;
        __int16 v200 = 0u;
        swift_retain();
        swift_retain();
        swift_bridgeObjectRetain_n();
        __int16 v87 = v76;
        swift_retain();
      }
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v171, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [AnyAccessibilityAction], (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBB320]);
      char v88 = swift_dynamicCast();
      uint64_t v179 = v76;
      if (v88)
      {
        uint64_t v89 = v207;
      }
      else
      {
        *(void *)&uint64_t v207 = 0;
        if (one-time initialization token for defaultValue != -1) {
          swift_once();
        }
        uint64_t v89 = static AccessibilityProperties.ActionsKey.defaultValue;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
      }
      swift_bridgeObjectRelease();
      unint64_t v90 = *(void *)(v89 + 16);
      if (v90)
      {
        uint64_t v175 = KeyPath;
        uint64_t v176 = v73;
        unint64_t v91 = (void *)(v89 + 32);
        long long v174 = v89;
        swift_bridgeObjectRetain();
        long long v92 = (char *)MEMORY[0x1E4FBC860];
        do
        {
          uint64_t v95 = v91[3];
          uint64_t v94 = v91[4];
          __swift_project_boxed_opaque_existential_1(v91, v95);
          *(void *)&long long v199 = v22;
          *((void *)&v199 + 1) = v186;
          (*(void (**)(long long *__return_ptr, long long *, uint64_t, uint64_t))(v94 + 96))(&v207, &v199, v95, v94);
          if ((void)v210)
          {
            uint64_t v189 = v210;
            char v96 = *(_WORD *)v208;
            long long v187 = v207;
            long long v188 = *(_OWORD *)&v208[8];
            uint64_t v97 = v209;
            uint64_t v98 = v211;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v92 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v92 + 2) + 1, 1, v92);
            }
            char v100 = *((void *)v92 + 2);
            int64_t v99 = *((void *)v92 + 3);
            uint64_t v101 = v189;
            if (v100 >= v99 >> 1)
            {
              int64_t v102 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v99 > 1), v100 + 1, 1, v92);
              uint64_t v101 = v189;
              long long v92 = v102;
            }
            *((void *)v92 + 2) = v100 + 1;
            uint64_t v93 = &v92[72 * v100];
            *((_OWORD *)v93 + 2) = v187;
            *((_WORD *)v93 + 24) = v96;
            *(_OWORD *)(v93 + 56) = v188;
            v93[72] = v97 & 1;
            *((_OWORD *)v93 + 5) = v101;
            *((void *)v93 + 12) = v98;
          }
          v91 += 6;
          --v90;
        }
        while (v90);
        swift_bridgeObjectRelease();
        uint64_t KeyPath = v175;
        int v73 = v176;
        unint64_t v8 = v178;
      }
      else
      {
        long long v92 = (char *)MEMORY[0x1E4FBC860];
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v103 = *((void *)v92 + 2);
      swift_release();
      uint64_t v5 = v177;
      if (v103) {
        break;
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_75:

LABEL_76:
      if ((void *)++v8 == v173)
      {
        swift_bridgeObjectRelease_n();
        goto LABEL_119;
      }
    }
    if (!v73)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_116;
    }
    if (v73 == 1)
    {
      swift_bridgeObjectRelease();

      unint64_t v168 = KeyPath;
      int v73 = (uint64_t)v92;
      goto LABEL_76;
    }
    unsigned int v19 = (uint64_t *)*((void *)v92 + 2);
    uint64_t v15 = *(char **)(v73 + 16);
    uint64_t v14 = (uint64_t)v19 + (void)v15;
    if (__OFADD__(v15, v19)) {
      goto LABEL_150;
    }
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
    if (isUniquelyReferenced_nonNull_native && v14 <= *(void *)(v73 + 24) >> 1)
    {
      if (!*((void *)v92 + 2)) {
        goto LABEL_114;
      }
    }
    else
    {
      if ((uint64_t)v15 <= v14) {
        uint64_t v108 = (int64_t)v19 + (void)v15;
      }
      else {
        uint64_t v108 = (int64_t)v15;
      }
      int v73 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v108, 1, (char *)v73);
      if (!*((void *)v92 + 2))
      {
LABEL_114:
        if (v19) {
          goto LABEL_151;
        }
LABEL_115:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease_n();
LABEL_116:
        swift_release();
        goto LABEL_75;
      }
    }
    if ((*(void *)(v73 + 24) >> 1) - *(void *)(v73 + 16) < (uint64_t)v19) {
      goto LABEL_152;
    }
    swift_arrayInitWithCopy();
    if (!v19) {
      goto LABEL_115;
    }
    char v105 = *(void *)(v73 + 16);
    char v106 = __OFADD__(v105, v19);
    long long v107 = (char *)v19 + v105;
    if (!v106)
    {
      *(void *)(v73 + 16) = v107;
      goto LABEL_115;
    }
    __break(1u);
LABEL_155:
    __break(1u);
LABEL_156:
    uint64_t v14 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (char *)v14);
LABEL_68:
    uint64_t v65 = *(void *)(v14 + 16);
    uint64_t v64 = *(void *)(v14 + 24);
    if (v65 >= v64 >> 1) {
      uint64_t v14 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v64 > 1), v65 + 1, 1, (char *)v14);
    }
    *(void *)(v14 + 16) = v65 + 1;
    int v66 = (char *)(v14 + 16 * v65);
    *((void *)v66 + 4) = v19;
    *((void *)v66 + 5) = v22;

    swift_bridgeObjectRelease();
    v213 = (char *)v14;
  }
  unint64_t v168 = 0;
  int v73 = 1;
LABEL_119:
  uint64_t v176 = v73;
  if (v165) {
    unint64_t v109 = 1;
  }
  else {
    unint64_t v109 = specialized DisplayListTransform.mergeAttachments(list:attachments:frame:)(&v214, (uint64_t *)&v213, v70, v72);
  }
  char v110 = (uint64_t)v213;
  uint64_t v111 = *((void *)v213 + 2);
  uint64_t v112 = MEMORY[0x1E4FBC860];
  if (v111)
  {
    char v212 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v111, 0);
    v217 = *(_OWORD *)(v170 + 2);
    LODWORD(v189) = v109 & 1;
    long long v186 = v110;
    id v113 = (void **)(v110 + 40);
    *(void *)&long long v188 = MEMORY[0x1E4FBC840] + 8;
    while (1)
    {
      uint64_t v115 = (uint64_t)*(v113 - 1);
      id v114 = *v113;
      if (*(void *)(v115 + 16)
        && (id v116 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&type metadata for AccessibilityProperties.UIKitTraitsKey),
            (v117 & 1) != 0))
      {
        outlined init with copy of TableColumnList(*(void *)(v115 + 56) + 40 * v116, (uint64_t)&v207);
        long long v118 = *(void *)&v208[8];
        uint64_t v119 = *(void *)&v208[16];
        __swift_project_boxed_opaque_existential_1(&v207, *(uint64_t *)&v208[8]);
        *(void *)&long long v187 = *(void *)(v119 + 8);
        uint64_t v120 = v114;
        swift_bridgeObjectRetain_n();
        char v121 = v120;
        char v122 = v119;
        uint64_t v5 = v177;
        ((void (*)(long long *__return_ptr, uint64_t, uint64_t))v187)(&v199, v118, v122);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v207);
      }
      else
      {
        long long v199 = 0u;
        __int16 v200 = 0u;
        uint64_t v123 = v114;
        swift_bridgeObjectRetain_n();
        uint64_t v124 = v123;
      }
      uint64_t v125 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for Any?, v188, MEMORY[0x1E4FBB718]);
      _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, &lazy cache variable for type metadata for AccessibilityUIKitTraits?, (uint64_t)&type metadata for AccessibilityUIKitTraits, v125);
      if (swift_dynamicCast())
      {
        v208[1] = 0;
        uint64_t v127 = *((void *)&v207 + 1);
        uint64_t v126 = v207;
        unint64_t v128 = v208[0];
        swift_bridgeObjectRelease();
        if ((v128 & 1) == 0)
        {
          unint64_t v129 = 0;
          if ((v180 & 1) == 0) {
            goto LABEL_134;
          }
          goto LABEL_131;
        }
      }
      else
      {
        uint64_t v207 = 0uLL;
        *(_WORD *)uint64_t v208 = 256;
        swift_bridgeObjectRelease();
      }
      uint64_t v126 = 0;
      uint64_t v127 = 0;
      unint64_t v129 = 1;
      if ((v180 & 1) == 0)
      {
LABEL_134:
        *uint64_t v5 = v115;
        v5[1] = v114;
        goto LABEL_135;
      }
LABEL_131:
      uint64_t v130 = (uint64_t *)AGGraphGetValue();
      int v132 = *v130;
      uint64_t v131 = v130[1];
      *(void *)&long long v199 = v115;
      *((void *)&v199 + 1) = v114;
      uint64_t v207 = 0u;
      *(_OWORD *)uint64_t v208 = 0u;
      *(void *)&v208[16] = v126;
      uint64_t v209 = v127;
      LOBYTE(v210) = v129;
      *(void *)&long long v191 = v132;
      *((void *)&v191 + 1) = v131;
      uint64_t v190 = v217;
      swift_retain();
      swift_retain();
      CodableAccessibilityAttachmentStorage.init(_:platformStorage:in:idiom:)();
LABEL_135:
      type metadata accessor for AccessibilityNodeAttachment.Storage();
      swift_storeEnumTagMultiPayload();
      Swift::Int v133 = v183;
      *((unsigned char *)v5 + *(int *)(v183 + 20)) = v189;
      *((unsigned char *)v5 + *(int *)(v133 + 24)) = 0;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v5, v185, MEMORY[0x1E4F40FA8]);
      swift_bridgeObjectRelease();

      uint64_t v112 = v212;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v112 + 16) + 1, 1);
        uint64_t v112 = v212;
      }
      uint64_t v135 = *(void *)(v112 + 16);
      long long v134 = *(void *)(v112 + 24);
      if (v135 >= v134 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v134 > 1, v135 + 1, 1);
        uint64_t v112 = v212;
      }
      v113 += 2;
      *(void *)(v112 + 16) = v135 + 1;
      _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(v185, v112+ ((*(unsigned __int8 *)(v182 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80))+ *(void *)(v182 + 72) * v135, MEMORY[0x1E4F40FA8]);
      if (!--v111)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v136 = swift_allocObject();
  *(void *)(v136 + 16) = v112;
  *(void *)&long long v199 = v136;
  *((void *)&v199 + 1) = 0x4000000D00000000;
  *(void *)&__int16 v200 = v214;
  BYTE10(v200) = v216;
  WORD4(v200) = v215;
  if (v176 == 1)
  {
    unint64_t v137 = v170;
    int v138 = *v170;
    swift_bridgeObjectRetain();
  }
  else
  {
    uint64_t v139 = (long long *)AGGraphGetValue();
    __int16 v140 = v139[1];
    uint64_t v207 = *v139;
    *(_OWORD *)uint64_t v208 = v140;
    char v141 = swift_bridgeObjectRetain();
    MEMORY[0x18C114450](v141);
    int v138 = 0;
    unint64_t v137 = v170;
  }
  LODWORD(v190) = v138;
  *(void *)&long long v191 = v167;
  DisplayList.Item.init(_:frame:identity:version:)();
  LODWORD(v189) = *((unsigned __int8 *)v137 + 24);
  LOBYTE(v199) = v189;
  DisplayList.Item.canonicalize(options:)();
  uint64_t v142 = v209;
  uint64_t v143 = v210;
  uint64_t v144 = (unsigned __int16)v211 | (BYTE2(v211) << 16);
  long long v199 = v207;
  __int16 v200 = *(_OWORD *)v208;
  char v201 = *(void *)&v208[16];
  int v202 = v209;
  long long v203 = v210;
  uint64_t v205 = BYTE2(v211);
  v204 = v211;
  long long v206 = HIDWORD(v211);
  outlined copy of DisplayList.Item.Value(v209, v210);
  DisplayList.init(_:)();
  swift_bridgeObjectRelease();
  int v145 = v191;
  uint64_t v146 = WORD4(v191);
  long long v147 = BYTE10(v191);
  uint64_t v148 = v176;
  if (v176 == 1)
  {
    outlined consume of DisplayList.Item.Value(v142, v143);
  }
  else
  {
    uint64_t v149 = swift_allocObject();
    LODWORD(v188) = v144;
    double v150 = (void *)v149;
    uint64_t v151 = *v137;
    uint64_t v152 = (long long *)AGGraphGetValue();
    uint64_t v153 = v152[1];
    long long v199 = *v152;
    __int16 v200 = v153;
    swift_bridgeObjectRetain();
    *(void *)&long long v187 = v143;
    uint64_t v154 = v168;
    outlined copy of AccessibilityArchivableViewAttachment?(v168, 0, 0, v148);
    outlined copy of Environment<AppIntentExecutor?>.Content(v154, 0, 0);
    unint64_t v155 = swift_bridgeObjectRetain();
    long long v186 = v142;
    char v156 = MEMORY[0x18C114450](v155);
    int v158 = v157;
    v150[5] = &type metadata for ArchivableAccessibilityViewModifier.Factory;
    v150[6] = lazy protocol witness table accessor for type ArchivableAccessibilityViewModifier.Factory and conformance ArchivableAccessibilityViewModifier.Factory();
    long long v159 = swift_allocObject();
    v150[2] = v159;
    *(void *)(v159 + 16) = v154;
    *(void *)(v159 + 24) = 0;
    *(unsigned char *)(v159 + 32) = 0;
    *(void *)(v159 + 40) = v148;
    *(_DWORD *)(v159 + 48) = v151;
    *(double *)(v159 + 56) = v156;
    *(void *)(v159 + 64) = v158;
    *(void *)&long long v191 = v150;
    *((void *)&v191 + 1) = 0x4000000C00000000;
    *(void *)&__int16 v192 = v145;
    BYTE10(v192) = v147;
    WORD4(v192) = v146;
    LODWORD(v212) = v151;
    *(void *)&uint64_t v190 = v167;
    swift_retain();
    DisplayList.Item.init(_:frame:identity:version:)();
    LOBYTE(v191) = v189;
    DisplayList.Item.canonicalize(options:)();
    uint64_t v160 = v202;
    uint64_t v161 = v203;
    long long v191 = v199;
    __int16 v192 = v200;
    char v193 = v201;
    int v194 = v202;
    long long v195 = v203;
    uint64_t v197 = v205;
    long long v196 = v204;
    uint64_t v198 = v206;
    outlined copy of DisplayList.Item.Value(v202, v203);
    DisplayList.init(_:)();
    swift_release();
    outlined consume of Environment<AppIntentExecutor?>.Content(v154, 0, 0);
    swift_bridgeObjectRelease();
    outlined consume of AccessibilityArchivableViewAttachment?(v154, 0, 0, v148);
    outlined consume of DisplayList.Item.Value(v160, v161);
    outlined consume of DisplayList.Item.Value(v186, v187);
    swift_bridgeObjectRelease();
    int v145 = v190;
    uint64_t v146 = WORD4(v190);
    long long v147 = BYTE10(v190);
  }
  uint64_t v162 = v166;
  *uint64_t v166 = v145;
  *((_WORD *)v162 + 4) = v146;
  *((unsigned char *)v162 + 10) = v147;
}

uint64_t specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(void *a1, __n128 a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t a9, char a10, char a11, char a12, uint64_t a13, uint64_t a14, char a15)
{
  memset(v88, 0, sizeof(v88));
  __n128 v89 = a2;
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0((uint64_t)v88, (uint64_t)v86, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  if (v87 == 7)
  {
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v88, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    int v18 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
    uint64_t v19 = *((void *)v18 + 2);
    if (!v19) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v86, (uint64_t)v85);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_18834BB80;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v85, v20 + 32);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v88, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    int v18 = (char *)v20;
    uint64_t v19 = *(void *)(v20 + 16);
    if (!v19) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v67 = a5;
  uint64_t v21 = (uint64_t)(v18 + 32);
  int v84 = a1;
  char v66 = a8;
  while (1)
  {
    uint64_t v72 = v21;
    uint64_t v73 = v19;
    outlined init with copy of ToolbarPlacement.Role(v21, (uint64_t)v88);
    uint64_t v23 = *a1;
    if (*(void *)(*a1 + 16) && (uint64_t v24 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v88), (v25 & 1) != 0))
    {
      uint64_t v26 = *(void *)(v23 + 56) + 80 * v24;
      char v27 = *(unsigned char *)v26;
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t v29 = *(void *)(v26 + 16);
      char v30 = *(unsigned char *)(v26 + 24);
      uint64_t v79 = *(void *)(v26 + 32);
      uint64_t v31 = *(void *)(v26 + 48);
      char v81 = *(unsigned char *)(v26 + 40);
      char v82 = *(unsigned char *)(v26 + 56);
      char v32 = *(unsigned char *)(v26 + 57);
      char v33 = *(unsigned char *)(v26 + 58);
      char v34 = *(unsigned char *)(v26 + 72);
      uint64_t v83 = *(void *)(v26 + 64);
      swift_retain();
      uint64_t v35 = v28;
      uint64_t v36 = v79;
      swift_retain();
      swift_retain();
    }
    else
    {
      uint64_t v31 = 0;
      char v33 = 0;
      uint64_t v36 = 0;
      char v30 = 0;
      char v34 = 0;
      char v27 = 0;
      uint64_t v83 = 0;
      uint64_t v35 = 0;
      uint64_t v29 = 0;
      char v32 = 2;
      char v81 = 1;
      char v82 = 1;
    }
    if (a4 == 3) {
      char v37 = v27;
    }
    else {
      char v37 = a4;
    }
    char v80 = v37;
    if (v67)
    {
      swift_retain();
      swift_release();
      uint64_t v29 = v67;
    }
    if (a6 == 4) {
      char v38 = v30;
    }
    else {
      char v38 = a6;
    }
    char v75 = v38;
    uint64_t v39 = a7;
    if (a8) {
      uint64_t v39 = v36;
    }
    uint64_t v74 = v39;
    uint64_t v40 = a9;
    if (a10) {
      uint64_t v40 = v31;
    }
    uint64_t v76 = v40;
    if (a11 == 2) {
      char v41 = v32;
    }
    else {
      char v41 = a11;
    }
    if (a12 == 3) {
      char v42 = v33;
    }
    else {
      char v42 = a12;
    }
    char v77 = v42;
    char v78 = v41;
    if (a13)
    {
      swift_retain();
      swift_release();
      uint64_t v35 = a13;
    }
    uint64_t v43 = v83;
    if (a14)
    {
      swift_retain();
      swift_release();
      uint64_t v43 = a14;
    }
    char v44 = a15 == 3 ? v34 : a15;
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v88, (uint64_t)v86);
    uint64_t v45 = v29;
    swift_retain();
    uint64_t v46 = v43;
    swift_retain();
    uint64_t v47 = v35;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v85[0] = *v84;
    uint64_t v49 = v85[0];
    *int v84 = 0x8000000000000000;
    unint64_t v51 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v86);
    uint64_t v52 = *(void *)(v49 + 16);
    BOOL v53 = (v50 & 1) == 0;
    uint64_t v54 = v52 + v53;
    if (__OFADD__(v52, v53)) {
      break;
    }
    char v55 = v50;
    if (*(void *)(v49 + 24) >= v54)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v54, isUniquelyReferenced_nonNull_native);
      uint64_t v56 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v86);
      if ((v55 & 1) != (v57 & 1)) {
        goto LABEL_49;
      }
      unint64_t v51 = v56;
    }
    char v58 = a8 & v81;
    char v59 = a10 & v82;
    long long v60 = (void *)v85[0];
    if (v55)
    {
      uint64_t v22 = *(void *)(v85[0] + 56) + 80 * v51;
      swift_release();
      swift_release();
      swift_release();
      *(unsigned char *)uint64_t v22 = v80;
      *(void *)(v22 + 8) = v47;
      *(void *)(v22 + 16) = v45;
      *(unsigned char *)(v22 + 24) = v75;
      *(void *)(v22 + 32) = v74;
      *(unsigned char *)(v22 + 40) = v58;
      *(void *)(v22 + 48) = v76;
      *(unsigned char *)(v22 + 56) = v59;
      *(unsigned char *)(v22 + 57) = v78;
      *(unsigned char *)(v22 + 58) = v77;
      *(void *)(v22 + 64) = v46;
      *(unsigned char *)(v22 + 72) = v44;
    }
    else
    {
      *(void *)(v85[0] + 8 * (v51 >> 6) + 64) |= 1 << v51;
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v86, v60[6] + 40 * v51);
      uint64_t v61 = v60[7] + 80 * v51;
      *(unsigned char *)uint64_t v61 = v80;
      *(void *)(v61 + 8) = v47;
      *(void *)(v61 + 16) = v45;
      *(unsigned char *)(v61 + 24) = v75;
      *(void *)(v61 + 32) = v74;
      *(unsigned char *)(v61 + 40) = v58;
      *(void *)(v61 + 48) = v76;
      *(unsigned char *)(v61 + 56) = v59;
      *(unsigned char *)(v61 + 57) = v78;
      *(unsigned char *)(v61 + 58) = v77;
      *(void *)(v61 + 64) = v46;
      *(unsigned char *)(v61 + 72) = v44;
      uint64_t v62 = v60[2];
      BOOL v63 = __OFADD__(v62, 1);
      uint64_t v64 = v62 + 1;
      if (v63) {
        goto LABEL_48;
      }
      v60[2] = v64;
    }
    a1 = v84;
    *int v84 = v60;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v86);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v88);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v21 = v72 + 40;
    uint64_t v19 = v73 - 1;
    a8 = v66;
    if (v73 == 1) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t key path getter for EnvironmentValues.fontModifiers : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.fontModifiers.getter();
  *a1 = result;
  return result;
}

uint64_t key path setter for EnvironmentValues.fontModifiers : EnvironmentValues()
{
  return EnvironmentValues.fontModifiers.setter();
}

uint64_t specialized _TraitWritingTableRowModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v5 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingTableRowModifier<TypeSelectEquivalentKey>, (uint64_t)&type metadata for TypeSelectEquivalentKey, (uint64_t)&protocol witness table for TypeSelectEquivalentKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  outlined copy of Text?(*Value, Value[1], Value[2], Value[3]);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

{
  uint64_t result;
  uint64_t v4;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v4 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  AGGraphGetValue();
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v4;
  return result;
}

{
  uint64_t *Value;
  uint64_t result;
  uint64_t v5;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v5 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<OnInsertTraitKey>, (uint64_t)&type metadata for OnInsertTraitKey, (uint64_t)&protocol witness table for OnInsertTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  outlined copy of PasteHelper?(*Value);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v5;
  return result;
}

{
  uint64_t Value;
  uint64_t result;
  unsigned char v5[48];
  unsigned char v6[48];
  uint64_t v7;

  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v7 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of MultiDatePickerValue<AutomaticMultiDatePickerStyle>(Value, (uint64_t)v6, &lazy cache variable for type metadata for _TraitWritingTableRowModifier<DropOntoTraitKey>, (uint64_t)&type metadata for DropOntoTraitKey, (uint64_t)&protocol witness table for DropOntoTraitKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  outlined init with take of _DraggingModifier?((uint64_t)v6, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for DropOntoConfiguration?, (uint64_t)&type metadata for DropOntoConfiguration);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a2 = v7;
  return result;
}

uint64_t specialized _TraitWritingTableRowModifier.AddTrait.value.getter@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(void)@<X4>, void *a6@<X8>)
{
  if (*MEMORY[0x1E4F4E7A0] == HIDWORD(a1))
  {
    ViewTraitCollection.init()();
  }
  else
  {
    uint64_t v13 = *(void *)AGGraphGetValue();
    swift_bridgeObjectRetain();
  }
  _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(0, a2, a3, a4, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _TraitWritingTableRowModifier);
  uint64_t Value = (void *)AGGraphGetValue();
  a5(*Value);
  uint64_t result = ViewTraitCollection.subscript.setter();
  *a6 = v13;
  return result;
}

uint64_t implicit closure #4 in static UIViewControllerRepresentable._makeView(view:inputs:)()
{
  return _ViewInputs.intern<A>(_:id:)();
}

uint64_t UIViewControllerRepresentableContext.transaction.getter()
{
  return swift_retain();
}

uint64_t UIViewControllerRepresentableContext.animate(changes:completion:)(uint64_t (*a1)(uint64_t), uint64_t a2, uint64_t (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v8 = Transaction.animation.getter();
  if (v8)
  {
    uint64_t v9 = v8;
    uint64_t v10 = Transaction.disablesAnimations.getter();
    if ((v10 & 1) == 0)
    {
      MEMORY[0x1F4188790](v10);
      void v13[2] = a1;
      uint64_t v13[3] = a2;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = a3;
      *(void *)(v12 + 24) = a4;
      outlined copy of AppIntentExecutor?((uint64_t)a3);
      specialized static UIKitAnimationBridge.withAnimation<A>(_:_:completion:)(v9, partial apply for thunk for @callee_guaranteed () -> (@error @owned Error), (uint64_t)v13, (uint64_t)_sSo6UIViewC7SwiftUIE7animate_7changes10completionyAC9AnimationV_yyXEyycSgtFZySb_SbtcfU_TA_0, v12);
      swift_release();
      return swift_release();
    }
    uint64_t v8 = swift_release();
  }
  uint64_t result = a1(v8);
  if (a3) {
    return a3(result);
  }
  return result;
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance GenericViewControllerRepresentable(void *a1@<X8>)
{
  *a1 = qword_1ED4578D8;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance GenericViewControllerRepresentable@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance GenericViewControllerRepresentable()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ContainerViewControllerRepresentable<A>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ContainerViewControllerRepresentable<A>()
{
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance ContainerViewControllerRepresentable<A>()
{
}

void protocol witness for static UIViewControllerRepresentable._layoutOptions(_:) in conformance UIKitAdaptableTabView(void *a1@<X8>)
{
  *a1 = qword_1ED476680;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance UIKitAdaptableTabView@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  int v3 = *a1;
  long long v4 = *(_OWORD *)(a2 + 48);
  uint64_t v7[2] = *(_OWORD *)(a2 + 32);
  _OWORD v7[3] = v4;
  void v7[4] = *(_OWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 80);
  long long v5 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v5;
  return specialized static UIViewControllerRepresentable._makeView(view:inputs:)(v3, (uint64_t)v7, a3);
}

void protocol witness for View.body.getter in conformance UIKitAdaptableTabView()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance BridgedSplitView<A, B>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance BridgedSplitView<A, B>()
{
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance BridgedSplitView<A, B>()
{
}

unsigned char *specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter()
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 8) == 0)
  {
    uint64_t v1 = swift_bridgeObjectRelease();
    return (unsigned char *)MEMORY[0x1F40FF528](v1);
  }
  return result;
}

{
  unsigned char *result;
  uint64_t v1;
  uint64_t vars8;

  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 0x10) == 0)
  {
    uint64_t v1 = swift_bridgeObjectRelease();
    return (unsigned char *)MEMORY[0x1F40FD3F8](v1);
  }
  return result;
}

unsigned char *specialized closure #1 in DynamicHiddenModifier.DynamicTransform.value.getter(void *a1)
{
  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for defaultValue != -1) {
      swift_once();
    }
    uint64_t v3 = *((void *)&static AccessibilityNodesKey.defaultValue + 1);
    *a1 = static AccessibilityNodesKey.defaultValue;
    a1[1] = v3;
    return (unsigned char *)swift_bridgeObjectRetain();
  }
  return result;
}

{
  unsigned char *result;

  uint64_t result = (unsigned char *)AGGraphGetValue();
  if (*result == 1 && (result[8] & 4) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t result = (unsigned char *)static ViewRespondersKey.defaultValue.getter();
    *a1 = result;
  }
  return result;
}

void protocol witness for View.body.getter in conformance NavigationStackRepresentable()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance MultimodalNavigationStackViewHost<A>@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  return static UIViewControllerRepresentable._makeView(view:inputs:)(a1, a2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance MultimodalNavigationStackViewHost<A>()
{
  return static UIViewControllerRepresentable._makeViewList(view:inputs:)();
}

void protocol witness for View.body.getter in conformance MultimodalNavigationStackViewHost<A>()
{
}

double *specialized PlatformViewIdentifiedViews.value.getter@<X0>(uint64_t a1@<X8>)
{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>, a1);
}

{
  double *result;
  void *Value;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  void *v8;
  id v9;
  id v10;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    uint64_t Value = (void *)AGGraphGetValue();
    long long v4 = Value[1];
    long long v5 = Value[3];
    uint64_t v6 = (void *)Value[7];
    uint64_t v7 = (void *)Value[8];
    swift_retain();
    outlined copy of AppIntentExecutor?(v4);
    outlined copy of AppIntentExecutor?(v5);
    swift_retain();
    int v8 = v6;
    uint64_t v10 = v7;
    AGGraphClearUpdate();
    uint64_t v9 = *(id *)((char *)v8 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v8) + 0x78));
    objc_msgSend(v8, sel_bounds);
    objc_msgSend(v9, sel_frameForAlignmentRect_);
    objc_msgSend(v9, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    swift_release();
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v5);

    return (double *)swift_release();
  }
  return result;
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>, a1);
}

{
  double *result;
  uint64_t Value;
  char *v4;
  uint64_t v5;
  id v6;
  id v7;
  unsigned char v8[80];
  char *v9;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    uint64_t Value = AGGraphGetValue();
    _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    AGGraphClearUpdate();
    long long v4 = v9;
    long long v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v9) + 0x78);
    uint64_t v6 = *(id *)&v9[v5];
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v6, sel_frameForAlignmentRect_);
    objc_msgSend(v6, sel_setFrame_);

    uint64_t v7 = *(id *)&v4[v5];
    UIKitPagingView._identifiedViewTree(in:)(v7, a1);

    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
  }
  return result;
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>, a1);
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<KitRepresentable>>, a1);
}

{
  double *result;
  uint64_t Value;
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  id v16;
  id v17;
  void *v18;
  void *v19;
  unsigned int v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    uint64_t Value = AGGraphGetValue();
    long long v4 = *(void *)(Value + 16);
    uint64_t v22 = *(void *)Value;
    long long v5 = *(unsigned char *)(Value + 25);
    uint64_t v6 = *(void *)(Value + 32);
    uint64_t v23 = v6;
    uint64_t v7 = *(unsigned __int8 *)(Value + 40);
    int v8 = *(void *)(Value + 48);
    uint64_t v9 = *(unsigned char *)(Value + 56);
    int v18 = *(void **)(Value + 88);
    uint64_t v19 = *(void **)(Value + 96);
    uint64_t v10 = *(unsigned __int8 *)(Value + 24);
    uint64_t v20 = *(unsigned __int8 *)(Value + 24);
    uint64_t v21 = *(unsigned char *)(Value + 8);
    outlined copy of Environment<Bool>.Content(*(void *)Value, v21);
    outlined copy of Environment<CGFloat?>.Content(v4, v10, v5);
    char v11 = v6;
    uint64_t v12 = v7;
    outlined copy of Environment<HoverEffect?>.Content(v11, v7);
    uint64_t v13 = v8;
    uint64_t v14 = v8;
    LOBYTE(v8) = v9;
    outlined copy of Environment<Bool>.Content(v13, v9);
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v15 = v18;
    __int16 v16 = v19;
    AGGraphClearUpdate();
    int v17 = *(id *)((char *)v15 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v15) + 0x78));
    objc_msgSend(v15, sel_bounds);
    objc_msgSend(v17, sel_frameForAlignmentRect_);
    objc_msgSend(v17, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    outlined consume of Environment<Bool>.Content(v22, v21);
    outlined consume of Environment<CGFloat?>.Content(v4, v20, v5);
    outlined consume of Environment<AnyShapeStyle?>.Content(v23, v12);
    outlined consume of Environment<Bool>.Content(v14, v8);

    swift_release();
    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  void *Value;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  id v8;
  id v9;
  id v10;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    uint64_t Value = (void *)AGGraphGetValue();
    long long v4 = (void *)Value[2];
    long long v5 = (void *)Value[6];
    uint64_t v6 = (void *)Value[7];
    swift_bridgeObjectRetain();
    uint64_t v7 = v5;
    int v8 = v6;
    swift_retain();
    swift_retain();
    uint64_t v9 = v4;
    AGGraphClearUpdate();
    uint64_t v10 = *(id *)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x78));
    objc_msgSend(v7, sel_bounds);
    objc_msgSend(v10, sel_frameForAlignmentRect_);
    objc_msgSend(v10, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    swift_bridgeObjectRelease();
    swift_release();
    return (double *)swift_release();
  }
  return result;
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>, a1);
}

{
  double *result;
  void *v3;
  void *v4;
  id v5;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    uint64_t v3 = *(void **)(AGGraphGetValue() + 8);
    swift_bridgeObjectRetain();
    long long v4 = v3;
    AGGraphClearUpdate();
    long long v5 = *(id *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78));
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v5, sel_frameForAlignmentRect_);
    objc_msgSend(v5, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  char *v4;
  uint64_t v5;
  void *v6;
  double *v7;
  double *v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  id v17;
  unsigned char v18[72];
  char *v19;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  AGGraphClearUpdate();
  long long v4 = v19;
  long long v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v19) + 0x78);
  uint64_t v6 = *(void **)&v19[v5];
  uint64_t result = (double *)objc_msgSend(v6, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v7 = result;
  uint64_t result = (double *)objc_msgSend(v6, sel_view);
  if (result)
  {
    int v8 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    uint64_t v10 = v9;
    uint64_t v12 = v11;
    uint64_t v14 = v13;
    __int16 v16 = v15;

    objc_msgSend(v7, sel_setFrame_, v10, v12, v14, v16);
    int v17 = *(id *)&v4[v5];
    BridgedNavigationView._identifiedViewTree(in:)(v17, a1);

    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  double *result;
  uint64_t Value;
  void *v8;
  uint64_t v9;
  void *v10;
  double *v11;
  double *v12;
  double v13;
  double v14;
  double v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  id v21;
  uint64_t v22;

  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  long long v5 = (char *)&v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  AGGraphClearUpdate();
  int v8 = *(void **)&v5[*(int *)(v3 + 36)];
  uint64_t v9 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v8) + 0x78);
  uint64_t v10 = *(void **)((char *)v8 + v9);
  uint64_t result = (double *)objc_msgSend(v10, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  char v11 = result;
  uint64_t result = (double *)objc_msgSend(v10, sel_view);
  if (result)
  {
    uint64_t v12 = result;
    objc_msgSend(v8, sel_bounds);
    objc_msgSend(v12, sel_frameForAlignmentRect_);
    uint64_t v14 = v13;
    __int16 v16 = v15;
    int v18 = v17;
    uint64_t v20 = v19;

    objc_msgSend(v11, sel_setFrame_, v14, v16, v18, v20);
    uint64_t v21 = *(id *)((char *)v8 + v9);
    UITabBarController.identifiedViewTree.getter(a1);

    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    uint64_t Value = AGGraphGetValue();
    long long v4 = *(void **)(Value + 40);
    long long v5 = *(void **)(Value + 48);
    swift_retain();
    swift_retain();
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    swift_bridgeObjectRetain();
    AGGraphClearUpdate();
    int v8 = *(id *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    objc_msgSend(v6, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    objc_msgSend(v8, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    swift_release();
    swift_release();
    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  double *result;
  void *v3;
  void *v4;
  id v5;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    uint64_t v3 = *(void **)(AGGraphGetValue() + 16);
    swift_retain();
    long long v4 = v3;
    AGGraphClearUpdate();
    long long v5 = *(id *)((char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78));
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v5, sel_frameForAlignmentRect_);
    objc_msgSend(v5, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return (double *)swift_release();
  }
  return result;
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>, a1);
}

{
  double *result;
  uint64_t Value;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  void *v13;
  id v14;
  _OWORD v15[11];
  void *v16;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    uint64_t Value = AGGraphGetValue();
    long long v4 = *(_OWORD *)(Value + 48);
    uint64_t v6 = *(_OWORD *)Value;
    long long v5 = *(_OWORD *)(Value + 16);
    _OWORD v15[2] = *(_OWORD *)(Value + 32);
    void v15[3] = v4;
    v15[0] = v6;
    v15[1] = v5;
    uint64_t v7 = *(_OWORD *)(Value + 112);
    uint64_t v9 = *(_OWORD *)(Value + 64);
    int v8 = *(_OWORD *)(Value + 80);
    v15[6] = *(_OWORD *)(Value + 96);
    v15[7] = v7;
    unsigned char v15[4] = v9;
    v15[5] = v8;
    char v11 = *(_OWORD *)(Value + 144);
    uint64_t v10 = *(_OWORD *)(Value + 160);
    uint64_t v12 = *(_OWORD *)(Value + 128);
    __int16 v16 = *(void **)(Value + 176);
    v15[9] = v11;
    v15[10] = v10;
    v15[8] = v12;
    outlined retain of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v15);
    AGGraphClearUpdate();
    uint64_t v13 = v16;
    uint64_t v14 = *(id *)((char *)v16 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v16) + 0x78));
    objc_msgSend(v13, sel_bounds);
    objc_msgSend(v14, sel_frameForAlignmentRect_);
    objc_msgSend(v14, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined release of ViewLeafView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>((uint64_t)v15);
  }
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned char v16[376];
  void *v17;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  AGGraphClearUpdate();
  long long v4 = v17;
  long long v5 = *(void **)((char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x78));
  uint64_t result = (double *)objc_msgSend(v5, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  uint64_t result = (double *)objc_msgSend(v5, sel_view);
  if (result)
  {
    uint64_t v7 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    uint64_t v9 = v8;
    char v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;

    objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned char v16[176];
  void *v17;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  AGGraphClearUpdate();
  long long v4 = v17;
  long long v5 = *(void **)((char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x78));
  uint64_t result = (double *)objc_msgSend(v5, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  uint64_t result = (double *)objc_msgSend(v5, sel_view);
  if (result)
  {
    uint64_t v7 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    uint64_t v9 = v8;
    char v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;

    objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>, a1);
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    uint64_t Value = AGGraphGetValue();
    long long v4 = *(void **)(Value + 16);
    long long v5 = *(void **)(Value + 24);
    swift_bridgeObjectRetain();
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    AGGraphClearUpdate();
    int v8 = *(id *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    objc_msgSend(v6, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    objc_msgSend(v8, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    return (double *)swift_bridgeObjectRelease();
  }
  return result;
}

{
  return specialized PlatformViewIdentifiedViews.value.getter((uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>, a1);
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  double *v6;
  double *v7;
  double v8;
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  unsigned char v16[240];
  void *v17;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(Value, (uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  AGGraphClearUpdate();
  long long v4 = v17;
  long long v5 = *(void **)((char *)v17 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v17) + 0x78));
  uint64_t result = (double *)objc_msgSend(v5, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v6 = result;
  uint64_t result = (double *)objc_msgSend(v5, sel_view);
  if (result)
  {
    uint64_t v7 = result;
    objc_msgSend(v4, sel_bounds);
    objc_msgSend(v7, sel_frameForAlignmentRect_);
    uint64_t v9 = v8;
    char v11 = v10;
    uint64_t v13 = v12;
    uint64_t v15 = v14;

    objc_msgSend(v6, sel_setFrame_, v9, v11, v13, v15);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)_s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v16, (uint64_t (*)(void))type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  _OWORD *Value;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  void *v12;
  void *v13;
  double *v14;
  double *v15;
  double v16;
  double v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  _OWORD v24[10];
  long long v25;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
    goto LABEL_6;
  }
  type metadata accessor for ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  long long v5 = Value[1];
  long long v4 = Value[2];
  v24[0] = *Value;
  v24[1] = v5;
  void v24[2] = v4;
  uint64_t v6 = Value[6];
  int v8 = Value[3];
  uint64_t v7 = Value[4];
  v24[5] = Value[5];
  v24[6] = v6;
  void v24[3] = v8;
  v24[4] = v7;
  uint64_t v9 = Value[10];
  char v11 = Value[7];
  uint64_t v10 = Value[8];
  unsigned char v24[9] = Value[9];
  char v25 = v9;
  uint64_t v24[7] = v11;
  v24[8] = v10;
  outlined retain of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)v24);
  AGGraphClearUpdate();
  uint64_t v12 = (void *)*((void *)&v25 + 1);
  uint64_t v13 = *(void **)(*((void *)&v25 + 1) + *(void *)((*MEMORY[0x1E4FBC8C8] & **((void **)&v25 + 1)) + 0x78));
  uint64_t result = (double *)objc_msgSend(v13, sel_view);
  if (!result)
  {
LABEL_6:
    __break(1u);
    goto LABEL_7;
  }
  uint64_t v14 = result;
  uint64_t result = (double *)objc_msgSend(v13, sel_view);
  if (result)
  {
    uint64_t v15 = result;
    objc_msgSend(v12, sel_bounds);
    objc_msgSend(v15, sel_frameForAlignmentRect_);
    int v17 = v16;
    uint64_t v19 = v18;
    uint64_t v21 = v20;
    uint64_t v23 = v22;

    objc_msgSend(v14, sel_setFrame_, v17, v19, v21, v23);
    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();
    return (double *)outlined release of ViewLeafView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>((uint64_t)v24);
  }
LABEL_7:
  __break(1u);
  return result;
}

{
  double *result;
  uint64_t Value;
  void *v4;
  void *v5;
  void *v6;
  id v7;
  id v8;
  uint64_t vars8;

  uint64_t result = (double *)AGGraphGetValue();
  if (*result < 0.0)
  {
    __break(1u);
  }
  else
  {
    type metadata accessor for ViewLeafView<PlatformViewRepresentableAdaptor<Switch>>();
    uint64_t Value = AGGraphGetValue();
    long long v4 = *(void **)(Value + 48);
    long long v5 = *(void **)(Value + 56);
    swift_retain();
    swift_retain();
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    swift_retain();
    swift_retain();
    swift_retain();
    AGGraphClearUpdate();
    int v8 = *(id *)((char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x78));
    objc_msgSend(v6, sel_bounds);
    objc_msgSend(v8, sel_frameForAlignmentRect_);
    objc_msgSend(v8, sel_setFrame_);

    *(_OWORD *)(a1 + 128) = 0u;
    *(_OWORD *)(a1 + 144) = 0u;
    *(_OWORD *)(a1 + 96) = 0u;
    *(_OWORD *)(a1 + 112) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 160) = 2;
    AGGraphSetUpdate();

    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return (double *)swift_release();
  }
  return result;
}