double specialized LazySubviewPlacements.placeSubviews(placementContext:in:for:)(long long *a1, uint64_t a2, CGRect *a3, void (*a4)(_OWORD *__return_ptr), unint64_t *a5, uint64_t (*a6)(void), uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void (*a11)(uint64_t, double, double), double (*a12)(unsigned char *, long long *, uint64_t))
{
  uint64_t v12;
  uint64_t v13;
  unsigned char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  CGFloat v28;
  char v29;
  int v30;
  long long v31;
  _OWORD *v32;
  char v33;
  uint64_t v34;
  uint64_t (*v35)(void);
  unint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(uint64_t, uint64_t, void *, uint64_t, uint64_t);
  int v45;
  Swift::Bool v46;
  uint64_t v47;
  int v48;
  _OWORD *Value;
  long long v50;
  double v51;
  double v52;
  double v53;
  double v54;
  unsigned int v55;
  double v56;
  unsigned char *v57;
  double v58;
  double v59;
  BOOL v60;
  uint64_t v61;
  double v62;
  double v63;
  double v64;
  double v65;
  double v66;
  double v67;
  unsigned __int8 v68;
  double v69;
  BOOL v70;
  uint64_t v71;
  CGRect *v72;
  uint64_t WeakValue;
  uint64_t v74;
  uint64_t v75;
  void *v76;
  double *v77;
  uint64_t *v78;
  uint64_t *v79;
  double result;
  uint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t v84;
  char v85;
  double v86;
  double v87;
  double v88;
  void v89[6];
  uint64_t v90;
  long long v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  long long *v97;
  CGRect *v98;
  long long v99;
  long long v100;
  long long v101;
  uint64_t v102;
  unint64_t *v103;
  uint64_t (*v104)(void);
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned char *v108;
  CGSize v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  BOOL v116;
  void v117[3];
  uint64_t v118;
  uint64_t v119;
  unsigned char v120[32];
  uint64_t v121;
  _OWORD v122[19];
  unsigned char v123[40];
  char v124;
  double v125;
  double v126;
  char v127;
  _OWORD v128[21];
  long long v129;
  long long v130;
  long long v131;
  uint64_t v132;
  long long v133;
  long long v134;
  long long v135;
  long long v136;
  long long v137;
  long long v138;
  long long v139;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  CGSize v154;
  char v155;
  long long v156;
  long long v157;
  long long v158;
  long long v159;
  long long v160;
  long long v161;
  long long v162;
  long long v163;
  _OWORD v164[2];
  unsigned char v165[24];
  double v166;
  double v167;
  char v168;
  unsigned char v169[304];
  unsigned char v170[320];

  v105 = a7;
  v106 = a8;
  v103 = a5;
  v104 = a6;
  v13 = v12;
  v17 = (unsigned char *)(v12 + 304);
  a4(v128);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v128, (uint64_t)v169, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v169, (uint64_t)v170, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v170) == 1)
  {
    v18 = (uint64_t *)*((void *)a1 + 21);
    v114 = *((void *)a1 + 22);
    v115 = v18;
    v19 = *((void *)a1 + 23);
    v112 = *((void *)a1 + 24);
    v113 = v19;
    v20 = *((void *)a1 + 25);
    v110 = *((void *)a1 + 26);
    v111 = v20;
    v21 = *((void *)a1 + 28);
    v102 = *((void *)a1 + 27);
    v22 = *((void *)a1 + 29);
    v23 = *((void *)a1 + 30);
    v24 = *((void *)a1 + 31);
    v25 = *((void *)a1 + 32);
    v26 = *((void *)a1 + 33);
    v27 = *((void *)a1 + 34);
    v28 = *((double *)a1 + 36);
    v109.width = *((CGFloat *)a1 + 35);
    v109.height = v28;
    v29 = *((unsigned char *)a1 + 296) & 1;
    v30 = *((_DWORD *)a1 + 12);
    v31 = a1[2];
    v100 = a1[1];
    v101 = v31;
    v99 = *a1;
    v32 = a1;
  }
  else
  {
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v169, (uint64_t)v128, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    v29 = BYTE8(v128[18]);
    v109 = *(CGSize *)((char *)&v128[17] + 8);
    v114 = *(void *)&v128[11];
    v115 = (uint64_t *)*((void *)&v128[10] + 1);
    v112 = *(void *)&v128[12];
    v113 = *((void *)&v128[11] + 1);
    v110 = *(void *)&v128[13];
    v111 = *((void *)&v128[12] + 1);
    v21 = *(void *)&v128[14];
    v102 = *((void *)&v128[13] + 1);
    v22 = *((void *)&v128[14] + 1);
    v24 = *((void *)&v128[15] + 1);
    v23 = *(void *)&v128[15];
    v26 = *((void *)&v128[16] + 1);
    v25 = *(void *)&v128[16];
    v27 = *(void *)&v128[17];
    v30 = v128[3];
    v100 = v128[1];
    v101 = v128[2];
    v99 = v128[0];
    v32 = v128;
  }
  memcpy(v122, v32, 0x129uLL);
  v33 = v17[24];
  v107 = a2;
  v108 = v17;
  v97 = a1;
  v98 = a3;
  if (v33)
  {
    v35 = v104;
    v34 = v105;
    v36 = v103;
    v37 = v102;
  }
  else
  {
    v92 = v27;
    v93 = v26;
    v94 = v25;
    v95 = v24;
    v96 = v23;
    *(void *)&v91 = v21;
    *((void *)&v91 + 1) = v22;
    v38 = *(void *)(v13 + 312);
    v39 = *(void *)(v13 + 320);
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v169, (uint64_t)v128, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v128) == 1)
    {
      *(void *)&v129 = v115;
      *((void *)&v129 + 1) = v114;
      *(void *)&v130 = v113;
      *((void *)&v130 + 1) = v112;
      *(void *)&v131 = v111;
      *((void *)&v131 + 1) = v110;
      v132 = v102;
      v133 = v91;
      *(void *)&v134 = v96;
      *((void *)&v134 + 1) = v95;
      *(void *)&v135 = v94;
      *((void *)&v135 + 1) = v93;
      *(void *)&v136 = v92;
      ScrollGeometry.visibleRect.getter();
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v39, v38), v109);
      ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(v39, v38), v109);
      v37 = *((void *)&v122[13] + 1);
      v22 = *((void *)&v122[14] + 1);
      v21 = *(void *)&v122[14];
      v24 = *((void *)&v122[15] + 1);
      v23 = *(void *)&v122[15];
      v26 = *((void *)&v122[16] + 1);
      v25 = *(void *)&v122[16];
      v27 = *(void *)&v122[17];
      v114 = *(void *)&v122[11];
      v115 = (uint64_t *)*((void *)&v122[10] + 1);
      v129 = *(_OWORD *)((char *)&v122[10] + 8);
      v112 = *(void *)&v122[12];
      v113 = *((void *)&v122[11] + 1);
      v130 = *(_OWORD *)((char *)&v122[11] + 8);
      v110 = *(void *)&v122[13];
      v111 = *((void *)&v122[12] + 1);
      v131 = *(_OWORD *)((char *)&v122[12] + 8);
      v132 = *((void *)&v122[13] + 1);
      v133 = v122[14];
      v134 = v122[15];
      v135 = v122[16];
      *(void *)&v136 = *(void *)&v122[17];
      ScrollGeometry.visibleRect.getter();
      v35 = v104;
      v34 = v105;
      v36 = v103;
    }
    else
    {
      v35 = v104;
      v34 = v105;
      v36 = v103;
      v37 = v102;
      v22 = *((void *)&v91 + 1);
      v21 = v91;
      v24 = v95;
      v23 = v96;
      v26 = v93;
      v25 = v94;
      v27 = v92;
    }
  }
  v129 = v99;
  v130 = v100;
  v131 = v101;
  LODWORD(v132) = v30;
  v133 = *(_OWORD *)((char *)&v122[3] + 8);
  v134 = *(_OWORD *)((char *)&v122[4] + 8);
  v135 = *(_OWORD *)((char *)&v122[5] + 8);
  v136 = *(_OWORD *)((char *)&v122[6] + 8);
  v137 = *(_OWORD *)((char *)&v122[7] + 8);
  v138 = *(_OWORD *)((char *)&v122[8] + 8);
  v139 = *(_OWORD *)((char *)&v122[9] + 8);
  v140 = v115;
  v141 = v114;
  v142 = v113;
  v143 = v112;
  v144 = v111;
  v145 = v110;
  v146 = v37;
  v147 = v21;
  v148 = v22;
  v149 = v23;
  v150 = v24;
  v151 = v25;
  v152 = v26;
  v153 = v27;
  v154 = v109;
  v155 = v29;
  type metadata accessor for LazyLayoutViewCache();
  v40 = *(void *)AGGraphGetValue();
  type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, v36, v35, v34, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
  v42 = v41;
  v115 = &v90;
  MEMORY[0x1F4188790](v41);
  v89[2] = v13;
  v89[3] = &v129;
  v43 = v107;
  v89[4] = v107;
  v44 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(*(void *)v40 + 288);
  swift_retain();
  v44(v42, v106, v89, v42, MEMORY[0x1E4FBC848] + 8);
  swift_release();
  if (*(unsigned char *)(v43 + 40) == 1)
  {
    v45 = *(_DWORD *)(v13 + 40);
    AGGraphGetValue();
    swift_retain();
    v46 = LazyLayoutViewCache.mayInvalidate()();
    swift_release();
    if (v46 && v45 != *MEMORY[0x1E4F4E7A0])
    {
      v47 = AGCreateWeakAttribute();
      *(void *)(swift_allocObject() + 16) = v47;
      static Update.enqueueAction(_:)();
      swift_release();
    }
  }
  memcpy(v128, (const void *)v13, 0x149uLL);
  specialized LazySubviewPlacements.transaction.getter();
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  v48 = v156;
  AGGraphGetValue();
  LODWORD(v115) = *(unsigned __int8 *)AGGraphGetValue();
  v162 = *(_OWORD *)((char *)&v128[15] + 8);
  v163 = *(_OWORD *)((char *)&v128[16] + 8);
  v164[0] = *(_OWORD *)((char *)&v128[17] + 8);
  *(_OWORD *)((char *)v164 + 9) = *(_OWORD *)((char *)&v128[18] + 1);
  v158 = *(_OWORD *)((char *)&v128[11] + 8);
  v159 = *(_OWORD *)((char *)&v128[12] + 8);
  v160 = *(_OWORD *)((char *)&v128[13] + 8);
  v161 = *(_OWORD *)((char *)&v128[14] + 8);
  v156 = *(_OWORD *)((char *)&v128[9] + 8);
  v157 = *(_OWORD *)((char *)&v128[10] + 8);
  outlined init with take of CGSize?((uint64_t)v164 + 8, (uint64_t)v165, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  Value = (_OWORD *)AGGraphGetValue();
  v50 = Value[1];
  *(_OWORD *)v123 = *Value;
  *(_OWORD *)&v123[16] = v50;
  v51 = MEMORY[0x18C114450]();
  v53 = v52;
  outlined init with take of CGSize?((uint64_t)v165, (uint64_t)&v166, &lazy cache variable for type metadata for CGSize?, (uint64_t (*)(uint64_t))type metadata accessor for CGSize);
  v54 = 0.0;
  if (v168)
  {
    v55 = 3;
    v56 = 0.0;
    v57 = v108;
  }
  else
  {
    v55 = 3;
    v57 = v108;
    if (v166 != 0.0 || (v56 = 0.0, v167 != 0.0))
    {
      v55 = v48 == 2 ? 3 : 1;
      v56 = 0.0;
      v54 = v48 == 2 ? 0.0 : v167;
      if (v48 != 2) {
        v56 = v166;
      }
    }
  }
  v58 = *(double *)(v43 + 48);
  v59 = *(double *)(v43 + 56);
  v60 = v58 == 0.0;
  if (v59 != 0.0) {
    v60 = 0;
  }
  if (v48 == 2) {
    v60 = 1;
  }
  if (v60) {
    v61 = v55;
  }
  else {
    v61 = 0;
  }
  if (v60) {
    v62 = -0.0;
  }
  else {
    v62 = *(double *)(v43 + 56);
  }
  v63 = v54 + v62;
  if (v60) {
    v64 = -0.0;
  }
  else {
    v64 = *(double *)(v43 + 48);
  }
  v65 = v56 + v64;
  if (v56 + v64 != 0.0
    || v63 != 0.0
    || v48 == 2
    || *((double *)&v162 + 1) == 0.0 && *(double *)&v163 == 0.0
    || v51 == 0.0 && v53 == 0.0
    || (v66 = vabdd_f64(v51, *((double *)&v162 + 1)), v67 = vabdd_f64(v53, *(double *)&v163), v66 < 0.01) && v67 < 0.01)
  {
    v68 = v115;
  }
  else
  {
    v83 = *(unsigned char *)(v43 + 40);
    if (v67 < 0.01) {
      v84 = v66 >= 0.01;
    }
    else {
      v84 = (v66 >= 0.01) | 2u;
    }
    v85 = *(unsigned char *)(v43 + 64);
    *(void *)v123 = *(void *)v43;
    *(_OWORD *)&v123[8] = *(_OWORD *)(v43 + 8);
    *(_OWORD *)&v123[24] = *(_OWORD *)(v43 + 24);
    v124 = v83;
    v125 = v58;
    v126 = v59;
    v127 = v85;
    outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v128);
    swift_bridgeObjectRetain();
    v86 = a12(v123, v97, v84);
    v88 = v87;
    v57 = v108;
    swift_bridgeObjectRelease();
    outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v128);
    v68 = v115;
    if (v86 != 0.0 || v88 != 0.0)
    {
      v61 = 2;
      v63 = v88;
      v65 = v86;
    }
  }
  if ((v68 & (v65 != 0.0)) != 0) {
    v69 = -v65;
  }
  else {
    v69 = v65;
  }
  v70 = v63 == 0.0 && v69 == 0.0;
  if (!v70 && v61 != 3)
  {
    v71 = v43;
    a11(v61, v69, v63);
    v72 = v98;
    *v72 = CGRectOffset(*v98, v69, v63);
    *(double *)(v13 + 312) = v69;
    *(double *)(v13 + 320) = v63;
    v57[24] = 0;
    AGGraphClearUpdate();
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
    WeakValue = AGGraphGetWeakValue();
    if (WeakValue)
    {
      outlined init with copy of TableColumnList(WeakValue, (uint64_t)v120);
    }
    else
    {
      v121 = 0;
      memset(v120, 0, sizeof(v120));
    }
    AGGraphSetUpdate();
    outlined init with copy of ScrollableCollection?((uint64_t)v120, (uint64_t)v117, (uint64_t (*)(void))type metadata accessor for Scrollable?);
    v74 = v118;
    if (!v118)
    {
      outlined destroy of ScrollableCollection?((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for Scrollable?);
      outlined destroy of ScrollableCollection?((uint64_t)v117, (uint64_t (*)(void))type metadata accessor for Scrollable?);
      if (*(unsigned char *)(v43 + 64)) {
        goto LABEL_62;
      }
LABEL_64:
      v76 = (void *)(v43 + 8);
      v79 = (uint64_t *)(v43 + 16);
      v78 = (uint64_t *)(v43 + 24);
      v77 = (double *)(v43 + 32);
      goto LABEL_65;
    }
    v75 = v119;
    __swift_project_boxed_opaque_existential_1(v117, v118);
    v116 = v61 == 1;
    (*(void (**)(BOOL *, uint64_t, uint64_t, double, double))(v75 + 32))(&v116, v74, v75, v69, v63);
    outlined destroy of ScrollableCollection?((uint64_t)v120, (uint64_t (*)(void))type metadata accessor for Scrollable?);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v117);
    v43 = v71;
  }
  if ((*(unsigned char *)(v43 + 64) & 1) == 0) {
    goto LABEL_64;
  }
LABEL_62:
  v76 = (void *)MEMORY[0x1E4F1DB20];
  v77 = (double *)(MEMORY[0x1E4F1DB20] + 24);
  v78 = (uint64_t *)(MEMORY[0x1E4F1DB20] + 16);
  v79 = (uint64_t *)(MEMORY[0x1E4F1DB20] + 8);
LABEL_65:
  result = *v77;
  v81 = *v78;
  v82 = *v79;
  *(void *)(v13 + 96) = *v76;
  *(void *)(v13 + 104) = v82;
  *(void *)(v13 + 112) = v81;
  *(double *)(v13 + 120) = result;
  *(void *)(v13 + 288) = 0;
  *(void *)(v13 + 296) = 0;
  *v57 = 1;
  return result;
}

uint64_t outlined init with take of _LazyLayout_PlacementContext?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for External<UInt32>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of CGSize?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  type metadata accessor for TextSelection?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t specialized LazySubviewPlacements.transaction.getter()
{
  AGGraphClearUpdate();
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  _ViewInputs.transaction.getter();
  uint64_t v0 = *(void *)AGGraphGetValue();
  swift_retain();
  AGGraphSetUpdate();
  return v0;
}

uint64_t type metadata accessor for LazyLayoutViewCache()
{
  return self;
}

uint64_t _s7SwiftUI28_LazyLayout_PlacementContextVSgWOg(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 296);
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

double _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_(uint64_t a1)
{
  *(void *)(a1 + 288) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 296) = 2;
  return result;
}

BOOL specialized closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 32) == *MEMORY[0x1E4F4E7A0])
  {
    default argument 1 of ScrollPhaseState.init(phase:velocity:)();
    Value = &v3;
    ScrollPhaseState.init(phase:velocity:)();
  }
  else
  {
    Value = (char *)AGGraphGetValue();
  }
  return *Value != 0;
}

uint64_t outlined destroy of ScrollPosition(uint64_t a1)
{
  return a1;
}

uint64_t PositionState.dispatchContainerSizeChange(context:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  double v4 = *(double *)(v1 + 72);
  double v3 = *(double *)(v1 + 80);
  double v5 = 0.0;
  v14.origin.x = 0.0;
  v14.origin.y = 0.0;
  v14.size.width = 0.0;
  v14.size.height = 0.0;
  if (CGRectEqualToRect(*(CGRect *)(v1 + 40), v14)) {
    return 0;
  }
  double v7 = 0.0;
  if (v2 != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = AGGraphGetValue();
    MEMORY[0x18C114450](Value, v9, v10, v11);
    double v5 = v12;
  }
  BOOL v13 = vabdd_f64(v4, v7) >= 0.1;
  return vabdd_f64(v3, v5) >= 0.1 || v13;
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(double *a1@<X0>, void (*a2)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t)@<X1>, void (*a3)(unint64_t, unint64_t)@<X2>, uint64_t (*a4)(const void *, uint64_t, uint64_t, unint64_t, uint64_t)@<X4>, uint64_t a5@<X8>)
{
  uint64_t v6 = *(void *)(v5 + 48);
  int v7 = *(_DWORD *)(v5 + 56);
  uint64_t v8 = *(void *)(v5 + 64);
  unsigned int v9 = *(_DWORD *)(v5 + 72);
  unsigned int v10 = *(_DWORD *)(v5 + 76);
  unsigned int v11 = *(_DWORD *)(v5 + 80);
  unsigned int v12 = *(_DWORD *)(v5 + 84);
  uint64_t v13 = *(void *)(v5 + 88);
  uint64_t v32 = v6;
  int v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = __PAIR64__(v10, v9);
  unint64_t v36 = __PAIR64__(v12, v11);
  uint64_t v37 = v13;
  LOBYTE(v29) = 1;
  if ((_GraphInputs.hasValueScrollPosition(kind:)() & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v32 = v6;
  int v33 = v7;
  uint64_t v34 = v8;
  uint64_t v35 = __PAIR64__(v10, v9);
  unint64_t v36 = __PAIR64__(v12, v11);
  uint64_t v37 = v13;
  if (_GraphInputs.scrollTargetRole.getter() == *MEMORY[0x1E4F4E7A0]) {
    goto LABEL_7;
  }
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for ScrollTargetRole.Role?, MEMORY[0x1E4F3FD78], MEMORY[0x1E4FBB718]);
  int v14 = *(unsigned __int8 *)AGGraphGetValue();
  if (v14 == 2 || (v14 & 1) != 0 || a1[4] == 0.0 || a1[5] == 0.0) {
    goto LABEL_7;
  }
  uint64_t v16 = *(void *)(v5 + 128);
  if (*(void *)(v16 + 16))
  {
    uint64_t v17 = *(void *)(v16 + 32);
    unsigned int v18 = *(_DWORD *)(v17 + 136);
    uint64_t v19 = *(unsigned int *)(v17 + 140);
    uint64_t v20 = *(void *)(v17 + 144);
    swift_bridgeObjectRetain();
LABEL_11:
    specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)(a1, v18 | (unint64_t)(v19 << 32), v20, a2, a3, a4, a5);
    return swift_bridgeObjectRelease();
  }
  type metadata accessor for LazyLayoutViewCache();
  AGGraphGetValue();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of TableColumnList(Value, (uint64_t)&v32);
  uint64_t v22 = v35;
  unint64_t v23 = v36;
  __swift_project_boxed_opaque_existential_1(&v32, v35);
  if ((*(uint64_t (**)(uint64_t, unint64_t))(v23 + 32))(v22, v23))
  {
    if (dispatch thunk of _ViewList_ID_Views.endIndex.getter())
    {
      dispatch thunk of _ViewList_ID_Views.subscript.getter();
      swift_release();
      unsigned int v18 = v29;
      uint64_t v19 = v30;
      uint64_t v20 = v31;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
      goto LABEL_11;
    }
    swift_release();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v32);
LABEL_7:
  _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)&v32);
  return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)&v32, a5, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
}

uint64_t specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X4>, uint64_t (*a6)(void)@<X5>, uint64_t a7@<X6>, uint64_t (*a8)(void)@<X7>, uint64_t a9@<X8>)
{
  uint64_t v11 = v9;
  uint64_t v14 = a2;
  double v16 = *((double *)a1 + 11);
  double v17 = *((double *)a1 + 12);
  long long v18 = *(_OWORD *)(a1 + 27);
  long long v19 = *(_OWORD *)(a1 + 31);
  long long v125 = *(_OWORD *)(a1 + 29);
  long long v126 = v19;
  uint64_t v20 = a1 + 21;
  long long v127 = *(_OWORD *)(a1 + 33);
  long long v21 = *(_OWORD *)(a1 + 23);
  long long v121 = *(_OWORD *)(a1 + 21);
  long long v122 = v21;
  long long v123 = *(_OWORD *)(a1 + 25);
  long long v124 = v18;
  uint64_t v22 = (void *)a1[35];
  unint64_t v23 = a1[36];
  char v120 = *((unsigned char *)a1 + 296);
  outlined init with copy of ScrollPosition.Storage(a2, (uint64_t)v117);
  double v24 = *(double *)v117;
  switch(v119)
  {
    case 1:
      long long v46 = v20[3];
      long long v47 = v20[5];
      v112[4] = v20[4];
      v112[5] = v47;
      long long v48 = v20[5];
      v112[6] = v20[6];
      long long v49 = v20[1];
      v112[0] = *v20;
      v112[1] = v49;
      long long v50 = v20[3];
      long long v52 = *v20;
      long long v51 = v20[1];
      v112[2] = v20[2];
      v112[3] = v50;
      __dst[4] = v112[4];
      __dst[5] = v48;
      __dst[6] = v20[6];
      __dst[0] = v52;
      __dst[1] = v51;
      __dst[3] = v46;
      __dst[2] = v112[2];
      ScrollGeometry.targetRect(edge:)();
      double v54 = v53;
      double v56 = v55;
      ScrollGeometry.visibleRect.getter();
      double v58 = v54 - v57;
      double v60 = v56 - v59;
      goto LABEL_17;
    case 2:
      double v16 = *((double *)v117 + 1);
      goto LABEL_13;
    case 3:
LABEL_13:
      long long v61 = v20[5];
      __dst[4] = v20[4];
      __dst[5] = v61;
      __dst[6] = v20[6];
      long long v62 = v20[1];
      __dst[0] = *v20;
      __dst[1] = v62;
      long long v63 = v20[2];
      __dst[3] = v20[3];
      __dst[2] = v63;
      ScrollGeometry.visibleRect.getter();
      double v58 = v24 - v64;
      double v60 = v16 - v65;
      goto LABEL_17;
    case 4:
      long long v66 = v20[5];
      __dst[4] = v20[4];
      __dst[5] = v66;
      __dst[6] = v20[6];
      long long v67 = v20[1];
      __dst[0] = *v20;
      __dst[1] = v67;
      long long v68 = v20[2];
      __dst[3] = v20[3];
      __dst[2] = v68;
      ScrollGeometry.visibleRect.getter();
      double v58 = v17 - v69;
      double v60 = v24 - v70;
      goto LABEL_17;
    case 5:
      goto LABEL_19;
    default:
      long long v113 = v117[0];
      long long v114 = v117[1];
      *(_OWORD *)v115 = *(_OWORD *)v118;
      *(_OWORD *)&v115[9] = *(_OWORD *)&v118[9];
      *(void *)&__dst[0] = a3;
      *((void *)&__dst[0] + 1) = a4;
      uint64_t v25 = _ViewList_ID.allExplicitIDs.getter();
      uint64_t v110 = *(void *)(v25 + 16);
      if (!v110)
      {
        swift_bridgeObjectRelease();
        outlined destroy of ScrollPosition.ViewID((uint64_t)&v113);
LABEL_19:
        _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)__dst);
        v71 = __dst;
        return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v71, a9, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      }
      v94 = a8;
      uint64_t v96 = a9;
      uint64_t v26 = 0;
      double v27 = 0.0;
      uint64_t v28 = 0;
      char v29 = 1;
      do
      {
        *(void *)&v112[0] = *(void *)(v25 + 8 * v28 + 32);
        swift_retain();
        AnyHashable2.anyValue.getter();
        __swift_project_boxed_opaque_existential_1(__dst, *((uint64_t *)&__dst[1] + 1));
        uint64_t v30 = *(void *)(v14 + 64);
        uint64_t DynamicType = swift_getDynamicType();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)__dst);
        if (v30 == MEMORY[0x1E4FBB960] || DynamicType == v30)
        {
          uint64_t v33 = *((void *)&v114 + 1);
          uint64_t v108 = *(void *)v115;
          v106 = __swift_project_boxed_opaque_existential_1(&v113, *((uint64_t *)&v114 + 1));
          memcpy(__dst, (const void *)v11, 0x149uLL);
          memcpy(v112, (const void *)v11, 0x149uLL);
          memcpy(v116, a1, 0x129uLL);
          uint64_t v34 = v25;
          uint64_t v35 = v11;
          uint64_t v36 = *(void *)&v115[8];
          uint64_t v37 = *(void *)&v115[16];
          uint64_t v38 = v14;
          int v39 = v115[24];
          outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
          type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, a5, a6, a7, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
          uint64_t v40 = v37;
          uint64_t v11 = v35;
          uint64_t v25 = v34;
          int v41 = v39;
          uint64_t v14 = v38;
          uint64_t v26 = LazySubviewPlacements.makeViewIDTranslation<A>(_:viewID:anchor:)(v116, (uint64_t)v106, v36, v40, v41, v42, v33, v108);
          double v27 = v43;
          char v45 = v44;
          swift_release();
          char v29 = v45 & 1;
          outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)__dst);
        }
        else
        {
          swift_release();
        }
        ++v28;
      }
      while (v110 != v28);
      swift_bridgeObjectRelease();
      outlined destroy of ScrollPosition.ViewID((uint64_t)&v113);
      a9 = v96;
      if (v29) {
        goto LABEL_19;
      }
      *(void *)&double v58 = v26;
      double v60 = v27;
      a8 = v94;
LABEL_17:
      if (fabs(v58) < 0.01 && fabs(v60) < 0.01) {
        goto LABEL_19;
      }
      v72 = memcpy(__dst, (const void *)v11, 0x149uLL);
      if (a8(v72))
      {
        char v73 = v120;
        int v74 = *((_DWORD *)a1 + 12);
        uint64_t v109 = a1[5];
        uint64_t v111 = a1[4];
        long long v107 = *((_OWORD *)a1 + 1);
        v112[4] = v125;
        v112[5] = v126;
        v112[6] = v127;
        v112[0] = v121;
        v112[1] = v122;
        v112[2] = v123;
        v112[3] = v124;
        uint64_t v101 = a1[1];
        double v103 = *(double *)a1;
        memcpy(v116, a1, 0x129uLL);
        ScrollGeometry.visibleRect.getter();
        double v95 = v76;
        double v97 = v75;
        ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v60, *(unint64_t *)&v58), (CGSize)__PAIR128__(v23, (unint64_t)v22));
        ScrollGeometry.translate(by:limit:)((CGSize)__PAIR128__(*(unint64_t *)&v60, *(unint64_t *)&v58), (CGSize)__PAIR128__(v23, (unint64_t)v22));
        long long v77 = *(long long *)((char *)&v116[10] + 8);
        long long v78 = *(long long *)((char *)&v116[11] + 8);
        long long v79 = *(long long *)((char *)&v116[12] + 8);
        __srca = v22;
        uint64_t v80 = *((void *)&v116[13] + 1);
        unint64_t v99 = v23;
        uint64_t v81 = *(void *)&v116[14];
        uint64_t v92 = *(void *)&v116[15];
        uint64_t v93 = *((void *)&v116[14] + 1);
        uint64_t v90 = *(void *)&v116[16];
        uint64_t v91 = *((void *)&v116[15] + 1);
        uint64_t v88 = *(void *)&v116[17];
        uint64_t v89 = *((void *)&v116[16] + 1);
        v112[0] = *(long long *)((char *)&v116[10] + 8);
        v112[1] = *(long long *)((char *)&v116[11] + 8);
        v112[2] = *(long long *)((char *)&v116[12] + 8);
        v112[3] = *(long long *)((char *)&v116[13] + 8);
        v112[4] = *(long long *)((char *)&v116[14] + 8);
        v112[5] = *(long long *)((char *)&v116[15] + 8);
        v112[6] = *(long long *)((char *)&v116[16] + 8);
        ScrollGeometry.visibleRect.getter();
        *(double *)(v11 + 288) = v82 - v97;
        *(double *)(v11 + 296) = v83 - v95;
        *(unsigned char *)(v11 + 304) = 0;
        *(double *)v112 = v103;
        *((void *)&v112[0] + 1) = v101;
        v112[1] = v107;
        *(void *)&v112[2] = v111;
        *((void *)&v112[2] + 1) = v109;
        LODWORD(v112[3]) = v74;
        *(_OWORD *)((char *)&v112[3] + 8) = *(long long *)((char *)&v116[3] + 8);
        *(_OWORD *)((char *)&v112[4] + 8) = *(long long *)((char *)&v116[4] + 8);
        *(_OWORD *)((char *)&v112[5] + 8) = *(long long *)((char *)&v116[5] + 8);
        *(_OWORD *)((char *)&v112[6] + 8) = *(long long *)((char *)&v116[6] + 8);
        *(_OWORD *)((char *)&v112[7] + 8) = *(long long *)((char *)&v116[7] + 8);
        *(_OWORD *)((char *)&v112[8] + 8) = *(long long *)((char *)&v116[8] + 8);
        *(_OWORD *)((char *)&v112[9] + 8) = *(long long *)((char *)&v116[9] + 8);
        *(_OWORD *)((char *)&v112[10] + 8) = v77;
        *(_OWORD *)((char *)&v112[11] + 8) = v78;
        *(_OWORD *)((char *)&v112[12] + 8) = v79;
        *((void *)&v112[13] + 1) = v80;
        *(void *)&v112[14] = v81;
        *((void *)&v112[14] + 1) = v93;
        *(void *)&v112[15] = v92;
        *((void *)&v112[15] + 1) = v91;
        *(void *)&v112[16] = v90;
        *((void *)&v112[16] + 1) = v89;
        *(void *)&v112[17] = v88;
        *((void *)&v112[17] + 1) = __srca;
        *(void *)&v112[18] = v99;
        BYTE8(v112[18]) = v73;
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v112, v84, v85, v86);
      }
      else
      {
        _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v112);
      }
      v71 = v112;
      return outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v71, a9, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
  }
}

uint64_t outlined init with copy of ScrollPosition.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)@<X0>(double *a1@<X0>, uint64_t a2@<X8>)
{
  return specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t))specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:), (void (*)(unint64_t, unint64_t))specialized LazySubviewPlacements.logDefaultPlacement(_:), (uint64_t (*)(const void *, uint64_t, uint64_t, unint64_t, uint64_t))specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:), a2);
}

{
  return specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t))specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:), (void (*)(unint64_t, unint64_t))specialized LazySubviewPlacements.logDefaultPlacement(_:), (uint64_t (*)(const void *, uint64_t, uint64_t, unint64_t, uint64_t))specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:), a2);
}

{
  return specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t))specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:), (void (*)(uint64_t, unint64_t))specialized LazySubviewPlacements.logDefaultPlacement(_:), (uint64_t (*)(const void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:), a2);
}

{
  return specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:)(a1, (void (*)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t))specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:), (void (*)(uint64_t, unint64_t))specialized LazySubviewPlacements.logDefaultPlacement(_:), (uint64_t (*)(const void *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:), a2);
}

uint64_t specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t *a1, char *a2, uint64_t a3, void (*a4)(_OWORD *__return_ptr, uint64_t, uint64_t), _DWORD *a5, int *a6, void (*a7)(uint64_t))
{
  uint64_t v12 = v7;
  memcpy(__dst, a2, 0x129uLL);
  uint64_t result = _LazyLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0) {
    return result;
  }
  AGGraphClearUpdate();
  BOOL v16 = specialized closure #1 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v7);
  uint64_t result = AGGraphSetUpdate();
  if (v16) {
    return result;
  }
  uint64_t v17 = *(void *)(v7 + 128);
  swift_bridgeObjectRetain();
  outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v12);
  a4(__dst, v17, v12);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)&__dst[0] + 1);
  if (!*((void *)&__dst[0] + 1)) {
    return result;
  }
  uint64_t v19 = (uint64_t)a1;
  uint64_t v20 = *a1;
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21) {
    return swift_release();
  }
  unint64_t v51 = *(void *)&__dst[0];
  double v53 = a2;
  outlined retain of [Text.Modifier](v19);
  uint64_t v54 = v19;
  outlined retain of [Text.Modifier](v19);
  for (uint64_t i = v20 + 48; ; i += 72)
  {
    uint64_t v23 = *(void *)(i - 16);
    int v24 = *a6;
    if ((*a6 & ~*a5) == 0) {
      LOBYTE(v24) = 0;
    }
    if (*(unsigned char *)(v18 + 165) == 1 && ((v24 | *a5) & 1) != 0
      || *(unsigned char *)(v18 + 166) == 1 && ((v24 | *a5) & 2) != 0)
    {
      goto LABEL_6;
    }
    uint64_t v25 = *(void *)(v18 + 144);
    *(void *)&__dst[0] = *(void *)(v18 + 136);
    *((void *)&__dst[0] + 1) = v25;
    swift_retain();
    if (static _ViewList_ID.== infix(_:_:)()) {
      break;
    }
    swift_release();
LABEL_6:
    if (!--v21)
    {
      outlined release of _LazyLayout_Placements(v54);
      outlined release of _LazyLayout_Placements(v54);
      return swift_release();
    }
  }
  outlined release of _LazyLayout_Placements(v54);
  outlined release of _LazyLayout_Placements(v54);
  uint64_t v26 = *(void *)(v23 + 144);
  *(void *)&__dst[0] = *(void *)(v23 + 136);
  *((void *)&__dst[0] + 1) = v26;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  long long v27 = *(_OWORD *)(v53 + 248);
  LOBYTE(__dst[15]) = v53[296];
  long long v28 = *(_OWORD *)(v53 + 200);
  __dst[8] = *(_OWORD *)(v53 + 184);
  __dst[9] = v28;
  long long v29 = *(_OWORD *)(v53 + 232);
  __dst[10] = *(_OWORD *)(v53 + 216);
  __dst[11] = v29;
  long long v30 = *(_OWORD *)(v53 + 136);
  __dst[4] = *(_OWORD *)(v53 + 120);
  __dst[5] = v30;
  long long v31 = *(_OWORD *)(v53 + 168);
  __dst[6] = *(_OWORD *)(v53 + 152);
  __dst[7] = v31;
  long long v32 = *(_OWORD *)(v53 + 72);
  __dst[0] = *(_OWORD *)(v53 + 56);
  __dst[1] = v32;
  long long v33 = *(_OWORD *)(v53 + 104);
  __dst[2] = *(_OWORD *)(v53 + 88);
  __dst[3] = v33;
  long long v34 = *(_OWORD *)(v53 + 264);
  long long v35 = *(_OWORD *)(v53 + 280);
  __dst[12] = v27;
  __dst[13] = v34;
  __dst[14] = v35;
  uint64_t result = ScrollGeometry.visibleRect.getter();
  if ((v51 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  double v55 = v36;
  double v50 = v37;
  uint64_t v38 = *(void *)(v12 + 136);
  if (v51 >= *(void *)(v38 + 16))
  {
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v39 = v38 + 32 * v51;
  double v52 = *(double *)(v39 + 40);
  double v40 = *(double *)(v12 + 240);
  double v48 = *(double *)(v12 + 248);
  double v49 = *(double *)(v12 + 168);
  double v41 = *(double *)(v39 + 32) - *(double *)(v12 + 160);
  swift_retain();
  double v42 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v44 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v43, *(unint64_t *)&v42));
  _LazyLayout_PlacedSubview.size.getter();
  swift_release();
  double v45 = *((double *)v53 + 3);
  double v46 = v44.x - v55 - v41 - (*((double *)v53 + 2) - v40);
  if ((Axis.Set.contains(_:)() & 1) == 0) {
    double v46 = 0.0;
  }
  if (Axis.Set.contains(_:)())
  {
    if (v46 != 0.0 || v44.y - v50 - (v52 - v49) - (v45 - v48) != 0.0)
    {
LABEL_26:
      uint64_t v47 = outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v12);
      a7(v47);
      swift_release();
      swift_release();
      return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v12);
    }
  }
  else if (v46 != 0.0)
  {
    goto LABEL_26;
  }
  swift_release();
  return swift_release();
}

{
  uint64_t v7;
  uint64_t v12;
  uint64_t result;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t i;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  double v36;
  double v37;
  uint64_t v38;
  uint64_t v39;
  double v40;
  double v41;
  double v42;
  unint64_t v43;
  CGPoint v44;
  double v45;
  double v46;
  uint64_t v47;
  double v48;
  double v49;
  double v50;
  unint64_t v51;
  double v52;
  char *v53;
  uint64_t v54;
  double v55;
  _OWORD __dst[20];

  uint64_t v12 = v7;
  memcpy(__dst, a2, 0x129uLL);
  uint64_t result = _LazyLayout_PlacementContext.allowsTranslations.getter();
  if ((result & 1) == 0) {
    return result;
  }
  AGGraphClearUpdate();
  BOOL v16 = specialized closure #1 in LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(v7);
  uint64_t result = AGGraphSetUpdate();
  if (v16) {
    return result;
  }
  uint64_t v17 = *(void *)(v7 + 128);
  swift_bridgeObjectRetain();
  outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v12);
  a4(__dst, v17, v12);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = *((void *)&__dst[0] + 1);
  if (!*((void *)&__dst[0] + 1)) {
    return result;
  }
  uint64_t v19 = (uint64_t)a1;
  uint64_t v20 = *a1;
  uint64_t v21 = *(void *)(v20 + 16);
  if (!v21) {
    return swift_release();
  }
  unint64_t v51 = *(void *)&__dst[0];
  double v53 = a2;
  outlined retain of [Text.Modifier](v19);
  uint64_t v54 = v19;
  outlined retain of [Text.Modifier](v19);
  for (uint64_t i = v20 + 48; ; i += 72)
  {
    uint64_t v23 = *(void *)(i - 16);
    int v24 = *a6;
    if ((*a6 & ~*a5) == 0) {
      LOBYTE(v24) = 0;
    }
    if (*(unsigned char *)(v18 + 165) == 1 && ((v24 | *a5) & 1) != 0
      || *(unsigned char *)(v18 + 166) == 1 && ((v24 | *a5) & 2) != 0)
    {
      goto LABEL_6;
    }
    uint64_t v25 = *(void *)(v18 + 144);
    *(void *)&__dst[0] = *(void *)(v18 + 136);
    *((void *)&__dst[0] + 1) = v25;
    swift_retain();
    if (static _ViewList_ID.== infix(_:_:)()) {
      break;
    }
    swift_release();
LABEL_6:
    if (!--v21)
    {
      outlined release of _LazyLayout_Placements(v54);
      outlined release of _LazyLayout_Placements(v54);
      return swift_release();
    }
  }
  outlined release of _LazyLayout_Placements(v54);
  outlined release of _LazyLayout_Placements(v54);
  uint64_t v26 = *(void *)(v23 + 144);
  *(void *)&__dst[0] = *(void *)(v23 + 136);
  *((void *)&__dst[0] + 1) = v26;
  if ((static _ViewList_ID.== infix(_:_:)() & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  long long v27 = *(_OWORD *)(v53 + 248);
  LOBYTE(__dst[15]) = v53[296];
  long long v28 = *(_OWORD *)(v53 + 200);
  __dst[8] = *(_OWORD *)(v53 + 184);
  __dst[9] = v28;
  long long v29 = *(_OWORD *)(v53 + 232);
  __dst[10] = *(_OWORD *)(v53 + 216);
  __dst[11] = v29;
  long long v30 = *(_OWORD *)(v53 + 136);
  __dst[4] = *(_OWORD *)(v53 + 120);
  __dst[5] = v30;
  long long v31 = *(_OWORD *)(v53 + 168);
  __dst[6] = *(_OWORD *)(v53 + 152);
  __dst[7] = v31;
  long long v32 = *(_OWORD *)(v53 + 72);
  __dst[0] = *(_OWORD *)(v53 + 56);
  __dst[1] = v32;
  long long v33 = *(_OWORD *)(v53 + 104);
  __dst[2] = *(_OWORD *)(v53 + 88);
  __dst[3] = v33;
  long long v34 = *(_OWORD *)(v53 + 264);
  long long v35 = *(_OWORD *)(v53 + 280);
  __dst[12] = v27;
  __dst[13] = v34;
  __dst[14] = v35;
  uint64_t result = ScrollGeometry.visibleRect.getter();
  if ((v51 & 0x8000000000000000) != 0)
  {
    __break(1u);
    goto LABEL_31;
  }
  double v55 = v36;
  double v50 = v37;
  uint64_t v38 = *(void *)(v12 + 136);
  if (v51 >= *(void *)(v38 + 16))
  {
LABEL_31:
    __break(1u);
    return result;
  }
  uint64_t v39 = v38 + 32 * v51;
  double v52 = *(double *)(v39 + 40);
  double v40 = *(double *)(v12 + 240);
  double v48 = *(double *)(v12 + 248);
  double v49 = *(double *)(v12 + 168);
  double v41 = *(double *)(v39 + 32) - *(double *)(v12 + 160);
  swift_retain();
  double v42 = _LazyLayout_PlacedSubview.size.getter();
  CGPoint v44 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v43, *(unint64_t *)&v42));
  _LazyLayout_PlacedSubview.size.getter();
  swift_release();
  double v45 = *((double *)v53 + 3);
  double v46 = v44.x - v55 - v41 - (*((double *)v53 + 2) - v40);
  if ((Axis.Set.contains(_:)() & 1) == 0) {
    double v46 = 0.0;
  }
  if (Axis.Set.contains(_:)())
  {
    if (v46 != 0.0 || v44.y - v50 - (v52 - v49) - (v45 - v48) != 0.0)
    {
LABEL_26:
      uint64_t v47 = outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v12);
      a7(v47);
      swift_release();
      swift_release();
      return outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(v12);
    }
  }
  else if (v46 != 0.0)
  {
    goto LABEL_26;
  }
  swift_release();
  return swift_release();
}

BOOL _LazyLayout_PlacementContext.allowsTranslations.getter()
{
  double v2 = *(double *)(v0 + 32);
  double v1 = *(double *)(v0 + 40);
  ScrollGeometry.visibleRect.getter();
  CGFloat x = v12.origin.x;
  CGFloat y = v12.origin.y;
  CGFloat width = v12.size.width;
  CGFloat height = v12.size.height;
  if (CGRectGetMinX(v12) <= 0.0)
  {
    v13.origin.CGFloat x = x;
    v13.origin.CGFloat y = y;
    v13.size.CGFloat width = width;
    v13.size.CGFloat height = height;
    BOOL v7 = CGRectGetMinY(v13) <= 0.0;
  }
  else
  {
    BOOL v7 = 0;
  }
  v14.origin.CGFloat x = x;
  v14.origin.CGFloat y = y;
  v14.size.CGFloat width = width;
  v14.size.CGFloat height = height;
  if (v2 > CGRectGetMaxX(v14))
  {
    char v8 = v2 == 0.0 || v7;
    if (v8) {
      return 0;
    }
    return v1 != 0.0;
  }
  v15.origin.CGFloat x = x;
  v15.origin.CGFloat y = y;
  v15.size.CGFloat width = width;
  v15.size.CGFloat height = height;
  CGFloat MaxY = CGRectGetMaxY(v15);
  BOOL result = 0;
  char v11 = v1 <= MaxY || v7;
  if ((v11 & 1) == 0 && v2 != 0.0) {
    return v1 != 0.0;
  }
  return result;
}

uint64_t specialized LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)@<X0>(const void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t)@<X3>, void (*a5)(unint64_t, unint64_t)@<X4>, uint64_t (*a6)(const void *, uint64_t, uint64_t, unint64_t, uint64_t)@<X6>, uint64_t a7@<X8>)
{
  void (*v40)(void *__return_ptr, const void *, _OWORD *, uint64_t, uint64_t);
  void (*v41)(unint64_t, unint64_t);
  uint64_t v42;
  void v43[42];
  _OWORD v44[11];
  _OWORD v45[8];
  _OWORD v46[11];
  _OWORD v47[5];
  _DWORD __dst[86];

  char v11 = v7;
  memcpy(__dst, v7, 0x149uLL);
  specialized LazySubviewPlacements.transaction.getter();
  Transaction.scrollContentOffsetAdjustmentBehavior.getter();
  swift_release();
  if (LOBYTE(v43[0]) == 2
    || (type metadata accessor for LazyLayoutViewCache(),
        *(_DWORD *)(*(void *)AGGraphGetValue() + 148) == *MEMORY[0x1E4F4E7A0]))
  {
    _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v43);
    uint64_t v16 = a7;
    goto LABEL_4;
  }
  uint64_t v39 = a3;
  double v40 = a4;
  double v41 = a5;
  double v42 = a7;
  uint64_t v18 = MEMORY[0x1E4F3FA08];
  uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F41638];
  type metadata accessor for External<UInt32>(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E4F3FA08], MEMORY[0x1E4F41638]);
  uint64_t v21 = v20;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of AccessibilityScrollableContext?(Value, (uint64_t)v45, &lazy cache variable for type metadata for Binding<ScrollPosition>, v18, v19);
  MEMORY[0x18C113DA0](v44, v21);
  outlined destroy of AccessibilityScrollableContext?((uint64_t)v45, &lazy cache variable for type metadata for Binding<ScrollPosition>, v18, v19);
  v47[3] = v44[3];
  v47[4] = v44[4];
  v47[1] = v44[1];
  v47[2] = v44[2];
  v47[0] = v44[0];
  AGGraphClearUpdate();
  BOOL v23 = specialized closure #1 in LazySubviewPlacements.makeIDPlacementContextIfNeeded(_:matchingID:)((uint64_t)v7);
  AGGraphSetUpdate();
  if (!v23)
  {
    long long v24 = *(_OWORD *)(v11 + 248);
    long long v25 = *(_OWORD *)(v11 + 200);
    v45[2] = *(_OWORD *)(v11 + 184);
    v45[3] = v25;
    long long v26 = *(_OWORD *)(v11 + 232);
    v45[4] = *(_OWORD *)(v11 + 216);
    v45[5] = v26;
    long long v27 = *(_OWORD *)(v11 + 168);
    v45[0] = *(_OWORD *)(v11 + 152);
    v45[1] = v27;
    long long v28 = *(_OWORD *)(v11 + 264);
    long long v29 = *(_OWORD *)(v11 + 280);
    v45[6] = v24;
    v45[7] = v28;
    v46[0] = v29;
    *(_OWORD *)((char *)v46 + 9) = *(_OWORD *)(v11 + 289);
    memcpy(v43, a1, 0x129uLL);
    if (PositionState.dispatchContainerSizeChange(context:)((uint64_t)v43))
    {
      v40(v43, a1, v47, a2, v39);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v44, (uint64_t)v45, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      long long v30 = v41;
      if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v45) != 1)
      {
        memcpy(v43, v11, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v43);
        unint64_t v31 = 0xD000000000000014;
        unint64_t v32 = 0x8000000188328B20;
LABEL_14:
        v30(v31, v32);
        outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v43);
        goto LABEL_15;
      }
      goto LABEL_15;
    }
    uint64_t v33 = AGGraphGetValue();
    uint64_t v34 = *(void *)v33;
    uint64_t v35 = *(void *)(v33 + 8);
    unsigned __int8 v36 = *(unsigned char *)(v33 + 16);
    uint64_t v37 = *(unsigned int *)(v33 + 20);
    uint64_t v38 = *(void *)AGGraphGetValue();
    swift_retain();
    LOBYTE(v43[0]) = v36;
    LOBYTE(v34) = a6(a1, v34, v35, v36 | (unint64_t)(v37 << 32), v38);
    swift_release();
    if (v34)
    {
      v40(v43, a1, v47, a2, v39);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v44, (uint64_t)v45, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      long long v30 = v41;
      if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v45) != 1)
      {
        memcpy(v43, v11, 0x149uLL);
        outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v43);
        unint64_t v31 = 0x2077656E20726F66;
        unint64_t v32 = 0xEF6469206E69616DLL;
        goto LABEL_14;
      }
LABEL_15:
      outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v44, v42, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
      uint64_t result = outlined destroy of ScrollPosition((uint64_t)v47);
      v11[152] = 1;
      return result;
    }
  }
  if (v11[152] != 1)
  {
    v40(v43, a1, v47, a2, v39);
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, (uint64_t)v44, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v44, (uint64_t)v45, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    if (_s7SwiftUI28_LazyLayout_PlacementContextVSgWOg((uint64_t)v45) != 1)
    {
      memcpy(v43, v11, 0x149uLL);
      outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v43);
      v41(0xD000000000000011, 0x8000000188328B40);
      outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v43);
    }
    outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v44, v42, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
    uint64_t result = outlined destroy of ScrollPosition((uint64_t)v47);
    goto LABEL_5;
  }
  outlined destroy of ScrollPosition((uint64_t)v47);
  _s7SwiftUI28_LazyLayout_PlacementContextVSgWOi0_((uint64_t)v43);
  uint64_t v16 = v42;
LABEL_4:
  uint64_t result = outlined init with take of _LazyLayout_PlacementContext?((uint64_t)v43, v16, &lazy cache variable for type metadata for _LazyLayout_PlacementContext?, (uint64_t)&type metadata for _LazyLayout_PlacementContext);
LABEL_5:
  v11[152] = 1;
  return result;
}

uint64_t specialized PositionState.dispatchSubviewsChange<A>(context:layout:cache:)(void *__src, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v16)(long long *__return_ptr, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned char v41[16];
  void v42[13];
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  void v51[38];
  long long v52[8];
  unsigned char v53[297];

  memcpy(v53, __src, sizeof(v53));
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v12)
  {
    uint64_t v13 = *(void *)(v5 + 128);
    if (v13)
    {
      uint64_t v21 = *(void *)(v5 + 120);
      type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyStack_Cache<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
      uint64_t v15 = v14;
      uint64_t v16 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a5 + 280);
      swift_bridgeObjectRetain();
      v16(&v43, v15, v15);
      v51[0] = *__src;
      LODWORD(v51[1]) = *((_DWORD *)__src + 2);
      uint64_t v17 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v17, (uint64_t)v41);
      uint64_t v34 = 0;
      uint64_t v35 = 1;
      unsigned __int8 v36 = 0u;
      uint64_t v37 = 0u;
      uint64_t v38 = 0u;
      uint64_t v39 = 0u;
      double v40 = 0;
      memcpy(v51, v53, 0x129uLL);
      v52[4] = v47;
      v52[5] = v48;
      v52[6] = v49;
      v52[7] = v50;
      v52[0] = v43;
      v52[1] = v44;
      v52[2] = v45;
      v52[3] = v46;
      uint64_t v18 = specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)((uint64_t)v41, v51, v52, (uint64_t)&v34, a2, a3, a4 & 0xFFFFFFFF00000001);
      if (v35)
      {
        swift_release();
        outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v52);
        outlined consume of _ViewList_ID??(0, 1);
        outlined consume of _ViewList_ID??(v21, v13);
        goto LABEL_10;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      MEMORY[0x1F4188790](v18);
      unint64_t v31 = v42[11];
      uint64_t v19 = outlined init with copy of _ViewList_Node((uint64_t)v42, (uint64_t)&v22);
      long long v30 = 2;
      MEMORY[0x1F4188790](v19);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)&v22);
      swift_bridgeObjectRelease();
      if (!v33)
      {
        swift_release();
        long long v26 = v47;
        long long v27 = v48;
        long long v28 = v49;
        long long v29 = v50;
        uint64_t v22 = v43;
        BOOL v23 = v44;
        long long v24 = v45;
        long long v25 = v46;
        outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v20 = static _ViewList_ID.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      long long v26 = v47;
      long long v27 = v48;
      long long v28 = v49;
      long long v29 = v50;
      uint64_t v22 = v43;
      BOOL v23 = v44;
      long long v24 = v45;
      long long v25 = v46;
      outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v22);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
LABEL_10:
        outlined destroy of _LazyLayout_Subviews((uint64_t)v41);
        return 1;
      }
      outlined destroy of _LazyLayout_Subviews((uint64_t)v41);
    }
    return 0;
  }
  return result;
}

{
  uint64_t v5;
  uint64_t result;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(long long *__return_ptr, uint64_t, uint64_t);
  int v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  uint64_t v40;
  unsigned char v41[16];
  void v42[13];
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  void v51[38];
  long long v52[8];
  unsigned char v53[297];

  memcpy(v53, __src, sizeof(v53));
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
  AGGraphGetValue();
  uint64_t result = 0;
  if (v12)
  {
    uint64_t v13 = *(void *)(v5 + 128);
    if (v13)
    {
      uint64_t v21 = *(void *)(v5 + 120);
      type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyStack_Cache<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyStack_Cache);
      uint64_t v15 = v14;
      uint64_t v16 = *(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)a5 + 280);
      swift_bridgeObjectRetain();
      v16(&v43, v15, v15);
      v51[0] = *__src;
      LODWORD(v51[1]) = *((_DWORD *)__src + 2);
      uint64_t v17 = SizeAndSpacingContext.context.getter();
      LazyLayoutViewCache.subviews(context:)(v17, (uint64_t)v41);
      uint64_t v34 = 0;
      uint64_t v35 = 1;
      unsigned __int8 v36 = 0u;
      uint64_t v37 = 0u;
      uint64_t v38 = 0u;
      uint64_t v39 = 0u;
      double v40 = 0;
      memcpy(v51, v53, 0x129uLL);
      v52[4] = v47;
      v52[5] = v48;
      v52[6] = v49;
      v52[7] = v50;
      v52[0] = v43;
      v52[1] = v44;
      v52[2] = v45;
      v52[3] = v46;
      uint64_t v18 = specialized LazyStack<>.estimatedPlacement(subviews:context:cache:in:)((uint64_t)v41, v51, v52, (uint64_t)&v34, a2, a3, a4 & 0xFFFFFFFF00000001);
      if (v35)
      {
        swift_release();
        outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)v52);
        outlined consume of _ViewList_ID??(0, 1);
        outlined consume of _ViewList_ID??(v21, v13);
        goto LABEL_10;
      }
      unint64_t v32 = 0;
      uint64_t v33 = 0;
      MEMORY[0x1F4188790](v18);
      unint64_t v31 = v42[11];
      uint64_t v19 = outlined init with copy of _ViewList_Node((uint64_t)v42, (uint64_t)&v22);
      long long v30 = 2;
      MEMORY[0x1F4188790](v19);
      swift_bridgeObjectRetain();
      _ViewList_Node.applyNodes(from:style:transform:to:)();
      outlined destroy of _ViewList_Node((uint64_t)&v22);
      swift_bridgeObjectRelease();
      if (!v33)
      {
        swift_release();
        long long v26 = v47;
        long long v27 = v48;
        long long v28 = v49;
        long long v29 = v50;
        uint64_t v22 = v43;
        BOOL v23 = v44;
        long long v24 = v45;
        long long v25 = v46;
        outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v22);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      swift_bridgeObjectRetain_n();
      uint64_t v20 = static _ViewList_ID.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_release();
      long long v26 = v47;
      long long v27 = v48;
      long long v28 = v49;
      long long v29 = v50;
      uint64_t v22 = v43;
      BOOL v23 = v44;
      long long v24 = v45;
      long long v25 = v46;
      outlined release of _LazyStack_Cache<LazyVStackLayout>((uint64_t)&v22);
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease();
      if ((v20 & 1) == 0)
      {
LABEL_10:
        outlined destroy of _LazyLayout_Subviews((uint64_t)v41);
        return 1;
      }
      outlined destroy of _LazyLayout_Subviews((uint64_t)v41);
    }
    return 0;
  }
  return result;
}

uint64_t specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(uint64_t *a1, char *a2, uint64_t a3)
{
  return specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, a3, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))specialized Sequence.min(by:), dword_1ED476A48, &dword_1ED476A48[1], (void (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter);
}

{
  return specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, a3, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))specialized Sequence.min(by:), dword_1ED476AC0, &dword_1ED476AC0[1], (void (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter);
}

{
  return specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, a3, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))specialized Sequence.min(by:), dword_1ED476958, &dword_1ED476958[1], (void (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter);
}

{
  return specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, a3, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))specialized Sequence.min(by:), dword_1ED4769D0, &dword_1ED4769D0[1], (void (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter);
}

{
  return specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, a3, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))specialized Sequence.min(by:), dword_1ED476B38, &dword_1ED476B38[1], (void (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter);
}

{
  return specialized LazySubviewPlacements.makeSizeChangeTranslation(placements:context:axes:)(a1, a2, a3, (void (*)(_OWORD *__return_ptr, uint64_t, uint64_t))specialized Sequence.min(by:), dword_1ED476BB0, &dword_1ED476BB0[1], (void (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter);
}

Swift::Bool __swiftcall LazyLayoutViewCache.mayInvalidate()()
{
  uint64_t v1 = v0;
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    AGGraphClearUpdate();
    swift_beginAccess();
    int v3 = GraphHost.Data.updateSeed.getter();
    AGGraphSetUpdate();
    swift_release();
    if (*(_DWORD *)(v1 + 220) == v3)
    {
      char v4 = *(unsigned char *)(v1 + 224);
      if (!v4)
      {
        LOBYTE(Strong) = 0;
        return Strong;
      }
    }
    else
    {
      *(_DWORD *)(v1 + 220) = v3;
      char v4 = 2;
    }
    *(unsigned char *)(v1 + 224) = v4 - 1;
    LOBYTE(Strong) = 1;
  }
  return Strong;
}

uint64_t specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter()
{
  AGGraphClearUpdate();
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for Scrollable);
  Weakuint64_t Value = AGGraphGetWeakValue();
  if (WeakValue)
  {
    outlined init with copy of TableColumnList(WeakValue, (uint64_t)&v5);
  }
  else
  {
    uint64_t v7 = 0;
    long long v5 = 0u;
    long long v6 = 0u;
  }
  AGGraphSetUpdate();
  uint64_t v1 = *((void *)&v6 + 1);
  if (*((void *)&v6 + 1))
  {
    uint64_t v2 = v7;
    __swift_project_boxed_opaque_existential_1(&v5, *((uint64_t *)&v6 + 1));
    char v3 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 24))(v1, v2);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v5);
  }
  else
  {
    outlined destroy of ScrollableCollection?((uint64_t)&v5, (uint64_t (*)(void))type metadata accessor for Scrollable?);
    char v3 = 1;
  }
  return v3 & 1;
}

uint64_t specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, a2, a3, a4, &lazy cache variable for type metadata for LazySubviewPlacements<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(void))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter, a5);
}

{
  return specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, a2, a3, a4, &lazy cache variable for type metadata for LazySubviewPlacements<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter, a5);
}

{
  return specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, a2, a3, a4, &lazy cache variable for type metadata for LazySubviewPlacements<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter, a5);
}

{
  return specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, a2, a3, a4, &lazy cache variable for type metadata for LazySubviewPlacements<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(void))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter, a5);
}

{
  return specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, a2, a3, a4, &lazy cache variable for type metadata for LazySubviewPlacements<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(void))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter, a5);
}

{
  return specialized LazySubviewPlacements.makeDefaultPlacementContext(_:position:matchingID:)(a1, a2, a3, a4, &lazy cache variable for type metadata for LazySubviewPlacements<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(void))specialized LazySubviewPlacements.allowsContentOffsetAdjustments.getter, a5);
}

uint64_t specialized LazySubviewPlacements.logDefaultPlacement(_:)(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  type metadata accessor for Logger?();
  MEMORY[0x1F4188790](v8 - 8);
  unsigned int v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  static Log.scroll.getter();
  uint64_t v11 = type metadata accessor for Logger();
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1) {
    return outlined destroy of ScrollableCollection?((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Logger?);
  }
  swift_bridgeObjectRetain_n();
  uint64_t v14 = Logger.logObject.getter();
  os_log_type_t v15 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v14, v15))
  {
    unint64_t v16 = a4;
    uint64_t v17 = swift_slowAlloc();
    uint64_t v20 = swift_slowAlloc();
    uint64_t v22 = v20;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v19 = a1;
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    *(_WORD *)(v17 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v21 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v19, a2, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1872C6000, v14, v15, "%s: Placing default subviews %s", (uint8_t *)v17, 0x16u);
    uint64_t v18 = v20;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v18, -1, -1);
    MEMORY[0x18C119C60](v17, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v10, v11);
}

uint64_t specialized LazySubviewPlacements.logDefaultPlacement(_:)(uint64_t a1, unint64_t a2)
{
  return specialized LazySubviewPlacements.logDefaultPlacement(_:)(a1, a2, 0xD000000000000010, 0x8000000188328C80);
}

{
  return specialized LazySubviewPlacements.logDefaultPlacement(_:)(a1, a2, 0x8000000188328A70);
}

{
  return specialized LazySubviewPlacements.logDefaultPlacement(_:)(a1, a2, 0x8000000188328B60);
}

{
  return specialized LazySubviewPlacements.logDefaultPlacement(_:)(a1, a2, 0xD000000000000010, 0x8000000188328BB0);
}

{
  return specialized LazySubviewPlacements.logDefaultPlacement(_:)(a1, a2, 0x69724748797A614CLL, 0xEF74756F79614C64);
}

{
  return specialized LazySubviewPlacements.logDefaultPlacement(_:)(a1, a2, 0x69724756797A614CLL, 0xEF74756F79614C64);
}

{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  NSObject *v10;
  os_log_type_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  type metadata accessor for (translation: CGSize, scale: CGSize)?(0, (unint64_t *)&lazy cache variable for type metadata for Logger?, MEMORY[0x1E4FBD360]);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (char *)&v18 - v5;
  static Log.scroll.getter();
  uint64_t v7 = type metadata accessor for Logger();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1) {
    return outlined destroy of Logger?((uint64_t)v6);
  }
  swift_bridgeObjectRetain_n();
  unsigned int v10 = Logger.logObject.getter();
  uint64_t v11 = static os_log_type_t.default.getter();
  uint64_t v12 = v11;
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v13 = swift_slowAlloc();
    HIDWORD(v18) = v12;
    uint64_t v14 = v13;
    uint64_t v19 = swift_slowAlloc();
    uint64_t v21 = v19;
    *(_DWORD *)uint64_t v14 = 136315394;
    os_log_type_t v15 = _typeName(_:qualified:)();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v16, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease();
    *(_WORD *)(v14 + 12) = 2080;
    swift_bridgeObjectRetain();
    uint64_t v20 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a1, a2, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)();
    swift_bridgeObjectRelease_n();
    _os_log_impl(&dword_1872C6000, v10, BYTE4(v18), "%s: Placing default subviews %s", (uint8_t *)v14, 0x16u);
    uint64_t v17 = v19;
    swift_arrayDestroy();
    MEMORY[0x18C119C60](v17, -1, -1);
    MEMORY[0x18C119C60](v14, -1, -1);
  }
  else
  {
    swift_bridgeObjectRelease_n();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v6, v7);
}

BOOL protocol witness for Scrollable.allowsContentOffsetAdjustments.getter in conformance ScrollViewScrollable()
{
  return ScrollViewScrollable.allowsContentOffsetAdjustments.getter();
}

BOOL ScrollViewScrollable.allowsContentOffsetAdjustments.getter()
{
  AGGraphClearUpdate();
  Weakuint64_t Value = (uint64_t *)AGGraphGetWeakValue();
  if (WeakValue)
  {
    uint64_t v14 = WeakValue[1];
    uint64_t v15 = *WeakValue;
    uint64_t v12 = WeakValue[3];
    uint64_t v13 = WeakValue[2];
    uint64_t v1 = WeakValue[5];
    uint64_t v11 = WeakValue[4];
    uint64_t v2 = WeakValue[6];
    uint64_t v3 = WeakValue[7];
    uint64_t v4 = WeakValue[8];
    uint64_t v5 = WeakValue[9];
    uint64_t v6 = WeakValue[10];
    uint64_t v7 = WeakValue[11];
    unint64_t v8 = WeakValue[12];
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v8);
    AGGraphSetUpdate();
    if ((~v8 & 0xF000000000000004) != 0)
    {
      BOOL v9 = v8 >> 62 != 1;
      outlined consume of SystemScrollLayoutState?(v15, v14, v13, v12, v11, v1, v2, v3, v4, v5, v6, v7, v8);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    AGGraphSetUpdate();
    return 0;
  }
  return v9;
}

uint64_t outlined destroy of ScrollPosition.ViewID(uint64_t a1)
{
  return a1;
}

uint64_t @objc ContextMenuBridge.__ivar_destroyer(uint64_t a1)
{
  swift_unknownObjectWeakDestroy();

  return swift_unknownObjectRelease();
}

_UNKNOWN **base witness table accessor for ViewModifier in OutsetByRowInsetsIfNecessary.OutsetLayout()
{
  return &protocol witness table for OutsetByRowInsetsIfNecessary.OutsetLayout;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance EnvironmentChangeModifier<A>@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static EnvironmentChangeModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), a6);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ScrollEventStateReader<A>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  return static ScrollEventStateReader._makeViewList(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t partial apply for closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)()
{
  return closure #2 in LazySubviewPlacements.placeSubviews(placementContext:in:for:)();
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance LazyPageTabModifier@<X0>(uint64_t *a1@<X8>)
{
  return LazyPageTabModifier.body(content:)(*(unsigned char *)v1, *(void *)(v1 + 8), a1);
}

uint64_t partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)()
{
  return partial apply for closure #2 in closure #1 in FocusStoreLocation.set(_:transaction:)(1);
}

uint64_t partial apply for closure #1 in ViewThatFits.init(in:content:)()
{
  return closure #1 in ViewThatFits.init(in:content:)(v0[4], v0[5], v0[2]);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LazyHStack<A>()
{
  return static LazyHStack._makeView(view:inputs:)();
}

_UNKNOWN **base witness table accessor for ViewModifier in AccessibilityLabeledContentContentModifier<A>()
{
  return &protocol witness table for AccessibilityLabeledContentContentModifier<A>;
}

uint64_t destroy for ToolbarStorage.ID()
{
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeBufferWithCopyOfBuffer for UpdatedScrollViewContainer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v3 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  id v4 = v3;
  return a1;
}

uint64_t getEnumTagSinglePayload for BorderlessButtonLabelShapeStyle(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 3) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 3) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 2);
      BOOL v16 = v15 >= 2;
      int v17 = (v15 + 2147483646) & 0x7FFFFFFF;
      if (v16) {
        return (v17 + 1);
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t PopoverItemStateProvider.init(item:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Optional();
  uint64_t v8 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a4, a1, v8);
  uint64_t result = type metadata accessor for PopoverItemStateProvider();
  char v10 = (void *)(a4 + *(int *)(result + 52));
  *char v10 = a2;
  v10[1] = a3;
  return result;
}

uint64_t View.popover<A, B>(item:attachmentAnchor:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v35 = a8;
  uint64_t v33 = a9;
  uint64_t v34 = a5;
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  uint64_t v30 = a1;
  v28[3] = a11;
  v28[4] = a7;
  v28[1] = a6;
  v28[2] = a10;
  type metadata accessor for Optional();
  uint64_t v29 = type metadata accessor for Binding();
  uint64_t v14 = *(void *)(v29 - 8);
  MEMORY[0x1F4188790](v29);
  BOOL v16 = (char *)v28 - v15;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v38 = a10;
  uint64_t v39 = a11;
  uint64_t v17 = type metadata accessor for PopoverItemStateProvider();
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v28 - v18;
  v28[0] = swift_getWitnessTable();
  uint64_t v20 = type metadata accessor for PopoverPresentationModifier();
  uint64_t v21 = *(void *)(v20 - 8);
  double v22 = MEMORY[0x1F4188790](v20);
  long long v24 = (char *)v28 - v23;
  uint64_t v26 = *(void *)a2;
  uint64_t v25 = *(void *)(a2 + 8);
  LOBYTE(a2) = *(unsigned char *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v30, v29, v22);
  PopoverItemStateProvider.init(item:content:)((uint64_t)v16, v31, v32, (uint64_t)v19);
  uint64_t v36 = v26;
  uint64_t v37 = v25;
  LOBYTE(v38) = a2;
  PopoverPresentationModifier.init(provider:attachmentAnchor:arrowEdges:isDetachable:keyType:attachmentBehavior:)((uint64_t)v19, &v36, 256, 0, 1, 0, v17, (uint64_t)v24);
  swift_retain();
  outlined copy of Environment<CGFloat?>.Content(v26, v25, a2);
  MEMORY[0x18C113660](v24, v34, v20, v35);
  return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v24, v20);
}

uint64_t type metadata accessor for PopoverItemStateProvider()
{
  return swift_getGenericMetadata();
}

uint64_t get_witness_table_7SwiftUI4ViewRzSQRd__r__lAA15ModifiedContentVyxAA25EnvironmentChangeModifier33_1BB15EB6F18297504C950F7546E07730LLVyqd__GGAaBHPxAaBHD1__AhA0cH0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

uint64_t AppBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for AppBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

Swift::Void __swiftcall AppGraph.instantiateOutputs()()
{
  uint64_t v1 = v0;
  swift_beginAccess();
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = *(void **)(v0 + 24);
  uint64_t v4 = *(void **)(v0 + 32);
  char v5 = *(unsigned char *)(v0 + 40);
  char v6 = *(unsigned char *)(v0 + 41);
  int v7 = *(_DWORD *)(v0 + 68);
  uint64_t v8 = *(void *)(v0 + 72);
  int v9 = *(_DWORD *)(v0 + 80);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v1 + 112);
  uint64_t v32 = v2;
  uint64_t v33 = v3;
  uint64_t v34 = v4;
  char v35 = v5;
  char v36 = v6;
  long long v37 = *(_OWORD *)(v1 + 44);
  uint64_t v38 = *(void *)(v1 + 60);
  int v39 = v7;
  uint64_t v40 = v8;
  int v41 = v9;
  uint64_t v42 = v10;
  long long v43 = *(_OWORD *)(v1 + 96);
  uint64_t v44 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  id v12 = v2;
  id v13 = v3;
  id v14 = v4;
  uint64_t v15 = (void (*)(uint64_t *, void))GraphHost.Data.updateSeed.modify();
  ++*v16;
  v15(&v31, 0);
  uint64_t v17 = v32;
  uint64_t v18 = v33;
  uint64_t v19 = v34;
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  uint64_t v20 = (void *)GraphHost.rootSubgraph.getter();
  AGGraphClearUpdate();
  id v21 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in AppGraph.instantiateOutputs()(v1);
  AGSubgraphSetCurrent();

  AGGraphSetUpdate();
  double v22 = v32;
  int v23 = (int)v33;
  uint64_t v24 = PreferencesOutputs.subscript.getter();
  int v25 = *MEMORY[0x1E4F4E7A0];
  if ((v24 & 0x100000000) != 0) {
    int v26 = *MEMORY[0x1E4F4E7A0];
  }
  else {
    int v26 = v24;
  }
  *(_DWORD *)(v1 + 204) = v26;
  uint64_t v32 = v22;
  LODWORD(v33) = v23;
  uint64_t v27 = PreferencesOutputs.subscript.getter();
  if ((v27 & 0x100000000) != 0) {
    int v28 = v25;
  }
  else {
    int v28 = v27;
  }
  *(_DWORD *)(v1 + 232) = v28;
  uint64_t v32 = v22;
  LODWORD(v33) = v23;
  PreferencesOutputs.subscript.getter();
  swift_bridgeObjectRelease();
  uint64_t v29 = (void (*)(void **, void))GraphHost.hostPreferenceValues.modify();
  *uint64_t v30 = AGCreateWeakAttribute();
  v29(&v32, 0);
}

uint64_t closure #1 in AppGraph.instantiateOutputs()(uint64_t a1)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  swift_beginAccess();
  unint64_t v2 = *(void *)(a1 + 72);
  int v3 = *(_DWORD *)(a1 + 80);
  uint64_t v4 = *(void *)(a1 + 88);
  unsigned int v5 = *(_DWORD *)(a1 + 96);
  unsigned int v6 = *(_DWORD *)(a1 + 100);
  unsigned int v8 = *(_DWORD *)(a1 + 104);
  unsigned int v7 = *(_DWORD *)(a1 + 108);
  uint64_t v9 = *(void *)(a1 + 112);
  unint64_t v25 = *(void *)(a1 + 16);
  long long v26 = *(_OWORD *)(a1 + 24);
  int v30 = HIDWORD(v2);
  int v31 = v3;
  uint64_t v32 = v4;
  unsigned int v33 = v5;
  unsigned int v34 = v6;
  unsigned int v35 = v8;
  unsigned int v36 = v7;
  uint64_t v37 = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  GraphHost.Data.$hostPreferenceKeys.getter();
  PreferencesInputs.init(hostKeys:)();
  unint64_t v10 = v25;
  int v11 = v26;
  unint64_t v25 = v2;
  LODWORD(v26) = v3;
  *((void *)&v26 + 1) = v4;
  *(void *)&long long v27 = __PAIR64__(v6, v5);
  *((void *)&v27 + 1) = __PAIR64__(v7, v8);
  *(void *)&long long v28 = v9;
  *((void *)&v28 + 1) = v10;
  int v29 = v11;
  int v12 = *(_DWORD *)(a1 + 80);
  uint64_t v13 = *(void *)(a1 + 88);
  uint64_t v14 = *(void *)(a1 + 112);
  unint64_t v19 = *(void *)(a1 + 72);
  int v20 = v12;
  uint64_t v21 = v13;
  long long v22 = *(_OWORD *)(a1 + 96);
  *(void *)&long long v23 = v14;
  unsigned int v15 = _GraphInputs.environment.getter();
  int v16 = *(_DWORD *)(a1 + 220);
  unint64_t v19 = __PAIR64__(*(_DWORD *)(a1 + 200), v15);
  int v20 = v16;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type RootEnvironment and conformance RootEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  PreferenceKeys.add(_:)();
  LODWORD(v19) = *(_DWORD *)(a1 + 212);
  lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
  PropertyList.subscript.setter();
  LODWORD(v19) = *(_DWORD *)(a1 + 216);
  lazy protocol witness table accessor for type FocusStoreInputKey and conformance FocusStoreInputKey();
  PropertyList.subscript.setter();
  uint64_t v17 = *(void (**)(unint64_t *))(a1 + 176);
  unint64_t v19 = v2;
  int v20 = v3;
  uint64_t v21 = v4;
  long long v22 = v27;
  long long v23 = v28;
  int v24 = v29;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  v17(&v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  return swift_release();
}

uint64_t partial apply for closure #1 in AppGraph.init<A>(app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in AppGraph.init<A>(app:)(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80)), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in AppGraph.init<A>(app:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v23 = a2;
  uint64_t v29 = a5;
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v10;
  int v12 = *((_DWORD *)v10 + 2);
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[5];
  uint64_t v15 = v10[6];
  int v16 = *((_DWORD *)v10 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v26 = v40;
  uint64_t v25 = v41;
  int v24 = v42;
  int v27 = HIDWORD(v42);
  uint64_t v40 = v11;
  LODWORD(v41) = v12;
  long long v43 = *(_OWORD *)(a1 + 24);
  uint64_t v42 = v13;
  uint64_t v44 = v14;
  uint64_t v45 = v15;
  int v46 = v16;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v23, a3);
  uint64_t v32 = a3;
  uint64_t v17 = type metadata accessor for Attribute();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v9, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v31, a3, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a3);
  _GraphValue.init(_:)();
  uint64_t v33 = v26;
  uint64_t v34 = v25;
  LOBYTE(v35) = v24;
  HIDWORD(v35) = v27;
  type metadata accessor for AppBodyAccessor();
  swift_getWitnessTable();
  BodyAccessor.makeBody(container:inputs:fields:)();
  outlined consume of DynamicPropertyCache.Fields.Layout();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v33 = v40;
  LODWORD(v34) = v41;
  uint64_t v35 = v42;
  long long v36 = v43;
  uint64_t v37 = v44;
  uint64_t v38 = v45;
  int v39 = v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(v30, &v33, AssociatedTypeWitness, AssociatedConformanceWitness);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t type metadata accessor for AppBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type RootEnvironment and conformance RootEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type RootEnvironment and conformance RootEnvironment;
  if (!lazy protocol witness table cache variable for type RootEnvironment and conformance RootEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RootEnvironment and conformance RootEnvironment);
  }
  return result;
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance <> ModifiedContent<A, B>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static ModifiedContent<>._makeScene(scene:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16));
}

uint64_t static ModifiedContent<>._makeScene(scene:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v12 = *a2;
  int v13 = *((_DWORD *)a2 + 2);
  uint64_t v14 = a2[2];
  int v15 = *((_DWORD *)a2 + 14);
  LODWORD(v21) = *a1;
  int v11 = v21;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v20 = *(_OWORD *)(a2 + 5);
  uint64_t v16 = a2[3];
  uint64_t v17 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v21 = v12;
  int v22 = v13;
  uint64_t v23 = v14;
  uint64_t v24 = v16;
  uint64_t v25 = v17;
  long long v26 = v20;
  int v27 = v15;
  uint64_t v18 = swift_allocObject();
  *(void *)(v18 + 16) = a3;
  *(void *)(v18 + 24) = a4;
  *(void *)(v18 + 32) = a5;
  *(void *)(v18 + 40) = a6;
  *(_DWORD *)(v18 + 48) = v11;
  (*(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t, uint64_t *), uint64_t, uint64_t, uint64_t))(a6 + 32))(v28, &v21, partial apply for closure #2 in static ModifiedContent<>._makeScene(scene:inputs:), v18, a4, a6);
  return swift_release();
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _EnvironmentKeyWritingModifier<A>(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return static _SceneModifier<>._makeScene(modifier:inputs:body:)(a1, a2, a3, a4, a5, v10, WitnessTable);
}

uint64_t static _SceneModifier<>._makeScene(modifier:inputs:body:)(int *a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *), uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  int v9 = *a1;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  uint64_t v12 = a2[5];
  uint64_t v13 = a2[6];
  int v14 = *((_DWORD *)a2 + 14);
  uint64_t v26 = *a2;
  int v27 = v10;
  uint64_t v28 = v11;
  long long v29 = *(_OWORD *)(a2 + 3);
  uint64_t v30 = v12;
  uint64_t v31 = v13;
  int v32 = v14;
  LODWORD(v19) = v9;
  int v15 = *(void (**)(uint64_t *, uint64_t *, uint64_t, uint64_t))(a7 + 8);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(&v19, &v26, a5, a7);
  uint64_t v19 = v26;
  int v20 = v27;
  uint64_t v21 = v28;
  long long v22 = v29;
  uint64_t v23 = v30;
  uint64_t v24 = v31;
  int v25 = v32;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v16 = swift_bridgeObjectRetain();
  a3(v16, &v19);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t partial apply for closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t *a2)
{
  return closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(a1, a2, *(_DWORD *)(v2 + 48), *(void *)(v2 + 16), *(void *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t closure #2 in static ModifiedContent<>._makeScene(scene:inputs:)(uint64_t a1, uint64_t *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *a2;
  int v10 = *((_DWORD *)a2 + 2);
  uint64_t v11 = a2[2];
  int v12 = *((_DWORD *)a2 + 14);
  LODWORD(v17) = a3;
  type metadata accessor for ModifiedContent();
  type metadata accessor for _GraphValue();
  long long v16 = *(_OWORD *)(a2 + 5);
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v17 = v9;
  int v18 = v10;
  uint64_t v19 = v11;
  uint64_t v20 = v13;
  uint64_t v21 = v14;
  long long v22 = v16;
  int v23 = v12;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a6 + 32))(v24, &v17, a4, a6);
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance _PreferenceWritingModifier<A>@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  return static _PreferenceWritingModifier._makeScene(modifier:inputs:body:)(a1, a2, a3);
}

uint64_t static _PreferenceWritingModifier._makeScene(modifier:inputs:body:)@<X0>(uint64_t *a1@<X1>, void (*a2)(uint64_t *__return_ptr, uint64_t, uint64_t *)@<X2>, uint64_t a3@<X8>)
{
  int v3 = *((_DWORD *)a1 + 2);
  uint64_t v4 = a1[2];
  uint64_t v6 = a1[5];
  uint64_t v5 = a1[6];
  int v7 = *((_DWORD *)a1 + 14);
  uint64_t v22 = *a1;
  int v23 = v3;
  long long v25 = *(_OWORD *)(a1 + 3);
  uint64_t v24 = v4;
  uint64_t v26 = v6;
  uint64_t v27 = v5;
  int v28 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v13 = v22;
  int v14 = v23;
  uint64_t v15 = v4;
  long long v16 = v25;
  uint64_t v17 = v6;
  uint64_t v18 = v5;
  int v19 = v7;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a2(&v20, v8, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v13 = v5;
  int v14 = v7;
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_bridgeObjectRelease();
  int v10 = v21;
  *(void *)a3 = v20;
  *(_DWORD *)(a3 + 8) = v10;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance CommandsModifier<A>@<X0>(uint64_t *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  return static CommandsModifier._makeScene(modifier:inputs:body:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), a4);
}

uint64_t SceneBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for SceneBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t static Scene._makeScene(scene:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v11 = v40;
  uint64_t v12 = v41;
  char v13 = v42;
  int v14 = HIDWORD(v42);
  uint64_t v40 = v5;
  LODWORD(v41) = v6;
  uint64_t v42 = v7;
  long long v43 = *(_OWORD *)(a2 + 3);
  uint64_t v44 = v9;
  uint64_t v45 = v8;
  int v46 = v10;
  int v21 = v14;
  int v22 = v4;
  int v36 = v4;
  uint64_t v25 = v12;
  uint64_t v26 = v11;
  HIDWORD(v29) = HIDWORD(v12);
  char v24 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Scene.makeBody(scene:inputs:fields:)();
  uint64_t v15 = v38;
  uint64_t v23 = v37;
  LOBYTE(v10) = v39;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = v5;
  LODWORD(v29) = v41;
  uint64_t v30 = v7;
  long long v31 = v43;
  uint64_t v32 = v9;
  uint64_t v33 = v45;
  int v34 = v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v37, v35, &v28, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = v37;
  int v19 = v38;
  if ((v10 & 1) == 0)
  {
    uint64_t v37 = v23;
    uint64_t v38 = v15;
    int v36 = v22;
    uint64_t v28 = v26;
    uint64_t v29 = v25;
    LOBYTE(v30) = v24;
    HIDWORD(v30) = v21;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v18;
  *(_DWORD *)(a3 + 8) = v19;
  return result;
}

uint64_t static Scene.makeBody(scene:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for SceneBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(28);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for SceneBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance WindowSceneList<A>@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  return static WindowSceneList._makeScene(scene:inputs:)(a1, a2);
}

unint64_t one-time initialization function for defaultValue()
{
  uint64_t v0 = MEMORY[0x1E4FBC860];
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static ConnectionOptionPayloadStoragePreferenceKey.defaultuint64_t Value = v0;
  *(void *)algn_1E90FC1E8 = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static EnvironmentValues.ToolbarForegroundStyleKey.defaultuint64_t Value = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static PositionedNavigationDestination.Key.defaultuint64_t Value = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle();
  static ButtonStyleInput.defaultuint64_t Value = (uint64_t)&type metadata for DefaultButtonStyle;
  *(void *)algn_1EB3080F8 = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle();
  static EffectiveButtonStyleInput.defaultuint64_t Value = (uint64_t)&type metadata for DefaultButtonStyle;
  *(void *)algn_1E90FC1C8 = result;
  return result;
}

{
  unint64_t result;

  static TabOptions.TraitKey.defaultuint64_t Value = 0;
  byte_1E90FC582 = 0;
  qword_1E90FC588 = 0;
  unk_1E90FC590 = 0;
  word_1E90FC598 = 255;
  byte_1E90FC59A = 0;
  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  qword_1E90FC5A0 = result;
  word_1E90FC5A8 = 257;
  return result;
}

{
  unint64_t result;

  unint64_t result = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  static Transaction.ScrollInfoKey.defaultuint64_t Value = result;
  return result;
}

uint64_t closure #3 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WindowSceneList();
  uint64_t v3 = a1 + *(int *)(v2 + 40);
  v8[2] = v2;
  unint64_t v4 = type metadata accessor for Any.Type();
  uint64_t v5 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)_s14AttributeGraph13PointerOffsetV2ofyACyxq_Gq_zFZAESPyq_GXEfU_TA_3, (uint64_t)v8, v4, MEMORY[0x1E4FBC248], v5, MEMORY[0x1E4FBC278], v6);
  return v8[5];
}

uint64_t implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(unsigned int a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  long long v8 = a2[1];
  long long v22 = *a2;
  long long v23 = v8;
  long long v24 = a2[2];
  unsigned int v9 = _GraphInputs.environment.getter();
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  type metadata accessor for WindowSceneList();
  type metadata accessor for _GraphValue();
  _sSSSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<String?>();
  int v10 = _GraphValue.value.getter();
  uint64_t v18 = a4;
  uint64_t v19 = a5;
  type metadata accessor for Any.Type();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<Any.Type>();
  *(void *)&long long v22 = __PAIR64__(v9, a1);
  DWORD2(v22) = v10;
  HIDWORD(v22) = _GraphValue.value.getter();
  long long v23 = 0uLL;
  LOBYTE(v24) = -1;
  uint64_t List = type metadata accessor for WindowSceneList.MakeList();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSSSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v22, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_5, (uint64_t)v15, List, MEMORY[0x1E4FBC248], v11, MEMORY[0x1E4FBC278], v12);
  outlined consume of SceneID?(v23, *((uint64_t *)&v23 + 1), v24);
  return v14;
}

uint64_t type metadata accessor for WindowSceneList.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _GraphValue<Any.Type>()
{
  if (!lazy cache variable for type metadata for _GraphValue<Any.Type>)
  {
    type metadata accessor for Any.Type();
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<Any.Type>);
    }
  }
}

void type metadata accessor for _GraphValue<String?>()
{
  if (!lazy cache variable for type metadata for _GraphValue<String?>)
  {
    _sSSSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<String?>);
    }
  }
}

uint64_t closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1)
{
  v5[2] = type metadata accessor for WindowSceneList();
  uint64_t v6 = type metadata accessor for WindowSceneConfiguration();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t static WindowSceneList._makeScene(scene:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  long long v6 = *(_OWORD *)(a1 + 44);
  type metadata accessor for WindowSceneList();
  type metadata accessor for _GraphValue();
  type metadata accessor for WindowSceneConfiguration();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  PreferencesOutputs.init()();
  uint64_t v7 = *(void *)((char *)&v6 + 4);
  int v8 = HIDWORD(v6);
  outlined retain of [Text.Modifier]((uint64_t)&v7);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

uint64_t type metadata completion function for WindowSceneList()
{
  uint64_t result = type metadata accessor for WindowSceneConfiguration();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t View._onEnvironmentChange<A>(_:perform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, void, uint64_t))
{
  uint64_t v9 = *a1;
  v12[0] = a1;
  v12[1] = a2;
  v12[2] = a3;
  uint64_t v10 = a7(0, *(void *)(*MEMORY[0x1E4FBC5F0] + v9 + 8), a6);
  swift_retain();
  swift_retain();
  MEMORY[0x18C113660](v12, a4, v10, a5);
  swift_release();
  return swift_release();
}

uint64_t static EnvironmentChangeModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v54 = a6;
  uint64_t v51 = a4;
  double v52 = a3;
  uint64_t v50 = a7;
  uint64_t v79 = *MEMORY[0x1E4F143B8];
  uint64_t v53 = a5;
  uint64_t v9 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v38 = &v29[-v10];
  uint64_t v48 = type metadata accessor for Observer();
  uint64_t v49 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  uint64_t v37 = &v29[-v11];
  LODWORD(v11) = *a1;
  uint64_t v46 = *a2;
  uint64_t v12 = v46;
  int v45 = *((_DWORD *)a2 + 2);
  int v13 = v45;
  uint64_t v47 = a2[2];
  uint64_t v14 = v47;
  int v44 = *((_DWORD *)a2 + 6);
  int v15 = v44;
  LODWORD(a1) = *((_DWORD *)a2 + 8);
  int v35 = *((_DWORD *)a2 + 7);
  int v43 = (int)a1;
  int v42 = *((_DWORD *)a2 + 9);
  int v16 = v42;
  uint64_t v17 = a2[6];
  uint64_t v41 = a2[5];
  uint64_t v18 = v41;
  uint64_t v40 = v17;
  int v34 = *((_DWORD *)a2 + 14);
  int v55 = *((_DWORD *)a2 + 15);
  int v33 = *((_DWORD *)a2 + 16);
  int v32 = *((_DWORD *)a2 + 17);
  int v31 = *((_DWORD *)a2 + 18);
  int v19 = *((_DWORD *)a2 + 20);
  int v30 = *((_DWORD *)a2 + 19);
  int v39 = v19;
  LODWORD(v62) = v11;
  type metadata accessor for EnvironmentChangeModifier();
  type metadata accessor for _GraphValue();
  int v36 = _GraphValue.value.getter();
  uint64_t v62 = v12;
  int v63 = v13;
  uint64_t v65 = v14;
  LODWORD(v14) = v35;
  int v66 = v15;
  int v67 = v35;
  int v68 = (int)a1;
  int v69 = v16;
  uint64_t v70 = v18;
  uint64_t v71 = v17;
  LODWORD(v17) = v34;
  int v72 = v34;
  int v73 = v55;
  LODWORD(v12) = v33;
  LODWORD(v18) = v32;
  int v74 = v33;
  int v75 = v32;
  int v20 = v31;
  LODWORD(a1) = v30;
  int v76 = v31;
  int v77 = v30;
  int v78 = v19;
  LODWORD(a2) = _ViewInputs.environment.getter();
  UpdateCycleDetector.init()();
  uint64_t v56 = v62;
  int v57 = v63;
  char v58 = v64;
  uint64_t v21 = v53;
  uint64_t v22 = (uint64_t)v38;
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56))(v38, 1, 1, v53);
  long long v23 = v37;
  Observer.init(modifier:environment:cycleDetector:lastValue:)(v36, (int)a2, (uint64_t)&v56, v22, v21, v54, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Observer, (uint64_t)v37);
  uint64_t v24 = v48;
  uint64_t v60 = v48;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<()>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_7, (uint64_t)v59, v24, MEMORY[0x1E4FBC248], v25, MEMORY[0x1E4FBC278], v26);
  (*(void (**)(unsigned char *, uint64_t))(v49 + 8))(v23, v24);
  static AGAttributeFlags.transactional.getter();
  uint64_t v27 = AGGraphSetFlags();
  uint64_t v62 = v46;
  int v63 = v45;
  uint64_t v65 = v47;
  int v66 = v44;
  int v67 = v14;
  int v68 = v43;
  int v69 = v42;
  uint64_t v70 = v41;
  uint64_t v71 = v40;
  int v72 = v17;
  int v73 = v55;
  int v74 = v12;
  int v75 = v18;
  int v76 = v20;
  int v77 = (int)a1;
  int v78 = v39;
  return v52(v27, &v62);
}

uint64_t Observer.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v77 = *(void *)(a1 + 16);
  uint64_t v4 = v77;
  uint64_t v5 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v59 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v68 = (char *)v56 - v6;
  uint64_t v75 = *(void *)(v5 - 8);
  uint64_t v70 = v75;
  MEMORY[0x1F4188790](v7);
  char v58 = (char *)v56 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)v56 - v10;
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)v56 - v13;
  int v15 = *(void **)(v4 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v60 = (char *)v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v56[1] = v17;
  MEMORY[0x1F4188790](v18);
  int v20 = (char *)v56 - v19;
  uint64_t v21 = Observer.modifier.getter(a1, (void (*)(void, void, void))type metadata accessor for EnvironmentChangeModifier);
  uint64_t v65 = v22;
  uint64_t v71 = v23;
  WindowSceneList.MakeList.environment.getter(v80);
  uint64_t v78 = v80[0];
  uint64_t v79 = v80[1];
  uint64_t v73 = v21;
  swift_getAtKeyPath();
  swift_release();
  swift_release();
  uint64_t v66 = v2;
  uint64_t v67 = a1;
  uint64_t v24 = (char *)(v2 + *(int *)(a1 + 44));
  uint64_t v25 = v77;
  uint64_t v26 = *(void (**)(void))(v75 + 16);
  int v63 = v24;
  ((void (*)(char *))v26)(v14);
  uint64_t v27 = (void (*)(char *, char *, uint64_t))v15[2];
  int v76 = v20;
  char v64 = v15 + 2;
  v27(v11, v20, v25);
  long long v61 = (void (*)(char *, void, uint64_t, uint64_t))v15[7];
  uint64_t v62 = v15 + 7;
  v61(v11, 0, 1, v25);
  uint64_t v28 = &v68[*(int *)(TupleTypeMetadata2 + 48)];
  int v69 = v14;
  uint64_t v29 = v68;
  v26();
  ((void (*)(char *, char *, uint64_t))v26)(v28, v11, v5);
  int v72 = v15;
  int v30 = (unsigned int (*)(char *, uint64_t, uint64_t))v15[6];
  if (v30(v29, 1, v25) == 1)
  {
    int v31 = *(void (**)(char *, uint64_t))(v70 + 8);
    v31(v11, v5);
    v31(v69, v5);
    uint64_t v32 = v5;
    if (v30(v28, 1, v77) == 1)
    {
      v31(v29, v5);
      ((void (*)(char *, uint64_t))v72[1])(v76, v77);
      goto LABEL_14;
    }
    int v57 = v27;
    int v34 = v72;
  }
  else
  {
    int v57 = v27;
    int v33 = v58;
    ((void (*)(char *, char *, uint64_t))v26)(v58, v29, v5);
    uint64_t v32 = v5;
    if (v30(v28, 1, v77) != 1)
    {
      int v34 = v72;
      uint64_t v37 = v60;
      uint64_t v38 = v77;
      ((void (*)(char *, char *, uint64_t))v72[4])(v60, v28, v77);
      LODWORD(TupleTypeMetadata2) = dispatch thunk of static Equatable.== infix(_:_:)();
      int v39 = (void (*)(char *, uint64_t))v34[1];
      v39(v37, v38);
      int v31 = *(void (**)(char *, uint64_t))(v70 + 8);
      v31(v11, v5);
      v31(v69, v5);
      uint64_t v40 = v38;
      uint64_t v32 = v5;
      v39(v33, v40);
      v31(v29, v5);
      int v35 = v76;
      uint64_t v36 = v73;
      if (TupleTypeMetadata2)
      {
        v39(v76, v77);
        goto LABEL_14;
      }
      goto LABEL_11;
    }
    int v31 = *(void (**)(char *, uint64_t))(v70 + 8);
    v31(v11, v5);
    v31(v69, v5);
    int v34 = v72;
    ((void (*)(char *, uint64_t))v72[1])(v33, v77);
  }
  int v35 = v76;
  uint64_t v36 = v73;
  (*(void (**)(char *, uint64_t))(v59 + 8))(v29, TupleTypeMetadata2);
LABEL_11:
  uint64_t v41 = v63;
  v31(v63, v32);
  uint64_t v42 = v77;
  int v43 = v57;
  v57(v41, v35, v77);
  uint64_t v44 = ((uint64_t (*)(char *, void, uint64_t, uint64_t))v61)(v41, 0, 1, v42);
  MEMORY[0x1F4188790](v44);
  uint64_t v45 = *(void *)(v67 + 24);
  v56[-6] = v42;
  v56[-5] = v45;
  uint64_t v46 = v65;
  v56[-4] = v36;
  v56[-3] = v46;
  uint64_t v47 = v71;
  v56[-2] = v71;
  if (UpdateCycleDetector.dispatch(label:isDebug:)())
  {
    AGGraphClearUpdate();
    uint64_t v48 = (void *)swift_allocObject();
    uint64_t v49 = v77;
    v48[2] = v77;
    v48[3] = v45;
    v48[4] = v46;
    v48[5] = v47;
    swift_retain();
    AGGraphSetUpdate();
    uint64_t v50 = (void *)swift_allocObject();
    v50[2] = v49;
    v50[3] = v45;
    v50[4] = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> ();
    v50[5] = v48;
    uint64_t v51 = v60;
    double v52 = v76;
    v43(v60, v76, v49);
    unint64_t v53 = (*((unsigned __int8 *)v34 + 80) + 48) & ~(unint64_t)*((unsigned __int8 *)v34 + 80);
    uint64_t v54 = (char *)swift_allocObject();
    *((void *)v54 + 2) = v49;
    *((void *)v54 + 3) = v45;
    *((void *)v54 + 4) = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A) -> (@out ());
    *((void *)v54 + 5) = v50;
    ((void (*)(char *, char *, uint64_t))v34[4])(&v54[v53], v51, v49);
    swift_retain();
    static Update.enqueueAction(_:)();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v34[1])(v52, v49);
  }
  ((void (*)(char *, uint64_t))v34[1])(v76, v77);
LABEL_14:
  swift_release();
  return swift_release();
}

uint64_t getEnumTagSinglePayload for AccessibilityLargeContentViewBehavior(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFE) {
    goto LABEL_17;
  }
  if (a2 + 2 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 2) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 2;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 2;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 3;
  int v8 = v6 - 3;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ScenePhase(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t WindowSceneList.MakeList.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = type metadata accessor for WindowSceneConfiguration();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v26[-1] - v4;
  int v6 = *((unsigned __int8 *)v0 + 32);
  if (v6 == 255)
  {
    int v9 = *((_DWORD *)v0 + 2);
    _sSSSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v11 = Value[1];
    if (v11)
    {
      uint64_t v8 = *Value;
      v1[2] = *Value;
      v1[3] = v11;
      *((unsigned char *)v1 + 32) = 0;
      uint64_t v7 = swift_bridgeObjectRetain();
      LOBYTE(v6) = 0;
    }
    else
    {
      Swift::UInt8 v12 = ++windowGroupCounter;
      type metadata accessor for Any.Type();
      uint64_t v8 = *(void *)AGGraphGetValue();
      uint64_t v7 = v12;
      v1[2] = v8;
      v1[3] = v12;
      LOBYTE(v6) = 1;
      *((unsigned char *)v1 + 32) = 1;
    }
  }
  else
  {
    uint64_t v8 = v0[2];
    uint64_t v7 = v0[3];
    int v9 = *((_DWORD *)v0 + 2);
  }
  int v13 = *((_DWORD *)v1 + 3);
  uint64_t v50 = *v1;
  int v51 = v9;
  int v52 = v13;
  uint64_t v53 = v8;
  uint64_t v54 = v7;
  char v55 = v6;
  WindowSceneList.MakeList.configuration.getter((uint64_t)v5);
  WindowSceneConfiguration.sceneListValue()(v2);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  outlined init with copy of SceneList.Item.Value((uint64_t)v46, (uint64_t)v26);
  int v14 = *((unsigned __int8 *)v1 + 32);
  if (v14 == 255) {
    __break(1u);
  }
  uint64_t v16 = v1[2];
  uint64_t v15 = v1[3];
  char v17 = v14 & 1;
  outlined copy of SceneID(v16, v15, v14 & 1);
  DisplayList.Version.init(forUpdate:)();
  uint64_t v18 = v25;
  *(_OWORD *)&v46[136] = *(_OWORD *)v1;
  uint64_t v47 = v16;
  uint64_t v48 = v15;
  char v49 = v14;
  WindowSceneList.MakeList.environment.getter(v27);
  uint64_t v19 = v27[0];
  uint64_t v20 = v27[1];
  uint64_t v21 = MEMORY[0x1E4FBC860];
  unint64_t v22 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  outlined init with take of SceneList.Item.Value((uint64_t)v26, (uint64_t)v28);
  v28[17] = v16;
  v28[18] = v15;
  char v29 = v17;
  uint64_t v30 = v18;
  uint64_t v31 = v19;
  uint64_t v32 = v20;
  char v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  char v36 = 0;
  uint64_t v38 = 0;
  uint64_t v37 = 0;
  char v39 = 1;
  uint64_t v41 = 0;
  uint64_t v40 = 0;
  char v42 = 1;
  __int16 v43 = 0;
  uint64_t v44 = v21;
  unint64_t v45 = v22;
  outlined init with copy of SceneList.Item((uint64_t)v28, (uint64_t)v26);
  _sSSSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SceneList.Item>, (uint64_t)&type metadata for SceneList.Item, MEMORY[0x1E4FBBE00]);
  uint64_t v23 = swift_allocObject();
  *(_OWORD *)(v23 + 16) = xmmword_18834BB80;
  memcpy((void *)(v23 + 32), v26, 0x118uLL);
  v26[0] = v23;
  AGGraphSetOutputValue();
  swift_bridgeObjectRelease();
  outlined destroy of SceneList.Item((uint64_t)v28);
  return outlined destroy of SceneList.Item.Value((uint64_t)v46);
}

uint64_t type metadata accessor for WindowSceneConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t WindowSceneList.MakeList.environment.getter@<X0>(void *a1@<X8>)
{
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v4 = *Value;
  uint64_t v3 = Value[1];
  *a1 = v4;
  a1[1] = v3;
  swift_retain();

  return swift_retain();
}

uint64_t outlined destroy of SceneList.Item.Value(uint64_t a1)
{
  return a1;
}

uint64_t destroy for SceneList.Item.Value(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 128);
  if (v2 >= 9) {
    unsigned int v2 = *(_DWORD *)a1 + 9;
  }
  switch(v2)
  {
    case 2u:
      if (*(void *)(a1 + 48)) {
        __swift_destroy_boxed_opaque_existential_1(a1 + 24);
      }
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v4 = *(void *)(a1 + 104);
      uint64_t v5 = *(void *)(a1 + 112);
      char v6 = *(unsigned char *)(a1 + 120);
      return outlined consume of SceneID(v4, v5, v6);
    case 3u:
      goto LABEL_33;
    case 4u:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_28;
    case 5u:
      outlined consume of SceneID(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
      if (*(void *)(a1 + 32) >= 3uLL) {
        swift_bridgeObjectRelease();
      }
      goto LABEL_33;
    case 6u:
      swift_bridgeObjectRelease();
      uint64_t result = swift_release();
      if (!*(void *)(a1 + 48)) {
        return result;
      }
      outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
LABEL_28:
      uint64_t result = swift_bridgeObjectRelease();
      break;
    case 7u:
      swift_bridgeObjectRelease();
      swift_release();
      if (*(void *)(a1 + 24)) {
        swift_release();
      }
      if (*(void *)(a1 + 64))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
        swift_bridgeObjectRelease();
      }
      swift_release();
      if (*(void *)(a1 + 80)) {
        swift_release();
      }
      if (*(void *)(a1 + 96)) {
        swift_release();
      }
      goto LABEL_28;
    case 8u:
      swift_release();
      swift_release();
      outlined consume of Text.Storage(*(void *)(a1 + 24), *(void *)(a1 + 32), *(unsigned char *)(a1 + 40));
      swift_bridgeObjectRelease();
      goto LABEL_33;
    default:
      uint64_t result = swift_release();
      if (*(void *)(a1 + 32))
      {
        outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
        uint64_t result = swift_bridgeObjectRelease();
      }
      if (!*(void *)(a1 + 48)) {
        return result;
      }
LABEL_33:
      uint64_t result = swift_release();
      break;
  }
  return result;
}

uint64_t outlined init with take of SceneList.Item.Value(uint64_t a1, uint64_t a2)
{
  return a2;
}

__n128 __swift_memcpy137_8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 121) = *(_OWORD *)(a2 + 121);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t protocol witness for WindowSceneConfigurationAttributes.sceneListValue(_:) in conformance WindowGroupConfigurationAttributes@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  *(void *)(a2 + 16) = v3;
  *(void *)(a2 + 24) = v4;
  long long v8 = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a2 + 32) = v8;
  *(void *)(a2 + 48) = v5;
  *(void *)(a2 + 56) = v6;
  *(unsigned char *)(a2 + 128) = 0;
  swift_retain();
  outlined copy of Text?(v2, v3, v4, v8);

  return outlined copy of AppIntentExecutor?(v5);
}

uint64_t destroy for WindowSceneConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  unint64_t v4 = ((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8) + 15;
  uint64_t result = swift_release();
  unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v6 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16));
    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)((((v6 + 39) & 0xFFFFFFFFFFFFFFF8) + 15) & 0xFFFFFFFFFFFFFFF8) >= 0xFFFFFFFFuLL)
  {
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for WindowSceneConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = v6 + a1;
  long long v8 = (void *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  v7 &= 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v7 = *v8;
  unint64_t v9 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v10 = ((unint64_t)v8 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v11 = *(void *)(v10 + 24);
  swift_retain();
  if (v11 < 0xFFFFFFFF)
  {
    long long v15 = *(_OWORD *)(v10 + 16);
    *(_OWORD *)unint64_t v9 = *(_OWORD *)v10;
    *(_OWORD *)(v9 + 16) = v15;
  }
  else
  {
    uint64_t v12 = *(void *)v10;
    uint64_t v13 = *(void *)(v10 + 8);
    char v14 = *(unsigned char *)(v10 + 16);
    outlined copy of Text.Storage(*(void *)v10, v13, v14);
    *(void *)unint64_t v9 = v12;
    *(void *)(v9 + 8) = v13;
    *(unsigned char *)(v9 + 16) = v14;
    *(void *)(v9 + 24) = *(void *)(v10 + 24);
    swift_bridgeObjectRetain();
  }
  uint64_t v16 = (void *)((v9 + 39) & 0xFFFFFFFFFFFFFFF8);
  char v17 = (void *)((v10 + 39) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v16 = *v17;
  unint64_t v18 = ((unint64_t)v16 + 15) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v19 = ((unint64_t)v17 + 15) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v19 < 0xFFFFFFFFuLL)
  {
    *(_OWORD *)unint64_t v18 = *(_OWORD *)v19;
  }
  else
  {
    uint64_t v20 = *(void *)(v19 + 8);
    *(void *)unint64_t v18 = *(void *)v19;
    *(void *)(v18 + 8) = v20;
    swift_retain();
  }
  return a1;
}

uint64_t WindowSceneConfiguration.sceneListValue()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(a1 + 24) + 8))(v1, *(void *)(a1 + 16));
}

uint64_t WindowSceneList.MakeList.configuration.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for WindowSceneConfiguration();
  uint64_t Value = AGGraphGetValue();
  unint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

unint64_t type metadata accessor for Any.Type()
{
  unint64_t result = lazy cache variable for type metadata for Any.Type;
  if (!lazy cache variable for type metadata for Any.Type)
  {
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for Any.Type);
  }
  return result;
}

uint64_t Observer.modifier.getter(uint64_t a1, void (*a2)(void, void, void))
{
  a2(0, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v2 = *(void *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  return v2;
}

uint64_t type metadata accessor for EnvironmentChangeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Observer.init(modifier:environment:cycleDetector:lastValue:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void, uint64_t, uint64_t)@<X6>, uint64_t a8@<X8>)
{
  int v10 = *(_DWORD *)(a3 + 8);
  char v11 = *(unsigned char *)(a3 + 12);
  *(_DWORD *)a8 = a1;
  *(_DWORD *)(a8 + 4) = a2;
  *(void *)(a8 + 8) = *(void *)a3;
  *(_DWORD *)(a8 + 16) = v10;
  *(unsigned char *)(a8 + 20) = v11;
  uint64_t v12 = a8 + *(int *)(a7(0, a5, a6) + 44);
  uint64_t v13 = type metadata accessor for Optional();
  char v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32);

  return v14(v12, a4, v13);
}

uint64_t type metadata accessor for Observer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #2 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WindowSceneList();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v9[2] = v2;
  _sSSSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v9, v5, MEMORY[0x1E4FBC248], v6, MEMORY[0x1E4FBC278], v7);
  return v9[5];
}

uint64_t type metadata accessor for WindowSceneList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t assignWithCopy for SubscriptionView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  long long v15 = (void *)((v14 + v12) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v16 = (void *)((v14 + v13) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v17 = v16[1];
  *long long v15 = *v16;
  v15[1] = v17;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t SharingActivityPickerBridge.present(_:presenter:)(uint64_t a1, void *a2)
{
  uint64_t v5 = *v2;
  uint64_t v6 = swift_allocObject();
  swift_weakInit();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = *(void *)(v5 + 80);
  uint64_t v8 = *(void *)(v5 + 88);
  long long v9 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(v7 + 136) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(v7 + 152) = v9;
  *(_OWORD *)(v7 + 168) = *(_OWORD *)(a1 + 128);
  long long v10 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(v7 + 72) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(v7 + 88) = v10;
  long long v11 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(v7 + 104) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(v7 + 120) = v11;
  long long v12 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)a1;
  *(void *)(v7 + 24) = v8;
  *(void *)(v7 + 32) = v6;
  *(_DWORD *)(v7 + 184) = *(_DWORD *)(a1 + 144);
  *(_OWORD *)(v7 + 56) = v12;
  *(void *)(v7 + 192) = a2;
  swift_retain();
  outlined retain of SharingActivityPickerPresentation((uint64_t *)a1);
  id v13 = a2;
  onNextMainRunLoop(do:)();
  swift_release();

  return swift_release();
}

void destroy for TitleDocumentContent.ItemProvider(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (*(void *)(a1 + 32))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 8), *(void *)(a1 + 16), *(unsigned char *)(a1 + 24));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
    if (*(void *)(a1 + 96))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 72);
    }
  }
}

uint64_t assignWithCopy for FocusedValues(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemListTransformModifier<A>.Transform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in SectionStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in SectionStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)()
{
  return partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)((uint64_t (*)(uint64_t, uint64_t, uint64_t))closure #1 in _TaskValueModifier.InnerModifier.body(content:));
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance _CALayerView<A>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

unint64_t destroy for SystemScrollLayoutState(uint64_t a1)
{
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(*(void *)(a1 + 96));
}

uint64_t partial apply for closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #1 in static WindowSceneList._makeScene(scene:inputs:)(a1);
}

uint64_t partial apply for closure #3 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #3 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(a1);
}

uint64_t partial apply for closure #2 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(uint64_t a1)
{
  return closure #2 in implicit closure #1 in static WindowSceneList._makeScene(scene:inputs:)(a1);
}

uint64_t @objc AVKitCaptureButtonBridge.__ivar_destroyer(uint64_t a1)
{
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(*(void *)(a1 + direct field offset for AVKitCaptureButtonBridge.dispatch));

  return swift_unknownObjectWeakDestroy();
}

void type metadata accessor for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>)
  {
    type metadata accessor for _TraitWritingModifier<SectionActionsTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsMoveDisabledTraitKey>, (uint64_t)&type metadata for IsMoveDisabledTraitKey, (uint64_t)&protocol witness table for IsMoveDisabledTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>)
  {
    type metadata accessor for ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>();
    type metadata accessor for _TraitWritingModifier<SectionActionsTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<IsDeleteDisabledTraitKey>, (uint64_t)&type metadata for IsDeleteDisabledTraitKey, (uint64_t)&protocol witness table for IsDeleteDisabledTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<SectionStyleConfiguration.Actions, _TraitWritingModifier<IsMoveDisabledTraitKey>>, _TraitWritingModifier<IsDeleteDisabledTraitKey>>);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _TraitWritingModifier<SectionActionsTraitKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t associated type witness table accessor for StyleableView.DefaultStyleModifier : StyleModifier in ResolvedSectionStyle()
{
  return lazy protocol witness table accessor for type SectionStyleModifier<DefaultSectionStyle> and conformance SectionStyleModifier<A>(&lazy protocol witness table cache variable for type SectionStyleModifier<DefaultSectionStyle> and conformance SectionStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for SectionStyleModifier<DefaultSectionStyle>);
}

uint64_t SectionStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v27 = a5;
  uint64_t v8 = *(void *)(a4 + 16);
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v26 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  long long v12 = (char *)&v24 - v11;
  type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v25 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  long long v15 = (char *)&v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v24 = (char *)&v24 - v18;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, double))(v9 + 24))(a1, a2, a3, v8, v9, v17);
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  char v32 = a3;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  View._trait<A>(_:_:)();
  (*(void (**)(char *, uint64_t))(v26 + 8))(v12, AssociatedTypeWitness);
  uint64_t v20 = lazy protocol witness table accessor for type SectionStyleModifier<DefaultSectionStyle> and conformance SectionStyleModifier<A>(&lazy protocol witness table cache variable for type _TraitWritingModifier<IsExpandedTraitKey> and conformance _TraitWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>);
  uint64_t v28 = AssociatedConformanceWitness;
  uint64_t v29 = v20;
  swift_getWitnessTable();
  uint64_t v21 = v24;
  static ViewBuilder.buildExpression<A>(_:)(v15);
  unint64_t v22 = *(void (**)(char *, uint64_t))(v25 + 8);
  v22(v15, v13);
  static ViewBuilder.buildExpression<A>(_:)(v21);
  return ((uint64_t (*)(char *, uint64_t))v22)(v21, v13);
}

void type metadata accessor for _TraitWritingModifier<IsExpandedTraitKey>()
{
  if (!lazy cache variable for type metadata for _TraitWritingModifier<IsExpandedTraitKey>)
  {
    unint64_t v0 = type metadata accessor for _TraitWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _TraitWritingModifier<IsExpandedTraitKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type SectionStyleModifier<DefaultSectionStyle> and conformance SectionStyleModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t DefaultSectionStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v8 = 0;
  if (a2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
    _s7SwiftUI7BindingVySbGMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](&v10);
    swift_release();
    swift_release();
    if (v10 != 1) {
      BOOL v8 = 1;
    }
  }
  uint64_t result = swift_getKeyPath();
  *(unsigned char *)a4 = v8;
  *(void *)(a4 + 8) = a1;
  *(void *)(a4 + 16) = a2;
  *(unsigned char *)(a4 + 24) = a3;
  *(void *)(a4 + 32) = 0;
  *(void *)(a4 + 40) = result;
  *(unsigned char *)(a4 + 48) = 0;
  return result;
}

uint64_t protocol witness for SectionStyle.makeBody(configuration:) in conformance PlainSectionStyle@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = a3;
  return outlined copy of Binding<NavigationSplitViewColumn>?(a1, a2);
}

uint64_t InlineActionsSectionStyle.makeBody(configuration:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v4 = 0;
  if (a2)
  {
    outlined copy of Binding<NavigationSplitViewColumn>?(result, a2);
    type metadata accessor for Binding<Bool>();
    MEMORY[0x18C113DA0](&v5);
    swift_release();
    uint64_t result = swift_release();
    if (v5 != 1) {
      BOOL v4 = 1;
    }
  }
  *(unsigned char *)a3 = v4;
  *(_WORD *)(a3 + 1) = 257;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(unsigned char *)(a3 + 24) = 0;
  return result;
}

void type metadata accessor for SectionStyleModifier<DefaultSectionStyle>()
{
  if (!lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>)
  {
    lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle();
    unint64_t v0 = type metadata accessor for SectionStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<DefaultSectionStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultSectionStyle and conformance DefaultSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultSectionStyle and conformance DefaultSectionStyle;
  if (!lazy protocol witness table cache variable for type DefaultSectionStyle and conformance DefaultSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultSectionStyle and conformance DefaultSectionStyle);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance StyledView()
{
  return static _ViewListOutputs.groupViewListCount<A, B, C>(inputs:contentType:headerType:footerType:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>)
  {
    type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<PlainSectionStyle>, (void (*)(void))lazy protocol witness table accessor for type PlainSectionStyle and conformance PlainSectionStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, SectionStyleModifier<PlainSectionStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>>, type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(255);
    lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>)
  {
    _s7SwiftUI7BindingVySbGMaTm_3(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<InlineActionsSectionStyle>, (void (*)(void))lazy protocol witness table accessor for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<AnyListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<AnyListStyleContext>, (uint64_t)&type metadata for AnyListStyleContext);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<AnyListStyleContext>, SectionStyleModifier<InlineActionsSectionStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>)
  {
    uint64_t v0 = MEMORY[0x1E4F3FCF0];
    _s7SwiftUI7BindingVySbGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, (unint64_t *)&lazy cache variable for type metadata for SectionStyleModifier<MenuSectionStyle>, (void (*)(void))lazy protocol witness table accessor for type MenuSectionStyle and conformance MenuSectionStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, v0);
    unint64_t v1 = type metadata accessor for StaticIf();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, SectionStyleModifier<MenuSectionStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>)
  {
    _s7SwiftUI7BindingVySbGMaTm_3(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext, MEMORY[0x1E4F410E8]);
    type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(255, &lazy cache variable for type metadata for SectionStyleModifier<SidebarSectionStyle>, (void (*)(void))lazy protocol witness table accessor for type SidebarSectionStyle and conformance SidebarSectionStyle);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>);
    }
  }
}

void type metadata accessor for SectionStyleModifier<SidebarSectionStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for SectionStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for SectionStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI7BindingVySbGMaTm_3(255, a2, a3, MEMORY[0x1E4F410E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>, StaticIf<StyleContextAcceptsPredicate<SidebarListStyleContext>, SectionStyleModifier<SidebarSectionStyle>, EmptyModifier>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>;
  if (!lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>)
  {
    type metadata accessor for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>();
    lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer> and conformance <> Section<A, B, C>);
  }
  return result;
}

void type metadata accessor for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>()
{
  if (!lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>)
  {
    type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>();
    unint64_t v0 = type metadata accessor for Section();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Section<SectionStyleConfiguration.Header, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, SectionStyleConfiguration.Footer>);
    }
  }
}

uint64_t static StyledView._makeViewList(view:inputs:)()
{
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

void type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>)
  {
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t static SectionContainer._makeViewList(root:inputs:body:)()
{
  unint64_t v0 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for _GraphValue<SectionContainer>(0, &lazy cache variable for type metadata for _GraphValue<SectionContainer>, (uint64_t)&type metadata for SectionContainer, MEMORY[0x1E4F3F590]);
  _GraphValue.subscript.getter();
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<SectionContainer>(0, &lazy cache variable for type metadata for _GraphValue<SectionStyleConfiguration.Footer>, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, v0);
  _GraphValue.value.getter();
  return static _ViewListOutputs.groupViewList<A, B>(parent:footer:inputs:body:)();
}

void type metadata accessor for _GraphValue<SectionContainer>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SectionBody and conformance SectionBody()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionBody and conformance SectionBody;
  if (!lazy protocol witness table cache variable for type SectionBody and conformance SectionBody)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionBody and conformance SectionBody);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>)
  {
    _s7SwiftUI29_TraitWritingTableRowModifierVyAA08DropOntoC3KeyVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<SectionContainer, _ConditionalContent<SectionStyleConfiguration.RawContent, EmptyView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle;
  if (!lazy protocol witness table cache variable for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InlineActionsSectionStyle and conformance InlineActionsSectionStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarSectionStyle and conformance SidebarSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarSectionStyle and conformance SidebarSectionStyle;
  if (!lazy protocol witness table cache variable for type SidebarSectionStyle and conformance SidebarSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarSectionStyle and conformance SidebarSectionStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlainSectionStyle and conformance PlainSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainSectionStyle and conformance PlainSectionStyle;
  if (!lazy protocol witness table cache variable for type PlainSectionStyle and conformance PlainSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainSectionStyle and conformance PlainSectionStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuSectionStyle and conformance MenuSectionStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuSectionStyle and conformance MenuSectionStyle;
  if (!lazy protocol witness table cache variable for type MenuSectionStyle and conformance MenuSectionStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuSectionStyle and conformance MenuSectionStyle);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance <> Section<A, B, C>(uint64_t a1)
{
  return static Section<>._viewListCount(inputs:)(a1);
}

uint64_t static Section<>._viewListCount(inputs:)(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  type metadata accessor for Section();
  v6[0] = v1;
  v6[1] = v2;
  int v7 = v3;
  uint64_t v8 = v4;
  swift_getWitnessTable();
  return static PubliclyPrimitiveView.defaultViewListCount(inputs:)(v6);
}

uint64_t static PubliclyPrimitiveView.defaultViewListCount(inputs:)(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = a1[3];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  v8[0] = v1;
  v8[1] = v2;
  int v9 = v3;
  uint64_t v10 = v4;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  return (*(uint64_t (**)(void *, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(v8, AssociatedTypeWitness, AssociatedConformanceWitness);
}

uint64_t Section<>.init(header:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  double v17 = (char *)&v22 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, a1, v18, v15);
  a2(v19);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
  return Section.init(header:content:footer:)((uint64_t)v17, (uint64_t)v11, v20, a3, a4, MEMORY[0x1E4F417F8], a5);
}

uint64_t Section<>.init(header:footer:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v25 = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(v15 - 8);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v24 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v20, a1, v21, v18);
  a3(v22);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a1, a4);
  return Section.init(header:content:footer:)((uint64_t)v20, (uint64_t)v14, a2, a4, a5, v25, a7);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance SectionStyleConfiguration.Header(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  uint64_t v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t MakeBody.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, Value, a2);
  (*(void (**)(uint64_t, uint64_t))(a3 + 32))(a2, a3);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a2);
}

uint64_t destroy for Section(uint64_t a1, void *a2)
{
  uint64_t v4 = *(void *)(a2[2] - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(a2[3] - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  uint64_t v9 = *(void *)(v7 + 56);
  uint64_t v10 = *(void *)(a2[4] - 8);
  uint64_t v11 = v10 + 8;
  unint64_t v12 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t result = (*(uint64_t (**)(unint64_t))(v10 + 8))(v12);
  if (*(void *)(((*(void *)(v11 + 56) + v12 + 7) & 0xFFFFFFFFFFFFFFF8) + 8) >= 0xFFFFFFFFuLL)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t initializeWithCopy for Section(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = *(void *)(a3[2] - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3[3] - 8);
  uint64_t v8 = v7 + 16;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = *(void *)(v6 + 48) + v9;
  uint64_t v11 = (v10 + a1) & ~v9;
  uint64_t v12 = (v10 + a2) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v11, v12);
  uint64_t v13 = *(void *)(v8 + 48);
  uint64_t v14 = *(void *)(a3[4] - 8);
  uint64_t v15 = v14 + 16;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (v17 + v11) & ~v16;
  uint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(uint64_t, uint64_t))(v14 + 16))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 48) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)(v22 + 8) < 0xFFFFFFFFuLL)
  {
    long long v23 = *(_OWORD *)v22;
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    *(_OWORD *)unint64_t v21 = v23;
  }
  else
  {
    *(void *)unint64_t v21 = *(void *)v22;
    *(void *)(v21 + 8) = *(void *)(v22 + 8);
    *(unsigned char *)(v21 + 16) = *(unsigned char *)(v22 + 16);
    swift_retain();
    swift_retain();
  }
  return a1;
}

uint64_t protocol witness for PubliclyPrimitiveView.internalBody.getter in conformance <> Section<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Section<>.internalBody.getter(a1, *(void *)(a2 - 8), *(void *)(a2 - 16), *(void *)(a2 - 24), a3);
}

uint64_t Section.init(header:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14 = (int *)type metadata accessor for Section();
  uint64_t v15 = a7 + v14[13];
  *(void *)uint64_t v15 = 0;
  *(void *)(v15 + 8) = 0;
  *(unsigned char *)(v15 + 16) = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a7, a1, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + v14[11], a2, a5);
  uint64_t v16 = a7 + v14[12];
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32);

  return v17(v16, a3, a6);
}

uint64_t closure #3 in Section<>.internalBody.getter@<X0>(uint64_t a1@<X5>, uint64_t a2@<X8>)
{
  v13[0] = a2;
  type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SectionActionsTraitKey>, (uint64_t)&type metadata for SectionActionsTraitKey, (uint64_t)&protocol witness table for SectionActionsTraitKey, MEMORY[0x1E4F408B8]);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)v13 - v8;
  type metadata accessor for Section();
  v13[3] = 0;
  View._trait<A>(_:_:)();
  unint64_t v10 = lazy protocol witness table accessor for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>();
  v13[1] = a1;
  v13[2] = v10;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v11 = *(void (**)(char *, uint64_t))(v4 + 8);
  v11(v6, v3);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(char *, uint64_t))v11)(v9, v3);
}

uint64_t type metadata accessor for Section()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Section<>.internalBody.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v9 = *(void *)(a1 + 16);
  uint64_t v48 = a5;
  uint64_t v49 = v9;
  type metadata accessor for ModifiedContent();
  type metadata accessor for AccessibilityTraitsModifier.ChildModifier();
  type metadata accessor for ModifiedContent();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  unint64_t v41 = lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  uint64_t v69 = a2;
  uint64_t v70 = &protocol witness table for CaptureViewRespondersModifier;
  uint64_t v45 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  int v68 = &protocol witness table for AccessibilityTraitsModifier<A>.ChildModifier;
  uint64_t v65 = swift_getWitnessTable();
  uint64_t v66 = &protocol witness table for IgnoreViewRespondersModifier;
  uint64_t v42 = v10;
  uint64_t v39 = swift_getWitnessTable();
  long long v61 = &type metadata for SectionStyleConfiguration.Header;
  uint64_t v62 = v10;
  unint64_t v63 = v41;
  uint64_t v64 = v39;
  type metadata accessor for StaticSourceWriter();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v43 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  char v36 = (char *)&v35 - v12;
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v40 = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  long long v61 = &type metadata for SectionStyleConfiguration.Footer;
  uint64_t v62 = v13;
  unint64_t v63 = v40;
  uint64_t v64 = a4;
  uint64_t v14 = a4;
  uint64_t v38 = a4;
  type metadata accessor for StaticSourceWriter();
  uint64_t v44 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44);
  uint64_t v50 = (char *)&v35 - v15;
  uint64_t v16 = *(int *)(a1 + 52);
  uint64_t v37 = v5;
  uint64_t v17 = v5 + v16;
  uint64_t v18 = *(void *)(v17 + 8);
  char v19 = *(unsigned char *)(v17 + 16);
  long long v61 = *(ValueMetadata **)v17;
  uint64_t v62 = v18;
  LOBYTE(v63) = v19;
  uint64_t v20 = *(void *)(a1 + 24);
  uint64_t v21 = v49;
  v53[2] = v49;
  v53[3] = v20;
  v53[4] = v13;
  v53[5] = a2;
  uint64_t v35 = a2;
  uint64_t v22 = v46;
  v53[6] = v46;
  v53[7] = v14;
  uint64_t v54 = v5;
  outlined copy of Binding<NavigationSplitViewColumn>?((uint64_t)v61, v18);
  unint64_t v23 = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.Header, (void (*)(double))partial apply for closure #1 in Section<>.internalBody.getter, (uint64_t)v53, (uint64_t)&type metadata for ResolvedSectionStyle, (uint64_t)&type metadata for SectionStyleConfiguration.Header, v42, v23);
  outlined consume of Binding<NavigationSplitViewColumn>?((uint64_t)v61, v62);
  v52[2] = v21;
  v52[3] = v20;
  v52[4] = v13;
  v52[5] = a2;
  uint64_t v25 = v37;
  uint64_t v24 = v38;
  v52[6] = v22;
  v52[7] = v38;
  v52[8] = v37;
  unint64_t v59 = v23;
  uint64_t v60 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = v36;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.Footer, (void (*)(double))partial apply for closure #2 in Section<>.internalBody.getter, (uint64_t)v52, v11, (uint64_t)&type metadata for SectionStyleConfiguration.Footer, v13, v26);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v27, v11);
  v51[2] = v49;
  v51[3] = v20;
  v51[4] = v13;
  v51[5] = v35;
  v51[6] = v22;
  v51[7] = v24;
  v51[8] = v25;
  type metadata accessor for _TraitWritingModifier<FormBorderlessSectionTraitKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<SectionActionsTraitKey>, (uint64_t)&type metadata for SectionActionsTraitKey, (uint64_t)&protocol witness table for SectionActionsTraitKey, MEMORY[0x1E4F408B8]);
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t v57 = v26;
  char v58 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v29 = v44;
  uint64_t v30 = swift_getWitnessTable();
  lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  unint64_t v31 = lazy protocol witness table accessor for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>();
  uint64_t v55 = v22;
  unint64_t v56 = v31;
  swift_getWitnessTable();
  uint64_t v32 = v28;
  char v33 = v50;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for SectionStyleConfiguration.RawContent, (void (*)(double))partial apply for closure #3 in Section<>.internalBody.getter, (uint64_t)v51, v29, (uint64_t)&type metadata for SectionStyleConfiguration.RawContent, v32, v30);
  return (*(uint64_t (**)(char *, uint64_t))(v47 + 8))(v33, v29);
}

uint64_t type metadata accessor for AccessibilityTraitsModifier.ChildModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>)
  {
    _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(255, &lazy cache variable for type metadata for _TraitWritingModifier<SectionActionsTraitKey>, (uint64_t)&type metadata for SectionActionsTraitKey, (uint64_t)&protocol witness table for SectionActionsTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<SectionActionsTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent()
{
  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent;
  if (!lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  }
  return result;
}

void type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyAA27RotatingDisclosureIndicatorVAA14_PaddingLayoutVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized LazyStack<>.sizeThatFits(proposedSize:subviews:context:cache:)(uint64_t a1, char a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  int v12 = HIDWORD(a7);
  LOBYTE(v45[0]) = a2 & 1;
  v47[0] = a4 & 1;
  *(double *)&uint64_t v14 = COERCE_DOUBLE(ProposedViewSize.subscript.getter());
  char v16 = v15;
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v47);
  if (v16)
  {
    double v17 = specialized LazyHVStack<>.flexibleMinorSize(subviews:)((uint64_t)v47);
    outlined destroy of _LazyLayout_Subviews((uint64_t)v47);
    *(double *)&uint64_t v14 = v17;
  }
  else
  {
    outlined destroy of _LazyLayout_Subviews((uint64_t)v47);
    double v17 = *(double *)&v14;
  }
  uint64_t v48 = v14;
  if (v17 <= 0.0) {
    return specialized LazyStack<>.log(_:)((uint64_t)&v48, 0xD000000000000010, 0x8000000188328BB0);
  }
  long long v18 = *(_OWORD *)(a8 + 80);
  v45[4] = *(_OWORD *)(a8 + 64);
  v45[5] = v18;
  long long v19 = *(_OWORD *)(a8 + 112);
  v45[6] = *(_OWORD *)(a8 + 96);
  long long v46 = v19;
  long long v20 = *(_OWORD *)(a8 + 16);
  v45[0] = *(_OWORD *)a8;
  v45[1] = v20;
  long long v21 = *(_OWORD *)(a8 + 48);
  v45[2] = *(_OWORD *)(a8 + 32);
  v45[3] = v21;
  if (*MEMORY[0x1E4F4E7A0] == v12)
  {
    outlined retain of _LazyStack_Cache<LazyVStackLayout>(a8);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    long long v24 = Value[1];
    v44[0] = *Value;
    v44[1] = v24;
    uint64_t v25 = outlined retain of _LazyStack_Cache<LazyVStackLayout>(a8);
    MEMORY[0x18C114450](v25);
    double v27 = *(double *)(a8 + 104);
    if (v27 > 0.0 && v26 > 0.0 && vabdd_f64(v27, v26) >= 0.01)
    {
      uint64_t v28 = *(void *)(a8 + 112);
      *(void *)&v44[0] = *(void *)(a8 + 120);
      v49[0] = v28;
      uint64_t v29 = MEMORY[0x1E4FBC860];
      unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      outlined release of _LazyLayout_Placements((uint64_t)v49);
      *(void *)&long long v46 = v30;
      unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(v29);
      outlined release of _LazyLayout_Placements((uint64_t)v44);
      *((void *)&v46 + 1) = v31;
    }
  }
  double v42 = 0.0;
  uint64_t v43 = 0;
  specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(&v42, &v43, 1, a5, (uint64_t)v45, a9, a10, a11 & 0xFFFFFFFF00000001, v17, v17);
  uint64_t v32 = EstimationCache.average.getter(v46, *((uint64_t *)&v46 + 1));
  double v34 = v33;
  double v35 = *(double *)&v32;
  char v37 = v36;
  uint64_t result = _ViewList_Node.estimatedCount(style:)();
  uint64_t v38 = result - v43;
  if (__OFSUB__(result, v43))
  {
    __break(1u);
  }
  else
  {
    double v39 = v35;
    if (v37) {
      double v39 = 0.0;
    }
    double v40 = (v34 + v39) * (double)(v38 & ~(v38 >> 63)) + v42;
    if (v38 < 1 || v43 != 0) {
      double v39 = 0.0;
    }
    double v42 = v40 - v39;
    specialized LazyStack<>.log(_:)((uint64_t)&v48, (uint64_t)&v42, 0xD000000000000010, 0x8000000188328BB0);
    ProposedViewSize.subscript.getter();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

{
  int v12;
  uint64_t v14;
  char v15;
  char v16;
  double v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  uint64_t result;
  _OWORD *Value;
  long long v24;
  uint64_t v25;
  double v26;
  double v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  double v33;
  double v34;
  double v35;
  char v36;
  char v37;
  uint64_t v38;
  double v39;
  double v40;
  double v42;
  uint64_t v43;
  _OWORD v44[2];
  _OWORD v45[7];
  long long v46;
  unsigned char v47[120];
  uint64_t v48;
  void v49[3];

  int v12 = HIDWORD(a7);
  LOBYTE(v45[0]) = a2 & 1;
  v47[0] = a4 & 1;
  *(double *)&uint64_t v14 = COERCE_DOUBLE(ProposedViewSize.subscript.getter());
  char v16 = v15;
  outlined init with copy of _LazyLayout_Subviews(a5, (uint64_t)v47);
  if (v16)
  {
    double v17 = specialized LazyHVStack<>.flexibleMinorSize(subviews:)((uint64_t)v47);
    outlined destroy of _LazyLayout_Subviews((uint64_t)v47);
    *(double *)&uint64_t v14 = v17;
  }
  else
  {
    outlined destroy of _LazyLayout_Subviews((uint64_t)v47);
    double v17 = *(double *)&v14;
  }
  uint64_t v48 = v14;
  if (v17 <= 0.0) {
    return specialized LazyStack<>.log(_:)((uint64_t)&v48, 0xD000000000000010, 0x8000000188328C80);
  }
  long long v18 = *(_OWORD *)(a8 + 80);
  v45[4] = *(_OWORD *)(a8 + 64);
  v45[5] = v18;
  long long v19 = *(_OWORD *)(a8 + 112);
  v45[6] = *(_OWORD *)(a8 + 96);
  long long v46 = v19;
  long long v20 = *(_OWORD *)(a8 + 16);
  v45[0] = *(_OWORD *)a8;
  v45[1] = v20;
  long long v21 = *(_OWORD *)(a8 + 48);
  v45[2] = *(_OWORD *)(a8 + 32);
  v45[3] = v21;
  if (*MEMORY[0x1E4F4E7A0] == v12)
  {
    outlined retain of _LazyStack_Cache<LazyVStackLayout>(a8);
  }
  else
  {
    uint64_t Value = (_OWORD *)AGGraphGetValue();
    long long v24 = Value[1];
    v44[0] = *Value;
    v44[1] = v24;
    uint64_t v25 = outlined retain of _LazyStack_Cache<LazyVStackLayout>(a8);
    MEMORY[0x18C114450](v25);
    double v27 = *(double *)(a8 + 104);
    if (v27 > 0.0 && v26 > 0.0 && vabdd_f64(v27, v26) >= 0.01)
    {
      uint64_t v28 = *(void *)(a8 + 112);
      *(void *)&v44[0] = *(void *)(a8 + 120);
      v49[0] = v28;
      uint64_t v29 = MEMORY[0x1E4FBC860];
      unint64_t v30 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      outlined release of _LazyLayout_Placements((uint64_t)v49);
      *(void *)&long long v46 = v30;
      unint64_t v31 = specialized Dictionary.init(dictionaryLiteral:)(v29);
      outlined release of _LazyLayout_Placements((uint64_t)v44);
      *((void *)&v46 + 1) = v31;
    }
  }
  double v42 = 0.0;
  uint64_t v43 = 0;
  specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(&v42, &v43, 1, a5, (uint64_t)v45, a9, a10, a11 & 0xFFFFFFFF00000001, v17, v17);
  uint64_t v32 = EstimationCache.average.getter(v46, *((uint64_t *)&v46 + 1));
  double v34 = v33;
  double v35 = *(double *)&v32;
  char v37 = v36;
  uint64_t result = _ViewList_Node.estimatedCount(style:)();
  uint64_t v38 = result - v43;
  if (__OFSUB__(result, v43))
  {
    __break(1u);
  }
  else
  {
    double v39 = v35;
    if (v37) {
      double v39 = 0.0;
    }
    double v40 = (v34 + v39) * (double)(v38 & ~(v38 >> 63)) + v42;
    if (v38 < 1 || v43 != 0) {
      double v39 = 0.0;
    }
    double v42 = v40 - v39;
    specialized LazyStack<>.log(_:)((uint64_t)&v48, (uint64_t)&v42, 0xD000000000000010, 0x8000000188328C80);
    ProposedViewSize.subscript.getter();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t EstimationCache.average.getter(uint64_t result, uint64_t a2)
{
  if (!*(void *)(result + 16))
  {
    *(double *)&uint64_t result = 0.0;
    return result;
  }
  int64_t v2 = 0;
  uint64_t v3 = result + 64;
  uint64_t v4 = 1 << *(unsigned char *)(result + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(result + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  double v8 = 0.0;
  double v9 = 0.0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v2 << 6);
      goto LABEL_6;
    }
    int64_t v14 = v2 + 1;
    if (__OFADD__(v2, 1))
    {
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }
    if (v14 >= v7) {
      goto LABEL_22;
    }
    unint64_t v15 = *(void *)(v3 + 8 * v14);
    ++v2;
    if (!v15)
    {
      int64_t v2 = v14 + 1;
      if (v14 + 1 >= v7) {
        goto LABEL_22;
      }
      unint64_t v15 = *(void *)(v3 + 8 * v2);
      if (!v15)
      {
        int64_t v2 = v14 + 2;
        if (v14 + 2 >= v7) {
          goto LABEL_22;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v2);
        if (!v15) {
          break;
        }
      }
    }
LABEL_21:
    unint64_t v6 = (v15 - 1) & v15;
    unint64_t v11 = __clz(__rbit64(v15)) + (v2 << 6);
LABEL_6:
    uint64_t v12 = 8 * v11;
    double v13 = (double)*(uint64_t *)(*(void *)(result + 56) + v12);
    double v9 = v9 + *(double *)(*(void *)(result + 48) + v12) * v13;
    double v8 = v8 + v13;
  }
  int64_t v16 = v14 + 3;
  if (v16 < v7)
  {
    unint64_t v15 = *(void *)(v3 + 8 * v16);
    if (!v15)
    {
      while (1)
      {
        int64_t v2 = v16 + 1;
        if (__OFADD__(v16, 1)) {
          break;
        }
        if (v2 >= v7) {
          goto LABEL_22;
        }
        unint64_t v15 = *(void *)(v3 + 8 * v2);
        ++v16;
        if (v15) {
          goto LABEL_21;
        }
      }
LABEL_48:
      __break(1u);
      goto LABEL_49;
    }
    int64_t v2 = v16;
    goto LABEL_21;
  }
LABEL_22:
  int64_t v17 = 0;
  uint64_t v18 = a2 + 64;
  uint64_t v19 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v20 = -1;
  if (v19 < 64) {
    uint64_t v20 = ~(-1 << v19);
  }
  unint64_t v21 = v20 & *(void *)(a2 + 64);
  int64_t v22 = (unint64_t)(v19 + 63) >> 6;
  double v23 = 0.0;
  double v24 = 0.0;
  while (2)
  {
    if (v21)
    {
      unint64_t v25 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v26 = v25 | (v17 << 6);
LABEL_26:
      uint64_t v27 = 8 * v26;
      double v28 = (double)*(uint64_t *)(*(void *)(a2 + 56) + v27);
      double v24 = v24 + *(double *)(*(void *)(a2 + 48) + v27) * v28;
      double v23 = v23 + v28;
      continue;
    }
    break;
  }
  int64_t v29 = v17 + 1;
  if (__OFADD__(v17, 1)) {
    goto LABEL_47;
  }
  if (v29 >= v22)
  {
LABEL_42:
    if (v23 <= 0.0) {
      *(double *)&uint64_t result = 0.0;
    }
    else {
      *(double *)&uint64_t result = v24 / v23;
    }
    return result;
  }
  unint64_t v30 = *(void *)(v18 + 8 * v29);
  ++v17;
  if (v30) {
    goto LABEL_41;
  }
  int64_t v17 = v29 + 1;
  if (v29 + 1 >= v22) {
    goto LABEL_42;
  }
  unint64_t v30 = *(void *)(v18 + 8 * v17);
  if (v30) {
    goto LABEL_41;
  }
  int64_t v17 = v29 + 2;
  if (v29 + 2 >= v22) {
    goto LABEL_42;
  }
  unint64_t v30 = *(void *)(v18 + 8 * v17);
  if (v30)
  {
LABEL_41:
    unint64_t v21 = (v30 - 1) & v30;
    unint64_t v26 = __clz(__rbit64(v30)) + (v17 << 6);
    goto LABEL_26;
  }
  int64_t v31 = v29 + 3;
  if (v31 >= v22) {
    goto LABEL_42;
  }
  unint64_t v30 = *(void *)(v18 + 8 * v31);
  if (v30)
  {
    int64_t v17 = v31;
    goto LABEL_41;
  }
  while (1)
  {
    int64_t v17 = v31 + 1;
    if (__OFADD__(v31, 1)) {
      break;
    }
    if (v17 >= v22) {
      goto LABEL_42;
    }
    unint64_t v30 = *(void *)(v18 + 8 * v17);
    ++v31;
    if (v30) {
      goto LABEL_41;
    }
  }
LABEL_49:
  __break(1u);
  return result;
}

uint64_t outlined init with copy of _LazyLayout_Subviews(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for _LazyLayout_Subviews(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 101);
  swift_retain();
  switch(v5)
  {
    case 1:
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      long long v9 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 72) = v9;
      uint64_t v10 = v9;
      unint64_t v11 = **(void (***)(uint64_t, uint64_t, uint64_t))(v9 - 8);
      swift_bridgeObjectRetain();
      v11(a1 + 48, a2 + 48, v10);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(unsigned char *)(a1 + 100) = *(unsigned char *)(a2 + 100);
      char v7 = 1;
      goto LABEL_6;
    case 2:
      *(void *)(a1 + 16) = *v4;
      char v7 = 2;
LABEL_6:
      *(unsigned char *)(a1 + 101) = v7;
      goto LABEL_7;
    case 3:
      *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
      uint64_t v8 = *(void *)(a2 + 32);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(void *)(a1 + 32) = v8;
      *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
      *(unsigned char *)(a1 + 101) = 3;
      swift_bridgeObjectRetain();
LABEL_7:
      swift_bridgeObjectRetain();
      break;
    default:
      long long v6 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 40) = v6;
      (**(void (***)(uint64_t, void *))(v6 - 8))(a1 + 16, v4);
      *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
      *(unsigned char *)(a1 + 60) = *(unsigned char *)(a2 + 60);
      *(unsigned char *)(a1 + 101) = 0;
      break;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 115) = *(_DWORD *)(a2 + 115);
  swift_bridgeObjectRetain();
  return a1;
}

unint64_t lazy protocol witness table accessor for type EnableLazyStackLogging and conformance EnableLazyStackLogging()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging;
  if (!lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableLazyStackLogging and conformance EnableLazyStackLogging);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment;
  if (!lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type VerticalAlignment and conformance VerticalAlignment);
  }
  return result;
}

uint64_t outlined retain of _LazyStack_Cache<LazyVStackLayout>(uint64_t a1)
{
  return a1;
}

uint64_t specialized LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(double *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  uint64_t v69 = a3;
  double v70 = a9;
  double v71 = a10;
  uint64_t v65 = a6;
  uint64_t v66 = a7;
  unsigned __int8 v67 = a8 & 1;
  unsigned int v68 = HIDWORD(a8);
  uint64_t v64 = 0;
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_allocObject());
  uint64_t v18 = result;
  *(unsigned char *)(result + 16) = 0;
  double v19 = *a1;
  uint64_t v20 = *(void *)(*(void *)(a5 + 112) + 16);
  uint64_t v22 = *(void *)(a5 + 48);
  uint64_t v21 = *(void *)(a5 + 56);
  if (v22 != v21
    && *(unsigned char *)(a5 + 24) != 1
    && *(void *)a5 == a3
    && *(double *)(a5 + 8) == a9
    && *(double *)(a5 + 16) == a10)
  {
    *a2 = v22;
    uint64_t v64 = v21;
    double v19 = *(double *)(a5 + 64);
    if (v22 >= a3)
    {
      *(unsigned char *)(result + 16) = 1;
      if (__OFSUB__(v22, a3))
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      *a2 = v22 - a3;
      v22 -= a3;
    }
    if (__OFSUB__(v21, v22)) {
      goto LABEL_39;
    }
    if (v21 - v22 <= 1)
    {
      BOOL v46 = __OFADD__(v21, a3);
      v21 += a3;
      if (v46)
      {
LABEL_42:
        __break(1u);
        return result;
      }
      uint64_t v64 = v21;
    }
  }
  else
  {
    if (v20)
    {
      uint64_t v22 = *a2;
      if ((*a2 & 0x8000000000000000) != 0) {
        goto LABEL_11;
      }
LABEL_5:
      *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
      return result;
    }
    if (a3 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v21 = 2 * a3;
    uint64_t v64 = 2 * a3;
    uint64_t v22 = *a2;
  }
  if (v22 >= v21) {
    goto LABEL_5;
  }
LABEL_11:
  uint64_t v55 = v20;
  unint64_t v56 = (void *)a5;
  uint64_t v49 = a1;
  uint64_t v52 = swift_allocObject();
  *(void *)(v52 + 16) = 0;
  uint64_t v23 = swift_allocObject();
  uint64_t v51 = a4;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  *(void *)(v23 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v50 = v23;
  uint64_t v25 = swift_allocObject();
  char v58 = a2;
  uint64_t v59 = v25;
  *(void *)(v25 + 16) = 0;
  uint64_t v48 = (double *)(v25 + 16);
  uint64_t v26 = swift_allocObject();
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  *(void *)(v26 + 16) = v27;
  v47[1] = v26 + 16;
  *(void *)(v26 + 24) = v28;
  uint64_t v29 = swift_allocObject();
  uint64_t v53 = v47;
  *(unsigned char *)(v29 + 16) = 0;
  unint64_t v30 = (unsigned char *)(v29 + 16);
  uint64_t v63 = v22;
  MEMORY[0x1F4188790](v29);
  uint64_t v57 = v31;
  uint64_t v32 = v52;
  uint64_t v61 = *(void *)(v51 + 104);
  uint64_t v33 = outlined init with copy of _ViewList_Node(v51 + 16, (uint64_t)v62);
  uint64_t v54 = v18;
  uint64_t v60 = 2 * a3;
  MEMORY[0x1F4188790](v33);
  swift_bridgeObjectRetain();
  uint64_t v34 = v50;
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  uint64_t v35 = v54;
  outlined destroy of _ViewList_Node((uint64_t)v62);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((*v30 & 1) == 0)
  {
    LOBYTE(v61) = v67;
    specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(v57, v34, v69, v35, v65, v66, v67 | ((unint64_t)v68 << 32), v32, v71, v59, v26, v58, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:));
  }
  char v36 = v56;
  if (v55) {
    goto LABEL_23;
  }
  swift_beginAccess();
  uint64_t v37 = *(void *)(v26 + 16);
  uint64_t v38 = *(void *)(v26 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationCache.merge(_:)(v37, v38);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v36[14], v36[15]));
  if (!v69) {
    goto LABEL_37;
  }
  uint64_t v41 = v36[6];
  if (v41 == 0x8000000000000000 && v69 == -1) {
    goto LABEL_40;
  }
  uint64_t v42 = v41 / v69;
  if ((unsigned __int128)(v42 * (__int128)v69) >> 64 != (v42 * v69) >> 63) {
    goto LABEL_38;
  }
  double v43 = *(double *)&result;
  if (v39) {
    double v43 = 0.0;
  }
  double v44 = (v40 + v43) * (double)(v42 * v69);
  if (v42 < 1) {
    double v43 = 0.0;
  }
  double v19 = v44 - v43;
LABEL_23:
  uint64_t v45 = v48;
  swift_beginAccess();
  *uint64_t v49 = v19 + *v45;
  if (*v30 == 1) {
    AGGraphCancelUpdate();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
  return result;
}

{
  uint64_t result;
  uint64_t v18;
  double v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unsigned char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  double v39;
  uint64_t v40;
  uint64_t v41;
  double v42;
  double v43;
  double *v44;
  BOOL v45;
  uint64_t v46;
  double *v47;
  double *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void *v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned char v60[88];
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 v65;
  unsigned int v66;
  uint64_t v67;
  double v68;
  double v69;
  uint64_t vars8;

  unsigned __int8 v67 = a3;
  unsigned int v68 = a9;
  uint64_t v69 = a10;
  uint64_t v63 = a6;
  uint64_t v64 = a7;
  uint64_t v65 = a8 & 1;
  uint64_t v66 = HIDWORD(a8);
  uint64_t v62 = 0;
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_allocObject());
  uint64_t v18 = result;
  *(unsigned char *)(result + 16) = 0;
  double v19 = *a1;
  uint64_t v20 = *(void *)(*(void *)(a5 + 112) + 16);
  uint64_t v22 = *(void *)(a5 + 48);
  uint64_t v21 = *(void *)(a5 + 56);
  if (v22 != v21
    && *(unsigned char *)(a5 + 24) != 1
    && *(void *)a5 == a3
    && *(double *)(a5 + 8) == a9
    && *(double *)(a5 + 16) == a10)
  {
    *a2 = v22;
    uint64_t v62 = v21;
    double v19 = *(double *)(a5 + 64);
    if (v22 >= a3)
    {
      *(unsigned char *)(result + 16) = 1;
      if (__OFSUB__(v22, a3))
      {
LABEL_41:
        __break(1u);
        goto LABEL_42;
      }
      *a2 = v22 - a3;
      v22 -= a3;
    }
    if (__OFSUB__(v21, v22)) {
      goto LABEL_39;
    }
    if (v21 - v22 <= 1)
    {
      uint64_t v45 = __OFADD__(v21, a3);
      v21 += a3;
      if (v45)
      {
LABEL_42:
        __break(1u);
        return result;
      }
      uint64_t v62 = v21;
    }
  }
  else
  {
    if (v20)
    {
      uint64_t v22 = *a2;
      if ((*a2 & 0x8000000000000000) != 0) {
        goto LABEL_11;
      }
LABEL_5:
      *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
      return result;
    }
    if (a3 + 0x4000000000000000 < 0)
    {
      __break(1u);
LABEL_37:
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
LABEL_40:
      __break(1u);
      goto LABEL_41;
    }
    uint64_t v21 = 2 * a3;
    uint64_t v62 = 2 * a3;
    uint64_t v22 = *a2;
  }
  if (v22 >= v21) {
    goto LABEL_5;
  }
LABEL_11:
  uint64_t v53 = v20;
  uint64_t v54 = (void *)a5;
  uint64_t v48 = a1;
  uint64_t v51 = swift_allocObject();
  *(void *)(v51 + 16) = 0;
  uint64_t v23 = swift_allocObject();
  uint64_t v50 = a4;
  uint64_t v24 = MEMORY[0x1E4FBC860];
  *(void *)(v23 + 16) = MEMORY[0x1E4FBC860];
  uint64_t v49 = v23;
  uint64_t v25 = swift_allocObject();
  unint64_t v56 = a2;
  uint64_t v57 = v25;
  *(void *)(v25 + 16) = 0;
  uint64_t v47 = (double *)(v25 + 16);
  uint64_t v26 = swift_allocObject();
  unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  unint64_t v28 = specialized Dictionary.init(dictionaryLiteral:)(v24);
  *(void *)(v26 + 16) = v27;
  BOOL v46 = v26 + 16;
  *(void *)(v26 + 24) = v28;
  uint64_t v29 = swift_allocObject();
  uint64_t v52 = &v46;
  *(unsigned char *)(v29 + 16) = 0;
  unint64_t v30 = (unsigned char *)(v29 + 16);
  uint64_t v61 = v22;
  MEMORY[0x1F4188790](v29);
  uint64_t v55 = v31;
  uint64_t v32 = v51;
  uint64_t v59 = *(void *)(v50 + 104);
  uint64_t v33 = outlined init with copy of _ViewList_Node(v50 + 16, (uint64_t)v60);
  char v58 = 2 * a3;
  MEMORY[0x1F4188790](v33);
  swift_bridgeObjectRetain();
  uint64_t v34 = v49;
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v60);
  swift_bridgeObjectRelease();
  swift_beginAccess();
  if ((*v30 & 1) == 0)
  {
    LOBYTE(v59) = v65;
    specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(v55, v34, v67, v18, v63, v64, v65 | ((unint64_t)v66 << 32), v32, v69, v57, v26, v56, (double (*)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:));
  }
  uint64_t v35 = v54;
  if (v53) {
    goto LABEL_23;
  }
  swift_beginAccess();
  char v36 = *(void *)(v26 + 16);
  uint64_t v37 = *(void *)(v26 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  EstimationCache.merge(_:)(v36, v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(double *)&uint64_t result = COERCE_DOUBLE(EstimationCache.average.getter(v35[14], v35[15]));
  if (!v67) {
    goto LABEL_37;
  }
  double v40 = v35[6];
  if (v40 == 0x8000000000000000 && v67 == -1) {
    goto LABEL_40;
  }
  uint64_t v41 = v40 / v67;
  if ((unsigned __int128)(v41 * (__int128)v67) >> 64 != (v41 * v67) >> 63) {
    goto LABEL_38;
  }
  uint64_t v42 = *(double *)&result;
  if (v38) {
    uint64_t v42 = 0.0;
  }
  double v43 = (v39 + v42) * (double)(v41 * v67);
  if (v41 < 1) {
    uint64_t v42 = 0.0;
  }
  double v19 = v43 - v42;
LABEL_23:
  double v44 = v47;
  swift_beginAccess();
  *uint64_t v48 = v19 + *v44;
  if (*v30 == 1) {
    AGGraphCancelUpdate();
  }
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  *(double *)&uint64_t result = COERCE_DOUBLE(swift_release());
  return result;
}

uint64_t NavigationSplitCoordinator.deinit()
{
  outlined destroy of _VariadicView_Children(v0 + 16);
  outlined destroy of _VariadicView_Children(v0 + 72);
  outlined destroy of _VariadicView_Children(v0 + 128);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  outlined consume of NavigationEventHandlers?(*(void *)(v0 + 248), *(void *)(v0 + 256), *(void *)(v0 + 264));
  outlined destroy of NavigationAuthority(v0 + 280);
  outlined destroy of UINavigationPresentationAdaptor?(v0 + 304);
  swift_bridgeObjectRelease();

  return v0;
}

unint64_t lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment;
  if (!lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, &lazy protocol witness table cache variable for type HorizontalAlignment and conformance HorizontalAlignment);
  }
  return result;
}

uint64_t specialized Set.isSubset(of:)(uint64_t result, uint64_t a2)
{
  unint64_t v2 = *(void *)(result + 16);
  if (v2 < *(void *)(a2 + 16)) {
    return 0;
  }
  uint64_t v4 = result;
  int64_t v5 = 0;
  uint64_t v6 = a2 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a2 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a2 + 56);
  int64_t v10 = (unint64_t)(63 - v7) >> 6;
  uint64_t v11 = result + 56;
LABEL_6:
  while (1)
  {
    int64_t v12 = v5;
    if (!v9) {
      break;
    }
    unint64_t v13 = __clz(__rbit64(v9));
    v9 &= v9 - 1;
    unint64_t v14 = v13 | (v5 << 6);
    if (!v2) {
      goto LABEL_28;
    }
LABEL_22:
    double v18 = *(double *)(*(void *)(a2 + 48) + 8 * v14);
    unint64_t result = static Hasher._hash(seed:_:)();
    uint64_t v19 = -1 << *(unsigned char *)(v4 + 32);
    unint64_t v20 = result & ~v19;
    if (((*(void *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
      goto LABEL_28;
    }
    uint64_t v21 = *(void *)(v4 + 48);
    if (*(double *)(v21 + 8 * v20) != v18)
    {
      uint64_t v22 = ~v19;
      while (1)
      {
        unint64_t v20 = (v20 + 1) & v22;
        if (((*(void *)(v11 + ((v20 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v20) & 1) == 0) {
          break;
        }
        if (*(double *)(v21 + 8 * v20) == v18) {
          goto LABEL_6;
        }
      }
LABEL_28:
      swift_bridgeObjectRetain();
      outlined consume of Set<UIPress>.Iterator._Variant();
      return 0;
    }
  }
  int64_t v15 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    goto LABEL_33;
  }
  if (v15 >= v10) {
    goto LABEL_31;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v15);
  ++v5;
  if (v16) {
    goto LABEL_21;
  }
  int64_t v5 = v12 + 2;
  if (v12 + 2 >= v10) {
    goto LABEL_31;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v5);
  if (v16) {
    goto LABEL_21;
  }
  int64_t v5 = v12 + 3;
  if (v12 + 3 >= v10) {
    goto LABEL_31;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v5);
  if (v16) {
    goto LABEL_21;
  }
  int64_t v17 = v12 + 4;
  if (v12 + 4 >= v10)
  {
LABEL_31:
    swift_bridgeObjectRetain();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return 1;
  }
  unint64_t v16 = *(void *)(v6 + 8 * v17);
  int64_t v5 = v12 + 4;
  if (v16)
  {
LABEL_21:
    unint64_t v9 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v5 << 6);
    if (!v2) {
      goto LABEL_28;
    }
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v5 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v5 >= v10) {
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v6 + 8 * v5);
    ++v17;
    if (v16) {
      goto LABEL_21;
    }
  }
LABEL_33:
  __break(1u);
  return result;
}

double specialized LazyHVStack<>.flexibleMinorSize(subviews:)(uint64_t a1)
{
  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v3 = *(void *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

{
  unsigned char v2[88];
  uint64_t v3;
  uint64_t v4;
  double v5;

  uint64_t v4 = 0;
  double v5 = 0.0;
  uint64_t v3 = *(void *)(a1 + 104);
  outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v2);
  swift_bridgeObjectRetain();
  _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v2);
  swift_bridgeObjectRelease();
  return v5;
}

void @objc CellHostingView.layoutMarginsDidChange()(void *a1)
{
  id v1 = a1;
  CellHostingView.layoutMarginsDidChange()();
}

Swift::Void __swiftcall CellHostingView.layoutMarginsDidChange()()
{
  v1.receiver = v0;
  v1.super_class = (Class)swift_getObjectType();
  objc_msgSendSuper2(&v1, sel_layoutMarginsDidChange);
  swift_getWitnessTable();
  ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
}

uint64_t associated type witness table accessor for TextAccessibilityProvider.Body : View in SwiftUITextAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

void *_UIHostingView.init(rootView:)(objc_class *a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = specialized _UIHostingView.init(rootView:)(a1);
  (*(void (**)(objc_class *))(*(void *)(*(void *)(v3 + 80) - 8) + 8))(a1);
  return v4;
}

uint64_t assignWithCopy for CoordinateSpaceNameModifier(uint64_t a1, long long *a2)
{
  if ((long long *)a1 != a2)
  {
    outlined destroy of CoordinateSpace.Name(a1);
    if (*((unsigned char *)a2 + 40))
    {
      long long v4 = *a2;
      long long v5 = a2[1];
      *(_OWORD *)(a1 + 25) = *(long long *)((char *)a2 + 25);
      *(_OWORD *)a1 = v4;
      *(_OWORD *)(a1 + 16) = v5;
    }
    else
    {
      uint64_t v6 = *((void *)a2 + 3);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      (**(void (***)(uint64_t, long long *))(v6 - 8))(a1, a2);
      *(unsigned char *)(a1 + 40) = 0;
    }
  }
  return a1;
}

uint64_t outlined destroy of CoordinateSpace.Name(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for ScrollEnvironmentProperties(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(a1 + 3) = *(unsigned char *)(a2 + 3);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  if (!*(void *)(a1 + 32)) {
    goto LABEL_5;
  }
  if (!*(void *)(a2 + 32))
  {
    outlined destroy of AccessibilityRelationshipScope.Key(a1 + 8);
LABEL_5:
    long long v7 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(v4 + 32) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(v4 + 48) = v7;
    *(void *)(v4 + 64) = *(void *)(v5 + 64);
    long long v8 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(_OWORD *)(v4 + 16) = v8;
    goto LABEL_6;
  }
  __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  long long v6 = *(_OWORD *)(v5 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(_OWORD *)(v4 + 16) = v6;
  *(void *)(v4 + 32) = *(void *)(v5 + 32);
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(_WORD *)(a1 + 52) = *(_WORD *)(a2 + 52);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
LABEL_6:
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  *(unsigned char *)(a1 + 81) = *(unsigned char *)(a2 + 81);
  *(unsigned char *)(a1 + 82) = *(unsigned char *)(a2 + 82);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(_WORD *)(a1 + 88) = *(_WORD *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(_WORD *)(a1 + 112) = *(_WORD *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_WORD *)(a1 + 136) = *(_WORD *)(a2 + 136);
  long long v9 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v9;
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  return a1;
}

id UIColor.init(_:)(uint64_t a1)
{
  type metadata accessor for UIColor();
  _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type UIColor and conformance UIColor);
  swift_retain();
  AnyColorBox.as<A>(_:)();
  swift_release();
  id v2 = (id)v15[0];
  if (v15[0])
  {
    id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithColor__swiftUI___, v15[0]);
LABEL_5:
    id v5 = v3;
    goto LABEL_6;
  }
  uint64_t v4 = Color.cgColor.getter();
  if (v4)
  {
    id v2 = (id)v4;
    id v3 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithCGColor_, v4);
    goto LABEL_5;
  }
  type metadata accessor for ObjcColor();
  swift_retain();
  id v2 = (id)ObjcColor.__allocating_init(_:)();
  if (one-time initialization token for dynamicColorCache != -1) {
    swift_once();
  }
  id v7 = objc_msgSend((id)dynamicColorCache, sel_objectForKey_, v2);
  if (v7)
  {
    long long v8 = v7;
    id v5 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithColor__swiftUI___, v7);
  }
  else
  {
    swift_retain();
    uint64_t v9 = dispatch thunk of AnyColorBox.kitColor.getter();
    swift_release();
    if (v9)
    {
      self;
      long long v10 = (void *)swift_dynamicCastObjCClassUnconditional();
      id v11 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_initWithColor__swiftUI___, v10);
    }
    else
    {
      id v12 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
      v15[4] = partial apply for closure #1 in UIColor.init(_:);
      v15[5] = a1;
      v15[0] = MEMORY[0x1E4F143A8];
      v15[1] = 1107296256;
      v15[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIAccessibilityCustomRotorSearchPredicate) -> (@owned UIAccessibilityCustomRotorItemResult?);
      v15[3] = &block_descriptor_71;
      unint64_t v13 = _Block_copy(v15);
      swift_retain();
      swift_release();
      id v11 = objc_msgSend(v12, sel_initWithDynamicProvider_, v13);
      _Block_release(v13);
    }
    id v14 = (id)dynamicColorCache;
    id v5 = v11;
    id v2 = v2;
    objc_msgSend(v14, sel_setObject_forKey_, v5, v2);
  }
LABEL_6:

  swift_release();
  return v5;
}

uint64_t protocol witness for View.body.getter in conformance SceneBridgeReader<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return SceneBridgeReader.body.getter(*(void *)v2, *(void (**)(uint64_t))(v2 + 16), *(void *)(a1 + 16), a2);
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableLazyLayoutReuseLoggingAlways()
{
  return &protocol witness table for EnableLazyLayoutReuseLoggingAlways;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in EnableLazyLayoutReuseLogging()
{
  return &protocol witness table for EnableLazyLayoutReuseLogging;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _TaskValueModifier<A>()
{
  return static _TaskValueModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t specialized closure #1 in _NavigationSplitReader.PreparedColumn.updateValue()(uint64_t result, char a2, uint64_t a3, char a4)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v6 = result;
      swift_retain();
      swift_release();
      unint64_t result = swift_release();
      *(void *)uint64_t v6 = 0;
      *(void *)(v6 + 8) = a3;
      *(unsigned char *)(v6 + 16) = a4 & 1;
    }
  }
  return result;
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance EnvironmentValues.SearchFocusContextKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of SearchFocusContext?((uint64_t)&static EnvironmentValues.SearchFocusContextKey.defaultValue, a1);
}

uint64_t destroy for AlertStorage(uint64_t a1)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 144))
  {
    if (*(void *)(a1 + 128))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
      swift_bridgeObjectRelease();
    }
    swift_release();
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 160))
  {

    swift_release();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t ForEach.makeID(index:offset:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  id v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = swift_retain();
  ForEach.data.getter();
  uint64_t v9 = v4;
  long long v10 = *(_OWORD *)(a3 + 24);
  long long v11 = *(_OWORD *)(a3 + 40);
  type metadata accessor for ForEach.IDGenerator();
  ForEach.IDGenerator.makeID(data:index:offset:)();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return swift_release();
}

uint64_t specialized _LazyLayoutViewCache.init(layout:list:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, uint64_t, uint64_t))
{
  *(void *)(v4 + 232) = 0;
  *(void *)(v4 + 240) = 0;
  *(void *)(v4 + 248) = 0;
  *(unsigned char *)(v4 + 256) = 1;
  *(void *)(v4 + 264) = 0;
  *(unsigned char *)(v4 + 272) = 1;
  *(_OWORD *)(v4 + 280) = 0u;
  *(_OWORD *)(v4 + 296) = 0u;
  *(_OWORD *)(v4 + 312) = 0u;
  *(void *)(v4 + 328) = 0xBFF0000000000000;
  *(void *)(v4 + 336) = 0xBFF0000000000000;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  unint64_t v9 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v10 = specialized Dictionary.init(dictionaryLiteral:)(v8);
  *(void *)(v4 + 344) = v9;
  *(void *)(v4 + 352) = v10;
  *(_DWORD *)(v4 + 228) = a1;

  return a4(a1, a2, a3);
}

{
  uint64_t v4;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t vars8;

  *(_OWORD *)(v4 + 248) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(unsigned char *)(v4 + 264) = 1;
  *(_OWORD *)(v4 + 272) = 0u;
  *(_OWORD *)(v4 + 288) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v4 + 304) = 0u;
  *(_OWORD *)(v4 + 320) = _Q1;
  unint64_t v13 = MEMORY[0x1E4FBC860];
  id v14 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  int64_t v15 = specialized Dictionary.init(dictionaryLiteral:)(v13);
  *(void *)(v4 + 336) = v14;
  *(void *)(v4 + 344) = v15;
  *(_DWORD *)(v4 + 228) = a1;

  return a4(a1, a2, a3);
}

uint64_t specialized _LazyStack_Cache.reset()()
{
  *(void *)uint64_t v0 = 0;
  *(void *)(v0 + 8) = 0;
  *(void *)(v0 + 16) = 0;
  *(unsigned char *)(v0 + 24) = 1;
  *(void *)(v0 + 32) = 0;
  *(unsigned char *)(v0 + 40) = 1;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  __asm { FMOV            V1.2D, #-1.0 }
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = _Q1;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 112) = v7;
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 120) = v8;
  return result;
}

{
  uint64_t v0;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t result;

  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v0 = 0u;
  *(_OWORD *)(v0 + 16) = 0u;
  *(unsigned char *)(v0 + 32) = 1;
  *(_OWORD *)(v0 + 40) = 0u;
  *(_OWORD *)(v0 + 56) = 0u;
  *(_OWORD *)(v0 + 72) = 0u;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(v0 + 88) = _Q0;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  unint64_t v7 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  *(void *)(v0 + 104) = v7;
  unint64_t v8 = specialized Dictionary.init(dictionaryLiteral:)(v6);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v0 + 112) = v8;
  return result;
}

uint64_t specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(uint64_t a1, uint64_t a2, char a3, char a4, double a5)
{
  uint64_t v6 = v5;
  unint64_t v7 = (double *)(v5 + 136);
  *((void *)v7 - 5) = a1;
  *(v7 - 3) = a5;
  *((unsigned char *)v7 - 32) = a4;
  *((void *)v7 - 2) = a2;
  *((unsigned char *)v7 - 8) = a3 & 1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  double v9 = *v7;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(*(void *)&v9 + 16));
  }
  else
  {
    *(void *)unint64_t v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(*(void *)&v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(void *)(v6 + 144) = 0;
  outlined destroy of AccessibilityScrollableContext?(v6 + 152, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  *(_OWORD *)(v6 + 152) = 0u;
  *(_OWORD *)(v6 + 168) = 0u;
  *(_OWORD *)(v6 + 184) = 0u;
  *(_OWORD *)(v6 + 200) = 0u;
  *(_OWORD *)(v6 + 216) = 0u;
  *(_OWORD *)(v6 + 231) = 0u;
  int v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(v6 + 248);
  if (v10)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v11 + 16));
  }
  else
  {
    *(void *)(v6 + 248) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v11 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(_OWORD *)(v6 + 256) = xmmword_188357300;
  *(_OWORD *)(v6 + 272) = xmmword_188357310;
  *(_OWORD *)(v6 + 288) = xmmword_188357310;
  *(unsigned char *)(v6 + 304) = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 312) = v13;
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(v12);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v6 + 320) = v14;
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  double *v7;
  int isUniquelyReferenced_nonNull_native;
  double v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t result;

  uint64_t v6 = v5;
  unint64_t v7 = (double *)(v5 + 144);
  *((void *)v7 - 5) = a1;
  *(v7 - 3) = a5;
  *((unsigned char *)v7 - 32) = a4;
  *((void *)v7 - 2) = a2;
  *((unsigned char *)v7 - 8) = a3 & 1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  double v9 = *v7;
  if (isUniquelyReferenced_nonNull_native)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(*(void *)&v9 + 16));
  }
  else
  {
    *(void *)unint64_t v7 = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(*(void *)&v9 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  *(void *)(v6 + 152) = 0;
  outlined destroy of AccessibilityScrollableContext?(v6 + 160, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  *(_OWORD *)(v6 + 160) = 0u;
  *(_OWORD *)(v6 + 176) = 0u;
  *(_OWORD *)(v6 + 192) = 0u;
  *(_OWORD *)(v6 + 208) = 0u;
  *(_OWORD *)(v6 + 224) = 0u;
  *(_OWORD *)(v6 + 239) = 0u;
  int v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v11 = *(void *)(v6 + 256);
  if (v10)
  {
    specialized Array.replaceSubrange<A>(_:with:)(0, *(void *)(v11 + 16));
  }
  else
  {
    *(void *)(v6 + 256) = specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(0, *(void *)(v11 + 24) >> 1);
    swift_bridgeObjectRelease();
  }
  *(void *)(v6 + 264) = 0x7FFFFFFFFFFFFFFFLL;
  *(void *)(v6 + 272) = 0x8000000000000000;
  *(void *)(v6 + 280) = 0x7FF0000000000000;
  *(_OWORD *)(v6 + 288) = xmmword_1883572F0;
  *(void *)(v6 + 304) = 0xFFF0000000000000;
  *(unsigned char *)(v6 + 312) = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  unint64_t v13 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  *(void *)(v6 + 320) = v13;
  unint64_t v14 = specialized Dictionary.init(dictionaryLiteral:)(v12);
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v6 + 328) = v14;
  return result;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  if (a2 <= a1) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = a2;
  }
  if (!v6) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  a6(0, a3, a4, a5);
  unint64_t v8 = (void *)swift_allocObject();
  size_t v9 = _swift_stdlib_malloc_size_2(v8);
  void v8[2] = a1;
  v8[3] = 2 * ((uint64_t)(v9 - 32) / 96);
  return v8;
}

void *specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(uint64_t a1, uint64_t a2)
{
  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_PlacedSubview>, (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 72);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_Subview>, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>);
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(Int, Int)>, (uint64_t (*)(uint64_t))type metadata accessor for (Int, Int));
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.Cell>, (uint64_t)&type metadata for GridLayout.Cache.Cell, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 104);
  return v4;
}

{
  uint64_t v2;
  void *v4;
  int64_t v5;
  uint64_t v6;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<_LazyLayout_Subview>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GridLayout.Cache.RowOrColumn>, (uint64_t)&type metadata for GridLayout.Cache.RowOrColumn, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size_2(v4);
  uint64_t v6 = v5 - 32;
  if (v5 < 32) {
    uint64_t v6 = v5 + 31;
  }
  v4[2] = a1;
  v4[3] = 2 * (v6 >> 6);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityLinkElement>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityLinkElement);
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  type metadata accessor for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<Int, Int>>, (uint64_t (*)(uint64_t))type metadata accessor for ListUpdate<Int, Int>, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * ((uint64_t)(v5 - 32) / 40);
  return v4;
}

{
  return specialized _ContiguousArrayBuffer.init(_uninitializedCount:minimumCapacity:)(a1, a2, (uint64_t)&lazy cache variable for type metadata for _ContiguousArrayStorage<ListUpdate<CountingIndex<Int>, CountingIndex<Int>>>, (uint64_t)type metadata accessor for ListUpdate<CountingIndex<Int>, CountingIndex<Int>>, MEMORY[0x1E4FBBE00], (void (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for _ContiguousArrayStorage<(source: IndexPath, destination: IndexPath)>);
}

{
  uint64_t v2;
  void *v4;
  size_t v5;

  if (a2 <= a1) {
    uint64_t v2 = a1;
  }
  else {
    uint64_t v2 = a2;
  }
  if (!v2) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  _s7SwiftUI11PPTTestCaseVSgMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UInt8>, MEMORY[0x1E4FBC358], MEMORY[0x1E4FBBE00]);
  uint64_t v4 = (void *)swift_allocObject();
  size_t v5 = _swift_stdlib_malloc_size_2(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t key path getter for EnvironmentValues.searchCustomScopeBarVisibility : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.searchCustomScopeBarVisibility.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.searchCustomScopeBarVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchCustomScopeBarVisibilityKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t ModifiedContent<>.accessibilityInputLabels(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v4, 1, a2, a3);
}

{
  uint64_t v3;
  int64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v21;

  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  size_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v19 = a3;
    uint64_t v21 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v4, 0);
    size_t v5 = v21;
    unint64_t v7 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      unint64_t v8 = Text.init(_:tableName:bundle:comment:)();
      int v10 = v9;
      uint64_t v12 = v11;
      unint64_t v14 = v13;
      uint64_t v21 = v5;
      unint64_t v16 = *(void *)(v5 + 16);
      int64_t v15 = *(void *)(v5 + 24);
      if (v16 >= v15 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v15 > 1), v16 + 1, 1);
        size_t v5 = v21;
      }
      *(void *)(v5 + 16) = v16 + 1;
      int64_t v17 = v5 + 32 * v16;
      *(void *)(v17 + 32) = v8;
      *(void *)(v17 + 40) = v10;
      *(unsigned char *)(v17 + 48) = v12 & 1;
      *(void *)(v17 + 56) = v14;
      v7 += 32;
      --v4;
    }
    while (v4);
    id v3 = a2;
    a3 = v19;
  }
  uint64_t v21 = v5;
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v21, 1, v3, a3);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityAutomationType(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = a1;
  char v5 = 0;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AD8], (uint64_t)&v4, 1, a2, a3);
}

uint64_t ModifiedContent<>.accessibilitySortPriority(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  double v4 = a3;
  char v5 = 0;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AC8], (uint64_t)&v4, 1, a1, a2);
}

uint64_t ModifiedContent<>.accessibilityLabel(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  ModifiedContent<>.accessibilityLabel(_:)(v4, v5, v7 & 1, v9, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v10 = v9;
  char v12 = v11 & 1;
  ModifiedContent<>.accessibilityLabel(_:)(v8, v9, v11 & 1, v13, a2, a3);
  outlined consume of Text.Storage(v8, v10, v12);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityLabel(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<Text>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(unsigned char *)(v12 + 48) = a3 & 1;
  *(void *)(v12 + 56) = a4;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  uint64_t v14 = v12;
  char v15 = 2;
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B88], (uint64_t)&v14, 1, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v12 = a1;
  v11[2] = *(void *)(a2 + 16);
  v11[3] = a3;
  v11[4] = a4;
  uint64_t v7 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:), (uint64_t)v11, v7, MEMORY[0x1E4F41420], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v9);
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v12, 1, a2, a5);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  ModifiedContent<>.accessibilityHint(_:)(v4, v5, v7 & 1, v9, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityHint(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  _ss23_ContiguousArrayStorageCy7SwiftUI4TextVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4FBBE00]);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  *(void *)(v12 + 32) = a1;
  *(void *)(v12 + 40) = a2;
  *(unsigned char *)(v12 + 48) = a3 & 1;
  *(void *)(v12 + 56) = a4;
  uint64_t v14 = v12;
  outlined copy of Text.Storage(a1, a2, a3 & 1);
  swift_bridgeObjectRetain();
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40B78], (uint64_t)&v14, 1, a5, a6);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.update<A>(_:replacing:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  if (a3)
  {
    uint64_t v10 = *(void *)(v5 + *(int *)(a4 + 36)) + 16;
    swift_beginAccess();
    swift_retain();
    swift_retain();
    closure #1 in ModifiedContent<>.update<A>(_:replacing:isEnabled:)(v10, a1, a2);
    swift_endAccess();
    swift_release();
    swift_release();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16))(a5, v5, a4);
}

uint64_t closure #1 in ModifiedContent<>.update<A>(_:replacing:isEnabled:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  double v5 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  (*(void (**)(char *, uint64_t, double))(v7 + 16))((char *)&v9 - v6, a3, v5);
  return AccessibilityProperties.subscript.setter();
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5(uint64_t a1, int *a2)
{
  uint64_t v6 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  uint64_t v4 = (void *)swift_task_alloc();
  *(void *)(v2 + 16) = v4;
  *uint64_t v4 = v2;
  v4[1] = _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_;
  return v6(a1);
}

uint64_t type metadata completion function for SubscriptionView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t static UIViewRepresentable._makeViewList(view:inputs:)()
{
  return static _ViewListOutputs.unaryViewList<A>(view:inputs:)();
}

uint64_t assignWithCopy for PrimitiveTargetVisibilityModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t View.task<A>(id:priority:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v29 = a7;
  uint64_t v27 = a8;
  uint64_t v28 = a5;
  uint64_t v25 = a3;
  uint64_t v26 = a4;
  uint64_t v23 = a1;
  uint64_t v24 = a2;
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v23 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for _TaskValueModifier();
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  uint64_t v21 = (uint64_t *)((char *)&v23 - v20);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v23, a6, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v24, v9);
  _TaskValueModifier.init(value:priority:action:)((uint64_t)v16, (uint64_t)v12, v25, v26, a6, v21);
  swift_retain();
  MEMORY[0x18C113660](v21, v28, v17, v29);
  return (*(uint64_t (**)(void *, uint64_t))(v18 + 8))(v21, v17);
}

uint64_t _TaskValueModifier.init(value:priority:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void *a6@<X8>)
{
  *a6 = a3;
  a6[1] = a4;
  uint64_t v10 = type metadata accessor for _TaskValueModifier();
  uint64_t v11 = (char *)a6 + *(int *)(v10 + 36);
  uint64_t v12 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32))(v11, a2, v12);
  uint64_t v13 = (char *)a6 + *(int *)(v10 + 40);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v14(v13, a1, a5);
}

uint64_t type metadata completion function for _TaskModifier.InnerModifier()
{
  uint64_t result = type metadata accessor for _TaskModifier(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t _TaskValueModifier.InnerModifier.body(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = v3;
  uint64_t v62 = a3;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v66 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v56 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  MEMORY[0x1F4188790](v11);
  uint64_t v52 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v47 - v13;
  swift_getWitnessTable();
  uint64_t v53 = type metadata accessor for _ViewModifier_Content();
  uint64_t v55 = type metadata accessor for ModifiedContent();
  uint64_t v47 = *(void *)(a2 + 24);
  uint64_t v15 = v6;
  uint64_t v58 = type metadata accessor for _ValueActionModifier2();
  uint64_t v59 = type metadata accessor for ModifiedContent();
  uint64_t v60 = type metadata accessor for ModifiedContent();
  uint64_t v61 = *(void *)(v60 - 8);
  MEMORY[0x1F4188790](v60);
  uint64_t v54 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v18 = MEMORY[0x1F4188790](v17);
  uint64_t v57 = (char *)&v47 - v19;
  uint64_t v20 = v9;
  uint64_t v64 = *(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16);
  uint64_t v65 = v9 + 16;
  uint64_t v51 = v14;
  uint64_t v21 = v4;
  uint64_t v48 = v4;
  v64(v14, v4, a2, v18);
  uint64_t v22 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v23 = (v22 + 32) & ~v22;
  uint64_t v63 = v23 + v10;
  uint64_t v50 = v22 | 7;
  uint64_t v24 = swift_allocObject();
  uint64_t v25 = v47;
  *(void *)(v24 + 16) = v15;
  *(void *)(v24 + 24) = v25;
  uint64_t v26 = *(void (**)(uint64_t, char *, uint64_t))(v20 + 32);
  v26(v24 + v23, v14, a2);
  uint64_t v49 = v26;
  uint64_t v27 = v52;
  ((void (*)(char *, uint64_t, uint64_t))v64)(v52, v21, a2);
  uint64_t v28 = swift_allocObject();
  *(void *)(v28 + 16) = v15;
  *(void *)(v28 + 24) = v25;
  uint64_t v29 = v25;
  v26(v28 + v23, v27, a2);
  *(void *)&long long v73 = partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:);
  *((void *)&v73 + 1) = v24;
  *(void *)&long long v74 = partial apply for closure #2 in _TaskValueModifier.InnerModifier.body(content:);
  *((void *)&v74 + 1) = v28;
  uint64_t v30 = v53;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](v75, &v73, v30, MEMORY[0x1E4F40EE0], WitnessTable);
  swift_release();
  swift_release();
  long long v73 = v75[0];
  long long v74 = v75[1];
  uint64_t v32 = type metadata accessor for _TaskValueModifier();
  uint64_t v33 = v48;
  uint64_t v34 = v56;
  uint64_t v35 = v15;
  (*(void (**)(char *, uint64_t, uint64_t))(v66 + 16))(v56, v48 + *(int *)(v32 + 40), v15);
  char v36 = v51;
  ((void (*)(char *, uint64_t, uint64_t))v64)(v51, v33, a2);
  uint64_t v37 = swift_allocObject();
  *(void *)(v37 + 16) = v35;
  *(void *)(v37 + 24) = v29;
  v49(v37 + v23, v36, a2);
  uint64_t v38 = MEMORY[0x1E4F40ED8];
  uint64_t v71 = WitnessTable;
  uint64_t v72 = MEMORY[0x1E4F40ED8];
  uint64_t v39 = swift_getWitnessTable();
  double v40 = v54;
  View.onChange<A>(of:initial:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v35);
  uint64_t v41 = v74;
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v73);
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v41);
  uint64_t v42 = swift_getWitnessTable();
  uint64_t v69 = v39;
  uint64_t v70 = v42;
  uint64_t v67 = swift_getWitnessTable();
  uint64_t v68 = v38;
  uint64_t v43 = v60;
  swift_getWitnessTable();
  double v44 = v57;
  static ViewBuilder.buildExpression<A>(_:)(v40);
  uint64_t v45 = *(void (**)(char *, uint64_t))(v61 + 8);
  v45(v40, v43);
  static ViewBuilder.buildExpression<A>(_:)(v44);
  return ((uint64_t (*)(char *, uint64_t))v45)(v44, v43);
}

void *initializeWithCopy for _TaskValueModifier.InnerModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v6 = type metadata accessor for TaskPriority();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16);
  uint64_t v9 = v7 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v11 = ((unint64_t)a2 + v10 + 16) & ~v10;
  swift_retain();
  v8(((unint64_t)a1 + v10 + 16) & ~v10, v11, v6);
  uint64_t v12 = *(void *)(v9 + 48);
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = v12 + v14;
  uint64_t v33 = ~v14;
  uint64_t v35 = *(void *)(a3 + 16);
  uint64_t v31 = *(void (**)(unint64_t, uint64_t))(v13 + 16);
  v31((v12 + v14 + (((unint64_t)a1 + v10 + 16) & ~v10)) & ~v14, (v12 + v14 + v11) & ~v14);
  uint64_t v16 = a1;
  uint64_t v17 = *(void *)(v13 + 64);
  uint64_t v18 = v17 + (v14 | 7) + ((v15 + ((v10 + 16) & ~v10)) & ~v14);
  uint64_t v19 = (void *)(((unint64_t)a1 + v18) & ~(v14 | 7));
  uint64_t v20 = (uint64_t *)(((unint64_t)a2 + v18) & ~(v14 | 7));
  uint64_t v21 = v14 + 8;
  uint64_t v22 = (v14 + 8) & ~v14;
  if ((*(_DWORD *)(v13 + 84) & 0x80000000) == 0)
  {
    uint64_t v23 = *v20;
    if ((unint64_t)*v20 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    uint64_t v24 = ~v14;
    uint64_t v25 = v35;
    size_t v26 = v22 + v17;
    if (v23 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v19 = *v20;
    unint64_t v28 = ((unint64_t)v19 + v21) & v24;
    unint64_t v29 = ((unint64_t)v20 + v21) & v24;
    swift_retain();
    ((void (*)(unint64_t, unint64_t, uint64_t))v31)(v28, v29, v25);
    goto LABEL_8;
  }
  uint64_t v25 = v35;
  int v27 = (*(uint64_t (**)(unint64_t))(v13 + 48))(((unint64_t)v20 + v21) & v33);
  uint64_t v24 = v33;
  size_t v26 = v22 + v17;
  if (!v27) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v19, v20, v26);
LABEL_8:
  *(void *)(((unint64_t)v19 + v26 + 7) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((unint64_t)v20 + v26 + 7) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return v16;
}

uint64_t static _TaskValueModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier._makeViewList(modifier:inputs:body:)();
}

uint64_t type metadata accessor for _TaskValueModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized GeometryActionBinder.reset(seed:)(int *a1)
{
  *(_DWORD *)(v1 + a1[17]) = *(_DWORD *)AGGraphGetValue() >> 1;
  uint64_t v3 = v1 + a1[16];
  if ((unint64_t)*(unsigned __int8 *)(v3 + 12) << 32 != 0x200000000)
  {
    *(void *)(v3 + 4) = 0xFFFFFFFFLL;
    *(unsigned char *)(v3 + 12) = 0;
  }
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for ValueCycleDetector();
  ValueCycleDetector.reset()();
  uint64_t v5 = v1 + a1[19];
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56);

  return v7(v5, 1, 1, AssociatedTypeWitness);
}

uint64_t closure #3 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v48 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v49 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  uint64_t v12 = type metadata accessor for Optional();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v47 = (uint64_t *)((char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v37 - v16;
  uint64_t v18 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v37 - v20;
  uint64_t v46 = type metadata accessor for _TaskValueModifier.InnerModifier();
  uint64_t v50 = a1;
  _TaskValueModifier.InnerModifier.taskState.getter();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v11) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v17, v12);
  }
  uint64_t v42 = v13;
  uint64_t v43 = v12;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v17, v11);
  uint64_t v23 = type metadata accessor for _TaskValueModifier();
  uint64_t v24 = v49;
  uint64_t v25 = (char *)v50 + *(int *)(v23 + 40);
  double v40 = *(void (**)(char *))(v8 + 16);
  uint64_t v41 = v25;
  v40(v49);
  uint64_t v44 = a3;
  char v26 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v45 = v8;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v24, a2);
  if (v26) {
    return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v21, v11);
  }
  uint64_t v39 = v21;
  uint64_t v27 = swift_retain();
  MEMORY[0x18C115EE0](v27, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
  swift_release();
  uint64_t v28 = v50[1];
  uint64_t v38 = *v50;
  unint64_t v29 = (char *)v50 + *(int *)(v23 + 36);
  uint64_t v30 = type metadata accessor for TaskPriority();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = (uint64_t)v48;
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v48, v29, v30);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v31 + 56))(v32, 0, 1, v30);
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = 0;
  v33[3] = 0;
  v33[4] = v38;
  v33[5] = v28;
  swift_retain();
  uint64_t v34 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v32, (uint64_t)&async function pointer to partial apply for closure #1 in closure #3 in _TaskValueModifier.InnerModifier.body(content:), (uint64_t)v33);
  outlined destroy of _TaskModifier(v32, (uint64_t (*)(void))type metadata accessor for TaskPriority?);
  ((void (*)(char *, char *, uint64_t))v40)(v24, v41, a2);
  uint64_t v35 = (uint64_t)v47;
  *uint64_t v47 = v34;
  uint64_t v36 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  (*(void (**)(uint64_t, char *, uint64_t))(v45 + 32))(v35 + *(int *)(v36 + 36), v24, a2);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v18 + 56))(v35, 0, 1, v11);
  specialized _TaskValueModifier.InnerModifier.taskState.setter(v35, v46);
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v35, v43);
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v39, v11);
}

void *assignWithCopy for _TaskModifier.InnerModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 24))(v8, v9, v10);
  uint64_t v11 = *(int *)(a3 + 20);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (void *)((char *)a2 + v11);
  *(void *)((char *)a1 + v11) = *v13;
  swift_retain();
  swift_release();
  *((void *)v12 + 1) = v13[1];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t closure #2 in _TaskModifier.InnerModifier.body(content:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + *(int *)(type metadata accessor for _TaskModifier.InnerModifier(0) + 20) + 8);
  type metadata accessor for _GraphValue<_TaskModifier>(0, &lazy cache variable for type metadata for State<Task<(), Never>?>, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Never>?, MEMORY[0x1E4F41580]);
  uint64_t result = State.wrappedValue.getter();
  if (v3)
  {
    MEMORY[0x18C115EE0](v3, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    if (v1)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance OnModifierKeysChangedModifier@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for _TaskModifier(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  long long v15 = *(_OWORD *)(v1 + 32);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = *(_OWORD *)v1;
  *(void *)(v13 + 32) = v12;
  *(void *)(v13 + 40) = v11;
  *(_OWORD *)(v13 + 48) = *(_OWORD *)(v1 + 32);
  swift_retain();
  outlined retain of State<Bool>((uint64_t)&v15);
  static TaskPriority.userInitiated.getter();
  (*(void (**)(char *, char *, uint64_t))(v8 + 16))(&v6[*(int *)(v4 + 28)], v10, v7);
  *(void *)uint64_t v6 = &async function pointer to partial apply for closure #1 in OnModifierKeysChangedModifier.body(content:);
  *((void *)v6 + 1) = v13;
  outlined init with copy of _TaskModifier((uint64_t)v6, a1);
  outlined destroy of _TaskModifier((uint64_t)v6);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t outlined destroy of _TaskModifier(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of _TaskModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _TaskModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v2 = *(void *)(type metadata accessor for _TaskModifier.InnerModifier(0) - 8);
  uint64_t v3 = v1 + ((*(unsigned __int8 *)(v2 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));

  return a1(v3);
}

uint64_t static _TaskModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier.makeView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>();
    lazy protocol witness table accessor for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier(&lazy protocol witness table cache variable for type _ViewModifier_Content<_TaskModifier.InnerModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<_TaskModifier.InnerModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t static _TaskModifier._makeViewList(modifier:inputs:body:)()
{
  return static ViewModifier.makeViewList(modifier:inputs:body:)();
}

uint64_t lazy protocol witness table accessor for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _TaskModifier.Child and conformance _TaskModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child;
  if (!lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child;
  if (!lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TaskModifier.Child and conformance _TaskModifier.Child);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<_TaskModifier.InnerModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<_TaskModifier.InnerModifier>)
  {
    type metadata accessor for _TaskModifier.InnerModifier(255);
    lazy protocol witness table accessor for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier(&lazy protocol witness table cache variable for type _TaskModifier.InnerModifier and conformance _TaskModifier.InnerModifier, (void (*)(uint64_t))type metadata accessor for _TaskModifier.InnerModifier);
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<_TaskModifier.InnerModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>)
  {
    type metadata accessor for _ViewModifier_Content<_TaskModifier.InnerModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<_TaskModifier.InnerModifier>, _AppearanceActionModifier>);
    }
  }
}

uint64_t partial apply for closure #1 in _TaskValueModifier.InnerModifier.body(content:)(uint64_t (*a1)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  uint64_t v4 = *(void *)(type metadata accessor for _TaskValueModifier.InnerModifier() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return a1(v5, v2, v3);
}

uint64_t _TaskValueModifier.InnerModifier.init(base:taskState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _TaskValueModifier();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  type metadata accessor for _TaskValueModifier.InnerModifier();
  return property wrapper backing initializer of _TaskValueModifier.InnerModifier.taskState(a2);
}

uint64_t _TaskValueModifier.Child.value.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  uint64_t v3 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v10 - v4;
  uint64_t v6 = type metadata accessor for _TaskValueModifier();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)&v10 - v7;
  _TaskValueModifier.Child.modifier.getter((uint64_t)&v10 - v7);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v5, 1, 1, v2);
  return _TaskValueModifier.InnerModifier.init(base:taskState:)((uint64_t)v8, (uint64_t)v5, a1);
}

void *initializeWithCopy for _TaskValueModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = type metadata accessor for TaskPriority();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  uint64_t v10 = v8 + 16;
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = ((unint64_t)a1 + v11 + 16) & ~v11;
  uint64_t v13 = ((unint64_t)a2 + v11 + 16) & ~v11;
  swift_retain();
  v9(v12, v13, v7);
  uint64_t v14 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v14 + 16))((*(void *)(v10 + 48) + *(unsigned __int8 *)(v14 + 80) + v12) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80), (*(void *)(v10 + 48) + *(unsigned __int8 *)(v14 + 80) + v13) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
  return a1;
}

uint64_t closure #1 in _TaskValueModifier.InnerModifier.body(content:)(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v41 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v38 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v32 - v16;
  uint64_t v37 = type metadata accessor for _TaskValueModifier.InnerModifier();
  _TaskValueModifier.InnerModifier.taskState.getter();
  uint64_t v18 = *(void *)(v10 - 8);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  uint64_t v39 = v10;
  LODWORD(v10) = v19(v17, 1, v10);
  uint64_t v20 = *(uint64_t (**)(uint64_t *, uint64_t))(v12 + 8);
  uint64_t v40 = v11;
  uint64_t v36 = v20;
  uint64_t result = v20((uint64_t *)v17, v11);
  if (v10 == 1)
  {
    uint64_t v22 = *((void *)a1 + 1);
    uint64_t v32 = *(void *)a1;
    uint64_t v34 = type metadata accessor for _TaskValueModifier();
    uint64_t v35 = a3;
    uint64_t v23 = &a1[*(int *)(v34 + 36)];
    uint64_t v24 = type metadata accessor for TaskPriority();
    uint64_t v33 = a1;
    uint64_t v25 = v24;
    uint64_t v26 = *(void *)(v24 - 8);
    uint64_t v27 = (uint64_t)v38;
    (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v38, v23, v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v27, 0, 1, v25);
    uint64_t v28 = (void *)swift_allocObject();
    v28[2] = 0;
    v28[3] = 0;
    v28[4] = v32;
    void v28[5] = v22;
    swift_retain();
    uint64_t v29 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(v27, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in _TaskValueModifier.InnerModifier.body(content:), (uint64_t)v28);
    outlined destroy of _TaskModifier(v27, (uint64_t (*)(void))type metadata accessor for TaskPriority?);
    uint64_t v30 = v41;
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v41, &v33[*(int *)(v34 + 40)], a2);
    *uint64_t v14 = v29;
    uint64_t v31 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))((char *)v14 + *(int *)(v31 + 36), v30, a2);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v18 + 56))(v14, 0, 1, v39);
    specialized _TaskValueModifier.InnerModifier.taskState.setter((uint64_t)v14, v37);
    return v36(v14, v40);
  }
  return result;
}

void storeEnumTagSinglePayload for _TaskValueModifier.InnerModifier.TaskState(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 8) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 >= a2)
  {
    switch(v13)
    {
      case 1:
        a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 2:
        *(_WORD *)&a1[v10] = 0;
        if (a2) {
          goto LABEL_24;
        }
        break;
      case 3:
LABEL_42:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v10] = 0;
        goto LABEL_23;
      default:
LABEL_23:
        if (a2)
        {
LABEL_24:
          if ((v7 & 0x80000000) != 0)
          {
            unint64_t v19 = (unint64_t)&a1[v9 + 8] & ~v9;
            uint64_t v20 = *(void (**)(unint64_t))(v6 + 56);
            v20(v19);
          }
          else
          {
            if ((a2 & 0x80000000) != 0) {
              uint64_t v18 = a2 ^ 0x80000000;
            }
            else {
              uint64_t v18 = a2 - 1;
            }
            *(void *)a1 = v18;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        break;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        break;
      case 3:
        goto LABEL_42;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        break;
      default:
        return;
    }
  }
}

uint64_t type metadata accessor for _TaskValueModifier.InnerModifier.TaskState()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t closure #1 in _TaskModifier.InnerModifier.body(content:)(uint64_t *a1)
{
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v2 - 8);
  uint64_t v4 = (char *)&v16 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = (char *)a1 + *(int *)(type metadata accessor for _TaskModifier.InnerModifier(0) + 20);
  long long v16 = *(_OWORD *)v5;
  type metadata accessor for _GraphValue<_TaskModifier>(0, &lazy cache variable for type metadata for State<Task<(), Never>?>, (uint64_t (*)(uint64_t))type metadata accessor for Task<(), Never>?, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v6 = v17;
  uint64_t result = swift_release();
  if (!v6)
  {
    uint64_t v9 = *a1;
    uint64_t v8 = a1[1];
    size_t v10 = (char *)a1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
    uint64_t v11 = type metadata accessor for TaskPriority();
    uint64_t v12 = *(void *)(v11 - 8);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v4, v10, v11);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v4, 0, 1, v11);
    int v13 = (void *)swift_allocObject();
    v13[2] = 0;
    v13[3] = 0;
    void v13[4] = v9;
    v13[5] = v8;
    swift_retain();
    uint64_t v14 = _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5((uint64_t)v4, (uint64_t)&async function pointer to partial apply for closure #1 in closure #1 in _TaskModifier.InnerModifier.body(content:), (uint64_t)v13);
    outlined destroy of _TaskModifier((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for TaskPriority?);
    uint64_t v15 = *((void *)v5 + 1);
    *(void *)&long long v16 = v14;
    if (v15)
    {
      swift_retain();
      swift_retain();
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

uint64_t View.task(priority:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for _TaskModifier(0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (uint64_t *)((char *)&v17 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v14 = (char *)v12 + *(int *)(v13 + 20);
  uint64_t v15 = type metadata accessor for TaskPriority();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16))(v14, a1, v15);
  *uint64_t v12 = a2;
  v12[1] = a3;
  swift_retain();
  MEMORY[0x18C113660](v12, a4, v10, a5);
  return outlined destroy of _TaskModifier((uint64_t)v12, type metadata accessor for _TaskModifier);
}

uint64_t outlined destroy of _TaskModifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t destroy for _TaskModifier(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for TaskPriority();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8);

  return v6(v4, v5);
}

uint64_t objectdestroy_26Tm()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_27Tm()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for _TaskValueModifier.InnerModifier() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  swift_release();
  uint64_t v4 = type metadata accessor for _TaskValueModifier();
  uint64_t v5 = v3 + *(int *)(v4 + 36);
  uint64_t v6 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  uint64_t v7 = v3 + *(int *)(v4 + 40);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8);
  v8(v7, v1);
  uint64_t v9 = v3 + v2[11];
  uint64_t v10 = type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48))(v9, 1, v10))
  {
    swift_release();
    v8(v9 + *(int *)(v10 + 36), v1);
  }
  type metadata accessor for Optional();
  type metadata accessor for State();
  swift_release();

  return swift_deallocObject();
}

uint64_t objectdestroy_27Tm_0(void (*a1)(void))
{
  swift_unknownObjectRelease();
  a1(*(void *)(v1 + 40));
  swift_release();

  return swift_deallocObject();
}

uint64_t getEnumTagSinglePayload for _TaskValueModifier.InnerModifier.TaskState(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      uint64_t v15 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v15) = -1;
      }
      return (v15 + 1);
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t type metadata accessor for _TaskValueModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _TaskValueModifier.InnerModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t specialized _TaskValueModifier.InnerModifier.taskState.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2 + *(int *)(a2 + 36);
  type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  type metadata accessor for Optional();
  uint64_t result = type metadata accessor for State();
  if (*(void *)(v3 + *(int *)(result + 28))) {
    return dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return result;
}

uint64_t _TaskValueModifier.InnerModifier.taskState.getter()
{
  return State.wrappedValue.getter();
}

uint64_t _TaskValueModifier.Child.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TaskValueModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t property wrapper backing initializer of _TaskValueModifier.InnerModifier.taskState(uint64_t a1)
{
  type metadata accessor for _TaskValueModifier.InnerModifier.TaskState();
  uint64_t v2 = type metadata accessor for Optional();
  uint64_t v3 = *(void *)(v2 - 8);
  double v4 = MEMORY[0x1F4188790](v2);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))((char *)&v7 - v5, a1, v2, v4);
  State.init(wrappedValue:)();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(a1, v2);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance _TaskModifier.InnerModifier@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (**a3)()@<X8>)
{
  uint64_t v5 = *(void *)(a2 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  char v10 = (char *)&v15 - v9;
  outlined init with copy of _TaskModifier.InnerModifier(v3, (uint64_t)&v15 - v9, type metadata accessor for _TaskModifier.InnerModifier);
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  outlined init with take of _TaskModifier.InnerModifier((uint64_t)v10, v12 + v11);
  outlined init with copy of _TaskModifier.InnerModifier(v3, (uint64_t)v7, type metadata accessor for _TaskModifier.InnerModifier);
  uint64_t v13 = swift_allocObject();
  uint64_t result = outlined init with take of _TaskModifier.InnerModifier((uint64_t)v7, v13 + v11);
  *a3 = partial apply for closure #1 in _TaskModifier.InnerModifier.body(content:);
  a3[1] = (uint64_t (*)())v12;
  a3[2] = partial apply for closure #2 in _TaskModifier.InnerModifier.body(content:);
  a3[3] = (uint64_t (*)())v13;
  return result;
}

uint64_t outlined init with take of _TaskModifier.InnerModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for _TaskModifier.InnerModifier(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of AccessibilityNodeAttachment?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _sScTss5NeverORs_rlE8detached8priority9operationScTyxABGScPSg_xyYaYAcntFZyt_Tgm5(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TaskPriority?(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (char *)v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of _TaskModifier.InnerModifier(a1, (uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TaskPriority?);
  uint64_t v9 = type metadata accessor for TaskPriority();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    outlined destroy of _TaskModifier((uint64_t)v8, (uint64_t (*)(void))type metadata accessor for TaskPriority?);
    if (*(void *)(a3 + 16))
    {
LABEL_3:
      swift_getObjectType();
      swift_unknownObjectRetain();
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter();
      uint64_t v13 = v12;
      swift_unknownObjectRelease();
      goto LABEL_6;
    }
  }
  else
  {
    TaskPriority.rawValue.getter();
    (*(void (**)(char *, uint64_t))(v10 + 8))(v8, v9);
    if (*(void *)(a3 + 16)) {
      goto LABEL_3;
    }
  }
  uint64_t v11 = 0;
  uint64_t v13 = 0;
LABEL_6:
  uint64_t v14 = swift_allocObject();
  *(void *)(v14 + 16) = a2;
  *(void *)(v14 + 24) = a3;
  if (v13 | v11)
  {
    v16[0] = 0;
    v16[1] = 0;
    v16[2] = v11;
    v16[3] = v13;
  }
  return swift_task_create();
}

uint64_t outlined init with copy of _TaskModifier.InnerModifier(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for _TaskModifier.InnerModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _TaskModifier.InnerModifier);
}

void type metadata accessor for _GraphValue<_TaskModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for TaskPriority?(uint64_t a1)
{
}

uint64_t destroy for _TaskModifier.InnerModifier(uint64_t a1)
{
  swift_release();
  uint64_t v2 = a1 + *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  uint64_t v3 = type metadata accessor for TaskPriority();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);
  swift_release();

  return swift_release();
}

void *initializeWithCopy for _TaskModifier.InnerModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  uint64_t v7 = *(int *)(type metadata accessor for _TaskModifier(0) + 20);
  unint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for TaskPriority();
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16);
  swift_retain();
  v11(v8, v9, v10);
  uint64_t v12 = *(int *)(a3 + 20);
  uint64_t v13 = (void *)((char *)a1 + v12);
  uint64_t v14 = (void *)((char *)a2 + v12);
  uint64_t v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for _TaskModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for _TaskModifier);
}

uint64_t outlined init with copy of AccessibilityNodeAttachment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI27AccessibilityNodeAttachmentVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for _TaskModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for TaskPriority();
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16);
  swift_retain();
  v9(v6, v7, v8);
  return a1;
}

uint64_t destroy for PositionedNavigationDestinationProcessor(uint64_t result)
{
  if (*(void *)(result + 8) != 1)
  {
    swift_weakDestroy();
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for Task<(), Never>?(uint64_t a1)
{
}

void type metadata accessor for Task<(), Never>()
{
  if (!lazy cache variable for type metadata for Task<(), Never>)
  {
    unint64_t v0 = type metadata accessor for Task();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Task<(), Never>);
    }
  }
}

uint64_t type metadata completion function for UIHostingController()
{
  return swift_initClassMetadata2();
}

uint64_t base witness table accessor for _AttributeBody in Observer<A>()
{
  return swift_getWitnessTable();
}

unint64_t protocol witness for static UserDefaultKeyedFeature.key.getter in conformance EnableUnifiedLayoutFeature()
{
  return 0xD000000000000025;
}

uint64_t base witness table accessor for _AttributeBody in DragPreviewResponderFilter<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LazySubviewPlacements<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in DividerStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in DividerStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in ToggleStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in ToggleStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in CustomProgressView<A, B>.Child()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in LeafDisplayList<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in BarEdgeReader<A>.MakeView()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ShadowChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static EnvironmentKey._valuesEqual(_:_:) in conformance SceneIDKey(uint64_t a1, uint64_t a2)
{
  return specialized static EnvironmentKey<>._valuesEqual(_:_:)(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16), *(void *)a2, *(void *)(a2 + 8), *(unsigned char *)(a2 + 16));
}

ValueMetadata *type metadata accessor for OnPlatformContainerSelectionModifier()
{
  return &type metadata for OnPlatformContainerSelectionModifier;
}

ValueMetadata *type metadata accessor for _NavigationStackStyleConfiguration.Root()
{
  return &type metadata for _NavigationStackStyleConfiguration.Root;
}

ValueMetadata *type metadata accessor for LeadingTrailingLabeledContentStyle()
{
  return &type metadata for LeadingTrailingLabeledContentStyle;
}

uint64_t ToolbarSafeAreaTransitionState.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

ValueMetadata *type metadata accessor for AccessibilityScrollableContext()
{
  return &type metadata for AccessibilityScrollableContext;
}

ValueMetadata *type metadata accessor for OutsetByRowInsetsIfNecessary()
{
  return &type metadata for OutsetByRowInsetsIfNecessary;
}

ValueMetadata *type metadata accessor for AnyNavigationSplitVisibility.Kind()
{
  return &type metadata for AnyNavigationSplitVisibility.Kind;
}

ValueMetadata *type metadata accessor for TabPopoverPresentationsKey()
{
  return &type metadata for TabPopoverPresentationsKey;
}

ValueMetadata *type metadata accessor for IsInSecureDrawingHierarchy()
{
  return &type metadata for IsInSecureDrawingHierarchy;
}

ValueMetadata *type metadata accessor for CollectionViewCellModifier()
{
  return &type metadata for CollectionViewCellModifier;
}

ValueMetadata *type metadata accessor for AccessibilityFrameModifier()
{
  return &type metadata for AccessibilityFrameModifier;
}

ValueMetadata *type metadata accessor for SectionStyleConfiguration.Actions()
{
  return &type metadata for SectionStyleConfiguration.Actions;
}

ValueMetadata *type metadata accessor for RemoteSheetContainerVCKey.Storage()
{
  return &type metadata for RemoteSheetContainerVCKey.Storage;
}

void *type metadata accessor for ResolvedToggleStyleBody()
{
  return &unk_1ED43FDD0;
}

ValueMetadata *type metadata accessor for ListRowInsetsTraitKey()
{
  return &type metadata for ListRowInsetsTraitKey;
}

ValueMetadata *type metadata accessor for ScrollPagingBehavior()
{
  return &type metadata for ScrollPagingBehavior;
}

ValueMetadata *type metadata accessor for ResolvedBorderShape()
{
  return &type metadata for ResolvedBorderShape;
}

void *type metadata accessor for CornerConfiguration()
{
  return &unk_1ED42B4B8;
}

ValueMetadata *type metadata accessor for StackDepthModifier()
{
  return &type metadata for StackDepthModifier;
}

ValueMetadata *type metadata accessor for PlainSectionStyle()
{
  return &type metadata for PlainSectionStyle;
}

ValueMetadata *type metadata accessor for TabBarPlacement()
{
  return &type metadata for TabBarPlacement;
}

ValueMetadata *type metadata accessor for PagingBehavior()
{
  return &type metadata for PagingBehavior;
}

double protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AlertModifier<A, B>@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t *a4@<X4>, double *a5@<X8>)
{
  return static AlertModifier._makeView(modifier:inputs:body:)(a1, a2, a3, a4[2], a4[3], a4[4], a4[5], a5);
}

uint64_t partial apply for implicit closure #1 in static AlertModifier._makeView(modifier:inputs:body:)()
{
  return implicit closure #1 in static AlertModifier._makeView(modifier:inputs:body:)(*(long long **)(v0 + 48), *(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t partial apply for closure #1 in PickerOption._identifiedView.getter()
{
  return closure #1 in PickerOption._identifiedView.getter(v0[6], v0[2], v0[3]);
}

void @objc UIHostingController.__ivar_destroyer(uint64_t a1)
{
  outlined destroy of HostingControllerOverrides(a1 + direct field offset for UIHostingController.overrides);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v2 = *(void **)(a1 + direct field offset for UIHostingController.keyboardShortcutBridge);
}

id @objc _UIHostingView.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return _UIHostingView.__deallocating_deinit();
}

id _UIHostingView.__deallocating_deinit()
{
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68);
  uint64_t v2 = *(void *)((char *)v0 + v1);
  uint64_t v3 = (objc_class *)type metadata accessor for _UIHostingView();
  swift_retain();
  uint64_t v4 = v0;
  swift_getWitnessTable();
  specialized UIHostingViewBase.tearDown(uiView:host:)(v4, (uint64_t)v4, v2);
  swift_release();

  id v5 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v5, sel_removeObserver_, v4);

  uint64_t v6 = *(void *)((char *)v0 + v1);
  _s10Foundation4DataVSgMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for ()?, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBB718]);
  swift_retain();
  uint64_t v7 = static Update.locked<A>(_:)();
  if (*(void *)(v6 + 176))
  {
    MEMORY[0x1F4188790](v7);
    id v9 = v8;
    static Update.locked<A>(_:)();

    uint64_t v10 = *(void **)(v6 + 176);
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(v6 + 176) = 0;
  swift_release();

  uint64_t v11 = *(void *)((char *)v0 + v1);
  uint64_t v12 = self;
  swift_retain();
  if (objc_msgSend(v12, sel_isMainThread))
  {
    uint64_t v13 = *(void **)(v11 + 208);
    if (v13)
    {
      objc_msgSend(v13, sel_invalidate);
      uint64_t v14 = *(void **)(v11 + 208);
    }
    else
    {
      uint64_t v14 = 0;
    }
    *(void *)(v11 + 208) = 0;

    *(void *)(v11 + 192) = 0;
    *(unsigned char *)(v11 + 200) = 1;
  }
  swift_release();
  if (one-time initialization token for shared != -1) {
    swift_once();
  }
  HostingViewRegistry.remove<A>(_:)((uint64_t)v4);
  v16.receiver = v4;
  v16.super_class = v3;
  return objc_msgSendSuper2(&v16, sel_dealloc);
}

uint64_t HostingViewRegistry.remove<A>(_:)(uint64_t a1)
{
  swift_beginAccess();
  specialized Dictionary.removeValue(forKey:)(a1, (uint64_t)v3);
  outlined destroy of WeakBox<Swift.AnyObject>?((uint64_t)v3, (uint64_t (*)(void))type metadata accessor for WeakBox<Swift.AnyObject>?);
  return swift_endAccess();
}

unint64_t specialized Dictionary.removeValue(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  unint64_t result = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  char v7 = v6;
  if (v6)
  {
    unint64_t v8 = result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *v2;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v10 = v11;
    }
    outlined init with take of WeakBox<Swift.AnyObject>(*(void *)(v10 + 56) + 8 * v8, a2);
    specialized _NativeDictionary._delete(at:)(v8, v10);
    *uint64_t v3 = v10;
    unint64_t result = swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)a2 = 0;
  }
  *(unsigned char *)(a2 + 8) = (v7 & 1) == 0;
  return result;
}

uint64_t outlined destroy of WeakBox<Swift.AnyObject>?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for WeakBox<Swift.AnyObject>?()
{
  if (!lazy cache variable for type metadata for WeakBox<Swift.AnyObject>?)
  {
    _sypSgMaTm_2(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4F41720]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<Swift.AnyObject>?);
    }
  }
}

uint64_t specialized UIHostingViewBase.tearDown(uiView:host:)(UIView_optional *a1, uint64_t a2, uint64_t a3)
{
  id v5 = objc_msgSend(self, sel_defaultCenter);
  objc_msgSend(v5, sel_removeObserver_, a3);

  UIHostingViewBase.updateRemovedState(uiView:)(a1);
  ViewRendererHost.invalidate()();
  return static Update.ensure<A>(_:)();
}

uint64_t thunk for @escaping @callee_guaranteed @Sendable (@in_guaranteed Notification) -> ()(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Notification();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  id v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v6 = *(void (**)(char *))(a1 + 32);
  static Notification._unconditionallyBridgeFromObjectiveC(_:)();
  swift_retain();
  v6(v5);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

void UIHostingViewBase.sceneActivationStateDidChange(with:)(char a1)
{
  uint64_t v3 = (void *)MEMORY[0x18C119DF0](v1 + 256);
  uint64_t v4 = v3;
  if (v3)
  {
    id v5 = objc_msgSend(v3, sel_activationState);
  }
  else
  {
    id v5 = 0;
  }
  *(void *)(v1 + 232) = v5;
  *(unsigned char *)(v1 + 240) = v4 == 0;
  if (a1 == 3)
  {
    *(unsigned char *)(v1 + 221) = 1;
    swift_retain();
    onNextMainRunLoop(do:)();
    swift_release();
    *(unsigned char *)(v1 + 222) = 0;
  }
  else
  {
    *(unsigned char *)(v1 + 222) = a1 == 0;
    if (!a1) {
      return;
    }
  }

  UIHostingViewBase.requestUpdateForFidelity()();
}

void @objc _UIHostingView.didMoveToWindow()(void *a1)
{
  id v1 = a1;
  _UIHostingView.didMoveToWindow()();
}

Swift::Void __swiftcall _UIHostingView.didMoveToWindow()()
{
  id v1 = v0;
  uint64_t v2 = (uint64_t *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v0;
  MEMORY[0x18C113CA0]();
  uint64_t v4 = _UIHostingView.base.getter();
  id v5 = (UIWindow_optional *)MEMORY[0x18C119DF0](v4 + 31);
  swift_release();
  _UIHostingView.updateKeyboardAvoidance(oldWindow:)(v5);

  swift_retain();
  id v6 = objc_msgSend(v0, sel_window);
  UIKitEventBindingBridge.hostingView<A>(_:didMoveToWindow:)((uint64_t)v0, (uint64_t)v6);
  swift_release();

  uint64_t v7 = *v0;
  uint64_t v8 = *v2;
  if (!*(void *)((char *)v1 + *(void *)((*v2 & *v1) + 0x1A0)))
  {
    unsigned __int8 v9 = _UIHostingView.isWindowRoot.getter();
    uint64_t v7 = *v0;
    uint64_t v8 = *v2;
    if (v9)
    {
      uint64_t v10 = v8 & v7;
      uint64_t v11 = *(void *)((char *)v0 + *(void *)(v10 + 416));
      if (!v11)
      {
        type metadata accessor for RootViewDelegate();
        uint64_t v11 = swift_allocObject();
        *(_DWORD *)(v11 + 16) = -1;
        *(void *)(v11 + 32) = 0;
        swift_unknownObjectWeakInit();
        uint64_t v10 = *v2 & *v0;
      }
      *(void *)((char *)v0 + *(void *)(v10 + 416)) = v11;
      swift_retain();
      swift_release();
      uint64_t v12 = (char *)v0 + *(void *)((*v2 & *v0) + 0x198);
      if (MEMORY[0x18C119DF0](v12))
      {
        uint64_t v13 = *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0x1A0));
        if (v13)
        {
          *(void *)(v13 + 32) = *((void *)v12 + 1);
          swift_unknownObjectWeakAssign();
        }
        swift_unknownObjectRelease();
      }
      uint64_t v14 = &protocol witness table for RootViewDelegate;
      if (!*(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0x1A0))) {
        uint64_t v14 = 0;
      }
      *(void *)((char *)v0 + *(void *)((*v2 & *v0) + 0x198) + 8) = v14;
      swift_unknownObjectWeakAssign();
      uint64_t v7 = *v0;
      uint64_t v8 = *v2;
    }
  }
  uint64_t v15 = (char *)v0 + *(void *)((v8 & v7) + 0x198);
  if (MEMORY[0x18C119DF0](v15))
  {
    uint64_t v16 = *((void *)v15 + 1);
    uint64_t ObjectType = swift_getObjectType();
    id v18 = objc_msgSend(v0, sel_window);
    (*(void (**)(void *, id, void, void, uint64_t, uint64_t))(v16 + 8))(v0, v18, *(void *)(v3 + 80), *(void *)(v3 + 88), ObjectType, v16);

    swift_unknownObjectRelease();
  }
  id v19 = objc_msgSend(v0, sel_window);

  if (!v19)
  {
    id v20 = *(id *)((char *)v1 + *(void *)((*v2 & *v1) + 0x168));
    ContextMenuBridge.hostRemovedFromWindow()();

    id v21 = *(id *)((char *)v1 + *(void *)((*v2 & *v1) + 0x118));
    EditMenuBridge.hostRemovedFromWindow()();
  }
  id v22 = objc_msgSend(v1, sel_window);

  if (v22) {
    _UIHostingView.updateEventBridge()();
  }
  swift_retain();
  uint64_t v23 = (void *)FocusBridge.host.getter();
  swift_release();
  if (v23) {

  }
  uint64_t v24 = MEMORY[0x18C119DF0]((char *)v1 + *(void *)((*v2 & *v1) + 0xC0));
  if (v24)
  {
    uint64_t v25 = (void *)v24;
    UIHostingController._viewDidMoveToWindow()();
  }
  id v26 = _UIHostingView.sheetBridge.getter();
  if (v26)
  {
    uint64_t v27 = v26;
    SheetBridge.didMoveToWindow()();
  }
  _UIHostingView.base.getter();
  UIHostingViewBase.didMoveToWindow()();
  swift_release();

  static Update.end()();
}

Swift::Void __swiftcall SheetBridge.didMoveToWindow()()
{
  id v1 = (void *)MEMORY[0x18C119DF0](v0 + direct field offset for SheetBridge.host);
  if (v1)
  {
    uint64_t v2 = v1;
    id v3 = objc_msgSend(v1, sel_window);

    if (v3) {
    *(unsigned char *)(v0 + direct field offset for SheetBridge.hasWindow) = v3 != 0;
    }
  }
  else
  {
    __break(1u);
  }
}

Swift::Void __swiftcall UIHostingViewBase.didMoveToWindow()()
{
  uint64_t v1 = v0;
  id v9 = (id)MEMORY[0x18C119DF0](v0 + 16);
  if (v9)
  {
    if (MEMORY[0x18C119DF0](v0 + 24))
    {
      id v2 = objc_msgSend(v9, sel_window);
      if (v2)
      {
        id v3 = *(void **)(v0 + 168);
        *(void *)(v0 + 168) = 0;
        UIHostingViewBase.traitCollectionOverride.didset((uint64_t)v3);

        uint64_t v4 = *(void *)(v0 + 120);
        *(_OWORD *)(v0 + 120) = xmmword_18834FC50;
        outlined consume of EnvironmentValues?(v4);
        swift_getObjectType();
        LOWORD(aBlock[0]) = 4;
        ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      }
      if ((*(unsigned char *)(v0 + 218) & 1) == 0)
      {
        static Semantics.v6.getter();
        if (isLinkedOnOrAfter(_:)())
        {
          *(unsigned char *)(v0 + 218) = 1;
          uint64_t v5 = swift_allocObject();
          swift_weakInit();
          swift_retain();
          specialized static UIKitUpdateCycle.addPreCommitObserver(_:)((uint64_t)partial apply for closure #1 in UIHostingViewBase.didMoveToWindow(), v5);
          swift_release_n();
        }
      }
      if (v2)
      {
        UIHostingViewBase.updateRemovedState(uiView:)(0);
      }
      else
      {
        id v6 = objc_msgSend(self, sel_sharedApplication);
        uint64_t v7 = swift_allocObject();
        swift_weakInit();
        aBlock[4] = partial apply for closure #2 in UIHostingViewBase.didMoveToWindow();
        aBlock[5] = v7;
        aBlock[0] = MEMORY[0x1E4F143A8];
        aBlock[1] = 1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_21_0;
        uint64_t v8 = _Block_copy(aBlock);
        swift_release();
        objc_msgSend(v6, sel__performBlockAfterCATransactionCommits_, v8);
        _Block_release(v8);
      }
      UIHostingViewBase.updateSceneNotifications()();
      UIHostingViewBase.updateWindowNotifications()();
      UIHostingViewBase.requestUpdateForFidelity()();
      if (!v2) {
        *(unsigned char *)(v1 + 224) = 0;
      }
      swift_getObjectType();
      LOWORD(aBlock[0]) = 2;
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      swift_unknownObjectRelease();
    }
    else
    {
    }
  }
}

Swift::Void __swiftcall UIHostingViewBase.updateRemovedState(uiView:)(UIView_optional *uiView)
{
  if (uiView)
  {
    id v3 = uiView;
  }
  else
  {
    uint64_t v4 = MEMORY[0x18C119DF0](v1 + 16);
    if (!v4) {
      return;
    }
    id v3 = (UIView_optional *)v4;
  }
  uint64_t v5 = uiView;

  if (*(unsigned char *)(v1 + 220) == 1)
  {
    type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
    uint64_t v7 = static Update.locked<A>(_:)();
    uint64_t v8 = *(void **)(v1 + 176);
    if (v8)
    {
      MEMORY[0x1F4188790](v7);
      id v10 = v9;
      static Update.locked<A>(_:)();

      uint64_t v8 = *(void **)(v1 + 176);
    }
    *(void *)(v1 + 176) = 0;
  }
  MEMORY[0x1F4188790](v6);
  static Update.ensure<A>(_:)();
}

Swift::Void __swiftcall UIHostingViewBase.requestUpdateForFidelity()()
{
  uint64_t v1 = MEMORY[0x18C119DF0](v0 + 16);
  if (v1)
  {
    id v10 = (void *)v1;
    if (UIHostingViewBase.updatesWillBeVisible.getter())
    {
      objc_msgSend(v10, sel_setNeedsLayout);
      UIHostingViewBase.requestUpdate(after:)(0.0);
    }
    else
    {
      type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for ()?);
      uint64_t v2 = static Update.locked<A>(_:)();
      id v3 = *(void **)(v0 + 176);
      if (v3)
      {
        MEMORY[0x1F4188790](v2);
        id v5 = v4;
        static Update.locked<A>(_:)();

        id v3 = *(void **)(v0 + 176);
      }
      *(void *)(v0 + 176) = 0;

      if (objc_msgSend(self, sel_isMainThread))
      {
        uint64_t v6 = *(void **)(v0 + 208);
        if (v6)
        {
          objc_msgSend(v6, sel_invalidate);
          uint64_t v7 = *(void **)(v0 + 208);
        }
        else
        {
          uint64_t v7 = 0;
        }
        *(void *)(v0 + 208) = 0;

        *(void *)(v0 + 192) = 0;
        *(unsigned char *)(v0 + 200) = 1;
      }
      id v8 = objc_msgSend(v10, sel_layer);
      unsigned int v9 = objc_msgSend(v8, sel_needsLayout);

      if (v9) {
        UIHostingViewBase.requestImmediateUpdate()();
      }
    }
  }
}

void UIKitEventBindingBridge.hostingView<A>(_:didMoveToWindow:)(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    swift_beginAccess();
    swift_weakLoadStrong();
    uint64_t v3 = type metadata accessor for EventBindingSource(0, (unint64_t *)&lazy cache variable for type metadata for FallbackResponderProvider);
    _UIHostingView.as<A>(_:)(v3, v3, (char *)v14);
    uint64_t v4 = v14[1];
    id v5 = (objc_class *)type metadata accessor for UIKitKeyPressResponder();
    uint64_t v6 = (char *)objc_allocWithZone(v5);
    swift_weakInit();
    uint64_t v7 = &v6[OBJC_IVAR____TtC7SwiftUI22UIKitKeyPressResponder_fallbackResponderProvider];
    *(void *)&v6[OBJC_IVAR____TtC7SwiftUI22UIKitKeyPressResponder_fallbackResponderProvider + 8] = 0;
    swift_unknownObjectWeakInit();
    uint64_t v8 = OBJC_IVAR____TtC7SwiftUI22UIKitKeyPressResponder_tracker;
    unsigned int v9 = v6;
    *(void *)&v6[v8] = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    swift_weakAssign();
    *((void *)v7 + 1) = v4;
    swift_unknownObjectWeakAssign();

    v13.receiver = v9;
    v13.super_class = v5;
    id v10 = objc_msgSendSuper2(&v13, sel_init);
    swift_release();
    swift_unknownObjectRelease();
    uint64_t v11 = *(void **)(v2 + 64);
    *(void *)(v2 + 64) = v10;
  }
  else
  {
    uint64_t v12 = *(void **)(v2 + 64);
    *(void *)(v2 + 64) = 0;
  }
}

void UIHostingViewBase.updateWindowNotifications()()
{
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 16);
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  id v16 = objc_msgSend(v1, sel_window);
  id v3 = (id)MEMORY[0x18C119DF0](v0 + 248);
  if (!v16)
  {
    if (!v3)
    {
      uint64_t v15 = v2;
      goto LABEL_15;
    }

    goto LABEL_9;
  }
  if (!v3 || (v3, v16 != v3))
  {
LABEL_9:
    id v4 = objc_msgSend(self, sel_defaultCenter);
    uint64_t v5 = MEMORY[0x18C119DF0](v0 + 248);
    if (v5)
    {
      uint64_t v6 = (void *)v5;
      uint64_t v7 = (void *)MEMORY[0x18C115780](0xD00000000000001ELL, 0x80000001883370D0);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, v7, v6);

      uint64_t v8 = (void *)MEMORY[0x18C115780](0xD00000000000001DLL, 0x80000001883370F0);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, v8, v6);

      unsigned int v9 = (void *)MEMORY[0x18C115780](0xD000000000000023, 0x8000000188337110);
      objc_msgSend(v4, sel_removeObserver_name_object_, v0, v9, v6);
    }
    if (v16)
    {
      id v10 = v16;
      uint64_t v11 = (void *)MEMORY[0x18C115780](0xD00000000000001ELL, 0x80000001883370D0);
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_windowWillRotateWithNotification_, v11, v10);

      uint64_t v12 = (void *)MEMORY[0x18C115780](0xD00000000000001DLL, 0x80000001883370F0);
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_windowDidRotateWithNotification_, v12, v10);

      objc_super v13 = (void *)MEMORY[0x18C115780](0xD000000000000023, 0x8000000188337110);
      id v14 = v10;
      objc_msgSend(v4, sel_addObserver_selector_name_object_, v0, sel_windowDidMoveToSceneWithNotification_, v13, v14);
    }
    swift_unknownObjectWeakAssign();
    goto LABEL_14;
  }

LABEL_14:
  uint64_t v15 = v16;
LABEL_15:
}

void UIHostingViewBase.updateSceneNotifications()()
{
  uint64_t v1 = (void *)MEMORY[0x18C119DF0](v0 + 16);
  if (!v1) {
    return;
  }
  uint64_t v2 = v1;
  id v3 = objc_msgSend(v1, sel_window);
  id v20 = objc_msgSend(v3, sel_windowScene);

  id v4 = (id)MEMORY[0x18C119DF0](v0 + 256);
  if (!v20)
  {
    if (!v4)
    {
      id v19 = v2;
      goto LABEL_18;
    }

    goto LABEL_9;
  }
  if (!v4 || (v4, v20 != v4))
  {
LABEL_9:
    id v5 = objc_msgSend(self, sel_defaultCenter);
    uint64_t v6 = MEMORY[0x18C119DF0](v0 + 256);
    uint64_t v7 = (uint64_t *)MEMORY[0x1E4FB2EA8];
    uint64_t v8 = (void *)MEMORY[0x1E4FB2E80];
    unsigned int v9 = (void *)MEMORY[0x1E4FB2E90];
    id v10 = (void *)MEMORY[0x1E4FB2EB0];
    if (v6)
    {
      uint64_t v11 = (void *)v6;
      uint64_t v12 = (uint64_t *)MEMORY[0x1E4FB2EA8];
      objc_msgSend(v5, sel_removeObserver_name_object_, v0, *MEMORY[0x1E4FB2EA8], v6);
      objc_msgSend(v5, sel_removeObserver_name_object_, v0, *v8, v11);
      objc_msgSend(v5, sel_removeObserver_name_object_, v0, *v9, v11);
      objc_msgSend(v5, sel_removeObserver_name_object_, v0, *v10, v11);
      objc_msgSend(v5, sel_removeObserver_name_object_, v0, *MEMORY[0x1E4FB3368], v11);

      uint64_t v7 = v12;
    }
    if (v20)
    {
      uint64_t v13 = *v7;
      id v14 = v20;
      objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_sceneWillDeactivate, v13, v14);
      objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_sceneDidActivate, *v8, v14);
      objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_sceneDidEnterBackground, *MEMORY[0x1E4FB2E90], v14);
      objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_sceneWillEnterForeground, *v10, v14);
      objc_msgSend(v5, sel_addObserver_selector_name_object_, v0, sel_sceneDidUpdateSystemUserInterfaceStyle, *MEMORY[0x1E4FB3368], v14);
    }
    uint64_t v15 = swift_unknownObjectWeakAssign();
    id v16 = (void *)MEMORY[0x18C119DF0](v15);
    uint64_t v17 = v16;
    if (v16)
    {
      id v18 = objc_msgSend(v16, sel_activationState);
    }
    else
    {
      id v18 = 0;
    }
    *(void *)(v0 + 232) = v18;
    *(unsigned char *)(v0 + 240) = v17 == 0;

    goto LABEL_17;
  }
  id v5 = v2;
LABEL_17:

  id v19 = v20;
LABEL_18:
}

Swift::Void __swiftcall _UIHostingView.updateKeyboardAvoidance(oldWindow:)(UIWindow_optional *oldWindow)
{
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    return;
  }
  if (!oldWindow)
  {
    uint64_t v6 = (UIWindow_optional *)objc_msgSend(v1, sel_window);
    if (!v6) {
      return;
    }
    uint64_t v7 = v6;
    _UIHostingView.setupKeyboardAvoidance(window:)((uint64_t)v6, (void (*)(void *, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))specialized static UIHostingKeyboardTrackingElement.startTracking(element:window:keyboardDelegate:));
    goto LABEL_9;
  }
  uint64_t v7 = oldWindow;
  id v3 = (UIWindow_optional *)objc_msgSend(v1, sel_window);
  if (!v3)
  {
    _UIHostingView.setupKeyboardAvoidance(window:)((uint64_t)v7, (void (*)(void *, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))specialized static UIHostingKeyboardTrackingElement.stopTracking(element:window:keyboardDelegate:));
LABEL_9:
    id v5 = v7;
    goto LABEL_10;
  }
  id v4 = v3;

  id v5 = v4;
LABEL_10:
}

void _UIHostingView.setupKeyboardAvoidance(window:)(uint64_t a1, void (*a2)(void *, uint64_t, id, uint64_t, uint64_t, _UNKNOWN **))
{
  id v4 = v2;
  lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement();
  if (static UserDefaultKeyedFeature.isEnabled.getter())
  {
    id v6 = objc_msgSend(v2, sel_keyboardSceneDelegate);
    if (v6)
    {
      id v9 = v6;
      uint64_t v7 = type metadata accessor for UIHostingKeyboardTrackingElement();
      uint64_t v8 = type metadata accessor for _UIHostingView();
      a2(v4, a1, v9, v7, v8, &protocol witness table for _UIHostingView<A>);
    }
  }
}

uint64_t type metadata accessor for UIHostingKeyboardTrackingElement()
{
  return self;
}

unint64_t lazy protocol witness table accessor for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement()
{
  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement;
  if (!lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnableKeyboardTrackingElement and conformance EnableKeyboardTrackingElement);
  }
  return result;
}

id _UIHostingView.isWindowRoot.getter()
{
  id result = objc_msgSend(v0, sel_window);
  if (result)
  {
    uint64_t v2 = result;
    id v3 = objc_msgSend(result, sel_rootViewController);

    if (v3 && (id v4 = objc_msgSend(v3, sel_viewIfLoaded), v3, v4))
    {

      return (id)(v4 == v0);
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t UIHostingViewBase.traitCollectionOverride.didset(uint64_t result)
{
  uint64_t v2 = *(void *)(v1 + 168);
  if (!result)
  {
    if (!v2) {
      return result;
    }
    goto LABEL_9;
  }
  if (v2) {
    BOOL v3 = result == v2;
  }
  else {
    BOOL v3 = 0;
  }
  if (!v3)
  {
LABEL_9:
    id result = MEMORY[0x18C119DF0](v1 + 24);
    if (result)
    {
      swift_getObjectType();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

void specialized static UIHostingKeyboardTrackingElement.startTracking(element:window:keyboardDelegate:)(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (one-time initialization token for windowMap != -1) {
    swift_once();
  }
  swift_beginAccess();
  id v9 = static UIHostingKeyboardTrackingElement.windowMap;
  if (*((void *)static UIHostingKeyboardTrackingElement.windowMap + 2)
    && (unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2), (v11 & 1) != 0))
  {
    uint64_t v12 = *(char **)(v9[7] + 8 * v10);
    swift_endAccess();
    v25[1] = a6;
    swift_unknownObjectWeakInit();
    uint64_t v13 = &v12[OBJC_IVAR____TtC7SwiftUI32UIHostingKeyboardTrackingElement_elements];
    swift_beginAccess();
    id v14 = *(void **)v13;
    uint64_t v15 = v12;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v13 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      id v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)uint64_t v13 = v14;
    }
    unint64_t v18 = v14[2];
    unint64_t v17 = v14[3];
    if (v18 >= v17 >> 1)
    {
      id v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v17 > 1), v18 + 1, 1, v14);
      *(void *)uint64_t v13 = v14;
    }
    void v14[2] = v18 + 1;
    outlined init with take of UIHostingKeyboardTrackingElement.Element((uint64_t)v25, (uint64_t)&v14[2 * v18 + 4]);
  }
  else
  {
    swift_endAccess();
    id v19 = (objc_class *)type metadata accessor for UIHostingKeyboardTrackingElement();
    id v20 = (char *)objc_allocWithZone(v19);
    type metadata accessor for Any?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UIHostingKeyboardTrackingElement.Element>, (uint64_t)&type metadata for UIHostingKeyboardTrackingElement.Element, MEMORY[0x1E4FBBE00]);
    uint64_t v21 = swift_allocObject();
    *(_OWORD *)(v21 + 16) = xmmword_18834BB80;
    *(void *)(v21 + 40) = a6;
    swift_unknownObjectWeakInit();
    *(void *)&v20[OBJC_IVAR____TtC7SwiftUI32UIHostingKeyboardTrackingElement_elements] = v21;
    v26.receiver = v20;
    v26.super_class = v19;
    id v22 = objc_msgSendSuper2(&v26, sel_init);
    swift_beginAccess();
    id v23 = v22;
    char v24 = swift_isUniquelyReferenced_nonNull_native();
    v25[0] = static UIHostingKeyboardTrackingElement.windowMap;
    static UIHostingKeyboardTrackingElement.windowMap = (_UNKNOWN *)0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v23, a2, v24);
    static UIHostingKeyboardTrackingElement.windowMap = (_UNKNOWN *)v25[0];
    swift_bridgeObjectRelease();
    swift_endAccess();
    objc_msgSend(a3, sel_addTrackingElement_, v23);
  }
}

uint64_t type metadata accessor for UIKitKeyPressResponder()
{
  return self;
}

uint64_t type metadata accessor for EventBindingSource(uint64_t a1, unint64_t *a2)
{
  uint64_t result = *a2;
  if (!*a2)
  {
    uint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, a2);
  }
  return result;
}

Swift::Void __swiftcall _UIHostingView.updateEventBridge()()
{
  uint64_t v1 = specialized _UIHostingView.eventBridge.getter();
  swift_retain();
  id v2 = objc_msgSend(v0, sel_traitCollection);
  id v3 = objc_msgSend(v2, sel_userInterfaceIdiom);

  if (v3 == (id)3 && (id v4 = *(void **)(v1 + 48)) != 0)
  {
    type metadata accessor for FocusItem?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v5 = swift_allocObject();
    *(_OWORD *)(v5 + 16) = xmmword_188351940;
    id v6 = v4;
    *(NSNumber *)(v5 + 32) = Int._bridgeToObjectiveC()();
    specialized Array._endMutation()();
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v6, sel_setAllowedTouchTypes_, isa);
    swift_release();
  }
  else
  {
    swift_release();
  }
}

uint64_t specialized _UIHostingView.eventBridge.getter()
{
  return *(void *)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0));
}

uint64_t outlined init with take of UIHostingKeyboardTrackingElement.Element(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  return a2;
}

Swift::Void __swiftcall UIHostingController._viewDidMoveToWindow()()
{
  uint64_t v1 = v0;
  id v2 = (void *)specialized UIHostingController.barAppearanceBridge.getter();
  if (v2)
  {
    id v3 = v2;
    BarAppearanceBridge.didMoveToWindow<A>(hostingController:)(v1);
  }
  id v4 = (void *)specialized UIHostingController.inspectorBridgeV5.getter();
  if (v4)
  {
    id v5 = v4;
    SheetBridge.didMoveToWindow()();
  }
}

uint64_t UIHostingContentView.hostingView<A>(_:didMoveTo:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *a1 & *MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x650);
  v16[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x640);
  v16[1] = v6;
  uint64_t v7 = type metadata accessor for UIHostingConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)v16 - v9;
  UIHostingContentView._configuration.getter((uint64_t)v16 - v9);
  uint64_t v11 = UIHostingConfiguration.delegate.getter(v7);
  uint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v13 + 8))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

Swift::Void __swiftcall ContextMenuBridge.hostRemovedFromWindow()()
{
  uint64_t v1 = *(void **)(v0 + direct field offset for ContextMenuBridge.interaction);
  if (v1)
  {
    uint64_t v2 = self;
    uint64_t v3 = swift_allocObject();
    *(void *)(v3 + 16) = v1;
    uint64_t v4 = swift_allocObject();
    *(void *)(v4 + 16) = partial apply for closure #1 in ContextMenuBridge.hostRemovedFromWindow();
    *(void *)(v4 + 24) = v3;
    v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
    v7[5] = v4;
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 1107296256;
    v7[2] = thunk for @escaping @callee_guaranteed () -> ();
    v7[3] = &block_descriptor_61_0;
    uint64_t v5 = _Block_copy(v7);
    id v6 = v1;
    swift_retain();
    swift_release();
    objc_msgSend((id)v2, sel_performWithoutAnimation_, v5);

    _Block_release(v5);
    LOBYTE(v2) = swift_isEscapingClosureAtFileLocation();
    swift_release();
    swift_release();
    if (v2) {
      __break(1u);
    }
  }
}

Swift::Void __swiftcall EditMenuBridge.hostRemovedFromWindow()()
{
  uint64_t v1 = self;
  uint64_t v2 = swift_allocObject();
  *(void *)(v2 + 16) = v0;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = partial apply for closure #1 in EditMenuBridge.hostRemovedFromWindow();
  *(void *)(v3 + 24) = v2;
  v7[4] = partial apply for thunk for @callee_guaranteed () -> ();
  v7[5] = v3;
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 1107296256;
  v7[2] = thunk for @escaping @callee_guaranteed () -> ();
  v7[3] = &block_descriptor_21;
  uint64_t v4 = _Block_copy(v7);
  id v5 = v0;
  swift_retain();
  swift_release();
  objc_msgSend(v1, sel_performWithoutAnimation_, v4);
  _Block_release(v4);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  swift_release();
  swift_release();
  if (isEscapingClosureAtFileLocation) {
    __break(1u);
  }
}

void specialized _NativeDictionary.setValue(_:forKey:isUnique:)(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 >= v13 && (a3 & 1) != 0)
  {
LABEL_7:
    id v16 = *v4;
    if (v14)
    {
LABEL_8:
      uint64_t v17 = v16[7];

      *(void *)(v17 + 8 * v10) = a1;
      return;
    }
    goto LABEL_11;
  }
  if (v15 >= v13 && (a3 & 1) == 0)
  {
    specialized _NativeDictionary.copy()();
    goto LABEL_7;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
  unint64_t v18 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  if ((v14 & 1) != (v19 & 1))
  {
LABEL_15:
    KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return;
  }
  unint64_t v10 = v18;
  id v16 = *v4;
  if (v14) {
    goto LABEL_8;
  }
LABEL_11:

  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);
}

void type metadata accessor for _DictionaryStorage<ObjectIdentifier, UIHostingKeyboardTrackingElement>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UIHostingKeyboardTrackingElement>)
  {
    type metadata accessor for UIHostingKeyboardTrackingElement();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<ObjectIdentifier, UIHostingKeyboardTrackingElement>);
    }
  }
}

uint64_t type metadata accessor for RootViewDelegate()
{
  return self;
}

uint64_t RootViewDelegate.hostingView<A>(_:didMoveTo:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *a1;
  swift_retain();
  if (a2) {
    GraphHost.addPreference<A>(_:)();
  }
  else {
    GraphHost.removePreference<A>(_:)();
  }
  swift_release();
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    uint64_t v7 = *(void *)(v2 + 32);
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v7 + 8))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v7);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t NavigationStackHostingController.hostingView<A>(_:didMoveTo:)(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x1E4FBC8C8] & *v2;
  uint64_t v4 = *(void *)(v18 + 960);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v18 - v10;
  uint64_t v12 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v18 - v14;
  if (a2)
  {
    long long v19 = xmmword_18834FC50;
    return _UIHostingView.inheritedEnvironment.setter(&v19);
  }
  else
  {
    uint64_t v17 = (char *)v2 + *(void *)(v18 + 984);
    swift_beginAccess();
    (*(void (**)(char *, char *, uint64_t))(v6 + 16))(v11, v17, v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v11, 1, v4) == 1)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v11, v5);
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v11, v4);
      UIHostingController.setRootView(_:transaction:)((uint64_t)v15);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v4);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v8, 1, 1, v4);
      swift_beginAccess();
      (*(void (**)(char *, char *, uint64_t))(v6 + 40))(v17, v8, v5);
      return swift_endAccess();
    }
  }
}

uint64_t _UIHostingView.inheritedEnvironment.setter(_OWORD *a1)
{
  uint64_t v2 = *(void *)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x68));
  uint64_t v3 = *(void *)(v2 + 136);
  *(_OWORD *)(v2 + 136) = *a1;
  outlined consume of EnvironmentValues?(v3);
  uint64_t result = MEMORY[0x18C119DF0](v2 + 24);
  if (result)
  {
    swift_getObjectType();
    ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:didMoveTo:) in conformance SheetBridge<A, B>(uint64_t a1, uint64_t a2)
{
  return specialized SheetBridge.hostingView<A>(_:didMoveTo:)(a1, a2);
}

uint64_t specialized SheetBridge.hostingView<A>(_:didMoveTo:)(uint64_t a1, uint64_t a2)
{
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  if (a2)
  {
    GraphHost.addPreference<A>(_:)();
    swift_release();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    GraphHost.addPreference<A>(_:)();
  }
  else
  {
    GraphHost.removePreference<A>(_:)();
    swift_release();
    specialized _UIHostingView.viewGraph.getter();
    swift_retain();
    GraphHost.removePreference<A>(_:)();
  }

  return swift_release();
}

uint64_t destroy for GridRow(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 9) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t one-time initialization function for shared()
{
  type metadata accessor for HostingViewRegistry();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static HostingViewRegistry.shared = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for PlatformSceneCache();
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = MEMORY[0x1E4FBC868];
  static PlatformSceneCache.shared = result;
  return result;
}

uint64_t type metadata accessor for HostingViewRegistry()
{
  return self;
}

double protocol witness for Shape.path(in:) in conformance DividerShape<A>@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  DividerShape.path(in:)(a1, (uint64_t)v5);
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

double DividerShape.path(in:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(_OWORD *__return_ptr, void))(*(void *)(a1 + 24) + 24))(v5, *(void *)(a1 + 16));
  double result = *(double *)v5;
  long long v4 = v5[1];
  *(_OWORD *)a2 = v5[0];
  *(_OWORD *)(a2 + 16) = v4;
  *(unsigned char *)(a2 + 32) = v6;
  return result;
}

uint64_t destroy for SizeFittingState.Child(id *a1)
{
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for UIKitInspectorBridgeV5()
{
  return swift_initClassMetadata2();
}

void partial apply for closure #2 in PlatformViewHost.enqueueLayoutInvalidation()()
{
  closure #1 in PlatformViewHost.enqueueLayoutInvalidation()(*(void *)(v0 + 32));
}

void closure #1 in PlatformViewHost.enqueueLayoutInvalidation()(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  uint64_t v2 = MEMORY[0x18C119DF0](v1);
  if (v2)
  {
    uint64_t v3 = (void *)v2;
    PlatformViewHost.invalidateLayout()();
  }
}

Swift::Void __swiftcall PlatformViewHost.invalidateLayout()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v3 = (char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD0);
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  v3[48] = 1;
  uint64_t v4 = (uint64_t)v0 + *(void *)((*v2 & *v0) + 0xC0);
  swift_beginAccess();
  if ((*(unsigned char *)(v4 + 16) & 1) == 0)
  {
    outlined init with copy of PlatformViewLayoutInvalidator(v4, (uint64_t)v5);
    if (swift_weakLoadStrong())
    {
      default argument 1 of GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
      GraphHost.asyncTransaction<A>(_:id:invalidating:style:mayDeferUpdate:)();
      swift_release();
    }
    outlined destroy of PlatformViewLayoutInvalidator((uint64_t)v5);
  }
  *((unsigned char *)v1 + *(void *)((*v2 & *v1) + 0xC8)) = 0;
}

uint64_t outlined destroy of PlatformViewLayoutInvalidator(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of PlatformViewLayoutInvalidator(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for UserDefaultObserver.Target.GraphAttribute(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_weakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for StackItemModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v4 = (_OWORD *)(a1 + 64);
  uint64_t v5 = (_OWORD *)(a2 + 64);
  uint64_t v6 = *(void *)(a1 + 88);
  if (v6 == 1) {
    goto LABEL_4;
  }
  uint64_t v7 = *(void *)(a2 + 88);
  if (v7 != 1)
  {
    if (v6)
    {
      if (v7)
      {
        char v9 = *(unsigned char *)(a2 + 80);
        uint64_t v10 = *(void *)(a1 + 64);
        uint64_t v11 = *(void *)(a1 + 72);
        char v12 = *(unsigned char *)(a1 + 80);
        *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
        *(unsigned char *)(a1 + 80) = v9;
        outlined consume of Text.Storage(v10, v11, v12);
        *(void *)(a1 + 88) = v7;
        swift_bridgeObjectRelease();
        goto LABEL_10;
      }
      outlined destroy of Text(a1 + 64);
    }
    long long v13 = *(_OWORD *)(a2 + 80);
    *uint64_t v4 = *v5;
    *(_OWORD *)(a1 + 80) = v13;
LABEL_10:
    uint64_t v14 = (uint64_t *)(a1 + 96);
    uint64_t v15 = *(void *)(a2 + 96);
    if (*(void *)(a1 + 96) != 1)
    {
      if (v15 != 1)
      {
        *uint64_t v14 = v15;
        swift_release();
        goto LABEL_15;
      }
      outlined destroy of Transaction(a1 + 96);
      uint64_t v15 = 1;
    }
    *uint64_t v14 = v15;
LABEL_15:
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    swift_release();
    *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
    goto LABEL_16;
  }
  outlined destroy of EquatableNavigationTitle(a1 + 64);
LABEL_4:
  long long v8 = *(_OWORD *)(a2 + 80);
  *uint64_t v4 = *v5;
  *(_OWORD *)(a1 + 80) = v8;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 105) = *(_OWORD *)(a2 + 105);
LABEL_16:
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_release();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_release();
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(unsigned char *)(a1 + 168) = *(unsigned char *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  swift_release();
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_release();
  char v16 = *(unsigned char *)(a2 + 232);
  uint64_t v17 = *(void **)(a1 + 224);
  char v18 = *(unsigned char *)(a1 + 232);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  *(unsigned char *)(a1 + 232) = v16;
  outlined consume of Environment<UISceneSession?>.Content(v17, v18);
  char v19 = *(unsigned char *)(a2 + 248);
  uint64_t v20 = *(void *)(a1 + 240);
  char v21 = *(unsigned char *)(a1 + 248);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  *(unsigned char *)(a1 + 248) = v19;
  outlined consume of Environment<Bool>.Content(v20, v21);
  char v22 = *(unsigned char *)(a2 + 264);
  uint64_t v23 = *(void *)(a1 + 256);
  char v24 = *(unsigned char *)(a1 + 264);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = v22;
  outlined consume of Environment<Bool>.Content(v23, v24);
  *(void *)(a1 + 272) = *(void *)(a2 + 272);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  swift_release();
  return a1;
}

uint64_t protocol witness for Sequence.makeIterator() in conformance ShadowRowCollection<A>@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X4>, uint64_t a3@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  v9.n128_f64[0] = MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v11 = (char *)&v15 - v10;
  uint64_t v12 = *(void *)(a1 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v12 + 16))(a3, v3, a1, v9);
  a2(a1);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v3, a1);
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for IndexingIterator();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a3 + *(int *)(v13 + 36), v11, AssociatedTypeWitness);
}

uint64_t getEnumTagSinglePayload for StackItemModifier(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 288)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

__n128 FetchRequest.init(fetchRequest:animation:)@<Q0>(void *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  swift_retain();
  uint64_t v6 = Transaction.init(animation:)();
  FetchRequest.init(fetchRequest:transaction:)(a1, v6, a2, (uint64_t)&v13);
  swift_release();
  char v7 = v14;
  char v8 = v16;
  uint64_t v9 = v19;
  __n128 result = v15;
  long long v11 = v17;
  long long v12 = v18;
  *(void *)a3 = v13;
  *(unsigned char *)(a3 + 8) = v7;
  *(__n128 *)(a3 + 16) = result;
  *(unsigned char *)(a3 + 32) = v8;
  *(_OWORD *)(a3 + 40) = v11;
  *(_OWORD *)(a3 + 56) = v12;
  *(void *)(a3 + 72) = v9;
  return result;
}

__n128 FetchRequest.init(fetchRequest:transaction:)@<Q0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  objc_msgSend(a1, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  swift_dynamicCast();
  char v8 = v25;
  type metadata accessor for DeferredFetchRequest();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = a3;
  *(void *)(v9 + 24) = v8;
  uint64_t v10 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in FetchRequest.init(fetchRequest:transaction:), v9);
  id v11 = v8;
  FetchRequest.init(deferredFetchRequest:transaction:)(v10, a2, (uint64_t)&v18);

  char v12 = v19;
  char v13 = v21;
  uint64_t v14 = v24;
  __n128 result = v20;
  long long v16 = v22;
  long long v17 = v23;
  *(void *)a4 = v18;
  *(unsigned char *)(a4 + 8) = v12;
  *(__n128 *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 40) = v16;
  *(_OWORD *)(a4 + 56) = v17;
  *(void *)(a4 + 72) = v14;
  return result;
}

id implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller()
{
  return specialized FetchController.__allocating_init(_:)((uint64_t)partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller, 0);
}

id specialized FetchController.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  id v5 = objc_allocWithZone(v2);
  return specialized FetchController.init(_:)(a1, a2);
}

id specialized FetchController.init(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  char v7 = (void *)MEMORY[0x1E4FBC8C8];
  *(void *)((char *)v3 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0x70)) = 0;
  *(void *)((char *)v3 + *(void *)((*v7 & *v3) + 0x80)) = 0;
  char v8 = (char *)v3 + *(void *)((*v7 & *v3) + 0x88);
  type metadata accessor for Optional();
  uint64_t v9 = type metadata accessor for Binding();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 1, 1, v9);
  *((unsigned char *)v3 + *(void *)((*v7 & *v3) + 0x90)) = 0;
  uint64_t v10 = (void *)((char *)v3 + *(void *)((*v7 & *v3) + 0x68));
  *uint64_t v10 = a1;
  v10[1] = a2;
  type metadata accessor for KeyPath();
  type metadata accessor for Optional();
  type metadata accessor for MutableBox();
  uint64_t v14 = 0;
  id v11 = v3;
  swift_retain();
  *(void *)((char *)v11 + *(void *)((*v7 & *v11) + 0x78)) = MEMORY[0x18C10C050](&v14);

  v13.receiver = v11;
  v13.super_class = ObjectType;
  return objc_msgSendSuper2(&v13, sel_init);
}

uint64_t destroy for NavigationLink(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 17);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1) {
    swift_release();
  }
  swift_release();
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (a1 + *(unsigned __int8 *)(v5 + 80) + 18) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  uint64_t v8 = *(void *)(a2 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = (v7 + *(void *)(v6 + 56) + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v10, 1, v8)) {
    (*(void (**)(unint64_t, uint64_t))(v9 + 8))(v10, v8);
  }
  swift_release();
  swift_release();

  return swift_release();
}

__n128 FetchRequest<>.init(sortDescriptors:predicate:animation:)@<Q0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  type metadata accessor for DeferredFetchRequest();
  uint64_t v8 = (void *)swift_allocObject();
  void v8[2] = a3;
  v8[3] = a1;
  v8[4] = a2;
  uint64_t v9 = DeferredFetchRequest.__allocating_init(_:)((uint64_t)partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:), (uint64_t)v8);
  swift_retain();
  id v10 = a2;
  uint64_t v11 = Transaction.init(animation:)();
  FetchRequest.init(deferredFetchRequest:transaction:)(v9, v11, (uint64_t)&v18);

  swift_release();
  char v12 = v19;
  char v13 = v21;
  uint64_t v14 = v24;
  __n128 result = v20;
  long long v16 = v22;
  long long v17 = v23;
  *(void *)a4 = v18;
  *(unsigned char *)(a4 + 8) = v12;
  *(__n128 *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 40) = v16;
  *(_OWORD *)(a4 + 56) = v17;
  *(void *)(a4 + 72) = v14;
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t WitnessTable;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  __n128 result;
  long long v16;
  long long v17;
  void v18[4];
  uint64_t v19;
  char v20;
  __n128 v21;
  char v22;
  long long v23;
  long long v24;
  uint64_t v25;

  char v19 = a1;
  v18[2] = a3;
  type metadata accessor for SortDescriptor();
  unint64_t v7 = type metadata accessor for Array();
  uint64_t v8 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v11 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:), (uint64_t)v18, v7, v8, MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v10);
  swift_bridgeObjectRelease();
  FetchRequest<>.init(sortDescriptors:predicate:animation:)(v11, a2, a3, (uint64_t)&v19);
  char v12 = v20;
  char v13 = v22;
  uint64_t v14 = v25;
  __n128 result = v21;
  long long v16 = v23;
  long long v17 = v24;
  *(void *)a4 = v19;
  *(unsigned char *)(a4 + 8) = v12;
  *(__n128 *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 32) = v13;
  *(_OWORD *)(a4 + 40) = v16;
  *(_OWORD *)(a4 + 56) = v17;
  *(void *)(a4 + 72) = v14;
  return result;
}

uint64_t type metadata accessor for DeferredFetchRequest()
{
  return __swift_instantiateGenericMetadata();
}

void *DeferredFetchRequest.__allocating_init(_:)(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)swift_allocObject();
  result[2] = 0;
  result[3] = a1;
  result[4] = a2;
  return result;
}

__n128 FetchRequest.init(deferredFetchRequest:transaction:)@<Q0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *a1;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(swift_allocObject() + 16) = *(void *)(v6 + 80);
  uint64_t v8 = property wrapper backing initializer of FetchRequest.controller();
  uint64_t v10 = v9;
  char v12 = v11;
  property wrapper backing initializer of FetchRequest.results();
  __n128 result = v14;
  *(void *)a3 = KeyPath;
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = v8;
  *(void *)(a3 + 24) = v10;
  *(unsigned char *)(a3 + 32) = v12 & 1;
  *(__n128 *)(a3 + 40) = v14;
  *(void *)(a3 + 56) = v15;
  *(void *)(a3 + 64) = a2;
  *(void *)(a3 + 72) = a1;
  return result;
}

uint64_t property wrapper backing initializer of FetchRequest.results()
{
  return State.init(wrappedValue:)();
}

uint64_t property wrapper backing initializer of FetchRequest.controller()
{
  return StateObject.init(wrappedValue:)();
}

uint64_t assignWithCopy for FetchRequest(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a2, v5);
  uint64_t v6 = *(void **)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<UISceneSession?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v9 = *(void **)(a2 + 24);
  char v10 = *(unsigned char *)(a2 + 32);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v8, v9, v10);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(void **)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(unsigned char *)(a1 + 32) = v10;
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v11, v12, v13);
  __n128 v14 = *(void **)(a1 + 40);
  uint64_t v15 = *(void **)(a2 + 40);
  if (!v14)
  {
    if (v15)
    {
      *(void *)(a1 + 40) = v15;
      __n128 v20 = *(void **)(a2 + 48);
      *(void *)(a1 + 48) = v20;
      id v21 = v15;
      id v22 = v20;
      goto LABEL_8;
    }
LABEL_7:
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    goto LABEL_8;
  }
  if (!v15)
  {
    uint64_t v23 = type metadata accessor for FetchedResults();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v23 - 8) + 8))(a1 + 40, v23);
    goto LABEL_7;
  }
  *(void *)(a1 + 40) = v15;
  id v16 = v15;

  long long v17 = *(void **)(a2 + 48);
  uint64_t v18 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v17;
  id v19 = v17;

LABEL_8:
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

void FetchRequest.wrappedValue.getter()
{
  FetchRequest.results.getter();
  outlined consume of FetchedResults<A>?<A>(v1, v2);
  id v0 = (id)FetchRequest.controller.getter();
  FetchController.results.getter();
}

uint64_t FetchController.results.getter()
{
  FetchController.fetchIfNeeded()();
  return (*(uint64_t (**)(void *))((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x68)))(v0);
}

void *FetchController.fetchIfNeeded()()
{
  v13[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v1 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x90);
  uint64_t v2 = *((unsigned __int8 *)v0 + v1);
  if (v2 != 1) {
    return (void *)v2;
  }
  uint64_t v3 = v0;
  __n128 result = *(void **)((char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x80));
  if (result)
  {
    v13[0] = 0;
    if (objc_msgSend(result, sel_performFetch_, v13))
    {
      id v5 = v13[0];
    }
    else
    {
      id v6 = v13[0];
      char v7 = (void *)_convertNSErrorToError(_:)();

      swift_willThrow();
      static os_log_type_t.fault.getter();
      uint64_t v8 = (void *)static Log.runtimeIssuesLog.getter();
      type metadata accessor for _ContiguousArrayStorage<CVarArg>();
      uint64_t v9 = swift_allocObject();
      *(_OWORD *)(v9 + 16) = xmmword_18834BB80;
      swift_getErrorValue();
      uint64_t v10 = Error.localizedDescription.getter();
      uint64_t v12 = v11;
      *(void *)(v9 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v9 + 64) = lazy protocol witness table accessor for type String and conformance String();
      *(void *)(v9 + 32) = v10;
      *(void *)(v9 + 40) = v12;
      os_log(_:dso:log:_:_:)();

      swift_bridgeObjectRelease();
    }
    *((unsigned char *)v3 + v1) = 0;
    return (void *)v2;
  }
  __break(1u);
  return result;
}

objc_class *FetchedResults.init(_:)@<X0>(objc_class *a1@<X0>, NSArray *a2@<X8>)
{
  id v4 = *(void **)((char *)a1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x80));
  if (v4 && (id v5 = objc_msgSend(v4, sel_fetchedObjects)) != 0)
  {
    id v6 = v5;
    static Array._unconditionallyBridgeFromObjectiveC(_:)();

    v7.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    __n128 result = (objc_class *)swift_bridgeObjectRelease();
  }
  else
  {
    __n128 result = (objc_class *)objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F1C978]), sel_init);
    v7.super.Class isa = result;
  }
  a2->super.Class isa = v7.super.isa;
  a2[1].super.Class isa = a1;
  return result;
}

uint64_t FetchRequest.results.getter()
{
  return State.wrappedValue.getter();
}

void FetchRequest.update(_:)()
{
  uint64_t v1 = *(void *)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  id v5 = FetchRequest.managedObjectContext.getter();
  id v6 = objc_msgSend(v5, sel_persistentStoreCoordinator);

  if (v6)
  {
    id v16 = (void *)FetchRequest.controller.getter();
    LOBYTE(v20) = v2;
    *(void *)&long long v21 = v3;
    *((void *)&v21 + 1) = v4;
    FetchRequest.$results.getter();
    type metadata accessor for FetchedResults();
    type metadata accessor for Optional();
    type metadata accessor for Binding();
    Binding.transaction(_:)();
    swift_release();
    swift_release();
    outlined consume of FetchedResults<A>?<A>(v18, v19);
    NSArray v7 = (void *)((char *)v16 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v16) + 0x88));
    uint64_t v8 = *v7;
    uint64_t v9 = v7[1];
    uint64_t v10 = (void *)v7[2];
    uint64_t v11 = (void *)v7[3];
    *NSArray v7 = v1;
    v7[1] = v20;
    *((_OWORD *)v7 + 1) = v21;
    outlined consume of Binding<FetchedResults<A>?>?<A>(v8, v9, v10, v11);

    long long v17 = (void *)FetchRequest.controller.getter();
    v23.value.super.Class isa = (Class)FetchRequest.managedObjectContext.getter();
    Class isa = v23.value.super.isa;
    FetchController.update(in:)(v23);
  }
  else
  {
    static os_log_type_t.fault.getter();
    char v13 = (void *)static Log.runtimeIssuesLog.getter();
    type metadata accessor for _ContiguousArrayStorage<CVarArg>();
    uint64_t v14 = swift_allocObject();
    *(_OWORD *)(v14 + 16) = xmmword_18834BB80;
    id v15 = FetchRequest.managedObjectContext.getter();
    *(void *)(v14 + 56) = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
    *(void *)(v14 + 64) = lazy protocol witness table accessor for type NSManagedObjectContext and conformance NSObject();
    *(void *)(v14 + 32) = v15;
    os_log(_:dso:log:_:_:)();

    swift_bridgeObjectRelease();
  }
}

uint64_t FetchRequest.controller.getter()
{
  type metadata accessor for FetchedResults();
  type metadata accessor for FetchController();
  swift_getWitnessTable();

  return StateObject.wrappedValue.getter();
}

uint64_t type metadata accessor for FetchedResults()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for FetchController()
{
  return __swift_instantiateGenericMetadata();
}

id FetchRequest.managedObjectContext.getter()
{
  uint64_t v1 = *(void **)v0;
  char v2 = *(unsigned char *)(v0 + 8);
  outlined copy of Environment<UISceneSession?>.Content(v1, v2);
  id v3 = specialized Environment.wrappedValue.getter(v1, v2);
  outlined consume of Environment<UISceneSession?>.Content(v1, v2);
  return v3;
}

id specialized Environment.wrappedValue.getter(void *a1, char a2)
{
  if (a2)
  {
    return a1;
  }
  else
  {
    swift_retain();
    os_log_type_t v3 = static os_log_type_t.fault.getter();
    uint64_t v4 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v5 = v3;
    if (os_log_type_enabled(v4, v3))
    {
      id v6 = (uint8_t *)swift_slowAlloc();
      uint64_t v7 = swift_slowAlloc();
      uint64_t v12 = v7;
      *(_DWORD *)id v6 = 136315138;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSManagedObjectContext);
      uint64_t v8 = _typeName(_:qualified:)();
      id v13 = (id)getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v8, v9, &v12);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_1872C6000, v4, v5, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v6, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v7, -1, -1);
      MEMORY[0x18C119C60](v6, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    outlined consume of Environment<UISceneSession?>.Content(a1, 0);
    swift_release();
    swift_release();
    return v13;
  }
}

void outlined consume of Binding<FetchedResults<A>?>?<A>(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  if (a2)
  {
    swift_release();
    swift_release();
    outlined consume of FetchedResults<A>?<A>(a3, a4);
  }
}

Swift::Void __swiftcall FetchController.update(in:)(NSManagedObjectContext_optional in)
{
  uint64_t v2 = v1;
  Class isa = in.value.super.isa;
  v57[1] = *MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *v1;
  if (in.value.super.isa)
  {
    Class v6 = in.value.super.isa;
  }
  else
  {
    uint64_t v7 = *(void **)((char *)v1 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v1) + 0x80));
    if (!v7) {
      goto LABEL_46;
    }
    Class v6 = (Class)objc_msgSend(v7, sel_managedObjectContext);
    uint64_t v5 = *v4 & *v1;
  }
  if (!*(void *)((char *)v1 + *(void *)(v5 + 112))) {
    __break(1u);
  }
  uint64_t v8 = isa;
  swift_retain();
  id v9 = DeferredFetchRequest.result.getter();
  swift_release();
  if ([(objc_class *)v6 concurrencyType] != (id)2
    && [(objc_class *)v6 concurrencyType]
    || !objc_msgSend(self, sel_isMainThread))
  {
    goto LABEL_48;
  }
  uint64_t v10 = *(void *)((*v4 & *v1) + 0x80);
  uint64_t v11 = *(void **)((char *)v1 + v10);
  if (v11)
  {
    id v12 = objc_msgSend(v11, sel_fetchRequest);
    if (!v12) {
      goto LABEL_29;
    }
    id v13 = v12;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
    id v14 = v9;
    id v15 = v13;
    LOBYTE(v13) = static NSObject.== infix(_:_:)();

    if ((v13 & 1) == 0) {
      goto LABEL_29;
    }
    id v16 = *(void **)((char *)v2 + v10);
    if (v16 && (id v17 = objc_msgSend(v16, sel_sectionNameKeyPath)) != 0)
    {
      uint64_t v18 = v17;
      uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v21 = v20;
    }
    else
    {
      uint64_t v19 = 0;
      uint64_t v21 = 0;
    }
    uint64_t v22 = swift_retain();
    MEMORY[0x18C10C000](aBlock, v22);
    swift_release();
    if (aBlock[0])
    {
      id v23 = v9;
      uint64_t v24 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
      uint64_t v26 = v25;
      swift_release();
      if (v21)
      {
        if (v26)
        {
          if (v19 == v24 && v21 == v26)
          {

            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return;
          }
          char v53 = _stringCompareWithSmolCheck(_:_:expecting:)();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          id v9 = v23;
          uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
          if (v53) {
            goto LABEL_43;
          }
          goto LABEL_29;
        }
        id v9 = v23;
        uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
        goto LABEL_28;
      }
      id v9 = v23;
      uint64_t v4 = (void *)MEMORY[0x1E4FBC8C8];
      if (!v26)
      {
LABEL_43:

        return;
      }
    }
    else if (!v21)
    {
      goto LABEL_43;
    }
LABEL_28:
    swift_bridgeObjectRelease();
LABEL_29:
    uint64_t v54 = *(void *)((char *)v2 + v10);
    goto LABEL_30;
  }
  uint64_t v54 = 0;
LABEL_30:
  objc_msgSend(v9, sel_copy);
  _bridgeAnyObjectToAny(_:)();
  swift_unknownObjectRelease();
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  swift_dynamicCast();
  uint64_t v27 = v4;
  uint64_t v28 = swift_retain();
  MEMORY[0x18C10C000](v57, v28);
  swift_release();
  uint64_t v29 = v9;
  if (v57[0])
  {
    uint64_t v30 = dispatch thunk of AnyKeyPath._kvcKeyPathString.getter();
    uint64_t v32 = v31;
    swift_release();
  }
  else
  {
    uint64_t v30 = 0;
    uint64_t v32 = 0;
  }
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchedResultsController);
  ObjCClassFromMetadata = (objc_class *)swift_getObjCClassFromMetadata();
  uint64_t v34 = v6;
  id v35 = objc_allocWithZone(ObjCClassFromMetadata);
  id v36 = @nonobjc NSFetchedResultsController.init(fetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:)(v55, v34, v30, v32, 0, 0);
  uint64_t v37 = *(void **)((char *)v2 + v10);
  *(void *)((char *)v2 + v10) = v36;

  uint64_t v38 = *(void **)((char *)v2 + v10);
  if (v38)
  {
    objc_msgSend(v38, sel_setDelegate_, v2);
    uint64_t v39 = v29;
    if (v54)
    {
      uint64_t v40 = *(void *)((*v27 & *v2) + 0x90);
      if ((*((unsigned char *)v2 + v40) & 1) == 0)
      {
        uint64_t v41 = (void *)swift_allocObject();
        v41[2] = v2;
        aBlock[4] = partial apply for closure #1 in FetchController.update(in:);
        aBlock[5] = v41;
        aBlock[0] = (id)MEMORY[0x1E4F143A8];
        aBlock[1] = (id)1107296256;
        aBlock[2] = thunk for @escaping @callee_guaranteed () -> ();
        aBlock[3] = &block_descriptor_11;
        uint64_t v42 = _Block_copy(aBlock);
        uint64_t v43 = v2;
        swift_release();
        [(objc_class *)v34 performBlock:v42];

        _Block_release(v42);
        *((unsigned char *)v2 + v40) = 1;
        return;
      }
      goto LABEL_40;
    }
    uint64_t v44 = *(void **)((char *)v2 + v10);
    if (v44)
    {
      aBlock[0] = 0;
      if (!objc_msgSend(v44, sel_performFetch_, aBlock))
      {
        id v46 = aBlock[0];
        uint64_t v47 = (void *)_convertNSErrorToError(_:)();

        swift_willThrow();
        static os_log_type_t.fault.getter();
        uint64_t v48 = (void *)static Log.runtimeIssuesLog.getter();
        type metadata accessor for _ContiguousArrayStorage<CVarArg>();
        uint64_t v49 = swift_allocObject();
        *(_OWORD *)(v49 + 16) = xmmword_18834BB80;
        swift_getErrorValue();
        uint64_t v50 = Error.localizedDescription.getter();
        uint64_t v52 = v51;
        *(void *)(v49 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v49 + 64) = lazy protocol witness table accessor for type String and conformance String();
        *(void *)(v49 + 32) = v50;
        *(void *)(v49 + 40) = v52;
        os_log(_:dso:log:_:_:)();

        swift_bridgeObjectRelease();
        return;
      }
      id v45 = aBlock[0];
LABEL_40:

      return;
    }
    goto LABEL_47;
  }
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

id DeferredFetchRequest.result.getter()
{
  uint64_t v1 = *(void **)(v0 + 16);
  if (v1)
  {
    id v2 = *(id *)(v0 + 16);
  }
  else
  {
    uint64_t v3 = v0;
    uint64_t v4 = (void *)(*(uint64_t (**)(void))(v0 + 24))();
    uint64_t v5 = *(void **)(v0 + 16);
    *(void *)(v3 + 16) = v4;
    id v2 = v4;

    uint64_t v1 = 0;
  }
  id v6 = v1;
  return v2;
}

Swift::Void __swiftcall FetchRequest.update()()
{
  uint64_t v1 = *(void **)v0;
  char v9 = *(unsigned char *)(v0 + 8);
  id v2 = *(void **)(v0 + 16);
  uint64_t v8 = *(void **)(v0 + 24);
  char v3 = *(unsigned char *)(v0 + 32);
  uint64_t v4 = *(void **)(v0 + 40);
  uint64_t v5 = *(void **)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v7 = (void *)FetchRequest.controller.getter();
  *(void *)((char *)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x70)) = v6;
  swift_retain();

  swift_release();
  outlined copy of Environment<UISceneSession?>.Content(v1, v9);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>((uint64_t)v2, v8, v3);
  outlined copy of FetchedResults<A>?<A>(v4, v5);
  swift_retain();
  swift_retain();
  swift_retain();
  FetchRequest.$results.getter();
  type metadata accessor for FetchedResults();
  type metadata accessor for Optional();
  type metadata accessor for Binding();
  Binding.transaction(_:)();
  swift_release();
  swift_release();
  outlined consume of FetchedResults<A>?<A>(v10, v11);
  swift_release();
  outlined consume of FetchedResults<A>?<A>(v2, v8);
  FetchRequest.update(_:)();
  swift_release();
  outlined consume of Environment<UISceneSession?>.Content(v1, v9);
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>((uint64_t)v2, v8, v3);
  outlined consume of FetchedResults<A>?<A>(v4, v5);
  swift_release();
  swift_release();
  swift_release();
}

uint64_t initializeWithCopy for FetchRequest(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of Environment<UISceneSession?>.Content(*(id *)a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void **)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(v6, v7, v8);
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  char v9 = *(void **)(a2 + 40);
  if (v9)
  {
    uint64_t v10 = *(void **)(a2 + 48);
    *(void *)(a1 + 40) = v9;
    *(void *)(a1 + 48) = v10;
    id v11 = v9;
    id v12 = v10;
  }
  else
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  }
  uint64_t v13 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v13;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

id outlined copy of Environment<UISceneSession?>.Content(id a1, char a2)
{
  if (a2) {
    return a1;
  }
  else {
    return (id)swift_retain();
  }
}

id outlined copy of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(uint64_t a1, void *a2, char a3)
{
  if (a3) {
    return a2;
  }
  else {
    return (id)swift_retain();
  }
}

uint64_t destroy for FetchRequest(uint64_t a1)
{
  outlined consume of Environment<UISceneSession?>.Content(*(id *)a1, *(unsigned char *)(a1 + 8));
  outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(*(void *)(a1 + 16), *(void **)(a1 + 24), *(unsigned char *)(a1 + 32));
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
  }
  swift_release();
  swift_release();

  return swift_release();
}

void outlined consume of Environment<UISceneSession?>.Content(id a1, char a2)
{
  if (a2) {

  }
  else {
    swift_release();
  }
}

void outlined consume of StateObject<FetchController<(), A, FetchedResults<A>>>.Storage<A>(uint64_t a1, void *a2, char a3)
{
  if (a3) {

  }
  else {
    swift_release();
  }
}

void outlined consume of FetchedResults<A>?<A>(void *a1, void *a2)
{
  if (a1)
  {
  }
}

uint64_t FetchRequest.$results.getter()
{
  return State.projectedValue.getter();
}

id outlined copy of FetchedResults<A>?<A>(id result, void *a2)
{
  if (result)
  {
    id v2 = result;
    return a2;
  }
  return result;
}

objc_class *partial apply for implicit closure #3 in implicit closure #2 in implicit closure #1 in variable initialization expression of FetchRequest._controller@<X0>(void *a1@<X0>, NSArray *a2@<X8>)
{
  char v3 = a1;

  return FetchedResults.init(_:)(v3, a2);
}

id @nonobjc NSFetchedResultsController.init(fetchRequest:managedObjectContext:sectionNameKeyPath:cacheName:)(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = v6;
  if (!a4)
  {
    id v12 = 0;
    if (a6) {
      goto LABEL_3;
    }
LABEL_5:
    uint64_t v13 = 0;
    goto LABEL_6;
  }
  id v12 = (void *)MEMORY[0x18C115780](a3, a4);
  swift_bridgeObjectRelease();
  if (!a6) {
    goto LABEL_5;
  }
LABEL_3:
  uint64_t v13 = (void *)MEMORY[0x18C115780](a5, a6);
  swift_bridgeObjectRelease();
LABEL_6:
  id v14 = objc_msgSend(v7, sel_initWithFetchRequest_managedObjectContext_sectionNameKeyPath_cacheName_, a1, a2, v12, v13);

  return v14;
}

id partial apply for closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)()
{
  return closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

id closure #1 in FetchRequest<>.init(sortDescriptors:predicate:animation:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSFetchRequest);
  id v3 = NSFetchRequest.__allocating_init()();
  id v4 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_entity);
  objc_msgSend(v3, sel_setEntity_, v4);

  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSSortDescriptor);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  objc_msgSend(v3, sel_setSortDescriptors_, isa);

  objc_msgSend(v3, sel_setPredicate_, a2);
  return v3;
}

id NSFetchRequest.__allocating_init()()
{
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v0, sel_init);
}

id partial apply for closure #1 in FetchRequest.init(fetchRequest:transaction:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v5 = (void *)destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(v4 + 24), *(void *)(v4 + 16), a3, a4);

  return v5;
}

uint64_t type metadata completion function for AccessibilityLargeContentViewModifier()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

double ScrollViewContentFrameSize.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v3 = Value[1];
  long long v15 = *Value;
  long long v16 = v3;
  AGGraphGetValue();
  EdgeInsets.horizontal.getter();
  double v5 = v4;
  uint64_t v6 = (void (*)(unsigned char *, void))ViewSize.value.modify();
  *uint64_t v7 = *v7 - v5;
  v6(v14, 0);
  AGGraphGetValue();
  EdgeInsets.vertical.getter();
  double v9 = v8;
  uint64_t v10 = (void (*)(unsigned char *, void))ViewSize.value.modify();
  *(double *)(v11 + 8) = *(double *)(v11 + 8) - v9;
  v10(v14, 0);
  double result = *(double *)&v15;
  long long v13 = v16;
  *a1 = v15;
  a1[1] = v13;
  return result;
}

__n128 partial apply for specialized closure #1 in closure #1 in ScrollActionDispatcher.updateValue()@<Q0>(uint64_t a1@<X8>)
{
  id v2 = *(unsigned __int8 **)(v1 + 24);
  *(void *)a1 = *v2;
  __n128 result = *(__n128 *)(v2 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

uint64_t partial apply for closure #1 in static VariadicViewForest._makeViewList(view:inputs:)(uint64_t a1)
{
  return closure #1 in static VariadicViewForest._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply);
}

uint64_t closure #1 in static VariadicViewForest._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[2] = type metadata accessor for VariadicViewForest();
  v11[3] = a2;
  uint64_t v8 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, a5, (uint64_t)v11, a2, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
  return v11[5];
}

double static IsSearchImplementedModifier._makeView(modifier:inputs:body:)@<D0>(long long *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  long long v4 = a1[3];
  long long v5 = a1[1];
  long long v16 = a1[2];
  long long v17 = v4;
  long long v6 = a1[3];
  long long v18 = a1[4];
  long long v7 = a1[1];
  long long v14 = *a1;
  long long v15 = v7;
  v10[2] = v16;
  v10[3] = v6;
  v10[4] = a1[4];
  int v19 = *((_DWORD *)a1 + 20);
  int v11 = *((_DWORD *)a1 + 20);
  v10[0] = v14;
  v10[1] = v5;
  a2(&v12);
  uint64_t v8 = swift_allocObject();
  *(void *)(v8 + 16) = 0;
  *(_DWORD *)(v8 + 24) = 0;
  *(unsigned char *)(v8 + 28) = 1;
  *(void *)&v10[0] = v17;
  DWORD2(v10[0]) = DWORD2(v17);
  outlined retain of [Text.Modifier]((uint64_t)v10);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)a3 = v12;
  double result = v13;
  a3[1] = v13;
  return result;
}

uint64_t closure #1 in static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for VariadicViewForest();
  uint64_t v3 = a1 + *(int *)(v2 + 44);
  v7[2] = v2;
  uint64_t v8 = type metadata accessor for TupleView();
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, v8, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v9;
}

uint64_t static VariadicViewForest._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  void (*v14)(uint64_t *__return_ptr, uint64_t, uint64_t);
  void (*v15)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t *), unsigned char *, uint64_t, uint64_t);
  unsigned char v17[16];
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  long long v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  int v33;
  unsigned char v34[4];
  uint64_t v35;
  int v36;
  uint64_t v37;
  long long v38;
  uint64_t v39;
  uint64_t v40;
  long long v41;
  uint64_t v42;
  int v43;

  int v8 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v11 = a2[5];
  uint64_t v12 = a2[6];
  int v13 = *((_DWORD *)a2 + 20);
  id v35 = *a2;
  id v36 = v9;
  uint64_t v38 = *(_OWORD *)(a2 + 3);
  uint64_t v37 = v10;
  uint64_t v39 = v11;
  uint64_t v40 = v12;
  uint64_t v41 = *(_OWORD *)(a2 + 7);
  uint64_t v42 = a2[9];
  uint64_t v43 = v13;
  long long v14 = *(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(a5 + 24);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v14(&v25, a3, a5);
  PropertyList.subscript.setter();
  uint64_t v22 = a3;
  id v23 = a4;
  uint64_t v24 = a5;
  LODWORD(v25) = v8;
  type metadata accessor for VariadicViewForest();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  uint64_t v28 = v38;
  uint64_t v29 = v39;
  uint64_t v30 = v40;
  uint64_t v31 = v41;
  uint64_t v32 = v42;
  uint64_t v33 = v43;
  long long v18 = a3;
  int v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = v8;
  long long v15 = *(void (**)(unsigned char *, uint64_t *, uint64_t (*)(uint64_t *), unsigned char *, uint64_t, uint64_t))(a5 + 32);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v15(v34, &v25, partial apply for closure #2 in static VariadicViewForest._makeView(view:inputs:), v17, a3, a5);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

void protocol witness for static VariadicViewForestRoot.viewListOptions.getter in conformance _NavigationSplitReader.ForestRoot(void *a1@<X8>)
{
  *a1 = 128;
}

uint64_t protocol witness for static VariadicViewForestRoot._makeView(root:inputs:body:) in conformance _NavigationSplitReader.ForestRoot@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(long long *)@<X2>, void *a3@<X8>)
{
  long long v3 = *(_OWORD *)(a1 + 48);
  uint64_t v6[2] = *(_OWORD *)(a1 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a1 + 64);
  int v7 = *(_DWORD *)(a1 + 80);
  long long v4 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v4;
  return specialized static VariadicViewForestRoot._makeView(root:inputs:body:)((uint64_t)v6, a2, a3);
}

unint64_t lazy protocol witness table accessor for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>)
  {
    type metadata accessor for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>);
  }
  return result;
}

uint64_t specialized static VariadicViewForestRoot._makeView(root:inputs:body:)@<X0>(uint64_t a1@<X1>, uint64_t (*a2)(long long *)@<X2>, void *a3@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v19 = *(_OWORD *)(a1 + 48);
  long long v20 = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  long long v16 = *(_OWORD *)a1;
  int v21 = *(_DWORD *)(a1 + 80);
  long long v17 = v6;
  long long v18 = v4;
  uint64_t v7 = a2(&v16);
  outlined retain of _ViewInputs(a1);
  _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI16_ViewListOutputsVG_14AttributeGraph0I0VyAF0fG0_pGs5NeverOTg503_s7d12UI22Variadicf52ForestRootPAAE05_makeD4List4root6inputs4bodyAA01_dH7h6VAA11_j10ValueVyxG_u25_dH6InputsVSayAIGANctFZ09I23M00P0VyAA0dH0_pGAIXEfU_AF01_fG6InputsVTf1cn_nTf4ng_n(v7, (_OWORD *)a1);
  outlined release of _ViewInputs(a1);
  swift_bridgeObjectRelease();
  static DynamicPropertyCache.fields(of:)();
  long long v8 = *(_OWORD *)(a1 + 32);
  long long v9 = *(_OWORD *)(a1 + 64);
  long long v19 = *(_OWORD *)(a1 + 48);
  long long v20 = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  long long v16 = *(_OWORD *)a1;
  int v21 = *(_DWORD *)(a1 + 80);
  long long v17 = v10;
  long long v18 = v8;
  outlined retain of _ViewInputs(a1);
  specialized static VariadicViewForestRoot.makeBody(root:lists:inputs:fields:)();
  swift_bridgeObjectRelease();
  lazy protocol witness table accessor for type NavigationSplitCore and conformance NavigationSplitCore();
  static View.makeDebuggableView(view:inputs:)();
  if ((v13 & 1) == 0) {
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *a3 = v14;
  a3[1] = v15;
  return result;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI16_ViewListOutputsVG_14AttributeGraph0I0VyAF0fG0_pGs5NeverOTg503_s7d12UI22Variadicf52ForestRootPAAE05_makeD4List4root6inputs4bodyAA01_dH7h6VAA11_j10ValueVyxG_u25_dH6InputsVSayAIGANctFZ09I23M00P0VyAA0dH0_pGAIXEfU_AF01_fG6InputsVTf1cn_nTf4ng_n(uint64_t a1, _OWORD *a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t v3 = v13;
    uint64_t v6 = a1 + 32;
    long long v7 = a2[1];
    v12[0] = *a2;
    v12[1] = v7;
    v12[2] = a2[2];
    do
    {
      outlined retain of _GraphInputs((uint64_t)v12);
      _ViewListInputs.init(_:)();
      int v8 = _ViewListOutputs.makeAttribute(inputs:)();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v13 = v3;
      unint64_t v10 = *(void *)(v3 + 16);
      unint64_t v9 = *(void *)(v3 + 24);
      if (v10 >= v9 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1);
        uint64_t v3 = v13;
      }
      *(void *)(v3 + 16) = v10 + 1;
      *(_DWORD *)(v3 + 4 * v10 + 32) = v8;
      v6 += 72;
      --v2;
    }
    while (v2);
  }
  return v3;
}

char *specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Attribute<ViewList>>, (uint64_t (*)(uint64_t))type metadata accessor for Attribute<ViewList>, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 29;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 2);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[4 * v8]) {
      memmove(v13, v14, 4 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 4 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<CGRect>, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 32 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement>, (uint64_t)&type metadata for ToolbarPlacement, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<NavigationSplitViewColumnWidth?>();
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 40 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationRequest>, (uint64_t)&type metadata for NavigationRequest, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 136);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[136 * v8]) {
      memmove(v12, v13, 136 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PreferencesOutputs>, MEMORY[0x1E4F402C0], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.ID>, (uint64_t)&type metadata for ToolbarStorage.ID, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabEntry>, (uint64_t)&type metadata for TabEntry, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 272);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[272 * v8]) {
      memmove(v12, v13, 272 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<UniqueID>, MEMORY[0x1E4F41780], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNullableOptionSet<AccessibilityTraitSet>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityTraitSet>, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNullableOptionSet<AccessibilityVisibility>>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 8 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ScrollableLayoutItem>, (uint64_t)&type metadata for _ScrollableLayoutItem, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabCustomizationID>, (uint64_t)&type metadata for TabCustomizationID, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[24 * v8]) {
      memmove(v12, v13, 24 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<SafeAreaInsets.Element>, MEMORY[0x1E4F3F9C8], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 40 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ScalarDeceleration>, (uint64_t)&type metadata for ScalarDeceleration, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 88 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Any>, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(Int, Int)>();
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<EndChildGeometries.CodableViewGeometry>, (uint64_t)&type metadata for EndChildGeometries.CodableViewGeometry, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[64 * v8]) {
      memmove(v13, v14, v8 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v8 << 6);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<InterfaceOrientation>, (uint64_t)&type metadata for InterfaceOrientation, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v8]) {
      memmove(v12, v13, v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItem>, (uint64_t)&type metadata for PlatformItem, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 336);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[336 * v8]) {
      memmove(v12, v13, 336 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<(key: Int, value: DragReorderableLayoutCoordinator.ChildFrame)>();
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 56);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[56 * v8]) {
      memmove(v12, v13, 56 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, 56 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<DocumentLaunchScreenAction>, (uint64_t)&type metadata for DocumentLaunchScreenAction, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 48);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[48 * v8]) {
      memmove(v12, v13, 48 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationItemDescription.Group>, (uint64_t)&type metadata for NavigationItemDescription.Group, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 25;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 3);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[8 * v8]) {
      memmove(v13, v14, 8 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<NavigationItemDescription.Item>, (uint64_t)&type metadata for NavigationItemDescription.Item, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for _ContiguousArrayStorage<ClosedRange<CGFloat>>();
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<FocusableFillerBounds>, (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 112);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 112 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_ViewList_ID.Canonical>, MEMORY[0x1E4F3F6D8], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_PlacedSubview>, (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<HostingScrollView.PlatformGroupContainer.SubstitutionCandidate>, (uint64_t)&type metadata for HostingScrollView.PlatformGroupContainer.SubstitutionCandidate, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[40 * v8]) {
      memmove(v12, v13, 40 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<_Preview>, (uint64_t)&type metadata for _Preview, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 120);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[120 * v8]) {
      memmove(v12, v13, 120 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 1;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 5);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[32 * v8]) {
      memmove(v13, v14, 32 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for Binding<TabSidebarCustomization>?(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNullableOptionSet<AccessibilityVisibility>?>, (uint64_t (*)(uint64_t))type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>?, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 12);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  uint64_t v14 = 12 * v8;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[v14]) {
      memmove(v12, v13, v14);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v12, v13, v14);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<TabItem>, (uint64_t)&type metadata for TabItem, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 104);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[104 * v8]) {
      memmove(v12, v13, 104 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<Gradient.Stop>, MEMORY[0x1E4F41728], MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarStorage.Entry.ID>, (uint64_t)&type metadata for ToolbarStorage.Entry.ID, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 88);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[88 * v8]) {
      memmove(v12, v13, 88 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  size_t v15;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<GeneralItem>, (uint64_t)&type metadata for GeneralItem, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 + 31;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 6);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  uint64_t v15 = v8 << 6;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, v15);
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityNodeProxy>, (uint64_t)&type metadata for AccessibilityNodeProxy, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 184);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[184 * v8]) {
      memmove(v12, v13, 184 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, &lazy cache variable for type metadata for _ContiguousArrayStorage<StackItem>, (uint64_t)&type metadata for StackItem, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    uint64_t v12 = v11 - 32;
    if (v11 < 32) {
      uint64_t v12 = v11 - 17;
    }
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v10 + 32;
  uint64_t v14 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8]) {
      memmove(v13, v14, 16 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;

  char v5 = (char)result;
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2) {
        int64_t v7 = a2;
      }
    }
  }
  else
  {
    int64_t v7 = a2;
  }
  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    type metadata accessor for [TabCustomizationID](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<_LazyLayout_PlacedSubview_V1>, (uint64_t)&type metadata for _LazyLayout_PlacedSubview_V1, MEMORY[0x1E4FBBE00]);
    unint64_t v10 = (char *)swift_allocObject();
    int64_t v11 = _swift_stdlib_malloc_size_2(v10);
    *((void *)v10 + 2) = v8;
    *((void *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 72);
  }
  else
  {
    unint64_t v10 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v12 = v10 + 32;
  uint64_t v13 = a4 + 32;
  if (v5)
  {
    if (v10 != a4 || v12 >= &v13[72 * v8]) {
      memmove(v12, v13, 72 * v8);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    swift_arrayInitWithCopy();
  }
  swift_release();
  return v10;
}

void specialized static VariadicViewForestRoot.makeBody(root:lists:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    id v0 = (id)AGSubgraphGetCurrent();
    if (v0)
    {
      uint64_t v1 = v0;
      type metadata accessor for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>();
      lazy protocol witness table accessor for type ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot> and conformance ForestRootBodyAccessor<A>();
      BodyAccessor.makeBody(container:inputs:fields:)();

      return;
    }
    __break(1u);
  }
  _StringGuts.grow(_:)(75);
  v2._object = (void *)0x800000018832C380;
  v2._countAndFlagsBits = 0xD00000000000003DLL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = 0x6F52747365726F46;
  v3._object = (void *)0xEA0000000000746FLL;
  String.append(_:)(v3);
  v4._countAndFlagsBits = 0x6C63206120736920;
  v4._object = (void *)0xEC0000002E737361;
  String.append(_:)(v4);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void type metadata accessor for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>()
{
  if (!lazy cache variable for type metadata for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>)
  {
    lazy protocol witness table accessor for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot();
    unint64_t v0 = type metadata accessor for ForestRootBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ForestRootBodyAccessor<_NavigationSplitReader.ForestRoot>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot()
{
  unint64_t result = lazy protocol witness table cache variable for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot;
  if (!lazy protocol witness table cache variable for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _NavigationSplitReader.ForestRoot and conformance _NavigationSplitReader.ForestRoot);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type NavigationSplitCore and conformance NavigationSplitCore()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationSplitCore and conformance NavigationSplitCore;
  if (!lazy protocol witness table cache variable for type NavigationSplitCore and conformance NavigationSplitCore)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationSplitCore and conformance NavigationSplitCore);
  }
  return result;
}

uint64_t partial apply for closure #2 in static VariadicViewForest._makeView(view:inputs:)(uint64_t *a1)
{
  return closure #2 in static VariadicViewForest._makeView(view:inputs:)(a1, *(_DWORD *)(v1 + 40), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t closure #2 in static VariadicViewForest._makeView(view:inputs:)(uint64_t *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v9 = *((_DWORD *)a1 + 2);
  uint64_t v10 = a1[2];
  uint64_t v11 = a1[5];
  uint64_t v14 = *a1;
  int v15 = v9;
  uint64_t v16 = v10;
  long long v17 = *(_OWORD *)(a1 + 3);
  uint64_t v18 = v11;
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  _ViewListInputs.init(_:options:)();
  LODWORD(v14) = a2;
  uint64_t v12 = static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)((int *)&v14, &v19, a3, a4, a5);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t static VariadicViewForest.ListOutputsTreeVisitor.accumulateOutputs(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  int v28 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  uint64_t v29 = *a2;
  uint64_t v30 = v10;
  uint64_t v12 = a2[5];
  uint64_t v11 = a2[6];
  uint64_t v34 = a2[7];
  uint64_t v35 = v11;
  LODWORD(v11) = *((_DWORD *)a2 + 16);
  uint64_t v31 = a2[9];
  int v32 = *((unsigned __int8 *)a2 + 80);
  int v33 = v11;
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v36 = v40;
  type metadata accessor for VariadicViewForest();
  type metadata accessor for _GraphValue();
  type metadata accessor for TupleView();
  uint64_t v27 = (uint64_t)&v27;
  uint64_t v13 = a2[3];
  uint64_t v14 = a2[4];
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  LODWORD(v40) = v28;
  uint64_t v15 = v29;
  _GraphValue.subscript.getter();
  uint64_t v16 = v30;
  type metadata accessor for _GraphValue();
  int v17 = _GraphValue.value.getter();
  uint64_t v18 = v36;
  LODWORD(v40) = v17;
  uint64_t v41 = v15;
  int v42 = v9;
  uint64_t v43 = v16;
  uint64_t v44 = v13;
  uint64_t v45 = v14;
  uint64_t v46 = v12;
  uint64_t v47 = v35;
  uint64_t v48 = v34;
  int v49 = v33;
  uint64_t v50 = v31;
  char v51 = v32;
  uint64_t v52 = 0;
  uint64_t v53 = MEMORY[0x1E4FBC860];
  uint64_t v19 = *(void *)(v36 + 16);
  if (v19)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v20 = (uint64_t *)(v18 + 48);
    do
    {
      uint64_t v21 = *(v20 - 1);
      uint64_t v22 = *v20;
      v20 += 3;
      uint64_t v52 = AGTupleElementOffset();
      uint64_t v23 = type metadata accessor for VariadicViewForest.ListOutputsTreeVisitor();
      uint64_t WitnessTable = swift_getWitnessTable();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(WitnessTable + 8))(v21, v21, v22, v23, WitnessTable);
      --v19;
    }
    while (v19);
    swift_bridgeObjectRelease();
    uint64_t v25 = v53;
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v25 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v25;
}

double protocol witness for ViewTypeVisitor.visit<A>(type:) in conformance VariadicViewForest<A, B>.ListOutputsTreeVisitor()
{
  *(void *)&double result = VariadicViewForest.ListOutputsTreeVisitor.visit<A>(type:)().n128_u64[0];
  return result;
}

uint64_t type metadata accessor for VariadicViewForest.ListOutputsTreeVisitor()
{
  return __swift_instantiateGenericMetadata();
}

__n128 VariadicViewForest.ListOutputsTreeVisitor.visit<A>(type:)()
{
  uint64_t v1 = v0;
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  static View.makeDebuggableViewList(view:inputs:)();
  Swift::String v2 = *(char **)(v0 + 104);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    Swift::String v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v2 + 2) + 1, 1, v2);
  }
  unint64_t v4 = *((void *)v2 + 2);
  unint64_t v3 = *((void *)v2 + 3);
  if (v4 >= v3 >> 1) {
    Swift::String v2 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v3 > 1), v4 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v4 + 1;
  char v5 = &v2[72 * v4];
  *((_OWORD *)v5 + 2) = v7;
  __n128 result = v8;
  v5[96] = v11;
  *((_OWORD *)v5 + 4) = v9;
  *((_OWORD *)v5 + 5) = v10;
  *((__n128 *)v5 + 3) = v8;
  *(void *)(v1 + 104) = v2;
  return result;
}

uint64_t type metadata accessor for VariadicViewForest()
{
  return __swift_instantiateGenericMetadata();
}

double static UpdateViewDestinationViewModifier._makeView(modifier:inputs:body:)@<D0>(uint64_t a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  uint64_t v6 = *(void *)a1;
  LODWORD(v7) = *(_DWORD *)(a1 + 8);
  a2(&v8);
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  swift_release_n();
  if (AGWeakAttributeGetAttribute() != *MEMORY[0x1E4F4E7A0]) {
    AGGraphCreateOffsetAttribute2();
  }
  lazy protocol witness table accessor for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v4 = swift_release();
  MEMORY[0x1F4188790](v4);
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  outlined consume of Text.LineStyle?(v6, v7);
  *(void *)a3 = v8;
  double result = v9;
  a3[1] = v9;
  return result;
}

double static _AllowsHitTestingModifier._makeView(modifier:inputs:body:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, double *a3@<X8>)
{
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  long long v4 = *(_OWORD *)(a2 + 64);
  v10[3] = *(_OWORD *)(a2 + 48);
  v10[4] = v4;
  v10[0] = *(_OWORD *)a2;
  long long v5 = *(_OWORD *)(a2 + 32);
  v10[1] = *(_OWORD *)(a2 + 16);
  v10[2] = v5;
  uint64_t v6 = *a1;
  int v11 = *(_DWORD *)(a2 + 80);
  lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier();
  static _RendererEffect._makeRendererEffect(effect:inputs:body:)();
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    type metadata accessor for _GraphValue<_AllowsHitTestingModifier>(0, &lazy cache variable for type metadata for _GraphValue<_AllowsHitTestingModifier>, (uint64_t)&type metadata for _AllowsHitTestingModifier, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    _ViewOutputs.viewResponders()();
    type metadata accessor for AllowsHitTestingResponder();
    *(unsigned char *)(swift_allocObject() + 216) = 1;
    outlined retain of _ViewInputs((uint64_t)v10);
    DefaultLayoutViewResponder.init(inputs:)();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _ViewOutputs.subscript.setter();
  }
  specialized static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)(v6, (uint64_t)v10);
  *(void *)a3 = v8;
  double result = v9;
  a3[1] = v9;
  return result;
}

unint64_t lazy protocol witness table accessor for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier;
  if (!lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _AllowsHitTestingModifier and conformance _AllowsHitTestingModifier);
  }
  return result;
}

uint64_t specialized static ViewModifier._makeAccessibilityHitTestingModifier(modifier:inputs:outputs:)(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 48);
  int v6 = *(_DWORD *)(a2 + 56);
  Swift::String v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F3F590];
  type metadata accessor for _GraphValue<_AllowsHitTestingModifier>(0, &lazy cache variable for type metadata for _GraphValue<_AllowsHitTestingModifier>, (uint64_t)&type metadata for _AllowsHitTestingModifier, MEMORY[0x1E4F3F590]);
  uint64_t v3 = MEMORY[0x1E4FBB390];
  _GraphValue.subscript.getter();
  type metadata accessor for _GraphValue<_AllowsHitTestingModifier>(0, &lazy cache variable for type metadata for _GraphValue<Bool>, v3, v2);
  _GraphValue.value.getter();
  outlined retain of [Text.Modifier]((uint64_t)&v5);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _GraphValue<_AllowsHitTestingModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t type metadata accessor for AllowsHitTestingResponder()
{
  uint64_t result = type metadata singleton initialization cache for AllowsHitTestingResponder;
  if (!type metadata singleton initialization cache for AllowsHitTestingResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter;
  if (!lazy protocol witness table cache variable for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowsHitTestingFilter and conformance AllowsHitTestingFilter);
  }
  return result;
}

double static UpdateViewDestinationRequestProcessor._makeView(modifier:inputs:body:)@<D0>(long long *a1@<X1>, void (*a2)(uint64_t *__return_ptr)@<X2>, double *a3@<X8>)
{
  long long v4 = a1[3];
  long long v5 = a1[1];
  long long v23 = a1[2];
  long long v24 = v4;
  long long v6 = a1[3];
  long long v25 = a1[4];
  long long v7 = a1[1];
  long long v21 = *a1;
  long long v22 = v7;
  long long v15 = v23;
  long long v16 = v6;
  long long v17 = a1[4];
  int v26 = *((_DWORD *)a1 + 20);
  int v18 = *((_DWORD *)a1 + 20);
  long long v13 = v21;
  long long v14 = v5;
  a2(&v19);
  long long v13 = v21;
  long long v14 = v22;
  long long v15 = v23;
  outlined retain of _ViewInputs((uint64_t)&v21);
  outlined retain of _GraphInputs((uint64_t)&v13);
  lazy protocol witness table accessor for type NavigationAuthority.SeedInputs and conformance NavigationAuthority.SeedInputs();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v13);
  outlined release of _ViewInputs((uint64_t)&v21);
  outlined retain of _ViewInputs((uint64_t)&v21);
  lazy protocol witness table accessor for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v21);
  uint64_t v8 = v11;
  uint64_t v9 = v12;
  uint64_t v11 = v24;
  LODWORD(v12) = DWORD2(v24);
  outlined retain of [Text.Modifier]((uint64_t)&v11);
  PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
  swift_bridgeObjectRelease();
  outlined consume of Text.LineStyle?(v8, v9);
  *(void *)a3 = v19;
  double result = v20;
  a3[1] = v20;
  return result;
}

uint64_t outlined retain of _GraphInputs(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of _GraphInputs(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey;
  if (!lazy protocol witness table cache variable for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationAuthority.ListSelectionCanonicalIDKey and conformance NavigationAuthority.ListSelectionCanonicalIDKey);
  }
  return result;
}

double static TooltipModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(long long *__return_ptr)@<X2>, void *a4@<X8>)
{
  uint64_t v41 = *MEMORY[0x1E4F143B8];
  long long v5 = a2[3];
  long long v6 = a2[1];
  long long v37 = a2[2];
  long long v38 = v5;
  long long v7 = a2[3];
  long long v39 = a2[4];
  long long v8 = a2[1];
  long long v35 = *a2;
  long long v36 = v8;
  long long v31 = v37;
  long long v32 = v7;
  long long v33 = a2[4];
  int v9 = *a1;
  int v40 = *((_DWORD *)a2 + 20);
  int v34 = *((_DWORD *)a2 + 20);
  long long v29 = v35;
  long long v30 = v6;
  a3(&v24);
  LODWORD(v29) = v9;
  _sSSSgMaTm_1(0, &lazy cache variable for type metadata for _GraphValue<TooltipModifier>, (uint64_t)&type metadata for TooltipModifier, MEMORY[0x1E4F3F590]);
  unsigned int v10 = _GraphValue.value.getter();
  long long v31 = v37;
  long long v32 = v38;
  long long v33 = v39;
  int v34 = v40;
  long long v29 = v35;
  long long v30 = v36;
  *(void *)&long long v29 = __PAIR64__(_ViewInputs.environment.getter(), v10);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText();
  unsigned int v11 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs((uint64_t)&v35);
  lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
  PropertyList.subscript.getter();
  uint64_t v12 = outlined release of _ViewInputs((uint64_t)&v35);
  if ((v29 & 4) != 0)
  {
    MEMORY[0x1F4188790](v12);
    uint64_t v25 = v38;
    int v26 = DWORD2(v38);
    *(void *)&long long v29 = v38;
    DWORD2(v29) = DWORD2(v38);
    MEMORY[0x1F4188790](v13);
    outlined retain of [Text.Modifier]((uint64_t)&v25);
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
  }
  uint64_t v27 = v38;
  int v28 = DWORD2(v38);
  *(void *)&long long v29 = v38;
  DWORD2(v29) = DWORD2(v38);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (static SemanticFeature.isEnabled.getter() & 1) != 0)
  {
    *(void *)&long long v29 = v27;
    DWORD2(v29) = v28;
    uint64_t v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v14)
    {
      *(void *)&long long v29 = v27;
      DWORD2(v29) = v28;
      MEMORY[0x1F4188790](v14);
      outlined retain of [Text.Modifier]((uint64_t)&v27);
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
      type metadata accessor for TooltipResponder();
      uint64_t v15 = swift_allocObject();
      *(_DWORD *)(v15 + 216) = *MEMORY[0x1E4F4E7A0];
      *(void *)(v15 + 224) = 0;
      *(void *)(v15 + 232) = 0;
      outlined retain of _ViewInputs((uint64_t)&v35);
      swift_retain();
      static CGSize.invalidValue.getter();
      *(void *)(v15 + 240) = v16;
      *(void *)(v15 + 248) = v17;
      ViewTransform.init()();
      swift_release();
      long long v31 = v37;
      long long v32 = v38;
      long long v33 = v39;
      int v34 = v40;
      long long v29 = v35;
      long long v30 = v36;
      uint64_t v18 = DefaultLayoutViewResponder.init(inputs:)();
      long long v29 = v24;
      unsigned int v19 = _ViewOutputs.viewResponders()();
      long long v31 = v37;
      long long v32 = v38;
      long long v33 = v39;
      int v34 = v40;
      long long v29 = v35;
      long long v30 = v36;
      unsigned int v20 = _ViewInputs.animatedPosition()();
      long long v31 = v37;
      long long v32 = v38;
      long long v33 = v39;
      int v34 = v40;
      long long v29 = v35;
      long long v30 = v36;
      unsigned int v21 = _ViewInputs.animatedSize()();
      long long v31 = v37;
      long long v32 = v38;
      long long v33 = v39;
      int v34 = v40;
      long long v29 = v35;
      long long v30 = v36;
      int v22 = _ViewInputs.transform.getter();
      *(void *)&long long v29 = v18;
      *((void *)&v29 + 1) = __PAIR64__(v11, v19);
      *(void *)&long long v30 = __PAIR64__(v21, v20);
      DWORD2(v30) = v22;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for [ViewResponder]();
      lazy protocol witness table accessor for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater();
      Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      LOBYTE(v29) = 0;
      _ViewOutputs.subscript.setter();
    }
  }
  *a4 = v24;
  double result = *((double *)&v24 + 1);
  a4[1] = *((void *)&v24 + 1);
  return result;
}

uint64_t TooltipModifier.TooltipResponderUpdater.updateValue()()
{
  uint64_t v1 = *(void *)v0;
  *(_DWORD *)(*(void *)v0 + 216) = v0[3];
  AGGraphGetValue();
  char v3 = v2;
  AGGraphGetValue();
  char v5 = v4;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v8 = *Value;
  uint64_t v9 = Value[1];
  uint64_t v10 = Value[2];
  uint64_t v11 = Value[3];
  uint64_t v12 = Value[4];
  if ((v3 & 1) != 0
    || (v5 & 1) != 0
    || (v7 & 1) != 0
    || (type metadata accessor for [ViewResponder](), !AGGraphGetOutputValue()))
  {
    uint64_t v13 = swift_retain();
    *(double *)(v1 + 224) = MEMORY[0x18C10C240](v13);
    *(void *)(v1 + 232) = v14;
    *(double *)(v1 + 240) = MEMORY[0x18C114450]();
    *(void *)(v1 + 248) = v15;
    *(void *)(v1 + 256) = v8;
    *(void *)(v1 + 264) = v9;
    *(void *)(v1 + 272) = v10;
    *(void *)(v1 + 280) = v11;
    *(void *)(v1 + 288) = v12;
    swift_retain();
    swift_release();
  }
  else
  {
    swift_retain();
  }
  type metadata accessor for [ViewResponder]();
  AGGraphGetValue();
  if (v16)
  {
    swift_bridgeObjectRetain_n();
    MultiViewResponder.children.setter();
    swift_bridgeObjectRelease();
  }
  if (AGGraphGetOutputValue())
  {
    return swift_release();
  }
  else
  {
    _sSSSgMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v18 = swift_allocObject();
    *(_OWORD *)(v18 + 16) = xmmword_188351940;
    *(void *)(v18 + 32) = v1;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

void _sSSSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSSSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSSSgMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _sSSSgMaTm_3(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

double static ContextMenuModifierCore._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t, long long *)@<X2>, unint64_t a4@<X4>, uint64_t a5@<X5>, void *a6@<X8>)
{
  uint64_t v73 = *MEMORY[0x1E4F143B8];
  int v10 = *a1;
  long long v11 = a2[3];
  long long v69 = a2[2];
  long long v70 = v11;
  long long v71 = a2[4];
  int v72 = *((_DWORD *)a2 + 20);
  long long v12 = a2[1];
  long long v67 = *a2;
  long long v68 = v12;
  int v48 = DWORD2(v11);
  uint64_t v47 = v11;
  char v13 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  *(void *)&long long v60 = v47;
  DWORD2(v60) = v48;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v13 & 1) != 0 || (v14)
  {
    uint64_t v43 = a6;
    uint64_t v16 = v67;
    outlined retain of _ViewInputs((uint64_t)&v67);
    lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
    uint64_t v41 = v16;
    PropertyList.subscript.getter();
    outlined release of _ViewInputs((uint64_t)&v67);
    int v40 = v60;
    UniqueID.init()();
    uint64_t v39 = v60;
    closure #1 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)((uint64_t)&v67, v13 & 1, v60, a3);
    int v42 = v10;
    LODWORD(v60) = v10;
    type metadata accessor for ContextMenuModifierCore();
    uint64_t v38 = type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    *(_OWORD *)&v55[16] = v70;
    *(_OWORD *)&v55[32] = v71;
    *(_DWORD *)&v55[48] = v72;
    long long v53 = v67;
    long long v54 = v68;
    *(_OWORD *)uint64_t v55 = v69;
    id v18 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v53, 1, (uint64_t)&v60);
    *(void *)&long long v53 = v60;
    DWORD2(v53) = DWORD2(v60);
    *(void *)&long long v54 = v61;
    DWORD2(v54) = DWORD2(v61);
    *(void *)uint64_t v55 = *(void *)v62;
    *(_OWORD *)&v55[8] = *(_OWORD *)&v62[8];
    *(_OWORD *)&v55[24] = *(_OWORD *)&v62[24];
    *(_OWORD *)&v55[40] = *(_OWORD *)&v62[40];
    uint64_t v56 = v63;
    int v57 = v64;
    char v58 = v65;
    int v59 = v66;
    MEMORY[0x1F4188790](v18);
    int v49 = &type metadata for AllPlatformItemListFlags;
    unint64_t v50 = a4;
    char v51 = &protocol witness table for AllPlatformItemListFlags;
    uint64_t v52 = a5;
    unint64_t v36 = type metadata accessor for PlatformItemListGenerator();
    uint64_t WitnessTable = swift_getWitnessTable();
    outlined retain of _ViewInputs((uint64_t)&v67);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v53, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)&v34, v36, MEMORY[0x1E4FBC248], v19, MEMORY[0x1E4FBC278], v20);
    unsigned int v21 = (void *)v53;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    unsigned int v22 = v49;
    if (v13)
    {
      long long v23 = (ValueMetadata *)v46;
      unsigned int v25 = DWORD2(v46);
      unsigned int v24 = HIDWORD(v46);
      long long v60 = v46;
      if ((_ViewOutputs.subscript.getter() & 0x100000000) == 0)
      {
        LODWORD(v60) = v42;
        LODWORD(v38) = _GraphValue.value.getter();
        *(_OWORD *)uint64_t v62 = v69;
        *(_OWORD *)&v62[16] = v70;
        *(_OWORD *)&v62[32] = v71;
        *(_DWORD *)&v62[48] = v72;
        long long v60 = v67;
        long long v61 = v68;
        int v49 = v23;
        unint64_t v50 = __PAIR64__(v24, v25);
        type metadata accessor for ContextMenuResponder(0);
        uint64_t v26 = swift_allocObject();
        *(void *)(v26 + 308) = 0;
        *(unsigned char *)(v26 + 316) = 1;
        *(_DWORD *)(v26 + 320) = 0;
        *(unsigned char *)(v26 + 324) = 1;
        *(void *)(v26 + 296) = 0;
        *(_DWORD *)(v26 + 304) = 0;
        outlined retain of _ViewInputs((uint64_t)&v67);
        outlined retain of _ViewInputs((uint64_t)&v67);
        swift_bridgeObjectRetain();
        swift_retain();
        *(void *)(v26 + 296) = AGCreateWeakAttribute();
        swift_release();
        *(_OWORD *)&v55[16] = v70;
        *(_OWORD *)&v55[32] = v71;
        *(_DWORD *)&v55[48] = v72;
        long long v53 = v67;
        long long v54 = v68;
        *(_OWORD *)uint64_t v55 = v69;
        char v44 = 0;
        uint64_t v45 = v39;
        uint64_t v27 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v53, &v45);
        ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(v27, (uint64_t)&v53);
        long long v60 = v53;
        long long v61 = v54;
        *(void *)uint64_t v62 = *(void *)v55;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        type metadata accessor for [ViewResponder](0, (unint64_t *)&lazy cache variable for type metadata for [ViewResponder], MEMORY[0x1E4F3F7E8], MEMORY[0x1E4FBB320]);
        lazy protocol witness table accessor for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter();
        Attribute.init<A>(body:value:flags:update:)();
        outlined release of ContextMenuResponderFilter((uint64_t)&v53);
        LOBYTE(v60) = 0;
        uint64_t v28 = _ViewOutputs.subscript.setter();
        if ((v40 & 1) == 0)
        {
          *(void *)&long long v60 = v47;
          DWORD2(v60) = v48;
          MEMORY[0x1F4188790](v28);
          unint64_t v36 = v29;
          outlined retain of [Text.Modifier]((uint64_t)&v47);
          PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
          uint64_t v28 = swift_bridgeObjectRelease();
        }
        *(void *)&long long v60 = v47;
        DWORD2(v60) = v48;
        MEMORY[0x1F4188790](v28);
        unint64_t v34 = a4;
        uint64_t v35 = a5;
        LODWORD(v36) = v42;
        outlined retain of [Text.Modifier]((uint64_t)&v47);
        PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
        swift_bridgeObjectRelease();
      }
    }
    static Semantics.v3.getter();
    if ((isLinkedOnOrAfter(_:)() & 1) == 0)
    {
      outlined retain of _ViewInputs((uint64_t)&v67);
      lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
      PropertyList.subscript.getter();
      uint64_t v30 = outlined release of _ViewInputs((uint64_t)&v67);
      MEMORY[0x1F4188790](v30);
      unint64_t v34 = a4;
      uint64_t v35 = a5;
      unint64_t v36 = __PAIR64__(v31, v22);
      *(void *)&long long v60 = v47;
      DWORD2(v60) = v48;
      MEMORY[0x1F4188790](v32);
      outlined retain of [Text.Modifier]((uint64_t)&v47);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
    }
    long long v33 = v43;
    *uint64_t v43 = v46;
    double result = *((double *)&v46 + 1);
    v33[1] = *((void *)&v46 + 1);
  }
  else
  {
    *(_OWORD *)uint64_t v62 = v69;
    *(_OWORD *)&v62[16] = v70;
    *(_OWORD *)&v62[32] = v71;
    *(_DWORD *)&v62[48] = v72;
    long long v60 = v67;
    long long v61 = v68;
    ((void (*)(void))a3)();
  }
  return result;
}

uint64_t outlined retain of [Text.Modifier](uint64_t a1)
{
  return a1;
}

double static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, long long *a2@<X1>, void (*a3)(uint64_t *__return_ptr)@<X2>, uint64_t a4@<X4>, double *a5@<X8>)
{
  long long v7 = a2[3];
  long long v8 = a2[1];
  long long v23 = a2[2];
  long long v24 = v7;
  long long v9 = a2[3];
  long long v25 = a2[4];
  long long v10 = a2[1];
  long long v21 = *a2;
  long long v22 = v10;
  v19[2] = v23;
  v19[3] = v9;
  v19[4] = a2[4];
  int v11 = *a1;
  int v26 = *((_DWORD *)a2 + 20);
  int v20 = *((_DWORD *)a2 + 20);
  v19[0] = v21;
  v19[1] = v8;
  a3(&v17);
  outlined retain of _ViewInputs((uint64_t)&v21);
  lazy protocol witness table accessor for type HasKeyboardShortcut and conformance HasKeyboardShortcut();
  PropertyList.subscript.getter();
  outlined release of _ViewInputs((uint64_t)&v21);
  if (LOBYTE(v19[0]) == 1)
  {
    LODWORD(v19[0]) = v11;
    type metadata accessor for KeyboardShortcutBindingBehavior();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(a4 - 8) + 64)) {
      closure #1 in static KeyboardShortcutBindingBehavior._makeView(modifier:inputs:body:)(1, a4);
    }
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    v15[2] = v23;
    v15[3] = v24;
    v15[4] = v25;
    int v16 = v26;
    v15[0] = v21;
    v15[1] = v22;
    id v13 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)v15, 1, (uint64_t)v19);
    *(void *)&v15[0] = v24;
    DWORD2(v15[0]) = DWORD2(v24);
    MEMORY[0x1F4188790](v13);
    outlined retain of _ViewInputs((uint64_t)&v21);
    outlined retain of [Text.Modifier]((uint64_t)v15);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    outlined release of PlatformItemListGenerator<TextPlatformItemListFlags, A>((void **)v19);
  }
  *(void *)a5 = v17;
  double result = v18;
  a5[1] = v18;
  return result;
}

uint64_t outlined release of _ViewInputs(uint64_t a1)
{
  return a1;
}

uint64_t UIViewSnapshotResponder.init(inputs:space:displayList:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_OWORD *)(v2 + 240) = 0u;
  *(void *)(v2 + 256) = 0;
  *(unsigned char *)(v2 + 264) = 1;
  *(_DWORD *)(v2 + 272) = 0;
  *(_DWORD *)(v2 + 268) = 0;
  *(void *)(v2 + 280) = 0;
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 216) = v3;
  swift_retain();
  *(void *)(v2 + 268) = AGCreateWeakAttribute();
  swift_release();
  return DefaultLayoutViewResponder.init(inputs:)();
}

id PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)@<X0>(int a1@<W0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  long long v15 = *(_OWORD *)(a2 + 5);
  long long v16 = *(_OWORD *)(a2 + 3);
  long long v14 = *(_OWORD *)(a2 + 7);
  uint64_t v10 = a2[9];
  int v11 = *((_DWORD *)a2 + 20);
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    int v13 = *MEMORY[0x1E4F4E7A0];
    *(void *)a4 = result;
    *(_DWORD *)(a4 + 8) = a1;
    *(void *)(a4 + 16) = v7;
    *(_DWORD *)(a4 + 24) = v8;
    *(void *)(a4 + 32) = v9;
    *(_OWORD *)(a4 + 40) = v16;
    *(_OWORD *)(a4 + 56) = v15;
    *(_OWORD *)(a4 + 72) = v14;
    *(void *)(a4 + 88) = v10;
    *(_DWORD *)(a4 + 96) = v11;
    *(unsigned char *)(a4 + 100) = a3 & 1;
    *(_DWORD *)(a4 + 104) = v13;
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ProvidesContextMenuInteraction()
{
  lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  PropertyList.subscript.getter();
  return v1;
}

uint64_t type metadata accessor for ContextMenuResponder(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ContextMenuResponder);
}

uint64_t outlined release of ContextMenuResponderFilter(uint64_t a1)
{
  return a1;
}

unint64_t lazy protocol witness table accessor for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter;
  if (!lazy protocol witness table cache variable for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContextMenuResponderFilter and conformance ContextMenuResponderFilter);
  }
  return result;
}

uint64_t ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)@<X0>(uint64_t a1@<X3>, uint64_t a2@<X8>)
{
  closure #1 in ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(1);
  int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
  int v9 = _ViewOutputs.viewResponders()();
  swift_bridgeObjectRelease();
  int v7 = _ViewInputs.animatedPosition()();
  int v6 = _ViewInputs.transform.getter();
  int v5 = _ViewInputs.animatedSize()();
  int v4 = _ViewInputs.containerPosition.getter();
  swift_getKeyPath();
  int v2 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a2 = OffsetAttribute2;
  *(_DWORD *)(a2 + 4) = v9;
  *(_DWORD *)(a2 + 8) = v7;
  *(_DWORD *)(a2 + 12) = v6;
  *(_DWORD *)(a2 + 16) = v5;
  *(_DWORD *)(a2 + 20) = v4;
  *(_DWORD *)(a2 + 24) = v2;
  *(void *)(a2 + 32) = a1;
  return result;
}

uint64_t closure #1 in ContextMenuResponderFilter.init<A>(modifier:inputs:outputs:responder:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for ContextMenuModifierCore();
  uint64_t v3 = a1 + *(int *)(v2 + 36);
  v7[2] = v2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v3, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t closure #1 in static ContextMenuModifierCore._makeView(modifier:inputs:body:)(uint64_t a1, char a2, uint64_t a3, void (*a4)(uint64_t, long long *))
{
  uint64_t v24 = *MEMORY[0x1E4F143B8];
  long long v8 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v21[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)long long v22 = v8;
  *(_OWORD *)&v22[16] = *(_OWORD *)(a1 + 64);
  int v23 = *(_DWORD *)(a1 + 80);
  long long v9 = *(_OWORD *)(a1 + 16);
  long long v20 = *(_OWORD *)a1;
  *(_OWORD *)long long v21 = v9;
  LOBYTE(v16) = 1;
  outlined retain of _ViewInputs(a1);
  lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey();
  PropertyList.subscript.setter();
  if (a2)
  {
    long long v10 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)double v18 = v10;
    *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 64);
    int v19 = *(_DWORD *)(a1 + 80);
    long long v11 = *(_OWORD *)(a1 + 16);
    long long v16 = *(_OWORD *)a1;
    *(_OWORD *)uint64_t v17 = v11;
    int v12 = _ViewInputs.transform.getter();
    long long v13 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 32);
    *(_OWORD *)double v18 = v13;
    *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 64);
    int v19 = *(_DWORD *)(a1 + 80);
    *(_OWORD *)uint64_t v17 = *(_OWORD *)(a1 + 16);
    LODWORD(v16) = v12;
    DWORD1(v16) = _ViewInputs.position.getter();
    *((void *)&v16 + 1) = a3;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
    Attribute.init<A>(body:value:flags:update:)();
    _ViewInputs.transform.setter();
  }
  *(void *)&long long v16 = v20;
  DWORD2(v16) = DWORD2(v20);
  *(void *)uint64_t v17 = *(void *)v21;
  *(_OWORD *)&v17[8] = *(_OWORD *)&v21[8];
  *(void *)&v17[24] = *(void *)&v21[24];
  *(void *)double v18 = *(void *)v22;
  *(_OWORD *)&v18[8] = *(_OWORD *)&v22[8];
  *(void *)&v18[24] = *(void *)&v22[24];
  int v19 = v23;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v14 = swift_bridgeObjectRetain();
  a4(v14, &v16);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform()
{
  unint64_t result = lazy protocol witness table cache variable for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform;
  if (!lazy protocol witness table cache variable for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey()
{
  unint64_t result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey;
  if (!lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HasContextMenuInteractionKey and conformance HasContextMenuInteractionKey);
  }
  return result;
}

uint64_t type metadata accessor for TooltipResponder()
{
  uint64_t result = type metadata singleton initialization cache for TooltipResponder;
  if (!type metadata singleton initialization cache for TooltipResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText()
{
  unint64_t result = lazy protocol witness table cache variable for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText;
  if (!lazy protocol witness table cache variable for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipModifier.ResolveText and conformance TooltipModifier.ResolveText);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater()
{
  unint64_t result = lazy protocol witness table cache variable for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater;
  if (!lazy protocol witness table cache variable for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipModifier.TooltipResponderUpdater and conformance TooltipModifier.TooltipResponderUpdater);
  }
  return result;
}

void **outlined release of PlatformItemListGenerator<TextPlatformItemListFlags, A>(void **a1)
{
  uint64_t v2 = *a1;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  return a1;
}

uint64_t associated type witness table accessor for ImageAccessibilityProvider.Body : View in SwiftUIImageAccessibilityProvider()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for PlatformViewRepresentableContext()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t type metadata completion function for PlatformViewLayoutEngine()
{
  uint64_t result = type metadata accessor for ViewLeafView();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void type metadata accessor for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>()
{
  if (!lazy cache variable for type metadata for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>)
  {
    type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(255, &lazy cache variable for type metadata for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>, &lazy cache variable for type metadata for StyleContextWriter<MultimodalListGridContext>, MEMORY[0x1E4F40EA8], MEMORY[0x1E4F40EA0]);
    lazy protocol witness table accessor for type ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for LazyVGrid();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LazyVGrid<ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_VariadicView_Children, StyleContextWriter<MultimodalListGridContext>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  if (!*a2)
  {
    type metadata accessor for StyleContextWriter<MultimodalListContext>(255, a3, a4, a5, MEMORY[0x1E4F40318]);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

__n128 __swift_memcpy217_8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  __n128 result = *(__n128 *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 176);
  long long v11 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 201) = *(_OWORD *)(a2 + 201);
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 192) = v11;
  *(__n128 *)(a1 + 160) = result;
  return result;
}

uint64_t closure #1 in View.contextMenu<A>(menuItems:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  long long v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v21 - v16;
  a1(v15);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  unint64_t v18 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  v21[2] = a3;
  v21[3] = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  int v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ShouldRenderAsTemplate()
{
  lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate()
{
  unint64_t result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate;
  if (!lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate);
  }
  return result;
}

double one-time initialization function for defaultValue()
{
  double result = 0.0;
  unk_1EB3082A1 = 0u;
  xmmword_1EB308288 = 0u;
  unk_1EB308298 = 0u;
  xmmword_1EB308268 = 0u;
  unk_1EB308278 = 0u;
  static SheetPreference.defaultuint64_t Value = 0u;
  unk_1EB308258 = 0u;
  byte_1EB3082B1 = 2;
  return result;
}

{
  double result;

  double result = 0.0;
  static ToolbarKey.defaultuint64_t Value = 0u;
  *(_OWORD *)&qword_1EB308398 = 0u;
  qword_1EB3083A8 = 0;
  unk_1EB3083B0 = MEMORY[0x1E4FBC860];
  byte_1EB3083B8 = 1;
  qword_1EB3083C0 = MEMORY[0x1E4FBC870];
  return result;
}

{
  double result;

  double result = 0.0;
  static PPTTestCaseEnvironmentKey.defaultuint64_t Value = xmmword_18834BB90;
  qword_1EB3080B8 = 0;
  unk_1EB3080C0 = 0;
  qword_1EB3080B0 = 0;
  dword_1EB3080C8 = 0;
  return result;
}

{
  double result;

  static PresentationOptionsPreferenceKey.defaultuint64_t Value = MEMORY[0x1E4FBC870];
  double result = 0.0;
  unk_1EB308410 = 0u;
  unk_1EB308420 = 0u;
  word_1EB308430 = 1542;
  qword_1EB308438 = 2;
  word_1EB308440 = 3;
  byte_1EB308442 = 0;
  qword_1EB308448 = 0;
  byte_1EB308450 = 1;
  qword_1EB308458 = 0;
  byte_1EB308460 = 1;
  xmmword_1EB308468 = 0u;
  unk_1EB308478 = 0u;
  unk_1EB308481 = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  static ToolbarContentKey.defaultuint64_t Value = 0u;
  *(_OWORD *)&qword_1E90FC278 = 0u;
  qword_1E90FC288 = 0;
  unk_1E90FC290 = MEMORY[0x1E4FBC860];
  byte_1E90FC298 = 1;
  qword_1E90FC2A0 = MEMORY[0x1E4FBC870];
  return result;
}

{
  double result;

  double result = 0.0;
  xmmword_1E9008780 = 0u;
  unk_1E9008790 = 0u;
  xmmword_1E9008760 = 0u;
  unk_1E9008770 = 0u;
  static EnvironmentValues.SearchFocusContextKey.defaultuint64_t Value = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  static EffectiveListRowInsetsKey.defaultuint64_t Value = 0u;
  unk_1E9015DC0 = 0u;
  return result;
}

{
  double result;

  static NavigationTransitionKey.defaultuint64_t Value = 0u;
  *(_OWORD *)algn_1E90FC110 = 0u;
  *(void *)&double result = 1;
  xmmword_1E90FC120 = xmmword_18834FC50;
  return result;
}

{
  double result;

  double result = 0.0;
  static ListRowInsetsKey.defaultuint64_t Value = 0u;
  unk_1E8FF73E0 = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  xmmword_1E90FC3D0 = 0u;
  unk_1E90FC3E0 = 0u;
  static DropOntoTraitKey.defaultuint64_t Value = 0u;
  return result;
}

{
  double result;

  qword_1E8FFE398 = 0;
  double result = 0.0;
  static ToolbarItemPlacementKey.defaultuint64_t Value = 0u;
  unk_1E8FFE388 = 0u;
  byte_1E8FFE3A0 = 2;
  return result;
}

{
  double result;

  qword_1E9033A50 = 0;
  double result = 0.0;
  xmmword_1E9033A30 = 0u;
  unk_1E9033A40 = 0u;
  xmmword_1E9033A10 = 0u;
  unk_1E9033A20 = 0u;
  static ControlGroupCollapsedViewKey.defaultuint64_t Value = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  xmmword_1E9035040 = 0u;
  unk_1E9035050 = 0u;
  xmmword_1E9035020 = 0u;
  unk_1E9035030 = 0u;
  xmmword_1E9035000 = 0u;
  unk_1E9035010 = 0u;
  xmmword_1E9034FE0 = 0u;
  unk_1E9034FF0 = 0u;
  static _IdentifiedViewsKey.defaultuint64_t Value = 0u;
  *(_OWORD *)algn_1E9034FD0 = 0u;
  byte_1E9035060 = 2;
  return result;
}

{
  double result;

  qword_1E9036520 = 0;
  double result = 0.0;
  static TextInputValidationKey.defaultuint64_t Value = 0u;
  *(_OWORD *)algn_1E9036510 = 0u;
  return result;
}

{
  double result;

  double result = 0.0;
  xmmword_1E9038610 = 0u;
  unk_1E9038620 = 0u;
  xmmword_1E90385F0 = 0u;
  unk_1E9038600 = 0u;
  static EnvironmentValues.ToolbarUpdateContextKey.defaultuint64_t Value = 0u;
  unk_1E90385E0 = 0u;
  return result;
}

{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  double result;
  _OWORD v4[2];
  long long v5;

  unint64_t v0 = type metadata accessor for UIListContentConfiguration();
  MEMORY[0x1F4188790](v0 - 8);
  long long v2 = (char *)v4 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  static UIListContentConfiguration.header()();
  specialized HeaderFooterConfiguration.Values.init(_:)((uint64_t)v2, (uint64_t *)v4);
  static HeaderFooterConfigurationKey.defaultuint64_t Value = 0;
  qword_1E9039740 = 0;
  word_1E9039748 = 0;
  *(_OWORD *)&qword_1E9039750 = v4[0];
  unk_1E9039760 = v4[1];
  double result = *(double *)&v5;
  unk_1E9039770 = v5;
  return result;
}

{
  double result;

  double result = 0.0;
  xmmword_1E90FBEC8 = 0u;
  unk_1E90FBED8 = 0u;
  static FocusDelegationPreferenceKey.defaultuint64_t Value = 0u;
  qword_1E90FBEE8 = 1;
  dword_1E90FBEF0 = 0;
  return result;
}

uint64_t OutsetByRowInsetsIfNecessary.OutsetLayout.placement(of:in:)()
{
  PlacementContext.proposedSize.getter();
  PlacementContext.size.getter();
  char v0 = *(unsigned char *)v5;
  if (*(unsigned char *)v5)
  {
    EdgeInsets.negatedInsets.getter();
    static Edge.Set.vertical.getter();
    EdgeInsets.in(_:)();
    _ProposedSize.inset(by:)();
  }
  LayoutProxy.size(in:)();
  if ((v0 & 1) != 0 && (double v2 = v1 - v5[1], v2 > 0.0) && (EdgeInsets.vertical.getter(), v3 >= v2))
  {
    static UnitPoint.topTrailing.getter();
    return _Placement.init(proposedSize:anchoring:at:)();
  }
  else
  {
    static UnitPoint.topTrailing.getter();
    return _Placement.init(proposedSize:aligning:in:)();
  }
}

void *initializeWithCopy for NavigableListModifier(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(_DWORD *)(v5 + 80) & 0xF8;
  uint64_t v8 = v7 + 15;
  unint64_t v9 = ~v7 & 0xFFFFFFFFFFFFFFF8;
  uint64_t v10 = ((unint64_t)a1 + v7 + 15) & v9;
  uint64_t v11 = ((unint64_t)a2 + v7 + 15) & v9;
  unint64_t v12 = *(void *)(v5 + 64);
  uint64_t v13 = (v7 + 23) & v9;
  uint64_t v14 = (void *)((v11 + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v14 < 0xFFFFFFFFuLL)
  {
    if (v6) {
      unint64_t v23 = *(void *)(v5 + 64);
    }
    else {
      unint64_t v23 = v12 + 1;
    }
    if (v23 > v12) {
      unint64_t v12 = v23;
    }
    if (v12 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v12;
    }
    memcpy((void *)v10, (const void *)v11, (v13 | 1) + v19);
  }
  else
  {
    BOOL v15 = v6 == 0;
    *(void *)uint64_t v10 = *(void *)v11;
    uint64_t v16 = (void *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v16 = *v14;
    __dst = (void *)(((unint64_t)v16 + v8) & v9);
    uint64_t v28 = (v7 + 23) & v9;
    uint64_t v17 = (unsigned __int8 *)(((unint64_t)v14 + v8) & v9);
    if (v15) {
      size_t v18 = v12 + 1;
    }
    else {
      size_t v18 = v12;
    }
    if (v18 > v12) {
      unint64_t v12 = v18;
    }
    if (v12 <= 8) {
      uint64_t v19 = 8;
    }
    else {
      uint64_t v19 = v12;
    }
    unsigned int v20 = v17[v19];
    swift_retain();
    swift_retain();
    if (v20 >= 3)
    {
      if (v19 <= 3) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = 4;
      }
      switch(v21)
      {
        case 1:
          int v22 = *v17;
          goto LABEL_28;
        case 2:
          int v22 = *(unsigned __int16 *)v17;
          goto LABEL_28;
        case 3:
          int v22 = *(unsigned __int16 *)v17 | (v17[2] << 16);
          goto LABEL_28;
        case 4:
          int v22 = *(_DWORD *)v17;
LABEL_28:
          int v24 = (v22 | ((v20 - 3) << (8 * v19))) + 3;
          unsigned int v25 = v22 + 3;
          if (v19 >= 4) {
            unsigned int v20 = v25;
          }
          else {
            unsigned int v20 = v24;
          }
          break;
        default:
          break;
      }
    }
    if (v20 == 2)
    {
      (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(__dst, v17, v4);
      *((unsigned char *)__dst + v19) = 2;
    }
    else if (v20 == 1)
    {
      if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(v5 + 48))(v17, 1, v4))
      {
        memcpy(__dst, v17, v18);
      }
      else
      {
        (*(void (**)(void *, unsigned __int8 *, uint64_t))(v5 + 16))(__dst, v17, v4);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(__dst, 0, 1, v4);
      }
      *((unsigned char *)__dst + v19) = 1;
    }
    else
    {
      void *__dst = *(void *)v17;
      *((unsigned char *)__dst + v19) = 0;
      swift_bridgeObjectRetain();
    }
    uint64_t v13 = v28;
  }
  *(void *)(((v10 | 7) + (v13 | 1) + v19) & 0xFFFFFFFFFFFFFFF8) = *(void *)(((v11 | 7) + (v13 | 1) + v19) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  return a1;
}

uint64_t type metadata accessor for FetchRequest()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static ContainerRelativeFrameModifier._makeView(modifier:inputs:body:)()
{
  return static ViewModifier.makeDebuggableView(modifier:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout;
  if (!lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout;
  if (!lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ContainerRelativeFrameModifier.MakeLayout and conformance ContainerRelativeFrameModifier.MakeLayout);
  }
  return result;
}

void type metadata accessor for _GraphValue<ContainerRelativeFrameModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<ContainerRelativeFrameModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<ContainerRelativeFrameModifier>);
    }
  }
}

double _LazyLayout_PlacementContext.init(base:position:size:transform:layoutDirection:pinnedViews:isAccessibilityEnabled:)@<D0>(uint64_t *a1@<X0>, long long *a2@<X2>, uint64_t a3@<X3>, char *a4@<X4>, int *a5@<X5>, char a6@<W6>, uint64_t a7@<X8>)
{
  uint64_t v24 = a1[1];
  uint64_t v25 = *a1;
  long long v23 = *a2;
  uint64_t v9 = *((void *)a2 + 2);
  uint64_t v10 = *((void *)a2 + 3);
  char v11 = *a4;
  int v12 = *a5;
  *(void *)int v48 = *(void *)a3;
  *(_OWORD *)&v48[8] = *(_OWORD *)(a3 + 8);
  *(_OWORD *)&v48[24] = *(_OWORD *)(a3 + 24);
  *(double *)&unint64_t v13 = MEMORY[0x18C10C240]();
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v14, v13));
  long long v33 = v23;
  *(void *)&long long v34 = v9;
  *((void *)&v34 + 1) = v10;
  double v15 = MEMORY[0x18C114450]();
  uint64_t v17 = v16;
  long long v41 = *(_OWORD *)v48;
  long long v42 = *(_OWORD *)&v48[16];
  *(void *)&long long v43 = *(void *)&v48[32];
  ViewTransform.containingScrollGeometry.getter();
  if (v40)
  {
    static ScrollGeometry.size(_:)();
  }
  else
  {
    long long v41 = v23;
    long long v42 = v34;
    long long v43 = v35;
    long long v44 = v36;
    long long v45 = v37;
    long long v46 = v38;
    long long v47 = v39;
  }
  LOBYTE(v33) = v11;
  ScrollGeometry.applyLayoutDirection(_:contentSize:)();
  long long v26 = *(_OWORD *)v48;
  long long v27 = *(_OWORD *)&v48[16];
  *(void *)&long long v28 = *(void *)&v48[32];
  ViewTransform.nearestScrollGeometry.getter();
  if (v40)
  {
    static ScrollGeometry.size(_:)();
  }
  else
  {
    long long v26 = v33;
    long long v27 = v34;
    long long v28 = v35;
    long long v29 = v36;
    long long v30 = v37;
    long long v31 = v38;
    long long v32 = v39;
  }
  uint64_t v18 = ScrollGeometry.applyLayoutDirection(_:contentSize:)();
  double v19 = MEMORY[0x18C10C240](v18);
  uint64_t v21 = v20;
  swift_release();
  *(void *)a7 = v25;
  *(void *)(a7 + 8) = v24;
  *(double *)(a7 + 16) = v19;
  *(void *)(a7 + 24) = v21;
  *(double *)(a7 + 32) = v15;
  *(void *)(a7 + 40) = v17;
  *(_DWORD *)(a7 + 48) = v12;
  *(_OWORD *)(a7 + 56) = v41;
  *(_OWORD *)(a7 + 72) = v42;
  *(_OWORD *)(a7 + 88) = v43;
  *(_OWORD *)(a7 + 104) = v44;
  *(_OWORD *)(a7 + 120) = v45;
  *(_OWORD *)(a7 + 136) = v46;
  *(_OWORD *)(a7 + 152) = v47;
  *(_OWORD *)(a7 + 168) = v26;
  *(_OWORD *)(a7 + 184) = v27;
  *(_OWORD *)(a7 + 200) = v28;
  *(_OWORD *)(a7 + 216) = v29;
  *(_OWORD *)(a7 + 232) = v30;
  *(_OWORD *)(a7 + 248) = v31;
  double result = *(double *)&v32;
  *(_OWORD *)(a7 + 264) = v32;
  *(double *)(a7 + 280) = v15;
  *(void *)(a7 + 288) = v17;
  *(unsigned char *)(a7 + 296) = a6 & 1;
  return result;
}

void PositionState.update(context:)(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 12);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  long long v21 = *(_OWORD *)(a1 + 88);
  ScrollGeometry.visibleRect.getter();
  *(void *)(v1 + 40) = v7;
  *(void *)(v1 + 48) = v8;
  *(void *)(v1 + 56) = v9;
  *(void *)(v1 + 64) = v10;
  uint64_t v11 = 0;
  double v12 = 0.0;
  if (v2 != *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (void *)AGGraphGetValue();
    double v12 = MEMORY[0x18C114450](Value, v14, v15, v16, v17, v18, v19, v20, *Value, Value[1], Value[2], Value[3], v21, *((void *)&v21 + 1));
  }
  *(double *)(v1 + 72) = v12;
  *(void *)(v1 + 80) = v11;
  *(void *)(v1 + 88) = v3;
  *(void *)(v1 + 96) = v4;
  *(void *)(v1 + 104) = v5;
  *(void *)(v1 + 112) = v6;
}

uint64_t outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined retain of LazySubviewPlacements<LazyFixedSizeHStackLayout>(uint64_t a1)
{
  return a1;
}

uint64_t _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI25_LazyLayout_PlacedSubviewVG_So6CGRectVs5NeverOTg503_s7d4UI21fi30PlacementsV11updateValueyyFSo6j9VAA01_c13g1_H56D0Vcfu0_33_16ad7e5789174c81df73553da90b8b56AhFTf3nnnpk_nTf1cn_n(uint64_t a1)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v2, 0);
    uint64_t result = v18;
    uint64_t v4 = a1 + 48;
    do
    {
      uint64_t v17 = result;
      swift_retain();
      if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
      {
        static LayoutComputer.defaultValue.getter();
      }
      else
      {
        AGGraphGetValue();
        swift_retain();
      }
      LayoutComputer.sizeThatFits(_:)();
      unint64_t v6 = v5;
      unint64_t v8 = v7;
      swift_release();
      CGPoint v9 = _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v8, v6));
      if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
      {
        static LayoutComputer.defaultValue.getter();
      }
      else
      {
        AGGraphGetValue();
        swift_retain();
      }
      LayoutComputer.sizeThatFits(_:)();
      uint64_t v11 = v10;
      uint64_t v13 = v12;
      swift_release();
      swift_release();
      uint64_t result = v17;
      unint64_t v15 = *(void *)(v17 + 16);
      unint64_t v14 = *(void *)(v17 + 24);
      if (v15 >= v14 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v14 > 1), v15 + 1, 1);
        uint64_t result = v17;
      }
      *(void *)(result + 16) = v15 + 1;
      uint64_t v16 = result + 32 * v15;
      *(CGPoint *)(v16 + 32) = v9;
      *(void *)(v16 + 48) = v11;
      *(void *)(v16 + 56) = v13;
      v4 += 72;
      --v2;
    }
    while (v2);
  }
  return result;
}

void LazyLayoutViewCache.commitPlacedSubviews(from:to:wasCancelled:context:)(char *a1, char **a2, char a3, unsigned int a4)
{
  void (*v71)(uint64_t *__return_ptr, uint64_t, char *, void, uint64_t, void);
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  char *v75;
  unint64_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  long long *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int v91;
  int v93;
  char v96;
  char v97;
  uint64_t *v98;
  long long v99;
  void (*v100)(uint64_t *__return_ptr, unint64_t, char *, char *, void, void);
  unsigned int v101;
  long long v102;
  char v103;
  long long v104;
  uint64_t v105;
  long long v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  uint64_t v110;
  _DWORD *v111;
  long long v112;
  uint64_t v113;
  uint64_t v114;
  long long v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  long long v119;
  int64_t v120;
  uint64_t v121;
  long long v122;
  char v123;
  uint64_t v124;
  char v125;
  void v126[3];
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t *v131;
  unsigned char v132[48];
  uint64_t v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;

  unint64_t v5 = v4;
  uint64_t v6 = *v4;
  ++*((_DWORD *)v4 + 52);
  unint64_t v7 = *a2;
  uint64_t v8 = *((void *)*a2 + 2);
  v98 = v4;
  if (v8)
  {
    uint64_t v9 = v6;
    swift_bridgeObjectRetain();
    swift_beginAccess();
    unint64_t v10 = 0;
    uint64_t v93 = 0;
    long long v113 = v9;
    do
    {
      while (1)
      {
        unint64_t v11 = *((void *)v7 + 2);
        if (v10 >= v11)
        {
          __break(1u);
          goto LABEL_87;
        }
        uint64_t v12 = &v7[72 * v10];
        uint64_t v13 = *((void *)v12 + 4);
        if (*(_DWORD *)(v13 + 192) == *((_DWORD *)v5 + 52)) {
          break;
        }
        unint64_t v14 = v7;
        uint64_t v15 = *((void *)v12 + 5);
        uint64_t v16 = v12[48];
        v116 = *((void *)v12 + 7);
        uint64_t v17 = v12[64];
        char v119 = *(_OWORD *)(v12 + 88);
        long long v122 = *(_OWORD *)(v12 + 72);
        uint64_t Value = AGGraphGetValue();
        if (*(unsigned char *)(Value + 4) == 1)
        {
          swift_retain();
        }
        else if (*(unsigned char *)(v13 + 208) == 1)
        {
          long long v107 = v15;
          if (*((unsigned char *)v5 + 227))
          {
            swift_retain();
          }
          else
          {
            uint64_t v101 = *(unsigned __int8 *)(Value + 5);
            v100 = *(void (**)(uint64_t *__return_ptr, unint64_t, char *, char *, void, void))(*v5 + 296);
            swift_retain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            v100(&v129, v10, v14, a1, v101, a4);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v27 = v129;
            char v28 = v130;
            unint64_t v5 = v131;
            uint64_t v96 = v132[0];
            unint64_t v99 = *(_OWORD *)&v132[24];
            v102 = *(_OWORD *)&v132[8];
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              unint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v14);
            }
            if (v10 >= *((void *)v14 + 2)) {
              goto LABEL_95;
            }
            long long v29 = &v14[72 * v10];
            *((void *)v29 + 5) = v27;
            v29[48] = v28;
            *((void *)v29 + 7) = v5;
            v29[64] = v96;
            *(_OWORD *)(v29 + 72) = v102;
            *(_OWORD *)(v29 + 88) = v99;
            *a2 = v14;
            unint64_t v11 = *((void *)v14 + 2);
            unint64_t v5 = v98;
          }
          if (v10 >= v11) {
            goto LABEL_94;
          }
          long long v30 = &v14[72 * v10];
          v105 = *((void *)v30 + 5);
          double v103 = v30[48];
          *(void *)&unint64_t v99 = *((void *)v30 + 7);
          double v97 = v30[64];
          uint64_t v31 = *((void *)v30 + 9);
          uint64_t v32 = *((void *)v30 + 10);
          uint64_t v33 = *((void *)v30 + 11);
          uint64_t v34 = *((void *)v30 + 12);
          swift_retain();
          if (swift_isUniquelyReferenced_nonNull_native()) {
            long long v35 = a1;
          }
          else {
            long long v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)a1 + 2) + 1, 1, a1);
          }
          unint64_t v37 = *((void *)v35 + 2);
          unint64_t v36 = *((void *)v35 + 3);
          if (v37 >= v36 >> 1) {
            long long v35 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v36 > 1), v37 + 1, 1, v35);
          }
          *((void *)v35 + 2) = v37 + 1;
          a1 = v35;
          long long v38 = &v35[72 * v37];
          *((void *)v38 + 4) = v13;
          *((void *)v38 + 5) = v105;
          v38[48] = v103;
          *((void *)v38 + 7) = v99;
          v38[64] = v97;
          *((void *)v38 + 9) = v31;
          *((void *)v38 + 10) = v32;
          *((void *)v38 + 11) = v33;
          *((void *)v38 + 12) = v34;
          uint64_t v93 = 1;
          uint64_t v15 = v107;
        }
        else
        {
          swift_retain();
          uint64_t v93 = 1;
        }
        *(void *)(v13 + 200) = v10;
        *(unsigned char *)(v13 + 208) = 0;
        *(_DWORD *)(v13 + 184) = *((_DWORD *)v5 + 42);
        *(_DWORD *)(v13 + 192) = *((_DWORD *)v5 + 52);
        *(void *)(v13 + 216) = v15;
        *(void *)(v13 + 224) = v16;
        *(void *)(v13 + 232) = v116;
        *(void *)(v13 + 240) = v17;
        *(_OWORD *)(v13 + 248) = v122;
        *(_OWORD *)(v13 + 264) = v119;
        *(unsigned char *)(v13 + 280) = 0;
        swift_release();
        ++v10;
        unint64_t v7 = v14;
        if ((uint64_t)v10 >= v8) {
          goto LABEL_33;
        }
      }
      if (*(unsigned char *)(v13 + 299))
      {
        swift_retain();
      }
      else
      {
        *(unsigned char *)(v13 + 299) = 1;
        v129 = 0;
        v130 = 0xE000000000000000;
        swift_retain();
        _StringGuts.grow(_:)(80);
        (*(void (**)(void))(v113 + 272))();
        v19._countAndFlagsBits = _typeName(_:qualified:)();
        String.append(_:)(v19);
        swift_bridgeObjectRelease();
        v20._countAndFlagsBits = 0x444920656874203ALL;
        v20._object = (void *)0xE900000000000020;
        String.append(_:)(v20);
        uint64_t v21 = *(void *)(v13 + 144);
        v135 = *(void *)(v13 + 136);
        v136 = v21;
        _ViewList_ID.canonicalID.getter();
        v135 = v126[0];
        v136 = v126[1];
        v22._countAndFlagsBits = _ViewList_ID.Canonical.description.getter();
        String.append(_:)(v22);
        swift_bridgeObjectRelease();
        swift_release();
        v23._countAndFlagsBits = 0xD000000000000043;
        v23._object = (void *)0x800000018832F3B0;
        String.append(_:)(v23);
        MEMORY[0x18C112B90](v129, v130);
        swift_bridgeObjectRelease();
      }
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v7 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v7);
      }
      unint64_t v24 = *((void *)v7 + 2);
      if (v10 >= v24) {
        goto LABEL_92;
      }
      unint64_t v25 = v24 - 1;
      uint64_t v26 = v24 - 1 - v10;
      if (v26 < 0)
      {
LABEL_109:
        _fatalErrorMessage(_:_:file:line:flags:)();
        __break(1u);
        return;
      }
      memmove(&v7[72 * v10 + 32], &v7[72 * v10 + 104], 72 * v26);
      *((void *)v7 + 2) = v25;
      swift_release();
      swift_release();
      *a2 = v7;
      --v8;
    }
    while ((uint64_t)v10 < v8);
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v93 = 0;
  }
LABEL_33:
  *(void *)&long long v122 = v7;
  v137 = MEMORY[0x1E4FBC860];
  swift_beginAccess();
  uint64_t v39 = v5[20];
  uint64_t v42 = *(void *)(v39 + 64);
  uint64_t v41 = v39 + 64;
  uint64_t v40 = v42;
  uint64_t v43 = 1 << *(unsigned char *)(v5[20] + 32);
  uint64_t v44 = -1;
  if (v43 < 64) {
    uint64_t v44 = ~(-1 << v43);
  }
  unint64_t v45 = v44 & v40;
  long long v114 = v5[20];
  swift_bridgeObjectRetain();
  uint64_t v111 = v5 + 21;
  swift_beginAccess();
  uint64_t v91 = 0;
  int64_t v46 = 0;
  int64_t v47 = (unint64_t)(v43 + 63) >> 6;
  v117 = v41;
  char v120 = v47;
  while (1)
  {
    if (v45)
    {
      unint64_t v48 = __clz(__rbit64(v45));
      v45 &= v45 - 1;
      unint64_t v49 = v48 | (v46 << 6);
      goto LABEL_52;
    }
    int64_t v50 = v46 + 1;
    if (__OFADD__(v46, 1)) {
      goto LABEL_91;
    }
    if (v50 >= v47) {
      goto LABEL_70;
    }
    unint64_t v51 = *(void *)(v41 + 8 * v50);
    ++v46;
    if (!v51)
    {
      int64_t v46 = v50 + 1;
      if (v50 + 1 >= v47) {
        goto LABEL_70;
      }
      unint64_t v51 = *(void *)(v41 + 8 * v46);
      if (!v51)
      {
        int64_t v46 = v50 + 2;
        if (v50 + 2 >= v47) {
          goto LABEL_70;
        }
        unint64_t v51 = *(void *)(v41 + 8 * v46);
        if (!v51) {
          break;
        }
      }
    }
LABEL_51:
    unint64_t v45 = (v51 - 1) & v51;
    unint64_t v49 = __clz(__rbit64(v51)) + (v46 << 6);
LABEL_52:
    uint64_t v53 = *(void *)(*(void *)(v114 + 56) + 8 * v49);
    if (*(_DWORD *)(v53 + 192) != *((_DWORD *)v5 + 52)
      && (*(unsigned char *)(v53 + 280) & 1) == 0
      && (*(unsigned char *)(v53 + 208) & 1) == 0)
    {
      uint64_t v54 = *(void *)(v53 + 216);
      uint64_t v55 = *(uint64_t **)(v53 + 232);
      uint64_t v56 = *(void *)(v53 + 200);
      uint64_t v57 = *(void *)(v53 + 248);
      uint64_t v58 = *(void *)(v53 + 256);
      uint64_t v59 = *(void *)(v53 + 264);
      uint64_t v60 = *(void *)(v53 + 272);
      if (*(unsigned char *)(AGGraphGetValue() + 4) == 2)
      {
        long long v123 = *(unsigned char *)(v53 + 224) & 1;
        uint64_t v109 = *(unsigned char *)(v53 + 240) & 1;
        if (*(unsigned char *)(v53 + 297) == 1)
        {
          *(unsigned char *)(v53 + 297) = 0;
          swift_retain();
          int v65 = 1;
        }
        else
        {
          long long v74 = *(_DWORD *)(v53 + 180) == 0;
          swift_retain();
          int v65 = v74 | v93;
        }
        uint64_t v93 = v65;
        uint64_t v41 = v117;
        goto LABEL_65;
      }
      swift_retain();
      AGGraphClearUpdate();
      int v61 = *((_DWORD *)v5 + 10);
      uint64_t v62 = (uint64_t *)v5[6];
      int v63 = *((_DWORD *)v5 + 28);
      v129 = v5[4];
      LODWORD(v130) = v61;
      v131 = v62;
      *(_OWORD *)v132 = *(_OWORD *)(v5 + 7);
      *(_OWORD *)&v132[16] = *(_OWORD *)(v5 + 9);
      *(_OWORD *)&v132[32] = *(_OWORD *)(v5 + 11);
      v133 = v5[13];
      v134 = v63;
      _ViewInputs.transaction.getter();
      AGGraphGetValue();
      char v64 = Transaction.fromScrollView.getter();
      AGGraphSetUpdate();
      if (v64)
      {
        *(void *)(v53 + 200) = 0;
        *(unsigned char *)(v53 + 208) = 1;
        *(_OWORD *)(v53 + 216) = 0u;
        *(_OWORD *)(v53 + 232) = 0u;
        *(_OWORD *)(v53 + 248) = 0u;
        *(_OWORD *)(v53 + 264) = 0u;
        *(unsigned char *)(v53 + 280) = 1;
        swift_release();
        uint64_t v41 = v117;
        int64_t v47 = v120;
      }
      else
      {
        AGGraphClearUpdate();
        type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ViewList);
        uint64_t v66 = AGGraphGetValue();
        outlined init with copy of TableColumnList(v66, (uint64_t)v126);
        AGGraphSetUpdate();
        uint64_t v68 = v127;
        uint64_t v67 = v128;
        __swift_project_boxed_opaque_existential_1(v126, v127);
        unint64_t v69 = *(void *)(v53 + 144);
        v129 = *(void *)(v53 + 136);
        v130 = v69;
        long long v124 = v5[23];
        (*(void (**)(char *__return_ptr, uint64_t *, uint64_t *, uint64_t, uint64_t))(v67 + 56))(&v125, &v129, &v124, v68, v67);
        uint64_t v70 = v125 & 1;
        long long v71 = *(void (**)(uint64_t *__return_ptr, uint64_t, char *, void, uint64_t, void))(*v5 + 304);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        v71(&v129, v56, a1, v122, v70, a4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        int v72 = v129;
        long long v123 = v130;
        uint64_t v55 = v131;
        uint64_t v109 = v132[0];
        uint64_t v57 = *(void *)&v132[8];
        uint64_t v58 = *(void *)&v132[16];
        uint64_t v59 = *(void *)&v132[24];
        uint64_t v60 = *(void *)&v132[32];
        *(unsigned char *)(v53 + 296) = v70 & ~*(unsigned char *)(v53 + 124);
        *(unsigned char *)(v53 + 297) = 1;
        *(_DWORD *)(v53 + 212) = *((_DWORD *)v5 + 52);
        uint64_t v73 = swift_retain();
        MEMORY[0x18C115B40](v73);
        if (*(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
        }
        specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
        specialized Array._endMutation()();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v126);
        uint64_t v93 = 1;
        unint64_t v5 = v98;
        uint64_t v41 = v117;
        uint64_t v54 = v72;
LABEL_65:
        uint64_t v75 = *a2;
        *(void *)(v53 + 200) = *((void *)*a2 + 2);
        *(unsigned char *)(v53 + 208) = 0;
        *(_DWORD *)(v53 + 184) = *v111;
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v75 + 2) + 1, 1, v75);
        }
        uint64_t v77 = *((void *)v75 + 2);
        int v76 = *((void *)v75 + 3);
        if (v77 >= v76 >> 1) {
          uint64_t v75 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v76 > 1), v77 + 1, 1, v75);
        }
        *((void *)v75 + 2) = v77 + 1;
        uint64_t v78 = &v75[72 * v77];
        *((void *)v78 + 4) = v53;
        *((void *)v78 + 5) = v54;
        v78[48] = v123;
        *((void *)v78 + 7) = v55;
        v78[64] = v109;
        *((void *)v78 + 9) = v57;
        *((void *)v78 + 10) = v58;
        *((void *)v78 + 11) = v59;
        *((void *)v78 + 12) = v60;
        swift_release();
        *(void *)&long long v122 = v75;
        *a2 = v75;
        uint64_t v91 = 1;
        int64_t v47 = v120;
      }
    }
  }
  int64_t v52 = v50 + 3;
  if (v52 >= v47) {
    goto LABEL_70;
  }
  unint64_t v51 = *(void *)(v41 + 8 * v52);
  if (v51)
  {
    int64_t v46 = v52;
    goto LABEL_51;
  }
  while (1)
  {
    int64_t v46 = v52 + 1;
    if (__OFADD__(v52, 1)) {
      goto LABEL_93;
    }
    if (v46 >= v47) {
      break;
    }
    unint64_t v51 = *(void *)(v41 + 8 * v46);
    ++v52;
    if (v51) {
      goto LABEL_51;
    }
  }
LABEL_70:
  swift_release();
  *(void *)&unint64_t v99 = v137;
  if (v137 >> 62) {
    goto LABEL_96;
  }
  uint64_t v79 = *(void *)((v137 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  for (; v79; uint64_t v79 = _CocoaArrayWrapper.endIndex.getter())
  {
    uint64_t v80 = 4;
    while (1)
    {
      if ((v99 & 0xC000000000000001) != 0)
      {
        uint64_t v81 = MEMORY[0x18C117680](v80 - 4, v99);
      }
      else
      {
        uint64_t v81 = *(void *)(v99 + 8 * v80);
        swift_retain();
      }
      double v82 = v80 - 3;
      if (__OFADD__(v80 - 4, 1)) {
        break;
      }
      if (*(unsigned char *)(v81 + 208))
      {
        __break(1u);
LABEL_108:
        __break(1u);
        goto LABEL_109;
      }
      double v83 = *(void *)(v81 + 200);
      if ((v83 & 0x8000000000000000) != 0) {
        goto LABEL_88;
      }
      if (v83 >= *(void *)(v122 + 16)) {
        goto LABEL_89;
      }
      uint64_t v84 = (long long *)(v81 + 264);
      if (*(unsigned char *)(v81 + 280)) {
        goto LABEL_108;
      }
      uint64_t v85 = v122 + 72 * v83;
      long long v121 = *(unsigned __int8 *)(v85 + 48);
      uint64_t v108 = *(void *)(v85 + 56);
      uint64_t v110 = *(void *)(v85 + 40);
      v118 = *(unsigned __int8 *)(v85 + 64);
      v112 = *(_OWORD *)(v85 + 88);
      v115 = *(_OWORD *)(v85 + 72);
      v104 = *(_OWORD *)(v81 + 248);
      v106 = *v84;
      uint64_t v86 = *(void *)(v81 + 232);
      unint64_t v5 = *(uint64_t **)(v81 + 240);
      uint64_t v88 = *(void *)(v81 + 216);
      v87 = *(void *)(v81 + 224);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        *(void *)&long long v122 = specialized _ArrayBuffer._consumeAndCreateNew()(v122);
      }
      if (v83 >= *(void *)(v122 + 16)) {
        goto LABEL_90;
      }
      uint64_t v89 = v122 + 72 * v83;
      *(void *)(v89 + 40) = v88;
      *(unsigned char *)(v89 + 48) = v87 & 1;
      *(void *)(v89 + 56) = v86;
      *(unsigned char *)(v89 + 64) = v5 & 1;
      *(_OWORD *)(v89 + 72) = v104;
      *(_OWORD *)(v89 + 88) = v106;
      *(void *)(v81 + 216) = v110;
      *(void *)(v81 + 224) = v121;
      *(void *)(v81 + 232) = v108;
      *(void *)(v81 + 240) = v118;
      *(_OWORD *)(v81 + 248) = v115;
      *uint64_t v84 = v112;
      *(unsigned char *)(v81 + 280) = 0;
      swift_release();
      ++v80;
      unint64_t v5 = v98;
      if (v82 == v79)
      {
        swift_bridgeObjectRelease();
        *a2 = (char *)v122;
        goto LABEL_98;
      }
    }
LABEL_87:
    __break(1u);
LABEL_88:
    __break(1u);
LABEL_89:
    __break(1u);
LABEL_90:
    __break(1u);
LABEL_91:
    __break(1u);
LABEL_92:
    __break(1u);
LABEL_93:
    __break(1u);
LABEL_94:
    __break(1u);
LABEL_95:
    __break(1u);
LABEL_96:
    swift_bridgeObjectRetain();
  }
  swift_bridgeObjectRelease();
LABEL_98:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*((unsigned char *)v5 + 226) & 1) != 0 || ((*((unsigned __int8 *)v5 + 225) | v91)) {
    Array<A>.sortForDisplay()();
  }
  if (v93)
  {
    if (swift_weakLoadStrong())
    {
      swift_retain();
      GraphHost.continueTransaction(_:)();
      swift_release();
      swift_release();
    }
  }
  else if ((a3 & 1) == 0)
  {
    *((unsigned char *)v5 + 227) = 0;
  }
}

uint64_t specialized LazySubviewPlacements.mainID(subviews:)@<X0>(uint64_t result@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, _DWORD *a4@<X3>, _DWORD *a5@<X4>, void *a6@<X8>)
{
  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(result + 32);
    uint64_t v10 = v7 - 1;
    if (v7 == 1)
    {
      swift_retain();
    }
    else
    {
      unint64_t v48 = a6;
      double v12 = *(double *)(result + 88);
      double v13 = *(double *)(result + 96);
      double v57 = *(double *)(result + 80);
      int v61 = *(unsigned __int8 *)(result + 64);
      uint64_t v60 = *(void *)(result + 56);
      int v59 = *(unsigned __int8 *)(result + 48);
      uint64_t v58 = *(void *)(result + 40);
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v14 = 0;
      uint64_t v50 = v8;
      unint64_t v51 = a5;
      uint64_t v15 = v8;
      do
      {
        uint64_t v24 = *(void *)(v15 + v14 + 104);
        uint64_t v23 = *(void *)(v15 + v14 + 112);
        int v25 = *(unsigned __int8 *)(v15 + v14 + 120);
        uint64_t v26 = *(void *)(v15 + v14 + 128);
        int v27 = *(unsigned __int8 *)(v15 + v14 + 136);
        double v28 = *(double *)(v15 + v14 + 152);
        double v29 = *(double *)(v15 + v14 + 160);
        double v30 = *(double *)(v15 + v14 + 168);
        int v31 = *a3;
        if ((*a3 & ~*a2) == 0) {
          LOBYTE(v31) = 0;
        }
        char v32 = v31 | *a2;
        BOOL v33 = *(unsigned char *)(v24 + 165) != 1 || (v32 & 1) == 0;
        if (v33 && ((int v34 = v32 & 2, *(unsigned char *)(v24 + 166) == 1) ? (v35 = v34 == 0) : (v35 = 1), v35))
        {
          swift_retain_n();
          double v52 = v12;
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          unint64_t v38 = v37;
          unint64_t v40 = v39;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v40, v38));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          double v36 = v41;
          uint64_t v15 = v50;
          a5 = v51;
          double v12 = v52;
        }
        else
        {
          swift_retain();
          double v36 = INFINITY;
        }
        int v42 = *a5;
        if ((*a5 & ~*a4) == 0) {
          LOBYTE(v42) = 0;
        }
        if (*(unsigned char *)(v9 + 165) == 1 && ((v42 | *a4) & 1) != 0
          || *(unsigned char *)(v9 + 166) == 1 && ((v42 | *a4) & 2) != 0)
        {
          double v16 = INFINITY;
        }
        else
        {
          swift_retain();
          double v49 = v13;
          double v53 = v12;
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          unint64_t v44 = v43;
          unint64_t v46 = v45;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v46, v44));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          uint64_t v15 = v50;
          a5 = v51;
          double v13 = v49;
          double v12 = v53;
        }
        BOOL v17 = v36 < v16;
        if (v36 < v16) {
          uint64_t v9 = v24;
        }
        uint64_t v18 = v58;
        if (v36 < v16) {
          uint64_t v18 = v23;
        }
        uint64_t v58 = v18;
        int v19 = v59;
        if (v36 < v16) {
          int v19 = v25;
        }
        int v59 = v19;
        uint64_t v20 = v60;
        if (v36 < v16) {
          uint64_t v20 = v26;
        }
        uint64_t v60 = v20;
        int v21 = v61;
        if (v36 < v16) {
          int v21 = v27;
        }
        int v61 = v21;
        double v22 = v57;
        if (v17) {
          double v22 = v28;
        }
        double v57 = v22;
        if (v17)
        {
          double v12 = v29;
          double v13 = v30;
        }
        swift_release();
        v14 += 72;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      a6 = v48;
    }
    uint64_t v47 = *(void *)(v9 + 144);
    *a6 = *(void *)(v9 + 136);
    a6[1] = v47;
    swift_bridgeObjectRetain();
    return swift_release();
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  double v14;
  uint64_t v15;
  int v16;
  char v17;
  BOOL v18;
  int v19;
  BOOL v20;
  double v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  double v26;
  int v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  _DWORD *v35;
  uint64_t vars8;

  uint64_t v7 = *(void *)(result + 16);
  if (v7)
  {
    uint64_t v8 = result;
    uint64_t v9 = *(void *)(result + 32);
    uint64_t v10 = v7 - 1;
    if (v7 == 1)
    {
      swift_retain();
    }
    else
    {
      BOOL v33 = a6;
      swift_bridgeObjectRetain();
      swift_retain();
      double v12 = 0;
      int v34 = v8;
      BOOL v35 = a5;
      double v13 = v8;
      do
      {
        uint64_t v15 = *(void *)(v13 + v12 + 104);
        double v16 = *a3;
        if ((*a3 & ~*a2) == 0) {
          LOBYTE(v16) = 0;
        }
        BOOL v17 = v16 | *a2;
        uint64_t v18 = *(unsigned char *)(v15 + 165) != 1 || (v17 & 1) == 0;
        if (v18 && ((int v19 = v17 & 2, *(unsigned char *)(v15 + 166) == 1) ? (v20 = v19 == 0) : (v20 = 1), v20))
        {
          swift_retain_n();
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          uint64_t v23 = v22;
          int v25 = v24;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v25, v23));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          int v21 = v26;
          double v13 = v34;
          a5 = v35;
        }
        else
        {
          swift_retain();
          int v21 = INFINITY;
        }
        int v27 = *a5;
        if ((*a5 & ~*a4) == 0) {
          LOBYTE(v27) = 0;
        }
        if (*(unsigned char *)(v9 + 165) == 1 && ((v27 | *a4) & 1) != 0
          || *(unsigned char *)(v9 + 166) == 1 && ((v27 | *a4) & 2) != 0)
        {
          uint64_t v14 = INFINITY;
        }
        else
        {
          swift_retain();
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          double v29 = v28;
          int v31 = v30;
          swift_release();
          _Placement.frameOrigin(childSize:)((CGSize)__PAIR128__(v31, v29));
          if ((_ViewOutputs.layoutComputer.getter() & 0x100000000) != 0)
          {
            static LayoutComputer.defaultValue.getter();
          }
          else
          {
            AGGraphGetValue();
            swift_retain();
          }
          LayoutComputer.sizeThatFits(_:)();
          swift_release();
          swift_release();
          distance(_:_:)();
          double v13 = v34;
          a5 = v35;
        }
        if (v21 < v14) {
          uint64_t v9 = v15;
        }
        swift_release();
        v12 += 72;
        --v10;
      }
      while (v10);
      swift_bridgeObjectRelease();
      a6 = v33;
    }
    char v32 = *(void *)(v9 + 144);
    *a6 = *(void *)(v9 + 136);
    a6[1] = v32;
    swift_bridgeObjectRetain();
    return swift_release();
  }
  else
  {
    *a6 = 0;
    a6[1] = 0;
  }
  return result;
}

uint64_t outlined release of PositionState(uint64_t a1)
{
  return a1;
}

void type metadata accessor for Binding<TabSidebarCustomization>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t specialized LazyHVStack<>.place(subviews:length:minorGeometry:emit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void (*a9)(uint64_t))
{
  uint64_t result = _ProposedSize.init(_:in:by:)();
  if (*(void *)(a1 + 16))
  {
    uint64_t v12 = a1 + 32;
    a9(result);
    AlignmentGuide.fraction.getter();
    UnitPoint.init(_:in:by:)();
    double v13 = *(double *)(a7 + 112) + 0.0;
    if (*(unsigned char *)(a7 + 24)) {
      double v14 = *(double *)(a7 + 112) + 0.0;
    }
    else {
      double v14 = 0.0;
    }
    if (*(unsigned char *)(a7 + 24)) {
      double v13 = 0.0;
    }
    return specialized StackPlacement.emit(_:at:size:anchor:)(v12, v15, v16, v17, v18, v13, v14);
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t specialized StackPlacement.emit(_:at:size:anchor:)(uint64_t a1, uint64_t a2, char a3, uint64_t a4, char a5, CGFloat a6, CGFloat a7)
{
  uint64_t v8 = v7;
  char v21 = a3 & 1;
  char v23 = a5 & 1;
  CGSize v12 = _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)0);
  v28.size.CGFloat width = v12.width;
  v28.size.CGFloat height = v12.height;
  v28.origin.CGFloat x = a6;
  v28.origin.CGFloat y = a7;
  UnitPoint.in(_:)(v28);
  if (*(void *)(v7 + 32) == 1) {
    _ProposedSize.subscript.setter();
  }
  _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v13 = LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  uint64_t result = swift_unownedRetainStrong();
  if (result)
  {
    int v15 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v13 + 188) = v15;
    *(_DWORD *)(v13 + 196) = 0;
    uint64_t v16 = *(void *)(v8 + 248);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
      uint64_t v16 = result;
    }
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v17 = *(void *)(v16 + 24);
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      uint64_t v16 = result;
    }
    *(void *)(v16 + 16) = v18 + 1;
    unint64_t v19 = v16 + 72 * v18;
    *(void *)(v19 + 32) = v13;
    *(void *)(v19 + 40) = a2;
    *(unsigned char *)(v19 + 48) = v21;
    *(void *)(v19 + 56) = a4;
    *(unsigned char *)(v19 + 64) = v23;
    *(void *)(v19 + 72) = v24;
    *(void *)(v19 + 80) = v25;
    *(void *)(v19 + 88) = v26;
    *(void *)(v19 + 96) = v27;
    *(void *)(v8 + 248) = v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  uint64_t v7;
  uint64_t v8;
  CGSize v12;
  uint64_t v13;
  uint64_t result;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  char v21;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  __C::CGRect v28;

  uint64_t v8 = v7;
  char v21 = a3 & 1;
  char v23 = a5 & 1;
  CGSize v12 = _ProposedSize.fixingUnspecifiedDimensions(at:)((CGSize)0);
  v28.size.CGFloat width = v12.width;
  v28.size.CGFloat height = v12.height;
  v28.origin.CGFloat x = a6;
  v28.origin.CGFloat y = a7;
  UnitPoint.in(_:)(v28);
  if (*(void *)(v7 + 40) == 1) {
    _ProposedSize.subscript.setter();
  }
  _Placement.init(proposedSize:anchoring:at:)();
  uint64_t v13 = LazyLayoutViewCache.item(data:)(a1 + 16);
  swift_beginAccess();
  uint64_t result = swift_unownedRetainStrong();
  if (result)
  {
    int v15 = *(_DWORD *)(result + 212);
    swift_release();
    *(_DWORD *)(v13 + 188) = v15;
    *(_DWORD *)(v13 + 196) = 0;
    uint64_t v16 = *(void *)(v8 + 256);
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v16 + 16) + 1, 1, (char *)v16);
      uint64_t v16 = result;
    }
    unint64_t v18 = *(void *)(v16 + 16);
    unint64_t v17 = *(void *)(v16 + 24);
    if (v18 >= v17 >> 1)
    {
      uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1, (char *)v16);
      uint64_t v16 = result;
    }
    *(void *)(v16 + 16) = v18 + 1;
    unint64_t v19 = v16 + 72 * v18;
    *(void *)(v19 + 32) = v13;
    *(void *)(v19 + 40) = a2;
    *(unsigned char *)(v19 + 48) = v21;
    *(void *)(v19 + 56) = a4;
    *(unsigned char *)(v19 + 64) = v23;
    *(void *)(v19 + 72) = v24;
    *(void *)(v19 + 80) = v25;
    *(void *)(v19 + 88) = v26;
    *(void *)(v19 + 96) = v27;
    *(void *)(v8 + 256) = v16;
  }
  else
  {
    __break(1u);
  }
  return result;
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

{
  return specialized StackPlacement.emit(_:at:size:anchor:)(a1, a2, a3, a4, a5, a6, a7);
}

uint64_t _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, int a5@<W4>, uint64_t a6@<X8>)
{
  return _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:)(a1, a2, a3, a4, a5, (void (*)(char *, uint64_t *, double))partial apply for closure #1 in _LazyLayoutViewCache.initialPlacement(newIndex:newPlacedSubviews:oldPlacedSubviews:wasInsertedToSubviews:context:), a6);
}

void Array<A>.sortForDisplay()()
{
  uint64_t v1 = *v0;
  unint64_t v2 = *((void *)*v0 + 2);
  if (v2 > 0x20)
  {
    Array<A>.sortForDisplayLarge()();
    goto LABEL_4;
  }
  if (v2 < 2)
  {
LABEL_4:
    uint64_t v3 = *((void *)*v0 + 2);
    if (v3)
    {
      uint64_t v4 = 0;
      unint64_t v5 = (uint64_t *)(*v0 + 32);
      do
      {
        uint64_t v6 = *v5;
        v5 += 9;
        *(void *)(v6 + 200) = v4;
        *(unsigned char *)(v6 + 208) = 0;
        ++v4;
      }
      while (v3 != v4);
    }
    return;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 1;
  uint64_t v9 = 88;
  int v34 = v0;
LABEL_11:
  if (v8 < v2)
  {
    unint64_t v32 = v8;
    unint64_t v11 = &v1[72 * v8];
    uint64_t v31 = *((void *)v11 + 5);
    char v30 = v11[48];
    uint64_t v29 = *((void *)v11 + 7);
    char v28 = v11[64];
    long long v26 = *(_OWORD *)(v11 + 88);
    long long v27 = *(_OWORD *)(v11 + 72);
    uint64_t v35 = *((void *)v11 + 4);
    swift_retain();
    uint64_t v12 = 0;
    uint64_t v33 = v9;
    while (1)
    {
      if ((unint64_t)(v7 + v12) >= *((void *)v1 + 2))
      {
        __break(1u);
LABEL_45:
        __break(1u);
        break;
      }
      uint64_t v13 = *(void *)&v1[v9 - 56];
      uint64_t v14 = *(void *)&v1[v9 - 48];
      char v15 = v1[v9 - 40];
      uint64_t v16 = *(void *)&v1[v9 - 32];
      char v17 = v1[v9 - 24];
      double v18 = *(double *)(v35 + 168);
      double v19 = *(double *)(v13 + 168);
      if (v18 != v19)
      {
        if (v18 >= v19) {
          goto LABEL_38;
        }
        goto LABEL_33;
      }
      if (*(unsigned char *)(v35 + 165))
      {
        if ((*(unsigned char *)(v13 + 165) & 1) == 0 && (*(unsigned char *)(v13 + 166) & 1) == 0) {
          goto LABEL_38;
        }
      }
      else
      {
        int v20 = *(unsigned __int8 *)(v35 + 166);
        if (*(unsigned char *)(v13 + 165))
        {
          if ((v20 & 1) == 0) {
            goto LABEL_33;
          }
        }
        else if (v20 != *(unsigned __int8 *)(v13 + 166))
        {
          if (v20) {
            goto LABEL_38;
          }
          goto LABEL_33;
        }
      }
      unsigned int v21 = *(_DWORD *)(v35 + 212);
      unsigned int v22 = *(_DWORD *)(v13 + 212);
      if (v21 == v22)
      {
        if (*(unsigned char *)(v35 + 208)) {
          goto LABEL_48;
        }
        if (*(unsigned char *)(v13 + 208)) {
          goto LABEL_49;
        }
        if (*(void *)(v35 + 200) >= *(void *)(v13 + 200))
        {
LABEL_38:
          if (!v12)
          {
            swift_release();
            uint64_t v10 = v33;
            unint64_t v0 = v34;
            goto LABEL_10;
          }
          unint64_t v24 = v7 + v12 + 1;
          uint64_t v10 = v33;
          unint64_t v0 = v34;
LABEL_40:
          swift_retain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
          }
          if (v24 >= *((void *)v1 + 2)) {
            goto LABEL_47;
          }
          uint64_t v25 = &v1[72 * v24];
          *((void *)v25 + 4) = v35;
          *((void *)v25 + 5) = v31;
          v25[48] = v30;
          *((void *)v25 + 7) = v29;
          v25[64] = v28;
          *(_OWORD *)(v25 + 72) = v27;
          *(_OWORD *)(v25 + 88) = v26;
          swift_release();
          swift_release();
          *unint64_t v0 = v1;
LABEL_10:
          unint64_t v8 = v32 + 1;
          unint64_t v2 = *((void *)v1 + 2);
          ++v7;
          uint64_t v9 = v10 + 72;
          if (v32 + 1 == v2) {
            goto LABEL_4;
          }
          goto LABEL_11;
        }
      }
      else if (v21 >= v22)
      {
        goto LABEL_38;
      }
LABEL_33:
      long long v36 = *(_OWORD *)&v1[v9];
      long long v37 = *(_OWORD *)&v1[v9 - 16];
      swift_retain_n();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v1 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v1);
      }
      if ((unint64_t)(v7 + v12 + 1) >= *((void *)v1 + 2)) {
        goto LABEL_45;
      }
      char v23 = &v1[v9];
      *((void *)v23 + 2) = v13;
      *((void *)v23 + 3) = v14;
      v23[32] = v15;
      *((void *)v23 + 5) = v16;
      v23[48] = v17;
      *(_OWORD *)(v23 + 56) = v37;
      *(_OWORD *)(v23 + 72) = v36;
      swift_release();
      swift_release();
      unint64_t v0 = v34;
      *int v34 = v1;
      --v12;
      v9 -= 72;
      if (v7 + v12 == -1)
      {
        unint64_t v24 = 0;
        uint64_t v10 = v33;
        goto LABEL_40;
      }
    }
  }
  __break(1u);
LABEL_47:
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  __break(1u);
}

void type metadata accessor for Attribute<ViewList>()
{
  if (!lazy cache variable for type metadata for Attribute<ViewList>)
  {
    type metadata accessor for ContainerBackgroundHost(255, (unint64_t *)&lazy cache variable for type metadata for ViewList);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<ViewList>);
    }
  }
}

id partial apply for closure #1 in DisplayLink.setFrameInterval(_:reasons:)(void *a1, uint64_t a2)
{
  return closure #1 in DisplayLink.setFrameInterval(_:reasons:)(a1, a2, v2[2], v2[3], v2[4]);
}

ValueMetadata *type metadata accessor for ScrollContentBackground()
{
  return &type metadata for ScrollContentBackground;
}

uint64_t View.scrollIndicatorsAlwaysOverlayContent(_:)(char a1)
{
  swift_getKeyPath();
  *(unsigned char *)(swift_allocObject() + 16) = a1;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();

  return swift_release();
}

{
  return View.scrollIndicatorsAlwaysOverlayContent(_:)(a1);
}

uint64_t base witness table accessor for _AttributeBody in LazySubviewPrefetcher<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for DialogActionDelegate()
{
  return self;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance _LabeledContentStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

void @objc UIHostingContentView._popupMenuButtonDidChangeHandler.setter(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v4 = thunk for @escaping @callee_unowned @convention(block) () -> ()partial apply;
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = a1;
  UIHostingContentView._popupMenuButtonDidChangeHandler.setter((uint64_t)v4, v5);
}

uint64_t UIHostingContentView._popupMenuButtonDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x688));
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

void @objc UIHostingContentView._containerBackgroundViewDidChangeHandler.setter(void *a1, int a2, void *aBlock)
{
  uint64_t v4 = (uint64_t (*)())_Block_copy(aBlock);
  if (v4)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v4;
    uint64_t v4 = thunk for @escaping @callee_unowned @convention(block) () -> ()partial apply;
  }
  else
  {
    uint64_t v5 = 0;
  }
  id v6 = a1;
  UIHostingContentView._containerBackgroundViewDidChangeHandler.setter((uint64_t)v4, v5);
}

uint64_t UIHostingContentView._containerBackgroundViewDidChangeHandler.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x670));
  uint64_t v4 = *v3;
  *uint64_t v3 = a1;
  v3[1] = a2;
  return outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
}

uint64_t assignWithCopy for DropDestinationModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (_OWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  if (*(void *)(a1 + 16))
  {
    if (v6)
    {
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      swift_retain();
      swift_release();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    }
    else
    {
      outlined destroy of Binding<Bool>(a1 + 8);
      char v7 = *(unsigned char *)(a2 + 24);
      *uint64_t v4 = *v5;
      *(unsigned char *)(a1 + 24) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *v5;
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
    *uint64_t v4 = v8;
  }
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v9;
  swift_retain();
  swift_release();
  return a1;
}

id one-time initialization function for defaultUseSetNeedsLayout()
{
  id result = closure #1 in variable initialization expression of static UIKitUpdateCycle.defaultUseSetNeedsLayout();
  static UIKitUpdateCycle.defaultUseSetNeedsLayout = result & 1;
  return result;
}

id closure #1 in variable initialization expression of static UIKitUpdateCycle.defaultUseSetNeedsLayout()
{
  id v0 = objc_msgSend(self, sel_standardUserDefaults);
  uint64_t v1 = (void *)MEMORY[0x18C115780](0xD00000000000001BLL, 0x800000018832CB10);
  id v2 = objc_msgSend(v0, sel_objectForKey_, v1);

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)();
    swift_unknownObjectRelease();
    outlined destroy of Any?((uint64_t)v6);
    uint64_t v3 = (void *)MEMORY[0x18C115780](0xD00000000000001BLL, 0x800000018832CB10);
    id v4 = objc_msgSend(v0, sel_BOOLForKey_, v3);
  }
  else
  {
    memset(v6, 0, sizeof(v6));

    outlined destroy of Any?((uint64_t)v6);
    return 0;
  }
  return v4;
}

uint64_t _DictionaryKeyedDecodingContainer._superDecoder(forKey:)@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v41 = a4;
  uint64_t v52 = a3;
  unint64_t v40 = a7;
  outlined init with copy of TableColumnList((uint64_t)a1, (uint64_t)&v45);
  unint64_t v11 = (void *)(a2 + 136);
  swift_beginAccess();
  uint64_t v12 = *(void **)(a2 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a2 + 136) = v12;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v12[2] + 1, 1, v12);
    *unint64_t v11 = v12;
  }
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  unint64_t v15 = v12[2];
  unint64_t v14 = v12[3];
  if (v15 >= v14 >> 1) {
    *unint64_t v11 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v14 > 1), v15 + 1, 1, v12);
  }
  uint64_t v16 = *((void *)&v46 + 1);
  uint64_t v17 = v47;
  uint64_t v18 = __swift_mutable_project_boxed_opaque_existential_1((uint64_t)&v45, *((uint64_t *)&v46 + 1));
  double v19 = MEMORY[0x1F4188790](v18);
  unsigned int v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v22 + 16))(v21, v19);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v15, (uint64_t)v21, (uint64_t *)(a2 + 136), v16, v17);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v45);
  swift_endAccess();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  uint64_t v23 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v25 = v52;
  if (*(void *)(v52 + 16) && (unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v23, v24), (v27 & 1) != 0))
  {
    outlined init with copy of Any(*(void *)(v25 + 56) + 32 * v26, (uint64_t)&v45);
  }
  else
  {
    long long v45 = 0u;
    long long v46 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v46 + 1))
  {
    outlined init with take of Any(&v45, &v43);
  }
  else
  {
    id v28 = objc_allocWithZone(MEMORY[0x1E4F1CA98]);
    id v29 = objc_msgSend(v28, sel_init, v38, v39);
    uint64_t v44 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
    *(void *)&long long v43 = v29;
    outlined destroy of Any?((uint64_t)&v45);
  }
  outlined init with copy of Any((uint64_t)&v43, (uint64_t)v42);
  uint64_t v30 = *(void *)(a2 + 136);
  long long v31 = *(_OWORD *)(a2 + 72);
  long long v32 = *(_OWORD *)(a2 + 104);
  long long v49 = *(_OWORD *)(a2 + 88);
  long long v50 = v32;
  long long v51 = *(_OWORD *)(a2 + 120);
  long long v33 = *(_OWORD *)(a2 + 40);
  long long v45 = *(_OWORD *)(a2 + 24);
  long long v46 = v33;
  long long v47 = *(_OWORD *)(a2 + 56);
  long long v48 = v31;
  uint64_t v34 = type metadata accessor for __DictionaryDecoder();
  swift_allocObject();
  swift_bridgeObjectRetain();
  outlined retain of DictionaryDecoder._Options((uint64_t)&v45);
  uint64_t v35 = __DictionaryDecoder.init(referencing:at:options:)((uint64_t)v42, v30, &v45);
  long long v36 = v40;
  v40[3] = v34;
  v36[4] = lazy protocol witness table accessor for type __DictionaryEncoder and conformance __DictionaryEncoder(&lazy protocol witness table cache variable for type __DictionaryDecoder and conformance __DictionaryDecoder, (void (*)(uint64_t))type metadata accessor for __DictionaryDecoder);
  *long long v36 = v35;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v43);
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(a2);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance DraggableTabModifier@<X0>(uint64_t (**a1)@<X0>(uint64_t *a1@<X8>)@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  if (*v1)
  {
    uint64_t v5 = swift_allocObject();
    *(void *)(v5 + 16) = v3;
    *(void *)(v5 + 24) = v4;
    uint64_t v6 = _sSo14NSItemProviderCSgIego_ACIegr_TRTA_0;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  *a1 = v6;
  a1[1] = (uint64_t (*)@<X0>(uint64_t *@<X8>))v5;

  return outlined copy of AppIntentExecutor?(v3);
}

uint64_t DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  v207 = a2;
  v199 = a5;
  uint64_t v184 = type metadata accessor for DisplayList.ArchiveIDs();
  unint64_t v206 = *(void *)(v184 - 8);
  MEMORY[0x1F4188790](v184);
  v180 = &v168[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718]);
  uint64_t v178 = v11;
  MEMORY[0x1F4188790](v11);
  v179 = &v168[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13);
  v192 = &v168[-v14];
  MEMORY[0x1F4188790](v15);
  v185 = &v168[-v16];
  MEMORY[0x1F4188790](v17);
  double v19 = &v168[-v18];
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = &v168[-v21];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], v10);
  MEMORY[0x1F4188790](v23 - 8);
  uint64_t v25 = &v168[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v26);
  id v28 = &v168[-v27];
  uint64_t v29 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  MEMORY[0x1F4188790](v29);
  MEMORY[0x1F4188790](v30);
  MEMORY[0x1F4188790](v31);
  __int16 v36 = *((_WORD *)a1 + 4);
  uint64_t v37 = *a1;
  if ((v36 & 2) == 0)
  {
    char v38 = *((unsigned char *)a1 + 10);
    *(void *)&long long v209 = *a1;
    WORD4(v209) = v36;
    BYTE10(v209) = v38;
    return DisplayList.version.getter();
  }
  v175 = v28;
  v176 = (Swift::UInt32 *)&v168[-v33];
  v181 = v35;
  uint64_t v182 = v32;
  v172 = (Swift::UInt32 *)v34;
  v173 = v25;
  v174 = v22;
  v170 = v19;
  uint64_t result = DisplayList.init()();
  __int16 v40 = WORD4(v209);
  char v41 = BYTE10(v209);
  *a1 = v209;
  *((_WORD *)a1 + 4) = v40;
  *((unsigned char *)a1 + 10) = v41;
  uint64_t v196 = *(void *)(v37 + 16);
  v197 = a1;
  if (v196)
  {
    unint64_t v42 = 0;
    uint64_t v204 = 0;
    uint64_t v194 = v37;
    uint64_t v195 = v37 + 32;
    v183 = (uint64_t *)(v206 + 48);
    v171 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v206 + 56);
    uint64_t v190 = a3;
    uint64_t v191 = v5;
    uint64_t v189 = a4;
    while (2)
    {
      if (v42 >= *(void *)(v37 + 16)) {
        goto LABEL_88;
      }
      long long v50 = (uint64_t *)(v195 + 72 * v42);
      uint64_t v51 = *v50;
      uint64_t v52 = v50[1];
      uint64_t v53 = v50[2];
      uint64_t v54 = v50[3];
      uint64_t v55 = v50[4];
      uint64_t v56 = v50[5];
      unint64_t v46 = v50[6];
      uint64_t v57 = v50[7];
      int v58 = *((unsigned __int16 *)v50 + 32) | (*((unsigned __int8 *)v50 + 66) << 16);
      LODWORD(v50) = *((_DWORD *)v50 + 17);
      unint64_t v203 = v42 + 1;
      int v202 = (int)v50;
      LODWORD(v220[0]) = v50;
      outlined copy of DisplayList.Item.Value(v56, v46);
      outlined copy of DisplayList.Item.Value(v56, v46);
      DisplayList.Index.enter(identity:)();
      long long v201 = v209;
      int v200 = v210;
      uint64_t v59 = v56;
      unint64_t v45 = v46;
      uint64_t v60 = v57;
      uint64_t v43 = v57;
      unint64_t v206 = v56;
      int v44 = v58;
      int v61 = v58;
      switch(v46 >> 62)
      {
        case 1uLL:
          uint64_t v205 = v60;
          uint64_t v223 = v60;
          unsigned __int16 v224 = v58;
          unsigned __int8 v225 = BYTE2(v58);
          int v76 = v192;
          outlined init with copy of DisplayList.ArchiveIDs?(v190, (uint64_t)v192, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
          int v77 = BYTE4(v46);
          int v193 = v58;
          if (BYTE4(v46) == 1)
          {
            uint64_t v59 = v206;
            uint64_t v110 = swift_projectBox();
            uint64_t v111 = v189;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            outlined copy of DisplayList.Effect(v59, v46, 1);
            outlined assign with copy of DisplayList.ArchiveIDs?(v110, (uint64_t)v76);
            unsigned int v112 = v46;
            uint64_t v187 = 1;
            uint64_t v188 = v111;
            uint64_t v79 = v207;
          }
          else
          {
            unint64_t v198 = v46;
            uint64_t v78 = v189;
            uint64_t v80 = v206;
            uint64_t v79 = v207;
            if (v77 == 7)
            {
              long long v113 = v207;
              uint64_t v114 = *(void *)(v206 + 16);
              __int16 v115 = *(_WORD *)(v206 + 24);
              char v116 = *(unsigned char *)(v206 + 26);
              LODWORD(v188) = *(_DWORD *)(v206 + 28);
              *(void *)&long long v209 = v114;
              WORD4(v209) = v115;
              BYTE10(v209) = v116;
              uint64_t v117 = MEMORY[0x1E4F3F478];
              v118 = v185;
              outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v76, (uint64_t)v185, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(v220, &v209, v113, v118, v78);
              outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v118, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v117, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
              uint64_t v119 = v220[0];
              uint64_t v59 = swift_allocObject();
              unsigned int v112 = 0;
              __int16 v120 = WORD4(v209);
              char v121 = BYTE10(v209);
              *(void *)(v59 + 16) = v209;
              *(_WORD *)(v59 + 24) = v120;
              *(unsigned char *)(v59 + 26) = v121;
              *(_DWORD *)(v59 + 28) = v188;
              if (v119 > v55) {
                uint64_t v55 = v119;
              }
              uint64_t v79 = v113;
              uint64_t v187 = 7;
              uint64_t v188 = v78;
              goto LABEL_71;
            }
            if (v77 == 12)
            {
              outlined init with copy of TableColumnList(v206 + 16, (uint64_t)v220);
              uint64_t v81 = *v79;
              uint64_t v187 = *v183;
              int v82 = ((uint64_t (*)(unsigned char *, uint64_t, uint64_t))v187)(v76, 1, v184);
              uint64_t v83 = v191;
              if (v82)
              {
                uint64_t v84 = type metadata accessor for UUID();
                uint64_t v85 = (uint64_t)v173;
                (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v173, 1, 1, v84);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of DisplayList.Effect(v80, v198, 12);
              }
              else
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                outlined copy of DisplayList.Effect(v80, v198, 12);
                uint64_t v85 = (uint64_t)v173;
                DisplayList.ArchiveIDs.uuid.getter();
                uint64_t v84 = type metadata accessor for UUID();
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v85, 0, 1, v84);
              }
              uint64_t v134 = (uint64_t)v179;
              v135 = v181;
              uint64_t v136 = (uint64_t)v181 + *(int *)(v182 + 24);
              type metadata accessor for UUID();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v84 - 8) + 56))(v136, 1, 1, v84);
              void *v135 = v81;
              outlined assign with take of UUID?(v85, v136);
              v137 = v172;
              outlined init with take of DisplayList.HostedViewState.Key((uint64_t)v135, (uint64_t)v172, type metadata accessor for DisplayList.HostedViewState.Key);
              uint64_t v138 = *(void *)(v83 + 104);
              if (*(void *)(v138 + 16)
                && (unint64_t v139 = specialized __RawDictionaryStorage.find<A>(_:)(v137), (v140 & 1) != 0))
              {
                outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v138 + 56) + 176 * v139, (uint64_t)&v209);
                if (*((void *)&v211 + 1))
                {
                  uint64_t v141 = v206;
                  if (*((void *)&v218 + 1))
                  {
                    v208[0] = *((void *)&v218 + 1);
                    v208[1] = v219;
                    uint64_t v142 = _ViewOutputs.subscript.getter();
                    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v209, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
                    if ((v142 & 0x100000000) == 0)
                    {
                      uint64_t v143 = v221;
                      uint64_t v144 = v222;
                      __swift_project_boxed_opaque_existential_1(v220, v221);
                      (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v144 + 24))(v208, v143, v144);
                      LODWORD(v143) = v208[0];
                      uint64_t v145 = v223;
                      int v146 = v224;
                      int v147 = v225;
                      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                      *(void *)&long long v209 = v78;
                      uint64_t v149 = v145;
                      uint64_t v150 = v184;
                      unsigned int v169 = v169 & 0xFF000000 | v146 | (v147 << 16);
                      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v149, v169, v143, isUniquelyReferenced_nonNull_native);
                      uint64_t v188 = v209;
                      swift_bridgeObjectRelease();
                      uint64_t Value = AGGraphGetValue();
                      uint64_t v152 = *(void *)Value;
                      LOWORD(v143) = *(_WORD *)(Value + 8);
                      LOBYTE(v147) = *(unsigned char *)(Value + 10);
                      swift_bridgeObjectRetain();
                      outlined consume of DisplayList.Effect(v206, v198, 12);
                      outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v137, type metadata accessor for DisplayList.HostedViewState.Key);
                      uint64_t v223 = v152;
                      unsigned __int16 v224 = v143;
                      unsigned __int8 v225 = v147;
                      v153 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v187;
LABEL_67:
                      uint64_t v154 = MEMORY[0x1E4F3F478];
                      outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v192, v134, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
                      int v155 = v153(v134, 1, v150);
                      outlined destroy of DisplayList.ArchiveIDs?(v134, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v154, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
                      if (v155 == 1)
                      {
                        uint64_t v59 = 0;
                        uint64_t v156 = 19;
                      }
                      else
                      {
                        uint64_t v59 = swift_allocBox();
                        (*v171)(v157, 1, 1, v150);
                        uint64_t v156 = 1;
                      }
                      uint64_t v79 = v207;
                      uint64_t v187 = v156;
                      __swift_destroy_boxed_opaque_existential_1((uint64_t)v220);
                      unsigned int v112 = 0;
                      int v76 = v192;
LABEL_71:
                      unint64_t v46 = v198;
                      goto LABEL_72;
                    }
                  }
                  else
                  {
                    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v209, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
                  }
LABEL_66:
                  swift_bridgeObjectRelease();
                  DisplayList.init()();
                  outlined consume of DisplayList.Effect(v141, v198, 12);
                  outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v137, type metadata accessor for DisplayList.HostedViewState.Key);
                  uint64_t v223 = v209;
                  unsigned __int16 v224 = WORD4(v209);
                  unsigned __int8 v225 = BYTE10(v209);
                  uint64_t v188 = v78;
                  v153 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v187;
                  uint64_t v150 = v184;
                  goto LABEL_67;
                }
              }
              else
              {
                long long v218 = 0u;
                long long v219 = 0u;
                long long v216 = 0u;
                long long v217 = 0u;
                long long v214 = 0u;
                long long v215 = 0u;
                long long v212 = 0u;
                long long v213 = 0u;
                long long v210 = 0u;
                long long v211 = 0u;
                long long v209 = 0u;
              }
              outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v209, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
              uint64_t v141 = v206;
              goto LABEL_66;
            }
            unint64_t v122 = v198;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            uint64_t v187 = HIDWORD(v122);
            outlined copy of DisplayList.Effect(v80, v122, SBYTE4(v122));
            uint64_t v188 = v78;
            uint64_t v59 = v80;
            unint64_t v46 = v122;
            unsigned int v112 = v122;
          }
LABEL_72:
          uint64_t v158 = MEMORY[0x1E4F3F478];
          v159 = v185;
          outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v76, (uint64_t)v185, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
          DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(&v209, &v223, v79, v159, v188);
          swift_bridgeObjectRelease();
          v186 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBB718];
          outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v159, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v158, MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
          uint64_t v160 = v209;
          int v44 = v224 | (v225 << 16);
          uint64_t v187 = v112 | ((unint64_t)v187 << 32) | 0x4000000000000000;
          uint64_t v188 = v223;
          outlined consume of DisplayList.Item.Value(0, 0xC000000000000000);
          outlined consume of DisplayList.Item.Value(v206, v46);
          if (v160 > v55) {
            uint64_t v55 = v160;
          }
          outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v192, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, v158, (uint64_t)v186, (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
          goto LABEL_75;
        case 2uLL:
          uint64_t v205 = v60;
          uint64_t v59 = v206;
          uint64_t v86 = *(void *)(v206 + 16);
          unint64_t v198 = v46;
          if (!v86) {
            goto LABEL_5;
          }
          int v193 = v58;
          outlined copy of DisplayList.Item.Value(v206, v46);
          unint64_t v87 = 0;
          uint64_t v88 = 56;
          uint64_t v89 = v190;
          uint64_t v90 = v189;
          do
          {
            uint64_t result = swift_isUniquelyReferenced_nonNull_native();
            if ((result & 1) == 0)
            {
              uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()((void *)v59);
              uint64_t v59 = result;
            }
            if (v87 >= *(void *)(v59 + 16))
            {
              __break(1u);
LABEL_88:
              __break(1u);
              return result;
            }
            ++v87;
            DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(&v209, v59 + v88, v207, v89, v90);
            if ((uint64_t)v209 > v55) {
              uint64_t v55 = v209;
            }
            v88 += 40;
          }
          while (v86 != v87);
          outlined consume of DisplayList.Item.Value(v206, v198);
LABEL_5:
          uint64_t v43 = 0;
          int v44 = 0;
          unint64_t v45 = 0x8000000000000000;
          unint64_t v46 = v198;
LABEL_6:
          *(void *)&long long v209 = v51;
          *((void *)&v209 + 1) = v52;
          *(void *)&long long v210 = v53;
          *((void *)&v210 + 1) = v54;
          *(void *)&long long v211 = v55;
          *((void *)&v211 + 1) = v59;
          *(void *)&long long v212 = v45;
          *((void *)&v212 + 1) = v43;
          LOWORD(v213) = v44;
          BYTE2(v213) = BYTE2(v44);
          DWORD1(v213) = v202;
          unint64_t v47 = v45;
          DisplayList.append(_:)();
          uint64_t v48 = v204;
          if (v55 > v204) {
            uint64_t v48 = v55;
          }
          uint64_t v204 = v48;
          long long v209 = v201;
          LOBYTE(v210) = v200;
          DisplayList.Index.leave(index:)();
          outlined consume of DisplayList.Item.Value(v206, v46);
          uint64_t result = outlined consume of DisplayList.Item.Value(v59, v47);
          unint64_t v42 = v203;
          long long v49 = v199;
          uint64_t v37 = v194;
          if (v203 != v196) {
            continue;
          }
          uint64_t result = swift_bridgeObjectRelease();
          *long long v49 = v204;
          return result;
        case 3uLL:
          goto LABEL_6;
        default:
          uint64_t v205 = v60;
          uint64_t v62 = v206;
          unint64_t v63 = v206 >> 60;
          if (v206 >> 60 == 9)
          {
            uint64_t v91 = *(void *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
            __int16 v92 = *(_WORD *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
            char v93 = *(unsigned char *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x1A);
            uint64_t v94 = *(void *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
            uint64_t v95 = *(void *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
            LODWORD(v188) = *(unsigned __int8 *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
            LODWORD(v187) = *(_DWORD *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x34);
            LODWORD(v186) = *(unsigned __int8 *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
            uint64_t v96 = v206;
            int v177 = *(_DWORD *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x3C);
            char v97 = *(unsigned char *)((v206 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
            *(void *)&long long v209 = v91;
            WORD4(v209) = v92;
            BYTE10(v209) = v93;
            outlined copy of DisplayList.Item.Value(v206, v46);
            swift_bridgeObjectRetain();
            DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(v220, &v209, v207, v190, v189);
            uint64_t v98 = v220[0];
            uint64_t v99 = swift_allocObject();
            __int16 v100 = WORD4(v209);
            char v101 = BYTE10(v209);
            *(void *)(v99 + 16) = v209;
            *(_WORD *)(v99 + 24) = v100;
            *(unsigned char *)(v99 + 26) = v101;
            *(void *)(v99 + 32) = v94;
            *(void *)(v99 + 40) = v95;
            *(unsigned char *)(v99 + 48) = v188;
            *(_DWORD *)(v99 + 52) = v187;
            *(unsigned char *)(v99 + 56) = (_BYTE)v186;
            *(_DWORD *)(v99 + 60) = v177;
            *(unsigned char *)(v99 + 64) = v97;
            outlined consume of DisplayList.Item.Value(v96, v46);
            outlined consume of DisplayList.Item.Value(v96, v46);
            uint64_t v43 = 0;
            int v44 = 0;
            uint64_t v59 = v99 | 0x9000000000000000;
            unint64_t v45 = (unsigned __int16)v46;
            if (v98 > v55) {
              uint64_t v55 = v98;
            }
            goto LABEL_6;
          }
          if (v63 != 11)
          {
            if (v63 != 12)
            {
              uint64_t v59 = v206;
              unint64_t v45 = v46;
              uint64_t v43 = v205;
              int v44 = v61;
              goto LABEL_6;
            }
            uint64_t v64 = v189;
            uint64_t v65 = v190;
            uint64_t v66 = v184;
            uint64_t v67 = v185;
            uint64_t v68 = (uint64_t)v180;
            if (*(void *)(v189 + 16) && (unint64_t v69 = specialized __RawDictionaryStorage.find<A>(_:)(v206), (v70 & 1) != 0))
            {
              uint64_t v71 = *(void *)(v64 + 56) + 16 * v69;
              uint64_t v72 = *(void *)v71;
              __int16 v73 = *(_WORD *)(v71 + 8);
              LOBYTE(v71) = *(unsigned char *)(v71 + 10);
              uint64_t v188 = v72;
              *(void *)&long long v209 = v72;
              WORD4(v209) = v73;
              BYTE10(v209) = v71;
              uint64_t v74 = v65;
              uint64_t v75 = (uint64_t)v170;
              outlined init with copy of DisplayList.ArchiveIDs?(v74, (uint64_t)v170, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))*v183)(v75, 1, v66) != 1)
              {
                uint64_t v161 = v75;
                v162 = (uint64_t (*)(void))MEMORY[0x1E4F3F478];
                uint64_t v187 = MEMORY[0x1E4F3F478];
                outlined init with take of DisplayList.HostedViewState.Key(v161, v68, MEMORY[0x1E4F3F478]);
                outlined init with copy of DisplayList.HostedViewState.Key(v68, (uint64_t)v67, v162);
                v186 = *v171;
                v186((uint64_t)v67, 0, 1, v66);
                outlined copy of DisplayList.Item.Value(v62, v46);
                outlined copy of DisplayList.Item.Value(v62, v46);
                outlined copy of DisplayList.Item.Value(v62, v46);
                swift_bridgeObjectRetain();
                DisplayList.HostedViewState.spliceViews(into:index:archive:substitutions:)(v220, &v209, v207, v67, v64);
                outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v67, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
                uint64_t v163 = v220[0];
                uint64_t v59 = swift_allocBox();
                uint64_t v165 = v164;
                outlined init with copy of DisplayList.HostedViewState.Key(v68, v164, (uint64_t (*)(void))v187);
                v186(v165, 0, 1, v184);
                uint64_t v188 = v209;
                int v44 = WORD4(v209) | (BYTE10(v209) << 16);
                outlined consume of DisplayList.Item.Value(v62, v46);
                if (v163 > v55) {
                  uint64_t v55 = v163;
                }
                outlined destroy of DisplayList.HostedViewState.Key(v68, MEMORY[0x1E4F3F478]);
                outlined consume of DisplayList.Item.Value(v62, v46);
                outlined consume of DisplayList.Item.Value(v62, v46);
                uint64_t v43 = v188;
                unint64_t v45 = 0x4000000100000000;
                goto LABEL_6;
              }
              outlined copy of DisplayList.Item.Value(v62, v46);
              outlined copy of DisplayList.Item.Value(v62, v46);
              outlined copy of DisplayList.Item.Value(v62, v46);
              outlined destroy of DisplayList.ArchiveIDs?(v75, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
            }
            else
            {
              outlined copy of DisplayList.Item.Value(v62, v46);
              outlined copy of DisplayList.Item.Value(v62, v46);
              outlined copy of DisplayList.Item.Value(v62, v46);
            }
            outlined consume of DisplayList.Item.Value(v62, v46);
            outlined consume of DisplayList.Item.Value(v62, v46);
            outlined consume of DisplayList.Item.Value(v62, v46);
            uint64_t v59 = 0;
LABEL_56:
            uint64_t v43 = 0;
            int v44 = 0;
            unint64_t v45 = 0xC000000000000000;
            goto LABEL_6;
          }
          uint64_t v102 = *v207;
          uint64_t v103 = (uint64_t)v174;
          outlined init with copy of DisplayList.ArchiveIDs?(v190, (uint64_t)v174, &lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478]);
          uint64_t v187 = *v183;
          int v104 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v187)(v103, 1, v184);
          outlined copy of DisplayList.Item.Value(v62, v46);
          outlined copy of DisplayList.Item.Value(v62, v46);
          unint64_t v105 = v46;
          outlined copy of DisplayList.Item.Value(v62, v46);
          uint64_t v106 = v191;
          long long v107 = v181;
          if (v104 == 1)
          {
            outlined destroy of DisplayList.ArchiveIDs?(v103, (uint64_t)&lazy cache variable for type metadata for DisplayList.ArchiveIDs?, MEMORY[0x1E4F3F478], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
            uint64_t v108 = type metadata accessor for UUID();
            uint64_t v109 = (uint64_t)v175;
            (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v175, 1, 1, v108);
          }
          else
          {
            uint64_t v109 = (uint64_t)v175;
            DisplayList.ArchiveIDs.uuid.getter();
            outlined destroy of DisplayList.HostedViewState.Key(v103, MEMORY[0x1E4F3F478]);
            uint64_t v108 = type metadata accessor for UUID();
            (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v109, 0, 1, v108);
          }
          uint64_t v123 = (uint64_t)v107 + *(int *)(v182 + 24);
          type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v108 - 8) + 56))(v123, 1, 1, v108);
          *long long v107 = v102;
          outlined assign with take of UUID?(v109, v123);
          long long v124 = v176;
          outlined init with take of DisplayList.HostedViewState.Key((uint64_t)v107, (uint64_t)v176, type metadata accessor for DisplayList.HostedViewState.Key);
          uint64_t v125 = *(void *)(v106 + 104);
          if (*(void *)(v125 + 16) && (unint64_t v126 = specialized __RawDictionaryStorage.find<A>(_:)(v124), (v127 & 1) != 0))
          {
            outlined init with copy of DisplayList.HostedViewState.ViewInfo(*(void *)(v125 + 56) + 176 * v126, (uint64_t)&v209);
            if (*((void *)&v211 + 1))
            {
              unint64_t v46 = v105;
              uint64_t v128 = v206;
              if (*((void *)&v218 + 1))
              {
                v220[0] = *((void *)&v218 + 1);
                v220[1] = v219;
                uint64_t v129 = _ViewOutputs.subscript.getter();
                outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v209, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
                if ((v129 & 0x100000000) == 0)
                {
                  uint64_t v130 = AGGraphGetValue();
                  uint64_t v188 = *(void *)v130;
                  int v131 = *(unsigned __int16 *)(v130 + 8);
                  int v132 = *(unsigned __int8 *)(v130 + 10);
                  uint64_t v133 = v184;
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v187)(v190, 1, v184) == 1)
                  {
                    uint64_t v59 = 0;
                    uint64_t v187 = 0x4000001300000000;
                  }
                  else
                  {
                    uint64_t v187 = 0x4000000100000000;
                    uint64_t v59 = swift_allocBox();
                    (*v171)(v166, 1, 1, v133);
                  }
                  int v44 = v131 | (v132 << 16);
                  swift_bridgeObjectRetain_n();
                  uint64_t v167 = v206;
                  outlined consume of DisplayList.Item.Value(v206, v46);
                  *(void *)&long long v209 = v188;
                  WORD4(v209) = v131;
                  BYTE10(v209) = v132;
                  DisplayList.version.getter();
                  swift_bridgeObjectRelease();
                  if (v220[0] > v55) {
                    uint64_t v55 = v220[0];
                  }
                  outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v176, type metadata accessor for DisplayList.HostedViewState.Key);
                  outlined consume of DisplayList.Item.Value(v167, v46);
                  outlined consume of DisplayList.Item.Value(v167, v46);
                  outlined consume of DisplayList.Item.Value(v167, v46);
LABEL_75:
                  unint64_t v45 = v187;
                  uint64_t v43 = v188;
                  goto LABEL_6;
                }
              }
              else
              {
                outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v209, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
              }
              goto LABEL_55;
            }
          }
          else
          {
            long long v218 = 0u;
            long long v219 = 0u;
            long long v216 = 0u;
            long long v217 = 0u;
            long long v214 = 0u;
            long long v215 = 0u;
            long long v212 = 0u;
            long long v213 = 0u;
            long long v210 = 0u;
            long long v211 = 0u;
            long long v209 = 0u;
          }
          outlined destroy of DisplayList.ArchiveIDs?((uint64_t)&v209, (uint64_t)&lazy cache variable for type metadata for DisplayList.HostedViewState.ViewInfo?, (uint64_t)&type metadata for DisplayList.HostedViewState.ViewInfo, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for DisplayList.HostedViewState.ViewInfo?);
          unint64_t v46 = v105;
          uint64_t v128 = v206;
LABEL_55:
          outlined consume of DisplayList.Item.Value(v128, v46);
          outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v124, type metadata accessor for DisplayList.HostedViewState.Key);
          outlined consume of DisplayList.Item.Value(v128, v46);
          outlined consume of DisplayList.Item.Value(v128, v46);
          outlined consume of DisplayList.Item.Value(v128, v46);
          uint64_t v59 = 0;
          goto LABEL_56;
      }
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t *v199 = 0;
  return result;
}

uint64_t outlined copy of DisplayList.Item.Value(uint64_t result, unint64_t a2)
{
  unint64_t v3 = a2 >> 62;
  if (a2 >> 62 != 2)
  {
    if (v3 != 1)
    {
      if (!v3)
      {
        return outlined copy of DisplayList.Content.Value(result);
      }
      return result;
    }
    outlined copy of DisplayList.Effect(result, a2, SBYTE4(a2));
  }
  return swift_bridgeObjectRetain();
}

uint64_t outlined init with copy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  _s10Foundation4UUIDVSgMaTm_1(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

void type metadata accessor for UUID?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s10Foundation4UUIDVSgMaTm_0(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void _s10Foundation4UUIDVSgMaTm_1(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t closure #1 in IdentifiedDropConfiguration.drop(_:onto:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a1 + 32))(a2, a3, a4);
}

uint64_t outlined init with copy of DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for DisplayList.HostedViewState.ViewInfo(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v5;
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = v6;
  unint64_t v8 = *(void **)(a2 + 144);
  uint64_t v7 = *(void *)(a2 + 152);
  *(void *)(a1 + 144) = v8;
  *(void *)(a1 + 152) = v7;
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_retain();
  swift_retain();
  swift_retain();
  id v9 = v8;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t TabContent.dropDestination<A>(for:action:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v14 = (void *)swift_allocObject();
  void v14[2] = a3;
  v14[3] = a4;
  v14[4] = a5;
  v14[5] = a6;
  v14[6] = a1;
  v14[7] = a2;
  swift_retain();
  TabContent._dropDestination<A>(for:isTargeted:action:)(0, 0, 0, (uint64_t)partial apply for closure #1 in TabContent.dropDestination<A>(for:action:), (uint64_t)v14, a3, a4, a7, a5, a6);

  return swift_release();
}

{
  return TabContent._dropDestination<A>(for:isTargeted:action:)(0, 0, 0, a1, a2, a3, a4, a7, a5, a6);
}

uint64_t outlined copy of DisplayList.Effect(uint64_t result, char a2, char a3)
{
  switch(a3)
  {
    case 1:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
      uint64_t result = swift_retain();
      break;
    case 5:
      uint64_t result = outlined copy of GraphicsBlendMode(result, a2 & 1);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined destroy of Any?(uint64_t a1)
{
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined destroy of DisplayList.ArchiveIDs?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

void type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>);
    lazy protocol witness table accessor for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
    }
  }
}

uint64_t InlinePickerStyle.Body.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v40 = a1;
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v39 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v37 = *(void *)(v39 - 8);
  MEMORY[0x1F4188790](v39);
  uint64_t v35 = (char *)&v33 - v5;
  long long v50 = &type metadata for InlinePickerStyle;
  *(void *)&long long v51 = v4;
  uint64_t v33 = v4;
  *((void *)&v51 + 1) = &protocol witness table for InlinePickerStyle;
  uint64_t v52 = v3;
  uint64_t v6 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v6 - 8);
  unint64_t v8 = (char *)&v33 - v7;
  uint64_t v9 = type metadata accessor for ResolvedPicker();
  uint64_t v34 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v33 - v10;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v33 - v13;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v41 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v33 - v16;
  type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>();
  uint64_t v38 = type metadata accessor for ModifiedContent();
  uint64_t v42 = *(void *)(v38 - 8);
  MEMORY[0x1F4188790](v38);
  double v19 = (char *)&v33 - v18;
  LODWORD(v50) = *(_DWORD *)v2;
  long long v51 = *(_OWORD *)(v2 + 8);
  InlinePickerStyle.Body.base.getter((uint64_t)v8);
  uint64_t v20 = (uint64_t)v35;
  (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v35, v8, v39);
  uint64_t v21 = ResolvedPicker.init(configuration:)(v20, (uint64_t)v11);
  View.pickerStyle<A, B>(_:in:)(v21, v22, v9, (uint64_t)&type metadata for SectionPickerStyle, MEMORY[0x1E4F3FCF0], (uint64_t)&protocol witness table for ResolvedPicker<A>, MEMORY[0x1E4F3FCE8], (uint64_t)v14);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v11, v9);
  uint64_t v23 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  uint64_t v48 = &protocol witness table for ResolvedPicker<A>;
  uint64_t v49 = v23;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.pickerStyle<A, B>(_:in:)(WitnessTable, v25, v12, (uint64_t)&type metadata for SegmentedPickerStyle, MEMORY[0x1E4F40520], WitnessTable, MEMORY[0x1E4F40518], (uint64_t)v17);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v12);
  uint64_t v26 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, PickerStyleWriter<SegmentedPickerStyle>, EmptyModifier>);
  uint64_t v46 = WitnessTable;
  uint64_t v47 = v26;
  uint64_t v27 = swift_getWitnessTable();
  unint64_t ShouldUseListSectionInlinePickerStyle = lazy protocol witness table accessor for type ShouldUseListSectionInlinePickerStyle and conformance ShouldUseListSectionInlinePickerStyle();
  View.pickerStyle<A, B>(_:if:)(ShouldUseListSectionInlinePickerStyle, v15, (uint64_t)&unk_1ED4633F0, (uint64_t)&type metadata for SectionPickerStyle, v27, ShouldUseListSectionInlinePickerStyle, (uint64_t)v19);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v17, v15);
  uint64_t v29 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldUseListSectionInlinePickerStyle, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
  uint64_t v44 = v27;
  uint64_t v45 = v29;
  uint64_t v30 = v38;
  uint64_t v31 = swift_getWitnessTable();
  View.pickerStyle<A>(_:)(v31, v30, (uint64_t)&type metadata for WheelPickerStyle, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v42 + 8))(v19, v30);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<TextInputSuggestionsContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    type metadata accessor for PickerStyleWriter<SectionPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SectionPickerStyle>);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<SectionPickerStyle>, EmptyModifier>);
    }
  }
}

uint64_t type metadata accessor for ResolvedPicker()
{
  return __swift_instantiateGenericMetadata();
}

void specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1)
{
  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast()) {
    goto LABEL_2;
  }
  outlined init with copy of Any(a1, (uint64_t)v22);
  uint64_t v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  if (*MEMORY[0x1E4F1CFD0]) {
    BOOL v3 = v21 == (id)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v3 = 0;
  }
  if (v3 || *MEMORY[0x1E4F1CFC8] && v21 == (id)*MEMORY[0x1E4F1CFC8])
  {

LABEL_11:
    uint64_t v4 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v6 = v2;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA70], v4);
    swift_willThrow();
    return;
  }
  id v7 = objc_msgSend(v21, sel_shortValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithShort_, v7);
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
LABEL_2:

    return;
  }
  uint64_t v10 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v12 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v21, sel_description);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000188330180;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x3631746E49;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
  swift_willThrow();
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  unsigned char v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (!swift_dynamicCast())
  {
    outlined init with copy of Any(a1, (uint64_t)v22);
    uint64_t v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    if ((swift_dynamicCast() & 1) == 0)
    {
LABEL_10:
      uint64_t v4 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v6 = v5;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v6 = v2;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA70], v4);
      swift_willThrow();
      return;
    }
    if (*MEMORY[0x1E4F1CFD0]) {
      BOOL v3 = v21 == (id)*MEMORY[0x1E4F1CFD0];
    }
    else {
      BOOL v3 = 0;
    }
    if (v3 || *MEMORY[0x1E4F1CFC8] && v21 == (id)*MEMORY[0x1E4F1CFC8])
    {

      goto LABEL_10;
    }
    id v7 = objc_msgSend(v21, sel_charValue);
    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
    id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithChar_, v7);
    char v9 = static NSObject.== infix(_:_:)();

    if ((v9 & 1) == 0)
    {
      uint64_t v10 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v12 = v11;
      swift_beginAccess();
      swift_bridgeObjectRetain();
      _StringGuts.grow(_:)(43);
      swift_bridgeObjectRelease();
      id v13 = objc_msgSend(v21, sel_description);
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      uint64_t v16 = v15;

      v17._countAndFlagsBits = v14;
      v17._object = v16;
      String.append(_:)(v17);
      swift_bridgeObjectRelease();
      v18._object = (void *)0x8000000188330180;
      v18._countAndFlagsBits = 0xD000000000000012;
      String.append(_:)(v18);
      v19._countAndFlagsBits = 947154505;
      v19._object = (void *)0xE400000000000000;
      String.append(_:)(v19);
      v20._countAndFlagsBits = 46;
      v20._object = (void *)0xE100000000000000;
      String.append(_:)(v20);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
      swift_willThrow();
    }
  }
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  unsigned char v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast()) {
    goto LABEL_2;
  }
  outlined init with copy of Any(a1, (uint64_t)v22);
  uint64_t v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  if (*MEMORY[0x1E4F1CFD0]) {
    BOOL v3 = v21 == (id)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v3 = 0;
  }
  if (v3 || *MEMORY[0x1E4F1CFC8] && v21 == (id)*MEMORY[0x1E4F1CFC8])
  {

LABEL_11:
    uint64_t v4 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v6 = v2;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA70], v4);
    swift_willThrow();
    return;
  }
  id v7 = objc_msgSend(v21, sel_unsignedCharValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedChar_, v7);
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
LABEL_2:

    return;
  }
  uint64_t v10 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v12 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v21, sel_description);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000188330180;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x38746E4955;
  v19._object = (void *)0xE500000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
  swift_willThrow();
}

{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  id v7;
  id v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  uint64_t v14;
  void *v15;
  void *v16;
  Swift::String v17;
  Swift::String v18;
  Swift::String v19;
  Swift::String v20;
  id v21;
  unsigned char v22[32];

  outlined init with copy of Any(a1, (uint64_t)v22);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast()) {
    goto LABEL_2;
  }
  outlined init with copy of Any(a1, (uint64_t)v22);
  uint64_t v2 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  if (*MEMORY[0x1E4F1CFD0]) {
    BOOL v3 = v21 == (id)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v3 = 0;
  }
  if (v3 || *MEMORY[0x1E4F1CFC8] && v21 == (id)*MEMORY[0x1E4F1CFC8])
  {

LABEL_11:
    uint64_t v4 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v6 = v5;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v6 = v2;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v4 - 8) + 104))(v6, *MEMORY[0x1E4FBBA70], v4);
    swift_willThrow();
    return;
  }
  id v7 = objc_msgSend(v21, sel_unsignedShortValue);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v8 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithUnsignedShort_, v7);
  char v9 = static NSObject.== infix(_:_:)();

  if (v9)
  {
LABEL_2:

    return;
  }
  uint64_t v10 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v12 = v11;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  id v13 = objc_msgSend(v21, sel_description);
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  uint64_t v16 = v15;

  v17._countAndFlagsBits = v14;
  v17._object = v16;
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._object = (void *)0x8000000188330180;
  v18._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v18);
  v19._countAndFlagsBits = 0x3631746E4955;
  v19._object = (void *)0xE600000000000000;
  String.append(_:)(v19);
  v20._countAndFlagsBits = 46;
  v20._object = (void *)0xE100000000000000;
  String.append(_:)(v20);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v10 - 8) + 104))(v12, *MEMORY[0x1E4FBBA78], v10);
  swift_willThrow();
}

{
  void *v1;
  int v3;
  char v4;
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  id v9;
  id v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  double v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  id v18;
  uint64_t v19;
  void *v20;
  void *v21;
  Swift::String v22;
  Swift::String v23;
  Swift::String v24;
  Swift::String v25;
  char v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  unsigned char v30[32];

  outlined init with copy of Any(a1, (uint64_t)v30);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  BOOL v3 = swift_dynamicCast();
  uint64_t v4 = v3;
  if (v3) {
    goto LABEL_2;
  }
  outlined init with copy of Any(a1, (uint64_t)v30);
  uint64_t v5 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_12;
  }
  if (*MEMORY[0x1E4F1CFD0]) {
    uint64_t v6 = v28 == (id)*MEMORY[0x1E4F1CFD0];
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6 || *MEMORY[0x1E4F1CFC8] && v28 == (id)*MEMORY[0x1E4F1CFC8])
  {

LABEL_12:
    outlined init with copy of Any(a1, (uint64_t)v30);
    if (swift_dynamicCast())
    {
      id v7 = v1[9];
      if (v7)
      {
        char v9 = (id)v1[10];
        id v8 = v1[11];
        uint64_t v10 = (id)v1[12];
        if (v28 == (id)v1[8] && v7 == v29
          || (uint64_t v27 = v1[13], (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
          || v28 == v9 && v8 == v29
          || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0
          || v28 == v10 && v27 == v29)
        {
          swift_bridgeObjectRelease();
          goto LABEL_3;
        }
        uint64_t v26 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        if (v26) {
          goto LABEL_3;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
      }
    }
    uint64_t v11 = type metadata accessor for DecodingError();
    swift_allocError();
    id v13 = v12;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *id v13 = v5;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v11 - 8) + 104))(v13, *MEMORY[0x1E4FBBA70], v11);
    swift_willThrow();
    return;
  }
  objc_msgSend(v28, sel_doubleValue);
  if (fabs(v14) <= 3.40282347e38)
  {
LABEL_2:

LABEL_3:
    v30[0] = v4;
    return;
  }
  uint64_t v15 = type metadata accessor for DecodingError();
  swift_allocError();
  Swift::String v17 = v16;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(41);
  swift_bridgeObjectRelease();
  Swift::String v18 = objc_msgSend(v28, sel_description);
  Swift::String v19 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  id v21 = v20;

  v22._countAndFlagsBits = v19;
  v22._object = v21;
  String.append(_:)(v22);
  swift_bridgeObjectRelease();
  v23._object = (void *)0x80000001883303A0;
  v23._countAndFlagsBits = 0xD000000000000011;
  String.append(_:)(v23);
  v24._countAndFlagsBits = 0x74616F6C46;
  v24._object = (void *)0xE500000000000000;
  String.append(_:)(v24);
  v25._countAndFlagsBits = 46;
  v25._object = (void *)0xE100000000000000;
  String.append(_:)(v25);
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA78], v15);
  swift_willThrow();
}

uint64_t outlined init with take of DisplayList.HostedViewState.Key(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

long long *_DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = a4;
  uint64_t v60 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v52 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v58 = 0u;
    long long v59 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((void *)&v59 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v58);
    uint64_t v50 = type metadata accessor for DecodingError();
    uint64_t v51 = swift_allocError();
    uint64_t v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v49 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    uint64_t v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v37(boxed_opaque_existential_1, v16, a5);
    uint64_t v38 = (uint64_t)v60;
    swift_beginAccess();
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v57[0] = 0xD00000000000001DLL;
    v57[1] = 0x8000000188330C20;
    uint64_t v55 = a5;
    uint64_t v56 = a6;
    uint64_t v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    v37(v39, v16, a5);
    uint64_t v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v54, v38);
    uint64_t v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v30 = (long long *)v57;
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v50 - 8) + 104))(v34, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v58, &v54);
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v50 = v9;
  v49(v14, v16, a5);
  uint64_t v22 = v60;
  uint64_t v23 = v60 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v50;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v49(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v60;
  uint64_t v30 = (long long *)v60;
  uint64_t v31 = v51;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v54, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, 0x3233746E4955, (void *)0xE600000000000000);
  if (!v31)
  {
    uint64_t v30 = (long long *)v32;
    if ((v32 & 0x100000000) != 0)
    {
      uint64_t v46 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v48 = v47;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v48 = MEMORY[0x1E4FBC4C0];
      *(void *)&long long v58 = 0;
      *((void *)&v58 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v30 = &v58;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v46 - 8) + 104))(v48, *MEMORY[0x1E4FBBA80], v46);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  return v30;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t *boxed_opaque_existential_1;
  void (*v39)(uint64_t *, uint64_t, uint64_t);
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  void *v43;
  void *v44;
  Swift::String v45;
  Swift::String v46;
  uint64_t v48;
  void *v49;
  void *v50;
  void (*v51)(char *, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  long long v56;
  uint64_t v57;
  uint64_t v58;
  void v59[2];
  long long v60;
  long long v61;
  void *v62;

  long long v54 = a4;
  uint64_t v62 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v51 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v55 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    uint64_t v60 = 0u;
    int v61 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v60);
  swift_bridgeObjectRelease();
  if (!*((void *)&v61 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v60);
    uint64_t v52 = type metadata accessor for DecodingError();
    uint64_t v53 = swift_allocError();
    uint64_t v36 = v35;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v51 = (void (*)(char *, uint64_t, uint64_t))((char *)v36 + *(int *)(v37 + 48));
    v36[3] = a5;
    v36[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v36);
    uint64_t v39 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v39(boxed_opaque_existential_1, v16, a5);
    uint64_t v40 = (uint64_t)v62;
    swift_beginAccess();
    *(void *)&uint64_t v56 = 0;
    *((void *)&v56 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v59[0] = 0xD00000000000001DLL;
    v59[1] = 0x8000000188330C20;
    uint64_t v57 = a5;
    long long v58 = a6;
    uint64_t v41 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v56);
    v39(v41, v16, a5);
    uint64_t v42 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v56, v40);
    Swift::String v44 = v43;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
    uint64_t v30 = (long long *)v59;
    v45._countAndFlagsBits = v42;
    v45._object = v44;
    String.append(_:)(v45);
    swift_bridgeObjectRelease();
    v46._countAndFlagsBits = 46;
    v46._object = (void *)0xE100000000000000;
    String.append(_:)(v46);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v52 - 8) + 104))(v36, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v60, &v56);
  uint64_t v51 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v52 = v9;
  v51(v14, v16, a5);
  uint64_t v22 = v62;
  uint64_t v23 = v62 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v52;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v51(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v62;
  uint64_t v30 = (long long *)v62;
  uint64_t v31 = v53;
  unint64_t v32 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v56);
  if (v31)
  {
    uint64_t v34 = v29;
  }
  else
  {
    if (v33)
    {
      uint64_t v30 = (long long *)v32;
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
      return v30;
    }
    uint64_t v48 = type metadata accessor for DecodingError();
    uint64_t v53 = swift_allocError();
    uint64_t v50 = v49;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v50 = MEMORY[0x1E4FBB1A0];
    *(void *)&uint64_t v60 = 0;
    *((void *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v30 = &v60;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v48 - 8) + 104))(v50, *MEMORY[0x1E4FBBA80], v48);
    swift_willThrow();
    uint64_t v34 = v29;
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v34);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v56);
  return v30;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  long long *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *boxed_opaque_existential_1;
  void (*v37)(uint64_t *, uint64_t, uint64_t);
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  Swift::String v43;
  Swift::String v44;
  uint64_t v46;
  void *v47;
  void *v48;
  void (*v49)(char *, uint64_t, uint64_t);
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  long long v54;
  uint64_t v55;
  uint64_t v56;
  void v57[2];
  long long v58;
  long long v59;
  void *v60;

  uint64_t v53 = a4;
  uint64_t v60 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v49 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v52 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v58 = 0u;
    long long v59 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v58);
  swift_bridgeObjectRelease();
  if (!*((void *)&v59 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v58);
    uint64_t v50 = type metadata accessor for DecodingError();
    uint64_t v51 = swift_allocError();
    uint64_t v34 = v33;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v49 = (void (*)(char *, uint64_t, uint64_t))((char *)v34 + *(int *)(v35 + 48));
    v34[3] = a5;
    v34[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v34);
    uint64_t v37 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v37(boxed_opaque_existential_1, v16, a5);
    uint64_t v38 = (uint64_t)v60;
    swift_beginAccess();
    *(void *)&long long v54 = 0;
    *((void *)&v54 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v57[0] = 0xD00000000000001DLL;
    v57[1] = 0x8000000188330C20;
    uint64_t v55 = a5;
    uint64_t v56 = a6;
    uint64_t v39 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v54);
    v37(v39, v16, a5);
    uint64_t v40 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v54, v38);
    uint64_t v42 = v41;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
    uint64_t v30 = (long long *)v57;
    v43._countAndFlagsBits = v40;
    v43._object = v42;
    String.append(_:)(v43);
    swift_bridgeObjectRelease();
    v44._countAndFlagsBits = 46;
    v44._object = (void *)0xE100000000000000;
    String.append(_:)(v44);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v50 - 8) + 104))(v34, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v58, &v54);
  uint64_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v50 = v9;
  v49(v14, v16, a5);
  uint64_t v22 = v60;
  uint64_t v23 = v60 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v50;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v49(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v60;
  uint64_t v30 = (long long *)v60;
  uint64_t v31 = v51;
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v54, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, 0x3233746E49, (void *)0xE500000000000000);
  if (!v31)
  {
    uint64_t v30 = (long long *)v32;
    if ((v32 & 0x100000000) != 0)
    {
      uint64_t v46 = type metadata accessor for DecodingError();
      swift_allocError();
      uint64_t v48 = v47;
      type metadata accessor for (@thick Any.Type, DecodingError.Context)();
      *uint64_t v48 = MEMORY[0x1E4FBC150];
      *(void *)&long long v58 = 0;
      *((void *)&v58 + 1) = 0xE000000000000000;
      swift_bridgeObjectRetain();
      uint64_t v30 = &v58;
      _StringGuts.grow(_:)(41);
      swift_bridgeObjectRelease();
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
      (*(void (**)(void *, void, uint64_t))(*(void *)(v46 - 8) + 104))(v48, *MEMORY[0x1E4FBBA80], v46);
      swift_willThrow();
    }
  }
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v54);
  return v30;
}

uint64_t protocol witness for SingleValueDecodingContainer.decode(_:) in conformance __DictionaryDecoder()
{
  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v2 + 16), (uint64_t)v5);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v5, (SEL *)&selRef_unsignedIntValue, (SEL *)&selRef_initWithUnsignedInt_, 0x3233746E4955, (void *)0xE600000000000000);
  uint64_t v2 = v3;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v2 & 0x100000000) == 0) {
    return v2;
  }
  __break(1u);
  return result;
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return (uint64_t)v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  uint64_t v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, 0x3436746E49, (void *)0xE500000000000000);
  uint64_t v5 = v4;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return (uint64_t)v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  uint64_t v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, 7630409, (void *)0xE300000000000000);
  uint64_t v5 = v4;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  char v4;
  char v5;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  uint64_t result = specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (!v1)
  {
    swift_beginAccess();
    _DictionaryDecodingStorage.topContainer.getter(*(void *)(v2 + 16), (uint64_t)v6);
    specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
    uint64_t v5 = v4;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    if (v5) {
      __break(1u);
    }
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  char v3;
  char v4;
  uint64_t result;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return v3 & 1;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v2 + 16), (uint64_t)v6);
  uint64_t v4 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v4 != 2)
  {
    uint64_t v3 = v4 & 1;
    return v3 & 1;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v2 + 16), (uint64_t)v6);
  uint64_t v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
  uint64_t v4 = v3;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if (v4) {
    return v2;
  }
  __break(1u);
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  uint64_t result = specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (!v1)
  {
    swift_beginAccess();
    _DictionaryDecodingStorage.topContainer.getter(*(void *)(v2 + 16), (uint64_t)v6);
    specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6);
    uint64_t v5 = v4;
    uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
    if ((v5 & 0x100000000) != 0) {
      __break(1u);
    }
  }
  return result;
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unsigned char v5[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v2 + 16), (uint64_t)v5);
  specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v5, (SEL *)&selRef_intValue, (SEL *)&selRef_initWithInt_, 0x3233746E49, (void *)0xE500000000000000);
  uint64_t v2 = v3;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v5);
  if ((v2 & 0x100000000) == 0) {
    return v2;
  }
  __break(1u);
  return result;
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return (uint64_t)v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  uint64_t v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, 1953384789, (void *)0xE400000000000000);
  uint64_t v5 = v4;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

{
  SEL **v0;
  uint64_t v1;
  SEL *v2;
  uint64_t result;
  char v4;
  char v5;
  unsigned char v6[32];

  uint64_t v2 = *v0;
  specialized __DictionaryDecoder.expectNonNull<A>(_:)();
  if (v1) {
    return (uint64_t)v2;
  }
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter((uint64_t)v2[2], (uint64_t)v6);
  uint64_t v2 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)v6, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, 0x3436746E4955, (void *)0xE600000000000000);
  uint64_t v5 = v4;
  uint64_t result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v6);
  if ((v5 & 1) == 0) {
    return (uint64_t)v2;
  }
  __break(1u);
  return result;
}

{
  return SingleValueDecodingContainer.decode(_:)();
}

void specialized __DictionaryDecoder.unbox(_:as:)(uint64_t a1, SEL *a2, SEL *a3, uint64_t a4, void *a5)
{
  outlined init with copy of Any(a1, (uint64_t)v33);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  int v10 = swift_dynamicCast();
  char v11 = v10;
  if (v10) {
    goto LABEL_2;
  }
  outlined init with copy of Any(a1, (uint64_t)v33);
  uint64_t v12 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
  if ((swift_dynamicCast() & 1) == 0) {
    goto LABEL_11;
  }
  uint64_t v13 = v32;
  if (*MEMORY[0x1E4F1CFD0]) {
    BOOL v14 = v32 == (id)*MEMORY[0x1E4F1CFD0];
  }
  else {
    BOOL v14 = 0;
  }
  if (v14 || *MEMORY[0x1E4F1CFC8] && v32 == (id)*MEMORY[0x1E4F1CFC8])
  {

LABEL_11:
    uint64_t v15 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v17 = v16;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v17 = v12;
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v15 - 8) + 104))(v17, *MEMORY[0x1E4FBBA70], v15);
    swift_willThrow();
    return;
  }
  id v18 = [v32 *a2];
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSObject);
  id v19 = objc_msgSend(objc_allocWithZone(NSNumber), *a3, v18);
  char v20 = static NSObject.== infix(_:_:)();

  if (v20)
  {
LABEL_2:

    v33[0] = v11;
    return;
  }
  uint64_t v21 = type metadata accessor for DecodingError();
  swift_allocError();
  uint64_t v34 = v22;
  swift_beginAccess();
  swift_bridgeObjectRetain();
  _StringGuts.grow(_:)(43);
  swift_bridgeObjectRelease();
  id v23 = objc_msgSend(v32, sel_description, 0xD000000000000014, 0x8000000188330160);
  uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  unint64_t v26 = v25;

  v27._countAndFlagsBits = v24;
  v27._object = v26;
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  v28._object = (void *)0x8000000188330180;
  v28._countAndFlagsBits = 0xD000000000000012;
  String.append(_:)(v28);
  v29._countAndFlagsBits = a4;
  v29._object = a5;
  String.append(_:)(v29);
  v30._countAndFlagsBits = 46;
  v30._object = (void *)0xE100000000000000;
  String.append(_:)(v30);
  uint64_t v31 = v34;
  DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
  (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v21 - 8) + 104))(v31, *MEMORY[0x1E4FBBA78], v21);
  swift_willThrow();
}

uint64_t outlined init with copy of Any(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t closure #2 in closure #3 in ResponderBasedHitTestTracing.traceHitTest(point:radius:options:result:)(uint64_t a1, void *a2, unsigned __int8 a3, uint64_t a4)
{
  if (*(void *)(a1 + 16))
  {
    if (a3) {
      return 0;
    }
    outlined copy of ResponderBasedHitTestTracing(a2, 0);
    if (ViewResponder.hitTest(globalPoint:radius:cacheKey:options:)())
    {
      type metadata accessor for UIViewResponder();
      uint64_t v7 = swift_dynamicCastClass();
      if (v7 && v7 != a4 && (uint64_t v8 = MEMORY[0x18C119DF0](v7 + 40)) != 0)
      {
        uint64_t v9 = (void *)v8;
        unsigned __int8 v10 = objc_msgSend(a2, sel_isDescendantOfView_, v8);

        swift_release();
        outlined consume of ResponderBasedHitTestTracing?(a2, a3);
        if (v10) {
          return 0;
        }
      }
      else
      {
        outlined consume of ResponderBasedHitTestTracing?(a2, a3);
        swift_release();
      }
    }
    else
    {
      outlined consume of ResponderBasedHitTestTracing?(a2, a3);
    }
  }
  return 1;
}

void SharingActivityPickerBridge.show(presenter:presentation:)(void *a1, uint64_t a2)
{
  outlined init with take of SharingPickerSource(a2, (uint64_t)v68);
  outlined init with take of SharingPickerSource((uint64_t)v68, (uint64_t)v69);
  int v4 = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v69);
  uint64_t v5 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v69);
  id v39 = a1;
  uint64_t v40 = v2;
  if (v4 == 1)
  {
    uint64_t v6 = *(void *)(v5 + 40);
    uint64_t v7 = *(void *)(v5 + 48);
    uint64_t v38 = *(void *)(v5 + 56);
    uint64_t v9 = *(void *)(v5 + 72);
    uint64_t v8 = *(void *)(v5 + 80);
    uint64_t v10 = *(void *)(v5 + 88);
    uint64_t v11 = *(void *)(v5 + 96);
    uint64_t v12 = *(void *)(v5 + 104);
    uint64_t v13 = *(void *)(v5 + 112);
    uint64_t v15 = *(void *)(v5 + 120);
    uint64_t v14 = *(void *)(v5 + 128);
    uint64_t v42 = *(void *)(v5 + 32);
    char v41 = *(unsigned char *)(v5 + 64);
    outlined copy of AnyShareConfiguration.Storage(v42, v6, v7, v38, v41);
    outlined copy of Text?(v9, v8, v10, v11);
    uint64_t v43 = v15;
    uint64_t v44 = v14;
    char v16 = v15;
    uint64_t v17 = v6;
    uint64_t v18 = v38;
    outlined copy of Text?(v12, v13, v16, v14);
  }
  else
  {
    long long v19 = *(_OWORD *)(v5 + 80);
    long long v74 = *(_OWORD *)(v5 + 64);
    long long v75 = v19;
    long long v20 = *(_OWORD *)(v5 + 112);
    long long v76 = *(_OWORD *)(v5 + 96);
    long long v77 = v20;
    long long v21 = *(_OWORD *)(v5 + 16);
    long long v70 = *(_OWORD *)v5;
    long long v71 = v21;
    long long v22 = *(_OWORD *)(v5 + 48);
    long long v72 = *(_OWORD *)(v5 + 32);
    long long v73 = v22;
    long long v49 = v74;
    long long v50 = v19;
    long long v51 = v76;
    long long v52 = v20;
    long long v45 = v70;
    long long v46 = v21;
    long long v47 = v72;
    long long v48 = v22;
    type metadata accessor for Binding<AnyIdentifiableShareConfiguration?>();
    MEMORY[0x18C113DA0](&aBlock);
    uint64_t v11 = v62;
    if (v62 == 1)
    {
      __break(1u);
      return;
    }
    uint64_t v13 = v64;
    uint64_t v43 = v65;
    uint64_t v44 = v66;
    uint64_t v12 = v63;
    uint64_t v8 = v60;
    uint64_t v10 = v61;
    uint64_t v9 = v59;
    uint64_t v7 = (uint64_t)v56;
    uint64_t v18 = (uint64_t)v57;
    uint64_t v17 = (uint64_t)v55;
    uint64_t v42 = v54;
    char v41 = v58;
  }
  type metadata accessor for UIActivityViewController();
  *(void *)&long long v45 = v42;
  *((void *)&v45 + 1) = v17;
  *(void *)&long long v46 = v7;
  *((void *)&v46 + 1) = v18;
  LOBYTE(v47) = v41;
  *((void *)&v47 + 1) = v9;
  *(void *)&long long v48 = v8;
  *((void *)&v48 + 1) = v10;
  *(void *)&long long v49 = v11;
  *((void *)&v49 + 1) = v12;
  *(void *)&long long v50 = v13;
  *((void *)&v50 + 1) = v43;
  *(void *)&long long v51 = v44;
  AGGraphClearUpdate();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v24 = *Value;
  uint64_t v25 = Value[1];
  swift_retain();
  swift_retain();
  AGGraphSetUpdate();
  uint64_t aBlock = v24;
  uint64_t v54 = v25;
  id v26 = UIActivityViewController.init(configuration:env:)((uint64_t)&v45, &aBlock);
  if (v26)
  {
    Swift::String v27 = v26;
    swift_retain();
    uint64_t v57 = partial apply for implicit closure #3 in implicit closure #2 in SharingActivityPickerBridge.show(presenter:presentation:);
    uint64_t v58 = v40;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v54 = 1107296256;
    uint64_t v55 = thunk for @escaping @callee_guaranteed (@guaranteed UIActivityType?, @unowned Bool, @guaranteed [Any]?, @guaranteed Error?) -> ();
    uint64_t v56 = &block_descriptor_86;
    Swift::String v28 = _Block_copy(&aBlock);
    swift_release();
    objc_msgSend(v27, sel_setCompletionWithItemsHandler_, v28);
    _Block_release(v28);
    AGGraphClearUpdate();
    Swift::String v29 = (uint64_t *)AGGraphGetValue();
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    swift_retain();
    swift_retain();
    AGGraphSetUpdate();
    uint64_t aBlock = v30;
    uint64_t v54 = v31;
    EnvironmentValues.explicitPreferredColorScheme.getter();
    swift_release();
    swift_release();
    if (v67 != 2)
    {
      if (v67) {
        uint64_t v32 = 2;
      }
      else {
        uint64_t v32 = 1;
      }
      objc_msgSend(v27, sel_setOverrideUserInterfaceStyle_, v32, v38);
    }
    id v33 = objc_msgSend(v27, sel_popoverPresentationController, v38);
    if (v33)
    {
      uint64_t v34 = v33;
      id v35 = SharingActivityPickerBridge.popoverPresentationDelegate.getter();
      objc_msgSend(v34, sel_setDelegate_, v35);

      id v36 = SharingActivityPickerBridge.popoverPresentationDelegate.getter();
      specialized PopoverPresentationDelegate.updateAnchor(_:presentationController:)(v34);
    }
    objc_msgSend(v39, sel_presentViewController_animated_completion_, v27, 1, 0);
    uint64_t v37 = *(void **)(v40 + 208);
    *(void *)(v40 + 208) = v27;
  }
}

uint64_t type metadata completion function for TaskPhase()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void type metadata accessor for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>()
{
  if (!lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(255, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for PlatformArchivedDisplayList();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformArchivedDisplayList<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    }
  }
}

uint64_t EnvironmentValues.isPresented.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  type metadata accessor for Binding<PresentationMode>();
  MEMORY[0x18C113DA0](&v2);
  swift_release();
  swift_release();
  return v2;
}

uint64_t key path getter for EnvironmentValues.presentationMode : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(void *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 16) = v6;
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<PresentationModeKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for Binding<PresentationMode>()
{
  if (!lazy cache variable for type metadata for Binding<PresentationMode>)
  {
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<PresentationMode>);
    }
  }
}

uint64_t ProgressViewStyleModifier.styleBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(uint64_t, uint64_t, uint64_t, double))(v3 + 24))(a1, v4, v3, v10);
  swift_getAssociatedConformanceWitness();
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v6 + 8);
  v13(v8, AssociatedTypeWitness);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v13)(v12, AssociatedTypeWitness);
}

uint64_t protocol witness for ProgressViewStyle.makeBody(configuration:) in conformance CircularProgressViewStyle(uint64_t a1)
{
  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)v9 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  long long v6 = v1[1];
  long long v10 = *v1;
  long long v11 = v6;
  uint64_t v12 = *((void *)v1 + 4);
  *(void *)uint64_t v5 = static HorizontalAlignment.center.getter();
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>();
  closure #1 in CircularProgressViewStyle.makeBody(configuration:)(a1, (uint64_t)&v5[*(int *)(v7 + 44)]);
  Spacing.init()();
  v9[0] = v9[1];
  lazy protocol witness table accessor for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>> and conformance VStack<A>, type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>);
  View.spacing(_:)();
  swift_bridgeObjectRelease();
  return outlined destroy of VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>((uint64_t)v5);
}

void type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(uint64_t a1)
{
}

uint64_t outlined destroy of VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(uint64_t a1)
{
  type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t closure #1 in CircularProgressViewStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v52 = a2;
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v66 = (uint64_t)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v38 - v6;
  CircularProgressViewStyle.fractionCompletedView(configuration:)(a1, (uint64_t)&v38 - v6);
  if (*(unsigned char *)(a1 + *(int *)(type metadata accessor for ProgressViewStyleConfiguration(0) + 24)) == 1)
  {
    CircularProgressViewStyle.labels(configuration:)((uint64_t)&v80);
    uint64_t v64 = v81;
    uint64_t v65 = v80;
    uint64_t v62 = v83;
    uint64_t v63 = v82;
    uint64_t v60 = v85;
    uint64_t v61 = v84;
    uint64_t v53 = v88;
    uint64_t v54 = v87;
    uint64_t v58 = v90;
    uint64_t v59 = v86;
    uint64_t v56 = v91;
    uint64_t v57 = v89;
    uint64_t v55 = v92;
  }
  else
  {
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    uint64_t v62 = 0;
    uint64_t v63 = 0;
    uint64_t v60 = 0;
    uint64_t v61 = 0;
    uint64_t v58 = 0;
    uint64_t v59 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v57 = 1;
  }
  CircularProgressViewStyle.labels(configuration:)((uint64_t)&v80);
  uint64_t v8 = v80;
  uint64_t v9 = v82;
  uint64_t v50 = v82;
  uint64_t v51 = v80;
  uint64_t v43 = v83;
  uint64_t v44 = v81;
  uint64_t v10 = v84;
  uint64_t v11 = v86;
  uint64_t v48 = v86;
  uint64_t v49 = v84;
  uint64_t v41 = v87;
  uint64_t v42 = v85;
  uint64_t v12 = v88;
  uint64_t v13 = v90;
  uint64_t v46 = v90;
  uint64_t v47 = v88;
  uint64_t v39 = v91;
  uint64_t v40 = v89;
  uint64_t v14 = v92;
  long long v45 = v7;
  uint64_t v15 = v66;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>((uint64_t)v7, v66);
  uint64_t v16 = v15;
  uint64_t v17 = v52;
  outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(v16, v52);
  type metadata accessor for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)();
  long long v19 = (_OWORD *)(v17 + *(int *)(v18 + 48));
  *(void *)&long long v67 = v65;
  *((void *)&v67 + 1) = v64;
  *(void *)&long long v68 = v63;
  *((void *)&v68 + 1) = v62;
  *(void *)&long long v69 = v61;
  *((void *)&v69 + 1) = v60;
  uint64_t v20 = v53;
  uint64_t v21 = v54;
  *(void *)&long long v70 = v59;
  *((void *)&v70 + 1) = v54;
  *(void *)&long long v71 = v53;
  *((void *)&v71 + 1) = v57;
  *(void *)&long long v72 = v58;
  *((void *)&v72 + 1) = v56;
  *(void *)&long long v73 = v55;
  *((void *)&v73 + 1) = v8;
  uint64_t v22 = v44;
  *(void *)&long long v74 = v44;
  *((void *)&v74 + 1) = v9;
  uint64_t v23 = v43;
  *(void *)&long long v75 = v43;
  *((void *)&v75 + 1) = v10;
  uint64_t v24 = v42;
  *(void *)&long long v76 = v42;
  *((void *)&v76 + 1) = v11;
  uint64_t v25 = v41;
  *(void *)&long long v77 = v41;
  *((void *)&v77 + 1) = v12;
  uint64_t v26 = v40;
  *(void *)&long long v78 = v40;
  *((void *)&v78 + 1) = v13;
  uint64_t v27 = v39;
  *(void *)&long long v79 = v39;
  *((void *)&v79 + 1) = v14;
  long long v28 = v74;
  v19[6] = v73;
  v19[7] = v28;
  long long v29 = v67;
  long long v30 = v68;
  long long v31 = v72;
  v19[4] = v71;
  _OWORD v19[5] = v31;
  long long v32 = v70;
  v19[2] = v69;
  v19[3] = v32;
  *long long v19 = v29;
  v19[1] = v30;
  long long v33 = v75;
  long long v34 = v76;
  long long v35 = v79;
  long long v36 = v77;
  v19[11] = v78;
  v19[12] = v35;
  v19[9] = v34;
  v19[10] = v36;
  v19[8] = v33;
  outlined retain of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>((uint64_t)&v67, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t))outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?);
  outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>((uint64_t)v45);
  uint64_t v80 = v65;
  uint64_t v81 = v64;
  uint64_t v82 = v63;
  uint64_t v83 = v62;
  uint64_t v84 = v61;
  uint64_t v85 = v60;
  uint64_t v86 = v59;
  uint64_t v87 = v21;
  uint64_t v88 = v20;
  uint64_t v89 = v57;
  uint64_t v90 = v58;
  uint64_t v91 = v56;
  uint64_t v92 = v55;
  uint64_t v93 = v51;
  uint64_t v94 = v22;
  uint64_t v95 = v50;
  uint64_t v96 = v23;
  uint64_t v97 = v49;
  uint64_t v98 = v24;
  uint64_t v99 = v48;
  uint64_t v100 = v25;
  uint64_t v101 = v47;
  uint64_t v102 = v26;
  uint64_t v103 = v46;
  uint64_t v104 = v27;
  uint64_t v105 = v14;
  outlined retain of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>((uint64_t)&v80, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void))outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t))outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?);
  return outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(v66);
}

uint64_t outlined destroy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(uint64_t a1)
{
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    a3(255);
    a4(255);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<WidgetInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<WidgetInterfaceIdiom>);
    unint64_t v7 = type metadata accessor for StaticIf();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t outlined init with copy of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined retain of StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void), void (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, void, uint64_t))
{
  uint64_t v4 = *(void *)(a1 + 104);
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  uint64_t v7 = *(void *)(a1 + 128);
  uint64_t v8 = *(void *)(a1 + 136);
  uint64_t v9 = *(void *)(a1 + 144);
  uint64_t v10 = *(void *)(a1 + 152);
  uint64_t v11 = *(void *)(a1 + 160);
  long long v14 = *(_OWORD *)(a1 + 184);
  long long v15 = *(_OWORD *)(a1 + 168);
  uint64_t v12 = *(void *)(a1 + 200);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96));
  a3(v4, v5, v6, v7, v8, v9, v10, v11, v15, *((void *)&v15 + 1), v14, *((void *)&v14 + 1), v12);
  return a1;
}

uint64_t CircularProgressViewStyle.labels(configuration:)@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = *((unsigned __int8 *)v1 + 8);
  uint64_t v5 = v1[2];
  uint64_t v6 = *((unsigned __int8 *)v1 + 24);
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) == 0) {
    goto LABEL_4;
  }
  outlined copy of Environment<Color?>.Content(v3, v4);
  outlined copy of Environment<Bool>.Content(v5, v6);
  swift_retain();
  outlined copy of Environment<Bool>.Content(v5, v6);
  int v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  outlined consume of Environment<Color?>.Content(v3, v4);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  uint64_t result = swift_release();
  if (v7 == 2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v18 = 0uLL;
  }
  else
  {
LABEL_4:
    static HorizontalAlignment.center.getter();
    static VerticalAlignment.center.getter();
    type metadata accessor for ProgressViewStyleConfiguration(0);
    static VerticalAlignment.center.getter();
    static Font.caption.getter();
    swift_getKeyPath();
    static Color.secondary.getter();
    type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>(0);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>(&lazy protocol witness table cache variable for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>, type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>);
    View.defaultForegroundColor(_:)();
    swift_release();
    swift_release();
    uint64_t result = swift_release();
    long long v16 = v21;
    uint64_t v9 = v22;
    long long v17 = v23;
    long long v18 = v26;
    uint64_t v12 = v29;
    uint64_t v13 = v30;
    uint64_t v14 = v31;
    uint64_t v15 = v32;
    uint64_t v19 = 256;
    if (v25) {
      uint64_t v20 = 256;
    }
    else {
      uint64_t v20 = 0;
    }
    uint64_t v10 = v20 | v24;
    if (!v28) {
      uint64_t v19 = 0;
    }
    uint64_t v11 = v19 | v27;
  }
  *(_OWORD *)a1 = v16;
  *(void *)(a1 + 16) = v9;
  *(_OWORD *)(a1 + 24) = v17;
  *(void *)(a1 + 40) = v10;
  *(_OWORD *)(a1 + 48) = v18;
  *(void *)(a1 + 64) = v11;
  *(void *)(a1 + 72) = v12;
  *(void *)(a1 + 80) = v13;
  *(void *)(a1 + 88) = v14;
  *(void *)(a1 + 96) = v15;
  return result;
}

void type metadata accessor for VStack<TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), unint64_t *a4, void (*a5)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    lazy protocol witness table accessor for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>(a4, a5);
    unint64_t v8 = type metadata accessor for VStack();
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>> and conformance VStack<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized Environment.wrappedValue.getter(uint64_t a1, char a2, uint64_t a3, unint64_t a4, void (*a5)(uint64_t, void))
{
  if ((a2 & 1) == 0)
  {
    swift_retain();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    uint64_t v10 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v16 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      unsigned __int8 v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v13, -1, -1);
      MEMORY[0x18C119C60](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a5(a1, 0);
    swift_release();
    swift_release();
    return v15;
  }
  return a1;
}

{
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v16;
  uint64_t v17;

  swift_retain();
  if ((a2 & 1) == 0)
  {
    uint64_t v10 = static os_log_type_t.fault.getter();
    os_log_type_t v11 = static Log.runtimeIssuesLog.getter();
    uint64_t v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc();
      uint64_t v14 = swift_slowAlloc();
      uint64_t v16 = v14;
      *(_DWORD *)uint64_t v13 = 136315138;
      long long v17 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v11, v12, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v13, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v14, -1, -1);
      MEMORY[0x18C119C60](v13, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a5(a1, 0);
    swift_release();
    swift_release();
    return v17;
  }
  return a1;
}

{
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  uint8_t *v12;
  uint64_t v13;
  unsigned __int8 v15;
  uint64_t v16;

  if ((a2 & 1) == 0)
  {
    swift_retain();
    os_log_type_t v9 = static os_log_type_t.fault.getter();
    uint64_t v10 = static Log.runtimeIssuesLog.getter();
    os_log_type_t v11 = v9;
    if (os_log_type_enabled(v10, v9))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc();
      uint64_t v13 = swift_slowAlloc();
      uint64_t v16 = v13;
      *(_DWORD *)uint64_t v12 = 136315138;
      unsigned __int8 v15 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a3, a4, &v16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)();
      _os_log_impl(&dword_1872C6000, v10, v11, "Accessing Environment<%s>'s value outside of being installed on a View. This will always read the default value and will not update.", v12, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x18C119C60](v13, -1, -1);
      MEMORY[0x18C119C60](v12, -1, -1);
    }

    EnvironmentValues.init()();
    swift_getAtKeyPath();
    a5(a1, 0);
    swift_release();
    swift_release();
    return v15;
  }
  return a1;
}

void type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>(uint64_t a1)
{
}

uint64_t outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t result = a10;
  if (a10)
  {
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

void type metadata accessor for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)()
{
  if (!lazy cache variable for type metadata for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>))
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(255, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>, type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>));
    }
  }
}

uint64_t outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10 != 1) {
    return outlined copy of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

uint64_t outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  if (a10 != 1) {
    return outlined consume of ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(result, a2, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  return result;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>()
{
  if (!lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>)
  {
    type metadata accessor for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>(255);
    unint64_t v0 = type metadata accessor for _VariadicView.Tree();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>>);
    }
  }
}

void type metadata accessor for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for InterfaceIdiomPredicate<WidgetInterfaceIdiom>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_0(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for InterfaceIdiomPredicate();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_0(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Text.LineStyle?>, &lazy cache variable for type metadata for Text.LineStyle?, MEMORY[0x1E4F41410], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, _EnvironmentKeyWritingModifier<Text.LineStyle?>>);
    }
  }
}

uint64_t BorderlessButtonStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v36 = a1;
  uint64_t v40 = a2;
  uint64_t v3 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v4 = v3 - 8;
  MEMORY[0x1F4188790](v3);
  unint64_t v6 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Button<PrimitiveButtonStyleConfiguration.Label>, (uint64_t)&type metadata for PrimitiveButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for PrimitiveButtonStyleConfiguration.Label, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)&v36 - v12;
  type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>();
  uint64_t v15 = v14 - 8;
  MEMORY[0x1F4188790](v14);
  long long v17 = (char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>();
  uint64_t v38 = v18;
  MEMORY[0x1F4188790](v18);
  uint64_t v37 = (uint64_t)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = *(void *)v2;
  uint64_t v21 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v39 = *(void *)(v2 + 16);
  char v22 = *(unsigned char *)(v2 + 24);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_0(v36, (uint64_t)v6, type metadata accessor for PrimitiveButtonStyleConfiguration);
  char v23 = v6[1];
  *uint64_t v10 = *v6;
  v10[1] = v23;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_0((uint64_t)&v6[*(int *)(v4 + 32)], (uint64_t)&v10[*(int *)(v8 + 44)], (uint64_t (*)(void))type metadata accessor for ButtonAction);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_0((uint64_t)v6, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v10, (uint64_t)v13);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = swift_getKeyPath();
  uint64_t v27 = swift_getKeyPath();
  outlined init with copy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13, (uint64_t)v17);
  char v28 = &v17[*(int *)(v15 + 44)];
  *(void *)char v28 = KeyPath;
  v28[8] = 0;
  *((void *)v28 + 2) = v25;
  v28[24] = 0;
  *((void *)v28 + 4) = v26;
  v28[40] = 0;
  *((void *)v28 + 6) = v27;
  v28[56] = 0;
  outlined destroy of Button<PrimitiveButtonStyleConfiguration.Label>((uint64_t)v13);
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = swift_getKeyPath();
  uint64_t v31 = swift_getKeyPath();
  uint64_t v32 = v37;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_0((uint64_t)v17, v37, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  uint64_t v33 = v32 + *(int *)(v38 + 36);
  *(void *)(v33 + 8) = 0;
  *(void *)(v33 + 16) = 0;
  *(void *)uint64_t v33 = v29;
  *(_WORD *)(v33 + 24) = 0;
  *(void *)(v33 + 32) = v30;
  *(unsigned char *)(v33 + 40) = 0;
  *(void *)(v33 + 48) = v31;
  *(unsigned char *)(v33 + 56) = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_0((uint64_t)v17, (uint64_t (*)(void))type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>);
  outlined copy of Environment<HoverEffect?>.Content(v20, v21);
  uint64_t v34 = v39;
  outlined copy of Environment<Bool>.Content(v39, v22);
  outlined copy of Environment<Bool>.Content(v34, v22);
  specialized Environment.wrappedValue.getter(v34, v22);
  outlined consume of Environment<Bool>.Content(v34, v22);
  outlined copy of Environment<HoverEffect?>.Content(v20, v21);
  specialized Environment.wrappedValue.getter(v20, v21, 0x6C616E6F6974704FLL, 0xEF3E726F6C6F433CLL, (void (*)(uint64_t, void))outlined consume of Environment<Color?>.Content);
  outlined consume of Environment<Color?>.Content(v20, v21);
  outlined consume of Environment<Color?>.Content(v20, v21);
  outlined consume of Environment<Bool>.Content(v34, v22);
  static Text.LineStyle.Pattern.solid.getter();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
  View.underline(_:pattern:color:)();
  swift_release();
  return _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_0(v32, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>);
}

void type metadata accessor for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t ResolvedBorderedButton.resolvedTint.getter()
{
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(unsigned __int8 *)(v0 + 128);
  char v6 = *(unsigned char *)(v0 + 129);
  uint64_t v7 = *(unsigned __int8 *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 160);
  uint64_t v10 = v1;
  if (*(unsigned char *)(v0 + 96) == 1)
  {
    if (v1) {
      goto LABEL_4;
    }
    char v18 = *(unsigned char *)(v0 + 82);
    int v19 = *(unsigned __int8 *)(v0 + 81);
    uint64_t v11 = *(void *)(v0 + 136);
    uint64_t v12 = v7;
    unsigned int v20 = v7;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
    outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v11, v12);
    outlined copy of Environment<Color?>.Content(v8, v9);
    outlined copy of Environment<Color?>.Content(v8, v9);
    uint64_t v10 = specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Color?>.Content(v8, v9);
    outlined consume of Environment<Bool?>.Content(v2, v3);
    outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined consume of Environment<Bool?>.Content(v11, v20);
    outlined consume of Environment<Color?>.Content(v8, v9);
    if (v10)
    {
LABEL_4:
      swift_retain();
      return v10 | 0x4000000000000000;
    }
    else
    {
      char v16 = v18;
      if (v19 != 1) {
        char v16 = 1;
      }
      if (v16) {
        uint64_t v17 = static Color.accentColor.getter();
      }
      else {
        uint64_t v17 = static Color.red.getter();
      }
      return v17 | 0x4000000000000000;
    }
  }
  else
  {
    if (v1) {
      goto LABEL_7;
    }
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = v7;
    unsigned int v21 = v7;
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
    outlined copy of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v13, v14);
    outlined copy of Environment<Color?>.Content(v8, v9);
    outlined copy of Environment<Color?>.Content(v8, v9);
    uint64_t v10 = specialized Environment.wrappedValue.getter(v8, v9);
    outlined consume of Environment<Color?>.Content(v8, v9);
    outlined consume of Environment<Bool?>.Content(v2, v3);
    outlined consume of Environment<CGFloat?>.Content(v4, v5, v6);
    outlined consume of Environment<Bool?>.Content(v13, v21);
    outlined consume of Environment<Color?>.Content(v8, v9);
    if (v10) {
LABEL_7:
    }
      swift_retain();
    else {
      return 0x8000000000000000;
    }
  }
  return v10;
}

double CircularProgressViewStyle.fractionCompletedView(configuration:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v62 = a2;
  uint64_t v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v4 - 8);
  char v6 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v7 = type metadata accessor for ArchivableCircularProgressView(0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = &v55[-v11];
  uint64_t v13 = *(void *)v2;
  uint64_t v14 = *(void *)(v2 + 16);
  int v15 = *(unsigned __int8 *)(v2 + 24);
  uint64_t v16 = *(void *)(v2 + 32);
  uint64_t v17 = a1;
  uint64_t v18 = *(unsigned __int8 *)(v2 + 8);
  uint64_t v61 = v6;
  outlined init with copy of ProgressViewStyleConfiguration(v17, (uint64_t)v6);
  outlined copy of Environment<Color?>.Content(v13, v18);
  uint64_t v65 = v14;
  LODWORD(v64) = v15;
  outlined copy of Environment<Bool>.Content(v14, v15);
  if (v16)
  {
    swift_retain();
    uint64_t v66 = v16;
    uint64_t v19 = v16;
  }
  else
  {
    outlined copy of Environment<Color?>.Content(v13, v18);
    uint64_t v19 = specialized Environment.wrappedValue.getter(v13, v18);
    outlined consume of Environment<Color?>.Content(v13, v18);
    uint64_t v66 = 0;
  }
  swift_retain();
  outlined consume of Environment<Color?>.Content(v13, v18);
  uint64_t v20 = v65;
  char v21 = v64;
  outlined consume of Environment<Bool?>.Content(v65, v64);
  swift_release();
  *uint64_t v9 = xmmword_18836C4A0;
  _s7SwiftUI30ProgressViewStyleConfigurationVWObTm_0((uint64_t)v61, (uint64_t)v9 + *(int *)(v7 + 24), type metadata accessor for ProgressViewStyleConfiguration);
  *(void *)((char *)v9 + *(int *)(v7 + 28)) = v19;
  _s7SwiftUI30ProgressViewStyleConfigurationVWObTm_0((uint64_t)v9, (uint64_t)v12, type metadata accessor for ArchivableCircularProgressView);
  uint64_t v22 = v62;
  _s7SwiftUI30ProgressViewStyleConfigurationVWObTm_0((uint64_t)v12, v62, type metadata accessor for ArchivableCircularProgressView);
  outlined copy of Environment<Color?>.Content(v13, v18);
  outlined copy of Environment<Bool>.Content(v20, v21);
  uint64_t v63 = v16;
  swift_retain();
  if (v16)
  {
    uint64_t v60 = v16;
  }
  else
  {
    outlined copy of Environment<Color?>.Content(v13, v18);
    uint64_t v60 = specialized Environment.wrappedValue.getter(v13, v18);
    outlined consume of Environment<Color?>.Content(v13, v18);
  }
  type metadata accessor for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>(0, &lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, (void (*)(uint64_t))type metadata accessor for ArchivableCircularProgressView, (void (*)(uint64_t))type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
  uint64_t v24 = v22 + *(int *)(v23 + 52);
  swift_retain();
  outlined consume of Environment<Color?>.Content(v13, v18);
  outlined consume of Environment<Bool?>.Content(v65, v64);
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v69 = 0x4034000000000000;
  lazy protocol witness table accessor for type CGFloat and conformance CGFloat();
  ScaledMetric.init(wrappedValue:)();
  uint64_t v58 = v70;
  char v25 = v71;
  uint64_t v57 = v72;
  char v26 = v73;
  double v27 = v74;
  int v56 = v75;
  uint64_t v69 = 0x402C000000000000;
  ScaledMetric.init(wrappedValue:)();
  uint64_t v62 = v13;
  uint64_t v28 = v70;
  char v29 = v71;
  LODWORD(v61) = v18;
  uint64_t v30 = v72;
  char v31 = v73;
  double v32 = v74;
  unsigned __int8 v33 = v75;
  uint64_t v69 = 0x4042800000000000;
  ScaledMetric.init(wrappedValue:)();
  uint64_t v34 = v70;
  uint64_t v35 = v72;
  double v36 = v74;
  unsigned __int8 v37 = v75;
  char v82 = 0;
  char v81 = v25;
  char v80 = v26;
  char v79 = v29;
  char v78 = v31;
  char v77 = v71;
  char v76 = v73;
  *(void *)uint64_t v24 = KeyPath;
  *(unsigned char *)(v24 + 8) = 0;
  *(void *)(v24 + 16) = v58;
  *(unsigned char *)(v24 + 24) = v25;
  *(void *)(v24 + 32) = v57;
  *(unsigned char *)(v24 + 40) = v26;
  *(double *)(v24 + 48) = v27;
  *(unsigned char *)(v24 + 56) = v56;
  *(void *)(v24 + 64) = v28;
  uint64_t v38 = v62;
  *(unsigned char *)(v24 + 72) = v29;
  *(void *)(v24 + 80) = v30;
  uint64_t v39 = v61;
  *(unsigned char *)(v24 + 88) = v31;
  uint64_t v40 = v65;
  *(double *)(v24 + 96) = v32;
  *(unsigned char *)(v24 + 104) = v33;
  uint64_t v41 = v64;
  *(void *)(v24 + 112) = v34;
  *(unsigned char *)(v24 + 120) = v77;
  *(void *)(v24 + 128) = v35;
  *(unsigned char *)(v24 + 136) = v76;
  *(double *)(v24 + 144) = v36;
  *(unsigned char *)(v24 + 152) = v37;
  *(void *)(v24 + 160) = v60;
  *(unsigned char *)(v24 + 168) = 0;
  outlined copy of Environment<Color?>.Content(v38, v39);
  outlined copy of Environment<Bool>.Content(v40, v41);
  if (v63)
  {
    swift_retain();
  }
  else
  {
    swift_retain();
    outlined copy of Environment<Color?>.Content(v38, v39);
    uint64_t v63 = specialized Environment.wrappedValue.getter(v38, v39);
    outlined consume of Environment<Color?>.Content(v38, v39);
  }
  swift_retain();
  outlined consume of Environment<Color?>.Content(v38, v39);
  outlined consume of Environment<Bool?>.Content(v40, v41);
  swift_release();
  uint64_t v66 = swift_getKeyPath();
  uint64_t v69 = 0x4034000000000000;
  ScaledMetric.init(wrappedValue:)();
  uint64_t v65 = v70;
  char v42 = v71;
  uint64_t v64 = v72;
  char v43 = v73;
  double v44 = v74;
  LODWORD(v62) = v75;
  uint64_t v69 = 0x402C000000000000;
  ScaledMetric.init(wrappedValue:)();
  uint64_t v45 = v70;
  char v46 = v71;
  uint64_t v47 = v72;
  char v48 = v73;
  double v49 = v74;
  unsigned __int8 v50 = v75;
  uint64_t v69 = 0x4042800000000000;
  ScaledMetric.init(wrappedValue:)();
  uint64_t v51 = v70;
  uint64_t v52 = v72;
  double result = v74;
  unsigned __int8 v54 = v75;
  char v68 = v71;
  char v67 = v73;
  *(void *)(v24 + 176) = v66;
  *(unsigned char *)(v24 + 184) = 0;
  *(void *)(v24 + 192) = v65;
  *(unsigned char *)(v24 + 200) = v42;
  *(void *)(v24 + 208) = v64;
  *(unsigned char *)(v24 + 216) = v43;
  *(double *)(v24 + 224) = v44;
  *(unsigned char *)(v24 + 232) = v62;
  *(void *)(v24 + 240) = v45;
  *(unsigned char *)(v24 + 248) = v46;
  *(void *)(v24 + 256) = v47;
  *(unsigned char *)(v24 + 264) = v48;
  *(double *)(v24 + 272) = v49;
  *(unsigned char *)(v24 + 280) = v50;
  *(void *)(v24 + 288) = v51;
  *(unsigned char *)(v24 + 296) = v68;
  *(void *)(v24 + 304) = v52;
  *(unsigned char *)(v24 + 312) = v67;
  *(double *)(v24 + 320) = result;
  *(unsigned char *)(v24 + 328) = v54;
  *(void *)(v24 + 336) = v63;
  *(unsigned char *)(v24 + 344) = 1;
  return result;
}

uint64_t outlined init with take of ProgressViewStyleConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI30ProgressViewStyleConfigurationVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for ArchivableCircularProgressView(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ArchivableCircularProgressView);
}

uint64_t outlined init with copy of ProgressViewStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ProgressViewStyleConfiguration(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type ShouldRenderAsTemplate and conformance ShouldRenderAsTemplate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>);
    }
  }
}

void type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>()
{
  if (!lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for BorderlessButtonLabelShapeStyle<TintShapeStyle>, MEMORY[0x1E4F3FA30], MEMORY[0x1E4F3FA28], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BorderlessButtonLabelShapeStyle);
    unint64_t v0 = type metadata accessor for _DefaultForegroundStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>();
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier);
}

unint64_t lazy protocol witness table accessor for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<Ti()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeSt;
  if (!lazy protocol witness table cache variable for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeSt)
  {
    type metadata accessor for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>();
    lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>> and conformance ConditionallyBorderedButton<A>, (void (*)(uint64_t))type metadata accessor for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeSt);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>()
{
  if (!lazy cache variable for type metadata for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&type metadata for OpacityButtonHighlightModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>);
    }
  }
}

void type metadata accessor for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>()
{
  if (!lazy cache variable for type metadata for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>);
    unint64_t v0 = type metadata accessor for ConditionallyBorderedButton();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>);
    }
  }
}

uint64_t type metadata accessor for ConditionallyBorderedButton()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>()
{
  if (!lazy cache variable for type metadata for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintSh)
  {
    type metadata accessor for ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>(255);
    lazy protocol witness table accessor for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<IsConditionallyBorderedPredicate, ConditionallyBorderedButton<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintSh);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier;
  if (!lazy protocol witness table cache variable for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonDefaultRenderingModeModifier and conformance ButtonDefaultRenderingModeModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate;
  if (!lazy protocol witness table cache variable for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsConditionallyBorderedPredicate and conformance IsConditionallyBorderedPredicate);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>()
{
  return lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>> and conformance _DefaultForegroundStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for _DefaultForegroundStyleModifier<BorderlessButtonLabelShapeStyle<TintShapeStyle>>);
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>;
  if (!lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255, &lazy cache variable for type metadata for ButtonStyleContainerModifier<BorderlessButtonStyleBase>, (uint64_t (*)(void))lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase, (uint64_t)&type metadata for BorderlessButtonStyleBase, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ButtonStyleContainerModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ButtonStyleContainerModifier<BorderlessButtonStyleBase> and conformance ButtonStyleContainerModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<ShouldRenderAsTemplate, ButtonDefaultRenderingModeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>, ButtonStyleContainerModifier<BorderlessButtonStyleBase>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<TextAlignment>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TextAlignment> and conformance _EnvironmentKeyWritingModifier<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Text.LineStyle?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(255, a2, a3, a4, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4TextV9LineStyleVSgGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<MenuStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_2(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>();
    type metadata accessor for _EnvironmentKeyWritingModifier<Text.LineStyle?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>)
  {
    type metadata accessor for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255, (unint64_t *)&lazy cache variable for type metadata for _ContentShapeModifier<Rectangle>, (uint64_t (*)(void))lazy protocol witness table accessor for type Rectangle and conformance Rectangle, MEMORY[0x1E4F41830], (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _ContentShapeModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>>();
    lazy protocol witness table accessor for type _BackgroundModifier<_ShapeView<ResolvedBorderShape, _OpacityShapeStyle<TintShapeStyle>>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>>, _ContentShapeModifier<Rectangle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>>();
    lazy protocol witness table accessor for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>();
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>();
    lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>)
  {
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ButtonStyleConfiguration.Label, OpacityButtonHighlightModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OpacityButtonHighlightModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier, (uint64_t)&type metadata for OpacityButtonHighlightModifier, MEMORY[0x1E4F408E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<OpacityButtonHighlightModifier>, OpacityRendererEffect>);
    }
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<PlatformItemListButtonStyle>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void _s7SwiftUI37PrimitiveButtonStyleContainerModifierVyAA016PlatformItemListdE0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t View.contentShape<A>(_:eoFill:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v18 = a5;
  uint64_t v9 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for _ContentShapeModifier();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  uint64_t v16 = (char *)&v18 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v11, a1, a4, v14);
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v16, v11, a4);
  v16[*(int *)(v12 + 36)] = a2;
  MEMORY[0x18C113660](v16, a3, v12, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v16, v12);
}

id static _ContentShapeModifier._makeView(modifier:inputs:body:)@<X0>(_DWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, _OWORD *a6@<X8>)
{
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v77 = *MEMORY[0x1E4F143B8];
  DWORD2(v49) = *a1;
  int v8 = *(_DWORD *)(a2 + 8);
  uint64_t v9 = *(void *)(a2 + 16);
  unsigned int v10 = *(_DWORD *)(a2 + 24);
  unsigned int v11 = *(_DWORD *)(a2 + 28);
  unsigned int v12 = *(_DWORD *)(a2 + 32);
  unsigned int v13 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v14 = *(void *)(a2 + 48);
  unsigned int v17 = *(_DWORD *)(a2 + 56);
  unsigned int v16 = *(_DWORD *)(a2 + 60);
  unsigned int v18 = *(_DWORD *)(a2 + 64);
  unsigned int v19 = *(_DWORD *)(a2 + 68);
  unsigned int v20 = *(_DWORD *)(a2 + 72);
  unsigned int v21 = *(_DWORD *)(a2 + 76);
  int v22 = *(_DWORD *)(a2 + 80);
  *(void *)&long long v69 = *(void *)a2;
  *(void *)&long long v70 = v9;
  unsigned int v55 = v10;
  int v56 = v8;
  DWORD2(v69) = v8;
  *((void *)&v70 + 1) = __PAIR64__(v11, v10);
  unsigned int v45 = v16;
  unsigned int v46 = v11;
  unsigned int v57 = v12;
  *(void *)&long long v71 = __PAIR64__(v13, v12);
  *((void *)&v71 + 1) = v15;
  *(void *)&long long v72 = v14;
  *((void *)&v72 + 1) = __PAIR64__(v16, v17);
  unsigned int v47 = v18;
  *(void *)&long long v73 = __PAIR64__(v19, v18);
  unsigned int v52 = v20;
  unsigned int v53 = v19;
  *((void *)&v73 + 1) = __PAIR64__(v21, v20);
  int v50 = v22;
  unsigned int v51 = v21;
  LODWORD(v74) = v22;
  uint64_t v58 = v69;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v23 = swift_bridgeObjectRetain();
  a3(&v61, v23, &v69);
  *(void *)&long long v69 = v14;
  unsigned int v54 = v17;
  DWORD2(v69) = v17;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    id result = (id)swift_release();
LABEL_7:
    *a6 = v61;
    return result;
  }
  uint64_t v41 = a6;
  LODWORD(v69) = DWORD2(v49);
  v37[1] = type metadata accessor for _ContentShapeModifier();
  type metadata accessor for _GraphValue();
  unsigned int v40 = _GraphValue.value.getter();
  *(void *)&long long v69 = v58;
  *(void *)&long long v70 = v9;
  DWORD2(v69) = v56;
  uint64_t v42 = v9;
  unsigned int v48 = v13;
  *(void *)&long long v49 = v15;
  *((void *)&v49 + 1) = v14;
  *((void *)&v70 + 1) = __PAIR64__(v46, v55);
  *((void *)&v71 + 1) = v15;
  *(void *)&long long v72 = v14;
  *(void *)&long long v71 = __PAIR64__(v13, v57);
  *((void *)&v72 + 1) = __PAIR64__(v45, v54);
  *(void *)&long long v73 = __PAIR64__(v53, v47);
  *((void *)&v73 + 1) = __PAIR64__(v51, v52);
  LODWORD(v74) = v50;
  unsigned int v39 = _ViewInputs.animatedPosition()();
  *(void *)&long long v69 = v58;
  *(void *)&long long v70 = v9;
  DWORD2(v69) = v56;
  *((void *)&v70 + 1) = __PAIR64__(v46, v55);
  *((void *)&v71 + 1) = v15;
  *(void *)&long long v72 = v14;
  *(void *)&long long v71 = __PAIR64__(v13, v57);
  *((void *)&v72 + 1) = __PAIR64__(v45, v54);
  *(void *)&long long v73 = __PAIR64__(v53, v47);
  *((void *)&v73 + 1) = __PAIR64__(v51, v52);
  LODWORD(v74) = v50;
  unsigned int v38 = _ViewInputs.animatedSize()();
  *(void *)&long long v69 = v58;
  *(void *)&long long v70 = v9;
  DWORD2(v69) = v56;
  *((void *)&v70 + 1) = __PAIR64__(v46, v55);
  unsigned int v24 = v13;
  *(void *)&long long v71 = __PAIR64__(v13, v57);
  *((void *)&v71 + 1) = v15;
  *(void *)&long long v72 = v14;
  *((void *)&v72 + 1) = __PAIR64__(v45, v54);
  *(void *)&long long v73 = __PAIR64__(v53, v47);
  *((void *)&v73 + 1) = __PAIR64__(v51, v52);
  LODWORD(v74) = v50;
  unsigned int v25 = _ViewInputs.transform.getter();
  long long v69 = v61;
  int v26 = _ViewOutputs.viewResponders()();
  id result = (id)AGSubgraphGetCurrent();
  if (result)
  {
    v37[2] = v37;
    *(void *)&long long v62 = __PAIR64__(v39, v40);
    *((void *)&v62 + 1) = __PAIR64__(v25, v38);
    LODWORD(v63) = v26;
    *((void *)&v63 + 1) = v58;
    *(_DWORD *)uint64_t v64 = v56;
    *(void *)&v64[8] = v42;
    unsigned int v28 = v54;
    *(void *)&v64[16] = __PAIR64__(v46, v55);
    *(void *)&v64[24] = __PAIR64__(v24, v57);
    long long v29 = v49;
    long long v65 = v49;
    *(void *)&long long v66 = __PAIR64__(v45, v54);
    *((void *)&v66 + 1) = __PAIR64__(v53, v47);
    uint64_t v30 = v42;
    *(void *)&long long v67 = __PAIR64__(v51, v52);
    DWORD2(v67) = v50;
    long long v68 = (unint64_t)result;
    MEMORY[0x1F4188790](result);
    uint64_t v35 = type metadata accessor for ContentShapeResponderFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    uint64_t v32 = v31;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v62, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v34, v35, MEMORY[0x1E4FBC248], v32, MEMORY[0x1E4FBC278], v33);
    long long v73 = v65;
    long long v74 = v66;
    long long v75 = v67;
    long long v76 = v68;
    long long v69 = v62;
    long long v70 = v63;
    long long v71 = *(_OWORD *)v64;
    long long v72 = *(_OWORD *)&v64[16];
    outlined release of ContentShapeResponderFilter<A>((uint64_t)&v69);
    LOBYTE(v62) = 0;
    _ViewOutputs.subscript.setter();
    *(void *)&long long v62 = *((void *)&v29 + 1);
    DWORD2(v62) = v28;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      *(void *)&long long v62 = v58;
      DWORD2(v62) = v56;
      *(void *)&long long v63 = v30;
      *((void *)&v63 + 1) = __PAIR64__(v46, v55);
      *(void *)uint64_t v64 = __PAIR64__(v48, v57);
      *(_OWORD *)&v64[8] = v29;
      *(void *)&v64[24] = __PAIR64__(v45, v54);
      *(void *)&long long v65 = __PAIR64__(v53, v47);
      *((void *)&v65 + 1) = __PAIR64__(v51, v52);
      LODWORD(v66) = v50;
      long long v60 = v61;
      char v59 = 1;
      static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(0x100000000, 0x100000000, (uint64_t)&v62);
      LOBYTE(v62) = 0;
      _ViewOutputs.subscript.setter();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    id result = (id)swift_release();
    a6 = v41;
    goto LABEL_7;
  }
  __break(1u);
  return result;
}

uint64_t type metadata accessor for _ContentShapeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined release of ContentShapeResponderFilter<A>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t type metadata accessor for ContentShapeResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier;
  if (!lazy protocol witness table cache variable for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpacityButtonHighlightModifier and conformance OpacityButtonHighlightModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase;
  if (!lazy protocol witness table cache variable for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderlessButtonStyleBase and conformance BorderlessButtonStyleBase);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type Rectangle and conformance Rectangle()
{
  unint64_t result = lazy protocol witness table cache variable for type Rectangle and conformance Rectangle;
  if (!lazy protocol witness table cache variable for type Rectangle and conformance Rectangle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Rectangle and conformance Rectangle);
  }
  return result;
}

void type metadata accessor for TupleView<(StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ArchivableCircularProgressView, StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>>, StaticIf<InterfaceIdiomPredicate<WidgetInterfaceIdiom>, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??, ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?>)>(uint64_t a1)
{
}

void type metadata accessor for TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>?(uint64_t a1)
{
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>)
  {
    _s7SwiftUI23InterfaceIdiomPredicateVyAA06WidgetcD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type InterfaceIdiomPredicate<MacInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>, (unint64_t *)&lazy cache variable for type metadata for InterfaceIdiomPredicate<MacInterfaceIdiom>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<MacInterfaceIdiom>, CircularUIKitProgressView, CircularUIKitProgressView>);
    }
  }
}

void type metadata accessor for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)()
{
  if (!lazy cache variable for type metadata for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>))
  {
    type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>();
    type metadata accessor for ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>));
    }
  }
}

void type metadata accessor for HStack<ProgressViewStyleConfiguration.Label?>()
{
  if (!lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.Label?>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type ProgressViewStyleConfiguration.Label? and conformance <A> A?, &lazy cache variable for type metadata for ProgressViewStyleConfiguration.Label?);
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<ProgressViewStyleConfiguration.Label?>);
    }
  }
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>??(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>(255);
    type metadata accessor for _EnvironmentKeyWritingModifier<ColorScheme?>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<VStack<TupleView<(HStack<ProgressViewStyleConfiguration.Label?>, ModifiedContent<HStack<ProgressViewStyleConfiguration.CurrentValueLabel?>, _EnvironmentKeyWritingModifier<Font?>>)>>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

uint64_t outlined assign with copy of ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithCopy for ScrollViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  uint64_t v4 = (_OWORD *)(a1 + 48);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  uint64_t v5 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48))
  {
    if (v5)
    {
      uint64_t v7 = *(void *)(a2 + 56);
      *(void *)(a1 + 48) = v5;
      *(void *)(a1 + 56) = v7;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    outlined destroy of ScrollToTopGestureAction(a1 + 48);
  }
  else if (v5)
  {
    uint64_t v8 = *(void *)(a2 + 56);
    *(void *)(a1 + 48) = v5;
    *(void *)(a1 + 56) = v8;
    swift_retain();
    goto LABEL_8;
  }
  *uint64_t v4 = *v6;
LABEL_8:
  swift_unknownObjectWeakCopyAssign();
  unsigned int v10 = (_OWORD *)(a1 + 80);
  uint64_t v9 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  unsigned int v12 = (_OWORD *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 80);
  if (v9)
  {
    if (v11)
    {
      uint64_t v13 = *(void *)(a2 + 88);
      *(void *)(a1 + 80) = v11;
      *(void *)(a1 + 88) = v13;
      swift_retain();
      swift_release();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
    }
    else
    {
      outlined destroy of RefreshAction(a1 + 80);
      uint64_t v15 = *(void *)(a2 + 96);
      *unsigned int v10 = *v12;
      *(void *)(a1 + 96) = v15;
    }
  }
  else if (v11)
  {
    uint64_t v14 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v11;
    *(void *)(a1 + 88) = v14;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_retain();
  }
  else
  {
    long long v16 = *v12;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *unsigned int v10 = v16;
  }
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

unint64_t lazy protocol witness table accessor for type HelpStyleModifier<DefaultHelpStyle> and conformance HelpStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HelpStyleModifier<DefaultHelpStyle> and conformance HelpStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type HelpStyleModifier<DefaultHelpStyle> and conformance HelpStyleModifier<A>)
  {
    type metadata accessor for HelpStyleModifier<DefaultHelpStyle>(255, &lazy cache variable for type metadata for HelpStyleModifier<DefaultHelpStyle>, (void (*)(void))lazy protocol witness table accessor for type DefaultHelpStyle and conformance DefaultHelpStyle);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpStyleModifier<DefaultHelpStyle> and conformance HelpStyleModifier<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>;
  if (!lazy protocol witness table cache variable for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>)
  {
    type metadata accessor for HelpView<HelpStyleConfiguration.Content>(255, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for HelpView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>)
  {
    type metadata accessor for HelpView<HelpStyleConfiguration.Content>(255, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for HelpView);
    type metadata accessor for HelpStyleModifier<DefaultHelpStyle>(255, &lazy cache variable for type metadata for HelpStyleModifier<TooltipHelpStyle>, (void (*)(void))lazy protocol witness table accessor for type TooltipHelpStyle and conformance TooltipHelpStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>, HelpStyleModifier<EmptyHelpStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>, HelpStyleModifier<EmptyHelpStyle>>)
  {
    type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>();
    type metadata accessor for HelpStyleModifier<DefaultHelpStyle>(255, &lazy cache variable for type metadata for HelpStyleModifier<EmptyHelpStyle>, (void (*)(void))lazy protocol witness table accessor for type EmptyHelpStyle and conformance EmptyHelpStyle);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>, HelpStyleModifier<EmptyHelpStyle>>);
    }
  }
}

void type metadata accessor for HelpStyleModifier<DefaultHelpStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for HelpStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for HelpStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type TooltipHelpStyle and conformance TooltipHelpStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TooltipHelpStyle and conformance TooltipHelpStyle;
  if (!lazy protocol witness table cache variable for type TooltipHelpStyle and conformance TooltipHelpStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TooltipHelpStyle and conformance TooltipHelpStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DefaultHelpStyle and conformance DefaultHelpStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultHelpStyle and conformance DefaultHelpStyle;
  if (!lazy protocol witness table cache variable for type DefaultHelpStyle and conformance DefaultHelpStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultHelpStyle and conformance DefaultHelpStyle);
  }
  return result;
}

void type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for HelpView<HelpStyleConfiguration.Content>(255, &lazy cache variable for type metadata for HelpView<HelpStyleConfiguration.Content>, (uint64_t)&protocol witness table for HelpStyleConfiguration.Content, (uint64_t (*)(void, ValueMetadata *))type metadata accessor for HelpView);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<HelpView<HelpStyleConfiguration.Content>, HelpStyleModifier<TooltipHelpStyle>>, (void (*)(void))lazy protocol witness table accessor for type HelpView<HelpStyleConfiguration.Content> and conformance HelpView<A>);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HelpStyleConfiguration.Content, TooltipModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HelpStyleConfiguration.Content, TooltipModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HelpStyleConfiguration.Content, TooltipModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for HelpView<HelpStyleConfiguration.Content>(255, &lazy cache variable for type metadata for ModifiedContent<HelpStyleConfiguration.Content, TooltipModifier>, (uint64_t)&type metadata for TooltipModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HelpStyleConfiguration.Content, TooltipModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for HelpView<HelpStyleConfiguration.Content>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, &type metadata for HelpStyleConfiguration.Content);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t View.help(_:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X8>)
{
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v6 = v5;
  char v8 = v7 & 1;
  View.help(_:)(v4, v5, v9, a1, a2);
  outlined consume of Text.Storage(v4, v6, v8);

  return swift_bridgeObjectRelease();
}

uint64_t View.help(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v11 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[3] = 0;
  char v15 = v14 & 1;
  Text.assertUnstyled(_:options:)();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, v5, a4);
  HelpView.init(content:text:)((uint64_t)v13, a1, a2, v15, a3, a4, a5);
  outlined copy of Text.Storage(a1, a2, v15);
  return swift_bridgeObjectRetain();
}

uint64_t HelpView.init(content:text:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  uint64_t result = type metadata accessor for HelpView();
  uint64_t v13 = a7 + *(int *)(result + 36);
  *(void *)uint64_t v13 = a2;
  *(void *)(v13 + 8) = a3;
  *(unsigned char *)(v13 + 16) = a4 & 1;
  *(void *)(v13 + 24) = a5;
  return result;
}

uint64_t type metadata accessor for HelpView()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type EmptyHelpStyle and conformance EmptyHelpStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type EmptyHelpStyle and conformance EmptyHelpStyle;
  if (!lazy protocol witness table cache variable for type EmptyHelpStyle and conformance EmptyHelpStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EmptyHelpStyle and conformance EmptyHelpStyle);
  }
  return result;
}

uint64_t FocusItem.hasEqualIdentity(to:)(uint64_t a1)
{
  outlined init with copy of FocusItem.Base(v1, (uint64_t)v15);
  outlined init with copy of FocusItem.Base(a1, (uint64_t)v17);
  if (v16)
  {
    if (v16 == 1)
    {
      outlined init with copy of FocusItem.Base((uint64_t)v15, (uint64_t)v14);
      if (v18 == 1)
      {
        outlined init with take of WeakBox<UIFocusItem>((uint64_t)v14, (uint64_t)v13);
        outlined init with take of WeakBox<UIFocusItem>((uint64_t)v17, (uint64_t)v12);
        uint64_t v3 = MEMORY[0x18C119DF0](v13);
        uint64_t v4 = MEMORY[0x18C119DF0](v12);
        uint64_t v5 = v4;
        if (v3)
        {
          swift_unknownObjectRelease();
          if (v5)
          {
            swift_unknownObjectRelease();
            uint64_t v6 = v3 == v5;
LABEL_23:
            outlined destroy of WeakBox<UIFocusItem>((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
            outlined destroy of WeakBox<UIFocusItem>((uint64_t)v13, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
            goto LABEL_26;
          }
        }
        else
        {
          if (!v4)
          {
            uint64_t v6 = 1;
            goto LABEL_23;
          }
          swift_unknownObjectRelease();
        }
        uint64_t v6 = 0;
        goto LABEL_23;
      }
      outlined destroy of WeakBox<UIFocusItem>((uint64_t)v14, (uint64_t (*)(void))type metadata accessor for WeakBox<UIFocusItem>);
    }
    else
    {
      outlined init with copy of FocusItem.Base((uint64_t)v15, (uint64_t)v14);
      if (v18 == 2)
      {
        outlined init with take of WeakBox<UIView>((uint64_t)v14, (uint64_t)v13);
        outlined init with take of WeakBox<UIView>((uint64_t)v17, (uint64_t)v12);
        char v7 = (void *)MEMORY[0x18C119DF0](v13);
        char v8 = (void *)MEMORY[0x18C119DF0](v12);
        uint64_t v6 = (uint64_t)v8;
        if (v7)
        {

          if (v6)
          {

            uint64_t v6 = v7 == (void *)v6;
          }
        }
        else if (v8)
        {

          uint64_t v6 = 0;
        }
        else
        {
          uint64_t v6 = 1;
        }
        outlined destroy of WeakBox<UIView>((uint64_t)v12);
        outlined destroy of WeakBox<UIView>((uint64_t)v13);
        goto LABEL_26;
      }
      outlined destroy of WeakBox<UIView>((uint64_t)v14);
    }
  }
  else
  {
    outlined init with copy of FocusItem.Base((uint64_t)v15, (uint64_t)v14);
    if (!v18)
    {
      int v9 = v14[0];
      int v10 = v17[0];
      swift_release();
      swift_release();
      uint64_t v6 = v9 == v10;
LABEL_26:
      outlined destroy of FocusItem.Base((uint64_t)v15);
      return v6;
    }
    swift_release();
  }
  outlined destroy of WeakBox<UIFocusItem>((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for (FocusItem.Base, FocusItem.Base));
  return 0;
}

void protocol witness for static View._makeView(view:inputs:) in conformance CircularUIKitProgressView(uint64_t a1@<X1>, double *a2@<X8>)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v4[2] = *(_OWORD *)(a1 + 32);
  v4[3] = v2;
  v4[4] = *(_OWORD *)(a1 + 64);
  int v5 = *(_DWORD *)(a1 + 80);
  long long v3 = *(_OWORD *)(a1 + 16);
  v4[0] = *(_OWORD *)a1;
  v4[1] = v3;
  specialized static UIViewRepresentable._makeView(view:inputs:)((uint64_t)v4, a2);
}

void type metadata accessor for _GraphValue<UIKitRichTextEditor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

double static PlatformViewRepresentable._makeView(view:inputs:)@<D0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v184 = *MEMORY[0x1E4F143B8];
  swift_getAssociatedTypeWitness();
  uint64_t v10 = type metadata accessor for Optional();
  MEMORY[0x1F4188790](v10 - 8);
  v137 = (char *)&v119 - v11;
  uint64_t v161 = a3;
  uint64_t v159 = a4;
  uint64_t v12 = type metadata accessor for PlatformViewChild();
  uint64_t v139 = *(void *)(v12 - 8);
  uint64_t v140 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v138 = (uint64_t)&v119 - v13;
  unsigned int v147 = *a1;
  unint64_t v14 = *(void *)a2;
  int v15 = *(_DWORD *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  LODWORD(v157) = *(_DWORD *)(a2 + 24);
  unsigned int v158 = *(_DWORD *)(a2 + 28);
  unsigned int v153 = *(_DWORD *)(a2 + 32);
  LODWORD(v154) = v15;
  int v17 = *(_DWORD *)(a2 + 36);
  uint64_t v19 = *(void *)(a2 + 40);
  unint64_t v18 = *(void *)(a2 + 48);
  unsigned int v20 = *(_DWORD *)(a2 + 60);
  unsigned int v160 = *(_DWORD *)(a2 + 56);
  int v22 = *(_DWORD *)(a2 + 64);
  int v21 = *(_DWORD *)(a2 + 68);
  unsigned int v155 = *(_DWORD *)(a2 + 72);
  LODWORD(v156) = v17;
  LODWORD(v13) = *(_DWORD *)(a2 + 76);
  int v23 = *(_DWORD *)(a2 + 80);
  unsigned int v152 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v177)
  {
    unsigned int v149 = v20;
    LODWORD(v150) = v23;
    LODWORD(v151) = v22;
    LODWORD(v148) = v21;
    unsigned int v84 = v156;
    _ViewOutputs.init()();
    unint64_t v177 = v18;
    unsigned int v178 = v160;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      _DisplayList_Identity.init()();
      uint64_t v142 = a5;
      LODWORD(v146) = v177;
      unint64_t v177 = v14;
      uint64_t v145 = v16;
      v180 = (char *)v16;
      unsigned int v178 = v154;
      unsigned int v85 = v154;
      *(void *)&long long v181 = __PAIR64__(v158, v157);
      *((void *)&v181 + 1) = __PAIR64__(v84, v153);
      *(void *)&long long v182 = v19;
      *((void *)&v182 + 1) = v18;
      unsigned int v86 = v160;
      unsigned int v87 = v149;
      *(_DWORD *)v183 = v160;
      *(_DWORD *)&v183[4] = v149;
      *(_DWORD *)&v183[8] = v151;
      *(_DWORD *)&v183[12] = v148;
      *(_DWORD *)&v183[16] = v155;
      *(_DWORD *)&v183[20] = v152;
      *(_DWORD *)&v183[24] = v150;
      LODWORD(v165) = v146;
      _ViewInputs.pushIdentity(_:)();
      LODWORD(v177) = v147;
      type metadata accessor for _GraphValue();
      unsigned int v147 = _GraphValue.value.getter();
      unint64_t v177 = v14;
      uint64_t v88 = v145;
      v180 = (char *)v145;
      unsigned int v178 = v85;
      *(void *)&long long v181 = __PAIR64__(v158, v157);
      unsigned int v89 = v153;
      uint64_t v141 = v19;
      *(void *)&long long v182 = v19;
      *((void *)&v182 + 1) = v18;
      unsigned int v90 = v156;
      *((void *)&v181 + 1) = __PAIR64__(v156, v153);
      *(_DWORD *)v183 = v86;
      *(_DWORD *)&v183[4] = v87;
      int v91 = v148;
      *(_DWORD *)&v183[8] = v151;
      *(_DWORD *)&v183[12] = v148;
      unsigned int v92 = v152;
      *(_DWORD *)&v183[16] = v155;
      *(_DWORD *)&v183[20] = v152;
      *(_DWORD *)&v183[24] = v150;
      LODWORD(v144) = _ViewInputs.animatedPosition()();
      unint64_t v177 = v14;
      v180 = (char *)v88;
      unsigned int v178 = v154;
      *(void *)&long long v181 = __PAIR64__(v158, v157);
      *((void *)&v181 + 1) = __PAIR64__(v90, v89);
      *(void *)&long long v182 = v19;
      *((void *)&v182 + 1) = v18;
      unsigned int v93 = v160;
      unsigned int v94 = v149;
      LODWORD(v88) = v150;
      *(_DWORD *)v183 = v160;
      *(_DWORD *)&v183[4] = v149;
      *(_DWORD *)&v183[8] = v151;
      *(_DWORD *)&v183[12] = v91;
      unsigned int v95 = v155;
      *(_DWORD *)&v183[16] = v155;
      *(_DWORD *)&v183[20] = v92;
      *(_DWORD *)&v183[24] = v150;
      unsigned int v143 = _ViewInputs.animatedSize()();
      unint64_t v177 = v14;
      v180 = (char *)v145;
      unsigned int v178 = v154;
      *(void *)&long long v181 = __PAIR64__(v158, v157);
      *(void *)&long long v182 = v141;
      *((void *)&v182 + 1) = v18;
      *((void *)&v181 + 1) = __PAIR64__(v156, v153);
      *(_DWORD *)v183 = v93;
      *(_DWORD *)&v183[4] = v94;
      *(_DWORD *)&v183[8] = v151;
      *(_DWORD *)&v183[12] = v91;
      *(_DWORD *)&v183[16] = v95;
      *(_DWORD *)&v183[20] = v92;
      *(_DWORD *)&v183[24] = v88;
      uint64_t v96 = _ViewInputs.containerPosition.getter();
      a5 = v142;
      unint64_t v177 = __PAIR64__(v147, v146);
      unsigned int v178 = v144;
      unsigned int v179 = v143;
      LODWORD(v180) = v96;
      MEMORY[0x1F4188790](v96);
      uint64_t v117 = (unint64_t *)type metadata accessor for PlatformArchivedDisplayList();
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for [FocusableBounds](0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E4F3F4D0], MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v177, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)&v115, (uint64_t)v117, MEMORY[0x1E4FBC248], v97, MEMORY[0x1E4FBC278], v98);
      LOBYTE(v177) = 0;
      _ViewOutputs.subscript.setter();
    }
    *a5 = v169;
    double result = v170;
    *((double *)a5 + 1) = v170;
  }
  else
  {
    uint64_t v142 = a5;
    unint64_t v177 = v14;
    v180 = (char *)v16;
    unsigned int v178 = v154;
    *(void *)&long long v181 = __PAIR64__(v158, v157);
    *(void *)&long long v182 = v19;
    *((void *)&v182 + 1) = v18;
    *((void *)&v181 + 1) = __PAIR64__(v156, v153);
    *(_DWORD *)v183 = v160;
    *(_DWORD *)&v183[4] = v20;
    *(_DWORD *)&v183[8] = v22;
    *(_DWORD *)&v183[12] = v21;
    *(void *)&v183[16] = __PAIR64__(v152, v155);
    *(_DWORD *)&v183[24] = v23;
    type metadata accessor for PreferenceBridge();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v148 = PreferenceBridge.__allocating_init()();
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    swift_release();
    type metadata accessor for EmptyPreferenceImporter();
    uint64_t v141 = swift_allocObject();
    (*(void (**)(uint64_t *__return_ptr))(v159 + 32))(&v169);
    double v130 = v170;
    uint64_t v131 = v169;
    int v129 = v171;
    int v132 = HIDWORD(v171);
    LODWORD(v163[0]) = v147;
    unsigned int v24 = v147;
    outlined copy of DynamicPropertyCache.Fields.Layout();
    _DynamicPropertyBuffer.init<A>(fields:container:inputs:)();
    uint64_t v135 = v165;
    LODWORD(v136) = HIDWORD(v165);
    unsigned int v127 = DWORD2(v165);
    LODWORD(v169) = v24;
    type metadata accessor for _GraphValue();
    int v128 = _GraphValue.value.getter();
    uint64_t v25 = v177;
    unsigned int v26 = v178;
    unsigned int v152 = DWORD1(v181);
    unsigned int v153 = v181;
    unsigned int v27 = HIDWORD(v181);
    uint64_t v154 = *((void *)&v182 + 1);
    uint64_t v28 = v182;
    unsigned int v149 = *(_DWORD *)v183;
    unsigned int v155 = v178;
    LODWORD(v156) = *(_DWORD *)&v183[4];
    LODWORD(v157) = *(_DWORD *)&v183[12];
    LODWORD(v151) = *(_DWORD *)&v183[16];
    unsigned int v143 = *(_DWORD *)&v183[24];
    uint64_t v169 = v177;
    v171 = v180;
    long long v29 = v180;
    uint64_t v150 = v180;
    LODWORD(v170) = v178;
    long long v172 = v181;
    unsigned int v30 = DWORD2(v181);
    unsigned int v158 = DWORD2(v181);
    long long v173 = v182;
    uint64_t v144 = v182;
    long long v174 = *(_OWORD *)v183;
    unsigned int v31 = *(_DWORD *)&v183[8];
    unsigned int v160 = *(_DWORD *)&v183[8];
    unint64_t v175 = *(void *)&v183[16];
    unsigned int v32 = *(_DWORD *)&v183[20];
    LODWORD(v133) = *(_DWORD *)&v183[20];
    unsigned int v176 = *(_DWORD *)&v183[24];
    int v126 = _ViewInputs.environment.getter();
    uint64_t v169 = v25;
    v171 = v29;
    LODWORD(v170) = v26;
    unsigned int v33 = v152;
    LODWORD(v29) = v153;
    *(void *)&long long v172 = __PAIR64__(v152, v153);
    *((void *)&v172 + 1) = __PAIR64__(v27, v30);
    *(void *)&long long v173 = v28;
    uint64_t v34 = v154;
    *((void *)&v173 + 1) = v154;
    LODWORD(v145) = v27;
    *(void *)&long long v174 = __PAIR64__(v156, v149);
    unsigned int v35 = v156;
    *((void *)&v174 + 1) = __PAIR64__(v157, v31);
    unsigned int v36 = v157;
    unint64_t v175 = __PAIR64__(v32, v151);
    unsigned int v176 = v143;
    int v125 = _ViewInputs.transaction.getter();
    uint64_t v169 = v25;
    v171 = v150;
    LODWORD(v170) = v155;
    *(void *)&long long v172 = __PAIR64__(v33, v29);
    LODWORD(v29) = v158;
    *((void *)&v172 + 1) = __PAIR64__(v27, v158);
    uint64_t v37 = v144;
    *(void *)&long long v173 = v144;
    *((void *)&v173 + 1) = v34;
    unsigned int v38 = v149;
    *(void *)&long long v174 = __PAIR64__(v35, v149);
    *((void *)&v174 + 1) = __PAIR64__(v36, v160);
    unsigned int v39 = v151;
    unint64_t v175 = __PAIR64__(v133, v151);
    unsigned int v40 = v133;
    LODWORD(v34) = v143;
    unsigned int v176 = v143;
    int v124 = _ViewInputs.viewPhase.getter();
    uint64_t v134 = v25;
    uint64_t v169 = v25;
    uint64_t v41 = v150;
    v171 = v150;
    LODWORD(v170) = v155;
    *(void *)&long long v172 = __PAIR64__(v152, v153);
    *((void *)&v172 + 1) = __PAIR64__(v145, v29);
    *(void *)&long long v173 = v37;
    *((void *)&v173 + 1) = v154;
    *(void *)&long long v174 = __PAIR64__(v156, v38);
    LODWORD(v37) = v156;
    *((void *)&v174 + 1) = __PAIR64__(v157, v160);
    unsigned int v42 = v157;
    unint64_t v175 = __PAIR64__(v40, v39);
    unsigned int v176 = v34;
    int v123 = _ViewInputs.position.getter();
    uint64_t v169 = v25;
    v171 = v41;
    unsigned int v43 = v155;
    LODWORD(v170) = v155;
    LODWORD(v29) = v152;
    LODWORD(v41) = v153;
    *(void *)&long long v172 = __PAIR64__(v152, v153);
    *((void *)&v172 + 1) = __PAIR64__(v145, v158);
    uint64_t v44 = v154;
    *(void *)&long long v173 = v144;
    *((void *)&v173 + 1) = v154;
    unsigned int v45 = v145;
    *(void *)&long long v174 = __PAIR64__(v37, v149);
    *((void *)&v174 + 1) = __PAIR64__(v42, v160);
    unsigned int v46 = v151;
    unint64_t v175 = __PAIR64__(v133, v151);
    LODWORD(v34) = v133;
    LODWORD(v37) = v143;
    unsigned int v176 = v143;
    int v122 = _ViewInputs.size.getter();
    uint64_t v169 = v134;
    v171 = v150;
    LODWORD(v170) = v43;
    *(void *)&long long v172 = __PAIR64__(v29, v41);
    *((void *)&v172 + 1) = __PAIR64__(v45, v158);
    uint64_t v47 = v144;
    *(void *)&long long v173 = v144;
    *((void *)&v173 + 1) = v44;
    unsigned int v48 = v149;
    *(void *)&long long v174 = __PAIR64__(v156, v149);
    *((void *)&v174 + 1) = __PAIR64__(v157, v160);
    unint64_t v175 = __PAIR64__(v34, v46);
    unsigned int v176 = v37;
    int v121 = _ViewInputs.transform.getter();
    lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey();
    uint64_t v49 = v134;
    swift_retain();
    int v50 = v150;
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    int v120 = v169;
    uint64_t v169 = v49;
    v171 = v50;
    LODWORD(v170) = v155;
    *(void *)&long long v172 = __PAIR64__(v152, v153);
    *((void *)&v172 + 1) = __PAIR64__(v145, v158);
    *(void *)&long long v173 = v47;
    *((void *)&v173 + 1) = v154;
    *(void *)&long long v174 = __PAIR64__(v156, v48);
    *((void *)&v174 + 1) = __PAIR64__(v157, v160);
    unint64_t v175 = __PAIR64__(v34, v151);
    unsigned int v176 = v37;
    _ViewInputs.scrapeableParentID.getter();
    uint64_t v169 = v135;
    LODWORD(v37) = v127;
    double v170 = COERCE_DOUBLE(__PAIR64__(v136, v127));
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v52 = (uint64_t)v137;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v137, 1, 1, AssociatedTypeWitness);
    uint64_t v53 = v148;
    swift_retain();
    uint64_t v54 = swift_retain();
    uint64_t v55 = v138;
    uint64_t v56 = PlatformViewChild.init(view:environment:transaction:phase:position:size:transform:focusedValues:parentID:bridge:importer:links:coordinator:platformView:resetSeed:)(v128, v126, v125, v124, v123, v122, v121, v120, v138, (int *)&v165, v53, v54, &v169, v52, 0, 0);
    MEMORY[0x1F4188790](v56);
    uint64_t v57 = type metadata accessor for ViewLeafView();
    uint64_t v58 = v140;
    uint64_t v115 = v57;
    uint64_t v116 = v140;
    uint64_t v117 = (unint64_t *)swift_getWitnessTable();
    uint64_t v59 = type metadata accessor for Attribute();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v55, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)&v114, v58, MEMORY[0x1E4FBC248], v59, MEMORY[0x1E4FBC278], v60);
    uint64_t v151 = 0;
    (*(void (**)(uint64_t, uint64_t))(v139 + 8))(v55, v58);
    LODWORD(v47) = v169;
    *(void *)&long long v165 = v135;
    *((void *)&v165 + 1) = __PAIR64__(v136, v37);
    LODWORD(v163[0]) = v147;
    uint64_t v169 = v131;
    double v170 = v130;
    LOBYTE(v171) = v129;
    HIDWORD(v171) = v132;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    outlined consume of DynamicPropertyCache.Fields.Layout();
    unsigned int v160 = v47;
    uint64_t v157 = v57;
    _GraphValue.init(_:)();
    unsigned int v158 = v169;
    static AGAttributeFlags.transactional.getter();
    static AGAttributeFlags.removable.getter();
    static AGAttributeFlags.invalidatable.getter();
    uint64_t v61 = v177;
    long long v62 = v180;
    unsigned int v63 = v181;
    unsigned int v64 = DWORD1(v181);
    long long v65 = (char *)v182;
    uint64_t v169 = v177;
    v171 = v180;
    unsigned int v66 = v178;
    LODWORD(v170) = v178;
    long long v172 = v181;
    unsigned int v153 = *(_DWORD *)&v183[8];
    LODWORD(v154) = DWORD2(v181);
    long long v173 = v182;
    uint64_t v156 = *((void *)&v182 + 1);
    unsigned int v143 = *(_DWORD *)&v183[4];
    LODWORD(v144) = HIDWORD(v181);
    unsigned int v155 = *(_DWORD *)v183;
    long long v174 = *(_OWORD *)v183;
    unsigned int v152 = *(_DWORD *)&v183[12];
    LODWORD(v139) = *(_DWORD *)&v183[20];
    LODWORD(v140) = *(_DWORD *)&v183[16];
    unint64_t v175 = *(void *)&v183[16];
    LODWORD(v138) = *(_DWORD *)&v183[24];
    unsigned int v176 = *(_DWORD *)&v183[24];
    if (_ViewInputs.isScrapeable.getter()) {
      static AGAttributeFlags.scrapeable.getter();
    }
    uint64_t v150 = (char *)&v182 + 8;
    AGGraphSetFlags();
    LODWORD(v169) = v158;
    uint64_t v145 = type metadata accessor for _GraphValue();
    unsigned int v149 = _GraphValue.value.getter();
    uint64_t v169 = v61;
    v171 = v62;
    LODWORD(v170) = v66;
    *(void *)&long long v172 = __PAIR64__(v64, v63);
    *((void *)&v172 + 1) = __PAIR64__(v144, v154);
    LODWORD(v134) = v63;
    LODWORD(v135) = v64;
    uint64_t v133 = v61;
    uint64_t v136 = v62;
    v137 = v65;
    *(void *)&long long v173 = v65;
    *((void *)&v173 + 1) = v156;
    unsigned int v67 = v143;
    unsigned int v68 = v144;
    *(void *)&long long v174 = __PAIR64__(v143, v155);
    *((void *)&v174 + 1) = __PAIR64__(v152, v153);
    unsigned int v69 = v140;
    unint64_t v175 = __PAIR64__(v139, v140);
    unsigned int v70 = v139;
    unsigned int v71 = v138;
    unsigned int v176 = v138;
    unsigned int v147 = _ViewInputs.time.getter();
    uint64_t v169 = v133;
    v171 = v62;
    LODWORD(v170) = v66;
    *(void *)&long long v172 = __PAIR64__(v135, v134);
    *((void *)&v172 + 1) = __PAIR64__(v68, v154);
    uint64_t v72 = v156;
    *(void *)&long long v173 = v137;
    *((void *)&v173 + 1) = v156;
    unsigned int v73 = v158;
    unsigned int v74 = v155;
    *(void *)&long long v174 = __PAIR64__(v67, v155);
    *((void *)&v174 + 1) = __PAIR64__(v152, v153);
    unint64_t v175 = __PAIR64__(v70, v69);
    unsigned int v176 = v71;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
    *(_OWORD *)&v166[8] = v172;
    LODWORD(v163[0]) = v73;
    *(void *)&long long v165 = v169;
    DWORD2(v165) = LODWORD(v170);
    *(void *)uint64_t v166 = v171;
    long long v167 = v173;
    v168[0] = v174;
    *(void *)&v168[1] = v175;
    DWORD2(v168[1]) = v176;
    static View.makeDebuggableView(view:inputs:)();
    *(void *)&long long v165 = v72;
    DWORD2(v165) = v74;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v165) = 0;
      type metadata accessor for [FocusableBounds](0, (unint64_t *)&lazy cache variable for type metadata for External<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<Bool> and conformance External<A>();
      unsigned int v75 = Attribute.init<A>(body:value:flags:update:)();
      LODWORD(v165) = v73;
      unsigned int v76 = _GraphValue.value.getter();
      type metadata accessor for GraphHost();
      MEMORY[0x18C114840]();
      *(void *)&long long v165 = __PAIR64__(v75, v76);
      swift_weakInit();
      uint64_t v77 = swift_release();
      MEMORY[0x1F4188790](v77);
      uint64_t v78 = v161;
      uint64_t v79 = v159;
      uint64_t v80 = type metadata accessor for RemoteSheetContainerVCWriter();
      uint64_t v117 = (unint64_t *)v80;
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Attribute<RemoteSheetContainerVCKey.Storage?>();
      uint64_t v81 = v151;
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v165, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_34, (uint64_t)&v115, v80, MEMORY[0x1E4FBC248], v82, MEMORY[0x1E4FBC278], v83);
      uint64_t v151 = v81;
      (*(void (**)(long long *, uint64_t))(*(void *)(v80 - 8) + 8))(&v165, v80);
      *(void *)&long long v165 = *((void *)&v182 + 1);
      DWORD2(v165) = *(_DWORD *)v183;
      MEMORY[0x1F4188790](*((void *)&v182 + 1));
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
      *(void *)&long long v165 = *((void *)&v182 + 1);
      DWORD2(v165) = *(_DWORD *)v183;
      MEMORY[0x1F4188790](*((void *)&v182 + 1));
      LODWORD(v117) = v75;
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v79 = v159;
      uint64_t v78 = v161;
    }
    uint64_t v100 = *((void *)&v182 + 1);
    int v101 = *(_DWORD *)v183;
    *(void *)&long long v165 = *((void *)&v182 + 1);
    DWORD2(v165) = *(_DWORD *)v183;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      *(void *)&long long v165 = v177;
      DWORD2(v165) = v178;
      *(void *)uint64_t v166 = v180;
      *(_OWORD *)&v166[8] = v181;
      *(void *)&long long v167 = v182;
      *((void *)&v167 + 1) = v100;
      LODWORD(v168[0]) = v101;
      *(_OWORD *)((char *)v168 + 4) = *(_OWORD *)&v183[4];
      *(void *)((char *)&v168[1] + 4) = *(void *)&v183[20];
      LODWORD(v163[0]) = v73;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      int v102 = _GraphValue.value.getter();
      uint64_t v103 = ViewResponderFilter.init(inputs:view:)(v102, (uint64_t)v163);
      long long v165 = v163[0];
      *(_OWORD *)uint64_t v166 = v163[1];
      *(void *)&v166[16] = v164;
      MEMORY[0x1F4188790](v103);
      uint64_t v104 = type metadata accessor for ViewResponderFilter();
      uint64_t v117 = (unint64_t *)v104;
      uint64_t WitnessTable = swift_getWitnessTable();
      outlined retain of ViewResponderFilter<A>((uint64_t)v163);
      type metadata accessor for [KeyPress.Handler](0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v165, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v115, v104, MEMORY[0x1E4FBC248], v105, MEMORY[0x1E4FBC278], v106);
      swift_release();
      LOBYTE(v165) = 0;
      _ViewOutputs.subscript.setter();
      outlined release of ViewResponderFilter<A>((uint64_t)v163);
    }
    *(void *)&long long v165 = *((void *)&v182 + 1);
    DWORD2(v165) = *(_DWORD *)v183;
    MEMORY[0x1F4188790](*((void *)&v182 + 1));
    uint64_t v115 = v78;
    uint64_t v116 = v79;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(void *)&long long v165 = *((void *)&v182 + 1);
    DWORD2(v165) = *(_DWORD *)v183;
    MEMORY[0x1F4188790](*((void *)&v182 + 1));
    uint64_t v117 = &v177;
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    *(void *)&long long v165 = v177;
    DWORD2(v165) = v178;
    *(void *)uint64_t v166 = v180;
    *(_OWORD *)&v166[8] = v181;
    long long v167 = v182;
    v168[0] = *(_OWORD *)v183;
    *(void *)&v168[1] = *(void *)&v183[16];
    DWORD2(v168[1]) = *(_DWORD *)&v183[24];
    static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)((uint64_t)&v165, v160, (uint64_t)&v162);
    PreferencesInputs.remove<A>(_:)();
    (*(void (**)(unint64_t *, uint64_t, uint64_t))(v79 + 120))(&v177, v78, v79);
    long long v165 = v162;
    uint64_t v107 = _ViewOutputs.subscript.getter();
    uint64_t v108 = *((void *)&v182 + 1);
    int v109 = *(_DWORD *)v183;
    *(void *)&long long v165 = *((void *)&v182 + 1);
    DWORD2(v165) = *(_DWORD *)v183;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      LOBYTE(v165) = 1;
      _ViewOutputs.subscript.setter();
    }
    *(void *)&long long v165 = v177;
    unint64_t v110 = v177;
    DWORD2(v165) = v178;
    *(void *)uint64_t v166 = v180;
    *(_OWORD *)&v166[8] = v181;
    *(void *)&long long v167 = v182;
    *((void *)&v167 + 1) = v108;
    LODWORD(v168[0]) = v109;
    *(_OWORD *)((char *)v168 + 4) = *(_OWORD *)&v183[4];
    *(void *)((char *)&v168[1] + 4) = *(void *)&v183[20];
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    PreferenceBridge.wrapOutputs(_:inputs:)();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    *(void *)&long long v165 = v108;
    DWORD2(v165) = v109;
    if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0 || (v107 & 0x100000000) != 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
    else
    {
      long long v165 = v162;
      uint64_t v111 = _ViewOutputs.subscript.getter();
      unsigned int v112 = *MEMORY[0x1E4F4E7A0];
      if ((v111 & 0x100000000) == 0) {
        unsigned int v112 = v111;
      }
      *(void *)&long long v165 = __PAIR64__(v112, v107);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityHostedViewBridgeTransform and conformance AccessibilityHostedViewBridgeTransform();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v165) = 0;
      _ViewOutputs.subscript.setter();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v148 = v110;
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    long long v113 = v142;
    *uint64_t v142 = v162;
    double result = *((double *)&v162 + 1);
    v113[1] = *((void *)&v162 + 1);
  }
  return result;
}

uint64_t outlined consume of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRelease();
}

uint64_t outlined release of ViewResponderFilter<A>(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for EmptyPreferenceImporter()
{
  return self;
}

uint64_t type metadata accessor for ViewResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t UIKitHostedFocusItemLifecycle.init(inputs:responder:)@<X0>(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v7 = *a1;
  swift_unknownObjectWeakInit();
  *(_DWORD *)(a3 + 40) = 0;
  *(unsigned char *)(a3 + 44) = 2;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)(a3 + 64) = 0u;
  *(unsigned char *)(a3 + 80) = 1;
  *(_OWORD *)(a3 + 88) = 0u;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *(_OWORD *)(a3 + 104) = 0u;
  *(void *)(a3 + 120) = v4;
  *(_DWORD *)a3 = _ViewInputs.viewPhase.getter();
  *(_DWORD *)(a3 + 4) = _ViewInputs.transform.getter();
  *(_DWORD *)(a3 + 8) = _ViewInputs.animatedPosition()();
  *(_DWORD *)(a3 + 12) = _ViewInputs.animatedSize()();
  lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(_DWORD *)(a3 + 16) = v7;
  lazy protocol witness table accessor for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  uint64_t result = swift_release_n();
  *(_DWORD *)(a3 + 20) = v7;
  *(_DWORD *)(a3 + 24) = a2;
  return result;
}

uint64_t specialized _UIHostingView.HostViewGraph.modifyViewInputs(inputs:graph:)(uint64_t a1, uint64_t a2)
{
  void v14[2] = *MEMORY[0x1E4F143B8];
  uint64_t result = MEMORY[0x18C119DF0](v2);
  if (result)
  {
    uint64_t v6 = (void *)result;
    lazy protocol witness table accessor for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory();
    PropertyList.subscript.setter();
    v14[0] = &type metadata for UIKitGestureContainerFactory;
    v14[1] = lazy protocol witness table accessor for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory();
    PropertyList.subscript.setter();
    uint64_t v7 = (char *)v6 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v6) + 0x198);
    if (MEMORY[0x18C119DF0](v7))
    {
      uint64_t v8 = *((void *)v7 + 1);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v8 + 48))(v6, a1, *(void *)(a2 + 16), *(void *)(a2 + 24), ObjectType, v8);
      swift_unknownObjectRelease();
    }
    uint64_t v10 = PropertyList.subscript.getter();
    if (!v14[0])
    {
      v14[0] = 0;
      double v11 = MEMORY[0x1F4188790](v10);
      MEMORY[0x18C113CE0](partial apply for closure #1 in _UIHostingView.HostViewGraph.modifyViewInputs(inputs:graph:), v11);
    }
    swift_unknownObjectWeakInit();
    uint64_t v12 = swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIView>(v12, (uint64_t)v14);
    _s7SwiftUI7WeakBoxVySo6UIViewCGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, MEMORY[0x1E4F41720]);
    type metadata accessor for External<WeakBox<UIView>>();
    _s8Dispatch0A13WorkItemFlagsVACs10SetAlgebraAAWlTm_1(&lazy protocol witness table cache variable for type External<WeakBox<UIView>> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<WeakBox<UIView>>);
    int v13 = Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of WeakBox<UIView>((uint64_t)v14);
    LODWORD(v14[0]) = v13;
    lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput();
    PropertyList.subscript.setter();
    lazy protocol witness table accessor for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider();
    _ViewInputs.textAlwaysOnProvider.setter();
    _UIHostingView.navigationBridge.getter();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput;
  if (!lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput;
  if (!lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitHostContainerFocusItemInput and conformance UIKitHostContainerFocusItemInput);
  }
  return result;
}

uint64_t outlined init with take of WeakBox<UIView>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for WeakBox<UIView>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for WeakBox<UIView>()
{
  if (!lazy cache variable for type metadata for WeakBox<UIView>)
  {
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v0 = type metadata accessor for WeakBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>);
    }
  }
}

uint64_t outlined destroy of WeakBox<UIView>(uint64_t a1)
{
  type metadata accessor for WeakBox<UIView>(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, MEMORY[0x1E4F41720]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for WeakBox<UIView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void _s7SwiftUI7WeakBoxVySo6UIViewCGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIView);
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void type metadata accessor for External<WeakBox<UIView>>()
{
  if (!lazy cache variable for type metadata for External<WeakBox<UIView>>)
  {
    _s7SwiftUI7WeakBoxVySo6UIViewCGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIView>, MEMORY[0x1E4F41720]);
    unint64_t v0 = type metadata accessor for External();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for External<WeakBox<UIView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory;
  if (!lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitResponderEventBindingBridge.Factory and conformance UIKitResponderEventBindingBridge.Factory);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory()
{
  unint64_t result = lazy protocol witness table cache variable for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory;
  if (!lazy protocol witness table cache variable for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type UIKitGestureContainerFactory and conformance UIKitGestureContainerFactory);
  }
  return result;
}

void _UIHostingView.navigationBridge.getter()
{
}

uint64_t sub_18745E1CC(void *a1)
{
  if (!a1) {
    return 0;
  }
  uint64_t v2 = specialized UIHostingController.navigationBridge.getter();
  swift_retain();

  return v2;
}

uint64_t specialized FocusViewGraph.modifyViewInputs(inputs:graph:)()
{
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type FocusedValuesInputKey and conformance FocusedValuesInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey;
  if (!lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey;
  if (!lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedValuesInputKey and conformance FocusedValuesInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.IsFocusSystemEnabledKey and conformance _GraphInputs.IsFocusSystemEnabledKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusStoreInputKey and conformance FocusStoreInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey;
  if (!lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey[0];
  if (!lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, lazy protocol witness table cache variable for type FocusStoreInputKey and conformance FocusStoreInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type FocusedItemInputKey and conformance FocusedItemInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey;
  if (!lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey[0];
  if (!lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, lazy protocol witness table cache variable for type FocusedItemInputKey and conformance FocusedItemInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusStoreInputKey and conformance AccessibilityFocusStoreInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey;
  if (!lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityFocusInputKey and conformance AccessibilityFocusInputKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider()
{
  unint64_t result = lazy protocol witness table cache variable for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider;
  if (!lazy protocol witness table cache variable for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwiftUITextAlwaysOnProvider and conformance SwiftUITextAlwaysOnProvider);
  }
  return result;
}

uint64_t outlined copy of DynamicPropertyCache.Fields.Layout()
{
  return swift_bridgeObjectRetain();
}

uint64_t PlatformViewChild.init(view:environment:transaction:phase:position:size:transform:focusedValues:parentID:bridge:importer:links:coordinator:platformView:resetSeed:)@<X0>(int a1@<W0>, int a2@<W1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, int a8@<W7>, uint64_t a9@<X8>, int *a10, uint64_t a11, uint64_t a12, uint64_t *a13, uint64_t a14, uint64_t a15, int a16)
{
  int v17 = *a10;
  uint64_t v18 = *a13;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(_DWORD *)(a9 + 8) = a3;
  *(_DWORD *)(a9 + 12) = a4;
  *(_DWORD *)(a9 + 16) = a5;
  *(_DWORD *)(a9 + 20) = a6;
  *(_DWORD *)(a9 + 24) = a7;
  *(_DWORD *)(a9 + 28) = a8;
  *(_DWORD *)(a9 + 32) = v17;
  *(void *)(a9 + 40) = a11;
  *(void *)(a9 + 48) = a12;
  *(void *)(a9 + 56) = v18;
  *(void *)(a9 + 64) = a13[1];
  uint64_t v19 = (int *)type metadata accessor for PlatformViewChild();
  uint64_t v20 = a9 + v19[20];
  swift_getAssociatedTypeWitness();
  uint64_t v21 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 32))(v20, a14, v21);
  *(void *)(a9 + v19[21]) = a15;
  *(_DWORD *)(a9 + v19[22]) = a16;
  uint64_t v22 = v19[23];
  type metadata accessor for PropertyList.Tracker();
  uint64_t result = PropertyList.Tracker.__allocating_init()();
  *(void *)(a9 + v22) = result;
  return result;
}

uint64_t outlined retain of ViewResponderFilter<A>(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for static PlatformViewRepresentable.dynamicProperties.getter in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1)
{
  return static PlatformViewRepresentableAdaptor.dynamicProperties.getter(*(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t protocol witness for static PlatformViewRepresentable.modifyBridgedViewInputs(_:) in conformance PlatformViewRepresentableAdaptor<A>(uint64_t a1, uint64_t a2)
{
  return static PlatformViewRepresentableAdaptor.modifyBridgedViewInputs(_:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

uint64_t static PlatformViewRepresentableAdaptor.modifyBridgedViewInputs(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 104))();
}

void type metadata accessor for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for ViewResponderFilter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewResponderFilter<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

void specialized static UIViewRepresentable._makeView(view:inputs:)(uint64_t a1@<X1>, double *a2@<X8>)
{
  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<Switch>, (uint64_t)&type metadata for Switch, (uint64_t)&protocol witness table for Switch, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<Switch>, (uint64_t)&type metadata for Switch, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitSearchBarAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, (uint64_t)&protocol witness table for UIKitSearchBarAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<UIKitSearchBarAdaptor>, type metadata accessor for UIKitSearchBarAdaptor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, (uint64_t)&protocol witness table for UIKitPagingView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<UIKitPagingView>, (uint64_t)&type metadata for UIKitPagingView, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitTextViewAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, (uint64_t)&protocol witness table for UIKitTextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<UIKitTextViewAdaptor>, type metadata accessor for UIKitTextViewAdaptor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSlider>, (uint64_t)&type metadata for SystemSlider, (uint64_t)&protocol witness table for SystemSlider, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<SystemSlider>, (uint64_t)&type metadata for SystemSlider, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, (uint64_t)&protocol witness table for UIKitStepper, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<UIKitStepper>, (uint64_t)&type metadata for UIKitStepper, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for TextViewAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, (uint64_t)&protocol witness table for TextViewAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<TextViewAdaptor>, type metadata accessor for TextViewAdaptor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for KitRepresentable(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<KitRepresentable>, type metadata accessor for KitRepresentable, (uint64_t)&protocol witness table for KitRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<KitRepresentable>, type metadata accessor for KitRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, (uint64_t)&protocol witness table for UIKitPasteControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<UIKitPasteControl>, (uint64_t)&type metadata for UIKitPasteControl, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, (uint64_t)&protocol witness table for BridgedColorPicker, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<BridgedColorPicker>, (uint64_t)&type metadata for BridgedColorPicker, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitRichTextEditor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, (uint64_t)&protocol witness table for UIKitRichTextEditor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<UIKitRichTextEditor>, type metadata accessor for UIKitRichTextEditor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, (uint64_t)&protocol witness table for UIKitToolbarAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<UIKitToolbarAdaptor>, (uint64_t)&type metadata for UIKitToolbarAdaptor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, (uint64_t)&protocol witness table for SystemSegmentedControl, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<SystemSegmentedControl>, (uint64_t)&type metadata for SystemSegmentedControl, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, (uint64_t)&protocol witness table for BackButtonActionableBar.KeyboardBackdropView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<BackButtonActionableBar.KeyboardBackdropView>, (uint64_t)&type metadata for BackButtonActionableBar.KeyboardBackdropView, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t)&protocol witness table for LinearUIKitProgressView.Base, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<LinearUIKitProgressView.Base>, (uint64_t)&type metadata for LinearUIKitProgressView.Base, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for PlatformTextFieldAdaptor(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, (uint64_t)&protocol witness table for PlatformTextFieldAdaptor, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<PlatformTextFieldAdaptor>, type metadata accessor for PlatformTextFieldAdaptor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitDatePickerRepresentable(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, (uint64_t)&protocol witness table for UIKitDatePickerRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<UIKitDatePickerRepresentable>, type metadata accessor for UIKitDatePickerRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && (AGTypeID.isValueType.getter() & 1) == 0)
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, (uint64_t)&protocol witness table for UIKitSegmentedControlAdaptor, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    _s14AttributeGraph8ExternalVySbGMaTm_0(0, &lazy cache variable for type metadata for _GraphValue<UIKitSegmentedControlAdaptor>, (uint64_t)&type metadata for UIKitSegmentedControlAdaptor, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

{
  int v4;
  uint64_t vars8;

  static Semantics.v4.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0
    && (type metadata accessor for UIKitCalendarViewRepresentable(0), (AGTypeID.isValueType.getter() & 1) == 0))
  {
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, (uint64_t)&protocol witness table for UIKitCalendarViewRepresentable, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    type metadata accessor for _GraphValue<UIKitRichTextEditor>(0, &lazy cache variable for type metadata for _GraphValue<UIKitCalendarViewRepresentable>, type metadata accessor for UIKitCalendarViewRepresentable, MEMORY[0x1E4F3F590]);
    _GraphValue.unsafeBitCast<A>(to:)();
    specialized static PlatformViewRepresentable._makeView(view:inputs:)(v4, a1, a2);
  }
}

void type metadata accessor for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

uint64_t UIHostingContentView.hostingView<A>(_:willModifyViewInputs:)(void *a1, uint64_t a2)
{
  uint64_t v5 = *a1 & *MEMORY[0x1E4FBC8C8];
  long long v6 = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x650);
  v16[0] = *(_OWORD *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x640);
  v16[1] = v6;
  uint64_t v7 = type metadata accessor for UIHostingConfiguration();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v16 - v9;
  UIHostingContentView._configuration.getter((uint64_t)v16 - v9);
  uint64_t v11 = UIHostingConfiguration.delegate.getter(v7);
  uint64_t v13 = v12;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (v11)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(void *, uint64_t, void, void, uint64_t, uint64_t))(v13 + 48))(a1, a2, *(void *)(v5 + 80), *(void *)(v5 + 88), ObjectType, v13);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t protocol witness for UIHostingViewDelegate.hostingView<A>(_:willModifyViewInputs:) in conformance NavigationStackHostingController<A>()
{
  return specialized NavigationStackHostingController.hostingView<A>(_:willModifyViewInputs:)();
}

uint64_t specialized NavigationStackHostingController.hostingView<A>(_:willModifyViewInputs:)()
{
  int v1 = *((unsigned __int8 *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D0));
  if (v1 == 4 || v1 == 1 || !*((unsigned char *)v0 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v0) + 0x3D0))) {
    return _GraphInputs.pushStyleContext<A>(_:)();
  }
  return result;
}

uint64_t protocol witness for static PlatformViewRepresentable.dynamicProperties.getter in conformance PlatformViewControllerRepresentableAdaptor<A>(uint64_t a1)
{
  return static PlatformViewControllerRepresentableAdaptor.dynamicProperties.getter(*(void *)(a1 + 16));
}

uint64_t type metadata accessor for RemoteSheetContainerVCWriter()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<RemoteSheetContainerVCKey.Storage?>()
{
  if (!lazy cache variable for type metadata for Attribute<RemoteSheetContainerVCKey.Storage?>)
  {
    type metadata accessor for [FocusableBounds](255, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<RemoteSheetContainerVCKey.Storage?>);
    }
  }
}

uint64_t initializeWithCopy for SizeFittingLayoutComputer.Engine(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  long long v3 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v3;
  *(unsigned char *)(a1 + 176) = *(unsigned char *)(a2 + 176);
  long long v4 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v4;
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  long long v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  swift_retain();
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in ResolvedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in ScrollActionDispatcher<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for CustomPreviewResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ScrollViewDefaultAnchors(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t initializeWithCopy for ScrollViewResponder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v3;
  swift_retain();
  swift_retain();
  return a1;
}

void Dictionary.subscript.modifyspecialized (void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 32))(*a1, 0);

  free(v1);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 48))(*a1, 0);
  outlined consume of TabCustomizationID.Base();

  free(v1);
}

{
  void *v1;
  uint64_t vars8;

  uint64_t v1 = (void *)*a1;
  (*(void (**)(void, void))(*a1 + 40))(*a1, 0);
  swift_bridgeObjectRelease();

  free(v1);
}

uint64_t NavigationColumnState.update(for:shouldAnimate:splitViewState:)(_OWORD *a1, long long *a2, char a3, uint64_t a4)
{
  long long v6 = a2[13];
  long long v334 = a2[12];
  long long v335 = v6;
  *(_OWORD *)v336 = a2[14];
  *(_OWORD *)&v336[9] = *(long long *)((char *)a2 + 233);
  long long v7 = a2[9];
  *(_OWORD *)v333 = a2[8];
  *(_OWORD *)&v333[16] = v7;
  long long v8 = a2[11];
  *(_OWORD *)&v333[32] = a2[10];
  *(_OWORD *)&v333[48] = v8;
  long long v9 = a2[5];
  long long v329 = a2[4];
  long long v330 = v9;
  long long v10 = a2[7];
  long long v331 = a2[6];
  long long v332 = v10;
  long long v11 = a2[1];
  long long v325 = *a2;
  long long v326 = v11;
  long long v12 = a2[3];
  uint64_t result = *(void *)&v333[56];
  uint64_t v14 = *((void *)&v334 + 1);
  uint64_t v16 = *((void *)&v335 + 1);
  uint64_t v15 = v335;
  uint64_t v17 = *(void *)v336;
  uint64_t v278 = v334;
  uint64_t v282 = *(void *)&v333[56];
  uint64_t v18 = *((void *)&v334 + 1);
  uint64_t v19 = *(void *)&v336[8];
  uint64_t v20 = *(void *)&v336[16];
  unint64_t v22 = *((void *)&v335 + 1);
  uint64_t v21 = v335;
  unsigned __int8 v23 = v336[24];
  uint64_t v25 = *(void *)&v336[8];
  uint64_t v24 = *(void *)v336;
  uint64_t v272 = v334;
  uint64_t v273 = *(void *)&v336[16];
  int v26 = v336[24];
  long long v327 = a2[2];
  long long v328 = v12;
  if (v336[24] == 255)
  {
    int v26 = v329;
    uint64_t v278 = *((void *)&v325 + 1);
    uint64_t v282 = v325;
    uint64_t v27 = a4;
    outlined copy of NavigationRequest.Action(v325, *((uint64_t *)&v325 + 1), v326, *((uint64_t *)&v326 + 1), v327, *((uint64_t *)&v327 + 1), v328, *((uint64_t *)&v328 + 1), v329);
    a4 = v27;
    unsigned __int8 v23 = v336[24];
    uint64_t v14 = *((void *)&v334 + 1);
    uint64_t result = *(void *)&v333[56];
    uint64_t v15 = v335;
    uint64_t v17 = *(void *)v336;
    uint64_t v16 = *((void *)&v335 + 1);
    uint64_t v25 = v328;
    uint64_t v24 = *((void *)&v327 + 1);
    unint64_t v22 = v327;
    uint64_t v21 = *((void *)&v326 + 1);
    uint64_t v18 = v326;
    uint64_t v19 = *(void *)&v336[8];
    uint64_t v20 = *((void *)&v328 + 1);
  }
  switch(v26)
  {
    case 1:
      *(void *)&long long v288 = v21;
      *((void *)&v288 + 1) = v22;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.setPath(_:environment:)(v282, v278, v18, (uint64_t *)&v288, __dst);
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_44;
    case 2:
      uint64_t v42 = a4;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      swift_release();
      swift_release();
      swift_release();
      long long v43 = a2[13];
      long long v297 = a2[12];
      long long v298 = v43;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v44 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v44;
      long long v45 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v45;
      long long v46 = a2[5];
      long long v292 = a2[4];
      long long v293 = v46;
      long long v47 = a2[7];
      long long v294 = a2[6];
      long long v295 = v47;
      long long v48 = a2[1];
      long long v288 = *a2;
      long long v289 = v48;
      long long v49 = a2[3];
      long long v290 = a2[2];
      long long v291 = v49;
      __int16 v50 = *(_WORD *)(v42 + 64);
      long long v51 = *(_OWORD *)(v42 + 16);
      *(_OWORD *)v317 = *(_OWORD *)v42;
      long long v318 = v51;
      long long v52 = *(_OWORD *)(v42 + 48);
      long long v319 = *(_OWORD *)(v42 + 32);
      long long v320 = v52;
      __int16 v321 = v50;
      uint64_t v41 = v337;
      uint64_t v53 = v277;
      goto LABEL_18;
    case 3:
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      swift_bridgeObjectRelease();
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
      uint64_t v16 = v282;
      swift_bridgeObjectRetain();
      outlined init with take of NavigationState.UpdateResult(__dst, v323);
      uint64_t v38 = 0;
      int v39 = 0;
      uint64_t v40 = 0;
      unsigned int v36 = v277;
      uint64_t v37 = v278;
      goto LABEL_11;
    case 4:
      uint64_t v54 = v22;
      uint64_t v55 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      char v56 = 4;
      goto LABEL_15;
    case 5:
      uint64_t v54 = v22;
      uint64_t v55 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      char v56 = 5;
LABEL_15:
      outlined consume of NavigationRequest.Action(v282, v278, v18, v55, v54, v24, v25, v20, v56);
      goto LABEL_71;
    case 6:
      *(void *)&long long v288 = v278;
      *((void *)&v288 + 1) = v18;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.boundPathChange(to:environment:)(v282, (uint64_t *)&v288, __dst);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_30;
    case 7:
    case 8:
      long long v57 = a2[13];
      long long v297 = a2[12];
      long long v298 = v57;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v58 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v58;
      long long v59 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v59;
      long long v60 = a2[5];
      long long v292 = a2[4];
      long long v293 = v60;
      long long v61 = a2[7];
      long long v294 = a2[6];
      long long v295 = v61;
      long long v62 = a2[1];
      long long v288 = *a2;
      long long v289 = v62;
      long long v63 = a2[3];
      long long v290 = a2[2];
      long long v291 = v63;
      __int16 v64 = *(_WORD *)(a4 + 64);
      long long v65 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)v317 = *(_OWORD *)a4;
      long long v318 = v65;
      long long v66 = *(_OWORD *)(a4 + 48);
      long long v319 = *(_OWORD *)(a4 + 32);
      long long v320 = v66;
      __int16 v321 = v64;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      uint64_t v53 = v277;
LABEL_18:
      NavigationColumnState.setSelection(from:splitViewState:)((uint64_t)&v288, (long long *)v317, __dst);
      unsigned int v36 = v53;
      if (v53) {
        return v16;
      }
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      uint64_t v38 = LOBYTE(__dst[1]);
      outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__dst[1] + 8), &v302);
      int v39 = DWORD1(__dst[17]);
      uint64_t v40 = DWORD2(__dst[17]);
      unsigned int v67 = &v302;
      goto LABEL_20;
    case 9:
      long long v68 = a2[13];
      long long v297 = a2[12];
      long long v298 = v68;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v69 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v69;
      long long v70 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v70;
      long long v71 = a2[5];
      long long v292 = a2[4];
      long long v293 = v71;
      long long v72 = a2[7];
      long long v294 = a2[6];
      long long v295 = v72;
      long long v73 = a2[1];
      long long v288 = *a2;
      long long v289 = v73;
      long long v74 = a2[3];
      long long v290 = a2[2];
      long long v291 = v74;
      uint64_t v75 = a4;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.pop(_:request:splitViewState:)(v282, (uint64_t)&v288, v75, __dst);
      goto LABEL_30;
    case 10:
      uint64_t v76 = a4;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      swift_release();
      swift_release();
      long long v77 = a2[13];
      long long v297 = a2[12];
      long long v298 = v77;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v78 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v78;
      long long v79 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v79;
      long long v80 = a2[5];
      long long v292 = a2[4];
      long long v293 = v80;
      long long v81 = a2[7];
      long long v294 = a2[6];
      long long v295 = v81;
      long long v82 = a2[1];
      long long v288 = *a2;
      long long v289 = v82;
      long long v83 = a2[3];
      long long v290 = a2[2];
      long long v291 = v83;
      unsigned int v84 = *(void **)(v76 + 8);
      uint64_t v85 = *(void *)(v76 + 16);
      uint64_t v86 = *(void *)(v76 + 24);
      uint64_t v87 = *(void *)(v76 + 32);
      uint64_t v88 = *(void *)(v76 + 40);
      uint64_t v89 = *(void *)(v76 + 48);
      uint64_t v90 = *(void *)(v76 + 56);
      unsigned __int16 v91 = *(_WORD *)(v76 + 64);
      v317[0] = *(id *)v76;
      v317[1] = v84;
      *(void *)&long long v318 = v85;
      *((void *)&v318 + 1) = v86;
      *(void *)&long long v319 = v87;
      *((void *)&v319 + 1) = v88;
      *(void *)&long long v320 = v89;
      *((void *)&v320 + 1) = v90;
      __int16 v321 = v91;
      id v279 = v317[0];
      uint64_t v274 = (uint64_t)v84;
      outlined copy of NavigationSplitViewState?((uint64_t)v317[0], (uint64_t)v84, v85, v86, v87, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
      uint64_t v16 = v282;
      unsigned int v92 = v337;
      NavigationColumnState.presentValue(_:request:splitViewState:)(v282, (uint64_t)&v288, (uint64_t)v317, __dst);
      if (v277)
      {
        outlined copy of NavigationSplitViewState?((uint64_t)v279, v274, v85, v86, v87, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        goto LABEL_39;
      }
      outlined copy of NavigationSplitViewState?((uint64_t)v279, v274, v85, v86, v87, v88, v89, v90, v91, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      swift_release();
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      goto LABEL_95;
    case 11:
      uint64_t v93 = v24;
      uint64_t v257 = v20;
      uint64_t v94 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      unsigned int v95 = v337;
      NavigationColumnState.replaceRootValue(_:)(v282, __dst);
      unsigned int v36 = v277;
      if (v277)
      {
        outlined consume of NavigationRequest.Action(v282, v278, v18, v94, v22, v93, v25, v257, 11);
        return v16;
      }
      outlined consume of NavigationRequest.Action(v282, v278, v18, v94, v22, v93, v25, v257, 11);
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      uint64_t v38 = LOBYTE(__dst[1]);
      outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__dst[1] + 8), &v288);
      int v39 = DWORD1(__dst[17]);
      uint64_t v40 = DWORD2(__dst[17]);
      v199 = &v288;
      goto LABEL_97;
    case 12:
      *(void *)&long long v288 = v278;
      *((void *)&v288 + 1) = v18;
      *(void *)&long long v289 = v21;
      *((void *)&v289 + 1) = v22;
      uint64_t v96 = v18;
      uint64_t v97 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.replaceRootView(_:identifier:dismiss:)(v282, (uint64_t *)&v288, v24, v25, __dst);
      goto LABEL_28;
    case 13:
      *(void *)&long long v302 = v278;
      *((void *)&v302 + 1) = v18;
      *(void *)&long long v303 = v21;
      *((void *)&v303 + 1) = v22;
      long long v98 = a2[13];
      long long v297 = a2[12];
      long long v298 = v98;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v99 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v99;
      long long v100 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v100;
      long long v101 = a2[5];
      long long v292 = a2[4];
      long long v293 = v101;
      long long v102 = a2[7];
      long long v294 = a2[6];
      long long v295 = v102;
      long long v103 = a2[1];
      long long v288 = *a2;
      long long v289 = v103;
      long long v104 = a2[3];
      long long v290 = a2[2];
      long long v291 = v104;
      uint64_t v96 = v18;
      uint64_t v97 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.presentView(_:identifier:dismiss:request:)(v282, (uint64_t *)&v302, v24, v25, (uint64_t)&v288, __dst);
LABEL_28:
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v96, v97);
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      goto LABEL_45;
    case 14:
      *(void *)&long long v302 = v278;
      *((void *)&v302 + 1) = v18;
      *(void *)&long long v303 = v21;
      *((void *)&v303 + 1) = v22;
      long long v105 = a2[13];
      long long v297 = a2[12];
      long long v298 = v105;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v106 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v106;
      long long v107 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v107;
      long long v108 = a2[5];
      long long v292 = a2[4];
      long long v293 = v108;
      long long v109 = a2[7];
      long long v294 = a2[6];
      long long v295 = v109;
      long long v110 = a2[1];
      long long v288 = *a2;
      long long v289 = v110;
      long long v111 = a2[3];
      long long v290 = a2[2];
      long long v291 = v111;
      uint64_t v112 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.updateView(_:identifier:request:)(v282, (uint64_t *)&v302, (uint64_t)&v288, __dst);
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v18, v112);
LABEL_30:
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      goto LABEL_45;
    case 15:
      uint64_t v113 = result;
      uint64_t v41 = v337;
      uint64_t v114 = v14;
      uint64_t v115 = v19;
      uint64_t v116 = v17;
      uint64_t v117 = v15;
      unsigned __int8 v118 = v23;
      memcpy(__dst, v337, 0x12BuLL);
      long long v119 = a2[13];
      long long v314 = a2[12];
      long long v315 = v119;
      v316[0] = a2[14];
      *(_OWORD *)((char *)v316 + 9) = *(long long *)((char *)a2 + 233);
      long long v120 = a2[9];
      long long v310 = a2[8];
      long long v311 = v120;
      long long v121 = a2[11];
      long long v312 = a2[10];
      long long v313 = v121;
      long long v122 = a2[5];
      long long v306 = a2[4];
      long long v307 = v122;
      long long v123 = a2[7];
      long long v308 = a2[6];
      long long v309 = v123;
      long long v124 = a2[1];
      long long v302 = *a2;
      long long v303 = v124;
      long long v125 = a2[3];
      long long v304 = a2[2];
      long long v305 = v125;
      outlined copy of NavigationRequest.Action?(v113, v334, v114, v117, v16, v116, v115, *(uint64_t *)&v336[16], v118);
      NavigationColumnState.accumulatedDismiss(count:request:)(v282, (uint64_t)&v302, v126, v127, &v288);
      uint64_t v37 = *((void *)&v288 + 1);
      uint64_t v16 = v288;
      uint64_t v38 = v289;
      outlined init with take of NavigationState.UpdateResult((long long *)((char *)&v289 + 8), __dst);
      int v39 = v300;
      uint64_t v40 = v301;
      int v128 = __dst;
      goto LABEL_46;
    case 16:
      if (v337[6])
      {
        outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
        uint64_t result = NavigationListState.clearAllSelections()();
        a4 = v282;
        if (result)
        {
          a4 = v282 - 1;
          if (!__OFSUB__(v282, 1))
          {
LABEL_92:
            if (a4 <= 0)
            {
              _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
            }
            else
            {
              long long v201 = a2[7];
              long long v294 = a2[6];
              long long v295 = v201;
              uint64_t v202 = *((void *)a2 + 16);
              long long v203 = a2[3];
              long long v290 = a2[2];
              long long v291 = v203;
              long long v204 = a2[5];
              long long v292 = a2[4];
              long long v293 = v204;
              long long v205 = a2[1];
              long long v288 = *a2;
              long long v289 = v205;
              *(_OWORD *)&v296[8] = *(_OWORD *)&v333[8];
              *(_OWORD *)&v296[24] = *(_OWORD *)&v333[24];
              *(_OWORD *)&v296[40] = *(_OWORD *)&v333[40];
              *(void *)v296 = v202;
              *(void *)&v296[56] = a4;
              long long v297 = 0u;
              long long v298 = 0u;
              memset(v299, 0, 24);
              v299[24] = 9;
              __dst[4] = v292;
              __dst[5] = v204;
              __dst[6] = v294;
              __dst[7] = v201;
              __dst[0] = v288;
              __dst[1] = v205;
              __dst[2] = v290;
              __dst[3] = v203;
              memset(&__dst[12], 0, 48);
              *(long long *)((char *)&__dst[14] + 9) = *(_OWORD *)&v299[9];
              __dst[8] = *(_OWORD *)v296;
              __dst[9] = *(_OWORD *)&v296[16];
              __dst[10] = *(_OWORD *)&v296[32];
              __dst[11] = *(_OWORD *)&v296[48];
              destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v129, v14, v15);
              outlined retain of NavigationRequest((uint64_t)&v325);
              outlined retain of NavigationRequest.TargetedRequest((uint64_t)&v288);
            }
            outlined init with take of NavigationState.UpdateResult(__dst, v324);
            uint64_t v35 = 0;
            uint64_t v37 = 0;
            LODWORD(v40) = 0;
            LOBYTE(v38) = 2;
            uint64_t v16 = 1;
            unsigned int v166 = 1;
            int v39 = 1;
            goto LABEL_103;
          }
          __break(1u);
LABEL_37:
          long long v130 = a2[13];
          long long v297 = a2[12];
          long long v298 = v130;
          *(_OWORD *)v299 = a2[14];
          *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
          long long v131 = a2[9];
          *(_OWORD *)v296 = a2[8];
          *(_OWORD *)&v296[16] = v131;
          long long v132 = a2[11];
          *(_OWORD *)&v296[32] = a2[10];
          *(_OWORD *)&v296[48] = v132;
          long long v133 = a2[5];
          long long v292 = a2[4];
          long long v293 = v133;
          long long v134 = a2[7];
          long long v294 = a2[6];
          long long v295 = v134;
          long long v135 = a2[1];
          long long v288 = *a2;
          long long v289 = v135;
          long long v136 = a2[3];
          long long v290 = a2[2];
          long long v291 = v136;
          v137 = *(void **)(a4 + 8);
          uint64_t v138 = v16;
          uint64_t v139 = *(void *)(a4 + 16);
          uint64_t v141 = *(void *)(a4 + 32);
          uint64_t v140 = *(void *)(a4 + 40);
          uint64_t v142 = *(void *)(a4 + 48);
          uint64_t v250 = *(void *)(a4 + 56);
          uint64_t v252 = *(void *)(a4 + 24);
          uint64_t v16 = *(unsigned __int16 *)(a4 + 64);
          v317[0] = *(id *)a4;
          v317[1] = v137;
          *(void *)&long long v318 = v139;
          *((void *)&v318 + 1) = v252;
          *(void *)&long long v319 = v141;
          *((void *)&v319 + 1) = v140;
          *(void *)&long long v320 = v142;
          *((void *)&v320 + 1) = v250;
          __int16 v321 = v16;
          uint64_t v143 = v21;
          outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v138, v17, v19, *(uint64_t *)&v336[16], v23);
          id v255 = v317[0];
          uint64_t v275 = v140;
          outlined copy of NavigationSplitViewState?((uint64_t)v317[0], (uint64_t)v137, v139, v252, v141, v140, v142, v250, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
          unsigned int v92 = v337;
          NavigationColumnState.presentValueInList(value:isSelectionChange:selectionPopsSubsequentColumn:request:activeBinding:splitViewState:)(v282, v278 & 1, (v22 >> 8) & 1, (uint64_t)&v288, v18, v143, v22 & 1, (uint64_t)v317, __dst);
          if (v277)
          {
            outlined copy of NavigationSplitViewState?((uint64_t)v255, (uint64_t)v137, v139, v252, v141, v275, v142, v250, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
            swift_release();
            swift_release();
LABEL_39:
            swift_release();
            return v16;
          }
          outlined copy of NavigationSplitViewState?((uint64_t)v255, (uint64_t)v137, v139, v252, v141, v275, v142, v250, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          swift_release();
          swift_release();
          swift_release();
          uint64_t v37 = *((void *)&__dst[0] + 1);
          uint64_t v16 = *(void *)&__dst[0];
LABEL_95:
          uint64_t v38 = LOBYTE(__dst[1]);
          outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__dst[1] + 8), &v302);
          int v39 = DWORD1(__dst[17]);
          uint64_t v40 = DWORD2(__dst[17]);
          outlined init with take of NavigationState.UpdateResult(&v302, v322);
          unsigned int v36 = 0;
          uint64_t v41 = v92;
          goto LABEL_47;
        }
      }
      else
      {
        uint64_t result = outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
        a4 = v282;
      }
      if ((v278 & 0x101) == 1)
      {
        BOOL v200 = __OFSUB__(a4--, 1);
        if (v200)
        {
          __break(1u);
          goto LABEL_140;
        }
      }
      goto LABEL_92;
    case 17:
      goto LABEL_37;
    case 18:
      v317[0] = (id)v18;
      v317[1] = (id)v21;
      *(void *)&long long v318 = v22;
      *((void *)&v318 + 1) = v24;
      long long v144 = a2[13];
      long long v297 = a2[12];
      long long v298 = v144;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v145 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v145;
      long long v146 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v146;
      long long v147 = a2[5];
      long long v292 = a2[4];
      long long v293 = v147;
      long long v148 = a2[7];
      long long v294 = a2[6];
      long long v295 = v148;
      long long v149 = a2[1];
      long long v288 = *a2;
      long long v289 = v149;
      long long v150 = a2[3];
      long long v290 = a2[2];
      long long v291 = v150;
      uint64_t v151 = v20;
      uint64_t v152 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v16 = (uint64_t)__dst;
      unsigned int v95 = v337;
      NavigationColumnState.programmaticallyPresentView(_:fromDepth:identifier:dismiss:request:)(v282, v278, (uint64_t *)v317, v25, v151, (uint64_t)&v288, __dst);
      unsigned int v36 = v277;
      if (v277)
      {
        swift_release();
        swift_release();
        swift_release();
        outlined consume of Text.LineStyle?(v152, v22);
        return v16;
      }
      swift_release();
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(v152, v22);
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      uint64_t v38 = LOBYTE(__dst[1]);
      outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__dst[1] + 8), &v302);
      int v39 = DWORD1(__dst[17]);
      uint64_t v40 = DWORD2(__dst[17]);
      v199 = &v302;
LABEL_97:
      outlined init with take of NavigationState.UpdateResult(v199, v322);
      uint64_t v41 = v95;
      goto LABEL_47;
    case 19:
      *(void *)&long long v302 = v282;
      uint64_t v258 = v20;
      *((void *)&v302 + 1) = v278;
      *(void *)&long long v303 = v18;
      *((void *)&v303 + 1) = v21;
      long long v153 = a2[13];
      long long v297 = a2[12];
      long long v298 = v153;
      *(_OWORD *)v299 = a2[14];
      *(_OWORD *)&v299[9] = *(long long *)((char *)a2 + 233);
      long long v154 = a2[9];
      *(_OWORD *)v296 = a2[8];
      *(_OWORD *)&v296[16] = v154;
      long long v155 = a2[11];
      *(_OWORD *)&v296[32] = a2[10];
      *(_OWORD *)&v296[48] = v155;
      long long v156 = a2[5];
      long long v292 = a2[4];
      long long v293 = v156;
      long long v157 = a2[7];
      long long v294 = a2[6];
      long long v295 = v157;
      long long v158 = a2[1];
      long long v288 = *a2;
      long long v289 = v158;
      long long v159 = a2[3];
      long long v290 = a2[2];
      long long v291 = v159;
      uint64_t v160 = v18;
      uint64_t v161 = v22;
      uint64_t v162 = v21;
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v163 = v24;
      uint64_t v164 = v337;
      NavigationColumnState.programmaticallyDismissView(identifier:request:)((uint64_t *)&v302, (uint64_t)&v288, __dst);
      uint64_t v41 = v164;
      outlined consume of NavigationRequest.Action(v282, v278, v160, v162, v161, v163, v25, v258, 19);
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
      goto LABEL_45;
    case 20:
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v41 = v337;
      NavigationColumnState.popAllForSelectionChange(popReplacedRoots:)(v282 & 1, __dst);
LABEL_44:
      uint64_t v37 = *((void *)&__dst[0] + 1);
      uint64_t v16 = *(void *)&__dst[0];
LABEL_45:
      uint64_t v38 = LOBYTE(__dst[1]);
      outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__dst[1] + 8), &v288);
      int v39 = DWORD1(__dst[17]);
      uint64_t v40 = DWORD2(__dst[17]);
      int v128 = &v288;
LABEL_46:
      outlined init with take of NavigationState.UpdateResult(v128, v322);
      unsigned int v36 = v277;
      goto LABEL_47;
    case 21:
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v282);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v18);
LABEL_71:
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__dst);
      goto LABEL_72;
    case 22:
      unint64_t v184 = v22 | v24 | v25;
      if (!(v18 | v278 | v282 | v21 | v184 | v20))
      {
        uint64_t v206 = result;
        uint64_t v207 = v19;
        uint64_t v208 = v17;
        uint64_t v209 = v15;
        uint64_t v210 = v14;
        unsigned __int8 v211 = v23;
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
        outlined copy of NavigationRequest.Action?(v206, v272, v210, v209, v16, v208, v207, v273, v211);
LABEL_72:
        outlined init with take of NavigationState.UpdateResult(__dst, v324);
        uint64_t v35 = 0;
        unsigned int v166 = 0;
        uint64_t v37 = 0;
        int v39 = 0;
        LODWORD(v40) = 0;
        LOBYTE(v38) = 2;
        uint64_t v16 = 1;
        goto LABEL_103;
      }
      unint64_t v185 = v18 | v278 | v21 | v184 | v20;
      if (v282 == 1 && !v185)
      {
        outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
        uint64_t v41 = v337;
        NavigationColumnState.ejectAll()();
        *((unsigned char *)v337 + 296) = 0;
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
        outlined init with take of NavigationState.UpdateResult(__dst, v323);
        uint64_t v40 = 0;
        uint64_t v37 = 0;
        uint64_t v38 = 2;
        int v39 = 1;
        uint64_t v16 = 2;
        unsigned int v36 = v277;
        if ((v41[21] & 0x8000000000000000) == 0) {
          goto LABEL_55;
        }
        goto LABEL_60;
      }
      uint64_t v41 = v337;
      if (v282 != 2 || v185)
      {
        if (v282 != 3 || v185)
        {
          unsigned int v36 = v277;
          if (v282 != 4 || v185)
          {
            outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
            NavigationColumnState.revealedBySubsequentPop()(__dst);
            uint64_t v37 = *((void *)&__dst[0] + 1);
            uint64_t v16 = *(void *)&__dst[0];
            uint64_t v38 = LOBYTE(__dst[1]);
            outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__dst[1] + 8), &v288);
            int v39 = DWORD1(__dst[17]);
            uint64_t v40 = DWORD2(__dst[17]);
            unsigned int v67 = &v288;
LABEL_20:
            outlined init with take of NavigationState.UpdateResult(v67, v322);
LABEL_47:
            outlined init with take of NavigationState.UpdateResult(v322, __dst);
            if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)__dst) == 1)
            {
LABEL_52:
              long long v165 = v322;
LABEL_53:
              outlined init with take of NavigationState.UpdateResult(v165, v324);
              uint64_t v35 = v40;
              unsigned int v166 = v39;
LABEL_103:
              *(void *)&__dst[0] = v16;
              *((void *)&__dst[0] + 1) = v37;
              LOBYTE(__dst[1]) = v38;
              outlined init with take of NavigationState.UpdateResult(v324, (long long *)((char *)&__dst[1] + 8));
              *(void *)((char *)&__dst[17] + 4) = __PAIR64__(v40, v39);
              uint64_t v16 = v166 | (unint64_t)(v35 << 32);
              long long v213 = v337;
              NavigationColumnState.updateAnimationState(requestAnimation:disablesAnimations:seedDelta:)(*(uint64_t *)v333, (a3 & 1) == 0, v16);
              outlined release of NavigationState.RequestResults((uint64_t)__dst);
              unsigned int v214 = *((_DWORD *)v213 + 1) + v35;
              *(_DWORD *)v213 += v166;
              *((_DWORD *)v213 + 1) = v214;
              outlined init with take of NavigationState.UpdateResult(v324, a1);
              return v16;
            }
            if (v38 == 2 && v16 == 1 && !v37)
            {
              uint64_t v16 = 1;
              LOBYTE(v38) = 2;
              outlined copy of ResolvedNavigationDestinations.ChangeRequest(1, 0, 2);
              outlined retain of NavigationState.UpdateResult((uint64_t)v322, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of NavigationState.UpdateResult);
              goto LABEL_52;
            }
            outlined copy of ResolvedNavigationDestinations.ChangeRequest(v16, v37, v38);
            outlined retain of NavigationState.UpdateResult((uint64_t)v322, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined copy of NavigationState.UpdateResult);
            outlined init with take of NavigationState.UpdateResult(v322, v323);
            if ((v41[21] & 0x8000000000000000) == 0)
            {
LABEL_55:
              unsigned int v167 = v39;
              uint64_t v276 = v40;
              uint64_t v168 = specialized NavigationColumnState.ColumnContent.mutatePath<A>(transform:)(v41 + 14, v16, v37, v38, (uint64_t)v41);
              uint64_t v40 = v16;
              if (!v36)
              {
                unint64_t v180 = v168;
                char v181 = v169;
                outlined consume of ResolvedNavigationDestinations.ChangeRequest(v40, v37, v38);
                unint64_t v182 = HIDWORD(v180);
                if (v181) {
                  int v183 = 0;
                }
                else {
                  int v183 = v180;
                }
                if (v181) {
                  LODWORD(v182) = 0;
                }
                unsigned int v166 = v183 + v39;
                uint64_t v35 = (v182 + v276);
                outlined init with take of NavigationState.UpdateResult(v323, v324);
                uint64_t v16 = v40;
                LODWORD(v40) = v276;
                goto LABEL_103;
              }
              outlined consume of ResolvedNavigationDestinations.ChangeRequest(v16, v37, v38);
              *(void *)&long long v288 = v16;
              *((void *)&v288 + 1) = v37;
              uint64_t v280 = v37;
              LOBYTE(v289) = v38;
              outlined init with take of NavigationState.UpdateResult(v323, (long long *)((char *)&v289 + 8));
              int v300 = v39;
              unsigned int v301 = v276;
              v317[0] = v36;
              id v170 = v36;
              type metadata accessor for Error();
              if ((swift_dynamicCast() & 1) != 0 && *((void *)&v302 + 1) >> 62 == 1)
              {
                uint64_t v171 = v302;

                *(void *)&__dst[0] = v171;
                type metadata accessor for Any.Type();
                uint64_t v172 = String.init<A>(describing:)();
                long long v174 = v173;
                *(void *)&__dst[0] = 0;
                *((void *)&__dst[0] + 1) = 0xE000000000000000;
                _StringGuts.grow(_:)(310);
                v175._object = (void *)0x8000000188335760;
                v175._countAndFlagsBits = 0x1000000000000032;
                String.append(_:)(v175);
                v176._countAndFlagsBits = v172;
                v176._object = v174;
                String.append(_:)(v176);
                v177._countAndFlagsBits = 0x1000000000000102;
                v177._object = (void *)0x80000001883357A0;
                String.append(_:)(v177);
                swift_bridgeObjectRelease();
                MEMORY[0x18C112B90](*(void *)&__dst[0], *((void *)&__dst[0] + 1));
                outlined release of NavigationState.RequestResults((uint64_t)&v288);
                outlined retain of NavigationState.UpdateResult((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of NavigationState.UpdateResult);
                swift_bridgeObjectRelease();
                _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__dst);
                outlined init with take of NavigationState.UpdateResult(__dst, a1);

                return v167 | (unint64_t)(v276 << 32);
              }
              else
              {

                id v287 = v36;
                id v178 = v36;
                if (swift_dynamicCast())
                {
                  long long v179 = v302;
                  if (*((void *)&v302 + 1) >= 2uLL)
                  {
                    uint64_t v266 = v302;

                    memcpy(__dst, v41, 0x12BuLL);
                    unsigned int v166 = v39;
                    if ((*((void *)&__dst[10] + 1) & 0x8000000000000000) == 0)
                    {
                      uint64_t v283 = v16;
                      uint64_t v261 = *((void *)&__dst[9] + 1);
                      uint64_t v189 = *(void *)&__dst[9];
                      uint64_t v263 = *(void *)&__dst[10];
                      long long v190 = __dst[8];
                      uint64_t v251 = *(void *)&__dst[8];
                      uint64_t v191 = *((void *)&__dst[7] + 1);
                      uint64_t v192 = *(void *)&__dst[7];
                      long long v253 = __dst[6];
                      uint64_t v259 = *((void *)&__dst[5] + 1);
                      uint64_t v193 = *((void *)&__dst[10] + 1);
                      outlined retain of NavigationColumnState((uint64_t *)__dst);
                      uint64_t v194 = v192;
                      outlined copy of NavigationColumnState.ColumnContent(v192, v191, v190, *((uint64_t *)&v190 + 1), v189, v261, v263, v193);
                      swift_bridgeObjectRelease();
                      uint64_t v37 = v280;
                      uint64_t v16 = v283;
                      swift_bridgeObjectRelease();
                      outlined consume of NavigationColumnState.ReplacedRoot?(v194, v191, v251, *((uint64_t *)&v190 + 1));
                      outlined release of NavigationColumnState((uint64_t *)__dst);
                      uint64_t v195 = swift_allocObject();
                      *(void *)(v195 + 16) = v259;
                      *(_OWORD *)(v195 + 24) = v253;
                      *(void *)(v195 + 40) = v193;
                      outlined copy of Binding<AnyNavigationPath>?(v259, v253);
                      outlined copy of Binding<AnyNavigationPath>?(v259, v253);
                      swift_retain();
                      static Update.enqueueAction(_:)();
                      swift_release();
                      swift_release();
                      outlined consume of Binding<AnyNavigationPath>?(v259, v253);
                      unsigned int v166 = v39 + 1;
                    }
                    v317[0] = 0;
                    v317[1] = (id)0xE000000000000000;
                    _StringGuts.grow(_:)(151);
                    v196._countAndFlagsBits = 0xD00000000000005FLL;
                    v196._object = (void *)0x80000001883356C0;
                    String.append(_:)(v196);
                    v197._countAndFlagsBits = v266;
                    v197._object = (void *)*((void *)&v179 + 1);
                    String.append(_:)(v197);
                    outlined consume of NavigationPath.Error(v266, *((unint64_t *)&v179 + 1));
                    v198._countAndFlagsBits = 0x1000000000000036;
                    v198._object = (void *)0x8000000188335720;
                    String.append(_:)(v198);
                    MEMORY[0x18C112B90](v317[0], v317[1]);
                    swift_bridgeObjectRelease();

                    outlined init with take of NavigationState.UpdateResult(v323, v324);
                    LODWORD(v40) = v276;
                    uint64_t v35 = v276;
                    goto LABEL_103;
                  }
                  outlined release of NavigationState.RequestResults((uint64_t)&v288);
                  outlined consume of NavigationPath.Error(v179, *((unint64_t *)&v179 + 1));
                  outlined retain of NavigationState.UpdateResult((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of NavigationState.UpdateResult);
                }
                else
                {
                  outlined retain of NavigationState.UpdateResult((uint64_t)v323, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, char))outlined consume of NavigationState.UpdateResult);
                  outlined release of NavigationState.RequestResults((uint64_t)&v288);
                }
              }
              return v16;
            }
LABEL_59:
            if (!v38)
            {
              LODWORD(v38) = v39;
              *(void *)&__dst[1] = 0;
              __dst[0] = MEMORY[0x1E4FBC860];
              BYTE8(__dst[1]) = 0;
              __dst[2] = MEMORY[0x1E4FBC860];
              unint64_t v186 = ResolvedNavigationDestinations.updatePossibilities(for:over:)(v16, v37, 0, (uint64_t)__dst);
              if (v36)
              {
                uint64_t v187 = v16;
                outlined consume of ResolvedNavigationDestinations.ChangeRequest(v16, v37, 0);

                outlined consume of NavigationPath.Representation(*(uint64_t *)&__dst[0], *((uint64_t *)&__dst[0] + 1), *(uint64_t *)&__dst[1], SBYTE8(__dst[1]));
                swift_bridgeObjectRelease();
                int v188 = 0;
                LODWORD(v16) = 0;
              }
              else
              {
                int v188 = v186;
                uint64_t v212 = v16;
                uint64_t v16 = HIDWORD(v186);
                outlined consume of NavigationPath.Representation(*(uint64_t *)&__dst[0], *((uint64_t *)&__dst[0] + 1), *(uint64_t *)&__dst[1], SBYTE8(__dst[1]));
                swift_bridgeObjectRelease();
                uint64_t v187 = v212;
                outlined consume of ResolvedNavigationDestinations.ChangeRequest(v212, v37, 0);
              }
              unsigned int v166 = v188 + v38;
              int v39 = v38;
              uint64_t v35 = (v16 + v40);
              outlined init with take of NavigationState.UpdateResult(v323, v324);
              LOBYTE(v38) = 0;
              uint64_t v16 = v187;
              goto LABEL_103;
            }
LABEL_60:
            outlined consume of ResolvedNavigationDestinations.ChangeRequest(v16, v37, v38);
            long long v165 = v323;
            goto LABEL_53;
          }
          unsigned __int8 v231 = v23;
          uint64_t v232 = result;
          uint64_t v233 = v14;
          uint64_t v234 = v15;
          uint64_t v235 = v17;
          uint64_t v285 = v19;
          uint64_t v236 = *((unsigned int *)v337 + 2);
          if (v236 != -1)
          {
            if (v236) {
              int v237 = merge32(_:_:)(v236, 1u);
            }
            else {
              int v237 = 1;
            }
            *((_DWORD *)v337 + 2) = v237;
          }
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
          outlined copy of NavigationRequest.Action?(v232, v272, v233, v234, v16, v235, v285, v273, v231);
        }
        else if (v337[6])
        {
          outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
          Swift::Bool v229 = NavigationListState.clearAllSelections()();
          uint64_t v230 = *((unsigned int *)v337 + 2);
          if (v230 != -1)
          {
            if (v230) {
              *((_DWORD *)v337 + 2) = merge32(_:_:)(v230, 1u);
            }
            else {
              *((_DWORD *)v337 + 2) = 1;
            }
          }
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
          if (v229)
          {
            outlined init with take of NavigationState.UpdateResult(__dst, v324);
            uint64_t v35 = 0;
            uint64_t v37 = 0;
            LODWORD(v40) = 0;
            LOBYTE(v38) = 2;
            unsigned int v166 = 1;
            uint64_t v16 = 1;
            int v39 = 1;
            goto LABEL_103;
          }
        }
        else
        {
          uint64_t v243 = *((unsigned int *)v337 + 2);
          if (v243)
          {
            if (v243 == -1)
            {
              uint64_t v244 = result;
              uint64_t v245 = v19;
              uint64_t v246 = v17;
              uint64_t v247 = v15;
              uint64_t v248 = v14;
              unsigned __int8 v249 = v23;
              _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
              outlined copy of NavigationRequest.Action?(v244, v272, v248, v247, v16, v246, v245, v273, v249);
              goto LABEL_137;
            }
            outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
            *((_DWORD *)v337 + 2) = merge32(_:_:)(v243, 1u);
          }
          else
          {
            outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
            *((_DWORD *)v337 + 2) = 1;
          }
          _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__dst);
        }
LABEL_137:
        outlined init with take of NavigationState.UpdateResult(__dst, v324);
        uint64_t v35 = 0;
LABEL_86:
        unsigned int v166 = 0;
        uint64_t v37 = 0;
        int v39 = 0;
        LODWORD(v40) = 0;
        LOBYTE(v38) = 2;
        uint64_t v16 = 1;
        goto LABEL_103;
      }
      uint64_t v215 = v337[21];
      if (v215 < 0)
      {
        outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
        uint64_t v228 = 1;
LABEL_123:
        long long v238 = a2[7];
        long long v294 = a2[6];
        long long v295 = v238;
        uint64_t v239 = *((void *)a2 + 16);
        long long v240 = a2[3];
        long long v290 = a2[2];
        long long v291 = v240;
        long long v241 = a2[5];
        long long v292 = a2[4];
        long long v293 = v241;
        long long v242 = a2[1];
        long long v288 = *a2;
        long long v289 = v242;
        *(_OWORD *)&v296[8] = *(_OWORD *)&v333[8];
        *(_OWORD *)&v296[24] = *(_OWORD *)&v333[24];
        *(_OWORD *)&v296[40] = *(_OWORD *)&v333[40];
        *(void *)v296 = v239;
        *(void *)&v296[56] = v228;
        long long v297 = 0u;
        long long v298 = 0u;
        memset(v299, 0, 24);
        v299[24] = 15;
        __dst[4] = v292;
        __dst[5] = v241;
        __dst[6] = v294;
        __dst[7] = v238;
        __dst[0] = v288;
        __dst[1] = v242;
        __dst[2] = v290;
        __dst[3] = v240;
        memset(&__dst[12], 0, 48);
        *(long long *)((char *)&__dst[14] + 9) = *(_OWORD *)&v299[9];
        __dst[8] = *(_OWORD *)v296;
        __dst[9] = *(_OWORD *)&v296[16];
        __dst[10] = *(_OWORD *)&v296[32];
        __dst[11] = *(_OWORD *)&v296[48];
        destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__dst, v225, v226, v227);
        outlined retain of NavigationRequest((uint64_t)&v325);
        outlined retain of NavigationRequest.TargetedRequest((uint64_t)&v288);
        goto LABEL_72;
      }
      uint64_t v216 = v337[15];
      uint64_t v284 = v337[14];
      uint64_t v217 = v337[16];
      uint64_t v218 = v337[18];
      uint64_t v267 = v337[19];
      uint64_t v269 = v337[17];
      uint64_t v219 = v337[20];
      uint64_t v220 = v337[22];
      v281 = *(uint64_t (**)(uint64_t))(*(void *)v215 + 88);
      outlined copy of NavigationRequest.Action?(result, v334, v14, v15, v16, v17, v19, *(uint64_t *)&v336[16], v23);
      uint64_t v264 = v216;
      outlined copy of NavigationColumnState.ColumnContent(v284, v216, v217, v269, v218, v267, v219, v215);
      swift_retain();
      swift_bridgeObjectRetain();
      uint64_t v221 = swift_bridgeObjectRetain();
      uint64_t v222 = v281(v221);
      uint64_t result = swift_release();
      BOOL v200 = __OFADD__(v222, 1);
      uint64_t v223 = v222 + 1;
      if (v200)
      {
LABEL_140:
        __break(1u);
      }
      else
      {
        uint64_t v224 = *(void *)(v220 + 16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t result = outlined consume of NavigationColumnState.ColumnContent(v284, v264, v217, v269, v218, v267, v219, v215);
        uint64_t v228 = v223 + v224;
        if (!__OFADD__(v223, v224)) {
          goto LABEL_123;
        }
      }
      __break(1u);
      return result;
    default:
      uint64_t v260 = v22;
      uint64_t v262 = v24;
      uint64_t v254 = v25;
      uint64_t v256 = v20;
      uint64_t v265 = v21;
      uint64_t v268 = v18;
      uint64_t v28 = result;
      uint64_t v29 = v14;
      uint64_t v30 = v19;
      uint64_t v31 = v17;
      uint64_t v32 = v15;
      unsigned __int8 v33 = v23;
      memcpy(__dst, v337, 0x12BuLL);
      long long v288 = __dst[12];
      long long v289 = __dst[13];
      long long v290 = __dst[14];
      long long v291 = __dst[15];
      *(void *)&long long v292 = *(void *)&__dst[16];
      BYTE8(v292) = BYTE8(__dst[16]);
      *(void *)&long long v293 = *(void *)&__dst[17];
      outlined copy of NavigationRequest.Action?(v28, v334, v29, v32, v16, v31, v30, *(uint64_t *)&v336[16], v33);
      outlined retain of NavigationColumnState((uint64_t *)__dst);
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      unint64_t v34 = ((uint64_t (*)(long long *))v282)(&v288);
      swift_release();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v34 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v35 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v35 = *(void *)((v34 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      unsigned int v36 = v277;
      if (!v35)
      {
        swift_bridgeObjectRelease();
        outlined release of NavigationColumnState((uint64_t *)__dst);
        outlined consume of NavigationRequest.Action(v282, v278, v268, v265, v260, v262, v254, v256, 0);
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v288);
        outlined init with take of NavigationState.UpdateResult(&v288, v324);
        goto LABEL_86;
      }
      outlined release of NavigationColumnState((uint64_t *)__dst);
      outlined consume of NavigationRequest.Action(v282, v278, v268, v265, v260, v262, v254, v256, 0);
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)&v288);
      swift_bridgeObjectRetain();
      outlined init with take of NavigationState.UpdateResult(&v288, v323);
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      int v39 = 0;
      uint64_t v40 = 0;
      uint64_t v16 = v34;
LABEL_11:
      uint64_t v41 = v337;
      if (v337[21] < 0) {
        goto LABEL_59;
      }
      goto LABEL_55;
  }
}

uint64_t NavigationState.update(for:controllerCache:)(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v4 = v2;
  uint64_t v137 = v5;
  long long v6 = *(_OWORD *)(v3 + 112);
  long long v240 = *(_OWORD *)(v3 + 96);
  long long v241 = v6;
  uint64_t v242 = *(void *)(v3 + 128);
  long long v7 = *(_OWORD *)(v3 + 48);
  *(_OWORD *)&v237[32] = *(_OWORD *)(v3 + 32);
  *(_OWORD *)&v237[48] = v7;
  long long v8 = *(_OWORD *)(v3 + 80);
  long long v238 = *(_OWORD *)(v3 + 64);
  long long v239 = v8;
  long long v9 = *(_OWORD *)(v3 + 16);
  *(_OWORD *)int v237 = *(_OWORD *)v3;
  *(_OWORD *)&v237[16] = v9;
  char v10 = BYTE8(v241);
  unsigned __int8 v11 = v239;
  Swift::UInt v156 = *((void *)&v238 + 1);
  uint64_t v12 = v241;
  uint64_t v13 = *((void *)&v240 + 1) >> 62;
  uint64_t v138 = v1;
  if (!(*((void *)&v240 + 1) >> 62))
  {
    long long v32 = *(_OWORD *)&v237[8];
    long long v33 = *(_OWORD *)&v237[24];
    long long v34 = *(_OWORD *)&v237[40];
    uint64_t v35 = *(void *)&v237[56];
    Swift::UInt v166 = v239;
    uint64_t v36 = v238;
    goto LABEL_14;
  }
  uint64_t v14 = v1;
  if (v13 != 1)
  {
    long long v37 = *(_OWORD *)v237;
    long long v38 = *(_OWORD *)&v237[16];
    long long v39 = *(_OWORD *)&v237[32];
    long long v40 = *(_OWORD *)&v237[48];
    char v41 = v238;
    uint64_t v42 = (void *)(v1 + 80);
    if (*(void *)(v14 + 96) == 1)
    {
      *uint64_t v42 = 0;
      *(void *)(v14 + 88) = 0;
      *(void *)(v14 + 96) = 0;
      *(void *)(v14 + 104) = 768;
      *(_OWORD *)(v14 + 112) = 0u;
      *(_OWORD *)(v14 + 128) = 0u;
      *(_WORD *)(v14 + 144) = 768;
    }
    long long v190 = v37;
    long long v191 = v38;
    long long v192 = v39;
    long long v193 = v40;
    char v194 = v41;
    char v195 = v10;
    uint64_t result = (uint64_t)NavigationSplitViewState.update(for:)((uint64_t)&v190, __src);
    if (!v2) {
      goto LABEL_12;
    }
    return result;
  }
  Swift::UInt v166 = v239;
  if (BYTE8(v239) != 6)
  {
    uint64_t v36 = v238;
    uint64_t v35 = *(void *)&v237[56];
    long long v34 = *(_OWORD *)&v237[40];
    long long v33 = *(_OWORD *)&v237[24];
    unsigned __int8 v11 = BYTE8(v239);
    long long v32 = *(_OWORD *)&v237[8];
LABEL_14:
    char v139 = BYTE8(v241) ^ 1;
    char v43 = v35;
    long long v144 = (uint64_t (*)())*((void *)&v239 + 1);
    uint64_t v148 = v4;
    long long v44 = v240;
    char v163 = BYTE8(v241);
    uint64_t v176 = v241;
    long long v160 = v33;
    long long v149 = v32;
    long long v151 = v34;
    char v171 = v36;
    uint64_t v141 = *(void *)v237;
    if (v36 != 13)
    {
      if (v36 != 14) {
        goto LABEL_21;
      }
      char v43 = v34;
    }
    if (!(v11 & 0xFE | (unint64_t)(v43 & 1)))
    {
      Swift::UInt v45 = *((void *)&v238 + 1);
      unsigned __int8 v46 = v166;
      long long v47 = (uint64_t (*)())*((void *)&v239 + 1);
      if (!v13 || (Swift::UInt v45 = v166, v46 = BYTE8(v239), v47 = (uint64_t (*)())v240, BYTE8(v239) != 6))
      {
        if (v46 - 2 >= 4)
        {
          if (v46)
          {
            uint64_t v48 = 2;
          }
          else if (v47 == (uint64_t (*)())3)
          {
            uint64_t v48 = 1;
          }
          else
          {
            uint64_t v48 = 2;
          }
          uint64_t v49 = 0;
LABEL_22:
          id v170 = v47;
          long long v50 = *(_OWORD *)(v3 + 112);
          long long v225 = *(_OWORD *)(v3 + 96);
          long long v226 = v50;
          uint64_t v51 = *(void *)(v3 + 128);
          long long v52 = *(_OWORD *)(v3 + 48);
          long long v221 = *(_OWORD *)(v3 + 32);
          long long v222 = v52;
          long long v53 = *(_OWORD *)(v3 + 80);
          long long v223 = *(_OWORD *)(v3 + 64);
          long long v224 = v53;
          long long v54 = *(_OWORD *)(v3 + 16);
          v220[0] = *(_OWORD *)v3;
          v220[1] = v54;
          *(void *)&long long v227 = v51;
          *((void *)&v227 + 1) = v45;
          *(void *)&long long v228 = v48;
          *((void *)&v228 + 1) = v47;
          *(void *)&long long v229 = 0;
          *((void *)&v229 + 1) = v49;
          long long v230 = 0u;
          long long v231 = 0u;
          long long v232 = 0u;
          memset(v233, 0, 24);
          char v55 = -1;
          v233[24] = -1;
          v234[4] = v223;
          v234[5] = v53;
          v234[6] = v225;
          v234[7] = v226;
          v234[0] = v220[0];
          v234[1] = v54;
          v234[2] = v221;
          v234[3] = v222;
          v235[0] = 0u;
          *(_OWORD *)((char *)v235 + 9) = *(_OWORD *)&v233[9];
          v234[8] = v227;
          v234[9] = v228;
          v234[10] = v229;
          memset(&v234[11], 0, 48);
          destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v234, v36, *(void *)v237, v47);
          outlined init with take of NavigationState.UpdateResult(v234, v218);
          *(_DWORD *)&v218[256] = 0;
          *(_DWORD *)&v218[252] = 0;
          uint64_t v56 = v242;
          outlined retain of NavigationRequest.TargetedRequest((uint64_t)v220);
          outlined retain of NavigationRequest.TargetedRequest((uint64_t)v220);
          outlined retain of NavigationRequest((uint64_t)v237);
          outlined init with take of NavigationState.UpdateResult(v234, v219);
          unint64_t v147 = 0;
          Swift::UInt v57 = 0;
          char v169 = (uint64_t *)(v138 + 24);
          long long v58 = (unint64_t)v49;
          long long v59 = 0uLL;
          long long v60 = 0uLL;
          long long v61 = 0uLL;
          long long v62 = 0uLL;
          uint64_t v63 = v166;
          Swift::UInt v64 = v156;
          long long v65 = v144;
          unint64_t v67 = *((void *)&v44 + 1);
          long long v66 = (uint64_t (*)())v44;
          char v68 = v163;
          uint64_t v69 = v176;
          uint64_t v70 = v35;
          long long v71 = v160;
          long long v73 = v149;
          long long v72 = v151;
          char v74 = v171;
          uint64_t v75 = v141;
          while (1)
          {
            *(_OWORD *)&v210[8] = v73;
            *(_OWORD *)&v210[24] = v71;
            *(_OWORD *)&v210[40] = v72;
            *(void *)uint64_t v210 = v75;
            *(void *)&v210[56] = v70;
            LOBYTE(v211) = v74;
            *((void *)&v211 + 1) = v64;
            *(void *)&long long v212 = v63;
            *((void *)&v212 + 1) = v65;
            *(void *)&long long v213 = v66;
            *((void *)&v213 + 1) = v67;
            *(void *)&long long v214 = v69;
            BYTE8(v214) = v68 & 1;
            *(void *)&long long v215 = v56;
            *((void *)&v215 + 1) = v45;
            *(void *)&long long v216 = v48;
            Swift::UInt v76 = (Swift::UInt)v170;
            *((void *)&v216 + 1) = v170;
            *(void *)uint64_t v217 = v57;
            *(_OWORD *)&v217[8] = v58;
            *(_OWORD *)&v217[24] = v59;
            unint64_t v77 = v58;
            *(_OWORD *)&v217[40] = v60;
            Swift::UInt v172 = v45;
            *(_OWORD *)&v217[56] = v61;
            uint64_t v177 = v48;
            v217[88] = v55;
            Swift::UInt v78 = v57;
            unint64_t v164 = v58;
            *(_OWORD *)&v217[72] = v62;
            unint64_t v161 = v58 & 0xFFFFFFFFFFFFFFFELL;
            if ((v58 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
            {
              Swift::UInt v45 = v64;
              uint64_t v48 = v63;
              Swift::UInt v76 = (Swift::UInt)v65;
              Swift::UInt v78 = (Swift::UInt)v66;
              unint64_t v77 = v67;
            }
            unint64_t v79 = v77 >> 62;
            long long v174 = (uint64_t (*)())v57;
            uint64_t v167 = v63;
            if (v79)
            {
              Swift::UInt v80 = v172;
              if (v79 != 1) {
                goto LABEL_99;
              }
              Swift::UInt v45 = v48;
              LOBYTE(v48) = v76;
              if (v76 == 6) {
                goto LABEL_99;
              }
            }
            else
            {
              Swift::UInt v78 = v76;
              Swift::UInt v80 = v172;
            }
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v210);
            outlined release of NavigationState.UpdateResult((uint64_t)v219);
            Swift::UInt v157 = v64;
            unint64_t v154 = v67;
            if (!*(void *)(*v169 + 16)
              || (specialized __RawDictionaryStorage.find<A>(_:)(v45, v48, v78), (v81 & 1) == 0))
            {
              Swift::UInt v145 = (Swift::UInt)v65;
              uint64_t v82 = v80;
              uint64_t v83 = v177;
              uint64_t v84 = (uint64_t)v170;
              uint64_t v85 = (uint64_t)v174;
              unint64_t v86 = v164;
              if (v161 == 0x1FFFFFFFELL)
              {
                uint64_t v82 = v64;
                uint64_t v83 = v167;
                uint64_t v84 = v145;
                uint64_t v85 = (uint64_t)v66;
                unint64_t v86 = v154;
              }
              unint64_t v87 = v86 >> 62;
              if (v87)
              {
                if (v87 != 1) {
                  goto LABEL_99;
                }
                uint64_t v82 = v83;
                LOBYTE(v83) = v84;
                if (v84 == 6) {
                  goto LABEL_99;
                }
              }
              else
              {
                uint64_t v85 = v84;
              }
              outlined retain of NavigationRequest.TargetedRequest((uint64_t)v210);
              outlined release of NavigationState.UpdateResult((uint64_t)v219);
              uint64_t v88 = *(void *)v138;
              uint64_t v89 = *(void *)(v138 + 8);
              uint64_t v90 = (void *)MEMORY[0x1E4FBC860];
              unint64_t v152 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
              unint64_t v91 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v90);
              unint64_t v92 = specialized Dictionary.init(dictionaryLiteral:)(v90);
              swift_retain();
              swift_retain();
              swift_retain();
              unint64_t v93 = specialized Dictionary.init(dictionaryLiteral:)((uint64_t)v90);
              __src[0] = 0x100000001;
              LODWORD(__src[1]) = 0;
              __src[2] = v82;
              LOBYTE(__src[3]) = v83;
              memset(&__src[5], 0, 72);
              __src[4] = v85;
              __src[14] = 0xF000000000000007;
              memset(&__src[15], 0, 48);
              __src[22] = 0;
              __src[23] = 0;
              __src[21] = 0x8000000000000000;
              __src[24] = v152;
              __src[25] = v91;
              __src[26] = v92;
              __src[27] = 1;
              __src[28] = v93;
              __src[29] = v88;
              __src[30] = v89;
              __src[31] = v137;
              __src[32] = v82;
              LOBYTE(__src[33]) = v83;
              __src[34] = v85;
              memset(&__src[35], 0, 17);
              *(_WORD *)((char *)&__src[37] + 1) = 2;
              memcpy(v236, __src, 0x12BuLL);
              Swift::UInt v80 = v172;
              Swift::UInt v94 = v172;
              Swift::UInt v95 = v177;
              Swift::UInt v96 = (Swift::UInt)v170;
              Swift::UInt v97 = (Swift::UInt)v174;
              unint64_t v98 = v164;
              long long v65 = (uint64_t (*)())v145;
              unint64_t v67 = v154;
              if (v161 == 0x1FFFFFFFELL)
              {
                Swift::UInt v94 = v157;
                Swift::UInt v95 = v167;
                Swift::UInt v96 = v145;
                Swift::UInt v97 = (Swift::UInt)v66;
                unint64_t v98 = v154;
              }
              unint64_t v99 = v98 >> 62;
              if (v99)
              {
                if (v99 != 1) {
                  goto LABEL_99;
                }
                Swift::UInt v94 = v95;
                LOBYTE(v95) = v96;
                if (v96 == 6) {
                  goto LABEL_99;
                }
              }
              else
              {
                Swift::UInt v97 = v96;
              }
              outlined retain of NavigationRequest.TargetedRequest((uint64_t)v210);
              outlined release of NavigationState.UpdateResult((uint64_t)v219);
              outlined retain of NavigationColumnState(__src);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              __dst[0] = *v169;
              *char v169 = 0x8000000000000000;
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v236, v94, v95, v97, isUniquelyReferenced_nonNull_native);
              *char v169 = __dst[0];
              swift_bridgeObjectRelease();
              outlined release of NavigationColumnState(__src);
              Swift::UInt v64 = v157;
            }
            if (v161 == 0x1FFFFFFFELL)
            {
              Swift::UInt v80 = v64;
              Swift::UInt v101 = v167;
            }
            else
            {
              Swift::UInt v101 = v177;
            }
            long long v102 = v170;
            if (v161 == 0x1FFFFFFFELL)
            {
              long long v102 = v65;
              long long v103 = v66;
            }
            else
            {
              long long v103 = v174;
            }
            unint64_t v104 = v164;
            if (v161 == 0x1FFFFFFFELL) {
              unint64_t v104 = v67;
            }
            unint64_t v105 = v104 >> 62;
            if (v105)
            {
              if (v105 != 1) {
                goto LABEL_99;
              }
              Swift::UInt v80 = v101;
              LOBYTE(v101) = (_BYTE)v102;
              if (v102 == 6) {
                goto LABEL_99;
              }
            }
            else
            {
              long long v103 = v102;
            }
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v210);
            outlined release of NavigationState.UpdateResult((uint64_t)v219);
            char v106 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v208 = *v169;
            uint64_t v107 = v208;
            *char v169 = 0x8000000000000000;
            unint64_t v109 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v101, (Swift::UInt)v103);
            uint64_t v110 = *(void *)(v107 + 16);
            BOOL v111 = (v108 & 1) == 0;
            uint64_t v112 = v110 + v111;
            if (__OFADD__(v110, v111)) {
              break;
            }
            char v113 = v108;
            if (*(void *)(v107 + 24) >= v112)
            {
              Swift::UInt v116 = v172;
              if (v106)
              {
                if ((v108 & 1) == 0) {
                  goto LABEL_87;
                }
              }
              else
              {
                specialized _NativeDictionary.copy()();
                if ((v113 & 1) == 0) {
                  goto LABEL_87;
                }
              }
            }
            else
            {
              specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v112, v106);
              unint64_t v114 = specialized __RawDictionaryStorage.find<A>(_:)(v80, v101, (Swift::UInt)v103);
              if ((v113 & 1) != (v115 & 1)) {
                goto LABEL_100;
              }
              unint64_t v109 = v114;
              Swift::UInt v116 = v172;
              if ((v113 & 1) == 0)
              {
LABEL_87:
                __break(1u);
LABEL_88:
                ((void (*)(_OWORD *, void))v103)(v179, 0);
                outlined release of NavigationRequest.TargetedRequest((uint64_t)v220);
                outlined release of NavigationState.UpdateResult((uint64_t)v219);
                memcpy(v182, v218, sizeof(v182));
                return outlined release of NavigationState.UpdateResult((uint64_t)v182);
              }
            }
            uint64_t v117 = v208;
            memmove(__src, (const void *)(*(void *)(v208 + 56) + 304 * v109), 0x12BuLL);
            destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(__src, v118, v119, v120);
            outlined init with take of NavigationState.StackContent.Key?((uint64_t)__src, (uint64_t)__dst, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            if (v207 == 2) {
              __int16 v207 = 0;
            }
            outlined init with take of NavigationState.StackContent.Key?((uint64_t)__dst, (uint64_t)v188, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined init with take of NavigationState.StackContent.Key?((uint64_t)v188, (uint64_t)&v190, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            if (_s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)&v190) == 1)
            {
              specialized _NativeDictionary._delete(at:)(v109, v117);
            }
            else
            {
              outlined init with take of NavigationState.StackContent.Key?((uint64_t)v188, (uint64_t)v186, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
              memcpy((void *)(*(void *)(v117 + 56) + 304 * v109), v186, 0x12BuLL);
            }
            if (v161 == 0x1FFFFFFFELL) {
              Swift::UInt v116 = v157;
            }
            *char v169 = v117;
            if (v161 == 0x1FFFFFFFELL) {
              Swift::UInt v121 = v167;
            }
            else {
              Swift::UInt v121 = v177;
            }
            Swift::UInt v122 = (Swift::UInt)v170;
            if (v161 == 0x1FFFFFFFELL)
            {
              Swift::UInt v122 = (Swift::UInt)v65;
              Swift::UInt v123 = (Swift::UInt)v66;
            }
            else
            {
              Swift::UInt v123 = (Swift::UInt)v174;
            }
            unint64_t v124 = v164;
            if (v161 == 0x1FFFFFFFELL) {
              unint64_t v124 = v154;
            }
            unint64_t v125 = v124 >> 62;
            if (v125)
            {
              if (v125 != 1) {
                goto LABEL_99;
              }
              Swift::UInt v116 = v121;
              LOBYTE(v121) = v122;
              if (v122 == 6) {
                goto LABEL_99;
              }
            }
            else
            {
              Swift::UInt v123 = v122;
            }
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v210);
            outlined release of NavigationState.UpdateResult((uint64_t)v219);
            v183[12] = *(_OWORD *)&v217[32];
            v183[13] = *(_OWORD *)&v217[48];
            v184[0] = *(_OWORD *)&v217[64];
            *(_OWORD *)((char *)v184 + 9) = *(_OWORD *)&v217[73];
            v183[8] = v215;
            v183[9] = v216;
            v183[10] = *(_OWORD *)v217;
            v183[11] = *(_OWORD *)&v217[16];
            v183[4] = v211;
            v183[5] = v212;
            v183[6] = v213;
            v183[7] = v214;
            v183[0] = *(_OWORD *)v210;
            v183[1] = *(_OWORD *)&v210[16];
            v183[2] = *(_OWORD *)&v210[32];
            v183[3] = *(_OWORD *)&v210[48];
            long long v103 = specialized Dictionary._Variant.subscript.modify(v179, v116, v121, v123);
            outlined init with take of NavigationState.StackContent.Key?(v126, (uint64_t)v185, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            outlined init with take of NavigationState.StackContent.Key?((uint64_t)v185, (uint64_t)v186, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
            if (_s7SwiftUI21NavigationColumnStateVSgWOg((uint64_t)v186) == 1) {
              goto LABEL_98;
            }
            unint64_t v127 = NavigationColumnState.update(for:shouldAnimate:splitViewState:)(v187, v183, v139, v138 + 80);
            if (v148) {
              goto LABEL_88;
            }
            unint64_t v128 = v127;
            unint64_t v129 = HIDWORD(v127);
            ((void (*)(_OWORD *, void))v103)(v179, 0);
            outlined release of NavigationState.UpdateResult((uint64_t)v219);
            outlined init with take of NavigationState.UpdateResult(v187, v180);
            outlined init with take of NavigationState.UpdateResult((long long *)v218, v181);
            outlined release of NavigationState.UpdateResult((uint64_t)v181);
            outlined init with take of NavigationState.UpdateResult(v180, v218);
            *(void *)&v218[252] = v128;
            unsigned int v130 = v147 + v128;
            unsigned int v131 = HIDWORD(v147) + v129;
            outlined init with take of NavigationState.UpdateResult(v180, v182);
            if (_s7SwiftUI15NavigationStateV12UpdateResultOWOg((uint64_t)v182))
            {
              outlined release of NavigationRequest.TargetedRequest((uint64_t)v220);
              uint64_t result = outlined release of NavigationState.UpdateResult((uint64_t)v180);
              unsigned int v136 = *(_DWORD *)(v138 + 20) + v131;
              *(_DWORD *)(v138 + 16) += v130;
              *(_DWORD *)(v138 + 20) = v136;
              return result;
            }
            unint64_t v147 = __PAIR64__(v131, v130);
            uint64_t v148 = 0;
            long long v155 = *(_OWORD *)&v182[200];
            long long v158 = *(_OWORD *)&v182[184];
            long long v142 = *(_OWORD *)&v182[232];
            long long v143 = *(_OWORD *)&v182[216];
            char v168 = v182[248];
            uint64_t v178 = *(void *)&v182[144];
            id v170 = *(uint64_t (**)())&v182[152];
            Swift::UInt v175 = *(void *)&v182[160];
            long long v140 = *(_OWORD *)&v182[168];
            Swift::UInt v173 = *(void *)&v182[136];
            uint64_t v146 = *(void *)&v182[128];
            char v165 = v182[120];
            Swift::UInt v64 = *(void *)&v182[72];
            uint64_t v63 = *(void *)&v182[80];
            long long v65 = *(uint64_t (**)())&v182[88];
            long long v66 = *(uint64_t (**)())&v182[96];
            unint64_t v67 = *(void *)&v182[104];
            uint64_t v132 = *(void *)&v182[112];
            long long v162 = *(_OWORD *)&v182[24];
            long long v150 = *(_OWORD *)&v182[8];
            long long v153 = *(_OWORD *)&v182[40];
            uint64_t v133 = *(void *)v182;
            uint64_t v134 = *(void *)&v182[56];
            char v135 = v182[64];
            outlined init with take of NavigationState.UpdateResult(v180, v179);
            outlined retain of NavigationRequest.TargetedRequest((uint64_t)v179);
            outlined init with take of NavigationState.UpdateResult(v180, v219);
            long long v73 = v150;
            long long v72 = v153;
            char v74 = v135;
            uint64_t v75 = v133;
            long long v59 = v158;
            long long v71 = v162;
            uint64_t v70 = v134;
            uint64_t v69 = v132;
            char v68 = v165;
            long long v60 = v155;
            long long v62 = v142;
            long long v61 = v143;
            long long v58 = v140;
            Swift::UInt v57 = v175;
            Swift::UInt v45 = v173;
            char v55 = v168;
            uint64_t v56 = v146;
            uint64_t v48 = v178;
          }
          __break(1u);
LABEL_98:
          __break(1u);
LABEL_99:
          _assertionFailure(_:_:file:line:flags:)();
          __break(1u);
LABEL_100:
          uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
          __break(1u);
          return result;
        }
      }
    }
LABEL_21:
    Swift::UInt v45 = 0;
    uint64_t v48 = 0;
    long long v47 = 0;
    uint64_t v49 = 0x1FFFFFFFELL;
    goto LABEL_22;
  }
  uint64_t v15 = v240;
  uint64_t v16 = *((void *)&v239 + 1);
  long long v17 = *(_OWORD *)v237;
  long long v18 = *(_OWORD *)&v237[16];
  long long v19 = *(_OWORD *)&v237[32];
  long long v20 = *(_OWORD *)&v237[48];
  char v21 = v238;
  char v22 = BYTE8(v240) & 1;
  if (!*(void *)(v1 + 40))
  {
    uint64_t v23 = MEMORY[0x1E4FBC860];
    unint64_t v159 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
    unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(v23);
    unint64_t v25 = specialized Dictionary.init(dictionaryLiteral:)(v23);
    uint64_t v26 = v23;
    uint64_t v14 = v1;
    unint64_t v27 = specialized Dictionary.init(dictionaryLiteral:)(v26);
    long long v20 = *(_OWORD *)&v237[48];
    long long v19 = *(_OWORD *)&v237[32];
    long long v18 = *(_OWORD *)&v237[16];
    long long v17 = *(_OWORD *)v237;
    uint64_t v12 = v241;
    char v10 = BYTE8(v241);
    *(void *)(v1 + 32) = 0;
    *(void *)(v1 + 40) = v159;
    *(void *)(v1 + 48) = v24;
    *(void *)(v1 + 56) = v25;
    *(void *)(v1 + 64) = v27;
    *(_DWORD *)(v1 + 72) = 0;
  }
  long long v190 = v17;
  long long v191 = v18;
  long long v192 = v19;
  long long v193 = v20;
  char v194 = v21;
  Swift::UInt v196 = v156;
  Swift::UInt v197 = v166;
  uint64_t v198 = v16;
  uint64_t v199 = v15;
  char v200 = v22;
  uint64_t v201 = v12;
  char v202 = v10;
  Swift::UInt v203 = v166;
  uint64_t v204 = v16;
  uint64_t v205 = v15;
  __int16 v28 = *(_WORD *)(v14 + 144);
  long long v29 = *(_OWORD *)(v14 + 96);
  v188[0] = *(_OWORD *)(v14 + 80);
  v188[1] = v29;
  long long v30 = *(_OWORD *)(v14 + 128);
  v188[2] = *(_OWORD *)(v14 + 112);
  v188[3] = v30;
  __int16 v189 = v28;
  uint64_t result = (uint64_t)NavigationListState.update(for:splitViewState:)((uint64_t)&v190, (uint64_t)v188, __src);
  if (!v2)
  {
LABEL_12:
    memcpy(__dst, __src, 0x11CuLL);
    uint64_t result = outlined release of NavigationState.RequestResults((uint64_t)__dst);
    *(int32x2_t *)(v14 + 16) = vadd_s32(*(int32x2_t *)(v14 + 16), *(int32x2_t *)((char *)&__dst[34] + 4));
  }
  return result;
}

uint64_t outlined init with take of NavigationState.StackContent.Key?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for Binding<NavigationSplitViewColumn>(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

void type metadata accessor for Binding<NavigationSplitViewColumn>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

_OWORD *outlined init with take of NavigationState.UpdateResult(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[1];
  long long v4 = a1[3];
  a2[2] = a1[2];
  a2[3] = v4;
  *a2 = v2;
  a2[1] = v3;
  long long v5 = a1[4];
  long long v6 = a1[5];
  long long v7 = a1[7];
  a2[6] = a1[6];
  a2[7] = v7;
  a2[4] = v5;
  a2[5] = v6;
  long long v8 = a1[8];
  long long v9 = a1[9];
  long long v10 = a1[11];
  a2[10] = a1[10];
  a2[11] = v10;
  a2[8] = v8;
  a2[9] = v9;
  long long v11 = a1[12];
  long long v12 = a1[13];
  long long v13 = a1[14];
  *(_OWORD *)((char *)a2 + 233) = *(long long *)((char *)a1 + 233);
  a2[13] = v12;
  a2[14] = v13;
  a2[12] = v11;
  return a2;
}

uint64_t outlined release of NavigationState.UpdateResult(uint64_t a1)
{
  long long v3 = *(_OWORD *)(a1 + 208);
  outlined consume of NavigationState.UpdateResult(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(_OWORD *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    v3,
    *((uint64_t *)&v3 + 1),
    *(void *)(a1 + 224),
    *(void *)(a1 + 232),
    *(void *)(a1 + 240),
    *(unsigned char *)(a1 + 248));
  return a1;
}

uint64_t outlined consume of NavigationRequest.Action?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined consume of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t outlined consume of NavigationState.UpdateResult(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, unint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,unsigned __int8 a32)
{
  if (a14 >> 2 != 0x7FFFFFFF)
  {
    outlined consume of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
    swift_release();
    return outlined consume of NavigationRequest.Action?(a24, a25, a26, a27, a28, a29, a30, a31, a32);
  }
  return result;
}

uint64_t outlined consume of NavigationRequest.Action(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
    case 11:
      goto LABEL_13;
    case 1:
      swift_release();
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_13;
    case 2:
    case 6:
    case 17:
      swift_release();
      goto LABEL_11;
    case 3:
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 4:
    case 5:
LABEL_11:
      swift_release();
      goto LABEL_13;
    case 10:
      swift_release();
      swift_release();
      goto LABEL_13;
    case 12:
    case 13:
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(a3, a4);
      goto LABEL_13;
    case 14:
      swift_release();
      swift_release();
      uint64_t v13 = a3;
      uint64_t v14 = a4;
      goto LABEL_17;
    case 18:
      swift_release();
      swift_release();
      outlined consume of Text.LineStyle?(a4, a5);
LABEL_13:
      uint64_t result = swift_release();
      break;
    case 19:
      swift_release();
      uint64_t v13 = a2;
      uint64_t v14 = a3;
LABEL_17:
      uint64_t result = outlined consume of Text.LineStyle?(v13, v14);
      break;
    case 21:
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(result);
      uint64_t result = outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t outlined retain of NavigationRequest.TargetedRequest(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 208);
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v6 = *(void *)(a1 + 224);
  uint64_t v7 = *(void *)(a1 + 232);
  uint64_t v8 = *(void *)(a1 + 240);
  unsigned __int8 v9 = *(unsigned char *)(a1 + 248);
  outlined copy of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_retain();
  outlined copy of NavigationRequest.Action?(v11, v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t outlined copy of NavigationRequest.Action?(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  if (a9 != 255) {
    return outlined copy of NavigationRequest.Action(result, a2, a3, a4, a5, a6, a7, a8, a9);
  }
  return result;
}

uint64_t outlined retain of NavigationRequest(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of NavigationRequest.Action(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  switch(a9)
  {
    case 0:
    case 11:
      goto LABEL_13;
    case 1:
      swift_retain();
      swift_retain();
      swift_retain();
      swift_retain();
      goto LABEL_13;
    case 2:
      swift_retain();
      swift_retain();
      goto LABEL_13;
    case 3:
      swift_bridgeObjectRetain();
      return swift_bridgeObjectRetain();
    case 4:
    case 5:
      goto LABEL_11;
    case 6:
    case 10:
    case 17:
      swift_retain();
LABEL_11:
      swift_retain();
      goto LABEL_13;
    case 12:
    case 13:
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(a3, a4);
      goto LABEL_13;
    case 14:
      swift_retain();
      swift_retain();
      uint64_t v13 = a3;
      uint64_t v14 = a4;
      goto LABEL_17;
    case 18:
      swift_retain();
      swift_retain();
      outlined copy of Text.LineStyle?(a4, a5);
LABEL_13:
      uint64_t result = swift_retain();
      break;
    case 19:
      swift_retain();
      uint64_t v13 = a2;
      uint64_t v14 = a3;
LABEL_17:
      uint64_t result = outlined copy of Text.LineStyle?(v13, v14);
      break;
    case 21:
      outlined copy of AppIntentExecutor?(result);
      uint64_t result = outlined copy of AppIntentExecutor?(a3);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t _s7SwiftUI21NavigationColumnStateVSgWOg(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 192);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void Dictionary._Variant.subscript.modifyspecialized (uint64_t a1)
{
  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 64);
  (*(void (**)(void))(*(void *)a1 + 72))();
  v2(v1, 0);

  free(v1);
}

{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, void);
  uint64_t vars8;

  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 40;
  uint64_t v3 = *(void (**)(uint64_t, void))(*(void *)a1 + 104);
  (*(void (**)(void))(*(void *)a1 + 112))();
  outlined destroy of ToolbarPlacement.Role((uint64_t)v1);
  v3(v2, 0);

  free(v1);
}

{
  void *v1;
  void (*v2)(void *, void);
  uint64_t vars8;

  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 80);
  (*(void (**)(void))(*(void *)a1 + 88))();
  outlined consume of TabCustomizationID.Base();
  v2(v1, 0);

  free(v1);
}

{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, void);
  uint64_t v4;
  uint64_t vars8;

  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 40;
  uint64_t v3 = *(void (**)(uint64_t, void))(*(void *)a1 + 112);
  uint64_t v4 = *(void *)(*(void *)a1 + 104);
  (*(void (**)(void))(*(void *)a1 + 120))();
  outlined retain of TableColumnCustomizationID.Base(v4, (void (*)(void, void, void, void, void))outlined consume of TableColumnCustomizationID.Base);
  v3(v2, 0);

  free(v1);
}

{
  void *v1;
  void (*v2)(void *, void);
  uint64_t vars8;

  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void (**)(void *, void))(*(void *)a1 + 72);
  (*(void (**)(void))(*(void *)a1 + 80))();
  swift_bridgeObjectRelease();
  v2(v1, 0);

  free(v1);
}

{
  void *v1;
  uint64_t v2;
  void (*v3)(uint64_t, void);
  uint64_t vars8;

  unint64_t v1 = *(void **)a1;
  uint64_t v2 = *(void *)a1 + 128;
  uint64_t v3 = *(void (**)(uint64_t, void))(*(void *)a1 + 192);
  (*(void (**)(void))(*(void *)a1 + 200))();
  outlined destroy of IdentifiedDocumentGroupConfiguration((uint64_t)v1);
  v3(v2, 0);

  free(v1);
}

void _NativeDictionary.subscript.modifyspecialized (void *a1, char a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a1 + 608;
  uint64_t v5 = *a1 + 912;
  uint64_t v6 = *a1 + 1216;
  uint64_t v7 = (const void *)(*a1 + 1520);
  outlined init with take of NavigationState.StackContent.Key?(v4, v6, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  outlined init with take of NavigationState.StackContent.Key?(v6, v5, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  int v8 = _s7SwiftUI21NavigationColumnStateVSgWOg(v5);
  char v9 = *(unsigned char *)(v3 + 300);
  if (a2)
  {
    if (v8 != 1)
    {
      long long v10 = *(void ***)(v3 + 1840);
      outlined init with take of NavigationState.StackContent.Key?(v6, (uint64_t)v7, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
      memcpy((void *)v3, v7, 0x12BuLL);
      uint64_t v11 = *v10;
      unint64_t v12 = *(void *)(v3 + 1848);
      if ((v9 & 1) == 0)
      {
        uint64_t v13 = *(void *)(v3 + 1832);
        uint64_t v14 = *(void *)(v3 + 1824);
        char v15 = *(unsigned char *)(v3 + 299);
        uint64_t v16 = (void *)v3;
LABEL_12:
        specialized _NativeDictionary._insert(at:key:value:)(v12, v14, v15, v13, v16, v11);
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else if (v8 != 1)
  {
    long long v17 = *(void ***)(v3 + 1840);
    outlined init with take of NavigationState.StackContent.Key?(v6, (uint64_t)v7, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
    memcpy((void *)(v3 + 304), v7, 0x12BuLL);
    uint64_t v11 = *v17;
    unint64_t v12 = *(void *)(v3 + 1848);
    if ((v9 & 1) == 0)
    {
      uint64_t v13 = *(void *)(v3 + 1832);
      uint64_t v14 = *(void *)(v3 + 1824);
      char v15 = *(unsigned char *)(v3 + 299);
      uint64_t v16 = (void *)(v3 + 304);
      goto LABEL_12;
    }
LABEL_10:
    memmove((void *)(v11[7] + 304 * v12), v7, 0x12BuLL);
    goto LABEL_13;
  }
  if (*(unsigned char *)(v3 + 300)) {
    specialized _NativeDictionary._delete(at:)(*(void *)(v3 + 1848), **(void **)(v3 + 1840));
  }
LABEL_13:
  outlined init with take of NavigationState.StackContent.Key?(v4, (uint64_t)v7, &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  outlined retain of NavigationColumnState?(v6, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of NavigationColumnState?);
  outlined retain of NavigationColumnState?((uint64_t)v7, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of NavigationColumnState?);

  free((void *)v3);
}

uint64_t outlined retain of NavigationColumnState?(uint64_t a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))
{
  long long v6 = *(_OWORD *)(a1 + 256);
  long long v7 = *(_OWORD *)(a1 + 272);
  long long v4 = *(_OWORD *)(a1 + 224);
  long long v5 = *(_OWORD *)(a1 + 240);
  a2(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80), *(void *)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 112), *(void *)(a1 + 120), *(void *)(a1 + 128), *(void *)(a1 + 136), *(void *)(a1 + 144),
    *(void *)(a1 + 152),
    *(void *)(a1 + 160),
    *(void *)(a1 + 168),
    *(void *)(a1 + 176),
    *(void *)(a1 + 184),
    *(void *)(a1 + 192),
    *(void *)(a1 + 200),
    *(void *)(a1 + 208),
    *(void *)(a1 + 216),
    v4,
    *((void *)&v4 + 1),
    v5,
    *((void *)&v5 + 1),
    v6,
    *((void *)&v6 + 1),
    v7,
    *((void *)&v7 + 1),
    *(void *)(a1 + 288),
    *(unsigned __int16 *)(a1 + 296) | (*(unsigned __int8 *)(a1 + 298) << 16));
  return a1;
}

uint64_t Dictionary._Variant.asNative.modifyspecialized (uint64_t result)
{
  **(void **)(result + 8) = *(void *)result;
  return result;
}

uint64_t outlined copy of NavigationColumnState?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a25)
  {
    outlined copy of NavigationListState?(a6, a7);
    outlined copy of Binding<AnyNavigationPath>?(a12, a13);
    outlined copy of NavigationColumnState.ColumnContent(a15, a16, a17, a18, a19, a20, a21, a22);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t (*specialized Dictionary._Variant.subscript.modify(void *a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4))()
{
  int v8 = malloc(0x50uLL);
  *a1 = v8;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v8[8] = specialized Dictionary._Variant.asNative.modify(v8);
  v8[9] = specialized _NativeDictionary.subscript.modify(v8 + 4, a2, a3, a4, isUniquelyReferenced_nonNull_native);
  return Dictionary._Variant.subscript.modifyspecialized ;
}

void (*specialized _NativeDictionary.subscript.modify(void *a1, Swift::UInt a2, unsigned __int8 a3, Swift::UInt a4, char a5))(void *a1, char a2)
{
  long long v6 = v5;
  unint64_t v12 = malloc(0x740uLL);
  *a1 = v12;
  v12[230] = v5;
  v12[229] = a4;
  *((unsigned char *)v12 + 299) = a3;
  v12[228] = a2;
  uint64_t v13 = *v5;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  *((unsigned char *)v12 + 300) = v14 & 1;
  uint64_t v16 = *(void *)(v13 + 16);
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
    __break(1u);
    goto LABEL_14;
  }
  char v19 = v14;
  uint64_t v20 = *(void *)(v13 + 24);
  if (v20 < v18 || (a5 & 1) == 0)
  {
    if (v20 >= v18 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_9;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a5 & 1);
    unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
    if ((v19 & 1) == (v22 & 1))
    {
      unint64_t v15 = v21;
      goto LABEL_9;
    }
LABEL_14:
    uint64_t result = (void (*)(void *, char))KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_9:
  v12[231] = v15;
  if (v19)
  {
    memmove(v12 + 114, (const void *)(*(void *)(*v6 + 56) + 304 * v15), 0x12BuLL);
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v12 + 114, v23, v24, v25);
  }
  else
  {
    _s7SwiftUI21NavigationColumnStateVSgWOi0_((_OWORD *)v12 + 57);
  }
  outlined init with take of NavigationState.StackContent.Key?((uint64_t)(v12 + 114), (uint64_t)(v12 + 76), &lazy cache variable for type metadata for NavigationColumnState?, (uint64_t)&type metadata for NavigationColumnState);
  return _NativeDictionary.subscript.modifyspecialized ;
}

uint64_t (*specialized Dictionary._Variant.asNative.modify(void *a1))()
{
  *a1 = *v1;
  a1[1] = v1;
  *unint64_t v1 = 0x8000000000000000;
  return Dictionary._Variant.asNative.modifyspecialized ;
}

uint64_t _s7SwiftUI15NavigationStateV12UpdateResultOWOg(uint64_t a1)
{
  if ((*(void *)(a1 + 104) >> 1) > 0x80000000) {
    return -(*(void *)(a1 + 104) >> 1);
  }
  else {
    return 0;
  }
}

uint64_t outlined release of NavigationState.RequestResults(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 104);
  long long v22 = *(_OWORD *)(a1 + 88);
  long long v19 = *(_OWORD *)(a1 + 136);
  long long v20 = *(_OWORD *)(a1 + 120);
  long long v17 = *(_OWORD *)(a1 + 168);
  long long v18 = *(_OWORD *)(a1 + 152);
  long long v15 = *(_OWORD *)(a1 + 200);
  long long v16 = *(_OWORD *)(a1 + 184);
  long long v13 = *(_OWORD *)(a1 + 232);
  long long v14 = *(_OWORD *)(a1 + 216);
  long long v12 = *(_OWORD *)(a1 + 248);
  uint64_t v9 = *(void *)(a1 + 264);
  unsigned __int8 v10 = *(unsigned char *)(a1 + 272);
  outlined consume of ResolvedNavigationDestinations.ChangeRequest(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
  outlined consume of NavigationState.UpdateResult(v23, v2, v3, v4, v5, v6, v7, v8, v22, *((uint64_t *)&v22 + 1), v21, *((uint64_t *)&v21 + 1), v20, *((unint64_t *)&v20 + 1), v19, *((uint64_t *)&v19 + 1), v18, *((uint64_t *)&v18 + 1), v17,
    *((uint64_t *)&v17 + 1),
    v16,
    *((uint64_t *)&v16 + 1),
    v15,
    *((uint64_t *)&v15 + 1),
    v14,
    *((uint64_t *)&v14 + 1),
    v13,
    *((uint64_t *)&v13 + 1),
    v12,
    *((uint64_t *)&v12 + 1),
    v9,
    v10);
  return a1;
}

uint64_t outlined consume of ResolvedNavigationDestinations.ChangeRequest(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t NavigationColumnState.updateAnimationState(requestAnimation:disablesAnimations:seedDelta:)(uint64_t result, unsigned __int8 a2, uint64_t a3)
{
  __int16 v4 = *(_WORD *)(v3 + 297);
  if (v4 == 2) {
    goto LABEL_15;
  }
  uint64_t v6 = result;
  if ((a2 & 1) != 0 && a3)
  {
    ++*(_DWORD *)(v3 + 280);
LABEL_9:
    __int16 v7 = 1;
    goto LABEL_10;
  }
  __int16 v7 = v4 & 1;
  if (result && (a2 & 1) == 0)
  {
    int v8 = *(_DWORD *)(v3 + 284);
    BOOL v9 = __CFADD__(v8, 1);
    int v10 = v8 + 1;
    if (!v9)
    {
      *(_DWORD *)(v3 + 284) = v10;
      swift_retain();
      uint64_t result = swift_release();
      *(void *)(v3 + 288) = v6;
      goto LABEL_9;
    }
    __break(1u);
LABEL_15:
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
LABEL_10:
  if ((a2 | ((unsigned __int16)(v4 & 0x100) >> 8))) {
    __int16 v11 = 256;
  }
  else {
    __int16 v11 = 0;
  }
  *(_WORD *)(v3 + 297) = v11 | v7;
  return result;
}

uint64_t outlined release of NavigationRequest.TargetedRequest(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 192);
  uint64_t v11 = *(void *)(a1 + 184);
  uint64_t v3 = *(void *)(a1 + 200);
  uint64_t v4 = *(void *)(a1 + 208);
  uint64_t v5 = *(void *)(a1 + 216);
  uint64_t v6 = *(void *)(a1 + 224);
  uint64_t v7 = *(void *)(a1 + 232);
  uint64_t v8 = *(void *)(a1 + 240);
  unsigned __int8 v9 = *(unsigned char *)(a1 + 248);
  outlined consume of NavigationRequest.Action(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), *(void *)(a1 + 40), *(void *)(a1 + 48), *(void *)(a1 + 56), *(unsigned char *)(a1 + 64));
  swift_release();
  outlined consume of NavigationRequest.Action?(v11, v2, v3, v4, v5, v6, v7, v8, v9);
  return a1;
}

uint64_t outlined copy of ResolvedNavigationDestinations.ChangeRequest(uint64_t a1, uint64_t a2, char a3)
{
  if (!a3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

void *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(void *a1, Swift::UInt a2, char a3, Swift::UInt a4, char a5)
{
  uint64_t v6 = (void **)v5;
  long long v12 = (void *)*v5;
  unint64_t v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
  uint64_t v15 = v12[2];
  BOOL v16 = (v13 & 1) == 0;
  uint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v18 = v13;
  uint64_t v19 = v12[3];
  if (v19 < v17 || (a5 & 1) == 0)
  {
    if (v19 >= v17 && (a5 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a5 & 1);
    unint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3, a4);
    if ((v18 & 1) == (v24 & 1))
    {
      unint64_t v14 = v23;
      long long v20 = *v6;
      if (v18) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    uint64_t result = (void *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  long long v20 = *v6;
  if (v18)
  {
LABEL_8:
    uint64_t v21 = v20[7] + 304 * v14;
    return (void *)outlined assign with take of NavigationColumnState((uint64_t)a1, v21);
  }
LABEL_13:

  return specialized _NativeDictionary._insert(at:key:value:)(v14, a2, a3, a4, a1, v20);
}

void *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, char a3, uint64_t a4, void *__src, void *a6)
{
  a6[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v7 = a6[6] + 24 * a1;
  *(void *)uint64_t v7 = a2;
  *(unsigned char *)(v7 + 8) = a3;
  *(void *)(v7 + 16) = a4;
  uint64_t result = memcpy((void *)(a6[7] + 304 * a1), __src, 0x12BuLL);
  uint64_t v9 = a6[2];
  BOOL v10 = __OFADD__(v9, 1);
  uint64_t v11 = v9 + 1;
  if (v10) {
    __break(1u);
  }
  else {
    a6[2] = v11;
  }
  return result;
}

void *NavigationSplitViewState.update(for:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  int v5 = *(unsigned __int8 *)(a1 + 64);
  if (v5 == 21)
  {
    uint64_t v7 = *(void *)(a1 + 24);
    uint64_t v8 = *(void *)(v2 + 32);
    outlined copy of AppIntentExecutor?(*(void *)(a1 + 16));
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v8);
    *(void *)(v2 + 32) = v4;
    *(void *)(v2 + 40) = v7;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)__src);
LABEL_9:
    outlined init with take of NavigationState.UpdateResult(__src, &v18);
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    long long v12 = xmmword_18834FC50;
    char v9 = 2;
    goto LABEL_10;
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v5 == 5)
  {
    *(void *)&long long v18 = *(void *)a1;
    *((void *)&v18 + 1) = v6;
    LOBYTE(v16[0]) = BYTE1(v4);
    char v19 = v4;
    NavigationSplitViewState.updateRequiredCompactColumn(_:newValue:)((uint64_t *)&v18, (unsigned __int8 *)v16, __src);
    goto LABEL_7;
  }
  if (v5 != 4)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)__src);
    goto LABEL_9;
  }
  *(void *)&long long v18 = *(void *)a1;
  *((void *)&v18 + 1) = v6;
  LOBYTE(v16[0]) = BYTE1(v4);
  char v19 = v4;
  NavigationSplitViewState.updatePreferredCompactColumn(_:newValue:)((uint64_t *)&v18, (unsigned __int8 *)v16, __src);
LABEL_7:
  long long v15 = __src[0];
  char v9 = __src[1];
  outlined init with take of NavigationState.UpdateResult((long long *)((char *)&__src[1] + 8), v16);
  unsigned int v10 = DWORD1(__src[17]);
  unsigned int v11 = DWORD2(__src[17]);
  outlined init with take of NavigationState.UpdateResult(v16, &v18);
  long long v12 = v15;
LABEL_10:
  __src[0] = v12;
  LOBYTE(__src[1]) = v9;
  outlined init with take of NavigationState.UpdateResult(&v18, (long long *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = __PAIR64__(v11, v10);
  unsigned int v13 = *(_DWORD *)(v2 + 4) + v11;
  *(_DWORD *)v2 += v10;
  *(_DWORD *)(v2 + 4) = v13;
  return memcpy(a2, __src, 0x11CuLL);
}

uint64_t NavigationColumnState.setSelection(from:splitViewState:)@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  unint64_t v4 = *(void *)(a1 + 168);
  if (v4 >> 1 == 0xFFFFFFFF)
  {
    int v5 = (uint64_t *)(a1 + 112);
    uint64_t v6 = (uint64_t *)(a1 + 72);
    unint64_t v4 = *(void *)(a1 + 104);
    uint64_t v7 = (uint64_t *)(a1 + 96);
    uint64_t v8 = (uint64_t *)(a1 + 88);
    char v9 = (uint64_t *)(a1 + 80);
  }
  else
  {
    uint64_t v6 = (uint64_t *)(a1 + 136);
    char v9 = (uint64_t *)(a1 + 144);
    uint64_t v8 = (uint64_t *)(a1 + 152);
    uint64_t v7 = (uint64_t *)(a1 + 160);
    int v5 = (uint64_t *)(a1 + 176);
  }
  if (v4 >> 62 == 1)
  {
    uint64_t v10 = *(void *)(a1 + 184);
    uint64_t v11 = *(void *)(a1 + 192);
    uint64_t v12 = *(void *)(a1 + 200);
    uint64_t v13 = *(void *)(a1 + 240);
    int v14 = *(unsigned __int8 *)(a1 + 248);
    char v15 = *(unsigned char *)(a1 + 120);
    long long v16 = *a2;
    long long v17 = a2[1];
    long long v18 = a2[2];
    long long v19 = a2[3];
    __int16 v20 = *((_WORD *)a2 + 32);
    uint64_t v21 = v10;
    uint64_t v22 = *v5;
    uint64_t v23 = v11;
    uint64_t v68 = *(void *)(a1 + 208);
    uint64_t v69 = v12;
    uint64_t v24 = *v7;
    uint64_t v76 = *(void *)(a1 + 216);
    uint64_t v77 = v68;
    uint64_t v66 = *(void *)(a1 + 224);
    uint64_t v67 = v76;
    uint64_t v25 = *v8;
    uint64_t v75 = v66;
    uint64_t v70 = *(void *)(a1 + 232);
    uint64_t v72 = v13;
    uint64_t v73 = v70;
    uint64_t v26 = *v9;
    char v74 = *(unsigned char *)(a1 + 248);
    uint64_t v27 = *v6;
    if (v14 == 255)
    {
      uint64_t v49 = *(void *)a1;
      uint64_t v28 = *(void *)a1;
      uint64_t v51 = *(void *)(a1 + 8);
      uint64_t v91 = *(void *)(a1 + 16);
      char v63 = v15;
      uint64_t v53 = v26;
      char v74 = *(unsigned char *)(a1 + 64);
      uint64_t v76 = *(void *)(a1 + 32);
      uint64_t v77 = *(void *)(a1 + 24);
      uint64_t v75 = *(void *)(a1 + 40);
      uint64_t v72 = *(void *)(a1 + 56);
      uint64_t v73 = *(void *)(a1 + 48);
      uint64_t v65 = v3;
      uint64_t v29 = v13;
      uint64_t v30 = v10;
      char v31 = v4;
      uint64_t v32 = v11;
      long long v59 = v17;
      long long v61 = v16;
      long long v55 = v19;
      long long v57 = v18;
      unint64_t v4 = v22;
      uint64_t v33 = v24;
      uint64_t v34 = v25;
      uint64_t v35 = v27;
      outlined copy of NavigationRequest.Action(v28, v51, v91, v77, v76, v75, v73, v72, v74);
      uint64_t v27 = v35;
      uint64_t v25 = v34;
      uint64_t v24 = v33;
      uint64_t v22 = v4;
      long long v19 = v55;
      long long v18 = v57;
      long long v17 = v59;
      long long v16 = v61;
      char v15 = v63;
      LOBYTE(v14) = -1;
      uint64_t v13 = v29;
      uint64_t v3 = v65;
      uint64_t v21 = v49;
      uint64_t v11 = v32;
      LOBYTE(v4) = v31;
      uint64_t v23 = v51;
      uint64_t v26 = v53;
      uint64_t v10 = v30;
      uint64_t v12 = v91;
    }
    uint64_t v36 = *(void *)(v3 + 48);
    uint64_t v91 = v12;
    if (!v36)
    {
      uint64_t v37 = MEMORY[0x1E4FBC860];
      uint64_t v50 = v11;
      uint64_t v52 = v10;
      uint64_t v48 = v13;
      char v47 = v14;
      char v64 = v15;
      long long v60 = v17;
      long long v62 = v16;
      long long v56 = v19;
      long long v58 = v18;
      uint64_t v46 = v22;
      uint64_t v38 = v24;
      uint64_t v39 = v25;
      uint64_t v54 = v26;
      uint64_t v40 = v27;
      unint64_t v45 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
      unint64_t v44 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      unint64_t v43 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      uint64_t v12 = v91;
      unint64_t v41 = specialized Dictionary.init(dictionaryLiteral:)(v37);
      uint64_t v27 = v40;
      uint64_t v10 = v52;
      uint64_t v26 = v54;
      uint64_t v25 = v39;
      uint64_t v24 = v38;
      uint64_t v22 = v46;
      long long v19 = v56;
      long long v18 = v58;
      long long v17 = v60;
      long long v16 = v62;
      char v15 = v64;
      LOBYTE(v14) = v47;
      uint64_t v13 = v48;
      uint64_t v11 = v50;
      *(void *)(v3 + 40) = 0;
      *(void *)(v3 + 48) = v45;
      *(void *)(v3 + 56) = v44;
      *(void *)(v3 + 64) = v43;
      *(void *)(v3 + 72) = v41;
      *(_DWORD *)(v3 + 80) = 0;
    }
    v80[0] = v21;
    v80[1] = v23;
    v80[2] = v12;
    void v80[3] = v77;
    v80[4] = v76;
    v80[5] = v75;
    v80[6] = v73;
    v80[7] = v72;
    char v81 = v74;
    uint64_t v82 = v27;
    uint64_t v83 = v26;
    uint64_t v84 = v25;
    uint64_t v85 = v24;
    char v86 = v4 & 1;
    uint64_t v87 = v22;
    char v88 = v15;
    long long v89 = xmmword_1883863B0;
    uint64_t v90 = 0;
    v78[0] = v16;
    v78[1] = v17;
    v78[2] = v18;
    v78[3] = v19;
    __int16 v79 = v20;
    outlined copy of NavigationRequest.Action?(v10, v11, v69, v68, v67, v66, v70, v13, v14);
    NavigationListState.update(for:splitViewState:)((uint64_t)v80, (uint64_t)v78, a3);
    return outlined consume of NavigationRequest.Action(v21, v23, v91, v77, v76, v75, v73, v72, v74);
  }
  else
  {
    _StringGuts.grow(_:)(33);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

void *NavigationListState.update(for:splitViewState:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = v3;
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v10 = *(void *)(a1 + 24);
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v12 = *(void *)(a1 + 40);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  long long v16 = (_DWORD *)(a1 + 65);
  uint64_t v18 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 80);
  uint64_t v20 = *(void *)(a1 + 88);
  uint64_t v19 = *(void *)(a1 + 96);
  char v21 = *(unsigned char *)(a1 + 104);
  uint64_t v22 = (int *)(a1 + 105);
  uint64_t v23 = (long long *)(a1 + 120);
  uint64_t v24 = *(void *)(a1 + 112);
  switch(*(unsigned char *)(a1 + 64))
  {
    case 2:
      long long v25 = *(_OWORD *)(a1 + 136);
      *(long long *)((char *)&__src[7] + 8) = *v23;
      *(void *)&__src[0] = v8;
      *((void *)&__src[0] + 1) = v9;
      *(void *)&__src[1] = v11;
      *((void *)&__src[1] + 1) = v10;
      *(void *)&__src[2] = v13;
      *((void *)&__src[2] + 1) = v12;
      *(void *)&__src[3] = v15;
      *((void *)&__src[3] + 1) = v14;
      LOBYTE(__src[4]) = 2;
      *(_DWORD *)((char *)&__src[4] + 1) = *v16;
      DWORD1(__src[4]) = *(_DWORD *)(a1 + 68);
      *((void *)&__src[4] + 1) = v18;
      *(void *)&__src[5] = v17;
      *((void *)&__src[5] + 1) = v20;
      *(void *)&__src[6] = v19;
      BYTE8(__src[6]) = v21;
      int v26 = *v22;
      HIDWORD(__src[6]) = *(_DWORD *)(a1 + 108);
      *(_DWORD *)((char *)&__src[6] + 9) = v26;
      *(void *)&__src[7] = v24;
      *(long long *)((char *)&__src[8] + 8) = v25;
      swift_retain();
      swift_retain();
      swift_retain();
      NavigationListState.setSelection(_:locationID:metatypeID:request:)(v8, v9, v11, v10, v13, (uint64_t)__src, a3);
      swift_release();
      swift_release();
      return (void *)swift_release();
    case 7:
      __int16 v27 = *(_WORD *)(a2 + 64);
      *(void *)&__src[0] = *(void *)a1;
      *((void *)&__src[0] + 1) = v9;
      *(void *)&__src[1] = v11;
      *((void *)&__src[1] + 1) = v10;
      *(void *)&__src[2] = v13;
      *((void *)&__src[2] + 1) = v12;
      *(void *)&__src[3] = v15;
      *((void *)&__src[3] + 1) = v14;
      LOBYTE(__src[4]) = 7;
      *(_DWORD *)((char *)&__src[4] + 1) = *v16;
      DWORD1(__src[4]) = *(_DWORD *)(a1 + 68);
      *((void *)&__src[4] + 1) = v18;
      *(void *)&__src[5] = v17;
      *((void *)&__src[5] + 1) = v20;
      *(void *)&__src[6] = v19;
      BYTE8(__src[6]) = v21;
      int v28 = *v22;
      HIDWORD(__src[6]) = *(_DWORD *)(a1 + 108);
      *(_DWORD *)((char *)&__src[6] + 9) = v28;
      *(void *)&__src[7] = v24;
      long long v29 = *(_OWORD *)(a1 + 136);
      *(long long *)((char *)&__src[7] + 8) = *v23;
      *(long long *)((char *)&__src[8] + 8) = v29;
      long long v30 = *(_OWORD *)(a2 + 16);
      v40[0] = *(_OWORD *)a2;
      v40[1] = v30;
      long long v31 = *(_OWORD *)(a2 + 48);
      v40[2] = *(_OWORD *)(a2 + 32);
      v40[3] = v31;
      __int16 v41 = v27;
      return NavigationListState.boundSelectionChange(metatypeID:selectionPopsSubsequentColumn:request:splitViewState:)(v8, v9 & 1, (uint64_t)__src, (uint64_t)v40, a3);
    case 8:
      uint64_t v33 = *(void *)(v7 + 8);
      if (*(void *)(v33 + 16)
        && (*(void *)&long long v43 = *(void *)(a1 + 72),
            *((void *)&v43 + 1) = v17,
            uint64_t v44 = v20,
            uint64_t v45 = v19,
            char v46 = v21 & 1,
            uint64_t v47 = v24,
            unint64_t v34 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v43),
            (v35 & 1) != 0)
        && *(void *)(*(void *)(v33 + 56) + 40 * v34 + 32) == v9)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)&__src[0] = *(void *)(v7 + 32);
        *(void *)(v7 + 32) = 0x8000000000000000;
        specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v8 & 1, &v43, isUniquelyReferenced_nonNull_native);
        *(void *)(v7 + 32) = *(void *)&__src[0];
        swift_release();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v40);
LABEL_4:
        __src[0] = xmmword_18834FC50;
        LOBYTE(__src[1]) = 2;
        outlined init with take of NavigationState.UpdateResult(v40, (long long *)((char *)&__src[1] + 8));
      }
      else
      {
        _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v40);
        __src[0] = xmmword_18834FC50;
        LOBYTE(__src[1]) = 2;
        outlined init with take of NavigationState.UpdateResult(v40, (long long *)((char *)&__src[1] + 8));
      }
      *(void *)((char *)&__src[17] + 4) = 0;
      return memcpy(a3, __src, 0x11CuLL);
    case 0xA:
      long long v36 = *(_OWORD *)(a1 + 136);
      *(long long *)((char *)&__src[7] + 8) = *v23;
      uint64_t v48 = v5;
      *(void *)&__src[0] = v8;
      *((void *)&__src[0] + 1) = v9;
      *(void *)&__src[1] = v11;
      *((void *)&__src[1] + 1) = v10;
      *(void *)&__src[2] = v13;
      *((void *)&__src[2] + 1) = v12;
      *(void *)&__src[3] = v15;
      *((void *)&__src[3] + 1) = v14;
      LOBYTE(__src[4]) = 10;
      *(_DWORD *)((char *)&__src[4] + 1) = *v16;
      DWORD1(__src[4]) = *(_DWORD *)(a1 + 68);
      *((void *)&__src[4] + 1) = v18;
      *(void *)&__src[5] = v17;
      *((void *)&__src[5] + 1) = v20;
      *(void *)&__src[6] = v19;
      BYTE8(__src[6]) = v21;
      int v37 = *v22;
      HIDWORD(__src[6]) = *(_DWORD *)(a1 + 108);
      *(_DWORD *)((char *)&__src[6] + 9) = v37;
      *(void *)&__src[7] = v24;
      *(long long *)((char *)&__src[8] + 8) = v36;
      swift_retain();
      swift_retain();
      uint64_t v38 = swift_retain();
      NavigationListState.presentValue(_:activeBinding:selectionPopsSubsequentColumn:request:splitViewState:)(v38, v9, v11, v10 & 1, BYTE1(v10) & 1, __src, a3);
      swift_release();
      swift_release();
      return (void *)swift_release();
    default:
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v40);
      goto LABEL_4;
  }
}

void *NavigationSplitViewState.updateRequiredCompactColumn(_:newValue:)@<X0>(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  char v7 = *((unsigned char *)a1 + 16);
  int v8 = *a2;
  uint64_t v9 = *(void *)(v3 + 56);
  if (!v9)
  {
    *(void *)(v3 + 48) = v5;
    *(void *)(v3 + 56) = v6;
    *(unsigned char *)(v3 + 64) = v7;
    *(unsigned char *)(v3 + 65) = v8;
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
    __src[0] = xmmword_18834FC50;
    LOBYTE(__src[1]) = 2;
    outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
    *(void *)((char *)&__src[17] + 4) = v8 != 0;
    memcpy(a3, __src, 0x11CuLL);
    swift_retain();
    return (void *)swift_retain();
  }
  int v10 = *(unsigned __int8 *)(v3 + 65);
  if (v10 == 3)
  {
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi0_((uint64_t)v13);
  }
  else
  {
    if (v6 != v9)
    {
      uint64_t v12 = *(void *)(v3 + 48);
      swift_retain();
      swift_retain();
      outlined consume of Binding<NavigationSplitViewColumn>?(v12, v9);
      *(void *)(v3 + 48) = v5;
      *(void *)(v3 + 56) = v6;
      *(unsigned char *)(v3 + 64) = v7;
    }
    if (v8 != v10)
    {
      *(unsigned char *)(v3 + 65) = v8;
      _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
      __src[0] = xmmword_18834FC50;
      LOBYTE(__src[1]) = 2;
      outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
      *(void *)((char *)&__src[17] + 4) = 1;
      return memcpy(a3, __src, 0x11CuLL);
    }
    _s7SwiftUI15NavigationStateV12UpdateResultOWOi1_((uint64_t)v13);
  }
  __src[0] = xmmword_18834FC50;
  LOBYTE(__src[1]) = 2;
  outlined init with take of NavigationState.UpdateResult(v13, (_OWORD *)((char *)&__src[1] + 8));
  *(void *)((char *)&__src[17] + 4) = 0;
  return memcpy(a3, __src, 0x11CuLL);
}

uint64_t specialized NavigationColumnState.ColumnContent.mutatePath<A>(transform:)(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = a1[7];
  if (v6 < 0) {
    return 0;
  }
  uint64_t v22 = *a1;
  uint64_t v20 = a1[2];
  uint64_t v21 = a1[1];
  uint64_t v18 = a1[4];
  uint64_t v19 = a1[3];
  uint64_t v16 = a1[6];
  uint64_t v17 = a1[5];
  uint64_t v11 = a5 + 192;
  uint64_t v12 = a1[8];
  uint64_t v15 = a1[9];
  uint64_t v13 = a1[7];
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
  {
    uint64_t v13 = (*(uint64_t (**)(void))(*(void *)v6 + 104))();
    swift_release();
  }
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 144))(a2, a3, a4, v11);
  *a1 = v22;
  a1[1] = v21;
  a1[2] = v20;
  a1[3] = v19;
  a1[4] = v18;
  a1[5] = v17;
  a1[6] = v16;
  a1[7] = v13;
  a1[8] = v12;
  a1[9] = v15;
  if (v5) {
    return swift_willThrow();
  }
  return result;
}

uint64_t assignWithCopy for OnScrollVisibilityChangeModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for EditModeScopeModifier.TransformModifier(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  return a1;
}

uint64_t static LazyHGrid._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t static LazyVGrid._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t type metadata accessor for LazyHGrid()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for LazyVGrid()
{
  return __swift_instantiateGenericMetadata();
}

void *type metadata accessor for AnyStyle()
{
  return &unk_1ED4678E0;
}

{
  return &unk_1ED4679E0;
}

{
  return &unk_1ED467960;
}

ValueMetadata *type metadata accessor for Alert.Button()
{
  return &type metadata for Alert.Button;
}

ValueMetadata *type metadata accessor for ListLabeledContentPrefersHorizontalLayout()
{
  return &type metadata for ListLabeledContentPrefersHorizontalLayout;
}

ValueMetadata *type metadata accessor for AccessibilityScrollableContextModifier()
{
  return &type metadata for AccessibilityScrollableContextModifier;
}

ValueMetadata *type metadata accessor for HideNavigationLinkDisclosureIndicator()
{
  return &type metadata for HideNavigationLinkDisclosureIndicator;
}

ValueMetadata *type metadata accessor for NavigationDestinationPresentation()
{
  return &type metadata for NavigationDestinationPresentation;
}

void *type metadata accessor for IsConditionallyBorderedPredicate()
{
  return &unk_1ED45CD38;
}

ValueMetadata *type metadata accessor for LabeledContentUsesLegacyLayout()
{
  return &type metadata for LabeledContentUsesLegacyLayout;
}

ValueMetadata *type metadata accessor for LabelIconPlatformItemModifier()
{
  return &type metadata for LabelIconPlatformItemModifier;
}

ValueMetadata *type metadata accessor for ResolvedNavigationStackStyle()
{
  return &type metadata for ResolvedNavigationStackStyle;
}

ValueMetadata *type metadata accessor for LabelGroupStyleConfiguration()
{
  return &type metadata for LabelGroupStyleConfiguration;
}

ValueMetadata *type metadata accessor for AccessibilitySectionContext()
{
  return &type metadata for AccessibilitySectionContext;
}

ValueMetadata *type metadata accessor for ListSeparatorConfiguration()
{
  return &type metadata for ListSeparatorConfiguration;
}

ValueMetadata *type metadata accessor for ListRowBackgroundTraitKey()
{
  return &type metadata for ListRowBackgroundTraitKey;
}

void *type metadata accessor for ExtendedLaunchTestNameKey()
{
  return &unk_1ED4467E8;
}

ValueMetadata *type metadata accessor for BorderedButtonStyle_Phone()
{
  return &type metadata for BorderedButtonStyle_Phone;
}

ValueMetadata *type metadata accessor for BorderedButtonColorSpec.LabelStyle()
{
  return &type metadata for BorderedButtonColorSpec.LabelStyle;
}

ValueMetadata *type metadata accessor for AccessibilityAttachment.Tree()
{
  return &type metadata for AccessibilityAttachment.Tree;
}

ValueMetadata *type metadata accessor for DefaultListToggleStyle()
{
  return &type metadata for DefaultListToggleStyle;
}

ValueMetadata *type metadata accessor for AllowsSecureDrawingKey()
{
  return &type metadata for AllowsSecureDrawingKey;
}

ValueMetadata *type metadata accessor for ResolvedToggleStyle()
{
  return &type metadata for ResolvedToggleStyle;
}

void *type metadata accessor for LazyPageTabModifier()
{
  return &unk_1ED42C518;
}

double static ToolbarPlacement.navigationBar.getter@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

ValueMetadata *type metadata accessor for SectionInsetMode()
{
  return &type metadata for SectionInsetMode;
}

ValueMetadata *type metadata accessor for PlatformItemList.Item.SelectionBehavior()
{
  return &type metadata for PlatformItemList.Item.SelectionBehavior;
}

ValueMetadata *type metadata accessor for AnySharePreview()
{
  return &type metadata for AnySharePreview;
}

ValueMetadata *type metadata accessor for StatusBarKey()
{
  return &type metadata for StatusBarKey;
}

ValueMetadata *type metadata accessor for ListItemKind()
{
  return &type metadata for ListItemKind;
}

ValueMetadata *type metadata accessor for DropModifier()
{
  return &type metadata for DropModifier;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.StackKeyViewInputKey()
{
  type metadata accessor for _GraphValue<StackDepthModifier>(0, &lazy cache variable for type metadata for NavigationState.StackContent.Key?, (uint64_t)&type metadata for NavigationState.StackContent.Key, MEMORY[0x1E4FBB718]);

  return static WeakAttribute.== infix(_:_:)();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<NavigationBackgroundReaderModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<NavigationBackgroundReaderModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<NavigationBackgroundReaderModifier>);
    lazy protocol witness table accessor for type _ViewModifier_Content<NavigationBackgroundReaderModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<NavigationBackgroundReaderModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>)
  {
    type metadata accessor for _ViewModifier_Content<NavigationBackgroundReaderModifier>();
    type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<NavigationBackgroundReaderModifier>, _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>>);
    }
  }
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>()
{
  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>();
    lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.NavigationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
    }
  }
}

void SheetContent.body.getter(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a2;
  uint64_t v3 = type metadata accessor for ModifiedContent();
  type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for StyleContextWriter<SheetStyleContext>, MEMORY[0x1E4F40190], MEMORY[0x1E4F40188], MEMORY[0x1E4F40318]);
  uint64_t v4 = type metadata accessor for ModifiedContent();
  type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  uint64_t v51 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  int v37 = (char *)v36 - v6;
  type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>();
  uint64_t v49 = type metadata accessor for ModifiedContent();
  uint64_t v55 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  uint64_t v38 = (char *)v36 - v7;
  uint64_t v45 = type metadata accessor for ModifiedContent();
  uint64_t v56 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v42 = (char *)v36 - v8;
  uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4F411E8];
  type metadata accessor for Binding<PresentationMode>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior, MEMORY[0x1E4F411E8]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v52 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v39 = (char *)v36 - v11;
  uint64_t v46 = type metadata accessor for ModifiedContent();
  uint64_t v53 = *(void *)(v46 - 8);
  MEMORY[0x1F4188790](v46);
  uint64_t v40 = (char *)v36 - v12;
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v54 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  __int16 v41 = (char *)v36 - v13;
  uint64_t v47 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v47 - 8);
  MEMORY[0x1F4188790](v47);
  long long v43 = (char *)v36 - v14;
  type metadata accessor for Binding<PresentationMode>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], v9);
  uint64_t v57 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v44 = (char *)v36 - v15;
  uint64_t v16 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v36 - v18;
  uint64_t v50 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v20);
  static Alignment.center.getter();
  uint64_t v35 = *(void *)(a1 + 24);
  View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)();
  uint64_t v72 = v35;
  uint64_t v73 = MEMORY[0x1E4F3FE50];
  uint64_t WitnessTable = swift_getWitnessTable();
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, v3);
  unint64_t v22 = lazy protocol witness table accessor for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v70 = WitnessTable;
  unint64_t v71 = v22;
  v36[0] = v4;
  uint64_t v23 = swift_getWitnessTable();
  uint64_t v24 = v37;
  View.renderContainerBackgroundInHostingView<A>(_:)();
  swift_getKeyPath();
  char v69 = 2;
  uint64_t v25 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>> and conformance _BackgroundPreferenceModifier<A, B>, (void (*)(uint64_t))type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
  uint64_t v67 = v23;
  uint64_t v68 = v25;
  uint64_t v26 = swift_getWitnessTable();
  __int16 v27 = v38;
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v24, v5);
  uint64_t v28 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>);
  uint64_t v65 = v26;
  uint64_t v66 = v28;
  uint64_t v29 = v49;
  uint64_t v30 = swift_getWitnessTable();
  long long v31 = v42;
  View.resetScrollEnvironment()(v29, v30);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v27, v29);
  uint64_t v63 = v30;
  char v64 = &protocol witness table for ResetScrollEnvironmentModifier;
  uint64_t v32 = v45;
  uint64_t v33 = swift_getWitnessTable();
  View.resetListStackBehavior()();
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v32);
  uint64_t v34 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListStackBehavior> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListStackBehavior>, (uint64_t)&type metadata for ListStackBehavior);
  uint64_t v61 = v33;
  uint64_t v62 = v34;
  swift_getWitnessTable();
  View.resetSearchEnvironment()();
}

void sub_18746657C()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 328) + 8))(v2, v1);
  *(void *)(v3 - 208) = v0;
  *(void *)(v3 - 200) = &protocol witness table for ResetSearchEnvironmentModifier;
  swift_getWitnessTable();
  View.resetFormEnvironment()();
}

void sub_1874665E0()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 320) + 8))(v1, v2);
  *(void *)(v3 - 224) = v0;
  *(void *)(v3 - 216) = &protocol witness table for ResetFormEnvironmentModifier;
  swift_getWitnessTable();
  View.resetTabViewEnvironment()();
}

uint64_t sub_187466644()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 312) + 8))(v1, v2);
  swift_getKeyPath();
  *(unsigned char *)(v5 - 121) = 0;
  *(void *)(v5 - 240) = v0;
  *(void *)(v5 - 232) = &protocol witness table for ResetTabViewEnvironmentModifier;
  uint64_t v6 = *(void *)(v5 - 368);
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v8 = *(void *)(v5 - 392);
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 272) + 8))(v3, v6);
  uint64_t v9 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390]);
  *(void *)(v5 - 256) = WitnessTable;
  *(void *)(v5 - 248) = v9;
  uint64_t v10 = *(void *)(v5 - 288);
  uint64_t v11 = swift_getWitnessTable();
  View.clearNavigationContext()(v11, *(void *)(v5 - 264));
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 280) + 8))(v8, v10);
  return (*(uint64_t (**)(uint64_t, void))(*(void *)(v5 - 344) + 8))(v4, *(void *)(v5 - 464));
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationState.SelectionSeed> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for Binding<PresentationMode>(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TintAdjustmentMode?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>)
  {
    type metadata accessor for Binding<PresentationMode>(255, &lazy cache variable for type metadata for TintAdjustmentMode?, MEMORY[0x1E4F40348], MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TintAdjustmentMode?>);
    }
  }
}

void type metadata accessor for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>()
{
  if (!lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>();
    lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for _BackgroundPreferenceModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundPreferenceModifier<ContainerBackgroundKeys.PresentationKey, _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for StyleContextWriter<SheetStyleContext>, MEMORY[0x1E4F40190], MEMORY[0x1E4F40188], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<SheetStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

void View.resetSearchEnvironment()()
{
}

uint64_t View.resetScrollEnvironment()(uint64_t a1, uint64_t a2)
{
  char v3 = 3;
  return MEMORY[0x18C113660](&v3, a1, &type metadata for ResetScrollEnvironmentModifier, a2);
}

uint64_t View.resetListStackBehavior()()
{
  return swift_release();
}

uint64_t View.clearNavigationContext()@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v15[0] = a2;
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v15 - v5;
  type metadata accessor for _GraphValue<StackDepthModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, MEMORY[0x1E4F411E8]);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  double v9 = MEMORY[0x1F4188790](v7);
  uint64_t v11 = (char *)v15 - v10;
  MEMORY[0x18C113660](v9);
  swift_getKeyPath();
  LOBYTE(v16) = 0;
  uint64_t v17 = a1;
  uint64_t v18 = &protocol witness table for ClearNavigationContextModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  swift_getKeyPath();
  int v16 = -1;
  unint64_t v13 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>();
  v15[1] = WitnessTable;
  v15[2] = v13;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance NavigationAuthority.ViewInputKey()
{
  type metadata accessor for _GraphValue<StackDepthModifier>(0, &lazy cache variable for type metadata for NavigationAuthority?, (uint64_t)&type metadata for NavigationAuthority, MEMORY[0x1E4FBB718]);

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t protocol witness for static GraphInput.makeReusable(indirectMap:value:) in conformance NavigationAuthority.DepthKey()
{
  return Attribute.makeReusable(indirectMap:)();
}

void type metadata accessor for _GraphValue<StackDepthModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void View.resetFormEnvironment()()
{
}

void View.resetTabViewEnvironment()()
{
}

uint64_t View.renderContainerBackgroundInHostingView<A>(_:)()
{
  type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>, MEMORY[0x1E4F40578]);
  lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>();
  return View.backgroundPreferenceValue<A, B>(_:alignment:_:)();
}

uint64_t closure #1 in View.renderContainerBackgroundInHostingView<A>(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0();
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a1[1] < 0)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(0, &lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>.Storage, MEMORY[0x1E4F40568]);
    return swift_storeEnumTagMultiPayload();
  }
  else
  {
    uint64_t v9 = *a1;
    swift_retain();
    char v10 = static Edge.Set.all.getter();
    v12[1] = v9;
    v12[2] = -1;
    char v13 = v10;
    type metadata accessor for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>(0, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    View.truePreference<A>(_:)();
    swift_release();
    (*(void (**)(uint64_t, char *, uint64_t))(v6 + 16))(a2, v8, v5);
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(0, &lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
}

void type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0()
{
  if (!lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0);
    }
  }
}

{
  unint64_t OpaqueTypeMetadata2;
  uint64_t v1;

  if (!lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0)
  {
    lazy protocol witness table accessor for type _TestApp.RootView and conformance _TestApp.RootView();
    OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
    if (!v1) {
      atomic_store(OpaqueTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for <<opaque return type of View.truePreference<A>(_:)>>.0);
    }
  }
}

void type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, void))
{
  if (!*a2)
  {
    type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0();
    unint64_t v7 = a3(a1, v6, MEMORY[0x1E4F417F8]);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>();
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>();
    swift_getOpaqueTypeConformance2();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for NullSheetAnchor<SheetPreference.Key>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41208], MEMORY[0x1E4F3FBA0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, _SafeAreaRegionsIgnoringLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>)
  {
    type metadata accessor for <<opaque return type of View.truePreference<A>(_:)>>.0();
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<<<opaque return type of View.truePreference<A>(_:)>>.0, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _GraphValue<StackDepthModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<NavigationEnabled>, (uint64_t)&type metadata for NavigationEnabled, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<NavigationEnabled> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<NavigationBackgroundReaderModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<NavigationBackgroundReaderModifier>)
  {
    lazy protocol witness table accessor for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<NavigationBackgroundReaderModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier;
  if (!lazy protocol witness table cache variable for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type NavigationBackgroundReaderModifier and conformance NavigationBackgroundReaderModifier);
  }
  return result;
}

uint64_t static ResolvedTabView._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  int v19 = *(_DWORD *)(a2 + 64);
  char v20 = *(unsigned char *)(a2 + 80);
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v24)
  {
    uint64_t v14 = v25;
    v37[0] = v5;
    uint64_t v24 = v6;
    LODWORD(v25) = v7;
    uint64_t v26 = v8;
    int v27 = v9;
    int v28 = v10;
    int v29 = v11;
    int v30 = v16;
    uint64_t v31 = v12;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    int v34 = v19;
    uint64_t v35 = v13;
    char v36 = v20;
    return (*(uint64_t (**)(_DWORD *))(v14 + 16))(v37);
  }
  else
  {
    v37[0] = v5;
    uint64_t v24 = v6;
    LODWORD(v25) = v7;
    uint64_t v26 = v8;
    int v27 = v9;
    int v28 = v10;
    int v29 = v11;
    int v30 = v16;
    uint64_t v31 = v12;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    int v34 = v19;
    uint64_t v35 = v13;
    char v36 = v20;
    return static ResolvedTabView.makeViewList<A>(view:style:inputs:)((uint64_t)v37, 0, &v24, a3, (uint64_t)&type metadata for DefaultTabViewStyle, a4, (uint64_t)&protocol witness table for DefaultTabViewStyle, a5);
  }
}

uint64_t protocol witness for static AnyStyleType.makeViewList<A>(view:style:inputs:) in conformance StyleType<A>(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return static StyleType.makeViewList<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(void *)(a8 + 16), a6, *(void *)(a8 + 24), a7);
}

{
  return static StyleType.makeViewList<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(void *)(a8 + 16), a6, *(void *)(a8 + 24), a7);
}

{
  return static StyleType.makeViewList<A>(view:style:inputs:)(a1, a2, a3, a4, a5, *(void *)(a8 + 16), a6, *(void *)(a8 + 24), a7);
}

uint64_t static StyleType.makeViewList<A>(view:style:inputs:)(_DWORD *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v14 = *a5;
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = a5[2];
  long long v24 = *(_OWORD *)(a5 + 5);
  uint64_t v23 = a5[7];
  uint64_t v17 = a5[9];
  char v21 = *((unsigned char *)a5 + 80);
  int v22 = *((_DWORD *)a5 + 16);
  LODWORD(v25) = *a1;
  type metadata accessor for ResolvedTabView();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  int v37 = _GraphValue.value.getter();
  int v38 = a4;
  type metadata accessor for _TabViewValue();
  int v27 = HIDWORD(a7);
  type metadata accessor for _TabViewValue.Init2();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v25 = v14;
  int v26 = v15;
  uint64_t v28 = v16;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v24;
  uint64_t v32 = v23;
  int v33 = v22;
  uint64_t v34 = v17;
  char v35 = v21;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v36, &v25, a7, a9, a6, a8);
}

{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  int v22;
  uint64_t v23;
  long long v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  unsigned char v36[4];
  int v37;
  int v38;

  uint64_t v14 = *a5;
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = a5[2];
  long long v24 = *(_OWORD *)(a5 + 5);
  uint64_t v23 = a5[7];
  uint64_t v17 = a5[9];
  char v21 = *((unsigned char *)a5 + 80);
  int v22 = *((_DWORD *)a5 + 16);
  LODWORD(v25) = *a1;
  type metadata accessor for ResolvedList();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  int v37 = _GraphValue.value.getter();
  int v38 = a4;
  type metadata accessor for _ListValue();
  int v27 = HIDWORD(a7);
  type metadata accessor for _ListValue.Init2();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v25 = v14;
  int v26 = v15;
  uint64_t v28 = v16;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v24;
  uint64_t v32 = v23;
  int v33 = v22;
  uint64_t v34 = v17;
  char v35 = v21;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v36, &v25, a7, a9, a6, a8);
}

{
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v21;
  int v22;
  uint64_t v23;
  long long v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  long long v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  char v35;
  unsigned char v36[4];
  int v37;
  int v38;

  uint64_t v14 = *a5;
  int v15 = *((_DWORD *)a5 + 2);
  uint64_t v16 = a5[2];
  long long v24 = *(_OWORD *)(a5 + 5);
  uint64_t v23 = a5[7];
  uint64_t v17 = a5[9];
  char v21 = *((unsigned char *)a5 + 80);
  int v22 = *((_DWORD *)a5 + 16);
  LODWORD(v25) = *a1;
  type metadata accessor for ResolvedPicker();
  type metadata accessor for _GraphValue();
  uint64_t v18 = a5[3];
  uint64_t v19 = a5[4];
  int v37 = _GraphValue.value.getter();
  int v38 = a4;
  type metadata accessor for _PickerValue();
  int v27 = HIDWORD(a7);
  type metadata accessor for _PickerValue.Init2();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v25 = v14;
  int v26 = v15;
  uint64_t v28 = v16;
  uint64_t v29 = v18;
  uint64_t v30 = v19;
  long long v31 = v24;
  uint64_t v32 = v23;
  int v33 = v22;
  uint64_t v34 = v17;
  char v35 = v21;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(a8 + 16))(v36, &v25, a7, a9, a6, a8);
}

uint64_t static LazyPageTabViewStyle._makeViewList<A>(value:inputs:)()
{
  return static View._makeViewList(view:inputs:)();
}

uint64_t type metadata accessor for LazyPageTabViewStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static _TabViewStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for TabViewStyleOverrideInput();
  swift_getWitnessTable();
  PropertyList.subscript.getter();
  if (!v5)
  {
    type metadata accessor for _TabViewStyleWriter();
    type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(a3 - 8) + 64)) {
      closure #1 in static _TabViewStyleWriter._makeInputs(modifier:inputs:)(1, a3);
    }
    AGGraphCreateOffsetAttribute2();
    type metadata accessor for StyleType();
  }
  lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput();
  return PropertyList.subscript.setter();
}

unint64_t lazy protocol witness table accessor for type TabViewStyleInput and conformance TabViewStyleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput;
  if (!lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput;
  if (!lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabViewStyleInput and conformance TabViewStyleInput);
  }
  return result;
}

uint64_t type metadata accessor for StyleType()
{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for TabViewStyleOverrideInput()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for _TabViewValue.Init2()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<LazyPageTabModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<LazyPageTabModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>();
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>();
    type metadata accessor for _GeometryActionModifier<Bool>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>, _GeometryActionModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>)
  {
    type metadata accessor for _ViewModifier_Content<LazyPageTabModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<LazyPageTabModifier>, AccessibilityAttachmentModifier>);
    }
  }
}

void type metadata accessor for _GeometryActionModifier<Bool>()
{
  if (!lazy cache variable for type metadata for _GeometryActionModifier<Bool>)
  {
    unint64_t v0 = type metadata accessor for _GeometryActionModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GeometryActionModifier<Bool>);
    }
  }
}

uint64_t static LazyHStack._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t closure #1 in static LazyHStack._makeView(view:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for LazyHStack();
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t closure #1 in ScrollViewReader.body.getter(uint64_t a1, uint64_t (*a2)(uint64_t *))
{
  type metadata accessor for _PreferenceValue<ScrollablePreferenceKey>();
  uint64_t v4 = _PreferenceValue.attribute.getter();
  return a2(&v4);
}

void type metadata accessor for _PreferenceValue<ScrollablePreferenceKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceValue<ScrollablePreferenceKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceValue<ScrollablePreferenceKey>);
    }
  }
}

uint64_t partial apply for closure #1 in LazyPageTabView.body.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[4];
  uint64_t v6 = v1[5];
  uint64_t v7 = *(void *)(type metadata accessor for LazyPageTabView() - 8);
  uint64_t v8 = (uint64_t)v1 + ((*(unsigned __int8 *)(v7 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));

  return closure #1 in LazyPageTabView.body.getter(v8, v3, v4, v5, v6, a1);
}

uint64_t type metadata accessor for LazyPageTabView()
{
  return swift_getGenericMetadata();
}

uint64_t closure #1 in LazyPageTabView.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v41 = a1;
  uint64_t v46 = a6;
  uint64_t v33 = a2;
  type metadata accessor for Optional();
  uint64_t v45 = type metadata accessor for Binding();
  uint64_t v44 = *(void *)(v45 - 8);
  MEMORY[0x1F4188790](v45);
  uint64_t v43 = (uint64_t)&v33 - v9;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  v56[8] = a5;
  v56[9] = &protocol witness table for ContainerRelativeFrameModifier;
  uint64_t v10 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v12 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  v56[6] = WitnessTable;
  v56[7] = v12;
  uint64_t v40 = v10;
  swift_getWitnessTable();
  type metadata accessor for LazyHStack();
  type metadata accessor for ModifiedContent();
  v56[4] = &protocol witness table for LazyHStack<A>;
  v56[5] = &protocol witness table for TransformScrollIndicators;
  uint64_t v35 = swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for PagingScrollView();
  uint64_t v36 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  int v15 = (char *)&v33 - v14;
  uint64_t v16 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v33 - v17;
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v39 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v34 = (char *)&v33 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  int v37 = (char *)&v33 - v22;
  LOBYTE(v56[0]) = 1;
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v23 = v42;
  uint64_t v49 = v42;
  uint64_t v50 = a5;
  uint64_t v51 = v41;
  PagingScrollView.init(behavior:axis:content:)(v56, 0, partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter, v15);
  LOBYTE(v56[0]) = 3;
  uint64_t v24 = swift_getWitnessTable();
  View.scrollIndicators(_:axes:)(v56, 1, v13);
  (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v15, v13);
  uint64_t v25 = v33;
  v56[0] = v33;
  v56[1] = a3;
  void v56[2] = v23;
  v56[3] = a5;
  uint64_t v26 = type metadata accessor for LazyPageTabView();
  uint64_t v27 = v43;
  LazyPageTabView.scrollStateBinding.getter(v26, v43);
  uint64_t v54 = v24;
  uint64_t v55 = &protocol witness table for TransformScrollIndicators;
  uint64_t v28 = swift_getWitnessTable();
  uint64_t v29 = v34;
  View.scrollPosition<A>(id:anchor:)(v27, 0, 0, 1, v16, v25, v28);
  (*(void (**)(uint64_t, uint64_t))(v44 + 8))(v27, v45);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v18, v16);
  uint64_t v52 = v28;
  uint64_t v53 = MEMORY[0x1E4F41140];
  swift_getWitnessTable();
  uint64_t v30 = v37;
  static ViewBuilder.buildExpression<A>(_:)(v29);
  long long v31 = *(void (**)(char *, uint64_t))(v39 + 8);
  v31(v29, v19);
  static ViewBuilder.buildExpression<A>(_:)(v30);
  return ((uint64_t (*)(char *, uint64_t))v31)(v30, v19);
}

uint64_t destroy for SearchCustomScopeBarModifier(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 2) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t View.scrollPosition<A>(id:anchor:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v19 = a7;
  uint64_t v18 = a5;
  type metadata accessor for Optional();
  uint64_t v11 = type metadata accessor for Binding();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))((char *)&v17 - v14, a1, v11, v13);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  v20[0] = a2;
  v20[1] = a3;
  char v21 = a4 & 1;
  type metadata accessor for ValueToScrollPosition();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  outlined init with copy of Binding<ScrollPosition>((uint64_t)v25, (uint64_t)v20);
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  char v24 = a4 & 1;
  MEMORY[0x18C113660](v20, v18, MEMORY[0x1E4F41148], v19);
  outlined destroy of ScrollPositionBindingModifier((uint64_t)v20);
  return outlined destroy of Binding<ScrollPosition>((uint64_t)v25);
}

uint64_t outlined destroy of Binding<ScrollPosition>(uint64_t a1)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E4F3FA08], MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of Binding<ScrollPosition>(uint64_t a1, uint64_t a2)
{
  _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_1(0, &lazy cache variable for type metadata for Binding<ScrollPosition>, MEMORY[0x1E4F3FA08], MEMORY[0x1E4F41638]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of ScrollPositionBindingModifier(uint64_t a1)
{
  return a1;
}

uint64_t PagingScrollView.init(behavior:axis:content:)@<X0>(unsigned char *a1@<X0>, char a2@<W1>, uint64_t (*a3)(void)@<X2>, unsigned char *a4@<X8>)
{
  *a4 = *a1;
  a4[1] = a2 & 1;
  type metadata accessor for PagingScrollView();
  return a3();
}

uint64_t partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter()
{
  return partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in closure #1 in LazyPageTabView.body.getter);
}

uint64_t closure #1 in closure #1 in LazyPageTabView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v22 = a3;
  uint64_t v24 = a1;
  uint64_t v25 = a4;
  uint64_t v23 = a2;
  uint64_t v26 = a6;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v37 = a5;
  uint64_t v38 = &protocol witness table for ContainerRelativeFrameModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v36 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for LazyHStack();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v21 - v9;
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v21 - v16;
  uint64_t v27 = v23;
  uint64_t v28 = v22;
  uint64_t v29 = v25;
  uint64_t v30 = v21;
  uint64_t v31 = v24;
  uint64_t v18 = static VerticalAlignment.center.getter();
  int v34 = 0;
  LazyHStack.init(alignment:spacing:pinnedViews:content:)(v18);
  LOBYTE(v34) = 0;
  View.scrollIndicators(_:axes:)(&v34, 1, v7);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v32 = &protocol witness table for LazyHStack<A>;
  uint64_t v33 = &protocol witness table for TransformScrollIndicators;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v11);
}

uint64_t destroy for LazyVStack(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 24) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

uint64_t View.scrollIndicators(_:axes:)(unsigned char *a1, char a2, uint64_t a3)
{
  v4[0] = *a1;
  uint64_t v5 = 0;
  char v6 = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for TransformScrollIndicators);
}

uint64_t LazyHStack.init(alignment:spacing:pinnedViews:content:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t partial apply for closure #1 in closure #1 in closure #1 in LazyPageTabView.body.getter()
{
  return partial apply for closure #1 in closure #1 in LazyPageTabView.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in closure #1 in closure #1 in LazyPageTabView.body.getter);
}

uint64_t closure #1 in closure #1 in closure #1 in LazyPageTabView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v26[1] = a1;
  uint64_t v28 = a6;
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v27 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v26 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v26 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v26 - v18;
  uint64_t v33 = a2;
  uint64_t v34 = a3;
  uint64_t v35 = a4;
  uint64_t v36 = a5;
  type metadata accessor for LazyPageTabView();
  uint64_t v20 = static Alignment.center.getter();
  View.containerRelativeFrame(_:alignment:)(3, v20, v21, a3, a5);
  LOBYTE(v33) = 1;
  uint64_t v34 = 0;
  uint64_t v31 = a5;
  uint64_t v32 = &protocol witness table for ContainerRelativeFrameModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  MEMORY[0x18C113660](&v33, v10, &unk_1ED42C518, WitnessTable);
  (*(void (**)(char *, uint64_t))(v27 + 8))(v12, v10);
  unint64_t v23 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  uint64_t v29 = WitnessTable;
  unint64_t v30 = v23;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v24 = *(void (**)(char *, uint64_t))(v14 + 8);
  v24(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v24)(v19, v13);
}

uint64_t destroy for ContainerRelativeFrameModifier(uint64_t result)
{
  if (*(void *)(result + 24)) {
    return swift_release();
  }
  return result;
}

uint64_t View.containerRelativeFrame(_:alignment:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v6[0] = a1;
  uint64_t v7 = a2;
  uint64_t v8 = a3;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  return MEMORY[0x18C113660](v6, a4, &type metadata for ContainerRelativeFrameModifier, a5);
}

uint64_t LazyPageTabView.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 - 8);
  uint64_t v3 = *(void *)(v2 + 64);
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v2 + 16))(v5, v4);
  unint64_t v6 = (*(unsigned __int8 *)(v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = *(void *)(a1 + 16);
  long long v17 = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v7 + 24) = v17;
  uint64_t v8 = *(void *)(a1 + 40);
  *(void *)(v7 + 40) = v8;
  (*(void (**)(unint64_t, char *, uint64_t))(v2 + 32))(v7 + v6, v5, a1);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v30 = v8;
  uint64_t v31 = &protocol witness table for ContainerRelativeFrameModifier;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v10 = lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
  uint64_t v28 = WitnessTable;
  unint64_t v29 = v10;
  swift_getWitnessTable();
  type metadata accessor for LazyHStack();
  type metadata accessor for ModifiedContent();
  uint64_t v26 = &protocol witness table for LazyHStack<A>;
  uint64_t v27 = &protocol witness table for TransformScrollIndicators;
  swift_getWitnessTable();
  type metadata accessor for PagingScrollView();
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v24 = swift_getWitnessTable();
  uint64_t v25 = &protocol witness table for TransformScrollIndicators;
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = MEMORY[0x1E4F41140];
  uint64_t v12 = swift_getWitnessTable();
  uint64_t v36 = ScrollViewReader.init(content:)(partial apply for closure #1 in LazyPageTabView.body.getter, v7, v11, v12);
  uint64_t v37 = v13;
  swift_getKeyPath();
  LOBYTE(v20[0]) = 4;
  type metadata accessor for ScrollViewReader();
  uint64_t v14 = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  swift_release();
  v20[0] = v32;
  v20[1] = v33;
  void v20[2] = v34;
  char v21 = v35;
  type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>();
  type metadata accessor for ModifiedContent();
  uint64_t v15 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>);
  uint64_t v18 = v14;
  uint64_t v19 = v15;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v20);
  swift_release();
  swift_release();
  uint64_t v32 = v36;
  uint64_t v33 = v37;
  uint64_t v34 = v38;
  char v35 = v39;
  static ViewBuilder.buildExpression<A>(_:)(&v32);
  swift_release();
  return swift_release();
}

void *initializeWithCopy for LazyPageTabView(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v6 = *(void *)(a3 + 16);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = ~v8;
  uint64_t v10 = (v8 + 16) & ~v8;
  uint64_t v11 = *(void *)(v7 + 64);
  uint64_t v12 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) == 0)
  {
    uint64_t v13 = *v12;
    if ((unint64_t)*v12 >= 0xFFFFFFFF) {
      LODWORD(v13) = -1;
    }
    size_t v14 = v10 + v11;
    if (v13 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *__dst = *__src;
    uint64_t v15 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v15 = *v12;
    uint64_t v19 = ((unint64_t)v15 + v8 + 8) & v9;
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v7 + 16);
    swift_retain();
    swift_retain();
    v16(v19, ((unint64_t)v12 + v8 + 8) & v9, v6);
    goto LABEL_8;
  }
  size_t v14 = v10 + v11;
  if (!(*(unsigned int (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v8 + 8) & v9)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, v14);
LABEL_8:
  uint64_t v17 = *(void *)(*(void *)(a3 + 24) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))(((unint64_t)__dst + v14 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)__src + v14 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return __dst;
}

uint64_t type metadata accessor for LazyHStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for ScrollViewReader()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyPageTabModifier and conformance LazyPageTabModifier;
  if (!lazy protocol witness table cache variable for type LazyPageTabModifier and conformance LazyPageTabModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyPageTabModifier and conformance LazyPageTabModifier);
  }
  return result;
}

uint64_t type metadata accessor for PagingScrollView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<TabBarPlacement?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>)
  {
    type metadata accessor for TabBarPlacement?(255, &lazy cache variable for type metadata for TabBarPlacement?, (uint64_t)&type metadata for TabBarPlacement, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TabBarPlacement?>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<TabBarPlacement?> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t LazyPageTabView.scrollStateBinding.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for Optional();
  uint64_t v21 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v20 - v4;
  uint64_t v6 = type metadata accessor for Binding();
  uint64_t v7 = type metadata accessor for Optional();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v12);
  size_t v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v20 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, v22, v7, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v6) == 1)
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v5, 1, 1, v2);
    static Binding.constant(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v5, v3);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v18, v10, v6);
    (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v14, v18, v6);
    Binding.init<A>(_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v18, v6);
  }
}

uint64_t LazyPageTabModifier.body(content:)@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  uint64_t v6 = static AccessibilityChildBehavior.contain;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  swift_retain_n();
  char v14 = Dictionary.init(minimumCapacity:)();
  static AccessibilityAttachment.properties(_:)();
  swift_bridgeObjectRelease();
  type metadata accessor for TabBarPlacement?(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v12;
  *(void *)(v7 + 24) = v13;
  swift_release();
  char v8 = a1 & 1;
  type metadata accessor for TabBarPlacement?(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  swift_beginAccess();
  if (v14) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 4;
  }
  swift_retain();
  swift_retain();
  specialized closure #1 in ModifiedContent<>.update<A>(_:combining:isEnabled:)(v7 + 16, v9);
  swift_endAccess();
  swift_release();
  swift_release();
  uint64_t v10 = swift_allocObject();
  *(unsigned char *)(v10 + 16) = v8;
  *(void *)(v10 + 24) = a2;
  *a3 = v7;
  a3[1] = v6;
  a3[2] = (uint64_t)closure #1 in LazyPageTabModifier.body(content:);
  a3[3] = 0;
  a3[4] = (uint64_t)partial apply for closure #2 in LazyPageTabModifier.body(content:);
  a3[5] = v10;
  return swift_retain();
}

void type metadata accessor for TabBarPlacement?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<LazyPageTabModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<LazyPageTabModifier>)
  {
    lazy protocol witness table accessor for type LazyPageTabModifier and conformance LazyPageTabModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<LazyPageTabModifier>);
    }
  }
}

uint64_t ToolbarItemGroup.init(placement:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(void)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  outlined init with copy of ToolbarItemPlacement(a1, (uint64_t)v9);
  ToolbarItemGroup.init(placement:isEmpty:content:)((uint64_t)v9, 0, a2, a3, a4);
  return outlined destroy of ToolbarItemPlacement(a1);
}

uint64_t ToolbarItemGroup.init(placement:isEmpty:content:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, void (*a3)(void)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarItemPlacement(v13, a5);
  uint64_t v14 = type metadata accessor for ToolbarItemGroup();
  *(unsigned char *)(a5 + *(int *)(v14 + 40)) = a2;
  a3();
  outlined destroy of ToolbarItemPlacement(a1);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v10 + 32))(a5 + *(int *)(v14 + 36), v12, a4);
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for AttributeInvalidatingSubscriber<ObservableObjectPublisher>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, (uint64_t)&type metadata for IncludesStyledTextModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>, IncludesStyledTextModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>();
    lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>);
    lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>, (uint64_t)&type metadata for ToolbarItemBridgingPreferenceKey, (uint64_t)&protocol witness table for ToolbarItemBridgingPreferenceKey, MEMORY[0x1E4F41108]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey> and conformance _PreferenceTransformModifier<A>);
  }
  return result;
}

uint64_t ToolbarSearchFieldStyle.Implementation.searchToolbarContent(customScopeBar:customAccessory:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v104 = a3;
  uint64_t v101 = type metadata accessor for SearchToolbarItem();
  MEMORY[0x1F4188790](v101);
  uint64_t v102 = (uint64_t)&v83 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v103 = (uint64_t)&v83 - v8;
  type metadata accessor for Button<Text>?();
  MEMORY[0x1F4188790](v9 - 8);
  char v88 = (_WORD *)((char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for ToolbarItemGroup<Button<Text>?>();
  uint64_t v85 = v11;
  MEMORY[0x1F4188790](v11);
  uint64_t v87 = (uint64_t)&v83 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v86 = (uint64_t)&v83 - v14;
  MEMORY[0x1F4188790](v15);
  uint64_t v117 = (uint64_t)&v83 - v16;
  uint64_t v17 = type metadata accessor for SearchFieldConfiguration(0);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v115 = (uint64_t)&v83 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v84 = (uint64_t)&v83 - v20;
  uint64_t v83 = type metadata accessor for UIKitSearchBarAdaptor(0);
  MEMORY[0x1F4188790](v83);
  uint64_t v22 = (char *)&v83 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v83 - v24;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v83 - v27;
  MEMORY[0x1F4188790](v29);
  uint64_t v31 = (char *)&v83 - v30;
  type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(0);
  uint64_t v33 = v32;
  MEMORY[0x1F4188790](v32);
  char v35 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v36);
  uint64_t v38 = (char *)&v83 - v37;
  MEMORY[0x1F4188790](v39);
  uint64_t v116 = (uint64_t)&v83 - v40;
  id v96 = *(id *)a1;
  uint64_t v95 = *(void *)(a1 + 8);
  uint64_t v94 = *(void *)(a1 + 16);
  uint64_t v93 = *(void *)(a1 + 24);
  unint64_t v92 = *(void **)(a1 + 32);
  uint64_t v91 = *(void *)(a1 + 40);
  uint64_t v90 = *(void *)(a1 + 48);
  uint64_t v89 = *(void *)(a1 + 56);
  uint64_t v107 = *(void *)(a1 + 64);
  uint64_t v106 = *(void *)(a1 + 72);
  uint64_t v105 = *(void *)(a1 + 80);
  id v114 = *(id *)a2;
  uint64_t v113 = *(void *)(a2 + 8);
  uint64_t v112 = *(void *)(a2 + 16);
  uint64_t v100 = *(void *)(a2 + 24);
  BOOL v111 = *(void **)(a2 + 32);
  uint64_t v110 = *(void *)(a2 + 40);
  uint64_t v109 = *(void *)(a2 + 48);
  uint64_t v108 = *(void *)(a2 + 56);
  uint64_t v99 = *(void *)(a2 + 64);
  uint64_t v41 = *(void *)(a2 + 72);
  uint64_t v42 = *(void *)(a2 + 80);
  uint64_t v98 = v41;
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)v128);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)&v122);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v122, (uint64_t)&v118);
  uint64_t v97 = v42;
  if (v121 != 2
    || (unint64_t)v120 | *((void *)&v120 + 1) | v118 | *((void *)&v119 + 1) | (unint64_t)v119
    && (v118 != 1 || (unint64_t)v120 | *((void *)&v120 + 1) | *((void *)&v119 + 1) | (unint64_t)v119))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v118);
    char v43 = 0;
  }
  else
  {
    char v43 = 1;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v122);
  outlined init with copy of ToolbarItemPlacement((uint64_t)v128, (uint64_t)v35);
  v35[*(int *)(v33 + 40)] = v43;
  uint64_t v44 = v84;
  outlined init with copy of SearchFieldConfiguration(v3, v84, type metadata accessor for SearchFieldConfiguration);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)&v122);
  uint64_t v118 = 23;
  long long v119 = 0u;
  long long v120 = 0u;
  char v121 = 2;
  char v45 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v122, (uint64_t)&v118);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v122);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v118);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v44, (uint64_t)v22, type metadata accessor for SearchFieldConfiguration);
  v22[*(int *)(v83 + 20)] = (v45 & 1) == 0;
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v22, (uint64_t)v25, type metadata accessor for UIKitSearchBarAdaptor);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v25, (uint64_t)v28, type metadata accessor for UIKitSearchBarAdaptor);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v28, (uint64_t)v31, type metadata accessor for UIKitSearchBarAdaptor);
  outlined destroy of ToolbarItemPlacement((uint64_t)v128);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v31, (uint64_t)&v35[*(int *)(v33 + 36)], type metadata accessor for UIKitSearchBarAdaptor);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v35, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v38, v116, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
  if (one-time initialization token for search != -1) {
    swift_once();
  }
  outlined init with copy of ToolbarItemPlacement((uint64_t)&static ToolbarItemPlacement.search, (uint64_t)v128);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)&v122);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v122, (uint64_t)&v118);
  uint64_t v46 = v117;
  uint64_t v47 = v115;
  if (v121 != 2
    || (unint64_t)v120 | *((void *)&v120 + 1) | v118 | *((void *)&v119 + 1) | (unint64_t)v119
    && (v118 != 1 || (unint64_t)v120 | *((void *)&v120 + 1) | *((void *)&v119 + 1) | (unint64_t)v119))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v118);
    char v48 = 0;
  }
  else
  {
    char v48 = 1;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v122);
  uint64_t v49 = v87;
  outlined init with copy of ToolbarItemPlacement((uint64_t)v128, v87);
  uint64_t v50 = v85;
  *(unsigned char *)(v49 + *(int *)(v85 + 40)) = v48;
  uint64_t v51 = v88;
  ToolbarSearchFieldStyle.Implementation.cancelButton.getter(v88);
  outlined destroy of ToolbarItemPlacement((uint64_t)v128);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)v51, v49 + *(int *)(v50 + 36), (uint64_t (*)(void))type metadata accessor for Button<Text>?);
  uint64_t v52 = v49;
  uint64_t v53 = v86;
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v52, v86, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v53, v46, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  outlined init with copy of SearchFieldConfiguration(v3, v47, type metadata accessor for SearchFieldConfiguration);
  ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter((uint64_t)v128);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v128, (uint64_t)&v122);
  if (v127 != 2 || v125 | v126 | v122 | v124 | v123 && (v122 != 1 || v125 | v126 | v124 | v123))
  {
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v122);
    LODWORD(v87) = 1;
  }
  else
  {
    LODWORD(v87) = 0;
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v128);
  uint64_t v54 = v3 + *(int *)(type metadata accessor for ToolbarSearchFieldStyle.Implementation() + 32);
  uint64_t v55 = *(void *)v54;
  uint64_t v56 = *(unsigned __int8 *)(v54 + 8);
  id v57 = v96;
  uint64_t v58 = v95;
  uint64_t v59 = v94;
  uint64_t v60 = v93;
  uint64_t v61 = v92;
  uint64_t v62 = v91;
  uint64_t v63 = v90;
  uint64_t v64 = v89;
  outlined copy of BoundInputsView?(v96, v95, v94, v93, v92);
  outlined copy of Environment<Bool>.Content(v55, v56);
  LODWORD(v88) = specialized Environment.wrappedValue.getter(v55, v56);
  outlined consume of Environment<Bool?>.Content(v55, v56);
  uint64_t v65 = v102;
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v115, v102, type metadata accessor for SearchFieldConfiguration);
  uint64_t v66 = (int *)v101;
  *(unsigned char *)(v65 + *(int *)(v101 + 20)) = v87;
  uint64_t v67 = v65 + v66[6];
  *(void *)(v67 + 80) = 0;
  *(_OWORD *)(v67 + 48) = 0u;
  *(_OWORD *)(v67 + 64) = 0u;
  *(_OWORD *)(v67 + 16) = 0u;
  *(_OWORD *)(v67 + 32) = 0u;
  *(_OWORD *)uint64_t v67 = 0u;
  uint64_t v68 = (void *)(v65 + v66[7]);
  *uint64_t v68 = v57;
  v68[1] = v58;
  v68[2] = v59;
  v68[3] = v60;
  v68[4] = v61;
  v68[5] = v62;
  v68[6] = v63;
  v68[7] = v64;
  uint64_t v69 = v106;
  v68[8] = v107;
  v68[9] = v69;
  v68[10] = v105;
  *(unsigned char *)(v65 + v66[8]) = (_BYTE)v88;
  uint64_t v70 = (void *)(v65 + v66[9]);
  uint64_t v71 = v113;
  *uint64_t v70 = v114;
  v70[1] = v71;
  uint64_t v72 = v100;
  v70[2] = v112;
  v70[3] = v72;
  uint64_t v73 = v110;
  v70[4] = v111;
  v70[5] = v73;
  uint64_t v74 = v108;
  v70[6] = v109;
  v70[7] = v74;
  uint64_t v75 = v98;
  v70[8] = v99;
  v70[9] = v75;
  v70[10] = v97;
  uint64_t v76 = v103;
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v65, v103, (uint64_t (*)(void))type metadata accessor for SearchToolbarItem);
  type metadata accessor for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)();
  uint64_t v78 = v104 + *(int *)(v77 + 48);
  uint64_t v79 = v104 + *(int *)(v77 + 64);
  uint64_t v80 = v116;
  outlined init with copy of SearchFieldConfiguration(v116, v104, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
  uint64_t v81 = v117;
  outlined init with copy of SearchFieldConfiguration(v117, v78, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  _s7SwiftUI24SearchFieldConfigurationVWObTm_0(v76, v79, (uint64_t (*)(void))type metadata accessor for SearchToolbarItem);
  outlined copy of BoundInputsView?(v114, v113, v112, v72, v111);
  _s7SwiftUI16SearchFieldStateVWOhTm_1(v81, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<Button<Text>?>);
  return _s7SwiftUI16SearchFieldStateVWOhTm_1(v80, (uint64_t (*)(void))type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>);
}

uint64_t outlined init with take of SearchFieldConfiguration(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI24SearchFieldConfigurationVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for UIKitSearchBarAdaptor(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for UIKitSearchBarAdaptor);
}

Swift::Void __swiftcall ToolbarPlacementEnvironment.updateValue()()
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  int v1 = *(_DWORD *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v0 + 48);
  *(void *)&long long v23 = *(void *)(v0 + 8);
  DWORD2(v23) = v1;
  long long v25 = *(_OWORD *)(v0 + 32);
  uint64_t v24 = v2;
  uint64_t v26 = v3;
  _GraphInputs.environment.getter();
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v5 = Value[1];
  *(void *)&long long v27 = *Value;
  *((void *)&v27 + 1) = v5;
  uint64_t v6 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v6, (uint64_t)&v23);
  outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v23, (uint64_t)v21);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v21, (uint64_t)v19);
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain_n();
  swift_retain();
  PropertyList.subscript.setter();
  if (v5)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v21);
  if (!AGGraphGetOutputValue())
  {
    if (*((void *)&v27 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
      lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
      swift_retain();
      swift_retain();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
      lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
      swift_retain();
      PropertyList.subscript.getter();
    }
    swift_release();
    if ((void)v23)
    {
      *(void *)&long long v23 = *(void *)(v0 + 56);
      type metadata accessor for PrimaryBarViewModel(0);
      lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type PrimaryBarViewModel and conformance BarEnvironmentViewModel, (void (*)(uint64_t))type metadata accessor for PrimaryBarViewModel);
      swift_retain();
      *(void *)uint64_t v21 = ObservableObject<>.objectWillChange.getter();
      type metadata accessor for AttributeInvalidatingSubscriber<ObservableObjectPublisher>(0, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, MEMORY[0x1E4F1ABF0], MEMORY[0x1E4F1ABE8], MEMORY[0x1E4F41220]);
      lazy protocol witness table accessor for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>();
      lazy protocol witness table accessor for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>();
      SubscriptionLifetime.subscribe<A>(subscriber:to:)();
      swift_release();
      swift_release();
      swift_release();
    }
  }
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static Semantics.v3.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    uint64_t v7 = AGGraphGetValue();
    outlined init with copy of ToolbarItemPlacement(v7, (uint64_t)&v23);
    *(void *)uint64_t v21 = 5;
    memset(&v21[8], 0, 32);
    char v22 = 2;
    char v8 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v23, (uint64_t)v21);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v21);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v23);
    if (v8)
    {
      static Font.body.getter();
      Font.bold()();
      swift_release();
      EnvironmentValues.defaultFont.setter();
    }
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    long long v23 = v27;
    EnvironmentValues.dynamicTypeSize.getter();
    unsigned int v9 = v21[0];
    if (v21[0] >= 5u) {
      unsigned int v9 = 5;
    }
    if (v9 <= 3) {
      LOBYTE(v9) = 3;
    }
    LOBYTE(v23) = v9;
    EnvironmentValues.dynamicTypeSize.setter();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  memset(v21, 0, sizeof(v21));
  outlined init with copy of ToolbarPlacement.Storage((uint64_t)v21, (uint64_t)v19);
  if (v20 == 7)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    outlined destroy of ToolbarPlacement.Storage((uint64_t)v19);
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v19, (uint64_t)&v23);
    outlined init with copy of ToolbarPlacement.Role((uint64_t)&v23, (uint64_t)v19);
    if (*((void *)&v27 + 1))
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, MEMORY[0x1E4F40930]);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (*(void *)(v18 + 16) && (specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v19), (v10 & 1) != 0))
    {
      swift_retain();
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
      EnvironmentValues.defaultForegroundStyle.setter();
    }
    else
    {
      swift_bridgeObjectRelease();
      outlined destroy of ToolbarPlacement.Role((uint64_t)v19);
    }
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v23);
  }
  uint64_t v11 = *((void *)&v27 + 1);
  uint64_t v12 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v12, (uint64_t)&v23);
  swift_retain();
  swift_retain();
  char v13 = ToolbarItemPlacement.Role.couldBeInPrimaryBar.getter();
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v23);
  if ((v13 & 1) == 0) {
    goto LABEL_35;
  }
  type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
  lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
  swift_retain();
  if (v11)
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  if ((void)v23)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v23)
    {
      *(void *)&long long v23 = static Color.white.getter();
      AnyShapeStyle.init<A>(_:)();
      swift_retain();
      EnvironmentValues.defaultForegroundStyle.setter();
      EnvironmentValues.tint.setter();
    }
  }
  else
  {
LABEL_35:
    swift_release();
    swift_release();
  }
  outlined destroy of ToolbarPlacement((uint64_t)v21);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  static Semantics.v3.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    long long v23 = v27;
    EnvironmentValues.verticalSizeClass.getter();
    if (v21[0] == 2 || (v21[0] & 1) != 0) {
      char v14 = 2;
    }
    else {
      char v14 = 1;
    }
    LOBYTE(v23) = v14;
    EnvironmentValues.imageScale.setter();
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  long long v15 = v27;
  uint64_t v16 = AGGraphGetValue();
  outlined init with copy of ToolbarItemPlacement(v16, (uint64_t)&v23);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  char v17 = ToolbarItemPlacement.Role.couldBeInPrimaryBar.getter();
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v23);
  if ((v17 & 1) == 0) {
    goto LABEL_50;
  }
  type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>();
  lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentObjectKey<PrimaryBarViewModel>>);
  swift_retain();
  if (*((void *)&v15 + 1))
  {
    swift_retain_n();
    swift_retain();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    swift_retain();
    swift_retain();
    PropertyList.subscript.getter();
    swift_release();
  }
  swift_release_n();
  if ((void)v23)
  {
    swift_getKeyPath();
    swift_getKeyPath();
    static Published.subscript.getter();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    if (v23 != 2)
    {
      LOBYTE(v23) = v23 & 1;
      EnvironmentValues.colorScheme.setter();
    }
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  else
  {
LABEL_50:
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_release();
  }
  swift_release();
  long long v23 = v27;
  AGGraphSetOutputValue();
  swift_release();
  swift_release();
}

uint64_t outlined init with copy of ToolbarItemPlacement(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ToolbarItemPlacement(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 40) == 1)
  {
    long long v3 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v3;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  return a1;
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<AllowsToolbarItemBridgingModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t key path getter for EnvironmentValues.toolbarItemPlacement : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ToolbarItemPlacementKey>, (uint64_t)&type metadata for ToolbarItemPlacementKey, (uint64_t)&protocol witness table for ToolbarItemPlacementKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ToolbarItemPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t ToolbarItemPlacement.Role.couldBeInPrimaryBar.getter()
{
  outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v12);
  if (v15 == 2)
  {
    BOOL v1 = v12 == 11 || v12 == 4;
    int8x16_t v2 = vorrq_s8(v13, v14);
    int8x8_t v3 = vorr_s8(*(int8x8_t *)v2.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v2, v2, 8uLL));
    if (v1 && *(void *)&v3 == 0)
    {
      outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v12);
LABEL_14:
      uint64_t v6 = 0;
      goto LABEL_15;
    }
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v12);
  outlined init with copy of ToolbarItemPlacement.Role(v0, (uint64_t)&v12);
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v12, (uint64_t)&v8);
  if (v11 == 2 && v8 == 8)
  {
    int8x16_t v5 = vorrq_s8(v9, v10);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL))) {
      goto LABEL_14;
    }
  }
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v8);
  uint64_t v6 = 1;
LABEL_15:
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v12);
  return v6;
}

uint64_t outlined destroy of ToolbarItemPlacement.Role(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ToolbarItemPlacement.Role(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 40);
  if (v1 >= 2) {
    unsigned int v1 = *(_DWORD *)a1 + 2;
  }
  if (v1 == 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t specialized static ToolbarItemPlacement.Role.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of ToolbarItemPlacement.Role(a1, (uint64_t)&v11);
  outlined init with copy of ToolbarItemPlacement.Role(a2, (uint64_t)v17);
  if (!v16)
  {
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v11, (uint64_t)v10);
    if (!v18)
    {
      char v3 = v10[0] == v17[0];
      goto LABEL_7;
    }
    goto LABEL_132;
  }
  if (v16 != 1)
  {
    if (!(v14 | v15 | v11 | v13 | v12))
    {
      if (v18 != 2) {
        goto LABEL_132;
      }
      int8x16_t v5 = vorrq_s8(*(int8x16_t *)&v17[8], *(int8x16_t *)&v17[24]);
      if (*(void *)&vorr_s8(*(int8x8_t *)v5.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v5, v5, 8uLL)) | *(void *)v17) {
        goto LABEL_132;
      }
      goto LABEL_131;
    }
    uint64_t v4 = v14 | v15 | v13 | v12;
    if (v11 != 1 || v4)
    {
      if (v11 != 2 || v4)
      {
        if (v11 != 3 || v4)
        {
          if (v11 != 4 || v4)
          {
            if (v11 != 5 || v4)
            {
              if (v11 != 6 || v4)
              {
                if (v11 != 7 || v4)
                {
                  if (v11 != 8 || v4)
                  {
                    if (v11 != 9 || v4)
                    {
                      if (v11 != 10 || v4)
                      {
                        if (v11 != 11 || v4)
                        {
                          if (v11 != 12 || v4)
                          {
                            if (v11 != 13 || v4)
                            {
                              if (v11 != 14 || v4)
                              {
                                if (v11 != 15 || v4)
                                {
                                  if (v11 != 16 || v4)
                                  {
                                    if (v11 != 17 || v4)
                                    {
                                      if (v11 != 18 || v4)
                                      {
                                        if (v11 != 19 || v4)
                                        {
                                          if (v11 != 20 || v4)
                                          {
                                            if (v11 != 21 || v4)
                                            {
                                              if (v11 != 22 || v4)
                                              {
                                                if (v11 != 23 || v4)
                                                {
                                                  if (v18 != 2 || *(void *)v17 != 24) {
                                                    goto LABEL_132;
                                                  }
                                                }
                                                else if (v18 != 2 || *(void *)v17 != 23)
                                                {
                                                  goto LABEL_132;
                                                }
                                              }
                                              else if (v18 != 2 || *(void *)v17 != 22)
                                              {
                                                goto LABEL_132;
                                              }
                                            }
                                            else if (v18 != 2 || *(void *)v17 != 21)
                                            {
                                              goto LABEL_132;
                                            }
                                          }
                                          else if (v18 != 2 || *(void *)v17 != 20)
                                          {
                                            goto LABEL_132;
                                          }
                                        }
                                        else if (v18 != 2 || *(void *)v17 != 19)
                                        {
                                          goto LABEL_132;
                                        }
                                      }
                                      else if (v18 != 2 || *(void *)v17 != 18)
                                      {
                                        goto LABEL_132;
                                      }
                                    }
                                    else if (v18 != 2 || *(void *)v17 != 17)
                                    {
                                      goto LABEL_132;
                                    }
                                  }
                                  else if (v18 != 2 || *(void *)v17 != 16)
                                  {
                                    goto LABEL_132;
                                  }
                                }
                                else if (v18 != 2 || *(void *)v17 != 15)
                                {
                                  goto LABEL_132;
                                }
                              }
                              else if (v18 != 2 || *(void *)v17 != 14)
                              {
                                goto LABEL_132;
                              }
                            }
                            else if (v18 != 2 || *(void *)v17 != 13)
                            {
                              goto LABEL_132;
                            }
                          }
                          else if (v18 != 2 || *(void *)v17 != 12)
                          {
                            goto LABEL_132;
                          }
                        }
                        else if (v18 != 2 || *(void *)v17 != 11)
                        {
                          goto LABEL_132;
                        }
                      }
                      else if (v18 != 2 || *(void *)v17 != 10)
                      {
                        goto LABEL_132;
                      }
                    }
                    else if (v18 != 2 || *(void *)v17 != 9)
                    {
                      goto LABEL_132;
                    }
                  }
                  else if (v18 != 2 || *(void *)v17 != 8)
                  {
                    goto LABEL_132;
                  }
                }
                else if (v18 != 2 || *(void *)v17 != 7)
                {
                  goto LABEL_132;
                }
              }
              else if (v18 != 2 || *(void *)v17 != 6)
              {
                goto LABEL_132;
              }
            }
            else if (v18 != 2 || *(void *)v17 != 5)
            {
              goto LABEL_132;
            }
          }
          else if (v18 != 2 || *(void *)v17 != 4)
          {
            goto LABEL_132;
          }
        }
        else if (v18 != 2 || *(void *)v17 != 3)
        {
          goto LABEL_132;
        }
      }
      else if (v18 != 2 || *(void *)v17 != 2)
      {
        goto LABEL_132;
      }
    }
    else if (v18 != 2 || *(void *)v17 != 1)
    {
      goto LABEL_132;
    }
    int8x16_t v6 = vorrq_s8(*(int8x16_t *)&v17[8], *(int8x16_t *)&v17[24]);
    if (!*(void *)&vorr_s8(*(int8x8_t *)v6.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v6, v6, 8uLL)))
    {
LABEL_131:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v11);
      char v3 = 1;
      return v3 & 1;
    }
LABEL_132:
    outlined destroy of (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)((uint64_t)&v11);
    char v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of ToolbarItemPlacement.Role((uint64_t)&v11, (uint64_t)v10);
  if (v18 != 1)
  {
    outlined destroy of AnyHashable((uint64_t)v10);
    goto LABEL_132;
  }
  v8[0] = *(_OWORD *)v17;
  v8[1] = *(_OWORD *)&v17[16];
  uint64_t v9 = *(void *)&v17[32];
  char v3 = MEMORY[0x18C1174E0](v10, v8);
  outlined destroy of AnyHashable((uint64_t)v8);
  outlined destroy of AnyHashable((uint64_t)v10);
LABEL_7:
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v11);
  return v3 & 1;
}

uint64_t outlined init with copy of ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ToolbarItemPlacement.Role(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 40);
  if (v3 >= 2) {
    unsigned int v3 = *(_DWORD *)a2 + 2;
  }
  if (v3 == 1)
  {
    long long v4 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v4;
    (**(void (***)(uint64_t))(v4 - 8))(a1);
    *(unsigned char *)(a1 + 40) = 1;
  }
  else if (v3)
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(_OWORD *)(a1 + 25) = *(_OWORD *)(a2 + 25);
  }
  else
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 40) = 0;
  }
  return a1;
}

uint64_t outlined destroy of (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)(uint64_t a1)
{
  type metadata accessor for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role)()
{
  if (!lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemPlacement.Role, ToolbarItemPlacement.Role));
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarForegroundStyleKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarForegroundStyleKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t ToolbarSearchFieldStyle.Implementation.searchBarItemPlacement.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v4 = v1 + *(int *)(v3 + 24);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(unsigned __int8 *)(v4 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v4, *(unsigned char *)(v4 + 8));
  int v7 = specialized Environment.wrappedValue.getter(v5, v6);
  outlined consume of Environment<Bool?>.Content(v5, v6);
  if (v7 == 4)
  {
    if (one-time initialization token for principal != -1) {
      swift_once();
    }
    uint64_t v8 = &static ToolbarItemPlacement.principal;
  }
  else
  {
    static Semantics.v4.getter();
    if (isLinkedOnOrAfter(_:)()) {
      goto LABEL_12;
    }
    uint64_t v9 = v1 + *(int *)(v3 + 20);
    uint64_t v10 = *(void *)v9;
    uint64_t v11 = *(unsigned __int8 *)(v9 + 8);
    outlined copy of Environment<Bool>.Content(*(void *)v9, *(unsigned char *)(v9 + 8));
    specialized Environment.wrappedValue.getter(v10, v11, &v14);
    outlined consume of Environment<Bool?>.Content(v10, v11);
    if (v14 == 2
      || (v14 & 1) == 0
      || (outlined copy of Environment<Bool>.Content(v5, v6),
          char v12 = specialized Environment.wrappedValue.getter(v5, v6),
          outlined consume of Environment<Bool?>.Content(v5, v6),
          (v12 & 0xFE) != 2))
    {
LABEL_12:
      if (one-time initialization token for automatic != -1) {
        swift_once();
      }
      uint64_t v8 = (uint64_t *)&static ToolbarItemPlacement.automatic;
    }
    else
    {
      if (one-time initialization token for search != -1) {
        swift_once();
      }
      uint64_t v8 = &static ToolbarItemPlacement.search;
    }
  }

  return outlined init with copy of ToolbarItemPlacement((uint64_t)v8, a1);
}

void type metadata accessor for ToolbarItemGroup<Button<Text>?>()
{
  if (!lazy cache variable for type metadata for ToolbarItemGroup<Button<Text>?>)
  {
    type metadata accessor for Button<Text>?();
    lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?((unint64_t *)&lazy protocol witness table cache variable for type Button<Text>? and conformance <A> A?, (void (*)(uint64_t))type metadata accessor for Button<Text>?, (void (*)(void))lazy protocol witness table accessor for type Button<Text> and conformance Button<A>);
    unint64_t v0 = type metadata accessor for ToolbarItemGroup();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ToolbarItemGroup<Button<Text>?>);
    }
  }
}

void type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(uint64_t a1)
{
}

uint64_t outlined destroy of ToolbarItemPlacement(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ToolbarItemPlacement(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40) == 1) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

void type metadata accessor for Button<Text>?()
{
  if (!lazy cache variable for type metadata for Button<Text>?)
  {
    type metadata accessor for Button<Text>(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>?);
    }
  }
}

void type metadata accessor for AttributeInvalidatingSubscriber<ObservableObjectPublisher>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.S()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Envi)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.Se, type metadata accessor for ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedC, (void (*)(uint64_t))type metadata accessor for LazyPlatformItemWriter<LazySearchSuggestionsKey, SearchFieldConfiguration.Suggestions?>);
    type metadata accessor for Button<Text>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarRoleKey>, (uint64_t)&type metadata for ToolbarRoleKey, (uint64_t)&protocol witness table for ToolbarRoleKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<StaticIf<HasCustomScopeBarPredicate, ViewInputsBinding<EnvironmentValues.SearchCustomScopeBar?, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>, _AppearanceActionModifier>, _ValueActionModifier2<Bool>>, _AppearanceActionModifier>, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>>, StaticIf<HasCustomAccessoryPredicate, ModifiedContent<ModifiedContent<ModifiedContent<ViewInputsBinding<Envi);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>;
  if (!lazy protocol witness table cache variable for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>)
  {
    type metadata accessor for Button<Text>(255, &lazy cache variable for type metadata for _ValueActionModifier2<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F408C8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ValueActionModifier2<Bool> and conformance _ValueActionModifier2<A>);
  }
  return result;
}

void type metadata accessor for Button<Text>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA4TextVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void _s7SwiftUI6ButtonVyAA4TextVGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>()
{
  if (!lazy cache variable for type metadata for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>)
  {
    lazy protocol witness table accessor for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier();
    unint64_t v0 = type metadata accessor for _ViewModifier_Content();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>);
    }
  }
}

void type metadata accessor for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)()
{
  if (!lazy cache variable for type metadata for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem))
  {
    type metadata accessor for ToolbarItemGroup<UIKitSearchBarAdaptor>(255);
    type metadata accessor for ToolbarItemGroup<Button<Text>?>();
    type metadata accessor for SearchToolbarItem();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem));
    }
  }
}

void type metadata accessor for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>)
  {
    type metadata accessor for _ViewModifier_Content<AllowsToolbarItemBridgingModifier>();
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.ToolbarUpdateContextKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>, (uint64_t)&type metadata for ToolbarItemBridgingPreferenceKey, (uint64_t)&protocol witness table for ToolbarItemBridgingPreferenceKey, MEMORY[0x1E4F41108]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<AllowsToolbarItemBridgingModifier>, _PreferenceTransformModifier<ToolbarItemBridgingPreferenceKey>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>;
  if (!lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>)
  {
    type metadata accessor for AttributeInvalidatingSubscriber<ObservableObjectPublisher>(255, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, MEMORY[0x1E4F1ABF0], MEMORY[0x1E4F1ABE8], MEMORY[0x1E4F41220]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>;
  if (!lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>)
  {
    type metadata accessor for AttributeInvalidatingSubscriber<ObservableObjectPublisher>(255, &lazy cache variable for type metadata for AttributeInvalidatingSubscriber<ObservableObjectPublisher>, MEMORY[0x1E4F1ABF0], MEMORY[0x1E4F1ABE8], MEMORY[0x1E4F41220]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AttributeInvalidatingSubscriber<ObservableObjectPublisher> and conformance AttributeInvalidatingSubscriber<A>);
  }
  return result;
}

uint64_t ToolbarSearchFieldStyle.Implementation.cancelButton.getter@<X0>(_WORD *a1@<X8>)
{
  uint64_t v3 = type metadata accessor for ToolbarSearchFieldStyle.Implementation();
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v6 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v8 = (unsigned __int8 *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_0(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  int v9 = *v8;
  _s7SwiftUI16SearchFieldStateVWOhTm_1((uint64_t)v8, type metadata accessor for SearchFieldState);
  if (v9 == 2)
  {
    type metadata accessor for Button<Text>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    return (*(uint64_t (**)(_WORD *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(a1, 1, 1, v10);
  }
  else
  {
    outlined init with copy of SearchFieldConfiguration(v1, (uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
    unint64_t v12 = (*(unsigned __int8 *)(v4 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v13 = swift_allocObject();
    _s7SwiftUI24SearchFieldConfigurationVWObTm_0((uint64_t)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0), v13 + v12, (uint64_t (*)(void))type metadata accessor for ToolbarSearchFieldStyle.Implementation);
    *a1 = 256;
    type metadata accessor for Button<Text>(0, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    uint64_t v15 = v14;
    char v16 = (uint64_t (**)())((char *)a1 + *(int *)(v14 + 36));
    *char v16 = partial apply for closure #1 in ToolbarSearchFieldStyle.Implementation.cancelButton.getter;
    v16[1] = (uint64_t (*)())v13;
    type metadata accessor for ButtonAction();
    swift_storeEnumTagMultiPayload();
    char v17 = (char *)a1 + *(int *)(v15 + 40);
    *(void *)char v17 = static Text.System.cancel.getter();
    *((void *)v17 + 1) = v18;
    v17[16] = v19 & 1;
    *((void *)v17 + 3) = v20;
    return (*(uint64_t (**)(_WORD *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a1, 0, 1, v15);
  }
}

void storeEnumTagSinglePayload for Button(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(type metadata accessor for URL() - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64) + ((v9 + 75) & ~v9);
  uint64_t v11 = 48;
  if ((unint64_t)(v10 + 1) > 0x30) {
    uint64_t v11 = v10 + 1;
  }
  uint64_t v12 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v13 = *(_DWORD *)(v12 + 84);
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  if (v13 <= 0xFD) {
    unsigned int v15 = 253;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v12 + 84);
  }
  uint64_t v16 = v9 | 7;
  size_t v17 = v11 + 1;
  uint64_t v18 = v11 + 1 + v14;
  size_t v19 = ((v18 + ((v16 + 2) & ~v16)) & ~v14) + *(void *)(v12 + 64);
  if (a3 <= v15)
  {
    int v20 = 0;
  }
  else if (v19 <= 3)
  {
    unsigned int v24 = ((a3 - v15 + ~(-1 << (8 * v19))) >> (8 * v19)) + 1;
    if (HIWORD(v24))
    {
      int v20 = 4;
    }
    else if (v24 >= 0x100)
    {
      int v20 = 2;
    }
    else
    {
      int v20 = v24 > 1;
    }
  }
  else
  {
    int v20 = 1;
  }
  if (v15 >= a2)
  {
    uint64_t v23 = ~v14;
    switch(v20)
    {
      case 1:
        a1[v19] = 0;
        if (a2) {
          goto LABEL_26;
        }
        break;
      case 2:
        *(_WORD *)&a1[v19] = 0;
        if (a2) {
          goto LABEL_26;
        }
        break;
      case 3:
LABEL_54:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v19] = 0;
        goto LABEL_25;
      default:
LABEL_25:
        if (a2)
        {
LABEL_26:
          uint64_t v26 = (unsigned char *)((unint64_t)&a1[v16 + 2] & ~v16);
          if (v13 > 0xFD)
          {
            long long v27 = *(void (**)(unint64_t, uint64_t))(v12 + 56);
            v27((unint64_t)&v26[v18] & v23, a2);
          }
          else if (a2 > 0xFD)
          {
            if (v17 <= 3) {
              int v28 = ~(-1 << (8 * v17));
            }
            else {
              int v28 = -1;
            }
            if (v11 != -1)
            {
              int v29 = v28 & (a2 - 254);
              if (v17 <= 3) {
                int v30 = v11 + 1;
              }
              else {
                int v30 = 4;
              }
              bzero(v26, v17);
              switch(v30)
              {
                case 2:
                  *(_WORD *)uint64_t v26 = v29;
                  break;
                case 3:
                  *(_WORD *)uint64_t v26 = v29;
                  void v26[2] = BYTE2(v29);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v26 = v29;
                  break;
                default:
                  *uint64_t v26 = v29;
                  break;
              }
            }
          }
          else
          {
            v26[v11] = -(char)a2;
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v21 = ~v15 + a2;
    if (v19 < 4)
    {
      int v22 = (v21 >> (8 * v19)) + 1;
      if (v19)
      {
        int v25 = v21 & ~(-1 << (8 * v19));
        bzero(a1, v19);
        if (v19 == 3)
        {
          *(_WORD *)a1 = v25;
          a1[2] = BYTE2(v25);
        }
        else if (v19 == 2)
        {
          *(_WORD *)a1 = v25;
        }
        else
        {
          *a1 = v25;
        }
      }
    }
    else
    {
      bzero(a1, v19);
      *(_DWORD *)a1 = v21;
      int v22 = 1;
    }
    switch(v20)
    {
      case 1:
        a1[v19] = v22;
        break;
      case 2:
        *(_WORD *)&a1[v19] = v22;
        break;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)&a1[v19] = v22;
        break;
      default:
        return;
    }
  }
}

void type metadata accessor for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>()
{
  if (!lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>)
  {
    type metadata accessor for AccessibilityValueStorage?(255, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomAccessory?);
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255);
    lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?(&lazy protocol witness table cache variable for type EnvironmentValues.SearchCustomAccessory? and conformance <A> A?, &lazy cache variable for type metadata for EnvironmentValues.SearchCustomAccessory?);
    lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ViewInputsBinding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputsBinding<EnvironmentValues.SearchCustomAccessory?, ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(255);
    lazy protocol witness table accessor for type ToolbarSearchFieldStyle.Implementation and conformance ToolbarSearchFieldStyle.Implementation(&lazy protocol witness table cache variable for type _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?> and conformance _UnaryViewAdaptor<A>, (void (*)(uint64_t))type metadata accessor for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>, ToolbarModifier<(), TupleToolbarContent<TupleToolbarContent<(ToolbarItemGroup<UIKitSearchBarAdaptor>, ToolbarItemGroup<Button<Text>?>, SearchToolbarItem)>>>>(uint64_t a1)
{
}

void type metadata accessor for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>()
{
  if (!lazy cache variable for type metadata for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>)
  {
    type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>?(255);
    lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?(&lazy protocol witness table cache variable for type IDView<SearchFieldConfiguration.Suggestions, Bool>? and conformance <A> A?, type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>?, (void (*)(void))lazy protocol witness table accessor for type IDView<SearchFieldConfiguration.Suggestions, Bool> and conformance IDView<A, B>);
    unint64_t v0 = type metadata accessor for _UnaryViewAdaptor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UnaryViewAdaptor<IDView<SearchFieldConfiguration.Suggestions, Bool>?>);
    }
  }
}

void type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>?(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type Button<Text>? and conformance <A> A?(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ToolbarSearchFieldStyle.Implementation and conformance ToolbarSearchFieldStyle.Implementation(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>()
{
  if (!lazy cache variable for type metadata for IDView<SearchFieldConfiguration.Suggestions, Bool>)
  {
    unint64_t v0 = type metadata accessor for IDView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IDView<SearchFieldConfiguration.Suggestions, Bool>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type IDView<SearchFieldConfiguration.Suggestions, Bool> and conformance IDView<A, B>()
{
  return lazy protocol witness table accessor for type ToolbarSearchFieldStyle.Implementation and conformance ToolbarSearchFieldStyle.Implementation((unint64_t *)&lazy protocol witness table cache variable for type IDView<SearchFieldConfiguration.Suggestions, Bool> and conformance IDView<A, B>, (void (*)(uint64_t))type metadata accessor for IDView<SearchFieldConfiguration.Suggestions, Bool>);
}

unint64_t lazy protocol witness table accessor for type Button<Text> and conformance Button<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>;
  if (!lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>)
  {
    type metadata accessor for Button<Text>(255, (unint64_t *)&lazy cache variable for type metadata for Button<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for Button);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Button<Text> and conformance Button<A>);
  }
  return result;
}

uint64_t static ResolvedPicker._makeViewList(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v5 = *a1;
  uint64_t v6 = *(void *)a2;
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  int v9 = *(_DWORD *)(a2 + 24);
  int v10 = *(_DWORD *)(a2 + 28);
  int v11 = *(_DWORD *)(a2 + 32);
  int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v12 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v18 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 72);
  int v19 = *(_DWORD *)(a2 + 64);
  char v20 = *(unsigned char *)(a2 + 80);
  lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v24)
  {
    uint64_t v14 = v25;
    v37[0] = v5;
    uint64_t v24 = v6;
    LODWORD(v25) = v7;
    uint64_t v26 = v8;
    int v27 = v9;
    int v28 = v10;
    int v29 = v11;
    int v30 = v16;
    uint64_t v31 = v12;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    int v34 = v19;
    uint64_t v35 = v13;
    char v36 = v20;
    return (*(uint64_t (**)(_DWORD *))(v14 + 16))(v37);
  }
  else
  {
    v37[0] = v5;
    uint64_t v24 = v6;
    LODWORD(v25) = v7;
    uint64_t v26 = v8;
    int v27 = v9;
    int v28 = v10;
    int v29 = v11;
    int v30 = v16;
    uint64_t v31 = v12;
    uint64_t v32 = v17;
    uint64_t v33 = v18;
    int v34 = v19;
    uint64_t v35 = v13;
    char v36 = v20;
    return static ResolvedPicker.makeViewList<A>(view:style:inputs:)((uint64_t)v37, 0, &v24, a3, (uint64_t)&type metadata for DefaultPickerStyle, a4, (uint64_t)&protocol witness table for DefaultPickerStyle, a5);
  }
}

uint64_t static PickerStyleWriter._makeInputs(modifier:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(*(void *)(a3 - 8) + 64)) {
    closure #1 in static PickerStyleWriter._makeInputs(modifier:inputs:)(1, a3);
  }
  AGGraphCreateOffsetAttribute2();
  type metadata accessor for StyleType();
  lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput();
  return PropertyList.subscript.setter();
}

uint64_t type metadata accessor for PickerStyleWriter()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type PickerStyleInput and conformance PickerStyleInput()
{
  unint64_t result = lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput;
  if (!lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput;
  if (!lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PickerStyleInput and conformance PickerStyleInput);
  }
  return result;
}

uint64_t LabelGroupStyleModifier.styleBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  v21[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](a1);
  int v7 = (char *)v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for StyleApplicator();
  MEMORY[0x1F4188790](v8);
  int v10 = (char *)v21 - v9;
  uint64_t v11 = type metadata accessor for _VariadicView.Tree();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v3, v4, v16);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v10, v7, v4);
  _VariadicView.Tree.init(_:content:)();
  v21[2] = swift_getWitnessTable();
  v21[3] = &protocol witness table for LabelGroupStyleConfiguration.Content;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  int v19 = *(void (**)(char *, uint64_t))(v12 + 8);
  v19(v14, v11);
  static ViewBuilder.buildExpression<A>(_:)(v18);
  return ((uint64_t (*)(char *, uint64_t))v19)(v18, v11);
}

uint64_t partial apply for closure #2 in StyleApplicator.body(children:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  type metadata accessor for StyleApplicator();

  return closure #2 in StyleApplicator.body(children:)(a1, v5, v6, a2);
}

uint64_t type metadata accessor for StyleApplicator()
{
  return __swift_instantiateGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollGeometryChangeModifier<A>()
{
  return &protocol witness table for OnScrollGeometryChangeModifier<A>;
}

void static ScrollClipDisabledBehavior.expandsVisibleRegion.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

_UNKNOWN **base witness table accessor for ViewModifier in _CoordinateSpaceModifier<A>()
{
  return &protocol witness table for _CoordinateSpaceModifier<A>;
}

uint64_t base witness table accessor for ViewModifier in CustomHoverEffectModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for ViewModifier in ContextMenuModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in _TaskModifier.InnerModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for OnModifierKeysChangedModifier()
{
  swift_release();

  return swift_release();
}

uint64_t LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(uint64_t a1)
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(a1);
}

{
  double v1;
  void (*v2)(double);

  uint64_t v1 = MEMORY[0x1F4188790](a1);
  v2(v1);
  return _VariadicView.Tree.init(root:content:)();
}

uint64_t LazyHGrid.init(rows:alignment:spacing:pinnedViews:content:)(uint64_t a1)
{
  return LazyVGrid.init(columns:alignment:spacing:pinnedViews:content:)(a1);
}

unint64_t instantiation function for generic protocol witness table for LazyVStackLayout(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeView(root:inputs:body:) in conformance LazyVStackLayout@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  _OWORD v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static LazyLayout._makeView(root:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static LazyLayout._makeView(root:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(void *__return_ptr, uint64_t, long long *)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  long long v43 = v8;
  long long v44 = v6;
  __int16 v9 = WORD2(v6);
  *(_OWORD *)&v39[16] = v6;
  *(_OWORD *)uint64_t v40 = v7;
  *(_OWORD *)&v40[16] = *(_OWORD *)(a2 + 64);
  int v41 = *(_DWORD *)(a2 + 80);
  long long v38 = v42;
  *(_OWORD *)uint64_t v39 = v8;
  *(_DWORD *)&v39[20] = DWORD1(v6) & 0xFFFFFFF3 | 4;
  LOBYTE(v45) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  *(void *)&long long v45 = v38;
  DWORD2(v45) = DWORD2(v38);
  *(_OWORD *)&v46[8] = *(_OWORD *)&v39[8];
  *(void *)uint64_t v46 = *(void *)v39;
  *(void *)&v46[24] = *(void *)&v39[24];
  *(void *)uint64_t v47 = *(void *)v40;
  *(_OWORD *)&v47[8] = *(_OWORD *)&v40[8];
  *(void *)&v47[24] = *(void *)&v40[24];
  int v48 = v41;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v37, v10, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v32) = HIDWORD(v42);
  outlined retain of _GraphInputs((uint64_t)&v42);
  _ViewListInputs.init(_:)();
  *(void *)((char *)&v32 + 4) = *(void *)((char *)&v45 + 4);
  *(void *)uint64_t v33 = *(void *)v46;
  *(_OWORD *)&v33[8] = *(_OWORD *)&v46[8];
  *(void *)&v33[24] = *(void *)&v46[24];
  long long v34 = *(_OWORD *)v47;
  LODWORD(v35) = *(_DWORD *)&v47[16];
  *((void *)&v35 + 1) = *(void *)&v47[24];
  LOBYTE(v36) = v48;
  uint64_t v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v32) = a1;
  long long v45 = v42;
  *(_OWORD *)uint64_t v46 = v43;
  *(_OWORD *)&v46[16] = v44;
  lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout();
  uint64_t v12 = static Animatable.makeAnimatable(value:inputs:)();
  if ((v9 & 0x1000) != 0) {
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v46[16] = *(_OWORD *)&v39[16];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v40;
  *(_OWORD *)&v47[16] = *(_OWORD *)&v40[16];
  int v48 = v41;
  long long v45 = v38;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v39;
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyLayoutViewCache<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v45);
  uint64_t v13 = specialized _LazyLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v45, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized LazyLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 120);
  unsigned int v15 = *(_DWORD *)(v13 + 128);
  uint64_t v16 = *(unsigned int *)(v13 + 132);
  unsigned int v29 = *(_DWORD *)(v13 + 132);
  if ((v9 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain_n();
  specialized static LazyLayout.accessibilityRole.getter(&v30);
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v33[16] = *(_OWORD *)(a2 + 32);
  long long v34 = v17;
  long long v35 = *(_OWORD *)(a2 + 64);
  int v36 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  long long v32 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v33 = v18;
  unint64_t v19 = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  swift_bridgeObjectRelease();
  if ((v19 & 0x100000000) == 0)
  {
    LOBYTE(v32) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v16 = v29;
  }
  *(void *)&long long v32 = v14;
  *((void *)&v32 + 1) = __PAIR64__(v16, v15);
  uint64_t v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0) {
    goto LABEL_12;
  }
  int v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  int v22 = v31;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v28 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  *(void *)&v33[8] = v23;
  *(void *)&v33[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v32) = v22;
  DWORD1(v32) = v22;
  specialized Dictionary.subscript.setter((uint64_t)&v32, MEMORY[0x1E4F40AA8]);
  LOBYTE(v32) = 1;
  DWORD1(v32) = v21;
  *((void *)&v32 + 1) = v28;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(void *)&long long v32 = *(void *)(a2 + 48);
  DWORD2(v32) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  char v24 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v24) {
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v28, (long long *)a2, v14, v15 | (unint64_t)(v16 << 32), 0);
  }
  swift_bridgeObjectRelease();
  LOBYTE(v32) = (v24 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  LODWORD(v16) = v29;
LABEL_14:
  *(void *)a4 = v14;
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v16;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v28;
  unsigned int v29;
  char v30;
  int v31;
  long long v32;
  unsigned char v33[32];
  long long v34;
  long long v35;
  int v36;
  void v37[9];
  long long v38;
  unsigned char v39[32];
  unsigned char v40[32];
  int v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  unsigned char v46[32];
  unsigned char v47[32];
  int v48;
  uint64_t v49;

  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  long long v43 = v8;
  long long v44 = v6;
  __int16 v9 = DWORD1(v6);
  *(_OWORD *)&v39[16] = v6;
  *(_OWORD *)uint64_t v40 = v7;
  *(_OWORD *)&v40[16] = *(_OWORD *)(a2 + 64);
  int v41 = *(_DWORD *)(a2 + 80);
  long long v38 = v42;
  *(_OWORD *)uint64_t v39 = v8;
  *(_DWORD *)&v39[20] = (v9 & 0xFFFFFFFB ^ 8) & v9;
  LOBYTE(v45) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  *(void *)&long long v45 = v38;
  DWORD2(v45) = DWORD2(v38);
  *(_OWORD *)&v46[8] = *(_OWORD *)&v39[8];
  *(void *)uint64_t v46 = *(void *)v39;
  *(void *)&v46[24] = *(void *)&v39[24];
  *(void *)uint64_t v47 = *(void *)v40;
  *(_OWORD *)&v47[8] = *(_OWORD *)&v40[8];
  *(void *)&v47[24] = *(void *)&v40[24];
  int v48 = v41;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v37, v10, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v32) = HIDWORD(v42);
  outlined retain of _GraphInputs((uint64_t)&v42);
  _ViewListInputs.init(_:)();
  *(void *)((char *)&v32 + 4) = *(void *)((char *)&v45 + 4);
  *(void *)uint64_t v33 = *(void *)v46;
  *(_OWORD *)&v33[8] = *(_OWORD *)&v46[8];
  *(void *)&v33[24] = *(void *)&v46[24];
  long long v34 = *(_OWORD *)v47;
  LODWORD(v35) = *(_DWORD *)&v47[16];
  *((void *)&v35 + 1) = *(void *)&v47[24];
  LOBYTE(v36) = v48;
  uint64_t v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v32) = a1;
  long long v45 = v42;
  *(_OWORD *)uint64_t v46 = v43;
  *(_OWORD *)&v46[16] = v44;
  lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout();
  uint64_t v12 = static Animatable.makeAnimatable(value:inputs:)();
  if ((v9 & 0x1000) != 0) {
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v46[16] = *(_OWORD *)&v39[16];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v40;
  *(_OWORD *)&v47[16] = *(_OWORD *)&v40[16];
  int v48 = v41;
  long long v45 = v38;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v39;
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyLayoutViewCache<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v45);
  uint64_t v13 = specialized _LazyLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v45, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized LazyLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 120);
  unsigned int v15 = *(_DWORD *)(v13 + 128);
  uint64_t v16 = *(unsigned int *)(v13 + 132);
  unsigned int v29 = *(_DWORD *)(v13 + 132);
  if ((v9 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain_n();
  specialized static LazyLayout.accessibilityRole.getter(&v30);
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v33[16] = *(_OWORD *)(a2 + 32);
  long long v34 = v17;
  long long v35 = *(_OWORD *)(a2 + 64);
  int v36 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  long long v32 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v33 = v18;
  unint64_t v19 = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  swift_bridgeObjectRelease();
  if ((v19 & 0x100000000) == 0)
  {
    LOBYTE(v32) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v16 = v29;
  }
  *(void *)&long long v32 = v14;
  *((void *)&v32 + 1) = __PAIR64__(v16, v15);
  uint64_t v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0) {
    goto LABEL_12;
  }
  int v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  int v22 = v31;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v28 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  *(void *)&v33[8] = v23;
  *(void *)&v33[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v32) = v22;
  DWORD1(v32) = v22;
  specialized Dictionary.subscript.setter((uint64_t)&v32, MEMORY[0x1E4F40AA8]);
  LOBYTE(v32) = 1;
  DWORD1(v32) = v21;
  *((void *)&v32 + 1) = v28;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(void *)&long long v32 = *(void *)(a2 + 48);
  DWORD2(v32) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  char v24 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v24) {
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v28, (long long *)a2, v14, v15 | (unint64_t)(v16 << 32), 0);
  }
  swift_bridgeObjectRelease();
  LOBYTE(v32) = (v24 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  LODWORD(v16) = v29;
LABEL_14:
  *(void *)a4 = v14;
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v16;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v28;
  unsigned int v29;
  char v30;
  int v31;
  long long v32;
  unsigned char v33[32];
  long long v34;
  long long v35;
  int v36;
  void v37[9];
  long long v38;
  unsigned char v39[32];
  unsigned char v40[32];
  int v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  unsigned char v46[32];
  unsigned char v47[32];
  int v48;
  uint64_t v49;

  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  long long v43 = v8;
  long long v44 = v6;
  __int16 v9 = WORD2(v6);
  *(_OWORD *)&v39[16] = v6;
  *(_OWORD *)uint64_t v40 = v7;
  *(_OWORD *)&v40[16] = *(_OWORD *)(a2 + 64);
  int v41 = *(_DWORD *)(a2 + 80);
  long long v38 = v42;
  *(_OWORD *)uint64_t v39 = v8;
  *(_DWORD *)&v39[20] = DWORD1(v6) | 0xC;
  LOBYTE(v45) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  *(void *)&long long v45 = v38;
  DWORD2(v45) = DWORD2(v38);
  *(_OWORD *)&v46[8] = *(_OWORD *)&v39[8];
  *(void *)uint64_t v46 = *(void *)v39;
  *(void *)&v46[24] = *(void *)&v39[24];
  *(void *)uint64_t v47 = *(void *)v40;
  *(_OWORD *)&v47[8] = *(_OWORD *)&v40[8];
  *(void *)&v47[24] = *(void *)&v40[24];
  int v48 = v41;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v37, v10, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v32) = HIDWORD(v42);
  outlined retain of _GraphInputs((uint64_t)&v42);
  _ViewListInputs.init(_:)();
  *(void *)((char *)&v32 + 4) = *(void *)((char *)&v45 + 4);
  *(void *)uint64_t v33 = *(void *)v46;
  *(_OWORD *)&v33[8] = *(_OWORD *)&v46[8];
  *(void *)&v33[24] = *(void *)&v46[24];
  long long v34 = *(_OWORD *)v47;
  LODWORD(v35) = *(_DWORD *)&v47[16];
  *((void *)&v35 + 1) = *(void *)&v47[24];
  LOBYTE(v36) = v48;
  uint64_t v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v32) = a1;
  long long v45 = v42;
  *(_OWORD *)uint64_t v46 = v43;
  *(_OWORD *)&v46[16] = v44;
  lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout();
  uint64_t v12 = static Animatable.makeAnimatable(value:inputs:)();
  if ((v9 & 0x1000) != 0) {
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v46[16] = *(_OWORD *)&v39[16];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v40;
  *(_OWORD *)&v47[16] = *(_OWORD *)&v40[16];
  int v48 = v41;
  long long v45 = v38;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v39;
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyLayoutViewCache<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v45);
  uint64_t v13 = specialized _LazyLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v45, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized LazyLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 120);
  unsigned int v15 = *(_DWORD *)(v13 + 128);
  uint64_t v16 = *(unsigned int *)(v13 + 132);
  unsigned int v29 = *(_DWORD *)(v13 + 132);
  if ((v9 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain_n();
  specialized static LazyLayout.accessibilityRole.getter(&v30);
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v33[16] = *(_OWORD *)(a2 + 32);
  long long v34 = v17;
  long long v35 = *(_OWORD *)(a2 + 64);
  int v36 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  long long v32 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v33 = v18;
  unint64_t v19 = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  swift_bridgeObjectRelease();
  if ((v19 & 0x100000000) == 0)
  {
    LOBYTE(v32) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v16 = v29;
  }
  *(void *)&long long v32 = v14;
  *((void *)&v32 + 1) = __PAIR64__(v16, v15);
  uint64_t v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0) {
    goto LABEL_12;
  }
  int v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  int v22 = v31;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v28 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  *(void *)&v33[8] = v23;
  *(void *)&v33[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v32) = v22;
  DWORD1(v32) = v22;
  specialized Dictionary.subscript.setter((uint64_t)&v32, MEMORY[0x1E4F40AA8]);
  LOBYTE(v32) = 1;
  DWORD1(v32) = v21;
  *((void *)&v32 + 1) = v28;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(void *)&long long v32 = *(void *)(a2 + 48);
  DWORD2(v32) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  char v24 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v24) {
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v28, (long long *)a2, v14, v15 | (unint64_t)(v16 << 32), 0);
  }
  swift_bridgeObjectRelease();
  LOBYTE(v32) = (v24 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  LODWORD(v16) = v29;
LABEL_14:
  *(void *)a4 = v14;
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v16;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  __int16 v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  long long v17;
  long long v18;
  unint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v28;
  unsigned int v29;
  char v30;
  int v31;
  long long v32;
  unsigned char v33[32];
  long long v34;
  long long v35;
  int v36;
  void v37[9];
  long long v38;
  unsigned char v39[32];
  unsigned char v40[32];
  int v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  unsigned char v46[32];
  unsigned char v47[32];
  int v48;
  uint64_t v49;

  uint64_t v49 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a2 + 32);
  long long v7 = *(_OWORD *)(a2 + 48);
  long long v8 = *(_OWORD *)(a2 + 16);
  long long v42 = *(_OWORD *)a2;
  long long v43 = v8;
  long long v44 = v6;
  __int16 v9 = WORD2(v6);
  *(_OWORD *)&v39[16] = v6;
  *(_OWORD *)uint64_t v40 = v7;
  *(_OWORD *)&v40[16] = *(_OWORD *)(a2 + 64);
  int v41 = *(_DWORD *)(a2 + 80);
  long long v38 = v42;
  *(_OWORD *)uint64_t v39 = v8;
  *(_DWORD *)&v39[20] = DWORD1(v6) & 0xFFFFFFF3 | 4;
  LOBYTE(v45) = 1;
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  PropertyList.subscript.setter();
  if (static SemanticFeature.isEnabled.getter()) {
    PreferencesInputs.remove<A>(_:)();
  }
  *(void *)&long long v45 = v38;
  DWORD2(v45) = DWORD2(v38);
  *(_OWORD *)&v46[8] = *(_OWORD *)&v39[8];
  *(void *)uint64_t v46 = *(void *)v39;
  *(void *)&v46[24] = *(void *)&v39[24];
  *(void *)uint64_t v47 = *(void *)v40;
  *(_OWORD *)&v47[8] = *(_OWORD *)&v40[8];
  *(void *)&v47[24] = *(void *)&v40[24];
  int v48 = v41;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v10 = swift_bridgeObjectRetain();
  a3(v37, v10, &v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  HIDWORD(v32) = HIDWORD(v42);
  outlined retain of _GraphInputs((uint64_t)&v42);
  _ViewListInputs.init(_:)();
  *(void *)((char *)&v32 + 4) = *(void *)((char *)&v45 + 4);
  *(void *)uint64_t v33 = *(void *)v46;
  *(_OWORD *)&v33[8] = *(_OWORD *)&v46[8];
  *(void *)&v33[24] = *(void *)&v46[24];
  long long v34 = *(_OWORD *)v47;
  LODWORD(v35) = *(_DWORD *)&v47[16];
  *((void *)&v35 + 1) = *(void *)&v47[24];
  LOBYTE(v36) = v48;
  uint64_t v11 = _ViewListOutputs.makeAttribute(inputs:)();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  LODWORD(v32) = a1;
  long long v45 = v42;
  *(_OWORD *)uint64_t v46 = v43;
  *(_OWORD *)&v46[16] = v44;
  lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout();
  uint64_t v12 = static Animatable.makeAnimatable(value:inputs:)();
  if ((v9 & 0x1000) != 0) {
    PreferenceKeys.add(_:)();
  }
  *(_OWORD *)&v46[16] = *(_OWORD *)&v39[16];
  *(_OWORD *)uint64_t v47 = *(_OWORD *)v40;
  *(_OWORD *)&v47[16] = *(_OWORD *)&v40[16];
  int v48 = v41;
  long long v45 = v38;
  *(_OWORD *)uint64_t v46 = *(_OWORD *)v39;
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for _LazyLayoutViewCache<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for _LazyLayoutViewCache);
  swift_allocObject();
  outlined retain of _ViewInputs((uint64_t)&v45);
  uint64_t v13 = specialized _LazyLayoutViewCache.init(layout:list:inputs:)(v12, v11, (uint64_t)&v45, (uint64_t (*)(uint64_t, uint64_t, uint64_t))specialized LazyLayoutViewCache.init<A>(layout:list:inputs:));
  swift_beginAccess();
  uint64_t v14 = *(void *)(v13 + 120);
  unsigned int v15 = *(_DWORD *)(v13 + 128);
  uint64_t v16 = *(unsigned int *)(v13 + 132);
  unsigned int v29 = *(_DWORD *)(v13 + 132);
  if ((v9 & 0x1000) == 0)
  {
    swift_bridgeObjectRetain();
LABEL_12:
    swift_release();
    outlined destroy of _ViewListOutputs((uint64_t)v37);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    goto LABEL_14;
  }
  swift_bridgeObjectRetain_n();
  specialized static LazyLayout.accessibilityRole.getter(&v30);
  long long v17 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v33[16] = *(_OWORD *)(a2 + 32);
  long long v34 = v17;
  long long v35 = *(_OWORD *)(a2 + 64);
  int v36 = *(_DWORD *)(a2 + 80);
  long long v18 = *(_OWORD *)(a2 + 16);
  long long v32 = *(_OWORD *)a2;
  *(_OWORD *)uint64_t v33 = v18;
  unint64_t v19 = makeAccessibilityLayoutScrollableTransform(isLazy:role:placedSubviews:inputs:outputs:)();
  swift_bridgeObjectRelease();
  if ((v19 & 0x100000000) == 0)
  {
    LOBYTE(v32) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v16 = v29;
  }
  *(void *)&long long v32 = v14;
  *((void *)&v32 + 1) = __PAIR64__(v16, v15);
  uint64_t v20 = _ViewOutputs.subscript.getter();
  if ((v20 & 0x100000000) != 0) {
    goto LABEL_12;
  }
  int v21 = v20;
  static AccessibilityVisibility.containerElement.getter();
  int v22 = v31;
  type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
  uint64_t v28 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  *(void *)&v33[8] = v23;
  *(void *)&v33[16] = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v32) = v22;
  DWORD1(v32) = v22;
  specialized Dictionary.subscript.setter((uint64_t)&v32, MEMORY[0x1E4F40AA8]);
  LOBYTE(v32) = 1;
  DWORD1(v32) = v21;
  *((void *)&v32 + 1) = v28;
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for External<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityScrollableModifier> and conformance External<A>();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  _GraphValue.init(_:)();
  *(void *)&long long v32 = *(void *)(a2 + 48);
  DWORD2(v32) = *(_DWORD *)(a2 + 56);
  swift_bridgeObjectRetain();
  char v24 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v24) {
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v28, (long long *)a2, v14, v15 | (unint64_t)(v16 << 32), 0);
  }
  swift_bridgeObjectRelease();
  LOBYTE(v32) = (v24 & 1) == 0;
  _ViewOutputs.subscript.setter();
  swift_release();
  outlined destroy of _ViewListOutputs((uint64_t)v37);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  LODWORD(v16) = v29;
LABEL_14:
  *(void *)a4 = v14;
  *(_DWORD *)(a4 + 8) = v15;
  *(_DWORD *)(a4 + 12) = v16;
  return result;
}

uint64_t specialized LazyLayoutViewCache.init<A>(layout:list:inputs:)(int a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  swift_weakInit();
  int v8 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(v3 + 168) = 0;
  int v135 = v8;
  *(_DWORD *)(v3 + 148) = v8;
  *(void *)(v3 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v3 + 176) = xmmword_188371540;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 0;
  uint64_t v130 = v3 + 168;
  *(_DWORD *)(v3 + 224) = 16777471;
  uint64_t v9 = type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0](v9);
  swift_weakAssign();
  swift_release();
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)unint64_t v159 = v11;
  *(_OWORD *)&v159[16] = *(_OWORD *)(a3 + 64);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v157 = *(_OWORD *)a3;
  *(_OWORD *)long long v158 = v12;
  long long v161 = v157;
  long long v162 = v12;
  long long v163 = *(_OWORD *)&v158[16];
  int v160 = *(_DWORD *)(a3 + 80);
  v156[0] = v157;
  v156[1] = v10;
  v156[2] = *(_OWORD *)&v158[16];
  outlined retain of _ViewInputs(a3);
  int v13 = _GraphInputs.scrollTargetRole.getter();
  uint64_t v147 = *(void *)(a3 + 48);
  int v148 = *(_DWORD *)(a3 + 56);
  unsigned int v136 = (long long *)a3;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v156[0] = v157;
  v156[1] = v162;
  v156[2] = *(_OWORD *)&v158[16];
  char v15 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v14 & 1) != 0 && (v15)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  int v133 = v13;
  if (v13 != v135)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v156[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  int v16 = DWORD2(v157);
  uint64_t v17 = *(void *)v158;
  uint64_t v19 = *(void *)&v158[24];
  uint64_t v18 = *(void *)v159;
  int v20 = v160;
  *(void *)(v4 + 32) = v157;
  *(_DWORD *)(v4 + 40) = v16;
  *(void *)(v4 + 48) = v17;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v158[8];
  *(void *)(v4 + 72) = v19;
  *(void *)(v4 + 80) = v18;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v159[8];
  *(void *)(v4 + 104) = *(void *)&v159[24];
  *(_DWORD *)(v4 + 112) = v20;
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v4 + 24) = v21;
  *(_DWORD *)(v4 + 136) = a2;
  uint64_t v22 = (uint64_t)v136;
  long long v23 = v136[3];
  v156[2] = v136[2];
  v156[3] = v23;
  v156[4] = v136[4];
  LODWORD(v156[5]) = *((_DWORD *)v136 + 20);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v24;
  v156[0] = v161;
  v156[1] = v162;
  v156[2] = v163;
  LOBYTE(v155[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  long long v25 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v25;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v26 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v26;
  swift_getKeyPath();
  int v27 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v27;
  long long v28 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v28;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v29 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v29;
  LODWORD(v156[0]) = _ViewInputs.viewPhase.getter();
  *((void *)&v156[0] + 1) = 0;
  LODWORD(v156[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v22);
  int v132 = a1;
  specialized LazySubviewPlacements.init(layout:cache:inputs:)(a1, v30, v22, (uint64_t)v156);
  memcpy(v155, v156, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPlacements<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
  uint64_t v32 = v31;
  lazy protocol witness table accessor for type LazySubviewPlacements<LazyVStackLayout> and conformance LazySubviewPlacements<A>();
  uint64_t v131 = v32;
  unsigned int v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v156);
  *(_DWORD *)(v4 + 144) = v33;
  *(void *)&v155[0] = __PAIR64__(v30, v33);
  int v134 = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  uint64_t v139 = v4;
  *(void *)(v4 + 120) = *(void *)&v155[0];
  uint64_t v138 = v4 + 120;
  *(void *)(v4 + 128) = *((void *)&v155[0] + 1);
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v137 = (char *)&v149 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v34 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      v34(v155, 0);
      uint64_t v38 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v39 = PreferenceKeys.endIndex.getter();
      if (v38 < 0 || v38 >= v39) {
        break;
      }
      *((void *)&v149 + 1) = v38 + 1;
      swift_bridgeObjectRelease();
      uint64_t v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v139 + 144), 0, v36, v37);
      LODWORD(v155[0]) = v40;
      *((void *)&v155[0] + 1) = v41;
      MEMORY[0x1F4188790](v40);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v42 = type metadata accessor for LazyPreference();
      uint64_t v127 = v42;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v155, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v125, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
      swift_release();
      uint64_t v45 = v142;
      swift_beginAccess();
      MEMORY[0x18C10D730](v36, v45, v36, v37);
      swift_endAccess();
      uint64_t v46 = *((void *)&v149 + 1);
      if (v46 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  int v47 = v132;
  if ((BYTE4(v163) & 2) != 0)
  {
    uint64_t v48 = (uint64_t)v136;
    long long v49 = v136[3];
    v155[2] = v136[2];
    v155[3] = v49;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v50 = v136[1];
    v155[0] = *v136;
    v155[1] = v50;
    unsigned int v51 = _ViewInputs.environment.getter();
    long long v52 = *(_OWORD *)(v48 + 48);
    v155[2] = *(_OWORD *)(v48 + 32);
    v155[3] = v52;
    v155[4] = *(_OWORD *)(v48 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v48 + 80);
    long long v53 = *(_OWORD *)(v48 + 16);
    v155[0] = *(_OWORD *)v48;
    v155[1] = v53;
    unsigned int v54 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v51, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v54, v134);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    swift_beginAccess();
    LOBYTE(v149) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v55 = (char *)v161;
  uint64_t v56 = (uint64_t)v136;
  outlined retain of _ViewInputs((uint64_t)v136);
  uint64_t v137 = v55;
  PropertyList.subscript.getter();
  uint64_t v57 = outlined release of _ViewInputs(v56);
  unsigned int v58 = v155[0];
  uint64_t v59 = v139;
  if (LODWORD(v155[0]) != v135)
  {
    uint64_t v60 = (uint64_t)v136;
    long long v61 = v136[3];
    v155[2] = v136[2];
    v155[3] = v61;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v62 = v136[1];
    v155[0] = *v136;
    v155[1] = v62;
    unsigned int v63 = _ViewInputs.size.getter();
    long long v64 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v64;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v65 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v65;
    unsigned int v66 = _ViewInputs.position.getter();
    long long v67 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v67;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v68 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v68;
    unsigned int v69 = _ViewInputs.transform.getter();
    long long v70 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v70;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v71 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v71;
    unsigned int v72 = _ViewInputs.environment.getter();
    long long v73 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v73;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v74 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v74;
    unsigned int v75 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v63, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v69, v66);
    *(void *)&v155[1] = __PAIR64__(v58, v72);
    *((void *)&v155[1] + 1) = __PAIR64__(v75, v134);
    *(void *)&v155[2] = 0;
    DWORD2(v155[2]) = 0;
    *(void *)&v155[3] = 0;
    BYTE8(v155[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyVStackLayout> and conformance LazySubviewPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v57 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v57);
  uint64_t WitnessTable = (uint64_t)_s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0;
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v59 + 144));
  uint64_t WitnessTable = (uint64_t)partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v76 = v139;
    while (1)
    {
      uint64_t v80 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      v80(v155, 0);
      uint64_t v84 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v85 = PreferenceKeys.endIndex.getter();
      if (v84 < 0 || v84 >= v85) {
        break;
      }
      uint64_t v79 = v84 + 1;
      *((void *)&v149 + 1) = v79;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v142 = *(void *)(v76 + 120);
      unint64_t v143 = *(void *)(v76 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v77 = swift_endAccess();
        MEMORY[0x1F4188790](v77);
        uint64_t AssociatedTypeWitness = v82;
        uint64_t v127 = v83;
        uint64_t WitnessTable = v76;
        uint64_t v78 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v78);
        AGGraphMutateAttribute();
        uint64_t v79 = *((void *)&v149 + 1);
      }
      if (v79 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  char v86 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v87 = v139;
  if ((v86 & 1) != 0 || v133 != v135)
  {
    uint64_t v88 = (uint64_t)v136;
    long long v89 = v136[3];
    v155[2] = v136[2];
    v155[3] = v89;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v90 = v136[1];
    v155[0] = *v136;
    v155[1] = v90;
    swift_retain();
    _ViewInputs.position.getter();
    unint64_t v91 = AGCreateWeakAttribute();
    unsigned int v92 = v91;
    unint64_t v93 = HIDWORD(v91);
    long long v94 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v94;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v95 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v95;
    _ViewInputs.transform.getter();
    unint64_t v96 = AGCreateWeakAttribute();
    unsigned int v97 = v96;
    unint64_t v98 = HIDWORD(v96);
    long long v99 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v99;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v100 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v100;
    unint64_t v101 = _ViewInputs.weakScrollable.getter();
    int v102 = v101;
    unint64_t v103 = HIDWORD(v101);
    swift_beginAccess();
    long long v149 = *(_OWORD *)(v87 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v104 = AGCreateWeakAttribute();
    unint64_t v142 = __PAIR64__(v93, v92);
    unint64_t v143 = __PAIR64__(v98, v97);
    int v144 = v102;
    int v145 = v103;
    uint64_t v146 = v104;
    swift_weakInit();
    if (v86)
    {
      uint64_t v105 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_18834BB80;
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *(void *)(v106 + 56) = v107;
      *(void *)(v106 + 64) = lazy protocol witness table accessor for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>();
      uint64_t v108 = swift_allocObject();
      *(void *)(v106 + 32) = v108;
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, v108 + 16, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
      *(void *)&v155[0] = v106;
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v105, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[Scrollable]>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v149) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v133 == v135)
    {
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      swift_release();
    }
    else
    {
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *((void *)&v155[1] + 1) = v109;
      *(void *)&v155[2] = lazy protocol witness table accessor for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>();
      *(void *)&v155[0] = swift_allocObject();
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, *(void *)&v155[0] + 16, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout);
      uint64_t v110 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for Attribute<ViewList>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v110, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
      uint64_t v111 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(void *)&long long v149 = v147;
      DWORD2(v149) = v148;
      uint64_t WitnessTable = MEMORY[0x1F4188790](v111);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      long long v112 = v136[3];
      long long v151 = v136[2];
      long long v152 = v112;
      long long v153 = v136[4];
      int v154 = *((_DWORD *)v136 + 20);
      long long v113 = v136[1];
      long long v149 = *v136;
      long long v150 = v113;
      outlined retain of _ViewInputs((uint64_t)v136);
      uint64_t v114 = ScrollStateRequestTransform.init(collection:inputs:)();
      uint64_t v140 = v147;
      int v141 = v148;
      MEMORY[0x1F4188790](v114);
      uint64_t WitnessTable = (uint64_t)v155;
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v139;
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v155);
    }
  }
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    unsigned int v116 = *(_DWORD *)(v87 + 128);
    unsigned int v117 = *(_DWORD *)(v87 + 132);
    *(void *)&long long v149 = *(void *)(v87 + 120);
    uint64_t v115 = v149;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v118 = _ViewOutputs.subscript.getter();
    *(void *)&long long v149 = v115;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v119 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    long long v120 = v136[3];
    v155[2] = v136[2];
    v155[3] = v120;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v121 = v136[1];
    v155[0] = *v136;
    v155[1] = v121;
    if ((v118 & 0x100000000) != 0) {
      LODWORD(v118) = v135;
    }
    if ((v119 & 0x100000000) != 0) {
      LODWORD(v119) = v135;
    }
    int v122 = *(_DWORD *)(v87 + 144);
    outlined retain of _ViewInputs((uint64_t)v136);
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v122, v118, v119, (uint64_t)&v149);
    v155[2] = v151;
    v155[3] = v152;
    *(void *)&v155[4] = v153;
    v155[0] = v149;
    v155[1] = v150;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v149);
    swift_beginAccess();
    LOBYTE(v142) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs((uint64_t)v136);
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v161);
  if ((BYTE8(v155[0]) & 1) == 0)
  {
    uint64_t v123 = *(void *)&v155[0];
    swift_beginAccess();
    *(void *)(v87 + 176) = v123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v87;
}

{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  int v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  uint64_t v22;
  long long v23;
  int v24;
  long long v25;
  long long v26;
  int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void (*v34)(_OWORD *, void);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  long long v50;
  unsigned int v51;
  long long v52;
  long long v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  long long v62;
  unsigned int v63;
  long long v64;
  long long v65;
  unsigned int v66;
  long long v67;
  long long v68;
  unsigned int v69;
  long long v70;
  long long v71;
  unsigned int v72;
  long long v73;
  long long v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_OWORD *, void);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  long long v94;
  long long v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  long long v99;
  long long v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  long long v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t AssociatedTypeWitness;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  long long *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  int v154;
  _OWORD v155[21];
  _OWORD v156[21];
  long long v157;
  unsigned char v158[32];
  unsigned char v159[32];
  int v160;
  long long v161;
  long long v162;
  long long v163;
  uint64_t v164;

  uint64_t v4 = v3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  swift_weakInit();
  int v8 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(v3 + 168) = 0;
  int v135 = v8;
  *(_DWORD *)(v3 + 148) = v8;
  *(void *)(v3 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v3 + 176) = xmmword_188371540;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 0;
  uint64_t v130 = v3 + 168;
  *(_DWORD *)(v3 + 224) = 16777471;
  uint64_t v9 = type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0](v9);
  swift_weakAssign();
  swift_release();
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)unint64_t v159 = v11;
  *(_OWORD *)&v159[16] = *(_OWORD *)(a3 + 64);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v157 = *(_OWORD *)a3;
  *(_OWORD *)long long v158 = v12;
  long long v161 = v157;
  long long v162 = v12;
  long long v163 = *(_OWORD *)&v158[16];
  int v160 = *(_DWORD *)(a3 + 80);
  v156[0] = v157;
  v156[1] = v10;
  v156[2] = *(_OWORD *)&v158[16];
  outlined retain of _ViewInputs(a3);
  int v13 = _GraphInputs.scrollTargetRole.getter();
  uint64_t v147 = *(void *)(a3 + 48);
  int v148 = *(_DWORD *)(a3 + 56);
  unsigned int v136 = (long long *)a3;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v156[0] = v157;
  v156[1] = v162;
  v156[2] = *(_OWORD *)&v158[16];
  char v15 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v14 & 1) != 0 && (v15)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  int v133 = v13;
  if (v13 != v135)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v156[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  int v16 = DWORD2(v157);
  uint64_t v17 = *(void *)v158;
  uint64_t v19 = *(void *)&v158[24];
  uint64_t v18 = *(void *)v159;
  int v20 = v160;
  *(void *)(v4 + 32) = v157;
  *(_DWORD *)(v4 + 40) = v16;
  *(void *)(v4 + 48) = v17;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v158[8];
  *(void *)(v4 + 72) = v19;
  *(void *)(v4 + 80) = v18;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v159[8];
  *(void *)(v4 + 104) = *(void *)&v159[24];
  *(_DWORD *)(v4 + 112) = v20;
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v4 + 24) = v21;
  *(_DWORD *)(v4 + 136) = a2;
  uint64_t v22 = (uint64_t)v136;
  long long v23 = v136[3];
  v156[2] = v136[2];
  v156[3] = v23;
  v156[4] = v136[4];
  LODWORD(v156[5]) = *((_DWORD *)v136 + 20);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v24;
  v156[0] = v161;
  v156[1] = v162;
  v156[2] = v163;
  LOBYTE(v155[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  long long v25 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v25;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v26 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v26;
  swift_getKeyPath();
  int v27 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v27;
  long long v28 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v28;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v29 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v29;
  LODWORD(v156[0]) = _ViewInputs.viewPhase.getter();
  *((void *)&v156[0] + 1) = 0;
  LODWORD(v156[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v22);
  int v132 = a1;
  specialized LazySubviewPlacements.init(layout:cache:inputs:)(a1, v30, v22, (uint64_t)v156);
  memcpy(v155, v156, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPlacements<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
  uint64_t v32 = v31;
  lazy protocol witness table accessor for type LazySubviewPlacements<LazyHStackLayout> and conformance LazySubviewPlacements<A>();
  uint64_t v131 = v32;
  unsigned int v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v156);
  *(_DWORD *)(v4 + 144) = v33;
  *(void *)&v155[0] = __PAIR64__(v30, v33);
  int v134 = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  uint64_t v139 = v4;
  *(void *)(v4 + 120) = *(void *)&v155[0];
  uint64_t v138 = v4 + 120;
  *(void *)(v4 + 128) = *((void *)&v155[0] + 1);
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v137 = (char *)&v149 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v34 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      v34(v155, 0);
      uint64_t v38 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v39 = PreferenceKeys.endIndex.getter();
      if (v38 < 0 || v38 >= v39) {
        break;
      }
      *((void *)&v149 + 1) = v38 + 1;
      swift_bridgeObjectRelease();
      uint64_t v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v139 + 144), 0, v36, v37);
      LODWORD(v155[0]) = v40;
      *((void *)&v155[0] + 1) = v41;
      MEMORY[0x1F4188790](v40);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v42 = type metadata accessor for LazyPreference();
      uint64_t v127 = v42;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v155, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v125, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
      swift_release();
      uint64_t v45 = v142;
      swift_beginAccess();
      MEMORY[0x18C10D730](v36, v45, v36, v37);
      swift_endAccess();
      uint64_t v46 = *((void *)&v149 + 1);
      if (v46 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  int v47 = v132;
  if ((BYTE4(v163) & 2) != 0)
  {
    uint64_t v48 = (uint64_t)v136;
    long long v49 = v136[3];
    v155[2] = v136[2];
    v155[3] = v49;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v50 = v136[1];
    v155[0] = *v136;
    v155[1] = v50;
    unsigned int v51 = _ViewInputs.environment.getter();
    long long v52 = *(_OWORD *)(v48 + 48);
    v155[2] = *(_OWORD *)(v48 + 32);
    v155[3] = v52;
    v155[4] = *(_OWORD *)(v48 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v48 + 80);
    long long v53 = *(_OWORD *)(v48 + 16);
    v155[0] = *(_OWORD *)v48;
    v155[1] = v53;
    unsigned int v54 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v51, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v54, v134);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyHStackLayout> and conformance LazyLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    swift_beginAccess();
    LOBYTE(v149) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v55 = (char *)v161;
  uint64_t v56 = (uint64_t)v136;
  outlined retain of _ViewInputs((uint64_t)v136);
  uint64_t v137 = v55;
  PropertyList.subscript.getter();
  uint64_t v57 = outlined release of _ViewInputs(v56);
  unsigned int v58 = v155[0];
  uint64_t v59 = v139;
  if (LODWORD(v155[0]) != v135)
  {
    uint64_t v60 = (uint64_t)v136;
    long long v61 = v136[3];
    v155[2] = v136[2];
    v155[3] = v61;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v62 = v136[1];
    v155[0] = *v136;
    v155[1] = v62;
    unsigned int v63 = _ViewInputs.size.getter();
    long long v64 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v64;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v65 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v65;
    unsigned int v66 = _ViewInputs.position.getter();
    long long v67 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v67;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v68 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v68;
    unsigned int v69 = _ViewInputs.transform.getter();
    long long v70 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v70;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v71 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v71;
    unsigned int v72 = _ViewInputs.environment.getter();
    long long v73 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v73;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v74 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v74;
    unsigned int v75 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v63, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v69, v66);
    *(void *)&v155[1] = __PAIR64__(v58, v72);
    *((void *)&v155[1] + 1) = __PAIR64__(v75, v134);
    *(void *)&v155[2] = 0;
    DWORD2(v155[2]) = 0;
    *(void *)&v155[3] = 0;
    BYTE8(v155[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyHStackLayout> and conformance LazySubviewPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v57 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v57);
  uint64_t WitnessTable = (uint64_t)_s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0;
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v59 + 144));
  uint64_t WitnessTable = (uint64_t)partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v76 = v139;
    while (1)
    {
      uint64_t v80 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      v80(v155, 0);
      uint64_t v84 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v85 = PreferenceKeys.endIndex.getter();
      if (v84 < 0 || v84 >= v85) {
        break;
      }
      uint64_t v79 = v84 + 1;
      *((void *)&v149 + 1) = v79;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v142 = *(void *)(v76 + 120);
      unint64_t v143 = *(void *)(v76 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v77 = swift_endAccess();
        MEMORY[0x1F4188790](v77);
        uint64_t AssociatedTypeWitness = v82;
        uint64_t v127 = v83;
        uint64_t WitnessTable = v76;
        uint64_t v78 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v78);
        AGGraphMutateAttribute();
        uint64_t v79 = *((void *)&v149 + 1);
      }
      if (v79 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  char v86 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v87 = v139;
  if ((v86 & 1) != 0 || v133 != v135)
  {
    uint64_t v88 = (uint64_t)v136;
    long long v89 = v136[3];
    v155[2] = v136[2];
    v155[3] = v89;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v90 = v136[1];
    v155[0] = *v136;
    v155[1] = v90;
    swift_retain();
    _ViewInputs.position.getter();
    unint64_t v91 = AGCreateWeakAttribute();
    unsigned int v92 = v91;
    unint64_t v93 = HIDWORD(v91);
    long long v94 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v94;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v95 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v95;
    _ViewInputs.transform.getter();
    unint64_t v96 = AGCreateWeakAttribute();
    unsigned int v97 = v96;
    unint64_t v98 = HIDWORD(v96);
    long long v99 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v99;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v100 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v100;
    unint64_t v101 = _ViewInputs.weakScrollable.getter();
    int v102 = v101;
    unint64_t v103 = HIDWORD(v101);
    swift_beginAccess();
    long long v149 = *(_OWORD *)(v87 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v104 = AGCreateWeakAttribute();
    unint64_t v142 = __PAIR64__(v93, v92);
    unint64_t v143 = __PAIR64__(v98, v97);
    int v144 = v102;
    int v145 = v103;
    uint64_t v146 = v104;
    swift_weakInit();
    if (v86)
    {
      uint64_t v105 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_18834BB80;
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *(void *)(v106 + 56) = v107;
      *(void *)(v106 + 64) = lazy protocol witness table accessor for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>();
      uint64_t v108 = swift_allocObject();
      *(void *)(v106 + 32) = v108;
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, v108 + 16, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
      *(void *)&v155[0] = v106;
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v105, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[Scrollable]>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v149) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v133 == v135)
    {
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      swift_release();
    }
    else
    {
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *((void *)&v155[1] + 1) = v109;
      *(void *)&v155[2] = lazy protocol witness table accessor for type LazyScrollable<LazyHStackLayout> and conformance LazyScrollable<A>();
      *(void *)&v155[0] = swift_allocObject();
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, *(void *)&v155[0] + 16, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout);
      uint64_t v110 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for Attribute<ViewList>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v110, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
      uint64_t v111 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(void *)&long long v149 = v147;
      DWORD2(v149) = v148;
      uint64_t WitnessTable = MEMORY[0x1F4188790](v111);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      long long v112 = v136[3];
      long long v151 = v136[2];
      long long v152 = v112;
      long long v153 = v136[4];
      int v154 = *((_DWORD *)v136 + 20);
      long long v113 = v136[1];
      long long v149 = *v136;
      long long v150 = v113;
      outlined retain of _ViewInputs((uint64_t)v136);
      uint64_t v114 = ScrollStateRequestTransform.init(collection:inputs:)();
      uint64_t v140 = v147;
      int v141 = v148;
      MEMORY[0x1F4188790](v114);
      uint64_t WitnessTable = (uint64_t)v155;
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v139;
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHStackLayout and conformance LazyHStackLayout, (uint64_t)&type metadata for LazyHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v155);
    }
  }
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    unsigned int v116 = *(_DWORD *)(v87 + 128);
    unsigned int v117 = *(_DWORD *)(v87 + 132);
    *(void *)&long long v149 = *(void *)(v87 + 120);
    uint64_t v115 = v149;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v118 = _ViewOutputs.subscript.getter();
    *(void *)&long long v149 = v115;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v119 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    long long v120 = v136[3];
    v155[2] = v136[2];
    v155[3] = v120;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v121 = v136[1];
    v155[0] = *v136;
    v155[1] = v121;
    if ((v118 & 0x100000000) != 0) {
      LODWORD(v118) = v135;
    }
    if ((v119 & 0x100000000) != 0) {
      LODWORD(v119) = v135;
    }
    int v122 = *(_DWORD *)(v87 + 144);
    outlined retain of _ViewInputs((uint64_t)v136);
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v122, v118, v119, (uint64_t)&v149);
    v155[2] = v151;
    v155[3] = v152;
    *(void *)&v155[4] = v153;
    v155[0] = v149;
    v155[1] = v150;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v149);
    swift_beginAccess();
    LOBYTE(v142) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs((uint64_t)v136);
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v161);
  if ((BYTE8(v155[0]) & 1) == 0)
  {
    uint64_t v123 = *(void *)&v155[0];
    swift_beginAccess();
    *(void *)(v87 + 176) = v123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v87;
}

{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  int v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  uint64_t v22;
  long long v23;
  int v24;
  long long v25;
  long long v26;
  int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void (*v34)(_OWORD *, void);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  long long v50;
  unsigned int v51;
  long long v52;
  long long v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  long long v62;
  unsigned int v63;
  long long v64;
  long long v65;
  unsigned int v66;
  long long v67;
  long long v68;
  unsigned int v69;
  long long v70;
  long long v71;
  unsigned int v72;
  long long v73;
  long long v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_OWORD *, void);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  long long v94;
  long long v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  long long v99;
  long long v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  long long v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t AssociatedTypeWitness;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  long long *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  int v154;
  _OWORD v155[21];
  _OWORD v156[21];
  long long v157;
  unsigned char v158[32];
  unsigned char v159[32];
  int v160;
  long long v161;
  long long v162;
  long long v163;
  uint64_t v164;

  uint64_t v4 = v3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  swift_weakInit();
  int v8 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(v3 + 168) = 0;
  int v135 = v8;
  *(_DWORD *)(v3 + 148) = v8;
  *(void *)(v3 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v3 + 176) = xmmword_188371540;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 0;
  uint64_t v130 = v3 + 168;
  *(_DWORD *)(v3 + 224) = 16777471;
  uint64_t v9 = type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0](v9);
  swift_weakAssign();
  swift_release();
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)unint64_t v159 = v11;
  *(_OWORD *)&v159[16] = *(_OWORD *)(a3 + 64);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v157 = *(_OWORD *)a3;
  *(_OWORD *)long long v158 = v12;
  long long v161 = v157;
  long long v162 = v12;
  long long v163 = *(_OWORD *)&v158[16];
  int v160 = *(_DWORD *)(a3 + 80);
  v156[0] = v157;
  v156[1] = v10;
  v156[2] = *(_OWORD *)&v158[16];
  outlined retain of _ViewInputs(a3);
  int v13 = _GraphInputs.scrollTargetRole.getter();
  uint64_t v147 = *(void *)(a3 + 48);
  int v148 = *(_DWORD *)(a3 + 56);
  unsigned int v136 = (long long *)a3;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v156[0] = v157;
  v156[1] = v162;
  v156[2] = *(_OWORD *)&v158[16];
  char v15 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v14 & 1) != 0 && (v15)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  int v133 = v13;
  if (v13 != v135)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v156[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  int v16 = DWORD2(v157);
  uint64_t v17 = *(void *)v158;
  uint64_t v19 = *(void *)&v158[24];
  uint64_t v18 = *(void *)v159;
  int v20 = v160;
  *(void *)(v4 + 32) = v157;
  *(_DWORD *)(v4 + 40) = v16;
  *(void *)(v4 + 48) = v17;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v158[8];
  *(void *)(v4 + 72) = v19;
  *(void *)(v4 + 80) = v18;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v159[8];
  *(void *)(v4 + 104) = *(void *)&v159[24];
  *(_DWORD *)(v4 + 112) = v20;
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v4 + 24) = v21;
  *(_DWORD *)(v4 + 136) = a2;
  uint64_t v22 = (uint64_t)v136;
  long long v23 = v136[3];
  v156[2] = v136[2];
  v156[3] = v23;
  v156[4] = v136[4];
  LODWORD(v156[5]) = *((_DWORD *)v136 + 20);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v24;
  v156[0] = v161;
  v156[1] = v162;
  v156[2] = v163;
  LOBYTE(v155[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  long long v25 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v25;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v26 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v26;
  swift_getKeyPath();
  int v27 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v27;
  long long v28 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v28;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v29 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v29;
  LODWORD(v156[0]) = _ViewInputs.viewPhase.getter();
  *((void *)&v156[0] + 1) = 0;
  LODWORD(v156[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v22);
  int v132 = a1;
  specialized LazySubviewPlacements.init(layout:cache:inputs:)(a1, v30, v22, (uint64_t)v156);
  memcpy(v155, v156, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPlacements<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
  uint64_t v32 = v31;
  lazy protocol witness table accessor for type LazySubviewPlacements<LazyFixedSizeHStackLayout> and conformance LazySubviewPlacements<A>();
  uint64_t v131 = v32;
  unsigned int v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v156);
  *(_DWORD *)(v4 + 144) = v33;
  *(void *)&v155[0] = __PAIR64__(v30, v33);
  int v134 = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  uint64_t v139 = v4;
  *(void *)(v4 + 120) = *(void *)&v155[0];
  uint64_t v138 = v4 + 120;
  *(void *)(v4 + 128) = *((void *)&v155[0] + 1);
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v137 = (char *)&v149 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v34 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      v34(v155, 0);
      uint64_t v38 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v39 = PreferenceKeys.endIndex.getter();
      if (v38 < 0 || v38 >= v39) {
        break;
      }
      *((void *)&v149 + 1) = v38 + 1;
      swift_bridgeObjectRelease();
      uint64_t v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v139 + 144), 0, v36, v37);
      LODWORD(v155[0]) = v40;
      *((void *)&v155[0] + 1) = v41;
      MEMORY[0x1F4188790](v40);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v42 = type metadata accessor for LazyPreference();
      uint64_t v127 = v42;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v155, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)&v125, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
      swift_release();
      uint64_t v45 = v142;
      swift_beginAccess();
      MEMORY[0x18C10D730](v36, v45, v36, v37);
      swift_endAccess();
      uint64_t v46 = *((void *)&v149 + 1);
      if (v46 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  int v47 = v132;
  if ((BYTE4(v163) & 2) != 0)
  {
    uint64_t v48 = (uint64_t)v136;
    long long v49 = v136[3];
    v155[2] = v136[2];
    v155[3] = v49;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v50 = v136[1];
    v155[0] = *v136;
    v155[1] = v50;
    unsigned int v51 = _ViewInputs.environment.getter();
    long long v52 = *(_OWORD *)(v48 + 48);
    v155[2] = *(_OWORD *)(v48 + 32);
    v155[3] = v52;
    v155[4] = *(_OWORD *)(v48 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v48 + 80);
    long long v53 = *(_OWORD *)(v48 + 16);
    v155[0] = *(_OWORD *)v48;
    v155[1] = v53;
    unsigned int v54 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v51, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v54, v134);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeHStackLayout> and conformance LazyLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    swift_beginAccess();
    LOBYTE(v149) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v55 = (char *)v161;
  uint64_t v56 = (uint64_t)v136;
  outlined retain of _ViewInputs((uint64_t)v136);
  uint64_t v137 = v55;
  PropertyList.subscript.getter();
  uint64_t v57 = outlined release of _ViewInputs(v56);
  unsigned int v58 = v155[0];
  uint64_t v59 = v139;
  if (LODWORD(v155[0]) != v135)
  {
    uint64_t v60 = (uint64_t)v136;
    long long v61 = v136[3];
    v155[2] = v136[2];
    v155[3] = v61;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v62 = v136[1];
    v155[0] = *v136;
    v155[1] = v62;
    unsigned int v63 = _ViewInputs.size.getter();
    long long v64 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v64;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v65 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v65;
    unsigned int v66 = _ViewInputs.position.getter();
    long long v67 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v67;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v68 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v68;
    unsigned int v69 = _ViewInputs.transform.getter();
    long long v70 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v70;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v71 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v71;
    unsigned int v72 = _ViewInputs.environment.getter();
    long long v73 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v73;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v74 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v74;
    unsigned int v75 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v63, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v69, v66);
    *(void *)&v155[1] = __PAIR64__(v58, v72);
    *((void *)&v155[1] + 1) = __PAIR64__(v75, v134);
    *(void *)&v155[2] = 0;
    DWORD2(v155[2]) = 0;
    *(void *)&v155[3] = 0;
    BYTE8(v155[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyFixedSizeHStackLayout> and conformance LazySubviewPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v57 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v57);
  uint64_t WitnessTable = (uint64_t)_s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0;
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v59 + 144));
  uint64_t WitnessTable = (uint64_t)partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v76 = v139;
    while (1)
    {
      uint64_t v80 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      v80(v155, 0);
      uint64_t v84 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v85 = PreferenceKeys.endIndex.getter();
      if (v84 < 0 || v84 >= v85) {
        break;
      }
      uint64_t v79 = v84 + 1;
      *((void *)&v149 + 1) = v79;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v142 = *(void *)(v76 + 120);
      unint64_t v143 = *(void *)(v76 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v77 = swift_endAccess();
        MEMORY[0x1F4188790](v77);
        uint64_t AssociatedTypeWitness = v82;
        uint64_t v127 = v83;
        uint64_t WitnessTable = v76;
        uint64_t v78 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v78);
        AGGraphMutateAttribute();
        uint64_t v79 = *((void *)&v149 + 1);
      }
      if (v79 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  char v86 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v87 = v139;
  if ((v86 & 1) != 0 || v133 != v135)
  {
    uint64_t v88 = (uint64_t)v136;
    long long v89 = v136[3];
    v155[2] = v136[2];
    v155[3] = v89;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v90 = v136[1];
    v155[0] = *v136;
    v155[1] = v90;
    swift_retain();
    _ViewInputs.position.getter();
    unint64_t v91 = AGCreateWeakAttribute();
    unsigned int v92 = v91;
    unint64_t v93 = HIDWORD(v91);
    long long v94 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v94;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v95 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v95;
    _ViewInputs.transform.getter();
    unint64_t v96 = AGCreateWeakAttribute();
    unsigned int v97 = v96;
    unint64_t v98 = HIDWORD(v96);
    long long v99 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v99;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v100 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v100;
    unint64_t v101 = _ViewInputs.weakScrollable.getter();
    int v102 = v101;
    unint64_t v103 = HIDWORD(v101);
    swift_beginAccess();
    long long v149 = *(_OWORD *)(v87 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v104 = AGCreateWeakAttribute();
    unint64_t v142 = __PAIR64__(v93, v92);
    unint64_t v143 = __PAIR64__(v98, v97);
    int v144 = v102;
    int v145 = v103;
    uint64_t v146 = v104;
    swift_weakInit();
    if (v86)
    {
      uint64_t v105 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_18834BB80;
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *(void *)(v106 + 56) = v107;
      *(void *)(v106 + 64) = lazy protocol witness table accessor for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>();
      uint64_t v108 = swift_allocObject();
      *(void *)(v106 + 32) = v108;
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, v108 + 16, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
      *(void *)&v155[0] = v106;
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v105, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[Scrollable]>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v149) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v133 == v135)
    {
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      swift_release();
    }
    else
    {
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *((void *)&v155[1] + 1) = v109;
      *(void *)&v155[2] = lazy protocol witness table accessor for type LazyScrollable<LazyFixedSizeHStackLayout> and conformance LazyScrollable<A>();
      *(void *)&v155[0] = swift_allocObject();
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, *(void *)&v155[0] + 16, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout);
      uint64_t v110 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for Attribute<ViewList>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v110, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
      uint64_t v111 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(void *)&long long v149 = v147;
      DWORD2(v149) = v148;
      uint64_t WitnessTable = MEMORY[0x1F4188790](v111);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      long long v112 = v136[3];
      long long v151 = v136[2];
      long long v152 = v112;
      long long v153 = v136[4];
      int v154 = *((_DWORD *)v136 + 20);
      long long v113 = v136[1];
      long long v149 = *v136;
      long long v150 = v113;
      outlined retain of _ViewInputs((uint64_t)v136);
      uint64_t v114 = ScrollStateRequestTransform.init(collection:inputs:)();
      uint64_t v140 = v147;
      int v141 = v148;
      MEMORY[0x1F4188790](v114);
      uint64_t WitnessTable = (uint64_t)v155;
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v139;
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeHStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeHStackLayout and conformance LazyFixedSizeHStackLayout, (uint64_t)&type metadata for LazyFixedSizeHStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v155);
    }
  }
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    unsigned int v116 = *(_DWORD *)(v87 + 128);
    unsigned int v117 = *(_DWORD *)(v87 + 132);
    *(void *)&long long v149 = *(void *)(v87 + 120);
    uint64_t v115 = v149;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v118 = _ViewOutputs.subscript.getter();
    *(void *)&long long v149 = v115;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v119 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    long long v120 = v136[3];
    v155[2] = v136[2];
    v155[3] = v120;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v121 = v136[1];
    v155[0] = *v136;
    v155[1] = v121;
    if ((v118 & 0x100000000) != 0) {
      LODWORD(v118) = v135;
    }
    if ((v119 & 0x100000000) != 0) {
      LODWORD(v119) = v135;
    }
    int v122 = *(_DWORD *)(v87 + 144);
    outlined retain of _ViewInputs((uint64_t)v136);
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v122, v118, v119, (uint64_t)&v149);
    v155[2] = v151;
    v155[3] = v152;
    *(void *)&v155[4] = v153;
    v155[0] = v149;
    v155[1] = v150;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v149);
    swift_beginAccess();
    LOBYTE(v142) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs((uint64_t)v136);
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v161);
  if ((BYTE8(v155[0]) & 1) == 0)
  {
    uint64_t v123 = *(void *)&v155[0];
    swift_beginAccess();
    *(void *)(v87 + 176) = v123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v87;
}

{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  int v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  uint64_t v22;
  long long v23;
  int v24;
  long long v25;
  long long v26;
  int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void (*v34)(_OWORD *, void);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  long long v50;
  unsigned int v51;
  long long v52;
  long long v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  long long v62;
  unsigned int v63;
  long long v64;
  long long v65;
  unsigned int v66;
  long long v67;
  long long v68;
  unsigned int v69;
  long long v70;
  long long v71;
  unsigned int v72;
  long long v73;
  long long v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_OWORD *, void);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  long long v94;
  long long v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  long long v99;
  long long v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  long long v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t AssociatedTypeWitness;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  long long *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  int v154;
  _OWORD v155[21];
  _OWORD v156[21];
  long long v157;
  unsigned char v158[32];
  unsigned char v159[32];
  int v160;
  long long v161;
  long long v162;
  long long v163;
  uint64_t v164;

  uint64_t v4 = v3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  swift_weakInit();
  int v8 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(v3 + 168) = 0;
  int v135 = v8;
  *(_DWORD *)(v3 + 148) = v8;
  *(void *)(v3 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v3 + 176) = xmmword_188371540;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 0;
  uint64_t v130 = v3 + 168;
  *(_DWORD *)(v3 + 224) = 16777471;
  uint64_t v9 = type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0](v9);
  swift_weakAssign();
  swift_release();
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)unint64_t v159 = v11;
  *(_OWORD *)&v159[16] = *(_OWORD *)(a3 + 64);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v157 = *(_OWORD *)a3;
  *(_OWORD *)long long v158 = v12;
  long long v161 = v157;
  long long v162 = v12;
  long long v163 = *(_OWORD *)&v158[16];
  int v160 = *(_DWORD *)(a3 + 80);
  v156[0] = v157;
  v156[1] = v10;
  v156[2] = *(_OWORD *)&v158[16];
  outlined retain of _ViewInputs(a3);
  int v13 = _GraphInputs.scrollTargetRole.getter();
  uint64_t v147 = *(void *)(a3 + 48);
  int v148 = *(_DWORD *)(a3 + 56);
  unsigned int v136 = (long long *)a3;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v156[0] = v157;
  v156[1] = v162;
  v156[2] = *(_OWORD *)&v158[16];
  char v15 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v14 & 1) != 0 && (v15)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  int v133 = v13;
  if (v13 != v135)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v156[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  int v16 = DWORD2(v157);
  uint64_t v17 = *(void *)v158;
  uint64_t v19 = *(void *)&v158[24];
  uint64_t v18 = *(void *)v159;
  int v20 = v160;
  *(void *)(v4 + 32) = v157;
  *(_DWORD *)(v4 + 40) = v16;
  *(void *)(v4 + 48) = v17;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v158[8];
  *(void *)(v4 + 72) = v19;
  *(void *)(v4 + 80) = v18;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v159[8];
  *(void *)(v4 + 104) = *(void *)&v159[24];
  *(_DWORD *)(v4 + 112) = v20;
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v4 + 24) = v21;
  *(_DWORD *)(v4 + 136) = a2;
  uint64_t v22 = (uint64_t)v136;
  long long v23 = v136[3];
  v156[2] = v136[2];
  v156[3] = v23;
  v156[4] = v136[4];
  LODWORD(v156[5]) = *((_DWORD *)v136 + 20);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v24;
  v156[0] = v161;
  v156[1] = v162;
  v156[2] = v163;
  LOBYTE(v155[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  long long v25 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v25;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v26 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v26;
  swift_getKeyPath();
  int v27 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v27;
  long long v28 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v28;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v29 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v29;
  LODWORD(v156[0]) = _ViewInputs.viewPhase.getter();
  *((void *)&v156[0] + 1) = 0;
  LODWORD(v156[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v22);
  int v132 = a1;
  specialized LazySubviewPlacements.init(layout:cache:inputs:)(a1, v30, v22, (uint64_t)v156);
  memcpy(v155, v156, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPlacements<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
  uint64_t v32 = v31;
  lazy protocol witness table accessor for type LazySubviewPlacements<LazyFixedSizeVStackLayout> and conformance LazySubviewPlacements<A>();
  uint64_t v131 = v32;
  unsigned int v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v156);
  *(_DWORD *)(v4 + 144) = v33;
  *(void *)&v155[0] = __PAIR64__(v30, v33);
  int v134 = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  uint64_t v139 = v4;
  *(void *)(v4 + 120) = *(void *)&v155[0];
  uint64_t v138 = v4 + 120;
  *(void *)(v4 + 128) = *((void *)&v155[0] + 1);
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v137 = (char *)&v149 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v34 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      v34(v155, 0);
      uint64_t v38 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v39 = PreferenceKeys.endIndex.getter();
      if (v38 < 0 || v38 >= v39) {
        break;
      }
      *((void *)&v149 + 1) = v38 + 1;
      swift_bridgeObjectRelease();
      uint64_t v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v139 + 144), 0, v36, v37);
      LODWORD(v155[0]) = v40;
      *((void *)&v155[0] + 1) = v41;
      MEMORY[0x1F4188790](v40);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v42 = type metadata accessor for LazyPreference();
      uint64_t v127 = v42;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v155, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v125, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
      swift_release();
      uint64_t v45 = v142;
      swift_beginAccess();
      MEMORY[0x18C10D730](v36, v45, v36, v37);
      swift_endAccess();
      uint64_t v46 = *((void *)&v149 + 1);
      if (v46 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  int v47 = v132;
  if ((BYTE4(v163) & 2) != 0)
  {
    uint64_t v48 = (uint64_t)v136;
    long long v49 = v136[3];
    v155[2] = v136[2];
    v155[3] = v49;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v50 = v136[1];
    v155[0] = *v136;
    v155[1] = v50;
    unsigned int v51 = _ViewInputs.environment.getter();
    long long v52 = *(_OWORD *)(v48 + 48);
    v155[2] = *(_OWORD *)(v48 + 32);
    v155[3] = v52;
    v155[4] = *(_OWORD *)(v48 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v48 + 80);
    long long v53 = *(_OWORD *)(v48 + 16);
    v155[0] = *(_OWORD *)v48;
    v155[1] = v53;
    unsigned int v54 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v51, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v54, v134);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyFixedSizeVStackLayout> and conformance LazyLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    swift_beginAccess();
    LOBYTE(v149) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v55 = (char *)v161;
  uint64_t v56 = (uint64_t)v136;
  outlined retain of _ViewInputs((uint64_t)v136);
  uint64_t v137 = v55;
  PropertyList.subscript.getter();
  uint64_t v57 = outlined release of _ViewInputs(v56);
  unsigned int v58 = v155[0];
  uint64_t v59 = v139;
  if (LODWORD(v155[0]) != v135)
  {
    uint64_t v60 = (uint64_t)v136;
    long long v61 = v136[3];
    v155[2] = v136[2];
    v155[3] = v61;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v62 = v136[1];
    v155[0] = *v136;
    v155[1] = v62;
    unsigned int v63 = _ViewInputs.size.getter();
    long long v64 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v64;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v65 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v65;
    unsigned int v66 = _ViewInputs.position.getter();
    long long v67 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v67;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v68 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v68;
    unsigned int v69 = _ViewInputs.transform.getter();
    long long v70 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v70;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v71 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v71;
    unsigned int v72 = _ViewInputs.environment.getter();
    long long v73 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v73;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v74 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v74;
    unsigned int v75 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v63, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v69, v66);
    *(void *)&v155[1] = __PAIR64__(v58, v72);
    *((void *)&v155[1] + 1) = __PAIR64__(v75, v134);
    *(void *)&v155[2] = 0;
    DWORD2(v155[2]) = 0;
    *(void *)&v155[3] = 0;
    BYTE8(v155[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyFixedSizeVStackLayout> and conformance LazySubviewPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v57 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v57);
  uint64_t WitnessTable = (uint64_t)_s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0;
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v59 + 144));
  uint64_t WitnessTable = (uint64_t)partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v76 = v139;
    while (1)
    {
      uint64_t v80 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      v80(v155, 0);
      uint64_t v84 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v85 = PreferenceKeys.endIndex.getter();
      if (v84 < 0 || v84 >= v85) {
        break;
      }
      uint64_t v79 = v84 + 1;
      *((void *)&v149 + 1) = v79;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v142 = *(void *)(v76 + 120);
      unint64_t v143 = *(void *)(v76 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v77 = swift_endAccess();
        MEMORY[0x1F4188790](v77);
        uint64_t AssociatedTypeWitness = v82;
        uint64_t v127 = v83;
        uint64_t WitnessTable = v76;
        uint64_t v78 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v78);
        AGGraphMutateAttribute();
        uint64_t v79 = *((void *)&v149 + 1);
      }
      if (v79 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  char v86 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v87 = v139;
  if ((v86 & 1) != 0 || v133 != v135)
  {
    uint64_t v88 = (uint64_t)v136;
    long long v89 = v136[3];
    v155[2] = v136[2];
    v155[3] = v89;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v90 = v136[1];
    v155[0] = *v136;
    v155[1] = v90;
    swift_retain();
    _ViewInputs.position.getter();
    unint64_t v91 = AGCreateWeakAttribute();
    unsigned int v92 = v91;
    unint64_t v93 = HIDWORD(v91);
    long long v94 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v94;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v95 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v95;
    _ViewInputs.transform.getter();
    unint64_t v96 = AGCreateWeakAttribute();
    unsigned int v97 = v96;
    unint64_t v98 = HIDWORD(v96);
    long long v99 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v99;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v100 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v100;
    unint64_t v101 = _ViewInputs.weakScrollable.getter();
    int v102 = v101;
    unint64_t v103 = HIDWORD(v101);
    swift_beginAccess();
    long long v149 = *(_OWORD *)(v87 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v104 = AGCreateWeakAttribute();
    unint64_t v142 = __PAIR64__(v93, v92);
    unint64_t v143 = __PAIR64__(v98, v97);
    int v144 = v102;
    int v145 = v103;
    uint64_t v146 = v104;
    swift_weakInit();
    if (v86)
    {
      uint64_t v105 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_18834BB80;
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *(void *)(v106 + 56) = v107;
      *(void *)(v106 + 64) = lazy protocol witness table accessor for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>();
      uint64_t v108 = swift_allocObject();
      *(void *)(v106 + 32) = v108;
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, v108 + 16, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
      *(void *)&v155[0] = v106;
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v105, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[Scrollable]>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v149) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v133 == v135)
    {
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      swift_release();
    }
    else
    {
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *((void *)&v155[1] + 1) = v109;
      *(void *)&v155[2] = lazy protocol witness table accessor for type LazyScrollable<LazyFixedSizeVStackLayout> and conformance LazyScrollable<A>();
      *(void *)&v155[0] = swift_allocObject();
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, *(void *)&v155[0] + 16, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout);
      uint64_t v110 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for Attribute<ViewList>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v110, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
      uint64_t v111 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(void *)&long long v149 = v147;
      DWORD2(v149) = v148;
      uint64_t WitnessTable = MEMORY[0x1F4188790](v111);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      long long v112 = v136[3];
      long long v151 = v136[2];
      long long v152 = v112;
      long long v153 = v136[4];
      int v154 = *((_DWORD *)v136 + 20);
      long long v113 = v136[1];
      long long v149 = *v136;
      long long v150 = v113;
      outlined retain of _ViewInputs((uint64_t)v136);
      uint64_t v114 = ScrollStateRequestTransform.init(collection:inputs:)();
      uint64_t v140 = v147;
      int v141 = v148;
      MEMORY[0x1F4188790](v114);
      uint64_t WitnessTable = (uint64_t)v155;
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v139;
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyFixedSizeVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyFixedSizeVStackLayout and conformance LazyFixedSizeVStackLayout, (uint64_t)&type metadata for LazyFixedSizeVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v155);
    }
  }
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    unsigned int v116 = *(_DWORD *)(v87 + 128);
    unsigned int v117 = *(_DWORD *)(v87 + 132);
    *(void *)&long long v149 = *(void *)(v87 + 120);
    uint64_t v115 = v149;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v118 = _ViewOutputs.subscript.getter();
    *(void *)&long long v149 = v115;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v119 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    long long v120 = v136[3];
    v155[2] = v136[2];
    v155[3] = v120;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v121 = v136[1];
    v155[0] = *v136;
    v155[1] = v121;
    if ((v118 & 0x100000000) != 0) {
      LODWORD(v118) = v135;
    }
    if ((v119 & 0x100000000) != 0) {
      LODWORD(v119) = v135;
    }
    int v122 = *(_DWORD *)(v87 + 144);
    outlined retain of _ViewInputs((uint64_t)v136);
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v122, v118, v119, (uint64_t)&v149);
    v155[2] = v151;
    v155[3] = v152;
    *(void *)&v155[4] = v153;
    v155[0] = v149;
    v155[1] = v150;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v149);
    swift_beginAccess();
    LOBYTE(v142) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs((uint64_t)v136);
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v161);
  if ((BYTE8(v155[0]) & 1) == 0)
  {
    uint64_t v123 = *(void *)&v155[0];
    swift_beginAccess();
    *(void *)(v87 + 176) = v123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v87;
}

{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  int v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  uint64_t v22;
  long long v23;
  int v24;
  long long v25;
  long long v26;
  int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void (*v34)(_OWORD *, void);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  long long v50;
  unsigned int v51;
  long long v52;
  long long v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  long long v62;
  unsigned int v63;
  long long v64;
  long long v65;
  unsigned int v66;
  long long v67;
  long long v68;
  unsigned int v69;
  long long v70;
  long long v71;
  unsigned int v72;
  long long v73;
  long long v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_OWORD *, void);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  long long v94;
  long long v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  long long v99;
  long long v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  long long v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t AssociatedTypeWitness;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  long long *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  int v154;
  _OWORD v155[21];
  _OWORD v156[21];
  long long v157;
  unsigned char v158[32];
  unsigned char v159[32];
  int v160;
  long long v161;
  long long v162;
  long long v163;
  uint64_t v164;

  uint64_t v4 = v3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  swift_weakInit();
  int v8 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(v3 + 168) = 0;
  int v135 = v8;
  *(_DWORD *)(v3 + 148) = v8;
  *(void *)(v3 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v3 + 176) = xmmword_188371540;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 0;
  uint64_t v130 = v3 + 168;
  *(_DWORD *)(v3 + 224) = 16777471;
  uint64_t v9 = type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0](v9);
  swift_weakAssign();
  swift_release();
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)unint64_t v159 = v11;
  *(_OWORD *)&v159[16] = *(_OWORD *)(a3 + 64);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v157 = *(_OWORD *)a3;
  *(_OWORD *)long long v158 = v12;
  long long v161 = v157;
  long long v162 = v12;
  long long v163 = *(_OWORD *)&v158[16];
  int v160 = *(_DWORD *)(a3 + 80);
  v156[0] = v157;
  v156[1] = v10;
  v156[2] = *(_OWORD *)&v158[16];
  outlined retain of _ViewInputs(a3);
  int v13 = _GraphInputs.scrollTargetRole.getter();
  uint64_t v147 = *(void *)(a3 + 48);
  int v148 = *(_DWORD *)(a3 + 56);
  unsigned int v136 = (long long *)a3;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v156[0] = v157;
  v156[1] = v162;
  v156[2] = *(_OWORD *)&v158[16];
  char v15 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v14 & 1) != 0 && (v15)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  int v133 = v13;
  if (v13 != v135)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v156[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  int v16 = DWORD2(v157);
  uint64_t v17 = *(void *)v158;
  uint64_t v19 = *(void *)&v158[24];
  uint64_t v18 = *(void *)v159;
  int v20 = v160;
  *(void *)(v4 + 32) = v157;
  *(_DWORD *)(v4 + 40) = v16;
  *(void *)(v4 + 48) = v17;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v158[8];
  *(void *)(v4 + 72) = v19;
  *(void *)(v4 + 80) = v18;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v159[8];
  *(void *)(v4 + 104) = *(void *)&v159[24];
  *(_DWORD *)(v4 + 112) = v20;
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v4 + 24) = v21;
  *(_DWORD *)(v4 + 136) = a2;
  uint64_t v22 = (uint64_t)v136;
  long long v23 = v136[3];
  v156[2] = v136[2];
  v156[3] = v23;
  v156[4] = v136[4];
  LODWORD(v156[5]) = *((_DWORD *)v136 + 20);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v24;
  v156[0] = v161;
  v156[1] = v162;
  v156[2] = v163;
  LOBYTE(v155[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  long long v25 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v25;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v26 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v26;
  swift_getKeyPath();
  int v27 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v27;
  long long v28 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v28;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v29 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v29;
  LODWORD(v156[0]) = _ViewInputs.viewPhase.getter();
  *((void *)&v156[0] + 1) = 0;
  LODWORD(v156[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v22);
  int v132 = a1;
  specialized LazySubviewPlacements.init(layout:cache:inputs:)(a1, v30, v22, (uint64_t)v156);
  memcpy(v155, v156, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPlacements<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
  uint64_t v32 = v31;
  lazy protocol witness table accessor for type LazySubviewPlacements<LazyHGridLayout> and conformance LazySubviewPlacements<A>();
  uint64_t v131 = v32;
  unsigned int v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v156);
  *(_DWORD *)(v4 + 144) = v33;
  *(void *)&v155[0] = __PAIR64__(v30, v33);
  int v134 = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  uint64_t v139 = v4;
  *(void *)(v4 + 120) = *(void *)&v155[0];
  uint64_t v138 = v4 + 120;
  *(void *)(v4 + 128) = *((void *)&v155[0] + 1);
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v137 = (char *)&v149 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v34 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      v34(v155, 0);
      uint64_t v38 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v39 = PreferenceKeys.endIndex.getter();
      if (v38 < 0 || v38 >= v39) {
        break;
      }
      *((void *)&v149 + 1) = v38 + 1;
      swift_bridgeObjectRelease();
      uint64_t v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v139 + 144), 0, v36, v37);
      LODWORD(v155[0]) = v40;
      *((void *)&v155[0] + 1) = v41;
      MEMORY[0x1F4188790](v40);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v42 = type metadata accessor for LazyPreference();
      uint64_t v127 = v42;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v155, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v125, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
      swift_release();
      uint64_t v45 = v142;
      swift_beginAccess();
      MEMORY[0x18C10D730](v36, v45, v36, v37);
      swift_endAccess();
      uint64_t v46 = *((void *)&v149 + 1);
      if (v46 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  int v47 = v132;
  if ((BYTE4(v163) & 2) != 0)
  {
    uint64_t v48 = (uint64_t)v136;
    long long v49 = v136[3];
    v155[2] = v136[2];
    v155[3] = v49;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v50 = v136[1];
    v155[0] = *v136;
    v155[1] = v50;
    unsigned int v51 = _ViewInputs.environment.getter();
    long long v52 = *(_OWORD *)(v48 + 48);
    v155[2] = *(_OWORD *)(v48 + 32);
    v155[3] = v52;
    v155[4] = *(_OWORD *)(v48 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v48 + 80);
    long long v53 = *(_OWORD *)(v48 + 16);
    v155[0] = *(_OWORD *)v48;
    v155[1] = v53;
    unsigned int v54 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v51, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v54, v134);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyHGridLayout> and conformance LazyLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    swift_beginAccess();
    LOBYTE(v149) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v55 = (char *)v161;
  uint64_t v56 = (uint64_t)v136;
  outlined retain of _ViewInputs((uint64_t)v136);
  uint64_t v137 = v55;
  PropertyList.subscript.getter();
  uint64_t v57 = outlined release of _ViewInputs(v56);
  unsigned int v58 = v155[0];
  uint64_t v59 = v139;
  if (LODWORD(v155[0]) != v135)
  {
    uint64_t v60 = (uint64_t)v136;
    long long v61 = v136[3];
    v155[2] = v136[2];
    v155[3] = v61;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v62 = v136[1];
    v155[0] = *v136;
    v155[1] = v62;
    unsigned int v63 = _ViewInputs.size.getter();
    long long v64 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v64;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v65 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v65;
    unsigned int v66 = _ViewInputs.position.getter();
    long long v67 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v67;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v68 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v68;
    unsigned int v69 = _ViewInputs.transform.getter();
    long long v70 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v70;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v71 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v71;
    unsigned int v72 = _ViewInputs.environment.getter();
    long long v73 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v73;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v74 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v74;
    unsigned int v75 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v63, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v69, v66);
    *(void *)&v155[1] = __PAIR64__(v58, v72);
    *((void *)&v155[1] + 1) = __PAIR64__(v75, v134);
    *(void *)&v155[2] = 0;
    DWORD2(v155[2]) = 0;
    *(void *)&v155[3] = 0;
    BYTE8(v155[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyHGridLayout> and conformance LazySubviewPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v57 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v57);
  uint64_t WitnessTable = (uint64_t)_s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0;
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v59 + 144));
  uint64_t WitnessTable = (uint64_t)partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v76 = v139;
    while (1)
    {
      uint64_t v80 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      v80(v155, 0);
      uint64_t v84 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v85 = PreferenceKeys.endIndex.getter();
      if (v84 < 0 || v84 >= v85) {
        break;
      }
      uint64_t v79 = v84 + 1;
      *((void *)&v149 + 1) = v79;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v142 = *(void *)(v76 + 120);
      unint64_t v143 = *(void *)(v76 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v77 = swift_endAccess();
        MEMORY[0x1F4188790](v77);
        uint64_t AssociatedTypeWitness = v82;
        uint64_t v127 = v83;
        uint64_t WitnessTable = v76;
        uint64_t v78 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v78);
        AGGraphMutateAttribute();
        uint64_t v79 = *((void *)&v149 + 1);
      }
      if (v79 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  char v86 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v87 = v139;
  if ((v86 & 1) != 0 || v133 != v135)
  {
    uint64_t v88 = (uint64_t)v136;
    long long v89 = v136[3];
    v155[2] = v136[2];
    v155[3] = v89;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v90 = v136[1];
    v155[0] = *v136;
    v155[1] = v90;
    swift_retain();
    _ViewInputs.position.getter();
    unint64_t v91 = AGCreateWeakAttribute();
    unsigned int v92 = v91;
    unint64_t v93 = HIDWORD(v91);
    long long v94 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v94;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v95 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v95;
    _ViewInputs.transform.getter();
    unint64_t v96 = AGCreateWeakAttribute();
    unsigned int v97 = v96;
    unint64_t v98 = HIDWORD(v96);
    long long v99 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v99;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v100 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v100;
    unint64_t v101 = _ViewInputs.weakScrollable.getter();
    int v102 = v101;
    unint64_t v103 = HIDWORD(v101);
    swift_beginAccess();
    long long v149 = *(_OWORD *)(v87 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v104 = AGCreateWeakAttribute();
    unint64_t v142 = __PAIR64__(v93, v92);
    unint64_t v143 = __PAIR64__(v98, v97);
    int v144 = v102;
    int v145 = v103;
    uint64_t v146 = v104;
    swift_weakInit();
    if (v86)
    {
      uint64_t v105 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_18834BB80;
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *(void *)(v106 + 56) = v107;
      *(void *)(v106 + 64) = lazy protocol witness table accessor for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>();
      uint64_t v108 = swift_allocObject();
      *(void *)(v106 + 32) = v108;
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, v108 + 16, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      *(void *)&v155[0] = v106;
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v105, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[Scrollable]>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v149) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v133 == v135)
    {
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      swift_release();
    }
    else
    {
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *((void *)&v155[1] + 1) = v109;
      *(void *)&v155[2] = lazy protocol witness table accessor for type LazyScrollable<LazyHGridLayout> and conformance LazyScrollable<A>();
      *(void *)&v155[0] = swift_allocObject();
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, *(void *)&v155[0] + 16, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout);
      uint64_t v110 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for Attribute<ViewList>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v110, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
      uint64_t v111 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(void *)&long long v149 = v147;
      DWORD2(v149) = v148;
      uint64_t WitnessTable = MEMORY[0x1F4188790](v111);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      long long v112 = v136[3];
      long long v151 = v136[2];
      long long v152 = v112;
      long long v153 = v136[4];
      int v154 = *((_DWORD *)v136 + 20);
      long long v113 = v136[1];
      long long v149 = *v136;
      long long v150 = v113;
      outlined retain of _ViewInputs((uint64_t)v136);
      uint64_t v114 = ScrollStateRequestTransform.init(collection:inputs:)();
      uint64_t v140 = v147;
      int v141 = v148;
      MEMORY[0x1F4188790](v114);
      uint64_t WitnessTable = (uint64_t)v155;
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v139;
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyHGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyHGridLayout and conformance LazyHGridLayout, (uint64_t)&type metadata for LazyHGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v155);
    }
  }
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    unsigned int v116 = *(_DWORD *)(v87 + 128);
    unsigned int v117 = *(_DWORD *)(v87 + 132);
    *(void *)&long long v149 = *(void *)(v87 + 120);
    uint64_t v115 = v149;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v118 = _ViewOutputs.subscript.getter();
    *(void *)&long long v149 = v115;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v119 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    long long v120 = v136[3];
    v155[2] = v136[2];
    v155[3] = v120;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v121 = v136[1];
    v155[0] = *v136;
    v155[1] = v121;
    if ((v118 & 0x100000000) != 0) {
      LODWORD(v118) = v135;
    }
    if ((v119 & 0x100000000) != 0) {
      LODWORD(v119) = v135;
    }
    int v122 = *(_DWORD *)(v87 + 144);
    outlined retain of _ViewInputs((uint64_t)v136);
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v122, v118, v119, (uint64_t)&v149);
    v155[2] = v151;
    v155[3] = v152;
    *(void *)&v155[4] = v153;
    v155[0] = v149;
    v155[1] = v150;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v149);
    swift_beginAccess();
    LOBYTE(v142) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs((uint64_t)v136);
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v161);
  if ((BYTE8(v155[0]) & 1) == 0)
  {
    uint64_t v123 = *(void *)&v155[0];
    swift_beginAccess();
    *(void *)(v87 + 176) = v123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v87;
}

{
  uint64_t v3;
  uint64_t v4;
  int v8;
  uint64_t v9;
  long long v10;
  long long v11;
  long long v12;
  int v13;
  char v14;
  char v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  id v21;
  uint64_t v22;
  long long v23;
  int v24;
  long long v25;
  long long v26;
  int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  void (*v34)(_OWORD *, void);
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  long long v49;
  long long v50;
  unsigned int v51;
  long long v52;
  long long v53;
  unsigned int v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  long long v61;
  long long v62;
  unsigned int v63;
  long long v64;
  long long v65;
  unsigned int v66;
  long long v67;
  long long v68;
  unsigned int v69;
  long long v70;
  long long v71;
  unsigned int v72;
  long long v73;
  long long v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(_OWORD *, void);
  uint64_t *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  long long v89;
  long long v90;
  unint64_t v91;
  unsigned int v92;
  unint64_t v93;
  long long v94;
  long long v95;
  unint64_t v96;
  unsigned int v97;
  unint64_t v98;
  long long v99;
  long long v100;
  unint64_t v101;
  int v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  long long v112;
  long long v113;
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  long long v120;
  long long v121;
  int v122;
  uint64_t v123;
  uint64_t v125;
  uint64_t AssociatedTypeWitness;
  uint64_t v127;
  uint64_t WitnessTable;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  int v132;
  int v133;
  int v134;
  int v135;
  long long *v136;
  char *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  int v144;
  int v145;
  uint64_t v146;
  uint64_t v147;
  int v148;
  long long v149;
  long long v150;
  long long v151;
  long long v152;
  long long v153;
  int v154;
  _OWORD v155[21];
  _OWORD v156[21];
  long long v157;
  unsigned char v158[32];
  unsigned char v159[32];
  int v160;
  long long v161;
  long long v162;
  long long v163;
  uint64_t v164;

  uint64_t v4 = v3;
  uint64_t v164 = *MEMORY[0x1E4F143B8];
  swift_weakInit();
  int v8 = *MEMORY[0x1E4F4E7A0];
  *(_DWORD *)(v3 + 168) = 0;
  int v135 = v8;
  *(_DWORD *)(v3 + 148) = v8;
  *(void *)(v3 + 160) = MEMORY[0x1E4FBC868];
  *(_OWORD *)(v3 + 176) = xmmword_188371540;
  *(_DWORD *)(v3 + 192) = 0;
  *(_DWORD *)(v3 + 220) = 0;
  *(void *)(v3 + 200) = 0;
  *(void *)(v3 + 208) = 0;
  *(unsigned char *)(v3 + 216) = 0;
  uint64_t v130 = v3 + 168;
  *(_DWORD *)(v3 + 224) = 16777471;
  uint64_t v9 = type metadata accessor for ViewGraph();
  MEMORY[0x18C114EE0](v9);
  swift_weakAssign();
  swift_release();
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v11 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)&v158[16] = *(_OWORD *)(a3 + 32);
  *(_OWORD *)unint64_t v159 = v11;
  *(_OWORD *)&v159[16] = *(_OWORD *)(a3 + 64);
  long long v12 = *(_OWORD *)(a3 + 16);
  long long v157 = *(_OWORD *)a3;
  *(_OWORD *)long long v158 = v12;
  long long v161 = v157;
  long long v162 = v12;
  long long v163 = *(_OWORD *)&v158[16];
  int v160 = *(_DWORD *)(a3 + 80);
  v156[0] = v157;
  v156[1] = v10;
  v156[2] = *(_OWORD *)&v158[16];
  outlined retain of _ViewInputs(a3);
  int v13 = _GraphInputs.scrollTargetRole.getter();
  uint64_t v147 = *(void *)(a3 + 48);
  int v148 = *(_DWORD *)(a3 + 56);
  unsigned int v136 = (long long *)a3;
  char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  v156[0] = v157;
  v156[1] = v162;
  v156[2] = *(_OWORD *)&v158[16];
  char v15 = _GraphInputs.scrollTargetRemovePreference.getter();
  if (v14 & 1) != 0 && (v15)
  {
    PreferencesInputs.remove<A>(_:)();
    PreferencesInputs.remove<A>(_:)();
  }
  int v133 = v13;
  if (v13 != v135)
  {
    _GraphInputs.scrollTargetRole.setter();
    _GraphInputs.scrollTargetRemovePreference.setter();
    LOBYTE(v156[0]) = 1;
    _GraphInputs.resetScrollPosition(kind:)();
  }
  int v16 = DWORD2(v157);
  uint64_t v17 = *(void *)v158;
  uint64_t v19 = *(void *)&v158[24];
  uint64_t v18 = *(void *)v159;
  int v20 = v160;
  *(void *)(v4 + 32) = v157;
  *(_DWORD *)(v4 + 40) = v16;
  *(void *)(v4 + 48) = v17;
  *(_OWORD *)(v4 + 56) = *(_OWORD *)&v158[8];
  *(void *)(v4 + 72) = v19;
  *(void *)(v4 + 80) = v18;
  *(_OWORD *)(v4 + 88) = *(_OWORD *)&v159[8];
  *(void *)(v4 + 104) = *(void *)&v159[24];
  *(_DWORD *)(v4 + 112) = v20;
  id v21 = (id)AGSubgraphGetCurrent();
  if (!v21) {
LABEL_42:
  }
    __break(1u);
  *(void *)(v4 + 24) = v21;
  *(_DWORD *)(v4 + 136) = a2;
  uint64_t v22 = (uint64_t)v136;
  long long v23 = v136[3];
  v156[2] = v136[2];
  v156[3] = v23;
  v156[4] = v136[4];
  LODWORD(v156[5]) = *((_DWORD *)v136 + 20);
  swift_getKeyPath();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  int v24 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 140) = v24;
  v156[0] = v161;
  v156[1] = v162;
  v156[2] = v163;
  LOBYTE(v155[0]) = 1;
  *(_DWORD *)(v4 + 148) = _GraphInputs.scrollPositionBinding(kind:)();
  long long v25 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v25;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v26 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v26;
  swift_getKeyPath();
  int v27 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  *(_DWORD *)(v4 + 152) = v27;
  long long v28 = *(_OWORD *)(v22 + 48);
  v156[2] = *(_OWORD *)(v22 + 32);
  v156[3] = v28;
  v156[4] = *(_OWORD *)(v22 + 64);
  LODWORD(v156[5]) = *(_DWORD *)(v22 + 80);
  long long v29 = *(_OWORD *)(v22 + 16);
  v156[0] = *(_OWORD *)v22;
  v156[1] = v29;
  LODWORD(v156[0]) = _ViewInputs.viewPhase.getter();
  *((void *)&v156[0] + 1) = 0;
  LODWORD(v156[1]) = 0;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for LazyLayoutViewCache();
  lazy protocol witness table accessor for type UpdateViewCache and conformance UpdateViewCache();
  int v30 = Attribute.init<A>(body:value:flags:update:)();
  outlined retain of _ViewInputs(v22);
  int v132 = a1;
  specialized LazySubviewPlacements.init(layout:cache:inputs:)(a1, v30, v22, (uint64_t)v156);
  memcpy(v155, v156, 0x149uLL);
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  type metadata accessor for External<AccessibilityScrollableModifier>(0, &lazy cache variable for type metadata for [_LazyLayout_PlacedSubview], (uint64_t)&type metadata for _LazyLayout_PlacedSubview, MEMORY[0x1E4FBB320]);
  type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPlacements<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
  uint64_t v32 = v31;
  lazy protocol witness table accessor for type LazySubviewPlacements<LazyVGridLayout> and conformance LazySubviewPlacements<A>();
  uint64_t v131 = v32;
  unsigned int v33 = Attribute.init<A>(body:value:flags:update:)();
  outlined release of LazySubviewPlacements<LazyFixedSizeHStackLayout>((uint64_t)v156);
  *(_DWORD *)(v4 + 144) = v33;
  *(void *)&v155[0] = __PAIR64__(v30, v33);
  int v134 = v30;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LazyCollectedPlacements and conformance LazyCollectedPlacements();
  Attribute.init<A>(body:value:flags:update:)();
  static AGAttributeFlags.transactional.getter();
  AGGraphSetFlags();
  _ViewOutputs.init()();
  uint64_t v139 = v4;
  *(void *)(v4 + 120) = *(void *)&v155[0];
  uint64_t v138 = v4 + 120;
  *(void *)(v4 + 128) = *((void *)&v155[0] + 1);
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    uint64_t v137 = (char *)&v149 + 8;
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    while (1)
    {
      long long v34 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v36 = *v35;
      uint64_t v37 = v35[1];
      v34(v155, 0);
      uint64_t v38 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v39 = PreferenceKeys.endIndex.getter();
      if (v38 < 0 || v38 >= v39) {
        break;
      }
      *((void *)&v149 + 1) = v38 + 1;
      swift_bridgeObjectRelease();
      uint64_t v40 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(unsigned int *)(v139 + 144), 0, v36, v37);
      LODWORD(v155[0]) = v40;
      *((void *)&v155[0] + 1) = v41;
      MEMORY[0x1F4188790](v40);
      uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
      uint64_t v42 = type metadata accessor for LazyPreference();
      uint64_t v127 = v42;
      uint64_t WitnessTable = swift_getWitnessTable();
      uint64_t v43 = type metadata accessor for Attribute();
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v155, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v125, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
      swift_release();
      uint64_t v45 = v142;
      swift_beginAccess();
      MEMORY[0x18C10D730](v36, v45, v36, v37);
      swift_endAccess();
      uint64_t v46 = *((void *)&v149 + 1);
      if (v46 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_12;
      }
    }
    __break(1u);
    goto LABEL_41;
  }
LABEL_12:
  swift_bridgeObjectRelease();
  int v47 = v132;
  if ((BYTE4(v163) & 2) != 0)
  {
    uint64_t v48 = (uint64_t)v136;
    long long v49 = v136[3];
    v155[2] = v136[2];
    v155[3] = v49;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v50 = v136[1];
    v155[0] = *v136;
    v155[1] = v50;
    unsigned int v51 = _ViewInputs.environment.getter();
    long long v52 = *(_OWORD *)(v48 + 48);
    v155[2] = *(_OWORD *)(v48 + 32);
    v155[3] = v52;
    v155[4] = *(_OWORD *)(v48 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v48 + 80);
    long long v53 = *(_OWORD *)(v48 + 16);
    v155[0] = *(_OWORD *)v48;
    v155[1] = v53;
    unsigned int v54 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v51, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v54, v134);
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    lazy protocol witness table accessor for type LazyLayoutComputer<LazyVGridLayout> and conformance LazyLayoutComputer<A>();
    Attribute.init<A>(body:value:flags:update:)();
    swift_beginAccess();
    LOBYTE(v149) = 0;
    _ViewOutputs.layoutComputer.setter();
    swift_endAccess();
  }
  uint64_t v55 = (char *)v161;
  uint64_t v56 = (uint64_t)v136;
  outlined retain of _ViewInputs((uint64_t)v136);
  uint64_t v137 = v55;
  PropertyList.subscript.getter();
  uint64_t v57 = outlined release of _ViewInputs(v56);
  unsigned int v58 = v155[0];
  uint64_t v59 = v139;
  if (LODWORD(v155[0]) != v135)
  {
    uint64_t v60 = (uint64_t)v136;
    long long v61 = v136[3];
    v155[2] = v136[2];
    v155[3] = v61;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v62 = v136[1];
    v155[0] = *v136;
    v155[1] = v62;
    unsigned int v63 = _ViewInputs.size.getter();
    long long v64 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v64;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v65 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v65;
    unsigned int v66 = _ViewInputs.position.getter();
    long long v67 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v67;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v68 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v68;
    unsigned int v69 = _ViewInputs.transform.getter();
    long long v70 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v70;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v71 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v71;
    unsigned int v72 = _ViewInputs.environment.getter();
    long long v73 = *(_OWORD *)(v60 + 48);
    v155[2] = *(_OWORD *)(v60 + 32);
    v155[3] = v73;
    v155[4] = *(_OWORD *)(v60 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v60 + 80);
    long long v74 = *(_OWORD *)(v60 + 16);
    v155[0] = *(_OWORD *)v60;
    v155[1] = v74;
    unsigned int v75 = _ViewInputs.containerSize.getter();
    *(void *)&v155[0] = __PAIR64__(v63, v47);
    *((void *)&v155[0] + 1) = __PAIR64__(v69, v66);
    *(void *)&v155[1] = __PAIR64__(v58, v72);
    *((void *)&v155[1] + 1) = __PAIR64__(v75, v134);
    *(void *)&v155[2] = 0;
    DWORD2(v155[2]) = 0;
    *(void *)&v155[3] = 0;
    BYTE8(v155[3]) = 2;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyVGridLayout> and conformance LazySubviewPrefetcher<A>();
    Attribute.init<A>(body:value:flags:update:)();
    AGGraphAddInput();
    static AGAttributeFlags.transactional.getter();
    uint64_t v57 = AGGraphSetFlags();
  }
  MEMORY[0x1F4188790](v57);
  uint64_t WitnessTable = (uint64_t)_s7SwiftUI19LazyLayoutViewCacheC6layout4list6inputsAC14AttributeGraph0J0VyxG_AIyAA0E4List_pGAA01_E6InputsVtcAA0cD0RzlufcyAA06UpdateeF033_E8ACBA7E5D77BFDAB5F4F8C9CFE08356LLVzXEfU_TA_0;
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  MEMORY[0x1F4188790](*(unsigned int *)(v59 + 144));
  uint64_t WitnessTable = (uint64_t)partial apply for specialized closure #2 in LazyLayoutViewCache.init<A>(layout:list:inputs:);
  uint64_t v129 = v59;
  AGGraphMutateAttribute();
  long long v149 = *(unint64_t *)v159;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    uint64_t v76 = v139;
    while (1)
    {
      uint64_t v80 = (void (*)(_OWORD *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      uint64_t v82 = *v81;
      uint64_t v83 = v81[1];
      v80(v155, 0);
      uint64_t v84 = *((void *)&v149 + 1);
      *(void *)&v155[0] = v149;
      swift_bridgeObjectRetain();
      uint64_t v85 = PreferenceKeys.endIndex.getter();
      if (v84 < 0 || v84 >= v85) {
        break;
      }
      uint64_t v79 = v84 + 1;
      *((void *)&v149 + 1) = v79;
      swift_bridgeObjectRelease();
      swift_beginAccess();
      unint64_t v142 = *(void *)(v76 + 120);
      unint64_t v143 = *(void *)(v76 + 128);
      if ((_ViewOutputs.subscript.getter() & 0x100000000) != 0)
      {
        swift_endAccess();
      }
      else
      {
        uint64_t v77 = swift_endAccess();
        MEMORY[0x1F4188790](v77);
        uint64_t AssociatedTypeWitness = v82;
        uint64_t v127 = v83;
        uint64_t WitnessTable = v76;
        uint64_t v78 = type metadata accessor for LazyPreference();
        MEMORY[0x1F4188790](v78);
        AGGraphMutateAttribute();
        uint64_t v79 = *((void *)&v149 + 1);
      }
      if (v79 == PreferenceKeys.endIndex.getter()) {
        goto LABEL_24;
      }
    }
LABEL_41:
    __break(1u);
    goto LABEL_42;
  }
LABEL_24:
  swift_bridgeObjectRelease();
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  char v86 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  uint64_t v87 = v139;
  if ((v86 & 1) != 0 || v133 != v135)
  {
    uint64_t v88 = (uint64_t)v136;
    long long v89 = v136[3];
    v155[2] = v136[2];
    v155[3] = v89;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v90 = v136[1];
    v155[0] = *v136;
    v155[1] = v90;
    swift_retain();
    _ViewInputs.position.getter();
    unint64_t v91 = AGCreateWeakAttribute();
    unsigned int v92 = v91;
    unint64_t v93 = HIDWORD(v91);
    long long v94 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v94;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v95 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v95;
    _ViewInputs.transform.getter();
    unint64_t v96 = AGCreateWeakAttribute();
    unsigned int v97 = v96;
    unint64_t v98 = HIDWORD(v96);
    long long v99 = *(_OWORD *)(v88 + 48);
    v155[2] = *(_OWORD *)(v88 + 32);
    v155[3] = v99;
    v155[4] = *(_OWORD *)(v88 + 64);
    LODWORD(v155[5]) = *(_DWORD *)(v88 + 80);
    long long v100 = *(_OWORD *)(v88 + 16);
    v155[0] = *(_OWORD *)v88;
    v155[1] = v100;
    unint64_t v101 = _ViewInputs.weakScrollable.getter();
    int v102 = v101;
    unint64_t v103 = HIDWORD(v101);
    swift_beginAccess();
    long long v149 = *(_OWORD *)(v87 + 120);
    _ViewOutputs.subscript.getter();
    swift_endAccess();
    uint64_t v104 = AGCreateWeakAttribute();
    unint64_t v142 = __PAIR64__(v93, v92);
    unint64_t v143 = __PAIR64__(v98, v97);
    int v144 = v102;
    int v145 = v103;
    uint64_t v146 = v104;
    swift_weakInit();
    if (v86)
    {
      uint64_t v105 = MEMORY[0x1E4F3F3B0];
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Scrollable>, (unint64_t *)&lazy cache variable for type metadata for Scrollable, MEMORY[0x1E4F3F3B0], MEMORY[0x1E4FBBE00]);
      uint64_t v106 = swift_allocObject();
      *(_OWORD *)(v106 + 16) = xmmword_18834BB80;
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *(void *)(v106 + 56) = v107;
      *(void *)(v106 + 64) = lazy protocol witness table accessor for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>();
      uint64_t v108 = swift_allocObject();
      *(void *)(v106 + 32) = v108;
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, v108 + 16, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      *(void *)&v155[0] = v106;
      type metadata accessor for Attribute<ViewList>(0, (unint64_t *)&lazy cache variable for type metadata for [Scrollable], (unint64_t *)&lazy cache variable for type metadata for Scrollable, v105, MEMORY[0x1E4FBB320]);
      type metadata accessor for External<[Scrollable]>();
      lazy protocol witness table accessor for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>((unint64_t *)&lazy protocol witness table cache variable for type External<[Scrollable]> and conformance External<A>, (void (*)(uint64_t))type metadata accessor for External<[Scrollable]>);
      Attribute.init<A>(body:value:flags:update:)();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      LOBYTE(v149) = 0;
      _ViewOutputs.subscript.setter();
      swift_endAccess();
    }
    if (v133 == v135)
    {
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      swift_release();
    }
    else
    {
      type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(0, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      *((void *)&v155[1] + 1) = v109;
      *(void *)&v155[2] = lazy protocol witness table accessor for type LazyScrollable<LazyVGridLayout> and conformance LazyScrollable<A>();
      *(void *)&v155[0] = swift_allocObject();
      outlined init with copy of LazyScrollable<LazyFixedSizeHStackLayout>((uint64_t)&v142, *(void *)&v155[0] + 16, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout);
      uint64_t v110 = MEMORY[0x1E4F40678];
      type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection);
      type metadata accessor for Attribute<ViewList>(0, &lazy cache variable for type metadata for External<ScrollableCollection>, (unint64_t *)&lazy cache variable for type metadata for ScrollableCollection, v110, MEMORY[0x1E4F4E778]);
      lazy protocol witness table accessor for type External<ScrollableCollection> and conformance External<A>();
      Attribute.init<A>(body:value:flags:update:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v155);
      uint64_t v111 = ScrollTargetRole.SetLayout.init(role:collection:)();
      *(void *)&long long v149 = v147;
      DWORD2(v149) = v148;
      uint64_t WitnessTable = MEMORY[0x1F4188790](v111);
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_bridgeObjectRelease();
      long long v112 = v136[3];
      long long v151 = v136[2];
      long long v152 = v112;
      long long v153 = v136[4];
      int v154 = *((_DWORD *)v136 + 20);
      long long v113 = v136[1];
      long long v149 = *v136;
      long long v150 = v113;
      outlined retain of _ViewInputs((uint64_t)v136);
      uint64_t v114 = ScrollStateRequestTransform.init(collection:inputs:)();
      uint64_t v140 = v147;
      int v141 = v148;
      MEMORY[0x1F4188790](v114);
      uint64_t WitnessTable = (uint64_t)v155;
      swift_beginAccess();
      outlined retain of [Text.Modifier]((uint64_t)&v147);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_endAccess();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v87 = v139;
      outlined destroy of PropertiesTransform<AccessibilityScrollableModifier>((uint64_t)&v142, &lazy cache variable for type metadata for LazyScrollable<LazyVGridLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVGridLayout and conformance LazyVGridLayout, (uint64_t)&type metadata for LazyVGridLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
      outlined destroy of ScrollStateRequestTransform((uint64_t)v155);
    }
  }
  *(void *)&v155[0] = v147;
  DWORD2(v155[0]) = v148;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    swift_beginAccess();
    unsigned int v116 = *(_DWORD *)(v87 + 128);
    unsigned int v117 = *(_DWORD *)(v87 + 132);
    *(void *)&long long v149 = *(void *)(v87 + 120);
    uint64_t v115 = v149;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v118 = _ViewOutputs.subscript.getter();
    *(void *)&long long v149 = v115;
    *((void *)&v149 + 1) = __PAIR64__(v117, v116);
    uint64_t v119 = _ViewOutputs.subscript.getter();
    swift_endAccess();
    long long v120 = v136[3];
    v155[2] = v136[2];
    v155[3] = v120;
    v155[4] = v136[4];
    LODWORD(v155[5]) = *((_DWORD *)v136 + 20);
    long long v121 = v136[1];
    v155[0] = *v136;
    v155[1] = v121;
    if ((v118 & 0x100000000) != 0) {
      LODWORD(v118) = v135;
    }
    if ((v119 & 0x100000000) != 0) {
      LODWORD(v119) = v135;
    }
    int v122 = *(_DWORD *)(v87 + 144);
    outlined retain of _ViewInputs((uint64_t)v136);
    specialized LazyFocusableFillerBoundsProvider.init(inputs:placedSubviews:focusableBounds:nestedFillerBounds:)(v122, v118, v119, (uint64_t)&v149);
    v155[2] = v151;
    v155[3] = v152;
    *(void *)&v155[4] = v153;
    v155[0] = v149;
    v155[1] = v150;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for External<AccessibilityScrollableModifier>(0, (unint64_t *)&lazy cache variable for type metadata for [FocusableFillerBounds], (uint64_t)&type metadata for FocusableFillerBounds, MEMORY[0x1E4FBB320]);
    lazy protocol witness table accessor for type LazyFocusableFillerBoundsProvider and conformance LazyFocusableFillerBoundsProvider();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of LazyFocusableFillerBoundsProvider((uint64_t)&v149);
    swift_beginAccess();
    LOBYTE(v142) = 0;
    PreferencesOutputs.subscript.setter();
    swift_endAccess();
  }
  outlined retain of _GraphInputs((uint64_t)&v161);
  outlined release of _ViewInputs((uint64_t)v136);
  lazy protocol witness table accessor for type LazyLayoutReuseIdleInput and conformance LazyLayoutReuseIdleInput();
  PropertyList.subscript.getter();
  outlined release of _GraphInputs((uint64_t)&v161);
  if ((BYTE8(v155[0]) & 1) == 0)
  {
    uint64_t v123 = *(void *)&v155[0];
    swift_beginAccess();
    *(void *)(v87 + 176) = v123;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return v87;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPrefetcher<LazyVStackLayout> and conformance LazySubviewPrefetcher<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyVStackLayout> and conformance LazySubviewPrefetcher<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyVStackLayout> and conformance LazySubviewPrefetcher<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPrefetcher<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPrefetcher);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPrefetcher<LazyVStackLayout> and conformance LazySubviewPrefetcher<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazySubviewPlacements<LazyVStackLayout> and conformance LazySubviewPlacements<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazySubviewPlacements<LazyVStackLayout> and conformance LazySubviewPlacements<A>;
  if (!lazy protocol witness table cache variable for type LazySubviewPlacements<LazyVStackLayout> and conformance LazySubviewPlacements<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazySubviewPlacements<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazySubviewPlacements);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazySubviewPlacements<LazyVStackLayout> and conformance LazySubviewPlacements<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>;
  if (!lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>)
  {
    type metadata accessor for LazyLayoutComputer<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyLayoutComputer<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyLayoutComputer);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyLayoutComputer<LazyVStackLayout> and conformance LazyLayoutComputer<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>;
  if (!lazy protocol witness table cache variable for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for LazyScrollable<LazyVStackLayout>, (uint64_t (*)(void))lazy protocol witness table accessor for type LazyVStackLayout and conformance LazyVStackLayout, (uint64_t)&type metadata for LazyVStackLayout, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for LazyScrollable);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LazyScrollable<LazyVStackLayout> and conformance LazyScrollable<A>);
  }
  return result;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabelStyleConfiguration.Icon(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabeledContentStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance LabelStyleConfiguration.Title(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  int v7 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeView(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t specialized static ViewAlias._makeView(view:inputs:)(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Title> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Title>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for LabelStyleConfiguration.Title, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabelStyleConfiguration.Icon> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabelStyleConfiguration.Icon>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for LabelStyleConfiguration.Icon, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for LabeledContentStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ToggleStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ToggleStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ToggleStyleConfiguration.Label and conformance ToggleStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ToggleStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (void (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ListStyleContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ListStyleContent>, (void (*)(void))lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ListStyleContent, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<UIKitButtonConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<UIKitButtonConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type UIKitButtonConfiguration.Label and conformance UIKitButtonConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for UIKitButtonConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.TextInputSuggestions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.TextInputSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type EnvironmentValues.TextInputSuggestions and conformance EnvironmentValues.TextInputSuggestions();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for EnvironmentValues.TextInputSuggestions, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchField> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchField>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type EnvironmentValues.SearchField and conformance EnvironmentValues.SearchField();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for EnvironmentValues.SearchField, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchSuggestions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchSuggestions>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type EnvironmentValues.SearchSuggestions and conformance EnvironmentValues.SearchSuggestions();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for EnvironmentValues.SearchSuggestions, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomScopeBar> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomScopeBar>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomScopeBar and conformance EnvironmentValues.SearchCustomScopeBar();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for EnvironmentValues.SearchCustomScopeBar, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<EnvironmentValues.SearchCustomAccessory> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<EnvironmentValues.SearchCustomAccessory>, (void (*)(void))lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type EnvironmentValues.SearchCustomAccessory and conformance EnvironmentValues.SearchCustomAccessory();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for EnvironmentValues.SearchCustomAccessory, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (void (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<AccessoryBarContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<AccessoryBarContent>, (void (*)(void))lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type AccessoryBarContent and conformance AccessoryBarContent();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for AccessoryBarContent, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_TextFieldStyleLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_TextFieldStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type _TextFieldStyleLabel and conformance _TextFieldStyleLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for _TextFieldStyleLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_DatePickerStyleLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_DatePickerStyleLabel>, (void (*)(void))lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type _DatePickerStyleLabel and conformance _DatePickerStyleLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for _DatePickerStyleLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Footer> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for FormStyleConfiguration.Footer, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<FormStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<FormStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for FormStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<HelpStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<HelpStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type HelpStyleConfiguration.Content and conformance HelpStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for HelpStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type MenuStyleConfiguration.Label and conformance MenuStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for MenuStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<MenuStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<MenuStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type MenuStyleConfiguration.Content and conformance MenuStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for MenuStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (void (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<PreviewModifierContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<PreviewModifierContent>, (void (*)(void))lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type PreviewModifierContent and conformance PreviewModifierContent();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for PreviewModifierContent, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MarkedValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MarkedValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MarkedValueLabel and conformance GaugeStyleConfiguration.MarkedValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GaugeStyleConfiguration.MarkedValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GaugeStyleConfiguration.CurrentValueLabel and conformance GaugeStyleConfiguration.CurrentValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GaugeStyleConfiguration.CurrentValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MaximumValueLabel and conformance GaugeStyleConfiguration.MaximumValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GaugeStyleConfiguration.MaximumValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GaugeStyleConfiguration.MinimumValueLabel and conformance GaugeStyleConfiguration.MinimumValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GaugeStyleConfiguration.MinimumValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GaugeStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GaugeStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GaugeStyleConfiguration.Label and conformance GaugeStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GaugeStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (void (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<OutlineSubgroupChildren> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<OutlineSubgroupChildren>, (void (*)(void))lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type OutlineSubgroupChildren and conformance OutlineSubgroupChildren();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for OutlineSubgroupChildren, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<TokenFieldConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<TokenFieldConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type TokenFieldConfiguration.Label and conformance TokenFieldConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for TokenFieldConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ButtonStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ButtonStyleConfiguration.Label and conformance ButtonStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ButtonStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (void (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ResolvedRadioGroupPicker.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ResolvedRadioGroupPicker.Label>, (void (*)(void))lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ResolvedRadioGroupPicker.Label and conformance ResolvedRadioGroupPicker.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ResolvedRadioGroupPicker.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Suggestions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Suggestions>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SearchFieldConfiguration.Suggestions and conformance SearchFieldConfiguration.Suggestions();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SearchFieldConfiguration.Suggestions, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Scopes> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Scopes>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SearchFieldConfiguration.Scopes and conformance SearchFieldConfiguration.Scopes();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SearchFieldConfiguration.Scopes, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SearchFieldConfiguration.Control> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SearchFieldConfiguration.Control>, (void (*)(void))lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SearchFieldConfiguration.Control, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MaximumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MaximumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SliderStyleConfiguration.MaximumValueLabel and conformance SliderStyleConfiguration.MaximumValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SliderStyleConfiguration.MaximumValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.MinimumValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.MinimumValueLabel>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SliderStyleConfiguration.MinimumValueLabel and conformance SliderStyleConfiguration.MinimumValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SliderStyleConfiguration.MinimumValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SliderStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SliderStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SliderStyleConfiguration.Label and conformance SliderStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SliderStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.RawContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.RawContent>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SectionStyleConfiguration.RawContent and conformance SectionStyleConfiguration.RawContent();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SectionStyleConfiguration.RawContent, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Footer> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Footer>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SectionStyleConfiguration.Footer and conformance SectionStyleConfiguration.Footer();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SectionStyleConfiguration.Footer, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Header> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Header>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SectionStyleConfiguration.Header and conformance SectionStyleConfiguration.Header();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SectionStyleConfiguration.Header, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<SectionStyleConfiguration.Actions> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<SectionStyleConfiguration.Actions>, (void (*)(void))lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type SectionStyleConfiguration.Actions and conformance SectionStyleConfiguration.Actions();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for SectionStyleConfiguration.Actions, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<StepperStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<StepperStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type StepperStyleConfiguration.Label and conformance StepperStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for StepperStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Label and conformance GroupBoxStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GroupBoxStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<GroupBoxStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<GroupBoxStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type GroupBoxStyleConfiguration.Content and conformance GroupBoxStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for GroupBoxStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<BadgeViewStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<BadgeViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type BadgeViewStyleConfiguration.Content and conformance BadgeViewStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for BadgeViewStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<DatePickerStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<DatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type DatePickerStyleConfiguration.Label and conformance DatePickerStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for DatePickerStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabelGroupStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabelGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type LabelGroupStyleConfiguration.Content and conformance LabelGroupStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for LabelGroupStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ListRowHeightTemplateContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ListRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ListRowHeightTemplateContent and conformance ListRowHeightTemplateContent();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ListRowHeightTemplateContent, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ColorPickerStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ColorPickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ColorPickerStyleConfiguration.Label and conformance ColorPickerStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ColorPickerStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Label and conformance _MenuButtonStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for _MenuButtonStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_MenuButtonStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_MenuButtonStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type _MenuButtonStyleConfiguration.Content and conformance _MenuButtonStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for _MenuButtonStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Label and conformance ControlGroupStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ControlGroupStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ControlGroupStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ControlGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ControlGroupStyleConfiguration.Content and conformance ControlGroupStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ControlGroupStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.CurrentValueLabel>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.CurrentValueLabel and conformance ProgressViewStyleConfiguration.CurrentValueLabel();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ProgressViewStyleConfiguration.CurrentValueLabel, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ProgressViewStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ProgressViewStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type ProgressViewStyleConfiguration.Label and conformance ProgressViewStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ProgressViewStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<LabeledContentStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<LabeledContentStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Content and conformance LabeledContentStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for LabeledContentStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for DisclosureGroupStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<DisclosureGroupStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<DisclosureGroupStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for DisclosureGroupStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t RowHeightTemplate;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<ListFirstRowHeightTemplateContent> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<ListFirstRowHeightTemplateContent>, (void (*)(void))lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  RowHeightTemplate = lazy protocol witness table accessor for type ListFirstRowHeightTemplateContent and conformance ListFirstRowHeightTemplateContent();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for ListFirstRowHeightTemplateContent, RowHeightTemplate, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>((unint64_t *)&lazy protocol witness table cache variable for type SourceInput<MultiDatePickerStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<MultiDatePickerStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type MultiDatePickerStyleConfiguration.Label and conformance MultiDatePickerStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for MultiDatePickerStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<PrimitiveButtonStyleConfiguration.Label> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<PrimitiveButtonStyleConfiguration.Label>, (void (*)(void))lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type PrimitiveButtonStyleConfiguration.Label and conformance PrimitiveButtonStyleConfiguration.Label();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for PrimitiveButtonStyleConfiguration.Label, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_NavigationViewStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_NavigationViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type _NavigationViewStyleConfiguration.Content and conformance _NavigationViewStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for _NavigationViewStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (void (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<_NavigationStackStyleConfiguration.Root> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<_NavigationStackStyleConfiguration.Root>, (void (*)(void))lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type _NavigationStackStyleConfiguration.Root and conformance _NavigationStackStyleConfiguration.Root();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for _NavigationStackStyleConfiguration.Root, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Detail> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Detail>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Detail and conformance NavigationSplitViewStyleConfiguration.Detail();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for NavigationSplitViewStyleConfiguration.Detail, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Content> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Content>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Content and conformance NavigationSplitViewStyleConfiguration.Content();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for NavigationSplitViewStyleConfiguration.Content, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

{
  long long v3;
  long long v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  void (*v11)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v12;
  uint64_t v14;
  int v15;
  uint64_t v16;
  long long v17;
  uint64_t v18;
  uint64_t v19;
  long long v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  long long v24;
  unsigned char v25[32];
  unsigned char v26[32];
  int v27;

  long long v3 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)&v25[16] = *(_OWORD *)(a2 + 32);
  *(_OWORD *)long long v26 = v3;
  *(_OWORD *)&v26[16] = *(_OWORD *)(a2 + 64);
  int v27 = *(_DWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v24 = *(_OWORD *)a2;
  *(_OWORD *)long long v25 = v4;
  type metadata accessor for SourceInput<ListStyleContent>(0, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  outlined retain of _ViewInputs(a2);
  lazy protocol witness table accessor for type SourceInput<ListStyleContent> and conformance SourceInput<A>(&lazy protocol witness table cache variable for type SourceInput<NavigationSplitViewStyleConfiguration.Sidebar> and conformance SourceInput<A>, &lazy cache variable for type metadata for SourceInput<NavigationSplitViewStyleConfiguration.Sidebar>, (void (*)(void))lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar);
  PropertyList.subscript.getter();
  if (!v14)
  {
    uint64_t v23 = 0;
    PropertyList.subscript.setter();
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(v14 + 48);
  uint64_t v7 = *(void *)(v14 + 16);
  uint64_t v6 = *(void *)(v14 + 24);
  uint64_t v8 = *(void *)(v14 + 32);
  uint64_t v9 = *(unsigned int *)(v14 + 40);
  unsigned __int8 v10 = *(unsigned char *)(v14 + 44);
  swift_retain();
  swift_release();
  uint64_t v23 = v5;
  PropertyList.subscript.setter();
  if (!v7)
  {
LABEL_5:
    _ViewOutputs.init()();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_release();
  }
  _GraphInputs.resetCurrentStyleableView()();
  uint64_t v14 = v24;
  int v15 = DWORD2(v24);
  uint64_t v16 = *(void *)v25;
  long long v17 = *(_OWORD *)&v25[8];
  uint64_t v18 = *(void *)&v25[24];
  uint64_t v19 = *(void *)v26;
  long long v20 = *(_OWORD *)&v26[8];
  uint64_t v21 = *(void *)&v26[24];
  int v22 = v27;
  long long v11 = *(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v6 + 8);
  unint64_t v12 = lazy protocol witness table accessor for type NavigationSplitViewStyleConfiguration.Sidebar and conformance NavigationSplitViewStyleConfiguration.Sidebar();
  LOBYTE(v23) = v10;
  v11(&v23, v7, v6, v8, v9 | ((unint64_t)v10 << 32), &v14, &type metadata for NavigationSplitViewStyleConfiguration.Sidebar, v12, v7, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t Label.init(title:icon:)(void (*a1)(void), uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t))
{
  a1();
  uint64_t v4 = type metadata accessor for Label();
  return a3(v4, v5, v6, v7);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabelStyleConfiguration.Title(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

uint64_t View.allowsToolbarItemBridging(options:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a1;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  return MEMORY[0x18C113660](&v7, a2, v5, a3);
}

uint64_t Label.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v40 = a2;
  uint64_t v4 = a1[3];
  type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>();
  uint64_t v5 = v4;
  uint64_t v6 = type metadata accessor for ModifiedContent();
  unint64_t v35 = lazy protocol witness table accessor for type LabelStyleConfiguration.Icon and conformance LabelStyleConfiguration.Icon();
  uint64_t v63 = a1[5];
  uint64_t v7 = v63;
  unint64_t v64 = lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v39 = MEMORY[0x1E4F3FBC0];
  uint64_t v34 = v6;
  uint64_t v59 = &type metadata for LabelStyleConfiguration.Icon;
  uint64_t v60 = v6;
  unint64_t v61 = v35;
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for StaticSourceWriter();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v38 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v31 = (char *)&v29 - v9;
  uint64_t v10 = a1[2];
  unint64_t v33 = lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title();
  uint64_t v11 = a1[4];
  uint64_t v59 = &type metadata for LabelStyleConfiguration.Title;
  uint64_t v60 = v10;
  unint64_t v61 = v33;
  uint64_t WitnessTable = v11;
  type metadata accessor for StaticSourceWriter();
  uint64_t v12 = type metadata accessor for ModifiedContent();
  uint64_t v36 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  int v30 = (char *)&v29 - v13;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v37 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  long long v29 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v32 = (char *)&v29 - v17;
  uint64_t v48 = v10;
  uint64_t v49 = v5;
  uint64_t v18 = v5;
  uint64_t v50 = v11;
  uint64_t v51 = v7;
  uint64_t v52 = v2;
  unint64_t v19 = lazy protocol witness table accessor for type ResolvedLabelStyle and conformance ResolvedLabelStyle();
  long long v20 = v31;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabelStyleConfiguration.Icon, (void (*)(double))partial apply for closure #1 in Label.body.getter, (uint64_t)v47, (uint64_t)&type metadata for ResolvedLabelStyle, (uint64_t)&type metadata for LabelStyleConfiguration.Icon, v34, v19);
  uint64_t v42 = v10;
  uint64_t v43 = v18;
  uint64_t v44 = v11;
  uint64_t v45 = v7;
  uint64_t v46 = v2;
  unint64_t v57 = v19;
  unsigned int v58 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v21 = swift_getWitnessTable();
  int v22 = v30;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for LabelStyleConfiguration.Title, (void (*)(double))partial apply for closure #2 in Label.body.getter, (uint64_t)v41, v8, (uint64_t)&type metadata for LabelStyleConfiguration.Title, v10, v21);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v20, v8);
  uint64_t v55 = v21;
  uint64_t v56 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v23 = swift_getWitnessTable();
  long long v24 = v29;
  View.allowsToolbarItemBridging(options:)(2, v12, v23);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v22, v12);
  uint64_t v25 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>((unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  uint64_t v53 = v23;
  uint64_t v54 = v25;
  swift_getWitnessTable();
  long long v26 = v32;
  static ViewBuilder.buildExpression<A>(_:)(v24);
  int v27 = *(void (**)(char *, uint64_t))(v37 + 8);
  v27(v24, v14);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v27)(v26, v14);
}

unint64_t lazy protocol witness table accessor for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title;
  if (!lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelStyleConfiguration.Title and conformance LabelStyleConfiguration.Title);
  }
  return result;
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ToolbarStyleContext>, MEMORY[0x1E4F40520], MEMORY[0x1E4F410E8]);
    type metadata accessor for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ToolbarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<ToolbarStyleContext>, StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in Label.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v30 = a1;
  uint64_t v31 = a5;
  uint64_t v33 = a6;
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>();
  uint64_t v32 = v13;
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  long long v20 = (char *)&v30 - v19;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v21 = type metadata accessor for Label();
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v30 + *(int *)(v21 + 52), a3);
  LODWORD(a2) = dword_1ED466840;
  type metadata accessor for AnyAccessibilityPropertiesEntry();
  uint64_t v41 = Dictionary.init(minimumCapacity:)();
  type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(0);
  uint64_t v39 = v22;
  uint64_t v40 = _s7SwiftUI28AccessibilityPropertiesEntryVyAA0C17NullableOptionSetVyAA0C10VisibilityVGGACyxGAA03AnycdE0AAWlTm_1((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>> and conformance AccessibilityPropertiesEntry<A>, type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>);
  LODWORD(v36) = a2;
  HIDWORD(v36) = a2;
  specialized Dictionary.subscript.setter((uint64_t)&v36, MEMORY[0x1E4F40AA8]);
  AccessibilityAttachment.init(properties:)();
  uint64_t v23 = v36;
  uint64_t v24 = v37;
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGMaTm_1(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
  uint64_t v25 = swift_allocObject();
  *(void *)(v25 + 16) = v23;
  *(void *)(v25 + 24) = v24;
  uint64_t v36 = v25;
  uint64_t v37 = 0;
  uint64_t v26 = v31;
  MEMORY[0x18C113660](&v36, a3, v32, v31);
  swift_release();
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  unint64_t v27 = lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v34 = v26;
  unint64_t v35 = v27;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v17);
  long long v28 = *(void (**)(char *, uint64_t))(v15 + 8);
  v28(v17, v14);
  static ViewBuilder.buildExpression<A>(_:)(v20);
  return ((uint64_t (*)(char *, uint64_t))v28)(v20, v14);
}

uint64_t type metadata accessor for Label()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AccessibilityHidesLabelIcon, AccessibilityAttachmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(uint64_t a1)
{
}

void type metadata accessor for StyleContextAcceptsPredicate<ToolbarStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void _s7SwiftUI28StyleContextAcceptsPredicateVyAA07ToolbarcD0VGMaTm_1(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t protocol witness for static AnySourceFormula.makeView<A>(view:source:inputs:) in conformance SourceFormula<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  return static SourceFormula.makeView<A>(view:source:inputs:)(a1, a2, a3, a4, a5 | ((HIDWORD(a5) & 1) << 32));
}

uint64_t static SourceFormula.makeView<A>(view:source:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (AGWeakAttributeGetAttribute() == *MEMORY[0x1E4F4E7A0])
  {
    return _ViewOutputs.init()();
  }
  else
  {
    if ((a5 & 0x100000000) != 0)
    {
      _GraphValue.init(_:)();
    }
    else
    {
      type metadata accessor for Optional();
      _GraphValue.init(_:)();
      swift_getWitnessTable();
    }
    return static View.makeDebuggableView(view:inputs:)();
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance LabeledContentStyleConfiguration.Label(unsigned int *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  long long v3 = *(_OWORD *)(a2 + 48);
  _OWORD v6[2] = *(_OWORD *)(a2 + 32);
  v6[3] = v3;
  v6[4] = *(_OWORD *)(a2 + 64);
  char v7 = *(unsigned char *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 16);
  v6[0] = *(_OWORD *)a2;
  v6[1] = v4;
  return specialized static ViewAlias._makeViewList(view:inputs:)(v2, (uint64_t)v6);
}

unint64_t lazy protocol witness table accessor for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label()
{
  unint64_t result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label;
  if (!lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabeledContentStyleConfiguration.Label and conformance LabeledContentStyleConfiguration.Label);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI8StaticIfVyAA19_SemanticFeature_v5VAA33AllowsToolbarItemBridgingModifierVAA05EmptyL0VGACyxq_q0_GAA04ViewL0A2aLR_AaLR0_rlWlTm_0(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>)
  {
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier;
  if (!lazy protocol witness table cache variable for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  return lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>(&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v5, AllowsToolbarItemBridgingModifier, EmptyModifier>, (void (*)(void))lazy protocol witness table accessor for type AllowsToolbarItemBridgingModifier and conformance AllowsToolbarItemBridgingModifier);
}

unint64_t lazy protocol witness table accessor for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon;
  if (!lazy protocol witness table cache variable for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityHidesLabelIcon and conformance AccessibilityHidesLabelIcon);
  }
  return result;
}

uint64_t closure #1 in _IntroDocumentView<>.init<A, B>(_:for:backgroundStyle:_:onDocumentOpen:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t *a3@<X8>)
{
  uint64_t v6 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for DocumentIntroHelper.ShapeStyleView();
  double v10 = MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v14 - v11;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))(v8, a1, a2, v10);
  (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v12, v8, a2);
  swift_getWitnessTable();
  uint64_t result = AnyView.init<A>(_:)();
  *a3 = result;
  return result;
}

uint64_t type metadata accessor for DocumentIntroHelper.ShapeStyleView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t storeEnumTagSinglePayload for ToolbarButtonHoverShape(uint64_t result, unsigned int a2, unsigned int a3)
{
  if ((a3 + 33554177) >> 24) {
    int v3 = 1;
  }
  else {
    int v3 = 2;
  }
  if (a3 <= 0xFE) {
    int v3 = 0;
  }
  if (a2 > 0xFE)
  {
    *(_WORD *)uint64_t result = a2 - 255;
    *(unsigned char *)(result + 2) = (a2 - 255) >> 16;
    if (v3)
    {
      unsigned int v4 = ((a2 - 255) >> 24) + 1;
      if (v3 == 2) {
        *(_WORD *)(result + 3) = v4;
      }
      else {
        *(unsigned char *)(result + 3) = v4;
      }
    }
  }
  else
  {
    if (!v3) {
      goto LABEL_10;
    }
    if (v3 == 2)
    {
      *(_WORD *)(result + 3) = 0;
LABEL_10:
      if (!a2) {
        return result;
      }
LABEL_16:
      *(unsigned char *)(result + 1) = a2 + 1;
      return result;
    }
    *(unsigned char *)(result + 3) = 0;
    if (a2) {
      goto LABEL_16;
    }
  }
  return result;
}

double closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, void (*a3)(uint64_t *__return_ptr, uint64_t *)@<X3>, double *a4@<X8>)
{
  int v6 = *((_DWORD *)a1 + 2);
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  int v10 = *((_DWORD *)a1 + 20);
  int v11 = *(_DWORD *)(a2 + 84);
  uint64_t v13 = *a1;
  int v14 = v6;
  uint64_t v15 = v7;
  long long v16 = *(_OWORD *)(a1 + 3);
  uint64_t v17 = v8;
  uint64_t v18 = v9;
  long long v19 = *(_OWORD *)(a1 + 7);
  uint64_t v20 = a1[9];
  int v21 = v10;
  int v22 = v11;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  a3(&v23, &v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a4 = v23;
  double result = v24;
  a4[1] = v24;
  return result;
}

uint64_t partial apply for closure #1 in UpdateViewDestinationViewModifier.request(viewListID:)()
{
  return MEMORY[0x18C113DA0]();
}

uint64_t *partial apply for closure #1 in EnsureNavigationStateSeeds.value.getter@<X0>(uint64_t *a1@<X8>)
{
  return closure #1 in EnsureNavigationStateSeeds.value.getter(a1);
}

uint64_t *closure #1 in EnsureNavigationStateSeeds.value.getter@<X0>(uint64_t *a1@<X8>)
{
  double result = (uint64_t *)AGGraphGetWeakValue();
  if (result)
  {
    uint64_t v3 = *result;
  }
  else
  {
    type metadata accessor for NavigationSeedHost(0);
    double result = (uint64_t *)AGGraphGetWeakValue();
    if (result)
    {
      uint64_t v4 = *result;
      swift_getKeyPath();
      _s7SwiftUI18NavigationSeedHostCAC11Observation10ObservableAAWlTm_0(&lazy protocol witness table cache variable for type NavigationSeedHost and conformance NavigationSeedHost, (void (*)(uint64_t))type metadata accessor for NavigationSeedHost);
      swift_retain();
      ObservationRegistrar.access<A, B>(_:keyPath:)();
      swift_release();
      uint64_t v5 = *(void *)(v4 + 16);
      double result = (uint64_t *)swift_release();
      uint64_t v3 = v5;
    }
    else
    {
      uint64_t v3 = -1;
    }
  }
  *a1 = v3;
  return result;
}

uint64_t type metadata accessor for NavigationSeedHost(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for NavigationSeedHost);
}

uint64_t key path setter for EnvironmentValues.navigationSelectionSeed : EnvironmentValues()
{
  return EnvironmentValues.navigationSelectionSeed.setter();
}

uint64_t key path getter for EnvironmentValues.navigationSelectionSeed : EnvironmentValues@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    _s7SwiftUI18NavigationSeedHostCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    _s7SwiftUI18NavigationSeedHostCAC11Observation10ObservableAAWlTm_0((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *a2 = v4;
  return result;
}

uint64_t lazy protocol witness table accessor for type NavigationSeedHost and conformance NavigationSeedHost(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI18NavigationSeedHostCAC11Observation10ObservableAAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t EnvironmentValues.navigationSelectionSeed.setter()
{
  type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationStateSelectionSeed>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<NavigationStateSelectionSeed>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationStateSelectionSeed> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void @objc _UIHostingView._didChange(toFirstResponder:)(void *a1, uint64_t a2, UIResponder_optional *a3)
{
  uint64_t v5 = a3;
  id v6 = a1;
  _UIHostingView._didChange(toFirstResponder:)(a3);
}

Swift::Void __swiftcall _UIHostingView._didChange(toFirstResponder:)(UIResponder_optional *toFirstResponder)
{
  v4.receiver = v1;
  v4.super_class = (Class)type metadata accessor for _UIHostingView();
  [(UIResponder_optional *)&v4 _didChangeToFirstResponder:toFirstResponder];
  swift_retain();
  swift_getWitnessTable();
  uint64_t v3 = ViewRendererHost.responderNode.getter();
  FocusBridge.firstResponderDidChange(to:rootResponder:)(toFirstResponder, v3);
  swift_release();
  swift_release();
}

void FocusBridge.firstResponderDidChange(to:rootResponder:)(void *a1, uint64_t a2)
{
  objc_super v4 = (void *)FocusBridge.host.getter();
  if (!v4) {
    return;
  }
  id v31 = v4;
  uint64_t v5 = (void *)FocusBridge.host.getter();
  if (!v5)
  {

    return;
  }

  if (!a1 || (self, (uint64_t v6 = swift_dynamicCastObjCClass()) == 0))
  {
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    uint64_t v39 = 1;
    int v40 = 0;
    FocusBridge.focusedItem.setter((uint64_t)&v36);

    return;
  }
  id v7 = (id)v6;
  uint64_t v8 = a1;
  FocusBridge.focusedItem.getter((uint64_t)&v36);
  id v9 = v31;
  uint64_t v10 = _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOyXlTg503_s7c4UI11e80BridgeC23firstResponderDidChange2to04rootF0ySo11UIResponderCSg_AA0F4NodeCSgtFyXls2C4F6VXEfU_AD0eJ8Provider_AD0E4HostSo6UIViewCXcTf1cn_nTf4ng_n((uint64_t)&v36, v9);

  outlined destroy of FocusItem?((uint64_t)&v36);
  if (v10)
  {
    swift_unknownObjectRelease();
    if (v7 == (id)v10)
    {
LABEL_24:

      return;
    }
  }
  if (v7 == v9)
  {
    specialized FocusBridge.hostDidBecomeFirstResponder(in:)();
    goto LABEL_24;
  }
  id v31 = v9;
  id v11 = objc_msgSend(v7, sel_superview);
  if (v11)
  {
    uint64_t v12 = v11;
    uint64_t v30 = v8;
    while (1)
    {
      swift_getObjectType();
      uint64_t v13 = swift_conformsToProtocol2();
      uint64_t v14 = v13 ? v13 : 0;
      if (v13 ? v12 : 0) {
        break;
      }
      id v16 = objc_msgSend(v12, sel_superview);

      uint64_t v12 = v16;
      if (!v16)
      {
        uint64_t v17 = 0;
        goto LABEL_27;
      }
    }
    uint64_t ObjectType = swift_getObjectType();
    long long v29 = *(uint64_t (**)(uint64_t, uint64_t))(v14 + 8);
    id v19 = v12;
    uint64_t v17 = (void *)v29(ObjectType, v14);

LABEL_27:
    uint64_t v8 = v30;
  }
  else
  {
    uint64_t v17 = 0;
  }
  long long v37 = 0u;
  long long v38 = 0u;
  long long v36 = 0u;
  uint64_t v39 = 1;
  int v40 = 0;
  swift_getObjectType();
  uint64_t v20 = swift_conformsToProtocol2();
  if (v20) {
    id v21 = v7;
  }
  else {
    id v21 = 0;
  }
  if (v21)
  {
    uint64_t Strong = swift_weakLoadStrong();
    uint64_t v33 = 0;
    swift_weakInit();
    int v34 = 0;
    swift_unknownObjectWeakInit();
    uint64_t v23 = swift_unknownObjectWeakAssign();
    outlined init with take of WeakBox<UIView>(v23, (uint64_t)v32);
    v32[32] = 2;
    double v24 = &protocol witness table for UIViewResponder;
    if (!Strong) {
      double v24 = 0;
    }
    uint64_t v33 = v24;
    swift_weakAssign();
    uint64_t v25 = v8;
    swift_release();
    v32[33] = 0;
    outlined init with take of FocusItem((uint64_t)v32, (uint64_t)v35);
    FocusBridge.focusedItem.setter((uint64_t)v35);
  }
  else
  {
    id v26 = v31;
    if (a2)
    {
      uint64_t v30 = &v28;
      MEMORY[0x1F4188790](v20);
      MEMORY[0x1F4188790](v27);
      dispatch thunk of ResponderNode.visit(applying:)();
    }
    outlined init with copy of FocusItem?((uint64_t)&v36, (uint64_t)v35);
    FocusBridge.focusedItem.setter((uint64_t)v35);
  }
  outlined destroy of FocusItem?((uint64_t)&v36);
}

uint64_t ViewResponderFilter.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v62 = *MEMORY[0x1E4F143B8];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v37 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v38 = AssociatedTypeWitness;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v36 = (uint64_t)&v35 - v5;
  uint64_t v6 = type metadata accessor for ViewLeafView();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  id v9 = (char *)&v35 - v8;
  uint64_t v10 = *((void *)v1 + 3);
  LODWORD(v8) = *((_DWORD *)v1 + 4);
  long long v57 = *v1;
  int v58 = v8;
  uint64_t v59 = v10;
  uint64_t v60 = *((void *)v1 + 4);
  uint64_t v41 = a1;
  ViewResponderFilter.view.getter((uint64_t)v9);
  id v11 = *(void **)&v9[*(int *)(v6 + 36)];
  uint64_t v12 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v43 = v7 + 8;
  id v13 = v11;
  v12(v9, v6);
  swift_unknownObjectWeakAssign();

  uint64_t v14 = *((void *)v2 + 3);
  int v15 = *((_DWORD *)v2 + 4);
  long long v53 = *v2;
  int v54 = v15;
  uint64_t v55 = v14;
  uint64_t v56 = *((void *)v2 + 4);
  ViewResponderFilter.view.getter((uint64_t)v9);
  id v16 = *(id *)&v9[*(int *)(v6 + 36)];
  uint64_t v42 = v12;
  v12(v9, v6);
  uint64_t v17 = (void *)PlatformViewHost.representedView.getter();

  swift_unknownObjectWeakAssign();
  uint64_t v18 = (void *)*((void *)v2 + 3);
  LODWORD(v17) = *((_DWORD *)v2 + 1);
  int v19 = *((_DWORD *)v2 + 2);
  int v47 = *(_DWORD *)v2;
  int v48 = (int)v17;
  int v49 = v19;
  *(void *)&long long v20 = *(void *)((char *)v2 + 12);
  long long v39 = v20;
  uint64_t v50 = v20;
  uint64_t v51 = v18;
  uint64_t v52 = *((void *)v2 + 4);
  uint64_t Value = (long long *)AGGraphGetValue();
  long long v22 = Value[1];
  long long v45 = *Value;
  long long v46 = v22;
  uint64_t v23 = (long long *)AGGraphGetValue();
  int v40 = v24 & 1;
  long long v44 = *v23;
  uint64_t v25 = AGGraphGetValue();
  *(void *)unint64_t v61 = *(void *)v25;
  *(_OWORD *)&v61[8] = *(_OWORD *)(v25 + 8);
  *(_OWORD *)&v61[24] = *(_OWORD *)(v25 + 24);
  swift_beginAccess();
  type metadata accessor for EnvironmentPropertyKey<FocusGroupIDKey>(0, (unint64_t *)&lazy cache variable for type metadata for ContentResponderHelper<TrivialContentResponder>, MEMORY[0x1E4F40CE8], MEMORY[0x1E4F40CE0], MEMORY[0x1E4F40908]);
  swift_retain();
  uint64_t v26 = v41;
  ContentResponderHelper.update(data:size:position:transform:parent:)();
  swift_endAccess();
  swift_release();
  type metadata accessor for [KeyPress.Handler](0, &lazy cache variable for type metadata for [KeyPress.Handler], type metadata accessor for KeyPress.Handler, MEMORY[0x1E4FBB320]);
  v18[27] = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v27 = ViewResponderFilter.preferredFocusableView.getter(v26);
  uint64_t v28 = 0;
  if ((unint64_t)v27 >= 2)
  {
    long long v29 = v27;
    ViewResponderFilter.view.getter((uint64_t)v9);
    uint64_t v30 = v36;
    ViewLeafView.representedViewProvider.getter(v6, v36);
    v42(v9, v6);
    uint64_t v28 = ((uint64_t (*)(uint64_t))v29)(v30);
    _sxSo6UIViewCSgRi_zRi0_zly7SwiftUI010TextEditorD4ViewCIsegno_SgSgWOe((uint64_t)v29);
    (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v30, v38);
  }
  (*(void (**)(uint64_t))(class metadata base offset for PlatformViewResponderBase + *v18 + 56))(v28);
  long long v31 = v2[1];
  *(_OWORD *)unint64_t v61 = *v2;
  *(_OWORD *)&v61[16] = v31;
  *(void *)&v61[32] = *((void *)v2 + 4);
  ViewResponderFilter.view.getter((uint64_t)v9);
  id v32 = *(id *)&v9[*(int *)(v6 + 36)];
  v42(v9, v6);
  swift_weakAssign();

  type metadata accessor for [ViewResponder]();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for [FocusableBounds](0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
    uint64_t v34 = swift_allocObject();
    *(_OWORD *)(v34 + 16) = xmmword_188351940;
    *(void *)(v34 + 32) = *((void *)v2 + 3);
    *(void *)&long long v45 = v34;
    specialized Array._endMutation()();
    swift_retain();
    AGGraphSetOutputValue();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t PlatformViewHost.representedView.getter()
{
  return (*(uint64_t (**)(char *))(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x58) + 72))(&v0[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)v0) + 0x78)]);
}

void PlatformViewResponderBase.preferredFocusableView.setter(void *a1)
{
  swift_unknownObjectWeakAssign();
}

uint64_t (*ViewResponderFilter.preferredFocusableView.getter(uint64_t a1))()
{
  if (*(_DWORD *)(v1 + 36) == *MEMORY[0x1E4F4E7A0]) {
    return (uint64_t (*)())1;
  }
  type metadata accessor for _ClosureBasedIterator<UIView>(255, (unint64_t *)&lazy cache variable for type metadata for UIView?, MEMORY[0x1E4FBB718]);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  swift_getAssociatedTypeWitness();
  swift_getFunctionTypeMetadata1();
  type metadata accessor for Optional();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v7 = *Value;
  if (!*Value) {
    return 0;
  }
  uint64_t v8 = Value[1];
  id v9 = (void *)swift_allocObject();
  void v9[2] = v5;
  v9[3] = v4;
  v9[4] = v7;
  v9[5] = v8;
  swift_retain();
  return partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed A.PlatformViewRepresentable.PlatformViewProvider) -> (@out UIView?);
}

uint64_t implicit closure #7 in static SystemScrollView._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance RemoteSheetContainerVCKey(uint64_t a1, void (*a2)(void *__return_ptr, uint64_t))
{
  uint64_t v4 = outlined init with take of RemoteSheetContainerVCKey.Storage?(a1, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [FocusableBounds]);
  if (v6[8] == 255)
  {
    a2(v7, v4);
    outlined destroy of PlatformViewLayoutInvalidator?((uint64_t)v6, (unint64_t *)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage);
  }
  else
  {
    outlined init with copy of RemoteSheetContainerVCKey.Storage((uint64_t)v6, (uint64_t)v7, MEMORY[0x1E4FBC930]);
  }
  return outlined init with take of RemoteSheetContainerVCKey.Storage?((uint64_t)v7, a1, (uint64_t)&lazy cache variable for type metadata for RemoteSheetContainerVCKey.Storage?, (uint64_t)&type metadata for RemoteSheetContainerVCKey.Storage, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for [FocusableBounds]);
}

uint64_t outlined init with take of RemoteSheetContainerVCKey.Storage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32))(a2, a1, v8);
  return a2;
}

uint64_t implicit closure #4 in static PlatformViewRepresentable._makeView(view:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

uint64_t implicit closure #2 in makeViewResponderFilter #1 (inputs:outputs:) in static _FocusableModifier._makeView(modifier:inputs:body:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

unint64_t lazy protocol witness table accessor for type FocusableBoundsTransform and conformance FocusableBoundsTransform()
{
  unint64_t result = lazy protocol witness table cache variable for type FocusableBoundsTransform and conformance FocusableBoundsTransform;
  if (!lazy protocol witness table cache variable for type FocusableBoundsTransform and conformance FocusableBoundsTransform)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FocusableBoundsTransform and conformance FocusableBoundsTransform);
  }
  return result;
}

uint64_t implicit closure #3 in static PlatformViewRepresentable._makeView(view:inputs:)(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = a1;
  uint64_t v7 = type metadata accessor for PlatformViewIdentifiedViews();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for [FocusableBounds](0, &lazy cache variable for type metadata for Attribute<_IdentifiedViewTree>, (uint64_t)&type metadata for _IdentifiedViewTree, MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v5, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v6, v7, MEMORY[0x1E4FBC248], v1, MEMORY[0x1E4FBC278], v2);
  return v4;
}

uint64_t outlined assign with take of PlatformViewLayoutInvalidator?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for [FocusableBounds](0, (unint64_t *)&lazy cache variable for type metadata for PlatformViewLayoutInvalidator?, (uint64_t)&type metadata for PlatformViewLayoutInvalidator, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

double static ViewLeafView._makeView(view:inputs:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, double *a5@<X8>)
{
  uint64_t v66 = a4;
  uint64_t v65 = a3;
  uint64_t v60 = a5;
  uint64_t v64 = 0;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v59 = *a1;
  unint64_t v5 = *(void *)a2;
  int v6 = *(_DWORD *)(a2 + 8);
  unint64_t v7 = *(void *)(a2 + 16);
  int v8 = *(_DWORD *)(a2 + 24);
  int v72 = *(_DWORD *)(a2 + 28);
  int v63 = *(_DWORD *)(a2 + 32);
  int v9 = *(_DWORD *)(a2 + 36);
  unint64_t v10 = *(void *)(a2 + 48);
  uint64_t v77 = *(void *)(a2 + 40);
  int v11 = *(_DWORD *)(a2 + 56);
  int v12 = *(_DWORD *)(a2 + 60);
  int v14 = *(_DWORD *)(a2 + 64);
  int v13 = *(_DWORD *)(a2 + 68);
  int v15 = *(_DWORD *)(a2 + 72);
  int v75 = v9;
  int v76 = v15;
  int v16 = *(_DWORD *)(a2 + 76);
  int v73 = *(_DWORD *)(a2 + 80);
  int v74 = v16;
  _ViewOutputs.init()();
  unint64_t v17 = v10;
  unint64_t v81 = v10;
  int v18 = v11;
  LODWORD(v82) = v11;
  unint64_t v71 = v5;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    _DisplayList_Identity.init()();
    int v56 = v81;
    int v70 = v6;
    unint64_t v62 = v7;
    unint64_t v58 = v17;
    int v69 = v11;
    int v61 = v12;
    int v68 = v14;
    int v67 = v13;
    int v78 = v81;
    _ViewInputs.pushIdentity(_:)();
    type metadata accessor for ViewLeafView();
    type metadata accessor for _GraphValue();
    int v55 = _GraphValue.value.getter();
    int v57 = v8;
    unsigned int v54 = _ViewInputs.animatedPosition()();
    unsigned int v53 = _ViewInputs.containerPosition.getter();
    unsigned int v52 = _ViewInputs.animatedSize()();
    unsigned int v51 = _ViewInputs.transform.getter();
    int v19 = v12;
    int v20 = v74;
    int v50 = _ViewInputs.environment.getter();
    int v21 = v8;
    int v22 = v63;
    HIWORD(v86) = HIWORD(v63);
    int v87 = v75;
    unint64_t v23 = v58;
    uint64_t v88 = v77;
    unint64_t v89 = v58;
    int v90 = v11;
    int v91 = v19;
    int v92 = v14;
    int v93 = v67;
    int v94 = v76;
    int v95 = v74;
    int v96 = v73;
    int v24 = v73;
    uint64_t v25 = _ViewInputs.safeAreaInsets.getter();
    HIDWORD(v81) = v55;
    unint64_t v82 = __PAIR64__(v53, v54);
    unint64_t v83 = __PAIR64__(v51, v52);
    int v84 = v50;
    int v85 = v25;
    LOWORD(v86) = 0;
    MEMORY[0x1F4188790](v25);
    uint64_t v48 = type metadata accessor for PlatformViewDisplayList();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for [FocusableBounds](0, (unint64_t *)&lazy cache variable for type metadata for Attribute<DisplayList>, MEMORY[0x1E4F3F4D0], MEMORY[0x1E4F4E740]);
    uint64_t v26 = v64;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v81, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v47, v48, MEMORY[0x1E4FBC248], v27, MEMORY[0x1E4FBC278], v28);
    uint64_t v64 = v26;
    LOBYTE(v81) = 0;
    _ViewOutputs.subscript.setter();
    int v6 = v70;
    unint64_t v7 = v62;
    int v29 = v21;
    int v30 = v72;
    int v31 = v22;
    uint64_t v32 = v77;
    int v12 = v61;
    int v33 = v68;
    int v13 = v67;
    int v34 = v75;
    int v35 = v76;
    int v36 = v20;
    int v18 = v69;
    if ((v75 & 2) == 0) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  int v29 = v8;
  int v31 = v63;
  uint64_t v32 = v77;
  int v33 = v14;
  int v34 = v75;
  int v35 = v76;
  int v36 = v74;
  int v30 = v72;
  int v24 = v73;
  unint64_t v23 = v17;
  if ((v75 & 2) != 0)
  {
LABEL_5:
    unint64_t v81 = v71;
    LODWORD(v82) = v6;
    unint64_t v83 = v7;
    int v84 = v29;
    int v85 = v30;
    int v86 = v31;
    int v87 = v34;
    uint64_t v88 = v32;
    unint64_t v89 = v23;
    int v90 = v18;
    int v91 = v12;
    int v92 = v33;
    int v93 = v13;
    int v94 = v35;
    int v95 = v36;
    int v96 = v24;
    int v37 = _ViewInputs.environment.getter();
    type metadata accessor for PropertyList.Tracker();
    uint64_t v38 = PropertyList.Tracker.__allocating_init()();
    LODWORD(v81) = v37;
    unint64_t v82 = v38;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment();
    unsigned int v39 = Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    LODWORD(v81) = v59;
    type metadata accessor for ViewLeafView();
    type metadata accessor for _GraphValue();
    unsigned int v40 = _GraphValue.value.getter();
    type metadata accessor for GraphHost();
    MEMORY[0x18C114840]();
    unint64_t v81 = __PAIR64__(v39, v40);
    swift_weakInit();
    uint64_t v41 = swift_release();
    MEMORY[0x1F4188790](v41);
    uint64_t v42 = type metadata accessor for InvalidatableLeafLayoutComputer();
    uint64_t v48 = v42;
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for [FocusableBounds](0, &lazy cache variable for type metadata for Attribute<LayoutComputer>, MEMORY[0x1E4F3F978], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v81, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v47, v42, MEMORY[0x1E4FBC248], v43, MEMORY[0x1E4FBC278], v44);
    (*(void (**)(unint64_t *, uint64_t))(*(void *)(v42 - 8) + 8))(&v81, v42);
    LOBYTE(v81) = 0;
    _ViewOutputs.layoutComputer.setter();
  }
LABEL_6:
  long long v45 = v60;
  *(void *)uint64_t v60 = v79;
  double result = v80;
  v45[1] = v80;
  return result;
}

void type metadata accessor for [FocusableBounds](uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t destroy for FeedbackRequestContext()
{
  return swift_weakDestroy();
}

uint64_t type metadata accessor for InvalidatableLeafLayoutComputer()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for PlatformViewDisplayList()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment;
  if (!lazy protocol witness table cache variable for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LeafLayoutEnvironment and conformance LeafLayoutEnvironment);
  }
  return result;
}

uint64_t type metadata accessor for PlatformViewIdentifiedViews()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI9FocusItemV_s5NeverOyXlTg503_s7c4UI11e80BridgeC23firstResponderDidChange2to04rootF0ySo11UIResponderCSg_AA0F4NodeCSgtFyXls2C4F6VXEfU_AD0eJ8Provider_AD0E4HostSo6UIViewCXcTf1cn_nTf4ng_n(uint64_t a1, void *a2)
{
  outlined init with copy of FocusItem?(a1, (uint64_t)v8);
  if (v9) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v10 == 1;
  }
  if (v3) {
    return 0;
  }
  outlined init with take of FocusItem((uint64_t)v8, (uint64_t)v7);
  uint64_t v4 = FocusItem.platformResponder.getter();
  if (!v4)
  {
    id v5 = a2;
    uint64_t v4 = (uint64_t)a2;
  }
  outlined destroy of FocusItem((uint64_t)v7);
  return v4;
}

uint64_t PlatformViewHost.focusView.getter()
{
  unint64_t v0 = (void *)PlatformViewHost.representedView.getter();
  swift_getObjectType();
  uint64_t v1 = swift_conformsToProtocol2();
  if (v1) {
    uint64_t v2 = v1;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v1) {
    BOOL v3 = v0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);

    return v5;
  }
  else
  {

    return PlatformViewHost.representedView.getter();
  }
}

uint64_t FocusBridge.focusedItem.setter(uint64_t a1)
{
  outlined init with copy of FocusItem?(a1, (uint64_t)v7);
  if (*((void *)&v8 + 1)) {
    BOOL v3 = 0;
  }
  else {
    BOOL v3 = v9 == 1;
  }
  if (v3)
  {
    outlined destroy of FocusItem?((uint64_t)v7);
    memset(v7, 0, sizeof(v7));
    long long v8 = 0u;
    uint64_t v9 = 1;
    int v10 = 0;
  }
  else
  {
    outlined init with take of FocusItem((uint64_t)v7, (uint64_t)v6);
    outlined init with copy of FocusItem((uint64_t)v6, (uint64_t)v7);
    int v10 = static FocusBridge.nextSeedValue++;
    outlined destroy of FocusItem((uint64_t)v6);
  }
  swift_beginAccess();
  outlined init with copy of FocusItem?(v1 + 88, (uint64_t)v6);
  swift_beginAccess();
  outlined assign with copy of FocusItem?((uint64_t)v7, v1 + 88);
  swift_endAccess();
  outlined init with copy of FocusItem?(v1 + 88, (uint64_t)v5);
  FocusBridge.didChangeFocusItem(from:to:)((uint64_t)v6, (uint64_t)v5);
  outlined destroy of FocusItem?((uint64_t)v5);
  outlined destroy of FocusItem?((uint64_t)v7);
  outlined destroy of FocusItem?((uint64_t)v6);
  return outlined destroy of FocusItem?(a1);
}

uint64_t outlined assign with copy of FocusItem?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for FocusItem?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

void *protocol witness for SetAlgebra.formUnion(_:) in conformance UIRectEdge(void *result)
{
  *v1 |= *result;
  return result;
}

void *protocol witness for SetAlgebra.intersection(_:) in conformance UIRectEdge@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void View.navigationDestinationScope()()
{
}

uint64_t partial apply for closure #2 in static AccessibilityRepresentationModifier._makeView(modifier:inputs:body:)@<X0>(void *a1@<X8>)
{
  swift_beginAccess();
  *a1 = *(void *)(v1 + 16);
  a1[1] = *(void *)(v1 + 24);
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackStyledCore<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NavigationStackStyledCore.Child.value.getter(*v2, *(void *)(a1 + 16), a2);
}

ValueMetadata *type metadata accessor for TitleAndIconLabelStyle()
{
  return &type metadata for TitleAndIconLabelStyle;
}

uint64_t dispatch thunk of PickerContent._identifiedView.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 56))();
}

uint64_t one-time initialization function for didUpdateListLayout()
{
  uint64_t result = MEMORY[0x18C115780](0xD00000000000001CLL, 0x800000018833C500);
  static ClarityUI.didUpdateListLayout = result;
  return result;
}

uint64_t UIViewRepresentableContext.environment.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  if (*(unsigned char *)(v2 + 32) == 1)
  {
    MEMORY[0x1F4188790](a1);
    swift_retain();
    swift_retain();
    outlined copy of RepresentableContextValues.EnvironmentStorage(v3, v4, 1);
    static Update.ensure<A>(_:)();
    swift_release();
    swift_release();
    return outlined consume of RepresentableContextValues.EnvironmentStorage(v3, v4, 1);
  }
  else
  {
    *a2 = v3;
    a2[1] = v4;
    swift_retain();
    return swift_retain();
  }
}

uint64_t EnvironmentValues.toolbarButtonHoverShape.setter()
{
  _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.toolbarButtonHoverShape.getter()
{
  if (*(void *)(v0 + 8))
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2 | (v3 << 16);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_7(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey>, (uint64_t)&type metadata for EnvironmentValues.ToolbarButtonHoverShapeKey, (uint64_t)&protocol witness table for EnvironmentValues.ToolbarButtonHoverShapeKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarButtonHoverShapeKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance LabelVisibilityConfigured()
{
  lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured();
  PropertyList.subscript.getter();
  return v1;
}

unint64_t lazy protocol witness table accessor for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured()
{
  unint64_t result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured;
  if (!lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LabelVisibilityConfigured and conformance LabelVisibilityConfigured);
  }
  return result;
}

uint64_t UIViewControllerRepresentableContext.coordinator.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v4(a1, v1, AssociatedTypeWitness);
}

uint64_t specialized closure #1 in AccessibilityToggleModifier.body(content:)@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, int8x16_t *a3@<X8>)
{
  uint64_t v5 = *(void *)a1;
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  __int8 v24 = *(unsigned char *)(a1 + 40);
  __int8 v25 = *(unsigned char *)(a1 + 16);
  __int8 v23 = *(unsigned char *)(a1 + 41);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  int v10 = *(void **)(a1 + 72);
  uint64_t v12 = *(void *)(a1 + 80);
  uint64_t v26 = *(void *)(a1 + 88);
  uint64_t v27 = *(void *)(a1 + 96);
  uint64_t v28 = *(void *)(a1 + 104);
  long long v13 = a2[3];
  long long v14 = a2[5];
  v29[1] = a2[4];
  v29[2] = v14;
  v29[0] = v13;
  outlined init with take of ToggleStyleConfiguration.Effect(v29, v30);
  outlined init with take of ToggleStyleConfiguration.Effect(v30, &v31);
  v16.i64[0] = 0;
  uint64_t v17 = v33;
  uint64_t v18 = v32;
  if (!v33) {
    uint64_t v18 = 0;
  }
  a3[8].i64[0] = v18;
  a3[8].i64[1] = v17;
  v15.i64[0] = v17;
  int8x16_t v19 = (int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vceqq_s64(v15, v16)).i64[0], 0);
  int8x16_t v20 = vandq_s8(v34, v19);
  int8x16_t v21 = vandq_s8(v31, v19);
  a3->i64[0] = v5;
  a3->i64[1] = v4;
  a3[1].i8[0] = v25;
  a3[1].i64[1] = v6;
  a3[2].i64[0] = v7;
  a3[2].i8[8] = v24;
  a3[2].i8[9] = v23;
  a3[3].i64[0] = v8;
  a3[3].i64[1] = v9;
  a3[4].i64[0] = v11;
  a3[4].i64[1] = (uint64_t)v10;
  a3[5].i64[0] = v12;
  a3[5].i64[1] = v26;
  a3[6].i64[0] = v27;
  a3[6].i64[1] = v28;
  a3[7] = v21;
  a3[9] = v20;
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v30);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ToggleStyleConfiguration.Effect(v8, v9, v11, v10);
  swift_retain();
  return swift_retain();
}

uint64_t ToggleStyleConfiguration.accessibilityActions.getter()
{
  long long v1 = v0[3];
  long long v20 = v0[2];
  long long v21 = v1;
  long long v2 = v0[5];
  long long v22 = v0[4];
  long long v23 = v2;
  long long v3 = v0[1];
  long long v18 = *v0;
  long long v19 = v3;
  outlined init with take of ToggleStyleConfiguration.Effect(&v21, v24);
  outlined init with take of ToggleStyleConfiguration.Effect(v24, &v25);
  uint64_t v4 = v27;
  if (v27)
  {
    long long v5 = v25;
    char v6 = v26;
    type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
    type metadata accessor for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Combine>(0, &lazy cache variable for type metadata for AnyAccessibilityAction.ConcreteBase<AccessibilityAppIntentHandler>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityAppIntentHandler and conformance AccessibilityAppIntentHandler, (uint64_t)&type metadata for AccessibilityAppIntentHandler, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for AnyAccessibilityAction.ConcreteBase);
    *(void *)(v7 + 56) = v8;
    *(void *)(v7 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v9 = swift_allocObject();
    *(void *)(v7 + 32) = v9;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = v5;
    *(unsigned char *)(v9 + 64) = v6;
    *(void *)(v9 + 72) = v4;
    *(_OWORD *)(v9 + 80) = v28;
    *(void *)(v9 + 96) = 0;
    *(void *)(v9 + 104) = 0;
    *(void *)(v9 + 112) = 0;
    *(void *)(v9 + 120) = 2;
    *(_OWORD *)(v9 + 128) = 0u;
    *(_OWORD *)(v9 + 144) = 0u;
    *(_OWORD *)(v9 + 153) = 0u;
    *(unsigned char *)(v7 + 72) = 1;
  }
  else
  {
    type metadata accessor for StyleContextAcceptsPredicate<AccessibilityRepresentableStyleContext>(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<AnyAccessibilityAction>, (uint64_t)&type metadata for AnyAccessibilityAction, MEMORY[0x1E4FBBE00]);
    uint64_t v7 = swift_allocObject();
    *(_OWORD *)(v7 + 16) = xmmword_18834BB80;
    int v10 = (_OWORD *)swift_allocObject();
    long long v11 = v21;
    v10[3] = v20;
    v10[4] = v11;
    long long v12 = v23;
    _OWORD v10[5] = v22;
    v10[6] = v12;
    long long v13 = v19;
    v10[1] = v18;
    v10[2] = v13;
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = partial apply for closure #1 in ToggleStyleConfiguration.accessibilityActions.getter;
    *(void *)(v14 + 24) = v10;
    LODWORD(v10) = AccessibilityActionHandlerSeed++;
    type metadata accessor for AnyAccessibilityAction.ConcreteBase<AccessibilityActionStorage<AccessibilityVoidAction>>();
    *(void *)(v7 + 56) = v15;
    *(void *)(v7 + 64) = &protocol witness table for AnyAccessibilityAction.ConcreteBase<A>;
    uint64_t v16 = swift_allocObject();
    *(void *)(v7 + 32) = v16;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(void *)(v16 + 64) = 0;
    *(void *)(v16 + 72) = 2;
    *(_OWORD *)(v16 + 80) = 0u;
    *(_OWORD *)(v16 + 96) = 0u;
    *(void *)(v16 + 112) = 0;
    *(void *)(v16 + 120) = partial apply for thunk for @escaping @callee_guaranteed () -> (@out AccessibilityActionResult);
    *(void *)(v16 + 128) = v14;
    *(_DWORD *)(v16 + 136) = v10;
    *(unsigned char *)(v7 + 72) = 0;
    outlined retain of ToggleStyleConfiguration(&v18);
  }
  outlined retain of ToggleStyleConfiguration.Effect((uint64_t)v24);
  return v7;
}

uint64_t ContainerBackgroundKind.Builtin.addPreference(to:)(uint64_t a1)
{
  switch(*v1)
  {
    case 1:
      *((void *)&v16 + 1) = &type metadata for ContainerBackgroundKeys.NavigationSplitViewKey;
      *(void *)&long long v17 = &protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey;
      long long v3 = &protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey;
      goto LABEL_6;
    case 2:
    case 4:
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      goto LABEL_7;
    case 3:
      *((void *)&v16 + 1) = &type metadata for ContainerBackgroundKeys.PresentationKey;
      *(void *)&long long v17 = &protocol witness table for ContainerBackgroundKeys.PresentationKey;
      long long v3 = &protocol witness table for ContainerBackgroundKeys.PresentationKey;
      goto LABEL_6;
    default:
      *((void *)&v16 + 1) = &type metadata for ContainerBackgroundKeys.NavigationKey;
      *(void *)&long long v17 = &protocol witness table for ContainerBackgroundKeys.NavigationKey;
      long long v3 = &protocol witness table for ContainerBackgroundKeys.NavigationKey;
LABEL_6:
      *((void *)&v17 + 1) = v3;
LABEL_7:
      outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?((uint64_t)&v15, (uint64_t)&v13);
      if (!v14) {
        return outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?((uint64_t)&v13);
      }
      outlined init with take of ToggleStyleConfiguration.Effect(&v13, &v15);
      uint64_t v4 = *((void *)&v16 + 1);
      long long v5 = v17;
      char v6 = __swift_project_boxed_opaque_existential_1(&v15, *((uint64_t *)&v16 + 1));
      MEMORY[0x1F4188790](v6);
      void v9[2] = v4;
      long long v10 = v5;
      long long v11 = partial apply for closure #1 in ContainerBackgroundKind.Builtin.addPreference(to:);
      uint64_t v12 = a1;
      static ContainerBackgroundKind.Builtin.apply<A, B>(key:_:)(v7, (uint64_t (*)(uint64_t))thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> ()partial apply, (uint64_t)v9, v4);
      return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v15);
  }
}

uint64_t ContainerBackgroundKind.Builtin.versionSeedTracker.getter()
{
  char v1 = *v0;
  switch(*v0)
  {
    case 1:
      *((void *)&v12 + 1) = &type metadata for ContainerBackgroundKeys.NavigationSplitViewKey;
      *(void *)&long long v13 = &protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey;
      long long v2 = &protocol witness table for ContainerBackgroundKeys.NavigationSplitViewKey;
      goto LABEL_6;
    case 2:
    case 4:
      long long v12 = 0u;
      long long v13 = 0u;
      long long v11 = 0u;
      goto LABEL_7;
    case 3:
      *((void *)&v12 + 1) = &type metadata for ContainerBackgroundKeys.PresentationKey;
      *(void *)&long long v13 = &protocol witness table for ContainerBackgroundKeys.PresentationKey;
      long long v2 = &protocol witness table for ContainerBackgroundKeys.PresentationKey;
      goto LABEL_6;
    default:
      *((void *)&v12 + 1) = &type metadata for ContainerBackgroundKeys.NavigationKey;
      *(void *)&long long v13 = &protocol witness table for ContainerBackgroundKeys.NavigationKey;
      long long v2 = &protocol witness table for ContainerBackgroundKeys.NavigationKey;
LABEL_6:
      *((void *)&v13 + 1) = v2;
LABEL_7:
      outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?((uint64_t)&v11, (uint64_t)&v14);
      if (v15)
      {
        outlined init with take of ToggleStyleConfiguration.Effect(&v14, &v16);
        uint64_t v3 = v17;
        uint64_t v4 = v18;
        uint64_t v5 = v19;
        char v6 = __swift_project_boxed_opaque_existential_1(&v16, v17);
        MEMORY[0x1F4188790](v6);
        v10[2] = v3;
        v10[3] = v4;
        v10[4] = v5;
        _OWORD v10[5] = closure #1 in ContainerBackgroundKind.Builtin.versionSeedTracker.getter;
        v10[6] = 0;
        type metadata accessor for ContainerBackground.AnyVersionSeedTracker();
        static ContainerBackgroundKind.Builtin.apply<A, B>(key:_:)((uint64_t)v6, (uint64_t (*)(uint64_t))partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> (@owned ContainerBackground.AnyVersionSeedTracker), (uint64_t)v10, v3);
        uint64_t v7 = v14;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v16);
        return v7;
      }
      else
      {
        outlined destroy of (ContainerBackgroundPlacementKey & HostPreferenceKey)?((uint64_t)&v14);
        *(void *)&long long v16 = 0;
        *((void *)&v16 + 1) = 0xE000000000000000;
        _StringGuts.grow(_:)(28);
        LOBYTE(v14) = v1;
        _print_unlocked<A, B>(_:_:)();
        v9._object = (void *)0x8000000188338B90;
        v9._countAndFlagsBits = 0xD00000000000001ALL;
        String.append(_:)(v9);
        uint64_t result = _assertionFailure(_:_:file:line:flags:)();
        __break(1u);
      }
      return result;
  }
}

_OWORD *outlined init with take of ToggleStyleConfiguration.Effect(long long *a1, _OWORD *a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t outlined init with take of (ContainerBackgroundPlacementKey & HostPreferenceKey)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for (ContainerBackgroundPlacementKey & HostPreferenceKey)?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for (ContainerBackgroundPlacementKey & HostPreferenceKey)?()
{
  if (!lazy cache variable for type metadata for (ContainerBackgroundPlacementKey & HostPreferenceKey)?)
  {
    type metadata accessor for ContainerBackgroundPlacementKey & HostPreferenceKey();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for (ContainerBackgroundPlacementKey & HostPreferenceKey)?);
    }
  }
}

uint64_t static ContainerBackgroundKind.Builtin.apply<A, B>(key:_:)(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  return a2(a4);
}

uint64_t type metadata accessor for ContainerBackground.AnyVersionSeedTracker()
{
  return self;
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> ()(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void, void))(v1 + 40))(a1, *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t partial apply for thunk for @callee_guaranteed (@unowned @thick ContainerBackgroundPlacementKey & HostPreferenceKey.Type) -> (@owned ContainerBackground.AnyVersionSeedTracker)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, void, void))(v2 + 40))(a1, *(void *)(v2 + 24), *(void *)(v2 + 32));
  *a2 = result;
  return result;
}

uint64_t closure #1 in ContainerBackgroundKind.Builtin.versionSeedTracker.getter()
{
  return ContainerBackground.ConcreteVersionSeedTracker.__allocating_init()();
}

uint64_t partial apply for closure #1 in ContainerBackgroundKind.Builtin.addPreference(to:)()
{
  return GraphHost.addPreference<A>(_:)();
}

uint64_t type metadata accessor for ContainerBackground.ConcreteVersionSeedTracker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ContainerBackground.ConcreteVersionSeedTracker.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  VersionSeedTracker.init()((_DWORD *)(v0 + 16));
  return v0;
}

void VersionSeedTracker.init()(_DWORD *a1@<X8>)
{
  *a1 = -1;
}

unint64_t type metadata accessor for ContainerBackgroundPlacementKey & HostPreferenceKey()
{
  unint64_t result = lazy cache variable for type metadata for ContainerBackgroundPlacementKey & HostPreferenceKey;
  if (!lazy cache variable for type metadata for ContainerBackgroundPlacementKey & HostPreferenceKey)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ContainerBackgroundPlacementKey & HostPreferenceKey);
  }
  return result;
}

uint64_t outlined retain of ToggleStyleConfiguration.Effect(uint64_t a1)
{
  return a1;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance LabelGroupStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t base witness table accessor for _AttributeBody in ToolbarModifier<A, B>.TransformToolbar()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for LabelStyleConfiguration.Icon()
{
  return &type metadata for LabelStyleConfiguration.Icon;
}

uint64_t one-time initialization function for host(uint64_t a1)
{
  return one-time initialization function for automatic(a1, &lazy cache variable for type metadata for AccessibilityChildBehaviorBox<AccessibilityChildBehavior.Host>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host, (uint64_t)&type metadata for AccessibilityChildBehavior.Host, &static AccessibilityChildBehavior.host);
}

uint64_t associated type witness table accessor for View.Body : View in SystemScrollViewContainer<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t SceneStorage.init<A>(wrappedValue:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  type metadata accessor for SceneStorage<URL>(0, &lazy cache variable for type metadata for SceneStorage<Date>, 255, MEMORY[0x1E4F27928], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  uint64_t v9 = v8;
  a4[2] = 0;
  a4[3] = 0;
  *(void *)((char *)a4 + *(int *)(v8 + 36)) = 0;
  *a4 = a2;
  a4[1] = a3;
  long long v10 = (char *)a4 + *(int *)(v8 + 32);
  uint64_t v11 = type metadata accessor for Date();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a1, v11);
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Date>>, type metadata accessor for PropertyListTransform<Date>);
  uint64_t result = swift_allocObject();
  *(void *)((char *)a4 + *(int *)(v9 + 40)) = result;
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t result;

  type metadata accessor for SceneStorage<URL>(0, &lazy cache variable for type metadata for SceneStorage<URL>, 255, MEMORY[0x1E4F276F0], (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for SceneStorage);
  uint64_t v9 = v8;
  a4[2] = 0;
  a4[3] = 0;
  *(void *)((char *)a4 + *(int *)(v8 + 36)) = 0;
  *a4 = a2;
  a4[1] = a3;
  long long v10 = (char *)a4 + *(int *)(v8 + 32);
  uint64_t v11 = type metadata accessor for URL();
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32))(v10, a1, v11);
  type metadata accessor for TransformBox<PropertyListTransform<URL>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<URL>>, type metadata accessor for PropertyListTransform<URL>);
  uint64_t result = swift_allocObject();
  *(void *)((char *)a4 + *(int *)(v9 + 40)) = result;
  return result;
}

{
  uint64_t result;

  type metadata accessor for TransformBox<PropertyListTransform<Bool>>(0, &lazy cache variable for type metadata for TransformBox<PropertyListTransform<Int>>, &lazy cache variable for type metadata for PropertyListTransform<Int>, MEMORY[0x1E4FBB550]);
  uint64_t result = swift_allocObject();
  *a4 = a2;
  a4[1] = a3;
  a4[2] = 0;
  a4[3] = 0;
  a4[4] = a1;
  a4[5] = 0;
  a4[6] = result;
  return result;
}

void type metadata accessor for TransformBox<PropertyListTransform<URL>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for TransformBox();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t closure #4 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v6 = (uint64_t)a2 + direct field offset for ToolbarBridge.navigationProperties;
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?(a1, v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.NavigationProperties?);
  swift_endAccess();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v5 + 88) + 112))(*(void *)(v5 + 80));
  *(unsigned char *)(a3 + 10) = result;
  return result;
}

uint64_t closure #2 in closure #1 in ToolbarBridge.preferencesDidChange(_:context:)(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *MEMORY[0x1E4FBC8C8] & *a2;
  uint64_t v7 = (uint64_t)a2 + direct field offset for ToolbarBridge.searchItem;
  swift_beginAccess();
  outlined assign with copy of ToolbarStorage.NavigationProperties?(a1, v7, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  swift_endAccess();
  uint64_t result = (*(uint64_t (**)(void))(*(void *)(v6 + 88) + 104))(*(void *)(v6 + 80));
  if (result)
  {
    memset(v11, 0, sizeof(v11));
    long long v12 = xmmword_188395C10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v10 = *a4;
    *a4 = 0x8000000000000000;
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v11, isUniquelyReferenced_nonNull_native, (uint64_t)v13);
    *a4 = v10;
    swift_bridgeObjectRelease();
    return _s7SwiftUI7ToolbarO13UpdateContextVSgWOhTm_0((uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for Toolbar.BarLocation?, (uint64_t)&type metadata for Toolbar.BarLocation, (uint64_t (*)(void))type metadata accessor for AccessibilityValueStorage?);
  }
  return result;
}

uint64_t outlined assign with copy of ToolbarStorage.NavigationProperties?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 24))(a2, a1, v5);
  return a2;
}

Swift::Bool __swiftcall UIKitToolbarStrategy.updateSearch()()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    outlined init with copy of Toolbar.UpdateContext?((uint64_t)(v0 + 1), (uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Toolbar.UpdateContext?);
    if (v5)
    {
      outlined init with take of Toolbar.UpdateContext((uint64_t)v4, (uint64_t)v6);
      id v2 = v1;
      closure #1 in UIKitToolbarStrategy.updateSearch()((uint64_t)v2, (uint64_t)v6, v4);

      outlined destroy of Toolbar.UpdateContext((uint64_t)v6);
      return v4[0];
    }
    outlined destroy of Toolbar.UpdateContext?((uint64_t)v4, (uint64_t)&lazy cache variable for type metadata for Toolbar.UpdateContext?, (uint64_t)&type metadata for Toolbar.UpdateContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void))type metadata accessor for Toolbar.UpdateContext?);
  }
  Swift::Bool result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t protocol witness for ToolbarStrategy.updateProperties() in conformance UIKitToolbarStrategy()
{
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0) {
    return 0;
  }
  if (UIKitToolbarStrategy.updateBarTitle()((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.updateTitleMenuProvider())) {
    int v0 = 2;
  }
  else {
    int v0 = 0;
  }
  unsigned int v1 = v0 & 0xFFFFFFFE | UIKitToolbarStrategy.updateBarTitle()((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.updateHeaderProperties()) & 1;
  if (UIKitToolbarStrategy.updateBarTitle()((void (*)(void *__return_ptr))closure #1 in UIKitToolbarStrategy.updateRenameDelegate())) {
    return v1 | 4;
  }
  else {
    return v1;
  }
}

uint64_t closure #1 in OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.enqueueAction(isVisible:)(uint64_t a1, char a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = v4;
  *(void *)(v5 + 24) = v3;
  *(unsigned char *)(v5 + 32) = a2;
  swift_retain_n();
  static Update.enqueueAction(_:)();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for NavigationRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v10 = *(void *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 56);
  char v13 = *(unsigned char *)(a2 + 64);
  outlined copy of NavigationRequest.Action(*(void *)a2, v5, v6, v7, v8, v9, v10, v11, v13);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  *(unsigned char *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = *(unsigned char *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_retain();
  return a1;
}

uint64_t key path setter for EnvironmentValues.presentationMode : EnvironmentValues()
{
  swift_retain();
  swift_retain();
  specialized EnvironmentValues.subscript.setter();
  swift_release();

  return swift_release();
}

ValueMetadata *type metadata accessor for ResolvedScrollBehavior()
{
  return &type metadata for ResolvedScrollBehavior;
}

ValueMetadata *type metadata accessor for FocusableFillerBounds()
{
  return &type metadata for FocusableFillerBounds;
}

ValueMetadata *type metadata accessor for ToolbarItemPlacement()
{
  return &type metadata for ToolbarItemPlacement;
}

ValueMetadata *type metadata accessor for ContentMarginProxy()
{
  return &type metadata for ContentMarginProxy;
}

ValueMetadata *type metadata accessor for FocusableBounds()
{
  return &type metadata for FocusableBounds;
}

uint64_t _PickerValue.Init1.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = a2;
  uint64_t v4 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v18 - v6;
  uint64_t v8 = type metadata accessor for ResolvedPicker();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v18 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v2 + *(int *)(a1 + 52), v11, v13);
  _PickerValue.Init1.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  return _PickerValue.init(style:configuration:)((uint64_t)v15, (uint64_t)v7, v11, v19);
}

uint64_t type metadata accessor for PickerStyleConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for PickerStyleConfiguration()
{
  uint64_t result = type metadata accessor for Binding();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t assignWithCopy for LinearCapacityGauge(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  uint64_t v4 = *(void *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 24);
  outlined copy of Environment<Bool>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 16);
  char v7 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  uint64_t v8 = *(void *)(v2 + 32);
  LOBYTE(v2) = *(unsigned char *)(v2 + 40);
  outlined copy of Environment<Bool>.Content(v8, v2);
  uint64_t v9 = *(void *)(a1 + 32);
  char v10 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v2;
  outlined consume of Environment<Bool>.Content(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestions(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 1) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)&a1[v9];
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)&a1[v9];
      if (!*(_WORD *)&a1[v9]) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 1] & ~v6);
      }
      unsigned int v15 = *a1;
      if (v15 >= 2) {
        return v15 - 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = a1[v9];
  if (!a1[v9]) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *(unsigned __int16 *)a1;
        break;
      case 3:
        LODWORD(v9) = *(unsigned __int16 *)a1 | (a1[2] << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

uint64_t assignWithCopy for HelpView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  char v11 = *(unsigned char *)(v8 + 16);
  outlined copy of Text.Storage(*(void *)v8, v10, v11);
  uint64_t v12 = *(void *)v7;
  uint64_t v13 = *(void *)(v7 + 8);
  char v14 = *(unsigned char *)(v7 + 16);
  *(void *)unint64_t v7 = v9;
  *(void *)(v7 + 8) = v10;
  *(unsigned char *)(v7 + 16) = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *(void *)(v7 + 24) = *(void *)(v8 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithCopy for LazyFocusableFillerBoundsProvider(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _sxIeAgHr_xs5Error_pIegHrzo_s8SendableRzs5NeverORs_r0_lTRyt_Tg5TQ0_()
{
  uint64_t v3 = *v0;
  swift_task_dealloc();
  unint64_t v1 = *(uint64_t (**)(void))(v3 + 8);
  return v1();
}

double destructiveInjectEnumTag for AccessibilityTextLayoutProperties(uint64_t a1, int a2)
{
  if (a2 < 0)
  {
    *(void *)(a1 + 136) = 0;
    double result = 0.0;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(unsigned char *)(a1 + 144) = 0;
    *(void *)a1 = a2 ^ 0x80000000;
  }
  else if (a2)
  {
    *(void *)(a1 + 112) = (a2 - 1);
  }
  return result;
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in SheetPresentationModifier<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for TextFieldState(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease();
  if (*(void *)(a1 + 16))
  {
    swift_release();
    uint64_t result = swift_release();
  }
  if (*(void *)(a1 + 48))
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t ScrollViewChildContainerSize.updateValue()()
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  if (*(_DWORD *)(v0 + 4) == *MEMORY[0x1E4F4E7A0])
  {
    uint64_t Value = (uint64_t *)static ViewSize.zero.getter();
    uint64_t v3 = *((void *)&v21 + 1);
    uint64_t v2 = v21;
    uint64_t v5 = *((void *)&v22 + 1);
    uint64_t v4 = v22;
  }
  else
  {
    uint64_t Value = (uint64_t *)AGGraphGetValue();
    uint64_t v2 = *Value;
    uint64_t v3 = Value[1];
    uint64_t v4 = Value[2];
    uint64_t v5 = Value[3];
    *(void *)&long long v21 = *Value;
    *((void *)&v21 + 1) = v3;
    *(void *)&long long v22 = v4;
    *((void *)&v22 + 1) = v5;
  }
  *(void *)&long long v19 = v2;
  *((void *)&v19 + 1) = v3;
  *(void *)&long long v20 = v4;
  *((void *)&v20 + 1) = v5;
  MEMORY[0x18C114450](Value);
  AGGraphGetValue();
  CGSize.inset(by:)();
  ViewSize.value.setter();
  long long v6 = *(_OWORD *)(v0 + 32);
  long long v19 = *(_OWORD *)(v0 + 16);
  long long v20 = v6;
  long long v7 = v21;
  long long v8 = v22;
  long long v17 = v21;
  long long v18 = v22;
  char v9 = MEMORY[0x18C114410](&v19, &v17) ^ 1;
  type metadata accessor for CGSize(0);
  uint64_t v10 = (double *)AGGraphGetValue();
  double v11 = *v10;
  double v12 = v10[1];
  BOOL v13 = *(double *)(v0 + 56) != v12 || *(double *)(v0 + 48) != *v10;
  long long v19 = v7;
  long long v20 = v8;
  static CGSize.invalidValue.getter();
  if ((v11 != v15 || v12 != v14) && (v11 != 0.0 || v12 != 0.0))
  {
    ViewSize.value.setter();
    char v9 = v13;
  }
  uint64_t result = AGGraphGetOutputValue();
  if (!result || (v9 & 1) != 0)
  {
    long long v17 = v19;
    long long v18 = v20;
    uint64_t result = AGGraphSetOutputValue();
  }
  *(double *)(v0 + 48) = v11;
  *(double *)(v0 + 56) = v12;
  *(_OWORD *)(v0 + 16) = v7;
  *(_OWORD *)(v0 + 32) = v8;
  return result;
}

id specialized AppSceneDelegate.stateRestorationActivity(for:)()
{
  uint64_t v1 = v0;
  id v2 = objc_allocWithZone(MEMORY[0x1E4F29230]);
  uint64_t v3 = (void *)MEMORY[0x18C115780](0xD000000000000022, 0x800000018832B2E0);
  id v4 = objc_msgSend(v2, sel_initWithActivityType_, v3);

  unint64_t v5 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v37 = v5;
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneStorageValues))
  {
    swift_retain();
    uint64_t v6 = SceneStorageValues.restoredValue()();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v36 = v5;
    specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v6, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, (uint64_t *)&v36);
    unint64_t v5 = v36;
    uint64_t v37 = v36;
    swift_release();
    swift_bridgeObjectRelease();
  }
  *(void *)&long long v33 = 0xD00000000000001BLL;
  *((void *)&v33 + 1) = 0x800000018832B230;
  uint64_t v8 = MEMORY[0x1E4FBB1A0];
  AnyHashable.init<A>(_:)();
  uint64_t v9 = MEMORY[0x1E4FBC840];
  if (*(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_presentationDataType))
  {
    makeStableTypeData(_:)();
    long long v30 = v33;
    int v31 = v34;
    uint64_t v10 = StrongHash.description.getter();
    uint64_t v35 = v8;
    *(void *)&long long v33 = v10;
    *((void *)&v33 + 1) = v11;
    outlined init with take of Any(&v33, &v30);
    char v12 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v32 = v5;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v30, (uint64_t)&v36, v12);
    uint64_t v37 = v32;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v36);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&v36, &v33);
    outlined destroy of AnyHashable((uint64_t)&v36);
    outlined destroy of RootEnvironmentModifier?((uint64_t)&v33, (unint64_t *)&lazy cache variable for type metadata for Any?, v9 + 8);
  }
  unint64_t v32 = MEMORY[0x1E4FBC870];
  BOOL v13 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID);
  int v14 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_sceneItemID + 16);
  if (v14 != 255)
  {
    uint64_t v15 = *v13;
    uint64_t v16 = v13[1];
    *(void *)&long long v33 = 0xD000000000000019;
    *((void *)&v33 + 1) = 0x8000000188325FA0;
    outlined copy of SceneID(v15, v16, v14 & 1);
    uint64_t v17 = MEMORY[0x1E4FBB1A0];
    AnyHashable.init<A>(_:)();
    if (v14)
    {
      *(void *)&long long v33 = _typeName(_:qualified:)();
      *((void *)&v33 + 1) = v18;
      v19._countAndFlagsBits = 45;
      v19._object = (void *)0xE100000000000000;
      String.append(_:)(v19);
      LOBYTE(v30) = v16;
      v20._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter();
      String.append(_:)(v20);
      swift_bridgeObjectRelease();
      outlined consume of SceneID?(v15, v16, v14);
      uint64_t v16 = *((void *)&v33 + 1);
      uint64_t v15 = v33;
    }
    uint64_t v35 = v17;
    *(void *)&long long v33 = v15;
    *((void *)&v33 + 1) = v16;
    outlined init with take of Any(&v33, &v30);
    uint64_t v21 = v37;
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v30, (uint64_t)&v36, v22);
    uint64_t v37 = v21;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v36);
    specialized Set._Variant.insert(_:)((Swift::Int *)&v36, 0xD000000000000019, 0x8000000188325FA0);
    swift_bridgeObjectRelease();
  }
  unint64_t v23 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue + 8);
  if (v23 >> 60 != 15)
  {
    uint64_t v24 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI16AppSceneDelegate_rawPresentationDataValue);
    *(void *)&long long v33 = 0xD00000000000001CLL;
    *((void *)&v33 + 1) = 0x800000018832B210;
    outlined copy of Data._Representation(v24, v23);
    AnyHashable.init<A>(_:)();
    uint64_t v35 = MEMORY[0x1E4F277C0];
    *(void *)&long long v33 = v24;
    *((void *)&v33 + 1) = v23;
    outlined init with take of Any(&v33, &v30);
    outlined copy of Data._Representation(v24, v23);
    uint64_t v25 = v37;
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v30, (uint64_t)&v36, v26);
    uint64_t v37 = v25;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&v36);
    specialized Set._Variant.insert(_:)((Swift::Int *)&v36, 0xD00000000000001CLL, 0x800000018832B210);
    outlined consume of Data?(v24, v23);
    swift_bridgeObjectRelease();
  }
  if (*(void *)(v32 + 16))
  {
    Class isa = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v4, sel_setRequiredUserInfoKeys_, isa);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  Class v28 = Dictionary._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  objc_msgSend(v4, sel_setUserInfo_, v28);

  swift_bridgeObjectRelease();
  return v4;
}

_OWORD *outlined init with take of Any(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t specialized Set._Variant.insert(_:)(Swift::Int *a1, Swift::Int a2, Swift::Int a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  swift_bridgeObjectRetain();
  String.hash(into:)();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if ((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10))
  {
    uint64_t v11 = *(void *)(v7 + 48);
    char v12 = (void *)(v11 + 16 * v10);
    BOOL v13 = *v12 == a2 && v12[1] == a3;
    if (v13 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      int v14 = (Swift::Int *)(*(void *)(*v3 + 48) + 16 * v10);
      Swift::Int v15 = v14[1];
      *a1 = *v14;
      a1[1] = v15;
      swift_bridgeObjectRetain();
      return 0;
    }
    uint64_t v17 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v17;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v18 = (void *)(v11 + 16 * v10);
      BOOL v19 = *v18 == a2 && v18[1] == a3;
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0) {
        goto LABEL_7;
      }
    }
  }
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v21 = *v3;
  *uint64_t v3 = 0x8000000000000000;
  swift_bridgeObjectRetain();
  specialized _NativeSet.insertNew(_:at:isUnique:)(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v21;
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, Swift::Int a2, unint64_t a3, char a4)
{
  unint64_t v5 = v4;
  Swift::Int v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  if (a4)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v10 > v9)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_22;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v11 = *v4;
  Hasher.init(_seed:)();
  String.hash(into:)();
  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1 << *(unsigned char *)(v11 + 32);
  a3 = result & ~v12;
  uint64_t v13 = v11 + 56;
  if ((*(void *)(v11 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3))
  {
    uint64_t v14 = *(void *)(v11 + 48);
    Swift::Int v15 = (void *)(v14 + 16 * a3);
    BOOL v16 = *v15 == v8 && v15[1] == a2;
    if (v16 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(), (result & 1) != 0))
    {
LABEL_21:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v17 = ~v12;
      while (1)
      {
        a3 = (a3 + 1) & v17;
        if (((*(void *)(v13 + ((a3 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a3) & 1) == 0) {
          break;
        }
        uint64_t v18 = (void *)(v14 + 16 * a3);
        if (*v18 != v8 || v18[1] != a2)
        {
          uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)();
          if ((result & 1) == 0) {
            continue;
          }
        }
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  uint64_t v20 = *v5;
  *(void *)(*v5 + 8 * (a3 >> 6) + 56) |= 1 << a3;
  uint64_t v21 = (Swift::Int *)(*(void *)(v20 + 48) + 16 * a3);
  *uint64_t v21 = v8;
  v21[1] = a2;
  uint64_t v22 = *(void *)(v20 + 16);
  BOOL v23 = __OFADD__(v22, 1);
  uint64_t v24 = v22 + 1;
  if (v23) {
    __break(1u);
  }
  else {
    *(void *)(v20 + 16) = v24;
  }
  return result;
}

void type metadata accessor for _SetStorage<String>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t *a5)
{
  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  uint64_t v39 = a1;
  uint64_t v40 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  uint64_t v41 = v8;
  uint64_t v42 = 0;
  uint64_t v43 = v11 & v9;
  uint64_t v44 = a2;
  uint64_t v45 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
  if (!*((void *)&v36 + 1))
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    long long v32 = v35;
    long long v33 = v36;
    uint64_t v34 = v37;
    outlined init with take of Any(&v38, v31);
    uint64_t v13 = *a5;
    unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
    uint64_t v16 = *(void *)(v13 + 16);
    BOOL v17 = (v14 & 1) == 0;
    uint64_t v18 = v16 + v17;
    if (__OFADD__(v16, v17)) {
      break;
    }
    char v19 = v14;
    if (*(void *)(v13 + 24) >= v18)
    {
      if (a4)
      {
        if (v14) {
          goto LABEL_6;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v19) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v32);
      if ((v19 & 1) != (v21 & 1)) {
        goto LABEL_22;
      }
      unint64_t v15 = v20;
      if (v19)
      {
LABEL_6:
        outlined init with copy of Any((uint64_t)v31, (uint64_t)v30);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v31);
        outlined destroy of AnyHashable((uint64_t)&v32);
        uint64_t v12 = (_OWORD *)(*(void *)(*a5 + 56) + 32 * v15);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
        outlined init with take of Any(v30, v12);
        goto LABEL_7;
      }
    }
    uint64_t v22 = (void *)*a5;
    *(void *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    uint64_t v23 = v22[6] + 40 * v15;
    long long v24 = v32;
    long long v25 = v33;
    *(void *)(v23 + 32) = v34;
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    outlined init with take of Any(v31, (_OWORD *)(v22[7] + 32 * v15));
    uint64_t v26 = v22[2];
    BOOL v27 = __OFADD__(v26, 1);
    uint64_t v28 = v26 + 1;
    if (v27) {
      goto LABEL_21;
    }
    v22[2] = v28;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v35);
    a4 = 1;
    if (!*((void *)&v36 + 1)) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  _OWORD *v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  uint64_t v24;
  char v25;
  unint64_t v26;
  uint64_t v27;
  BOOL v28;
  uint64_t v29;
  char v30;
  unint64_t v31;
  char v32;
  void *v33;
  _OWORD *v34;
  long long v35;
  _OWORD *v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  _OWORD v44[7];
  unsigned char v45[28];
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  _OWORD v53[2];
  unsigned char v54[192];
  unsigned char v55[192];
  long long v56;
  _OWORD v57[9];
  _OWORD v58[2];
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  long long v66;
  _OWORD v67[3];

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  int v59 = a1;
  uint64_t v60 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  int v61 = v8;
  unint64_t v62 = 0;
  int v63 = v11 & v9;
  uint64_t v64 = a2;
  uint64_t v65 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v56);
  outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)&v56, (uint64_t)v54);
  outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)v54, (uint64_t)v55);
  if (_s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOg((uint64_t)v55) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    uint64_t v66 = v56;
    v67[0] = v57[0];
    *(_OWORD *)((char *)v67 + 9) = *(_OWORD *)((char *)v57 + 9);
    unsigned int v52 = v57[8];
    v53[0] = v58[0];
    *(_OWORD *)((char *)v53 + 12) = *(_OWORD *)((char *)v58 + 12);
    uint64_t v48 = v57[4];
    int v49 = v57[5];
    int v50 = v57[6];
    unsigned int v51 = v57[7];
    long long v46 = v57[2];
    int v47 = v57[3];
    long long v24 = *a5;
    uint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v66);
    BOOL v27 = *(void *)(v24 + 16);
    uint64_t v28 = (v25 & 1) == 0;
    int v29 = v27 + v28;
    if (__OFADD__(v27, v28)) {
      break;
    }
    long long v30 = v25;
    if (*(void *)(v24 + 24) >= v29)
    {
      if (a4)
      {
        if (v25) {
          goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v30) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v29, a4 & 1);
      int v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v66);
      if ((v30 & 1) != (v32 & 1)) {
        goto LABEL_22;
      }
      uint64_t v26 = v31;
      if (v30)
      {
LABEL_7:
        uint64_t v13 = (_OWORD *)(*(void *)(*a5 + 56) + 144 * v26);
        v44[0] = *v13;
        char v14 = v13[4];
        uint64_t v16 = v13[1];
        unint64_t v15 = v13[2];
        v44[3] = v13[3];
        v44[4] = v14;
        v44[1] = v16;
        _OWORD v44[2] = v15;
        uint64_t v18 = v13[6];
        BOOL v17 = v13[7];
        char v19 = v13[5];
        *(_OWORD *)&v45[12] = *(_OWORD *)((char *)v13 + 124);
        v44[6] = v18;
        *(_OWORD *)uint64_t v45 = v17;
        v44[5] = v19;
        outlined release of NavigationRequest((uint64_t)v44);
        unint64_t v20 = v53[0];
        v13[6] = v52;
        v13[7] = v20;
        *(_OWORD *)((char *)v13 + 124) = *(_OWORD *)((char *)v53 + 12);
        char v21 = v49;
        id v13[2] = v48;
        v13[3] = v21;
        uint64_t v22 = v51;
        void v13[4] = v50;
        v13[5] = v22;
        uint64_t v23 = v47;
        *uint64_t v13 = v46;
        v13[1] = v23;
        goto LABEL_8;
      }
    }
    long long v33 = (void *)*a5;
    *(void *)(*a5 + 8 * (v26 >> 6) + 64) |= 1 << v26;
    uint64_t v34 = (_OWORD *)(v33[6] + 48 * v26);
    long long v35 = v67[0];
    *uint64_t v34 = v66;
    v34[1] = v35;
    *(_OWORD *)((char *)v34 + 25) = *(_OWORD *)((char *)v67 + 9);
    long long v36 = (_OWORD *)(v33[7] + 144 * v26);
    uint64_t v37 = v49;
    void v36[2] = v48;
    v36[3] = v37;
    long long v38 = v47;
    *long long v36 = v46;
    v36[1] = v38;
    *(_OWORD *)((char *)v36 + 124) = *(_OWORD *)((char *)v53 + 12);
    uint64_t v39 = v53[0];
    v36[6] = v52;
    v36[7] = v39;
    uint64_t v40 = v51;
    unsigned char v36[4] = v50;
    v36[5] = v40;
    uint64_t v41 = v33[2];
    uint64_t v42 = __OFADD__(v41, 1);
    uint64_t v43 = v41 + 1;
    if (v42) {
      goto LABEL_21;
    }
    v33[2] = v43;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v56);
    outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)&v56, (uint64_t)v54);
    outlined init with take of (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?((uint64_t)v54, (uint64_t)v55);
    a4 = 1;
    if (_s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOg((uint64_t)v55) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  uint64_t v20;
  BOOL v21;
  uint64_t v22;
  char v23;
  unint64_t v24;
  char v25;
  void *v26;
  uint64_t *v27;
  uint64_t v28;
  BOOL v29;
  uint64_t v30;
  unsigned char v31[160];
  unsigned char v32[160];
  void v33[4];
  void v34[28];
  void *v35;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  v34[20] = a1;
  v34[21] = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  v34[22] = v8;
  v34[23] = 0;
  v34[24] = v11 & v9;
  v34[25] = a2;
  v34[26] = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)v33);
  uint64_t v12 = v33[0];
  if (v33[0] == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  long long v35 = v34;
  while (1)
  {
    unint64_t v15 = v33[1];
    char v14 = v33[2];
    uint64_t v16 = v33[3];
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v35, (uint64_t)v32);
    BOOL v17 = *a5;
    char v19 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v15, v14, v16);
    unint64_t v20 = *(void *)(v17 + 16);
    char v21 = (v18 & 1) == 0;
    uint64_t v22 = v20 + v21;
    if (__OFADD__(v20, v21)) {
      break;
    }
    uint64_t v23 = v18;
    if (*(void *)(v17 + 24) >= v22)
    {
      if (a4)
      {
        if (v18) {
          goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v23) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v22, a4 & 1);
      long long v24 = specialized __RawDictionaryStorage.find<A>(_:)(v12, v15, v14, v16);
      if ((v23 & 1) != (v25 & 1)) {
        goto LABEL_22;
      }
      char v19 = v24;
      if (v23)
      {
LABEL_7:
        outlined init with copy of UpdateViewDestinationRequest((uint64_t)v32, (uint64_t)v31);
        outlined destroy of UpdateViewDestinationRequest((uint64_t)v32);
        swift_release();
        outlined consume of Text.LineStyle?(v15, v14);
        outlined assign with take of UpdateViewDestinationRequest((uint64_t)v31, *(void *)(*a5 + 56) + 160 * v19);
        goto LABEL_8;
      }
    }
    uint64_t v26 = (void *)*a5;
    *(void *)(*a5 + 8 * (v19 >> 6) + 64) |= 1 << v19;
    BOOL v27 = (uint64_t *)(v26[6] + 32 * v19);
    *BOOL v27 = v12;
    v27[1] = v15;
    void v27[2] = v14;
    v27[3] = v16;
    outlined init with take of UpdateViewDestinationRequest((uint64_t)v32, v26[7] + 160 * v19);
    uint64_t v28 = v26[2];
    int v29 = __OFADD__(v28, 1);
    long long v30 = v28 + 1;
    if (v29) {
      goto LABEL_21;
    }
    void v26[2] = v30;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)v33);
    uint64_t v12 = v33[0];
    a4 = 1;
    if (v33[0] == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  unint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  unint64_t v21;
  char v22;
  void *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;
  unsigned char v28[40];
  long long v29[2];
  long long v30[2];
  long long v31[2];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  long long v33 = a1;
  uint64_t v34 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  long long v35 = v8;
  long long v36 = 0;
  uint64_t v37 = v11 & v9;
  long long v38 = a2;
  uint64_t v39 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()(v31);
  if (!v32)
  {
LABEL_19:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    uint64_t v13 = *(void *)&v31[0];
    outlined init with take of OptionalBinaryInteger((long long *)((char *)v31 + 8), (uint64_t)v30);
    char v14 = *a5;
    uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
    BOOL v17 = *(void *)(v14 + 16);
    uint64_t v18 = (v15 & 1) == 0;
    char v19 = v17 + v18;
    if (__OFADD__(v17, v18)) {
      break;
    }
    unint64_t v20 = v15;
    if (*(void *)(v14 + 24) >= v19)
    {
      if (a4)
      {
        if (v15) {
          goto LABEL_6;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v20) {
          goto LABEL_6;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v19, a4 & 1);
      char v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13);
      if ((v20 & 1) != (v22 & 1)) {
        goto LABEL_22;
      }
      uint64_t v16 = v21;
      if (v20)
      {
LABEL_6:
        outlined init with copy of TableColumnList(*(void *)(*a5 + 56) + 40 * v16, (uint64_t)v28);
        outlined init with copy of TableColumnList((uint64_t)v28, (uint64_t)v29);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v30);
        uint64_t v12 = *(void *)(*a5 + 56) + 40 * v16;
        __swift_destroy_boxed_opaque_existential_1(v12);
        outlined init with take of OptionalBinaryInteger(v29, v12);
        goto LABEL_7;
      }
    }
    uint64_t v23 = (void *)*a5;
    *(void *)(*a5 + 8 * (v16 >> 6) + 64) |= 1 << v16;
    *(void *)(v23[6] + 8 * v16) = v13;
    outlined init with take of OptionalBinaryInteger(v30, v23[7] + 40 * v16);
    long long v24 = v23[2];
    long long v25 = __OFADD__(v24, 1);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_21;
    }
    v23[2] = v26;
LABEL_7:
    specialized LazyMapSequence.Iterator.next()(v31);
    a4 = 1;
    if (!v32) {
      goto LABEL_19;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  Swift::UInt32 v12;
  void *v13;
  char v14;
  unint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  char v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t result;
  Swift::UInt32 v34;
  uint64_t v35;
  char v36;
  unint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  char v41;
  unint64_t v42;
  char v43;
  void *v44;
  uint64_t v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  uint64_t v52;
  uint64_t v53;
  unsigned char v54[120];
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;
  long long v61;
  uint64_t v62;
  Swift::UInt32 v63;
  long long v64;
  long long v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  int v72 = a1;
  int v73 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  int v74 = v8;
  int v75 = 0;
  int v76 = v11 & v9;
  uint64_t v77 = a2;
  int v78 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v63);
  if (*((void *)&v64 + 1) == 1) {
    goto LABEL_17;
  }
  uint64_t v60 = v69;
  int v61 = v70;
  int v55 = v64;
  int v56 = v65;
  int v57 = v66;
  uint64_t v12 = v63;
  unint64_t v62 = v71;
  unint64_t v58 = v67;
  int v59 = v68;
  uint64_t v13 = (void *)*a5;
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
  uint64_t v16 = v13[2];
  BOOL v17 = (v14 & 1) == 0;
  uint64_t v18 = v16 + v17;
  if (__OFADD__(v16, v17))
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  char v19 = v14;
  if (v13[3] >= v18)
  {
    if (a4)
    {
      if (v14) {
        goto LABEL_12;
      }
    }
    else
    {
      specialized _NativeDictionary.copy()();
      if (v19) {
        goto LABEL_12;
      }
    }
LABEL_14:
    uint64_t v22 = (void *)*a5;
    *(void *)(*a5 + 8 * (v15 >> 6) + 64) |= 1 << v15;
    *(_DWORD *)(v22[6] + 4 * v15) = v12;
    uint64_t v23 = v22[7] + 120 * v15;
    long long v24 = v55;
    long long v25 = v56;
    uint64_t v26 = v58;
    *(_OWORD *)(v23 + 32) = v57;
    *(_OWORD *)(v23 + 48) = v26;
    *(_OWORD *)uint64_t v23 = v24;
    *(_OWORD *)(v23 + 16) = v25;
    BOOL v27 = v59;
    uint64_t v28 = v60;
    int v29 = v61;
    *(void *)(v23 + 112) = v62;
    *(_OWORD *)(v23 + 80) = v28;
    *(_OWORD *)(v23 + 96) = v29;
    *(_OWORD *)(v23 + 64) = v27;
    long long v30 = v22[2];
    int v31 = __OFADD__(v30, 1);
    long long v32 = v30 + 1;
    if (v31)
    {
LABEL_29:
      __break(1u);
      goto LABEL_30;
    }
    v22[2] = v32;
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v18, a4 & 1);
  unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v12);
  if ((v19 & 1) == (v21 & 1))
  {
    unint64_t v15 = v20;
    if ((v19 & 1) == 0) {
      goto LABEL_14;
    }
LABEL_12:
    outlined init with copy of InspectorStorage((uint64_t)&v55, (uint64_t)v54);
    outlined destroy of InspectorStorage((uint64_t)&v55);
    outlined assign with take of InspectorStorage((uint64_t)v54, *(void *)(*a5 + 56) + 120 * v15);
LABEL_16:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v63);
    if (*((void *)&v64 + 1) == 1)
    {
LABEL_17:
      swift_release();
      swift_bridgeObjectRelease();
      outlined consume of Set<UIPress>.Iterator._Variant();
      return swift_release();
    }
    while (1)
    {
      uint64_t v60 = v69;
      int v61 = v70;
      int v55 = v64;
      int v56 = v65;
      int v57 = v66;
      uint64_t v34 = v63;
      unint64_t v62 = v71;
      unint64_t v58 = v67;
      int v59 = v68;
      long long v35 = *a5;
      uint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)(v63);
      long long v38 = *(void *)(v35 + 16);
      uint64_t v39 = (v36 & 1) == 0;
      uint64_t v40 = v38 + v39;
      if (__OFADD__(v38, v39)) {
        goto LABEL_28;
      }
      uint64_t v41 = v36;
      if (*(void *)(v35 + 24) < v40)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v40, 1);
        uint64_t v42 = specialized __RawDictionaryStorage.find<A>(_:)(v34);
        if ((v41 & 1) != (v43 & 1)) {
          break;
        }
        uint64_t v37 = v42;
      }
      if (v41)
      {
        outlined init with copy of InspectorStorage((uint64_t)&v55, (uint64_t)v54);
        outlined destroy of InspectorStorage((uint64_t)&v55);
        outlined assign with take of InspectorStorage((uint64_t)v54, *(void *)(*a5 + 56) + 120 * v37);
      }
      else
      {
        uint64_t v44 = (void *)*a5;
        *(void *)(*a5 + 8 * (v37 >> 6) + 64) |= 1 << v37;
        *(_DWORD *)(v44[6] + 4 * v37) = v34;
        uint64_t v45 = v44[7] + 120 * v37;
        long long v46 = v55;
        int v47 = v56;
        uint64_t v48 = v58;
        *(_OWORD *)(v45 + 32) = v57;
        *(_OWORD *)(v45 + 48) = v48;
        *(_OWORD *)uint64_t v45 = v46;
        *(_OWORD *)(v45 + 16) = v47;
        int v49 = v59;
        int v50 = v60;
        unsigned int v51 = v61;
        *(void *)(v45 + 112) = v62;
        *(_OWORD *)(v45 + 80) = v50;
        *(_OWORD *)(v45 + 96) = v51;
        *(_OWORD *)(v45 + 64) = v49;
        unsigned int v52 = v44[2];
        int v31 = __OFADD__(v52, 1);
        unsigned int v53 = v52 + 1;
        if (v31) {
          goto LABEL_29;
        }
        _OWORD v44[2] = v53;
      }
      specialized LazyMapSequence.Iterator.next()((uint64_t)&v63);
      if (*((void *)&v64 + 1) == 1) {
        goto LABEL_17;
      }
    }
  }
LABEL_30:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  long long v29;
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  long long v36;
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  uint64_t v53;
  Swift::UInt32 v54;
  uint64_t v55;
  char v56;
  unint64_t v57;
  uint64_t v58;
  BOOL v59;
  uint64_t v60;
  char v61;
  unint64_t v62;
  char v63;
  void *v64;
  uint64_t v65;
  long long v66;
  long long v67;
  long long v68;
  long long v69;
  long long v70;
  long long v71;
  long long v72;
  long long v73;
  long long v74;
  long long v75;
  long long v76;
  long long v77;
  uint64_t v78;
  BOOL v79;
  uint64_t v80;
  long long v81;
  long long v82;
  long long v83;
  long long v84;
  long long v85;
  long long v86;
  long long v87;
  long long v88;
  long long v89;
  long long v90;
  long long v91;
  long long v92;
  long long v93;
  long long v94;
  long long v95;
  uint64_t v96;
  _OWORD v97[15];
  uint64_t v98;
  long long v99;
  long long v100;
  long long v101;
  long long v102;
  long long v103;
  long long v104;
  long long v105;
  long long v106;
  long long v107;
  long long v108;
  long long v109;
  long long v110;
  long long v111;
  long long v112;
  long long v113;
  uint64_t v114;
  unsigned char v115[256];
  unsigned char v116[256];
  Swift::UInt32 v117;
  long long v118;
  long long v119;
  long long v120;
  long long v121;
  long long v122;
  long long v123;
  long long v124;
  long long v125;
  long long v126;
  long long v127;
  long long v128;
  long long v129;
  long long v130;
  long long v131;
  long long v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;

  uint64_t v7 = -1 << *(unsigned char *)(a1 + 32);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v10 = -v7;
  int v134 = a1;
  int v135 = a1 + 64;
  if (v10 < 64) {
    uint64_t v11 = ~(-1 << v10);
  }
  else {
    uint64_t v11 = -1;
  }
  unsigned int v136 = v8;
  uint64_t v137 = 0;
  uint64_t v138 = v11 & v9;
  uint64_t v139 = a2;
  uint64_t v140 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  specialized LazyMapSequence.Iterator.next()((uint64_t)&v117);
  uint64_t v12 = MEMORY[0x1E4FBB718];
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v117, (uint64_t)v115, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<(_:)>);
  outlined init with take of DialogSuppressionConfiguration?((uint64_t)v115, (uint64_t)v116, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), v12, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<(_:)>);
  if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v116) == 1)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of Set<UIPress>.Iterator._Variant();
    return swift_release();
  }
  while (1)
  {
    unsigned int v54 = v117;
    uint64_t v111 = v130;
    long long v112 = v131;
    long long v113 = v132;
    uint64_t v114 = v133;
    uint64_t v107 = v126;
    uint64_t v108 = v127;
    uint64_t v109 = v128;
    uint64_t v110 = v129;
    unint64_t v103 = v122;
    uint64_t v104 = v123;
    uint64_t v105 = v124;
    uint64_t v106 = v125;
    long long v99 = v118;
    long long v100 = v119;
    unint64_t v101 = v120;
    int v102 = v121;
    int v55 = *a5;
    int v57 = specialized __RawDictionaryStorage.find<A>(_:)(v117);
    unint64_t v58 = *(void *)(v55 + 16);
    int v59 = (v56 & 1) == 0;
    uint64_t v60 = v58 + v59;
    if (__OFADD__(v58, v59)) {
      break;
    }
    int v61 = v56;
    if (*(void *)(v55 + 24) >= v60)
    {
      if (a4)
      {
        if (v56) {
          goto LABEL_7;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        if (v61) {
          goto LABEL_7;
        }
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v60, a4 & 1);
      unint64_t v62 = specialized __RawDictionaryStorage.find<A>(_:)(v54);
      if ((v61 & 1) != (v63 & 1)) {
        goto LABEL_22;
      }
      int v57 = v62;
      if (v61)
      {
LABEL_7:
        char v14 = *a5;
        unint64_t v15 = *(void *)(*a5 + 56) + 248 * v57;
        uint64_t v16 = *(_OWORD *)(v15 + 48);
        uint64_t v18 = *(_OWORD *)v15;
        BOOL v17 = *(_OWORD *)(v15 + 16);
        unint64_t v83 = *(_OWORD *)(v15 + 32);
        int v84 = v16;
        unint64_t v81 = v18;
        unint64_t v82 = v17;
        char v19 = *(_OWORD *)(v15 + 112);
        char v21 = *(_OWORD *)(v15 + 64);
        unint64_t v20 = *(_OWORD *)(v15 + 80);
        int v87 = *(_OWORD *)(v15 + 96);
        uint64_t v88 = v19;
        int v85 = v21;
        int v86 = v20;
        uint64_t v22 = *(_OWORD *)(v15 + 176);
        long long v24 = *(_OWORD *)(v15 + 128);
        uint64_t v23 = *(_OWORD *)(v15 + 144);
        int v91 = *(_OWORD *)(v15 + 160);
        int v92 = v22;
        unint64_t v89 = v24;
        int v90 = v23;
        uint64_t v26 = *(_OWORD *)(v15 + 208);
        long long v25 = *(_OWORD *)(v15 + 224);
        BOOL v27 = *(_OWORD *)(v15 + 192);
        int v96 = *(void *)(v15 + 240);
        int v94 = v26;
        int v95 = v25;
        int v93 = v27;
        outlined retain of AlertStorage(&v81);
        outlined release of AlertStorage(&v99);
        uint64_t v28 = *(void *)(v14 + 56) + 248 * v57;
        int v29 = *(_OWORD *)(v28 + 192);
        long long v30 = *(_OWORD *)(v28 + 208);
        int v31 = *(_OWORD *)(v28 + 224);
        unint64_t v98 = *(void *)(v28 + 240);
        v97[13] = v30;
        v97[14] = v31;
        v97[12] = v29;
        long long v32 = *(_OWORD *)(v28 + 128);
        long long v33 = *(_OWORD *)(v28 + 144);
        uint64_t v34 = *(_OWORD *)(v28 + 176);
        v97[10] = *(_OWORD *)(v28 + 160);
        v97[11] = v34;
        v97[8] = v32;
        v97[9] = v33;
        long long v35 = *(_OWORD *)(v28 + 64);
        long long v36 = *(_OWORD *)(v28 + 80);
        uint64_t v37 = *(_OWORD *)(v28 + 112);
        v97[6] = *(_OWORD *)(v28 + 96);
        v97[7] = v37;
        v97[4] = v35;
        v97[5] = v36;
        uint64_t v39 = *(_OWORD *)v28;
        long long v38 = *(_OWORD *)(v28 + 16);
        uint64_t v40 = *(_OWORD *)(v28 + 48);
        v97[2] = *(_OWORD *)(v28 + 32);
        v97[3] = v40;
        v97[0] = v39;
        v97[1] = v38;
        outlined release of AlertStorage(v97);
        uint64_t v41 = v84;
        uint64_t v43 = v81;
        uint64_t v42 = v82;
        *(_OWORD *)(v28 + 32) = v83;
        *(_OWORD *)(v28 + 48) = v41;
        *(_OWORD *)uint64_t v28 = v43;
        *(_OWORD *)(v28 + 16) = v42;
        uint64_t v44 = v88;
        long long v46 = v85;
        uint64_t v45 = v86;
        *(_OWORD *)(v28 + 96) = v87;
        *(_OWORD *)(v28 + 112) = v44;
        *(_OWORD *)(v28 + 64) = v46;
        *(_OWORD *)(v28 + 80) = v45;
        int v47 = v92;
        int v49 = v89;
        uint64_t v48 = v90;
        *(_OWORD *)(v28 + 160) = v91;
        *(_OWORD *)(v28 + 176) = v47;
        *(_OWORD *)(v28 + 128) = v49;
        *(_OWORD *)(v28 + 144) = v48;
        unsigned int v51 = v94;
        int v50 = v95;
        unsigned int v52 = v93;
        *(void *)(v28 + 240) = v96;
        *(_OWORD *)(v28 + 208) = v51;
        *(_OWORD *)(v28 + 224) = v50;
        *(_OWORD *)(v28 + 192) = v52;
        goto LABEL_8;
      }
    }
    uint64_t v64 = (void *)*a5;
    *(void *)(*a5 + 8 * (v57 >> 6) + 64) |= 1 << v57;
    *(_DWORD *)(v64[6] + 4 * v57) = v54;
    uint64_t v65 = v64[7] + 248 * v57;
    uint64_t v66 = v99;
    int v67 = v100;
    int v68 = v102;
    *(_OWORD *)(v65 + 32) = v101;
    *(_OWORD *)(v65 + 48) = v68;
    *(_OWORD *)uint64_t v65 = v66;
    *(_OWORD *)(v65 + 16) = v67;
    int v69 = v103;
    int v70 = v104;
    unint64_t v71 = v106;
    *(_OWORD *)(v65 + 96) = v105;
    *(_OWORD *)(v65 + 112) = v71;
    *(_OWORD *)(v65 + 64) = v69;
    *(_OWORD *)(v65 + 80) = v70;
    int v72 = v107;
    int v73 = v108;
    int v74 = v110;
    *(_OWORD *)(v65 + 160) = v109;
    *(_OWORD *)(v65 + 176) = v74;
    *(_OWORD *)(v65 + 128) = v72;
    *(_OWORD *)(v65 + 144) = v73;
    int v75 = v111;
    int v76 = v112;
    uint64_t v77 = v113;
    *(void *)(v65 + 240) = v114;
    *(_OWORD *)(v65 + 208) = v76;
    *(_OWORD *)(v65 + 224) = v77;
    *(_OWORD *)(v65 + 192) = v75;
    int v78 = v64[2];
    uint64_t v79 = __OFADD__(v78, 1);
    double v80 = v78 + 1;
    if (v79) {
      goto LABEL_21;
    }
    v64[2] = v80;
LABEL_8:
    specialized LazyMapSequence.Iterator.next()((uint64_t)&v117);
    unsigned int v53 = MEMORY[0x1E4FBB718];
    outlined init with take of DialogSuppressionConfiguration?((uint64_t)&v117, (uint64_t)v115, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<(_:)>);
    outlined init with take of DialogSuppressionConfiguration?((uint64_t)v115, (uint64_t)v116, (uint64_t)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage)?, (uint64_t)type metadata accessor for (ViewIdentity, AlertStorage), v53, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Attribute<(_:)>);
    a4 = 1;
    if (getEnumTag for AccessibilityActionCategory.Category((uint64_t)v116) == 1) {
      goto LABEL_5;
    }
  }
  __break(1u);
LABEL_21:
  __break(1u);
LABEL_22:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t specialized LazyMapSequence.Iterator.next()@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of AnyHashable(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v25);
    outlined init with copy of Any(*(void *)(v3 + 56) + 32 * v10, (uint64_t)&v25[2] + 8);
    goto LABEL_23;
  }
  int64_t v11 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v12 = (unint64_t)(v6 + 64) >> 6;
  if (v11 < v12)
  {
    unint64_t v13 = *(void *)(v4 + 8 * v11);
    if (v13)
    {
LABEL_7:
      uint64_t v9 = (v13 - 1) & v13;
      unint64_t v10 = __clz(__rbit64(v13)) + (v11 << 6);
      int64_t v7 = v11;
      goto LABEL_3;
    }
    int64_t v14 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v12)
    {
      unint64_t v13 = *(void *)(v4 + 8 * v14);
      if (v13)
      {
LABEL_10:
        int64_t v11 = v14;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v12)
      {
        unint64_t v13 = *(void *)(v4 + 8 * (v5 + 3));
        if (v13)
        {
          int64_t v11 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v14 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v12)
        {
          unint64_t v13 = *(void *)(v4 + 8 * v14);
          if (v13) {
            goto LABEL_10;
          }
          int64_t v11 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v12)
          {
            unint64_t v13 = *(void *)(v4 + 8 * v11);
            if (v13) {
              goto LABEL_7;
            }
            int64_t v7 = v12 - 1;
            int64_t v15 = v5 + 6;
            while (v12 != v15)
            {
              unint64_t v13 = *(void *)(v4 + 8 * v15++);
              if (v13)
              {
                int64_t v11 = v15 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v26 = 0;
  memset(v25, 0, sizeof(v25));
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v16 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v25, (uint64_t)&v20, (uint64_t (*)(void))type metadata accessor for (key: AnyHashable, value: Any)?);
  if (*((void *)&v21 + 1))
  {
    v18[2] = v22;
    v18[3] = v23;
    uint64_t v19 = v24;
    v18[0] = v20;
    v18[1] = v21;
    v16(v18);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v18, &lazy cache variable for type metadata for (key: AnyHashable, value: Any));
  }
  else
  {
    *(void *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  _OWORD *v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  void (*v25)(long long *);
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t result;
  int64_t v30;
  int64_t v31;
  uint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  long long v36;
  char v37;
  long long v38;
  char v39;
  long long v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  unsigned char v48[19];
  _OWORD v49[7];
  _OWORD v50[2];
  unsigned char v51[147];

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v6 = v5;
  if (v4)
  {
    int64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = *(void *)(v3 + 48) + 48 * v8;
    unint64_t v10 = *(unsigned char *)(v9 + 16);
    int64_t v11 = *(unsigned char *)(v9 + 40);
    int64_t v12 = (_OWORD *)(*(void *)(v3 + 56) + 144 * v8);
    unint64_t v13 = *(_OWORD *)v9;
    int64_t v14 = *(_OWORD *)(v9 + 24);
    v49[0] = *v12;
    int64_t v15 = v12[4];
    BOOL v17 = v12[1];
    uint64_t v16 = v12[2];
    void v49[3] = v12[3];
    v49[4] = v15;
    v49[1] = v17;
    v49[2] = v16;
    uint64_t v19 = v12[6];
    uint64_t v18 = v12[7];
    long long v20 = v12[5];
    *(_OWORD *)((char *)v50 + 12) = *(_OWORD *)((char *)v12 + 124);
    v49[6] = v19;
    v50[0] = v18;
    v49[5] = v20;
    long long v21 = v12[1];
    *(_OWORD *)&v51[7] = *v12;
    long long v22 = v12[5];
    *(_OWORD *)&v51[71] = v12[4];
    long long v23 = v12[2];
    *(_OWORD *)&v51[55] = v12[3];
    *(_OWORD *)&v51[39] = v23;
    *(_OWORD *)&v51[23] = v21;
    *(_OWORD *)&v51[131] = *(_OWORD *)((char *)v12 + 124);
    uint64_t v24 = v12[6];
    *(_OWORD *)&v51[119] = v12[7];
    *(_OWORD *)&v51[103] = v24;
    *(_OWORD *)&v51[87] = v22;
    v1[3] = v6;
    v1[4] = v7;
    long long v25 = (void (*)(long long *))v1[5];
    long long v36 = v13;
    uint64_t v37 = v10;
    long long v38 = v14;
    uint64_t v39 = v11;
    long long v46 = *(_OWORD *)&v51[96];
    int v47 = *(_OWORD *)&v51[112];
    *(_OWORD *)uint64_t v48 = *(_OWORD *)&v51[128];
    *(_DWORD *)&v48[15] = *(_DWORD *)&v51[143];
    uint64_t v42 = *(_OWORD *)&v51[32];
    uint64_t v43 = *(_OWORD *)&v51[48];
    uint64_t v44 = *(_OWORD *)&v51[64];
    uint64_t v45 = *(_OWORD *)&v51[80];
    uint64_t v40 = *(_OWORD *)v51;
    uint64_t v41 = *(_OWORD *)&v51[16];
    outlined retain of NavigationRequest((uint64_t)v49);
    v25(&v36);
    outlined release of NavigationRequest((uint64_t)v49);
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, v26, v27, v28);
  }
  long long v30 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    int v31 = (unint64_t)(v1[2] + 64) >> 6;
    if (v30 < v31)
    {
      long long v32 = v1[1];
      long long v33 = *(void *)(v32 + 8 * v30);
      if (v33)
      {
LABEL_7:
        int64_t v7 = (v33 - 1) & v33;
        unint64_t v8 = __clz(__rbit64(v33)) + (v30 << 6);
        uint64_t v6 = v30;
        goto LABEL_3;
      }
      uint64_t v34 = v5 + 2;
      uint64_t v6 = v5 + 1;
      if (v5 + 2 < v31)
      {
        long long v33 = *(void *)(v32 + 8 * v34);
        if (v33)
        {
LABEL_10:
          long long v30 = v34;
          goto LABEL_7;
        }
        uint64_t v6 = v5 + 2;
        if (v5 + 3 < v31)
        {
          long long v33 = *(void *)(v32 + 8 * (v5 + 3));
          if (v33)
          {
            long long v30 = v5 + 3;
            goto LABEL_7;
          }
          uint64_t v34 = v5 + 4;
          uint64_t v6 = v5 + 3;
          if (v5 + 4 < v31)
          {
            long long v33 = *(void *)(v32 + 8 * v34);
            if (v33) {
              goto LABEL_10;
            }
            long long v30 = v5 + 5;
            uint64_t v6 = v5 + 4;
            if (v5 + 5 < v31)
            {
              long long v33 = *(void *)(v32 + 8 * v30);
              if (v33) {
                goto LABEL_7;
              }
              uint64_t v6 = v31 - 1;
              long long v35 = v5 + 6;
              while (v31 != v35)
              {
                long long v33 = *(void *)(v32 + 8 * v35++);
                if (v33)
                {
                  long long v30 = v35 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    _s7SwiftUI27NavigationStackViewPositionV_AA010PositionedC11DestinationO7StorageV13SeededRequest33_EA42A490FE48784768DCEF705CD04CF4LLVtSgWOi0_((uint64_t)&v36);
    return outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)&v36, a1, (uint64_t (*)(void))type metadata accessor for (NavigationStackViewPosition, PositionedNavigationDestination.Storage.SeededRequest)?);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int64_t v14;
  int64_t v15;
  unint64_t v16;
  int64_t v17;
  int64_t v18;
  void (*v19)(unsigned char *);
  uint64_t result;
  long long v21;
  unsigned char v22[192];
  void v23[24];
  _OWORD v24[12];

  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    int64_t v11 = *(void *)(v3 + 48) + 32 * v10;
    int64_t v12 = *(void *)v11;
    unint64_t v13 = *(void *)(v11 + 8);
    long long v21 = *(_OWORD *)(v11 + 16);
    outlined init with copy of UpdateViewDestinationRequest(*(void *)(v3 + 56) + 160 * v10, (uint64_t)&v24[2]);
    *(void *)&v24[0] = v12;
    *((void *)&v24[0] + 1) = v13;
    v24[1] = v21;
    swift_retain();
    outlined copy of Text.LineStyle?(v13, v21);
    goto LABEL_23;
  }
  int64_t v14 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  int64_t v15 = (unint64_t)(v6 + 64) >> 6;
  if (v14 < v15)
  {
    uint64_t v16 = *(void *)(v4 + 8 * v14);
    if (v16)
    {
LABEL_7:
      uint64_t v9 = (v16 - 1) & v16;
      unint64_t v10 = __clz(__rbit64(v16)) + (v14 << 6);
      int64_t v7 = v14;
      goto LABEL_3;
    }
    BOOL v17 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v15)
    {
      uint64_t v16 = *(void *)(v4 + 8 * v17);
      if (v16)
      {
LABEL_10:
        int64_t v14 = v17;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v15)
      {
        uint64_t v16 = *(void *)(v4 + 8 * (v5 + 3));
        if (v16)
        {
          int64_t v14 = v5 + 3;
          goto LABEL_7;
        }
        BOOL v17 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v15)
        {
          uint64_t v16 = *(void *)(v4 + 8 * v17);
          if (v16) {
            goto LABEL_10;
          }
          int64_t v14 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v15)
          {
            uint64_t v16 = *(void *)(v4 + 8 * v14);
            if (v16) {
              goto LABEL_7;
            }
            int64_t v7 = v15 - 1;
            uint64_t v18 = v5 + 6;
            while (v15 != v18)
            {
              uint64_t v16 = *(void *)(v4 + 8 * v18++);
              if (v16)
              {
                int64_t v14 = v18 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset((char *)v24 + 8, 0, 184);
  *(void *)&v24[0] = 1;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  uint64_t v19 = (void (*)(unsigned char *))v1[5];
  uint64_t result = outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v24, (uint64_t)v23, (uint64_t (*)(void))type metadata accessor for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest)?);
  if (v23[0] == 1)
  {
    *(void *)a1 = 1;
    *(_OWORD *)(a1 + 8) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(void *)(a1 + 184) = 0;
  }
  else
  {
    _ss11AnyHashableVSgWObTm_0((uint64_t)v23, (uint64_t)v22, (uint64_t)&lazy cache variable for type metadata for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest), (uint64_t)&type metadata for NavigationLinkSelectionIdentifier, (uint64_t)&type metadata for UpdateViewDestinationRequest, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for (key: ViewIdentity, value: InspectorStorage));
    v19(v22);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v22, &lazy cache variable for type metadata for (key: NavigationLinkSelectionIdentifier, value: UpdateViewDestinationRequest));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  int64_t v11;
  __n128 v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  int64_t v16;
  uint64_t v17;
  int64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int64_t v25;
  int64_t v26;
  unint64_t v27;
  int64_t v28;
  uint64_t v29;
  int64_t v30;
  void (*v31)(uint64_t);
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  int64_t v41;
  uint64_t v42;

  uint64_t v42 = a1;
  type metadata accessor for (key: UUID, value: PlatformItemList)();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (key: Selector, value: CommandAction)?(0, &lazy cache variable for type metadata for (key: UUID, value: PlatformItemList)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: PlatformItemList), MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8);
  uint64_t v9 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12.n128_f64[0] = MEMORY[0x1F4188790](v10);
  unint64_t v13 = (char *)&v37 - v11;
  int64_t v14 = *v1;
  int64_t v15 = v1[1];
  BOOL v17 = v1[2];
  uint64_t v16 = v1[3];
  uint64_t v18 = v16;
  uint64_t v19 = v1[4];
  long long v38 = v6;
  if (v19)
  {
    uint64_t v40 = v9;
    uint64_t v41 = v16;
    uint64_t v39 = v17;
    long long v20 = v15;
    long long v21 = (v19 - 1) & v19;
    long long v22 = __clz(__rbit64(v19)) | (v16 << 6);
LABEL_3:
    long long v23 = *(void *)(v14 + 48);
    uint64_t v24 = type metadata accessor for UUID();
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v13, v23 + *(void *)(*(void *)(v24 - 8) + 72) * v22, v24);
    *(void *)&v13[*(int *)(v3 + 48)] = *(void *)(*(void *)(v14 + 56) + 8 * v22);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v13, 0, 1, v3);
    swift_bridgeObjectRetain();
    int64_t v15 = v20;
    BOOL v17 = v39;
    uint64_t v9 = v40;
    goto LABEL_25;
  }
  long long v25 = v16 + 1;
  if (__OFADD__(v16, 1))
  {
    __break(1u);
LABEL_23:
    uint64_t v18 = v11;
    goto LABEL_24;
  }
  uint64_t v26 = (unint64_t)(v17 + 64) >> 6;
  if (v25 < v26)
  {
    BOOL v27 = *(void *)(v15 + 8 * v25);
    if (v27)
    {
LABEL_7:
      uint64_t v39 = v17;
      uint64_t v40 = v9;
      long long v20 = v15;
      long long v21 = (v27 - 1) & v27;
      long long v22 = __clz(__rbit64(v27)) + (v25 << 6);
      uint64_t v41 = v25;
      goto LABEL_3;
    }
    uint64_t v28 = v16 + 2;
    uint64_t v18 = v16 + 1;
    if (v16 + 2 < v26)
    {
      BOOL v27 = *(void *)(v15 + 8 * v28);
      if (v27)
      {
LABEL_10:
        long long v25 = v28;
        goto LABEL_7;
      }
      uint64_t v18 = v16 + 2;
      if (v16 + 3 < v26)
      {
        BOOL v27 = *(void *)(v15 + 8 * (v16 + 3));
        if (v27)
        {
          long long v25 = v16 + 3;
          goto LABEL_7;
        }
        uint64_t v28 = v16 + 4;
        uint64_t v18 = v16 + 3;
        if (v16 + 4 < v26)
        {
          BOOL v27 = *(void *)(v15 + 8 * v28);
          if (v27) {
            goto LABEL_10;
          }
          long long v25 = v16 + 5;
          uint64_t v18 = v16 + 4;
          if (v16 + 5 < v26)
          {
            BOOL v27 = *(void *)(v15 + 8 * v25);
            if (v27) {
              goto LABEL_7;
            }
            int64_t v11 = v26 - 1;
            int v29 = v16 + 6;
            while (v26 != v29)
            {
              BOOL v27 = *(void *)(v15 + 8 * v29++);
              if (v27)
              {
                long long v25 = v29 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  uint64_t v41 = v18;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56))(v13, 1, 1, v3, v12);
  long long v21 = 0;
LABEL_25:
  *uint64_t v1 = v14;
  v1[1] = v15;
  long long v30 = v41;
  v1[2] = v17;
  v1[3] = v30;
  v1[4] = v21;
  int v31 = (void (*)(uint64_t))v1[5];
  outlined init with take of (key: Selector, value: CommandAction)?((uint64_t)v13, (uint64_t)v9, &lazy cache variable for type metadata for (key: UUID, value: PlatformItemList)?, (uint64_t (*)(uint64_t))type metadata accessor for (key: UUID, value: PlatformItemList));
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v9, 1, v3) == 1)
  {
    type metadata accessor for (UUID, PlatformItemList)();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56))(v42, 1, 1, v32);
  }
  else
  {
    uint64_t v34 = (uint64_t)v38;
    outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v9, (uint64_t)v38, (uint64_t (*)(void))type metadata accessor for (key: UUID, value: PlatformItemList));
    long long v35 = v42;
    v31(v34);
    outlined destroy of (key: Selector, value: CommandAction)(v34, (uint64_t (*)(void))type metadata accessor for (key: UUID, value: PlatformItemList));
    type metadata accessor for (UUID, PlatformItemList)();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56))(v35, 0, 1, v36);
  }
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  long long *v11;
  long long v12;
  long long v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  long long v29;
  long long v30;
  void (*v31)(int *);
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t result;
  int64_t v36;
  int64_t v37;
  uint64_t v38;
  unint64_t v39;
  int64_t v40;
  int64_t v41;
  int v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;
  long long v55;
  long long v56;
  unsigned char v57[28];
  _OWORD v58[15];
  uint64_t v59;
  unsigned char v60[252];

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v6 = v5;
  if (v4)
  {
    int64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = *(void *)(v3 + 56);
    unint64_t v10 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v8);
    int64_t v11 = (long long *)(v9 + 248 * v8);
    unint64_t v13 = v11[2];
    int64_t v12 = v11[3];
    int64_t v14 = *v11;
    v58[1] = v11[1];
    v58[2] = v13;
    v58[0] = v14;
    int64_t v15 = v11[7];
    BOOL v17 = v11[4];
    uint64_t v16 = v11[5];
    v58[6] = v11[6];
    v58[7] = v15;
    v58[4] = v17;
    v58[5] = v16;
    uint64_t v18 = v11[11];
    long long v20 = v11[8];
    uint64_t v19 = v11[9];
    v58[10] = v11[10];
    v58[11] = v18;
    v58[8] = v20;
    v58[9] = v19;
    long long v22 = v11[13];
    long long v21 = v11[14];
    long long v23 = v11[12];
    int v59 = *((void *)v11 + 30);
    v58[13] = v22;
    v58[14] = v21;
    v58[12] = v23;
    v58[3] = v12;
    uint64_t v24 = v11[13];
    *(_OWORD *)&v60[196] = v11[12];
    *(_OWORD *)&v60[212] = v24;
    *(_OWORD *)&v60[228] = v11[14];
    *(void *)&v60[244] = *((void *)v11 + 30);
    long long v25 = v11[9];
    *(_OWORD *)&v60[132] = v11[8];
    *(_OWORD *)&v60[148] = v25;
    uint64_t v26 = v11[11];
    *(_OWORD *)&v60[164] = v11[10];
    *(_OWORD *)&v60[180] = v26;
    BOOL v27 = v11[5];
    *(_OWORD *)&v60[68] = v11[4];
    *(_OWORD *)&v60[84] = v27;
    uint64_t v28 = v11[7];
    *(_OWORD *)&v60[100] = v11[6];
    *(_OWORD *)&v60[116] = v28;
    int v29 = v11[1];
    *(_OWORD *)&v60[4] = *v11;
    *(_OWORD *)&v60[20] = v29;
    long long v30 = v11[3];
    *(_OWORD *)&v60[36] = v11[2];
    *(_OWORD *)&v60[52] = v30;
    v1[3] = v6;
    v1[4] = v7;
    int v31 = (void (*)(int *))v1[5];
    uint64_t v42 = v10;
    int v55 = *(_OWORD *)&v60[192];
    int v56 = *(_OWORD *)&v60[208];
    *(_OWORD *)int v57 = *(_OWORD *)&v60[224];
    *(_OWORD *)&v57[12] = *(_OWORD *)&v60[236];
    unsigned int v51 = *(_OWORD *)&v60[128];
    unsigned int v52 = *(_OWORD *)&v60[144];
    unsigned int v53 = *(_OWORD *)&v60[160];
    unsigned int v54 = *(_OWORD *)&v60[176];
    int v47 = *(_OWORD *)&v60[64];
    uint64_t v48 = *(_OWORD *)&v60[80];
    int v49 = *(_OWORD *)&v60[96];
    int v50 = *(_OWORD *)&v60[112];
    uint64_t v43 = *(_OWORD *)v60;
    uint64_t v44 = *(_OWORD *)&v60[16];
    uint64_t v45 = *(_OWORD *)&v60[32];
    long long v46 = *(_OWORD *)&v60[48];
    outlined retain of AlertStorage(v58);
    v31(&v42);
    outlined release of AlertStorage(v58);
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, v32, v33, v34);
  }
  long long v36 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    uint64_t v37 = (unint64_t)(v1[2] + 64) >> 6;
    if (v36 < v37)
    {
      long long v38 = v1[1];
      uint64_t v39 = *(void *)(v38 + 8 * v36);
      if (v39)
      {
LABEL_7:
        int64_t v7 = (v39 - 1) & v39;
        unint64_t v8 = __clz(__rbit64(v39)) + (v36 << 6);
        uint64_t v6 = v36;
        goto LABEL_3;
      }
      uint64_t v40 = v5 + 2;
      uint64_t v6 = v5 + 1;
      if (v5 + 2 < v37)
      {
        uint64_t v39 = *(void *)(v38 + 8 * v40);
        if (v39)
        {
LABEL_10:
          long long v36 = v40;
          goto LABEL_7;
        }
        uint64_t v6 = v5 + 2;
        if (v5 + 3 < v37)
        {
          uint64_t v39 = *(void *)(v38 + 8 * (v5 + 3));
          if (v39)
          {
            long long v36 = v5 + 3;
            goto LABEL_7;
          }
          uint64_t v40 = v5 + 4;
          uint64_t v6 = v5 + 3;
          if (v5 + 4 < v37)
          {
            uint64_t v39 = *(void *)(v38 + 8 * v40);
            if (v39) {
              goto LABEL_10;
            }
            long long v36 = v5 + 5;
            uint64_t v6 = v5 + 4;
            if (v5 + 5 < v37)
            {
              uint64_t v39 = *(void *)(v38 + 8 * v36);
              if (v39) {
                goto LABEL_7;
              }
              uint64_t v6 = v37 - 1;
              uint64_t v41 = v5 + 6;
              while (v37 != v41)
              {
                uint64_t v39 = *(void *)(v38 + 8 * v41++);
                if (v39)
                {
                  long long v36 = v41 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    _s7SwiftUI12ViewIdentityV_AA12AlertStorageVtSgWOi0_(&v42);
    return outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)&v42, a1, (uint64_t (*)(void))type metadata accessor for (ViewIdentity, AlertStorage)?);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  _OWORD v19[8];
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  uint64_t v28;
  void v29[2];
  long long v30;
  long long v31;
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  uint64_t v36;

  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    int64_t v11 = *(_DWORD *)(*(void *)(v3 + 48) + 4 * v10);
    outlined init with copy of InspectorStorage(*(void *)(v3 + 56) + 120 * v10, (uint64_t)v29);
    LODWORD(v28) = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  unint64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    int64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      int64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        int64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          int64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            int64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            uint64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              int64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  uint64_t v28 = 0;
  v29[0] = 0;
  long long v30 = 0u;
  int v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  uint64_t v34 = 0u;
  long long v35 = 0u;
  v29[1] = 1;
  long long v36 = 0;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  BOOL v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)&v28, (uint64_t)&v20, (uint64_t (*)(void))type metadata accessor for (key: ViewIdentity, value: InspectorStorage)?);
  if ((void)v21 == 1)
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 1;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 104) = 0u;
    *(void *)(a1 + 120) = 0;
  }
  else
  {
    v19[4] = v24;
    _OWORD v19[5] = v25;
    v19[6] = v26;
    v19[7] = v27;
    v19[0] = v20;
    v19[1] = v21;
    v19[2] = v22;
    v19[3] = v23;
    v17(v19);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for (key: ViewIdentity, value: InspectorStorage));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  char v19;
  __int16 v20;
  uint64_t v21;
  int64_t v22;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  int64_t v26;
  void (*v27)(_OWORD *);
  uint64_t result;
  _OWORD v29[7];
  char v30;
  _OWORD v31[3];
  long long v32;
  long long v33;
  long long v34;
  long long v35;
  char v36;
  _OWORD v37[2];
  long long v38;
  uint64_t v39;
  long long v40;
  long long v41;
  void v42[7];

  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    outlined init with copy of ToolbarPlacement.Role(*(void *)(v3 + 48) + 40 * v10, (uint64_t)v37);
    int64_t v11 = *(void *)(v3 + 56) + 80 * v10;
    int64_t v12 = *(unsigned char *)v11;
    unint64_t v13 = *(void *)(v11 + 8);
    int64_t v14 = *(void *)(v11 + 16);
    int64_t v15 = *(unsigned char *)(v11 + 24);
    uint64_t v16 = *(void *)(v11 + 32);
    BOOL v17 = *(unsigned char *)(v11 + 40);
    uint64_t v18 = *(void *)(v11 + 48);
    uint64_t v19 = *(unsigned char *)(v11 + 56);
    long long v20 = *(_WORD *)(v11 + 57);
    long long v21 = *(void *)(v11 + 64);
    LOBYTE(v11) = *(unsigned char *)(v11 + 72);
    BYTE8(v38) = v12;
    uint64_t v39 = v13;
    *(void *)&uint64_t v40 = v14;
    BYTE8(v40) = v15;
    *(void *)&uint64_t v41 = v16;
    BYTE8(v41) = v17;
    v42[0] = v18;
    LOBYTE(v42[1]) = v19;
    *(_WORD *)((char *)&v42[1] + 1) = v20;
    v42[2] = v21;
    LOBYTE(v42[3]) = v11;
    swift_retain();
    swift_retain();
    swift_retain();
    goto LABEL_23;
  }
  long long v22 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  long long v23 = (unint64_t)(v6 + 64) >> 6;
  if (v22 < v23)
  {
    uint64_t v24 = *(void *)(v4 + 8 * v22);
    if (v24)
    {
LABEL_7:
      uint64_t v9 = (v24 - 1) & v24;
      unint64_t v10 = __clz(__rbit64(v24)) + (v22 << 6);
      int64_t v7 = v22;
      goto LABEL_3;
    }
    long long v25 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v23)
    {
      uint64_t v24 = *(void *)(v4 + 8 * v25);
      if (v24)
      {
LABEL_10:
        long long v22 = v25;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v23)
      {
        uint64_t v24 = *(void *)(v4 + 8 * (v5 + 3));
        if (v24)
        {
          long long v22 = v5 + 3;
          goto LABEL_7;
        }
        long long v25 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v23)
        {
          uint64_t v24 = *(void *)(v4 + 8 * v25);
          if (v24) {
            goto LABEL_10;
          }
          long long v22 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v23)
          {
            uint64_t v24 = *(void *)(v4 + 8 * v22);
            if (v24) {
              goto LABEL_7;
            }
            int64_t v7 = v23 - 1;
            uint64_t v26 = v5 + 6;
            while (v23 != v26)
            {
              uint64_t v24 = *(void *)(v4 + 8 * v26++);
              if (v24)
              {
                long long v22 = v26 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  long long v38 = 0u;
  memset(v37, 0, sizeof(v37));
  uint64_t v39 = 1;
  uint64_t v40 = 0u;
  uint64_t v41 = 0u;
  memset(v42, 0, 25);
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  BOOL v27 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v37, (uint64_t)v31, (uint64_t (*)(void))type metadata accessor for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration)?);
  if ((void)v32 == 1)
  {
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
    *(void *)(a1 + 48) = 1;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 97) = 0u;
  }
  else
  {
    unsigned char v29[4] = v33;
    v29[5] = v34;
    v29[6] = v35;
    v29[0] = v31[0];
    v29[1] = v31[1];
    long long v30 = v36;
    v29[2] = v31[2];
    long long v29[3] = v32;
    v27(v29);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v29, (unint64_t *)&lazy cache variable for type metadata for (key: ToolbarPlacement.Role, value: ToolbarAppearanceConfiguration));
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  unint64_t v4;
  int64_t v5;
  int64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(long long *);
  long long v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t result;
  int64_t v29;
  int64_t v30;
  uint64_t v31;
  unint64_t v32;
  int64_t v33;
  int64_t v34;
  long long v35;
  uint64_t v36;
  char v37;
  long long v38;
  long long v39;
  char v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char v49;

  uint64_t v3 = *v1;
  int64_t v5 = v1[3];
  uint64_t v4 = v1[4];
  uint64_t v6 = v5;
  if (v4)
  {
    int64_t v7 = (v4 - 1) & v4;
    unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
LABEL_3:
    uint64_t v9 = *(void *)(*(void *)(v3 + 48) + 8 * v8);
    unint64_t v10 = *(void *)(v3 + 56) + 120 * v8;
    int64_t v12 = *(void *)v10;
    int64_t v11 = *(void *)(v10 + 8);
    unint64_t v13 = *(unsigned char *)(v10 + 16);
    int64_t v14 = *(unsigned char *)(v10 + 56);
    int64_t v15 = *(void *)(v10 + 64);
    BOOL v17 = *(unsigned char *)(v10 + 73);
    uint64_t v18 = *(void *)(v10 + 80);
    uint64_t v19 = *(void *)(v10 + 88);
    long long v20 = *(void *)(v10 + 96);
    long long v21 = *(void *)(v10 + 104);
    long long v22 = *(void *)(v10 + 112);
    int v49 = *(unsigned char *)(v10 + 72);
    uint64_t v16 = v49;
    long long v23 = (void (*)(long long *))v1[5];
    *(void *)&long long v35 = v9;
    *((void *)&v35 + 1) = v12;
    long long v36 = v11;
    uint64_t v37 = v13;
    long long v38 = *(_OWORD *)(v10 + 24);
    uint64_t v24 = *(_OWORD *)(v10 + 40);
    v1[3] = v6;
    v1[4] = v7;
    uint64_t v39 = v24;
    uint64_t v40 = v14;
    uint64_t v41 = v15;
    uint64_t v42 = v16;
    uint64_t v43 = v17;
    uint64_t v44 = v18;
    uint64_t v45 = v19;
    long long v46 = v20;
    int v47 = v21;
    uint64_t v48 = v22;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    v23(&v35);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a1, v25, v26, v27);
  }
  int v29 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
  }
  else
  {
    long long v30 = (unint64_t)(v1[2] + 64) >> 6;
    if (v29 < v30)
    {
      int v31 = v1[1];
      long long v32 = *(void *)(v31 + 8 * v29);
      if (v32)
      {
LABEL_7:
        int64_t v7 = (v32 - 1) & v32;
        unint64_t v8 = __clz(__rbit64(v32)) + (v29 << 6);
        uint64_t v6 = v29;
        goto LABEL_3;
      }
      long long v33 = v5 + 2;
      uint64_t v6 = v5 + 1;
      if (v5 + 2 < v30)
      {
        long long v32 = *(void *)(v31 + 8 * v33);
        if (v32)
        {
LABEL_10:
          int v29 = v33;
          goto LABEL_7;
        }
        uint64_t v6 = v5 + 2;
        if (v5 + 3 < v30)
        {
          long long v32 = *(void *)(v31 + 8 * (v5 + 3));
          if (v32)
          {
            int v29 = v5 + 3;
            goto LABEL_7;
          }
          long long v33 = v5 + 4;
          uint64_t v6 = v5 + 3;
          if (v5 + 4 < v30)
          {
            long long v32 = *(void *)(v31 + 8 * v33);
            if (v32) {
              goto LABEL_10;
            }
            int v29 = v5 + 5;
            uint64_t v6 = v5 + 4;
            if (v5 + 5 < v30)
            {
              long long v32 = *(void *)(v31 + 8 * v29);
              if (v32) {
                goto LABEL_7;
              }
              uint64_t v6 = v30 - 1;
              uint64_t v34 = v5 + 6;
              while (v30 != v34)
              {
                long long v32 = *(void *)(v31 + 8 * v34++);
                if (v32)
                {
                  int v29 = v34 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v6;
    v1[4] = 0;
    _s7SwiftUI9NamespaceV2IDV_AA20OrnamentPresentationVtSgWOi0_(&v35);
    return outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)&v35, a1, (uint64_t (*)(void))type metadata accessor for (Namespace.ID, OrnamentPresentation)?);
  }
  return result;
}

{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  int64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  int64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  int64_t v16;
  void (*v17)(_OWORD *);
  uint64_t result;
  unsigned __int8 v19;
  _OWORD v20[6];
  unsigned __int8 v21;
  _OWORD v22[6];
  unsigned __int8 v23;
  _OWORD v24[6];
  char v25;

  uint64_t v3 = *v1;
  uint64_t v4 = v1[1];
  uint64_t v6 = v1[2];
  int64_t v5 = v1[3];
  int64_t v7 = v5;
  unint64_t v8 = v1[4];
  if (v8)
  {
    uint64_t v9 = (v8 - 1) & v8;
    unint64_t v10 = __clz(__rbit64(v8)) | (v5 << 6);
LABEL_3:
    int64_t v11 = *(void *)(*(void *)(v3 + 48) + 8 * v10);
    outlined init with copy of NavigationDestinationPresentation(*(void *)(v3 + 56) + 96 * v10, (uint64_t)v24 + 8);
    *(void *)&v24[0] = v11;
    goto LABEL_23;
  }
  int64_t v12 = v5 + 1;
  if (__OFADD__(v5, 1))
  {
    __break(1u);
    return result;
  }
  unint64_t v13 = (unint64_t)(v6 + 64) >> 6;
  if (v12 < v13)
  {
    int64_t v14 = *(void *)(v4 + 8 * v12);
    if (v14)
    {
LABEL_7:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v12 << 6);
      int64_t v7 = v12;
      goto LABEL_3;
    }
    int64_t v15 = v5 + 2;
    int64_t v7 = v5 + 1;
    if (v5 + 2 < v13)
    {
      int64_t v14 = *(void *)(v4 + 8 * v15);
      if (v14)
      {
LABEL_10:
        int64_t v12 = v15;
        goto LABEL_7;
      }
      int64_t v7 = v5 + 2;
      if (v5 + 3 < v13)
      {
        int64_t v14 = *(void *)(v4 + 8 * (v5 + 3));
        if (v14)
        {
          int64_t v12 = v5 + 3;
          goto LABEL_7;
        }
        int64_t v15 = v5 + 4;
        int64_t v7 = v5 + 3;
        if (v5 + 4 < v13)
        {
          int64_t v14 = *(void *)(v4 + 8 * v15);
          if (v14) {
            goto LABEL_10;
          }
          int64_t v12 = v5 + 5;
          int64_t v7 = v5 + 4;
          if (v5 + 5 < v13)
          {
            int64_t v14 = *(void *)(v4 + 8 * v12);
            if (v14) {
              goto LABEL_7;
            }
            int64_t v7 = v13 - 1;
            uint64_t v16 = v5 + 6;
            while (v13 != v16)
            {
              int64_t v14 = *(void *)(v4 + 8 * v16++);
              if (v14)
              {
                int64_t v12 = v16 - 1;
                goto LABEL_7;
              }
            }
          }
        }
      }
    }
  }
  uint64_t v9 = 0;
  memset(v24, 0, sizeof(v24));
  long long v25 = -1;
LABEL_23:
  *uint64_t v1 = v3;
  v1[1] = v4;
  v1[2] = v6;
  v1[3] = v7;
  v1[4] = v9;
  BOOL v17 = (void (*)(_OWORD *))v1[5];
  uint64_t result = outlined init with take of (key: ViewIdentity, value: InspectorStorage)?((uint64_t)v24, (uint64_t)v22, (uint64_t (*)(void))type metadata accessor for (key: Namespace.ID, value: NavigationDestinationPresentation)?);
  uint64_t v19 = v23;
  if (v23 == 255)
  {
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 80) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(unsigned char *)(a1 + 96) = v19;
  }
  else
  {
    v20[4] = v22[4];
    v20[5] = v22[5];
    long long v21 = v23;
    v20[0] = v22[0];
    v20[1] = v22[1];
    void v20[2] = v22[2];
    void v20[3] = v22[3];
    v17(v20);
    return outlined destroy of (key: ViewIdentity, value: InspectorStorage)((uint64_t)v20, (unint64_t *)&lazy cache variable for type metadata for (key: Namespace.ID, value: NavigationDestinationPresentation));
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(void *);
  uint64_t result;
  void v14[2];
  char v15;

  long long v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = *(unsigned char *)(v1 + 96);
  if (v2 == *(void *)(v1 + 56))
  {
    int64_t v5 = *(unsigned char *)(v1 + 72);
    if (*(unsigned char *)(v1 + 96))
    {
      if (!*(unsigned char *)(v1 + 72)) {
        goto LABEL_4;
      }
LABEL_14:
      *(void *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      *(_WORD *)(a1 + 88) = -256;
      return result;
    }
    if (v3 != *(void *)(v1 + 64)) {
      int64_t v5 = 1;
    }
    if ((v5 & 1) == 0) {
      goto LABEL_14;
    }
  }
LABEL_4:
  uint64_t v6 = v2 + 1;
  if (__OFADD__(v2, 1))
  {
    __break(1u);
    goto LABEL_16;
  }
  unint64_t v8 = *(void *)(v1 + 16);
  int64_t v7 = *(void *)(v1 + 24);
  uint64_t v9 = __OFADD__(v8, v7);
  unint64_t v10 = v8 + v7;
  if (v9)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v6 == v10)
  {
    int64_t v11 = 0;
LABEL_10:
    *(void *)(v1 + 80) = v6;
    *(void *)(v1 + 88) = v11;
    *(unsigned char *)(v1 + 96) = v6 == v10;
    int64_t v12 = *(uint64_t (**)(void *))(v1 + 104);
    v14[0] = v2;
    v14[1] = v3;
    int64_t v15 = v4;
    return v12(v14);
  }
  if (*(unsigned char *)(v1 + 96)) {
    goto LABEL_18;
  }
  int64_t v11 = v3 + 1;
  if (!__OFADD__(v3, 1)) {
    goto LABEL_10;
  }
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined destroy of AnyHashable(*(void *)(v9 + 48) + 40 * v6);
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  double result;
  uint64_t v13;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    unint64_t v13 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v13;
    }
    unint64_t v10 = *(void *)(v9 + 48);
    uint64_t v11 = type metadata accessor for CodingUserInfoKey();
    (*(void (**)(unint64_t, uint64_t))(*(void *)(v11 - 8) + 8))(v10 + *(void *)(*(void *)(v11 - 8) + 72) * v6, v11);
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }

    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t vars8;

  uint64_t v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v11 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    swift_release();
    outlined init with take of Any((_OWORD *)(*(void *)(v9 + 56) + 32 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *uint64_t v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t SceneStorageValues.restoredValue()()
{
  uint64_t v15 = *(void *)(v0 + 16);
  swift_beginAccess();
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v8 = 0;
  while (1)
  {
    if (v5)
    {
      unint64_t v9 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_5;
    }
    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1))
    {
      __break(1u);
      goto LABEL_25;
    }
    if (v12 >= v6) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v6) {
        goto LABEL_23;
      }
      unint64_t v13 = *(void *)(v2 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v6) {
          goto LABEL_23;
        }
        unint64_t v13 = *(void *)(v2 + 8 * v8);
        if (!v13)
        {
          int64_t v8 = v12 + 3;
          if (v12 + 3 >= v6) {
            goto LABEL_23;
          }
          unint64_t v13 = *(void *)(v2 + 8 * v8);
          if (!v13) {
            break;
          }
        }
      }
    }
LABEL_22:
    unint64_t v5 = (v13 - 1) & v13;
    unint64_t v10 = __clz(__rbit64(v13)) + (v8 << 6);
LABEL_5:
    uint64_t v11 = *(void (**)(uint64_t *))(**(void **)(*(void *)(v1 + 56) + 8 * v10) + 80);
    swift_retain();
    v11(&v15);
    uint64_t result = swift_release();
  }
  int64_t v14 = v12 + 4;
  if (v14 >= v6)
  {
LABEL_23:
    swift_release();
    return v15;
  }
  unint64_t v13 = *(void *)(v2 + 8 * v14);
  if (v13)
  {
    int64_t v8 = v14;
    goto LABEL_22;
  }
  while (1)
  {
    int64_t v8 = v14 + 1;
    if (__OFADD__(v14, 1)) {
      break;
    }
    if (v8 >= v6) {
      goto LABEL_23;
    }
    unint64_t v13 = *(void *)(v2 + 8 * v8);
    ++v14;
    if (v13) {
      goto LABEL_22;
    }
  }
LABEL_25:
  __break(1u);
  return result;
}

uint64_t View.coordinateSpace<A>(name:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  unint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for _CoordinateSpaceModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t static _CoordinateSpaceModifier._makeViewInputs(modifier:inputs:)(_DWORD *a1, uint64_t a2)
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  v23[0] = *a1;
  type metadata accessor for _CoordinateSpaceModifier();
  type metadata accessor for _GraphValue();
  int v19 = _GraphValue.value.getter();
  uint64_t v3 = *(void *)(a2 + 48);
  int v12 = *(_DWORD *)(a2 + 60);
  int v13 = *(_DWORD *)(a2 + 56);
  int v10 = *(_DWORD *)(a2 + 68);
  int v11 = *(_DWORD *)(a2 + 64);
  int v8 = *(_DWORD *)(a2 + 76);
  int v9 = *(_DWORD *)(a2 + 72);
  int v7 = *(_DWORD *)(a2 + 80);
  uint64_t v14 = *(void *)(a2 + 40);
  int v16 = *(_DWORD *)(a2 + 24);
  int v17 = *(_DWORD *)(a2 + 32);
  int v18 = *(_DWORD *)(a2 + 28);
  int v15 = *(_DWORD *)(a2 + 36);
  uint64_t v24 = *(void *)(a2 + 16);
  int v25 = v16;
  int v26 = v18;
  int v27 = v17;
  int v28 = v15;
  uint64_t v29 = v14;
  uint64_t v30 = v3;
  int v31 = v13;
  int v32 = v12;
  int v33 = v11;
  int v34 = v10;
  int v35 = v9;
  int v36 = v8;
  int v37 = v7;
  v23[0] = v19;
  v23[1] = _ViewInputs.transform.getter();
  v23[2] = _ViewInputs.animatedPosition()();
  v23[3] = _ViewInputs.animatedCGSize()();
  uint64_t v21 = type metadata accessor for CoordinateSpaceTransform();
  uint64_t WitnessTable = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTransform>(0, &lazy cache variable for type metadata for Attribute<ViewTransform>, MEMORY[0x1E4F3F808], MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v23, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_17, (uint64_t)v20, v21, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return _ViewInputs.transform.setter();
}

uint64_t CoordinateSpaceTransform.value.getter@<X0>(uint64_t a1@<X2>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for _CoordinateSpaceModifier();
  MEMORY[0x1F4188790](v4 - 8);
  int64_t v6 = (char *)v12 - v5;
  CoordinateSpaceTransform.transform.getter(a2);
  uint64_t Value = (_OWORD *)AGGraphGetValue();
  v12[0] = *Value;
  *(double *)&unint64_t v9 = MEMORY[0x18C10C240](Value, v8);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v10, v9));
  CoordinateSpaceTransform.modifier.getter((uint64_t)v6);
  _convertToAnyHashable<A>(_:)();
  (*(void (**)(char *, uint64_t))(*(void *)(a1 - 8) + 8))(v6, a1);
  type metadata accessor for CGSize(0);
  AGGraphGetValue();
  ViewTransform.appendSizedSpace(name:size:)();
  return outlined destroy of AnyHashable((uint64_t)v12);
}

uint64_t type metadata accessor for _CoordinateSpaceModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CoordinateSpaceTransform.transform.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  *(void *)a1 = *(void *)Value;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(Value + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(Value + 24);

  return swift_retain();
}

uint64_t CoordinateSpaceTransform.modifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _CoordinateSpaceModifier();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for CoordinateSpaceTransform()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<ViewTransform>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v36 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  unint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DispatchQoS();
  uint64_t v34 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v44 = a1;
  AnyHashable.init<A>(_:)();
  uint64_t v14 = (uint64_t *)(a4 + 16);
  swift_beginAccess();
  uint64_t v15 = *(void *)(a4 + 16);
  uint64_t v16 = *(void *)(v15 + 16);
  uint64_t v35 = v11;
  if (v16 && (unint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock), (v18 & 1) != 0))
  {
    unint64_t v19 = *(void *)(*(void *)(v15 + 56) + 8 * v17);
    swift_bridgeObjectRetain();
  }
  else
  {
    unint64_t v19 = 0;
  }
  swift_endAccess();
  outlined destroy of AnyHashable((uint64_t)&aBlock);
  if (v19)
  {
    unint64_t v44 = v36;
    uint64_t v45 = a3;
    swift_bridgeObjectRetain();
    AnyHashable.init<A>(_:)();
    if (*(void *)(v19 + 16))
    {
      unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&aBlock);
      if (v21)
      {
        uint64_t v22 = *(void *)(*(void *)(v19 + 56) + 8 * v20);
        swift_retain();
        outlined destroy of AnyHashable((uint64_t)&aBlock);
        goto LABEL_17;
      }
    }
    outlined destroy of AnyHashable((uint64_t)&aBlock);
  }
  uint64_t v33 = v8;
  type metadata accessor for PassthroughSubject<Any, Never>();
  swift_allocObject();
  uint64_t v22 = PassthroughSubject.init()();
  if (v19)
  {
    unint64_t v44 = v36;
    uint64_t v45 = a3;
    swift_bridgeObjectRetain_n();
    swift_retain();
    AnyHashable.init<A>(_:)();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v44 = v19;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v22, (uint64_t)&aBlock, isUniquelyReferenced_nonNull_native);
    unint64_t v24 = v44;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&aBlock);
  }
  else
  {
    type metadata accessor for _ContiguousArrayStorage<(ViewIdentity, (_:))>(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(AnyHashable, PassthroughSubject<Any, Never>)>, &lazy cache variable for type metadata for (AnyHashable, PassthroughSubject<Any, Never>), (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
    unint64_t aBlock = v36;
    uint64_t v39 = a3;
    swift_bridgeObjectRetain();
    swift_retain();
    AnyHashable.init<A>(_:)();
    *(void *)(inited + 72) = v22;
    unint64_t v24 = specialized Dictionary.init(dictionaryLiteral:)(inited);
    swift_bridgeObjectRelease();
  }
  unint64_t v44 = a1;
  AnyHashable.init<A>(_:)();
  swift_beginAccess();
  if (v24)
  {
    swift_bridgeObjectRetain();
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v37 = *v14;
    *uint64_t v14 = 0x8000000000000000;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v24, (uint64_t)&aBlock, v26);
    *uint64_t v14 = v37;
    swift_bridgeObjectRelease();
    outlined destroy of AnyHashable((uint64_t)&aBlock);
  }
  else
  {
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&aBlock);
    outlined destroy of AnyHashable((uint64_t)&aBlock);
    swift_bridgeObjectRelease();
  }
  swift_endAccess();
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for OS_dispatch_queue);
  int v27 = (void *)static OS_dispatch_queue.main.getter();
  int v28 = (void *)swift_allocObject();
  unint64_t v29 = v36;
  v28[2] = a4;
  v28[3] = v29;
  v28[4] = a3;
  void v28[5] = a1;
  uint64_t v42 = partial apply for closure #1 in static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:);
  uint64_t v43 = v28;
  unint64_t aBlock = MEMORY[0x1E4F143A8];
  uint64_t v39 = 1107296256;
  uint64_t v40 = thunk for @escaping @callee_guaranteed () -> ();
  uint64_t v41 = &block_descriptor_10;
  uint64_t v30 = _Block_copy(&aBlock);
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  static DispatchQoS.unspecified.getter();
  unint64_t aBlock = MEMORY[0x1E4FBC860];
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type DispatchWorkItemFlags and conformance DispatchWorkItemFlags, 255, MEMORY[0x1E4FBCB00]);
  type metadata accessor for [DispatchWorkItemFlags]();
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>((unint64_t *)&lazy protocol witness table cache variable for type [DispatchWorkItemFlags] and conformance [A], 255, (void (*)(uint64_t))type metadata accessor for [DispatchWorkItemFlags]);
  dispatch thunk of SetAlgebra.init<A>(_:)();
  MEMORY[0x18C116870](0, v13, v10, v30);
  _Block_release(v30);

  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v13, v35);
LABEL_17:
  swift_bridgeObjectRelease();
  return v22;
}

double CoordinateSpaceNameTransform.value.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  uint64_t v13 = *(void *)Value;
  long long v14 = *(_OWORD *)(Value + 8);
  long long v15 = *(_OWORD *)(Value + 24);
  v10[0] = *(_OWORD *)AGGraphGetValue();
  uint64_t v3 = swift_retain();
  *(double *)&unint64_t v4 = MEMORY[0x18C10C240](v3);
  ViewTransform.appendPosition(_:)((CGPoint)__PAIR128__(v5, v4));
  uint64_t v6 = AGGraphGetValue();
  outlined init with copy of CoordinateSpace.Name(v6, (uint64_t)v10);
  if (v12)
  {
    *(void *)&v8[0] = *(void *)&v10[0];
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    ViewTransform.appendSizedSpace(id:size:)();
  }
  else
  {
    v8[0] = v10[0];
    v8[1] = v10[1];
    uint64_t v9 = v11;
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    ViewTransform.appendSizedSpace(name:size:)();
    outlined destroy of AnyHashable((uint64_t)v8);
  }
  *(void *)a1 = v13;
  *(_OWORD *)(a1 + 8) = v14;
  double result = *(double *)&v15;
  *(_OWORD *)(a1 + 24) = v15;
  return result;
}

uint64_t outlined destroy of AnyHashable(uint64_t a1)
{
  return a1;
}

uint64_t outlined init with copy of CoordinateSpace.Name(uint64_t a1, uint64_t a2)
{
  return a2;
}

Swift::Int Sections.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *(void *)(v5 + 24);
  uint64_t v11 = *(void *)(v5 + 32);
  __swift_project_boxed_opaque_existential_1((void *)v5, v10);
  uint64_t v35 = 2;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v35, a2, a3, v10, v11);
  if ((v13 & 1) == 0)
  {
    uint64_t v14 = v12;
    uint64_t v15 = *(void *)(v5 + 56);
    if (*(unsigned char *)(v5 + 64) == 1)
    {
      swift_bridgeObjectRetain();
      swift_retain();
    }
    else
    {
      swift_bridgeObjectRetain();
    }
    uint64_t v19 = *(void *)(v15 + 16);
    swift_release();
    uint64_t v20 = swift_bridgeObjectRelease();
    MEMORY[0x1F4188790](v20);
    v34[2] = v5;
    v34[3] = v14;
    Swift::Int v21 = specialized RandomAccessCollection.lowerBound(_:)((uint64_t)partial apply for closure #1 in Sections.firstIndexPath<A>(for:), (uint64_t)v34, 0, v19);
    uint64_t v22 = *(void *)(v5 + 56);
    if (v21 >= *(void *)(v22 + 16)) {
      goto LABEL_26;
    }
    Swift::Int v23 = v21;
    int v24 = *(unsigned __int8 *)(v5 + 64);
    Swift::Int result = Sections.startOffset(forSectionAt:)(v21);
    uint64_t v25 = v14 - result;
    if (__OFSUB__(v14, result))
    {
      __break(1u);
    }
    else
    {
      if (v23 + 1 >= *(void *)(v22 + 16))
      {
        uint64_t v26 = dispatch thunk of _ViewList_ID_Views.endIndex.getter();
      }
      else
      {
        if (v23 < -1)
        {
LABEL_29:
          __break(1u);
LABEL_30:
          __break(1u);
          return result;
        }
        uint64_t v26 = *(void *)(v22 + 16 * (v23 + 1) + 32);
      }
      Swift::Int result = Sections.startOffset(forSectionAt:)(v23);
      BOOL v27 = __OFSUB__(v26, result);
      uint64_t v28 = v26 - result;
      if (!v27)
      {
        uint64_t v29 = v25 & ~(v25 >> 63);
        if (v29 < v28)
        {
LABEL_16:
          uint64_t v30 = v29;
LABEL_20:
          MEMORY[0x18C10A880](v30, v23);
          uint64_t v31 = type metadata accessor for IndexPath();
          return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(a4, 0, 1, v31);
        }
        if (v25 <= 0 && !v28)
        {
          uint64_t v30 = NSNotFound.getter();
          goto LABEL_20;
        }
        if (v24) {
          swift_retain();
        }
        uint64_t v32 = *(void *)(v22 + 16);
        Swift::Int result = swift_release();
        if (v23 < v32 - 1)
        {
          BOOL v27 = __OFSUB__(v29, v28);
          v29 -= v28;
          if (!v27)
          {
            ++v23;
            goto LABEL_16;
          }
          goto LABEL_30;
        }
LABEL_26:
        uint64_t v33 = type metadata accessor for IndexPath();
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(a4, 1, 1, v33);
      }
    }
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v16 = type metadata accessor for IndexPath();
  unint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);

  return v17(a4, 1, 1, v16);
}

uint64_t lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for PassthroughSubject<Any, Never>()
{
  if (!lazy cache variable for type metadata for PassthroughSubject<Any, Never>)
  {
    unint64_t v0 = type metadata accessor for PassthroughSubject();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PassthroughSubject<Any, Never>);
    }
  }
}

void type metadata accessor for [DispatchWorkItemFlags]()
{
  if (!lazy cache variable for type metadata for [DispatchWorkItemFlags])
  {
    type metadata accessor for DispatchWorkItemFlags();
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [DispatchWorkItemFlags]);
    }
  }
}

void type metadata accessor for _ContiguousArrayStorage<(ViewIdentity, (_:))>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(uint64_t))
{
  if (!*a2)
  {
    _ss11AnyHashableV_7Combine18PassthroughSubjectCyyps5NeverOGtMaTm_0(255, a3, a4);
    unint64_t v5 = type metadata accessor for _ContiguousArrayStorage();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void type metadata accessor for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>)
  {
    type metadata accessor for PassthroughSubject<Any, Never>();
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, PassthroughSubject<Any, Never>>);
    }
  }
}

uint64_t outlined init with copy of (AnyHashable, PassthroughSubject<Any, Never>)(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  type metadata accessor for (AnyHashable, PassthroughSubject<Any, Never>)(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

_OWORD *specialized _NativeDictionary.setValue(_:forKey:isUnique:)(_OWORD *a1, uint64_t a2, char a3)
{
  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
LABEL_13:
      outlined init with copy of AnyHashable(a2, (uint64_t)v21);
      return specialized _NativeDictionary._insert(at:key:value:)(v10, (uint64_t)v21, a1, v16);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if ((v14 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);

  return outlined init with take of Any(a1, v17);
}

{
  void *v3;
  void **v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  void *v12;
  char v13;
  unint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  void *v20;
  _OWORD *v21;
  _OWORD *result;
  unint64_t v23;
  char v24;
  uint64_t v25;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = type metadata accessor for CodingUserInfoKey();
  char v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v25 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  BOOL v12 = (void *)*v3;
  char v14 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v15 = v12[2];
  uint64_t v16 = (v13 & 1) == 0;
  unint64_t v17 = v15 + v16;
  if (__OFADD__(v15, v16))
  {
    __break(1u);
    goto LABEL_15;
  }
  char v18 = v13;
  unint64_t v19 = v12[3];
  if (v19 < v17 || (a3 & 1) == 0)
  {
    if (v19 >= v17 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v17, a3 & 1);
    Swift::Int v23 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v18 & 1) == (v24 & 1))
    {
      char v14 = v23;
      char v20 = *v4;
      if (v18) {
        goto LABEL_8;
      }
LABEL_13:
      (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
      return specialized _NativeDictionary._insert(at:key:value:)(v14, (uint64_t)v11, a1, v20);
    }
LABEL_15:
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  char v20 = *v4;
  if ((v18 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_8:
  Swift::Int v21 = (_OWORD *)(v20[7] + 32 * v14);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v21);

  return outlined init with take of Any(a1, v21);
}

{
  void *v3;
  void **v4;
  void *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  void *v16;
  _OWORD *v17;
  _OWORD *result;
  unint64_t v19;
  char v20;
  uint64_t vars8;

  uint64_t v4 = (void **)v3;
  uint64_t v8 = (void *)*v3;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
  uint64_t v11 = v8[2];
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
    goto LABEL_17;
  }
  char v14 = v9;
  uint64_t v15 = v8[3];
  if (v15 < v13 || (a3 & 1) == 0)
  {
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      specialized _NativeDictionary.copy()();
      goto LABEL_7;
    }
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, a3 & 1);
    unint64_t v19 = specialized __RawDictionaryStorage.find<A>(_:)(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      unint64_t v10 = v19;
      uint64_t v16 = *v4;
      if (v14) {
        goto LABEL_8;
      }
      goto LABEL_13;
    }
LABEL_17:
    type metadata accessor for PartialKeyPath<UISplitViewController>(0, (unint64_t *)&lazy cache variable for type metadata for PartialKeyPath<UISplitViewController>, &lazy cache variable for type metadata for UISplitViewController, 0x1E4FB1C48, MEMORY[0x1E4FBBAD8]);
    uint64_t result = (_OWORD *)KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
    return result;
  }
LABEL_7:
  uint64_t v16 = *v4;
  if (v14)
  {
LABEL_8:
    unint64_t v17 = (_OWORD *)(v16[7] + 32 * v10);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
    return outlined init with take of Any(a1, v17);
  }
LABEL_13:
  specialized _NativeDictionary._insert(at:key:value:)(v10, a2, a1, v16);

  return (_OWORD *)swift_retain();
}

void type metadata accessor for _DictionaryStorage<AnyHashable, Any>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>)
  {
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<AnyHashable, Any>);
    }
  }
}

_OWORD *specialized _NativeDictionary._insert(at:key:value:)(unint64_t a1, uint64_t a2, _OWORD *a3, void *a4)
{
  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v5 = a4[6] + 40 * a1;
  long long v6 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
  *(_OWORD *)(v5 + 16) = v6;
  *(void *)(v5 + 32) = *(void *)(a2 + 32);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v8 = a4[2];
  BOOL v9 = __OFADD__(v8, 1);
  uint64_t v10 = v8 + 1;
  if (v9) {
    __break(1u);
  }
  else {
    a4[2] = v10;
  }
  return result;
}

{
  uint64_t v8;
  uint64_t v9;
  _OWORD *result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  uint64_t v8 = a4[6];
  BOOL v9 = type metadata accessor for CodingUserInfoKey();
  (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32))(v8 + *(void *)(*(void *)(v9 - 8) + 72) * a1, a2, v9);
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  uint64_t v11 = a4[2];
  BOOL v12 = __OFADD__(v11, 1);
  uint64_t v13 = v11 + 1;
  if (v12) {
    __break(1u);
  }
  else {
    a4[2] = v13;
  }
  return result;
}

{
  _OWORD *result;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;

  a4[(a1 >> 6) + 8] |= 1 << a1;
  *(void *)(a4[6] + 8 * a1) = a2;
  uint64_t result = outlined init with take of Any(a3, (_OWORD *)(a4[7] + 32 * a1));
  long long v6 = a4[2];
  uint64_t v7 = __OFADD__(v6, 1);
  uint64_t v8 = v6 + 1;
  if (v7) {
    __break(1u);
  }
  else {
    a4[2] = v8;
  }
  return result;
}

uint64_t specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = a1 + 40;
  uint64_t v3 = a2 + 40;
  outlined init with copy of AnyHashable(a1, a2);

  return outlined init with copy of Any(v2, v3);
}

{
  long long v2;
  long long v3;
  long long v4;
  long long v5;
  long long v6;
  long long v7;
  long long v8;
  long long v9;
  long long v10;
  long long v11;
  long long v12;
  char v13;
  char v14;
  _OWORD v16[2];
  long long v17;
  long long v18;
  long long v19;
  long long v20;
  long long v21;
  _OWORD v22[2];

  uint64_t v2 = *(_OWORD *)(a1 + 128);
  uint64_t v3 = *(_OWORD *)(a1 + 160);
  Swift::Int v21 = *(_OWORD *)(a1 + 144);
  v22[0] = v3;
  *(_OWORD *)((char *)v22 + 12) = *(_OWORD *)(a1 + 172);
  uint64_t v4 = *(_OWORD *)(a1 + 64);
  uint64_t v5 = *(_OWORD *)(a1 + 96);
  unint64_t v17 = *(_OWORD *)(a1 + 80);
  long long v6 = v17;
  char v18 = v5;
  uint64_t v7 = *(_OWORD *)(a1 + 96);
  uint64_t v8 = *(_OWORD *)(a1 + 128);
  unint64_t v19 = *(_OWORD *)(a1 + 112);
  BOOL v9 = v19;
  char v20 = v8;
  uint64_t v10 = *(_OWORD *)(a1 + 64);
  v16[0] = *(_OWORD *)(a1 + 48);
  uint64_t v11 = v16[0];
  v16[1] = v10;
  BOOL v12 = *(_OWORD *)(a1 + 160);
  *(_OWORD *)(a2 + 144) = v21;
  *(_OWORD *)(a2 + 160) = v12;
  *(_OWORD *)(a2 + 172) = *(_OWORD *)(a1 + 172);
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 96) = v7;
  *(_OWORD *)(a2 + 112) = v9;
  *(_OWORD *)(a2 + 128) = v2;
  uint64_t v13 = *(unsigned char *)(a1 + 16);
  char v14 = *(unsigned char *)(a1 + 40);
  *(_OWORD *)(a2 + 48) = v11;
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(unsigned char *)(a2 + 16) = v13;
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(unsigned char *)(a2 + 40) = v14;
  return outlined retain of NavigationRequest((uint64_t)v16);
}

{
  uint64_t v2;
  long long v4;
  uint64_t vars8;

  uint64_t v2 = *(void *)(a1 + 8);
  *(void *)a2 = *(void *)a1;
  *(void *)(a2 + 8) = v2;
  uint64_t v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(a2 + 16) = v4;
  outlined init with copy of UpdateViewDestinationRequest(a1 + 32, a2 + 32);
  swift_retain();

  return outlined copy of Text.LineStyle?(v2, v4);
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t vars8;

  type metadata accessor for (key: UUID, value: PlatformItemList)();
  uint64_t v5 = *(int *)(v4 + 48);
  type metadata accessor for (UUID, PlatformItemList)();
  uint64_t v7 = *(int *)(v6 + 48);
  uint64_t v8 = *(void *)(a1 + v5);
  BOOL v9 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(a2, a1, v9);
  *(void *)(a2 + v7) = v8;

  return swift_bridgeObjectRetain();
}

{
  char v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  char v13;
  __int16 v14;
  uint64_t vars8;

  uint64_t v3 = *(unsigned char *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 56);
  long long v6 = *(unsigned char *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 72);
  uint64_t v8 = *(unsigned char *)(a1 + 80);
  BOOL v9 = *(void *)(a1 + 88);
  uint64_t v10 = *(unsigned char *)(a1 + 96);
  uint64_t v11 = *(void *)(a1 + 104);
  uint64_t v13 = *(unsigned char *)(a1 + 112);
  char v14 = *(_WORD *)(a1 + 97);
  outlined init with copy of ToolbarPlacement.Role(a1, a2);
  *(unsigned char *)(a2 + 40) = v3;
  *(void *)(a2 + 48) = v4;
  *(void *)(a2 + 56) = v5;
  *(unsigned char *)(a2 + 64) = v6;
  *(void *)(a2 + 72) = v7;
  *(unsigned char *)(a2 + 80) = v8;
  *(void *)(a2 + 88) = v9;
  *(unsigned char *)(a2 + 96) = v10;
  *(_WORD *)(a2 + 97) = v14;
  *(void *)(a2 + 104) = v11;
  *(unsigned char *)(a2 + 112) = v13;
  swift_retain();
  swift_retain();

  return swift_retain();
}

{
  uint64_t v3;
  uint64_t vars8;

  uint64_t v3 = *(void *)(a1 + 40);
  outlined init with copy of AnyHashable(a1, a2);
  *(void *)(a2 + 40) = v3;

  return swift_retain();
}

uint64_t outlined destroy of (key: ViewIdentity, value: InspectorStorage)(uint64_t a1, unint64_t *a2)
{
  type metadata accessor for (key: ViewIdentity, value: InspectorStorage)(0, a2);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_0(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t _s7SwiftUI12ViewIdentityV3key_AA16InspectorStorageV5valuetWOhTm_1(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

double partial apply for closure #1 in LazyLayoutComputer.Engine.sizeThatFits(_:)()
{
  return closure #1 in LazyLayoutComputer.Engine.sizeThatFits(_:)();
}

double closure #1 in LazyLayoutComputer.Engine.sizeThatFits(_:)()
{
  type metadata accessor for CGSize(0);
  SizeAndSpacingContext.update<A>(_:)();
  return v1;
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void storeEnumTagSinglePayload for LazyHStack(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 24) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 >= a2)
  {
    switch(v12)
    {
      case 1:
        a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 2:
        *(_WORD *)&a1[v9] = 0;
        if (a2) {
          goto LABEL_21;
        }
        break;
      case 3:
LABEL_34:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v9] = 0;
        goto LABEL_20;
      default:
LABEL_20:
        if (a2)
        {
LABEL_21:
          unint64_t v17 = (unint64_t)&a1[v8 + 24] & ~v8;
          char v18 = *(void (**)(unint64_t))(v6 + 56);
          v18(v17);
        }
        break;
    }
  }
  else
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        break;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        break;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        break;
      default:
        return;
    }
  }
}

double ScrollViewAdjustedSafeArea.value.getter()
{
  double v0 = *(double *)AGGraphGetValue();
  static Semantics.v6.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    AGGraphGetValue();
    type metadata accessor for CGSize(0);
    AGGraphGetValue();
    if (Axis.Set.contains(_:)())
    {
      EdgeInsets.subscript.getter();
      EdgeInsets.subscript.setter();
    }
    if (Axis.Set.contains(_:)())
    {
      EdgeInsets.subscript.getter();
      EdgeInsets.subscript.setter();
    }
  }
  return v0;
}

uint64_t ScrollViewDefaultAnchors.updateValue()()
{
  uint64_t v1 = v0;
  uint64_t Value = AGGraphGetValue();
  uint64_t v3 = *(void *)Value;
  char v4 = *(unsigned char *)(Value + 24);
  int v5 = *(unsigned __int8 *)AGGraphGetValue();
  if (v4)
  {
    swift_bridgeObjectRetain();
    ScrollViewDefaultAnchors.defaultValue(axes:)(v5);
    uint64_t v7 = v6;
    uint64_t v9 = v8;
  }
  else
  {
    uint64_t v7 = *(void *)(Value + 8);
    uint64_t v9 = *(void *)(Value + 16);
    swift_bridgeObjectRetain();
  }
  if (!AGGraphGetOutputValue()
    || (static ScrollAnchorStorage.== infix(_:_:)() & 1) == 0
    || v5 != *(unsigned __int8 *)(v1 + 33))
  {
    AGGraphSetOutputValue();
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)(v1 + 8) = v3;
  *(void *)(v1 + 16) = v7;
  *(void *)(v1 + 24) = v9;
  *(unsigned char *)(v1 + 32) = 0;
  *(unsigned char *)(v1 + 33) = v5;
  return result;
}

uint64_t ScrollViewDefaultAnchors.defaultValue(axes:)(char a1)
{
  static Semantics.v5.getter();
  if ((isLinkedOnOrAfter(_:)() & 1) != 0 && a1 == 3)
  {
LABEL_3:
    return static UnitPoint.topLeading.getter();
  }
  static Semantics.v4.getter();
  if (isLinkedOnOrAfter(_:)())
  {
    if (a1 != 1)
    {
      if (a1 == 3)
      {
        return static UnitPoint.center.getter();
      }
      goto LABEL_14;
    }
  }
  else if (a1 != 1)
  {
    if (a1 == 3) {
      goto LABEL_3;
    }
LABEL_14:
    return static UnitPoint.top.getter();
  }

  return static UnitPoint.leading.getter();
}

uint64_t @objc DeprecatedAlertBridge.__ivar_destroyer(void *a1)
{
  uint64_t v2 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakDestroy();

  swift_release();
  swift_release();
  uint64_t v3 = (char *)a1 + *(void *)((*v2 & *a1) + 0x98);
  uint64_t v4 = type metadata accessor for Optional();
  int v5 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v4 - 8) + 8);

  return v5(v3, v4);
}

double ScrollViewRTLAlignmentAdjustment.value.getter()
{
  static Semantics.v6.getter();
  double v0 = 0.0;
  if (isLinkedOnOrAfter(_:)())
  {
    AGGraphGetValue();
    if ((Axis.Set.contains(_:)() & 1) != 0 && *(unsigned char *)AGGraphGetValue() == 1)
    {
      AGGraphGetValue();
      ScrollAnchorStorage.alignment.getter();
      if (v1 == 0.0)
      {
        AGGraphGetValue();
        ViewSize.width.getter();
        double v3 = v2;
        AGGraphGetValue();
        ViewSize.width.getter();
        if (v3 < v4) {
          return v4 - v3;
        }
      }
    }
  }
  return v0;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance NavigationColumnModifier@<X0>(uint64_t a1@<X8>)
{
  char v3 = *v1;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = swift_getKeyPath();
  uint64_t result = static Alignment.center.getter();
  *(_WORD *)a1 = 0;
  *(void *)(a1 + 8) = KeyPath;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = v5;
  *(unsigned char *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = v6;
  *(unsigned char *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = result;
  *(void *)(a1 + 64) = v8;
  *(unsigned char *)(a1 + 72) = v3;
  return result;
}

uint64_t partial apply for closure #1 in applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(unsigned int *)(v4 + 40);
  unsigned __int8 v9 = *(unsigned char *)(v4 + 44);
  uint64_t v10 = 0x1000000000000;
  if (!*(unsigned char *)(v4 + 46)) {
    uint64_t v10 = 0;
  }
  uint64_t v11 = 0x10000000000;
  if (!*(unsigned char *)(v4 + 45)) {
    uint64_t v11 = 0;
  }
  uint64_t v13 = *a2;
  return applyNode #1 (start:style:node:transform:section:) in _LazyLayout_Subviews.apply(from:style:to:)(a1, &v13, a3, a4, v11 | v8 | v10 | ((unint64_t)v9 << 32), v5, v6, v7) & 1;
}

uint64_t associated type witness table accessor for View.Body : View in ScrollView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ScrollView(uint64_t result, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 >= a2)
  {
LABEL_26:
    if (v5 < 0x7FFFFFFF)
    {
      unint64_t v16 = (result + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      uint64_t v17 = *(void *)(v16 + 72);
      int v18 = *(_DWORD *)(v16 + 64) & 0x7FFFFFFF;
      if ((v17 & 0xF000000000000007) != 0) {
        return (v18 + 1);
      }
      else {
        return 0;
      }
    }
    else
    {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
  }
  else
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 120;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *(unsigned __int8 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
        goto LABEL_22;
      case 3:
        __break(1u);
        return result;
      case 4:
        int v14 = *(_DWORD *)(result + v8);
        if (!v14) {
          goto LABEL_26;
        }
LABEL_22:
        int v15 = v14 - 1;
        if (v10)
        {
          int v15 = 0;
          LODWORD(v10) = *(_DWORD *)result;
        }
        uint64_t result = v7 + (v10 | v15) + 1;
        break;
      default:
        goto LABEL_26;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in _TaskValueModifier<A>.Child()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for ZoomNavigationTransition()
{
  return &type metadata for ZoomNavigationTransition;
}

uint64_t type metadata completion function for LazyVGrid()
{
  return type metadata completion function for LazyHGrid();
}

uint64_t View.textSizing(_:)()
{
  return swift_release();
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in ContentConfigurationBasedRootEnvironment()
{
  return &protocol witness table for ContentConfigurationBasedRootEnvironment;
}

uint64_t type metadata completion function for ResolvedShadowView()
{
  return type metadata completion function for DelaySource();
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance AppBodyAccessor<A>(uint64_t result, char a2)
{
  return AppBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t initializeWithCopy for UpdateViewDestinationRequestProcessor.PreferenceDebouncer(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = (_OWORD *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 32);
  if (v5 == 1)
  {
    *(_OWORD *)(a1 + 24) = *v4;
  }
  else
  {
    *(void *)(a1 + 24) = *(void *)v4;
    *(void *)(a1 + 32) = v5;
    swift_retain();
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 45) = *(void *)(a2 + 45);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  return a1;
}

uint64_t initializeWithCopy for DragGesture(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2 + 1;
  *(void *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 8);
  if (*((unsigned char *)a2 + 48))
  {
    long long v7 = v4[1];
    *uint64_t v6 = *v4;
    v6[1] = v7;
    *(_OWORD *)((char *)v6 + 25) = *(_OWORD *)((char *)v4 + 25);
  }
  else
  {
    long long v8 = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v8;
    (**(void (***)(_OWORD *, _OWORD *))(v8 - 8))(v6, v4);
    *(unsigned char *)(a1 + 48) = 0;
  }
  *(unsigned char *)(a1 + 49) = *((unsigned char *)a2 + 49);
  return a1;
}

uint64_t NavigationLink<>.init<A>(value:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  double v12 = MEMORY[0x1F4188790](a1);
  int v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v15(v12);
  uint64_t v20 = a2;
  uint64_t v21 = a3;
  uint64_t v22 = a4;
  uint64_t v23 = a5;
  uint64_t v16 = type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in NavigationLink<>.init<A>(value:label:), (uint64_t)v19, MEMORY[0x1E4FBC248], (uint64_t)&type metadata for NavigationLinkPresentedValue, v17, (uint64_t)&v24);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a1, v16);
  return NavigationLink.init<>(label:presentedValue:)((uint64_t)v14, v24, a2, a6);
}

uint64_t NavigationLink.init<>(label:presentedValue:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  *(void *)a4 = 0;
  *(void *)(a4 + 8) = 0;
  *(_WORD *)(a4 + 16) = 0;
  long long v8 = (int *)type metadata accessor for NavigationLink();
  uint64_t v9 = v8[14];
  *(unsigned char *)(a4 + v8[15]) = 1;
  uint64_t v10 = v8[16];
  uint64_t v11 = a4 + v8[18];
  *(_DWORD *)uint64_t v11 = 0;
  *(void *)(v11 + 8) = 0;
  uint64_t v12 = a4 + v8[19];
  *(unsigned char *)uint64_t v12 = 0;
  *(void *)(v12 + 8) = 0;
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4 + v8[13], a1, a3);
  *(unsigned char *)(a4 + v9) = 1;
  *(void *)(a4 + v10) = a2;
  *(unsigned char *)(a4 + v8[17]) = a2 == 0;
  return result;
}

uint64_t type metadata accessor for NavigationLink()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>;
  if (!lazy protocol witness table cache variable for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>)
  {
    type metadata accessor for DividerStyleModifier<DefaultDividerStyle>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DividerStyleModifier<DefaultDividerStyle> and conformance DividerStyleModifier<A>);
  }
  return result;
}

void type metadata accessor for DividerStyleModifier<DefaultDividerStyle>()
{
  if (!lazy cache variable for type metadata for DividerStyleModifier<DefaultDividerStyle>)
  {
    lazy protocol witness table accessor for type DefaultDividerStyle and conformance DefaultDividerStyle();
    unint64_t v0 = type metadata accessor for DividerStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DividerStyleModifier<DefaultDividerStyle>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type DefaultDividerStyle and conformance DefaultDividerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type DefaultDividerStyle and conformance DefaultDividerStyle;
  if (!lazy protocol witness table cache variable for type DefaultDividerStyle and conformance DefaultDividerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DefaultDividerStyle and conformance DefaultDividerStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>)
  {
    type metadata accessor for DividerStyleModifier<PlainDividerStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Divider, DividerStyleModifier<PlainDividerStyle>>);
    }
  }
}

void type metadata accessor for DividerStyleModifier<PlainDividerStyle>()
{
  if (!lazy cache variable for type metadata for DividerStyleModifier<PlainDividerStyle>)
  {
    lazy protocol witness table accessor for type PlainDividerStyle and conformance PlainDividerStyle();
    unint64_t v0 = type metadata accessor for DividerStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DividerStyleModifier<PlainDividerStyle>);
    }
  }
}

uint64_t View.dividerStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for DividerStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  int v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

uint64_t type metadata accessor for DividerStyleModifier()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type PlainDividerStyle and conformance PlainDividerStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type PlainDividerStyle and conformance PlainDividerStyle;
  if (!lazy protocol witness table cache variable for type PlainDividerStyle and conformance PlainDividerStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlainDividerStyle and conformance PlainDividerStyle);
  }
  return result;
}

uint64_t initializeWithCopy for AnyHoverEffectContainer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  long long v7 = (_OWORD *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  uint64_t v8 = *(void *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = v8;
  uint64_t v9 = *(void **)(a2 + 128);
  *(void *)(a1 + 128) = v9;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  id v10 = v9;
  if (v6)
  {
    uint64_t v11 = *(void **)(a2 + 144);
    *(void *)(a1 + 136) = v6;
    *(void *)(a1 + 144) = v11;
    swift_retain();
    id v12 = v11;
  }
  else
  {
    *(_OWORD *)(a1 + 136) = *v7;
  }
  return a1;
}

void specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(id *a1)
{
  uint64_t v1 = *(unsigned int *)a1;
  id v2 = a1[1];
  char v3 = UpdatedScrollViewContainer.value.getter(v1, v2);

  type metadata accessor for HostingScrollView.PlatformContainer();
  AGGraphSetOutputValue();
}

void *UpdatedScrollViewContainer.value.getter(uint64_t a1, void *a2)
{
  id v3 = UpdatedScrollViewContainer.scrollView.getter();
  id v4 = v3;
  id v5 = a2;

  id v6 = a2;
  return a2;
}

id UpdatedScrollViewContainer.scrollView.getter()
{
  type metadata accessor for HostingScrollView();
  unint64_t v0 = *(void **)AGGraphGetValue();

  return v0;
}

uint64_t *assignWithCopy for SceneBridgeReader(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<HoverEffect?>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  uint64_t v8 = a2[3];
  a1[2] = a2[2];
  a1[3] = v8;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t SceneBridgeReader.body.getter@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  v20[0] = a4;
  uint64_t v7 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  id v12 = (char *)v20 - v11;
  uint64_t v14 = v13 & 1;
  outlined copy of Environment<HoverEffect?>.Content(v15, v14);
  uint64_t v16 = specialized Environment.wrappedValue.getter(a1, v14);
  outlined consume of Environment<AnyShapeStyle?>.Content(a1, v14);
  if (v16) {
    goto LABEL_5;
  }
  MEMORY[0x18C112B90](0xD0000000000000E7, 0x800000018832BA00);
  uint64_t v16 = static SceneBridge._devNullSceneBridge;
  if (static SceneBridge._devNullSceneBridge
    || (type metadata accessor for SceneBridge(),
        uint64_t v17 = swift_allocObject(),
        SceneBridge.init()(),
        static SceneBridge._devNullSceneBridge = v17,
        uint64_t result = swift_release(),
        (uint64_t v16 = static SceneBridge._devNullSceneBridge) != 0))
  {
    swift_retain();
LABEL_5:
    a2(v16);
    swift_release();
    static ViewBuilder.buildExpression<A>(_:)(v9);
    unint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v9, a3);
    static ViewBuilder.buildExpression<A>(_:)(v12);
    return ((uint64_t (*)(char *, uint64_t))v19)(v12, a3);
  }
  __break(1u);
  return result;
}

uint64_t destroy for SceneBridgeReader(uint64_t a1)
{
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)a1, *(unsigned __int8 *)(a1 + 8));

  return swift_release();
}

uint64_t closure #1 in View.onOpenURL(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  unint64_t v14 = type metadata accessor for OpenURLContext();
  uint64_t v19 = specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(v14, 0x434C52556E65704FuLL, 0xEE00747865746E6FLL, a1);
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = a2;
  *(void *)(v15 + 24) = a3;
  type metadata accessor for PassthroughSubject<Any, Never>();
  uint64_t v17 = v16;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
  View.onReceive<A>(_:perform:)((uint64_t)&v19, a6, v15, a4, v17, a5, a7);
  swift_retain();
  swift_release();
  return swift_release();
}

uint64_t View.onReceive<A>(_:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  v24[1] = a6;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)v24 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v19, v22, v21, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a5);
  SubscriptionView.init(content:publisher:action:)((uint64_t)v19, (uint64_t)v15, a2, a3, a5, a4, a7);
  return swift_retain();
}

uint64_t SubscriptionView.init(content:publisher:action:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a7, a1, a6);
  uint64_t v12 = type metadata accessor for SubscriptionView();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a7 + *(int *)(v12 + 52), a2, a5);
  uint64_t v14 = (void *)(a7 + *(int *)(v12 + 56));
  *uint64_t v14 = a3;
  v14[1] = a4;
  return result;
}

uint64_t partial apply for closure #1 in View.onOpenURL(perform:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, void, void))
{
  uint64_t v3 = *(void *)(*(void *)(v2 + 16) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unsigned __int8 v5 = (void *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8));
  return a2(a1, v2 + v4, *v5, v5[1]);
}

uint64_t type metadata accessor for OpenURLContext()
{
  uint64_t result = type metadata singleton initialization cache for OpenURLContext;
  if (!type metadata singleton initialization cache for OpenURLContext) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in View.onOpenURL(perform:)(uint64_t a1)
{
  return partial apply for closure #1 in View.onOpenURL(perform:)(a1, (uint64_t (*)(uint64_t, unint64_t, void, void))closure #1 in View.onOpenURL(perform:));
}

{
  return partial apply for closure #1 in View.onOpenURL(perform:)(a1, (uint64_t (*)(uint64_t, unint64_t, void, void))closure #1 in View.onOpenURL(perform:));
}

uint64_t closure #1 in View.onOpenURL(perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return closure #1 in View.onOpenURL(perform:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in closure #1 in View.onOpenURL(perform:), a6);
}

{
  return closure #1 in View.onOpenURL(perform:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in closure #1 in View.onOpenURL(perform:), a6);
}

uint64_t partial apply for closure #1 in View.onContinueUserActivity(_:perform:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3 = (*(void *)(*(void *)(*(void *)(v2 + 16) - 8) + 64)
      + ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 16) - 8) + 80))
      + 7) & 0xFFFFFFFFFFFFFFF8;
  return closure #1 in View.onContinueUserActivity(_:perform:)(a1, *(void *)(v2 + v3), *(void *)(v2 + v3 + 8), *(void *)(v2 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8)), *(void *)(v2 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8) + 8), *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t closure #1 in View.onContinueUserActivity(_:perform:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  unint64_t v16 = type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSUserActivity);
  uint64_t v21 = specialized static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)(v16, a2, a3, a1);
  double v17 = (void *)swift_allocObject();
  v17[2] = a4;
  v17[3] = a5;
  void v17[4] = a2;
  v17[5] = a3;
  type metadata accessor for PassthroughSubject<Any, Never>();
  uint64_t v19 = v18;
  lazy protocol witness table accessor for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>(&lazy protocol witness table cache variable for type PassthroughSubject<Any, Never> and conformance PassthroughSubject<A, B>, 255, (void (*)(uint64_t))type metadata accessor for PassthroughSubject<Any, Never>);
  View.onReceive<A>(_:perform:)((uint64_t)&v21, (uint64_t)partial apply for closure #1 in closure #1 in View.onContinueUserActivity(_:perform:), (uint64_t)v17, a6, v19, a7, a8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_release();
  return swift_release();
}

uint64_t UIKitContentScrollViewBridge.__deallocating_deinit()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

unint64_t View.appIntentIntelligenceProvider<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v9[2] = a2;
  void v9[3] = a3;
  v9[4] = a4;
  v9[5] = a5;
  void v9[6] = a6;
  type metadata accessor for Optional();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.appIntentIntelligenceProvider<A>(_:), (uint64_t)v9, MEMORY[0x1E4FBC248], MEMORY[0x1E4F40180], v6, (uint64_t)&v10);
  unint64_t v7 = v10;
  v9[7] = v10;
  View.scrapeableAttachment(_:)();
  return outlined consume of ScrapeableContent.Content?(v7);
}

unint64_t outlined consume of ScrapeableContent.Content(unint64_t result)
{
  switch(result >> 60)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
    case 4uLL:
    case 5uLL:
    case 6uLL:
    case 7uLL:
    case 8uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t outlined consume of ScrapeableContent.Content?(unint64_t result)
{
  if ((~result & 0xF000000000000007) != 0) {
    return outlined consume of ScrapeableContent.Content(result);
  }
  return result;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t), unint64_t *a4, uint64_t a5)
{
  return swift_bridgeObjectRelease();
}

uint64_t type metadata completion function for PresentationHostingControllerBase()
{
  return swift_initClassMetadata2();
}

uint64_t BarAppearanceBridge.didMoveToWindow<A>(hostingController:)(void *a1)
{
  BarAppearanceBridge.UpdateContext.init<A>(hostingController:)(a1, v7);
  outlined init with copy of BarAppearanceBridge.UpdateContext((uint64_t)v7, (uint64_t)v5);
  uint64_t v2 = v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v5, v2);
  swift_endAccess();
  BarAppearanceBridge.updateBarsToConfiguration()();
  uint64_t v3 = OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates;
  if ((*(unsigned char *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) & 2) != 0) {
    BarAppearanceBridge.platformUpdateNavigationAdaptor()();
  }
  uint64_t v6 = 0;
  memset(v5, 0, sizeof(v5));
  swift_beginAccess();
  outlined assign with take of BarAppearanceBridge.UpdateContext?((uint64_t)v5, v2);
  swift_endAccess();
  *(void *)(v1 + v3) = 0;
  return outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)v7);
}

uint64_t BarAppearanceBridge.updateNavigationAppearances(navigationController:)(void *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for UIKitNavigationController();
  uint64_t v4 = swift_dynamicCastClass();
  if (!v4) {
    goto LABEL_41;
  }
  unsigned __int8 v5 = (void *)v4;
  uint64_t v6 = *(void *)(v4 + OBJC_IVAR____TtC7SwiftUI25UIKitNavigationController_update);
  uint64_t v7 = MEMORY[0x18C119DF0](v6 + 32);
  id v83 = a1;
  if (!v7 || (swift_unknownObjectRelease(), v7 != v2))
  {
    *(void *)(v6 + 40) = &protocol witness table for BarAppearanceBridge;
    swift_unknownObjectWeakAssign();
  }
  memset(v91, 0, 40);
  outlined init with copy of ToolbarPlacement.Role((uint64_t)v91, (uint64_t)&v107);
  uint64_t v8 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations;
  swift_beginAccess();
  uint64_t v9 = *(void *)v8;
  uint64_t v86 = v2;
  uint64_t v87 = v8;
  if (*(void *)(*(void *)v8 + 16))
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
    if (v11)
    {
      uint64_t v12 = *(void *)(v9 + 56) + 80 * v10;
      char v80 = *(unsigned char *)v12;
      uint64_t v14 = *(void *)(v12 + 8);
      uint64_t v13 = *(void *)(v12 + 16);
      char v77 = *(unsigned char *)(v12 + 24);
      uint64_t v74 = *(void *)(v12 + 32);
      char v15 = *(unsigned char *)(v12 + 40);
      uint64_t v16 = *(void *)(v12 + 48);
      uint64_t v17 = *(void *)(v12 + 64);
      char v18 = *(unsigned char *)(v12 + 72);
      int v19 = *(unsigned __int8 *)(v12 + 56) | (*(unsigned __int8 *)(v12 + 57) << 8) | (*(unsigned __int8 *)(v12 + 58) << 16);
      swift_retain();
      swift_retain();
      swift_retain();
    }
    else
    {
      char v80 = 0;
      uint64_t v13 = 0;
      char v77 = 0;
      uint64_t v74 = 0;
      char v15 = 0;
      uint64_t v16 = 0;
      int v19 = 0;
      uint64_t v17 = 0;
      char v18 = 0;
      uint64_t v14 = 1;
    }
    swift_bridgeObjectRelease();
  }
  else
  {
    char v80 = 0;
    uint64_t v13 = 0;
    char v77 = 0;
    uint64_t v74 = 0;
    char v15 = 0;
    uint64_t v16 = 0;
    int v19 = 0;
    uint64_t v17 = 0;
    char v18 = 0;
    uint64_t v14 = 1;
  }
  uint64_t v20 = (uint64_t *)(v6 + 24);
  swift_beginAccess();
  uint64_t v21 = *(void *)(v6 + 24);
  *(void *)&long long v96 = v21;
  if (v14 == 1)
  {
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&v107, (uint64_t)&v92);
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v107);
    LOBYTE(v68) = v95;
    uint64_t v65 = v94;
    outlined consume of ToolbarAppearanceConfiguration?(v92, v93);
    uint64_t v22 = v96;
  }
  else
  {
    LOBYTE(v118) = v80;
    *((void *)&v118 + 1) = v14;
    uint64_t v119 = v13;
    char v120 = v77;
    uint64_t v121 = v74;
    char v122 = v15;
    uint64_t v123 = v16;
    __int16 v124 = v19 & 0xFF01;
    char v125 = BYTE2(v19);
    uint64_t v126 = v17;
    char v127 = v18;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v92 = v21;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v118, (uint64_t)&v107, isUniquelyReferenced_nonNull_native);
    uint64_t v22 = v92;
    *(void *)&long long v96 = v92;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v107);
  }
  uint64_t v24 = (uint64_t *)v87;
  uint64_t v25 = &selRef_showsMenuAsPrimaryAction;
  id v26 = objc_msgSend(v5, sel_tabBarController, v65, v68);
  if (v26)
  {
    BOOL v27 = v26;
    type metadata accessor for UIKitTabBarController();
    uint64_t v28 = (void *)swift_dynamicCastClass();
    if (!v28) {
  }
    }
  else
  {
    uint64_t v28 = 0;
  }
  id v29 = v83;
  PlatformBarUpdater.callAsFunction(configurations:context:)(v22, v5, v28);
  swift_bridgeObjectRelease();

  outlined destroy of ToolbarPlacement.Role((uint64_t)v91);
  memset(v91, 0, 24);
  *(long long *)((char *)&v91[1] + 8) = xmmword_188382680;
  outlined init with copy of ToolbarPlacement.Role((uint64_t)v91, (uint64_t)&v96);
  uint64_t v30 = *(void *)v87;
  if (!*(void *)(*(void *)v87 + 16)) {
    goto LABEL_23;
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_23:
    v90[0] = *v20;
    goto LABEL_24;
  }
  uint64_t v33 = *(void *)(v30 + 56) + 80 * v31;
  char v34 = *(unsigned char *)v33;
  uint64_t v35 = *(void *)(v33 + 8);
  uint64_t v36 = *(void *)(v33 + 16);
  char v37 = *(unsigned char *)(v33 + 24);
  uint64_t v84 = *(void *)(v33 + 32);
  char v81 = *(unsigned char *)(v33 + 40);
  uint64_t v78 = *(void *)(v33 + 48);
  char v72 = *(unsigned char *)(v33 + 57);
  char v75 = *(unsigned char *)(v33 + 56);
  uint64_t v38 = *(void *)(v33 + 64);
  HIDWORD(v69) = *(unsigned __int8 *)(v33 + 72);
  char v71 = *(unsigned char *)(v33 + 58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v39 = *v20;
  v90[0] = *v20;
  if (v35 == 1)
  {
    uint64_t v24 = (uint64_t *)v87;
    uint64_t v25 = &selRef_showsMenuAsPrimaryAction;
LABEL_24:
    swift_bridgeObjectRetain();
    specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)&v96, (uint64_t)&v92);
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v96);
    LOBYTE(v69) = v95;
    uint64_t v66 = v94;
    outlined consume of ToolbarAppearanceConfiguration?(v92, v93);
    uint64_t v40 = v90[0];
    goto LABEL_25;
  }
  LOBYTE(v107) = v34;
  *((void *)&v107 + 1) = v35;
  uint64_t v108 = v36;
  char v109 = v37;
  uint64_t v110 = v84;
  char v111 = v81;
  uint64_t v112 = v78;
  char v113 = v75;
  char v114 = v72;
  char v115 = v71;
  uint64_t v116 = v38;
  char v117 = BYTE4(v69);
  swift_bridgeObjectRetain();
  char v63 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v92 = v39;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v107, (uint64_t)&v96, v63);
  uint64_t v40 = v92;
  v90[0] = v92;
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v96);
  uint64_t v24 = (uint64_t *)v87;
  uint64_t v25 = &selRef_showsMenuAsPrimaryAction;
LABEL_25:
  id v41 = objc_msgSend(v5, v25[298], v66, v69);
  if (v41)
  {
    uint64_t v42 = v41;
    type metadata accessor for UIKitTabBarController();
    uint64_t v43 = (void *)swift_dynamicCastClass();
    if (!v43) {
  }
    }
  else
  {
    uint64_t v43 = 0;
  }
  id v44 = v29;
  PlatformBarUpdater.callAsFunction(configurations:context:)(v40, v5, v43);
  swift_bridgeObjectRelease();

  outlined destroy of ToolbarPlacement.Role((uint64_t)v91);
  memset(v91, 0, 24);
  *(long long *)((char *)&v91[1] + 8) = xmmword_18835ED10;
  outlined init with copy of ToolbarPlacement.Role((uint64_t)v91, (uint64_t)v90);
  uint64_t v45 = *v24;
  if (!*(void *)(*v24 + 16)) {
    goto LABEL_34;
  }
  swift_bridgeObjectRetain();
  uint64_t v46 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v91);
  if ((v47 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_34:
    uint64_t v89 = *v20;
    goto LABEL_35;
  }
  uint64_t v48 = *(void *)(v45 + 56) + 80 * v46;
  char v49 = *(unsigned char *)v48;
  uint64_t v50 = *(void *)(v48 + 8);
  uint64_t v51 = *(void *)(v48 + 16);
  char v52 = *(unsigned char *)(v48 + 24);
  uint64_t v88 = *(void *)(v48 + 32);
  char v53 = *(unsigned char *)(v48 + 40);
  uint64_t v85 = *(void *)(v48 + 48);
  char v82 = *(unsigned char *)(v48 + 56);
  char v79 = *(unsigned char *)(v48 + 57);
  uint64_t v54 = *(void *)(v48 + 64);
  char v73 = *(unsigned char *)(v48 + 72);
  char v76 = *(unsigned char *)(v48 + 58);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v55 = *v20;
  uint64_t v89 = *v20;
  if (v50 != 1)
  {
    LOBYTE(v96) = v49;
    *((void *)&v96 + 1) = v50;
    uint64_t v97 = v51;
    char v98 = v52;
    uint64_t v99 = v88;
    char v100 = v53;
    uint64_t v101 = v85;
    char v102 = v82;
    char v103 = v79;
    char v104 = v76;
    uint64_t v105 = v54;
    char v106 = v73;
    swift_bridgeObjectRetain();
    char v64 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v92 = v55;
    specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v96, (uint64_t)v90, v64);
    uint64_t v56 = v92;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v90);
    uint64_t v25 = &selRef_showsMenuAsPrimaryAction;
    goto LABEL_36;
  }
  uint64_t v25 = &selRef_showsMenuAsPrimaryAction;
LABEL_35:
  swift_bridgeObjectRetain();
  specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v90, (uint64_t)&v92);
  outlined destroy of ToolbarPlacement.Role((uint64_t)v90);
  LOBYTE(v70) = v95;
  uint64_t v67 = v94;
  outlined consume of ToolbarAppearanceConfiguration?(v92, v93);
  uint64_t v56 = v89;
LABEL_36:
  id v57 = objc_msgSend(v5, v25[298], v67, v70);
  if (v57)
  {
    unint64_t v58 = v57;
    type metadata accessor for UIKitTabBarController();
    int v59 = (void *)swift_dynamicCastClass();
    if (!v59) {
  }
    }
  else
  {
    int v59 = 0;
  }
  id v60 = v44;
  PlatformBarUpdater.callAsFunction(configurations:context:)(v56, v5, v59);
  swift_bridgeObjectRelease();

  outlined destroy of ToolbarPlacement.Role((uint64_t)v91);
  uint64_t v2 = v86;
LABEL_41:
  uint64_t v61 = v2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v61, (uint64_t)v91);
  if (*(void *)&v91[0])
  {
    outlined init with take of BarAppearanceBridge.UpdateContext(v91, (uint64_t)&v92);
    closure #1 in BarAppearanceBridge.updateNavigationAppearances(navigationController:)((id *)&v92, v2);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v92);
    return 1;
  }
  else
  {
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v91, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t BarAppearanceBridge.updateBottomBarConfiguration()()
{
  uint64_t v1 = v0;
  uint64_t v2 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v2, (uint64_t)&v57);
  if (!v57)
  {
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v57, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return 0;
  }
  id v3 = v58;
  id v4 = v58;
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v57);
  if (!v3) {
    return 0;
  }
  id v5 = objc_msgSend(v4, sel_toolbar);
  if (!v5)
  {
LABEL_64:

    return 0;
  }
  uint64_t v6 = v5;
  uint64_t v7 = (uint64_t *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v8 = *v7;
  id v58 = 0;
  uint64_t v59 = 0;
  id v57 = 0;
  long long v60 = xmmword_188382680;
  if (!*(void *)(v8 + 16))
  {
LABEL_63:
    outlined destroy of ToolbarPlacement.Role((uint64_t)&v57);

    goto LABEL_64;
  }
  swift_bridgeObjectRetain();
  uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v57);
  if ((v10 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_63;
  }
  uint64_t v51 = v4;
  uint64_t v11 = *(void *)(v8 + 56) + 80 * v9;
  uint64_t v12 = *(void *)(v11 + 8);
  uint64_t v13 = *(void *)(v11 + 16);
  int v14 = *(unsigned __int8 *)(v11 + 24);
  int v15 = *(unsigned __int8 *)(v11 + 40);
  int v16 = *(unsigned __int8 *)(v11 + 56);
  int v17 = *(unsigned __int8 *)(v11 + 57);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v57);
  BOOL v18 = v12 == 0;
  int v19 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8);
  if (v14) {
    BOOL v18 = 0;
  }
  int v56 = v14;
  if (v14) {
    int v20 = v14;
  }
  else {
    int v20 = 3;
  }
  int v52 = v20;
  if (v13) {
    BOOL v21 = 0;
  }
  else {
    BOOL v21 = v17 == 2;
  }
  int v22 = v18 & v16 & v15 ^ 1;
  if (v21) {
    int v23 = v22;
  }
  else {
    int v23 = 1;
  }
  uint64_t v54 = *(void **)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
  swift_retain();
  char v53 = v19;
  swift_retain();
  uint64_t v24 = 0;
  int v55 = v23;
  do
  {
    uint64_t v25 = outlined read-only object #0 of BarAppearanceBridge.updateBottomBarConfiguration()[v24 + 32];
    id v26 = objc_msgSend(v6, *off_1E53B96F8[v25]);
    if (v26)
    {
      BOOL v27 = v26;
      swift_getObjectType();
      unsigned int v28 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

      if (!v28) {
        goto LABEL_21;
      }
    }
    uint64_t v29 = v25;
    if (v23)
    {
      int v30 = v56;
      switch(v29)
      {
        case 1:
        case 3:
          int v30 = v52;
          break;
        default:
          break;
      }
      id v31 = objc_allocWithZone(MEMORY[0x1E4FB1DF8]);
      swift_retain();
      swift_retain();
      swift_retain();
      id v32 = objc_msgSend(v31, sel_init);
      uint64_t v33 = v32;
      if (v30 == 1)
      {
        swift_retain();
        swift_retain();
        swift_retain();
        objc_msgSend(v33, sel_configureWithDefaultBackground);
        if (v13) {
          goto LABEL_35;
        }
      }
      else
      {
        if (v30 == 3)
        {
          objc_msgSend(v32, sel_configureWithTransparentBackground);
LABEL_56:
          objc_msgSend(v6, sel_setStandardAppearance_, v33, v43);
          switch(v29)
          {
            case 1:
              objc_msgSend(v6, sel_setScrollEdgeAppearance_, v33);
              break;
            case 2:
              objc_msgSend(v6, sel_setCompactAppearance_, v33);
              break;
            case 3:
              objc_msgSend(v6, sel_setCompactScrollEdgeAppearance_, v33);
              break;
            default:
              objc_msgSend(v6, sel_setStandardAppearance_, v33);
              break;
          }
          swift_release();
          swift_release();
          swift_release();

          int v23 = v55;
          goto LABEL_21;
        }
        swift_retain();
        swift_retain();
        swift_retain();
        if (v13)
        {
LABEL_35:
          swift_retain();
          ShapeStyle.resolveBackgroundMaterial(in:level:)();
          unsigned __int8 v34 = v58;
          if ((_BYTE)v58 == 0xFF)
          {
LABEL_39:
            id v57 = v54;
            id v58 = v53;
            if (ShapeStyle.fallbackColor(in:level:)())
            {
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
              uint64_t v37 = swift_retain();
              id v38 = UIColor.init(_:)(v37);
              objc_msgSend(v33, sel_setBackgroundColor_, v38);
              swift_release();
              swift_release();
              swift_release();

LABEL_55:
              swift_release_n();
              goto LABEL_56;
            }
          }
          else
          {
            uint64_t v35 = (uint64_t)v57;
            switch((char)v58)
            {
              case 1:
              case 2:
                goto LABEL_37;
              case 3:
                uint64_t v41 = 6;
                switch((unint64_t)v57)
                {
                  case 1uLL:
                    uint64_t v41 = 7;
                    break;
                  case 2uLL:
                    uint64_t v41 = 4;
                    break;
                  case 3uLL:
                  case 4uLL:
                    uint64_t v41 = 9;
                    break;
                  case 5uLL:
                    uint64_t v41 = 10;
                    break;
                  case 6uLL:
                    uint64_t v36 = 6;
                    goto LABEL_38;
                  case 7uLL:
                    uint64_t v36 = 7;
                    goto LABEL_38;
                  default:
                    break;
                }
                id v40 = objc_msgSend(self, sel_effectWithStyle_, v41);
                goto LABEL_53;
              default:
                uint64_t v43 = v57[3];
                uint64_t v44 = v57[2];
                uint64_t v39 = (void *)v57[6];
                uint64_t v47 = v57[5];
                uint64_t v48 = v57[4];
                id v46 = self;
                outlined copy of Material?(v35, v34);
                id v50 = v39;
                uint64_t v45 = (void *)MEMORY[0x18C115780](v44, v43);
                char v49 = (void *)MEMORY[0x18C115780](v48, v47);
                id v40 = objc_msgSend(v46, sel__effectForLightMaterial_darkMaterial_bundle_, v45, v49, v50);

                if (!v40)
                {
                  outlined consume of Material?(v35, v34);
LABEL_37:
                  uint64_t v36 = v35;
LABEL_38:
                  outlined consume of Material?(v36, v34);
                  goto LABEL_39;
                }

                outlined consume of Material?(v35, v34);
LABEL_53:
                objc_msgSend(v33, sel_setBackgroundEffect_, v40, v43);

                outlined consume of Material?(v35, v34);
                break;
            }
          }
          swift_release();
          swift_release();
          goto LABEL_55;
        }
      }
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_56;
    }
    switch((char)v25)
    {
      case 1:
        objc_msgSend(v6, sel_setScrollEdgeAppearance_, 0);
        break;
      case 2:
        objc_msgSend(v6, sel_setCompactAppearance_, 0);
        break;
      case 3:
        objc_msgSend(v6, sel_setCompactScrollEdgeAppearance_, 0);
        break;
      default:
        break;
    }
LABEL_21:
    ++v24;
  }
  while (v24 != 4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return 1;
}

uint64_t closure #1 in BarAppearanceBridge.updateNavigationBar(updating:preferences:)(void **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars);
  uint64_t v47 = 0;
  long long v45 = 0u;
  long long v46 = 0u;
  swift_bridgeObjectRetain();
  char v7 = specialized Set.contains(_:)((uint64_t)&v45, v6);
  swift_bridgeObjectRelease();
  uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)&v45);
  if ((v7 & 1) != 0 || *(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage + 16) == 1)
  {
    uint64_t v9 = a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
    swift_beginAccess();
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v9, (uint64_t)v41);
    if (!*(void *)v41) {
      goto LABEL_35;
    }
    outlined init with take of BarAppearanceBridge.UpdateContext((long long *)v41, (uint64_t)&v45);
    closure #1 in BarAppearanceBridge.updateNavigationStyle(_:)((id *)&v45, a3, a2);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45);
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v9, (uint64_t)v41);
    if (!*(void *)v41
      || (outlined init with take of BarAppearanceBridge.UpdateContext((long long *)v41, (uint64_t)&v45),
          closure #1 in BarAppearanceBridge.updateBackAction(_:)((id *)&v45, a3, a2),
          outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45),
          outlined init with copy of BarAppearanceBridge.UpdateContext?(v9, (uint64_t)v41),
          !*(void *)v41))
    {
LABEL_35:
      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)v41, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
      uint64_t result = _assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    outlined init with take of BarAppearanceBridge.UpdateContext((long long *)v41, (uint64_t)&v45);
    closure #1 in BarAppearanceBridge.updateSidebarToggle(_:)((uint64_t)&v45, a2, a3);
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45);
    char v10 = *a1;
    *(void *)uint64_t v41 = a3;
    PreferenceValues.subscript.getter();
    long long v37 = v45;
    uint64_t v11 = v47;
    long long v38 = v46;
    uint64_t v13 = v48;
    uint64_t v12 = v49;
    char v14 = v50;
    *(void *)uint64_t v41 = a3;
    PreferenceValues.subscript.getter();
    unsigned __int8 v15 = v45;
    outlined init with copy of BarAppearanceBridge.UpdateContext((uint64_t)a1, (uint64_t)&v45);
    uint64_t v36 = v11;
    if (v15)
    {
      BOOL v16 = 0;
    }
    else
    {
      id v17 = (id)v45;
      BOOL v16 = UIViewController.hasOrWillHaveBackItem(overrides:)((uint64_t)&v46);

      uint64_t v11 = v36;
    }
    outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v45);
    unsigned __int8 v40 = v15;
    *(_OWORD *)uint64_t v41 = v37;
    *(_OWORD *)&char v41[16] = v38;
    *(void *)&v41[32] = v11;
    uint64_t v42 = v13;
    uint64_t v43 = v12;
    char v44 = v14;
    if (*((void *)&v38 + 1) == 1) {
      uint64_t v11 = 1;
    }
    else {
      outlined copy of Transaction?(v11);
    }
    uint64_t v18 = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8);
    v39[0] = *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
    v39[1] = v18;
    swift_retain();
    swift_retain();
    int v19 = (void *)BarAppearanceBridge.uiContainingNavController.getter();
    specialized UIViewController.updateNavigationBar(item:title:transaction:environment:navController:showsBackItem:)(&v40, (uint64_t)v41, v39, v19, v16);

    outlined consume of Transaction?(v11);
    swift_release();
    swift_release();
    uint64_t v20 = a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage;
    *(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage + 1) = v15;
    static Semantics.v2.getter();
    if (isLinkedOnOrAfter(_:)())
    {
      id v21 = objc_msgSend(v10, sel_navigationItem);
      unsigned __int8 v22 = objc_msgSend(v21, sel_leftItemsSupplementBackButton);

      if ((v22 & 1) == 0)
      {
        id v23 = objc_msgSend(v10, sel_navigationItem);
        objc_msgSend(v23, sel_setLeftItemsSupplementBackButton_, 1);
      }
    }
    char v24 = UIViewController.hasNavigationBarContent(updateContext:)((uint64_t)a1);
    int v25 = *(unsigned __int8 *)(v20 + 2);
    if (v25 == 2) {
      char v26 = static SemanticFeature.isEnabled.getter() ^ 1;
    }
    else {
      char v26 = v25 & 1;
    }
    if ((v24 & 1) != (v26 & 1))
    {
      memset(v41, 0, sizeof(v41));
      BarAppearanceBridge.invalidate(bar:)((uint64_t)v41);
      outlined destroy of ToolbarPlacement.Role((uint64_t)v41);
    }
    id v27 = objc_msgSend(v10, sel_toolbarItems);
    if (v27)
    {
      unsigned int v28 = v27;
      type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIBarButtonItem);
      unint64_t v29 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      if (v29 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v30 = *(void *)((v29 & 0xFFFFFFFFFFFFFF8) + 0x10);
      }
      swift_bridgeObjectRelease();
      int v31 = *(unsigned __int8 *)(v20 + 3);
      if (v31 == 2)
      {
        if (v30)
        {
          BOOL v32 = 1;
LABEL_31:
          memset(v41, 0, 24);
          *(_OWORD *)&v41[24] = xmmword_188382680;
          BarAppearanceBridge.invalidate(bar:)((uint64_t)v41);
          outlined consume of NavigationTitleStorage?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v36);
          uint64_t result = outlined destroy of ToolbarPlacement.Role((uint64_t)v41);
          goto LABEL_32;
        }
        goto LABEL_27;
      }
      BOOL v34 = v30 != 0;
      BOOL v35 = v30 == 0;
      BOOL v32 = v30 != 0;
      if (((v35 ^ v31) & 1) == 0) {
        goto LABEL_31;
      }
    }
    else
    {
      int v33 = *(unsigned __int8 *)(v20 + 3);
      if (v33 == 2)
      {
LABEL_27:
        uint64_t result = outlined consume of NavigationTitleStorage?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v36);
        BOOL v32 = 0;
LABEL_32:
        *(unsigned char *)(v20 + 3) = v32;
        *(unsigned char *)(v20 + 2) = v24 & 1;
        return result;
      }
      BOOL v34 = 0;
      BOOL v32 = 0;
      if (v33) {
        goto LABEL_31;
      }
    }
    uint64_t result = outlined consume of NavigationTitleStorage?(v37, *((uint64_t *)&v37 + 1), v38, *((uint64_t *)&v38 + 1), v36);
    BOOL v32 = v34;
    goto LABEL_32;
  }
  return result;
}

uint64_t outlined destroy of BarAppearanceBridge.UpdateContext(uint64_t a1)
{
  return a1;
}

uint64_t destroy for BarAppearanceBridge.UpdateContext(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24) != 2) {
    swift_unknownObjectWeakDestroy();
  }
  swift_unknownObjectWeakDestroy();
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t outlined init with take of BarAppearanceBridge.UpdateContext(long long *a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithTake for BarAppearanceBridge.UpdateContext(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  id v4 = a2 + 1;
  *(_OWORD *)a1 = v5;
  uint64_t v6 = (_OWORD *)(a1 + 16);
  if (*((unsigned char *)a2 + 24) == 2)
  {
    *uint64_t v6 = *v4;
    *(_OWORD *)((char *)v6 + 9) = *(_OWORD *)((char *)v4 + 9);
  }
  else
  {
    swift_unknownObjectWeakTakeInit();
    *(unsigned char *)(a1 + 24) = *((unsigned char *)a2 + 24);
    *(void *)(a1 + 32) = *((void *)a2 + 4);
    *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  }
  swift_unknownObjectWeakTakeInit();
  swift_unknownObjectWeakTakeInit();
  *(unsigned char *)(a1 + 64) = *((unsigned char *)a2 + 64);
  *(_OWORD *)(a1 + 72) = *(long long *)((char *)a2 + 72);
  return a1;
}

uint64_t specialized UIViewController.updateNavigationBar(item:title:transaction:environment:navController:showsBackItem:)(unsigned __int8 *a1, uint64_t a2, uint64_t *a3, void *a4, int a5)
{
  uint64_t v6 = v5;
  int v66 = a5;
  uint64_t v11 = type metadata accessor for Locale();
  uint64_t v61 = *(void *)(v11 - 8);
  uint64_t v62 = v11;
  double v12 = MEMORY[0x1F4188790](v11);
  long long v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *a1;
  uint64_t v16 = *(void *)a2;
  uint64_t v15 = *(void *)(a2 + 8);
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v64 = *(void *)(a2 + 16);
  uint64_t v65 = v15;
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v67 = *(void *)(a2 + 40);
  uint64_t v68 = *(void *)(a2 + 48);
  uint64_t v69 = v18;
  int v63 = *(unsigned __int8 *)(a2 + 56);
  uint64_t v20 = *a3;
  uint64_t v19 = a3[1];
  id v21 = objc_msgSend(v6, sel_navigationItem, v12);
  objc_msgSend(v21, sel_setHidesBackButton_, v14);

  uint64_t v22 = 0;
  id v23 = 0;
  if (v17 == 1) {
    goto LABEL_7;
  }
  id v57 = v6;
  uint64_t v59 = v19;
  uint64_t v58 = v20;
  if (v17)
  {
    uint64_t v72 = v20;
    uint64_t v73 = v19;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    uint64_t v71 = 0;
    char v24 = v64;
    uint64_t v25 = v65;
    outlined copy of Text?(v16, v65, v64, v17);
    uint64_t v26 = v69;
    outlined copy of Transaction?(v69);
    swift_retain();
    char v70 = v24 & 1;
    uint64_t v22 = Text.resolveString(in:with:idiom:)();
    id v23 = v27;
    char v28 = v24;
    uint64_t v29 = v17;
    char v30 = v67;
    outlined consume of NavigationTitleStorage?(v16, v25, v28, v17, v26);
  }
  else
  {
    uint64_t v29 = 0;
    uint64_t v22 = 0;
    id v23 = 0;
    char v30 = v67;
  }
  LOBYTE(v31) = v30;
  BOOL v32 = v30 == 5;
  uint64_t v19 = v59;
  uint64_t v20 = v58;
  uint64_t v17 = v29;
  uint64_t v6 = v57;
  if (v32)
  {
LABEL_7:
    if (a4)
    {
      id v33 = a4;
      if (UINavigationController.managesWindowToolbar()())
      {
        id v57 = (void *)v16;
        type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WindowToolbarConfigurationKey>);
        lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.WindowToolbarConfigurationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.WindowToolbarConfigurationKey>);
        swift_retain_n();
        if (v19)
        {
          swift_retain_n();
          PropertyList.Tracker.value<A>(_:for:)();

          swift_release_n();
        }
        else
        {
          PropertyList.subscript.getter();
        }
        swift_release_n();
        LODWORD(v31) = v72;
        outlined consume of ToolbarLabelStyle.Data?(v73, v74, v75);
        uint64_t v16 = (uint64_t)v57;
        if (v31 != 5) {
          goto LABEL_21;
        }
      }
      else
      {
      }
    }
    if (v23) {
      uint64_t v31 = v22;
    }
    else {
      uint64_t v31 = 0;
    }
    uint64_t v34 = v16;
    if (v23) {
      unint64_t v35 = (unint64_t)v23;
    }
    else {
      unint64_t v35 = 0xE000000000000000;
    }
    swift_bridgeObjectRetain();
    UIViewController.defaultTitleMode(navController:title:showsBackItem:)((uint64_t)a4, v31, v35, v66 & 1, (char *)&v72);
    uint64_t v16 = v34;
    swift_bridgeObjectRelease();
    LOBYTE(v31) = v72;
  }
LABEL_21:
  id v36 = v6;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23ToolbarTitleDisplayModeV_s5NeverOytTB5024_sSo16UIViewControllerC7c117UIE19updateNavigationBar4item5title11transaction11environment03navB013showsBackItemAC0fG11UpdateFlagsVAC0fgO0V_AC0F12f81StorageVSgAC11TransactionVSgAC17EnvironmentValuesVSo012UINavigationB0CSgSbtFyAC07e3R11gH6VXEfU_So0lM0CTf1cn_nTf4ng_n(v31, v36);

  if (a4)
  {
    swift_getObjectType();
    char v37 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);
  }
  else
  {
    char v37 = 0;
  }
  char v38 = UIViewController.updateTitle(_:isFromSwiftUI:)(v22, v23, v37);
  swift_bridgeObjectRelease();
  uint64_t v72 = v20;
  uint64_t v73 = v19;
  if (EnvironmentValues.accessibilityEnabled.getter())
  {
    uint64_t v39 = &selRef_setObscuresBackgroundDuringPresentation_;
    if (v17 != 1)
    {
      char v41 = v64;
      uint64_t v40 = v65;
      outlined copy of Text?(v16, v65, v64, v17);
      outlined copy of Transaction?(v69);
      swift_retain();
      id v42 = objc_msgSend(v36, sel_navigationItem);
      uint64_t v59 = v19;
      if (v17)
      {
        uint64_t v43 = v16;
        char v44 = v41 & 1;
        uint64_t v72 = v20;
        uint64_t v73 = v19;
        uint64_t v76 = 0;
        uint64_t v77 = 0;
        outlined copy of Text.Storage(v43, v40, v41 & 1);
        swift_bridgeObjectRetain();
        LOBYTE(v71) = v41 & 1;
        char v45 = v41;
        uint64_t v46 = v40;
        uint64_t v47 = (void *)static AccessibilityCore.textResolvedToAttributedText(_:in:includeResolvableAttributes:includeDefaultAttributes:updateResolvableAttributes:resolveSuffix:idiom:)();
        uint64_t v48 = v43;
        char v49 = v44;
        uint64_t v16 = v43;
        uint64_t v39 = &selRef_setObscuresBackgroundDuringPresentation_;
        outlined consume of Text.Storage(v48, v46, v49);
        swift_bridgeObjectRelease();
      }
      else
      {
        char v45 = v41;
        uint64_t v46 = v40;
        uint64_t v47 = 0;
      }
      objc_msgSend(v42, sel_setAccessibilityAttributedLabel_, v47, v57);

      outlined consume of NavigationTitleStorage?(v16, v46, v45, v17, v69);
      uint64_t v19 = v59;
    }
    uint64_t v72 = v20;
    uint64_t v73 = v19;
    char v50 = v60;
    EnvironmentValues.locale.getter();
    uint64_t v51 = Locale.bcp47LanguageCode.getter();
    uint64_t v53 = v52;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v50, v62);
    id v54 = [v36 v39[273]];
    if (v53)
    {
      int v55 = (void *)MEMORY[0x18C115780](v51, v53);
      swift_bridgeObjectRelease();
    }
    else
    {
      int v55 = 0;
    }
    objc_msgSend(v54, sel_setAccessibilityLanguage_, v55, v57);
  }
  return v38 & 1;
}

BOOL _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI23ToolbarTitleDisplayModeV_s5NeverOytTB5024_sSo16UIViewControllerC7c117UIE19updateNavigationBar4item5title11transaction11environment03navB013showsBackItemAC0fG11UpdateFlagsVAC0fgO0V_AC0F12f81StorageVSgAC11TransactionVSgAC17EnvironmentValuesVSo012UINavigationB0CSgSbtFyAC07e3R11gH6VXEfU_So0lM0CTf1cn_nTf4ng_n(unsigned __int8 a1, id a2)
{
  int v2 = a1;
  if (a1 != 5)
  {
    id v4 = objc_msgSend(a2, sel_navigationItem);
    objc_msgSend(v4, sel_setLargeTitleDisplayMode_, qword_1883C8258[(char)a1]);
  }
  return v2 == 5;
}

uint64_t UIViewController.updateTitle(_:isFromSwiftUI:)(uint64_t a1, void *a2, char a3)
{
  id v4 = v3;
  id v8 = objc_msgSend(v4, sel_navigationItem);
  id v9 = objc_msgSend(v8, sel_title);

  if (v9)
  {
    uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    double v12 = v11;

    if (a2)
    {
      if (v10 != a1 || v12 != a2)
      {
        char v14 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        uint64_t result = 0;
        if (v14) {
          return result;
        }
        goto LABEL_12;
      }
      swift_bridgeObjectRelease();
      return 0;
    }
    swift_bridgeObjectRelease();
    if ((a3 & 1) == 0) {
      return 0;
    }
  }
  else if (!a2)
  {
    return 0;
  }
LABEL_12:
  id v16 = objc_msgSend(v4, sel_navigationItem);
  if (a2) {
    a2 = (void *)MEMORY[0x18C115780](a1, a2);
  }
  objc_msgSend(v16, sel_setTitle_, a2);

  return 1;
}

uint64_t BarAppearanceBridge.uiContainingNavController.getter()
{
  if (*(unsigned char *)(v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_platformStorage) != 1) {
    return 0;
  }
  uint64_t v1 = v0 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_updateContext;
  swift_beginAccess();
  outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v7);
  if (!v7)
  {
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v7, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
LABEL_6:
    outlined init with copy of BarAppearanceBridge.UpdateContext?(v1, (uint64_t)&v7);
    if (v7)
    {
      uint64_t v2 = (uint64_t)v8;
      id v3 = v8;
      outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v7);
      return v2;
    }
    outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v7, &lazy cache variable for type metadata for BarAppearanceBridge.UpdateContext?, (uint64_t)&type metadata for BarAppearanceBridge.UpdateContext);
    return 0;
  }
  outlined init with copy of HostingControllerOverrides((uint64_t)&v9, (uint64_t)v5);
  outlined destroy of BarAppearanceBridge.UpdateContext((uint64_t)&v7);
  uint64_t v2 = MEMORY[0x18C119DF0](&v6);
  outlined destroy of HostingControllerOverrides((uint64_t)v5);
  if (!v2) {
    goto LABEL_6;
  }
  return v2;
}

void closure #1 in BarAppearanceBridge.updateNavigationStyle(_:)(id *a1, uint64_t a2, uint64_t a3)
{
  if (static SemanticFeature.isEnabled.getter())
  {
    PreferenceValues.subscript.getter();
    if (*(void *)(a3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8))
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      swift_retain_n();
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      swift_retain_n();
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (v7 != 3)
    {
      id v6 = objc_msgSend(*a1, sel_navigationItem, a2);
      objc_msgSend(v6, sel_setStyle_, v7);
    }
  }
}

void closure #1 in BarAppearanceBridge.updateBackAction(_:)(id *a1, uint64_t a2, uint64_t a3)
{
  id v4 = *a1;
  id v17 = objc_msgSend(*a1, sel_navigationItem);
  id v5 = objc_msgSend(v17, sel_backAction);
  if (!v5
    || (id v6 = v5,
        swift_getObjectType(),
        unsigned __int8 v7 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI),
        v6,
        (v7 & 1) != 0))
  {
    PreferenceValues.subscript.getter();
    if (objc_msgSend(v17, sel_style) == (id)2)
    {
      id v8 = objc_msgSend(v17, sel_backAction);
      if (v8)
      {
      }
      else
      {
        id v10 = objc_msgSend(v4, sel_presentingViewController);
        if (v10)
        {

          if ((v18 & 1) == 0 && (objc_msgSend(v17, sel_hidesBackButton) & 1) == 0)
          {
            if (*(void *)(a3 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8))
            {
              type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              swift_retain_n();
              swift_retain_n();
              PropertyList.Tracker.value<A>(_:for:)();
              swift_release_n();
            }
            else
            {
              type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<PresentationModeKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<PresentationModeKey>);
              swift_retain_n();
              PropertyList.subscript.getter();
            }
            swift_release_n();
            type metadata accessor for UIKitAction();
            uint64_t v11 = swift_allocObject();
            *(void *)(v11 + 16) = v18;
            *(void *)(v11 + 24) = v19;
            *(unsigned char *)(v11 + 32) = v20;
            uint64_t v12 = 0;
            uint64_t v13 = 0;
            uint64_t v15 = partial apply for closure #1 in closure #1 in BarAppearanceBridge.updateBackAction(_:);
            uint64_t v16 = v11;
            uint64_t v14 = 0;
            uint64_t v9 = (void *)UIAction.init(title:subtitle:image:selectedImage:identifier:discoverabilityTitle:attributes:state:handler:)();
            goto LABEL_7;
          }
        }
      }
    }
    uint64_t v9 = 0;
LABEL_7:
    objc_msgSend(v17, sel_setBackAction_, v9, v12, v13, v14, v15, v16);

    return;
  }
}

void UIViewController.defaultTitleMode(navController:title:showsBackItem:)(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, char a4@<W3>, char *a5@<X8>)
{
  if (!a1
    || (swift_getObjectType(), objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI)))
  {
    if (static SemanticFeature.isEnabled.getter())
    {
      uint64_t v10 = HIBYTE(a3) & 0xF;
      if ((a3 & 0x2000000000000000) == 0) {
        uint64_t v10 = a2 & 0xFFFFFFFFFFFFLL;
      }
      if (!v10)
      {
        id v12 = objc_msgSend(v5, sel_navigationItem);
        char v13 = UINavigationItem.hasLargeContent.getter();

        if (a4)
        {
          if (v13)
          {
LABEL_12:
            char v11 = 0;
            goto LABEL_15;
          }
        }
        else if (v13)
        {
          goto LABEL_14;
        }
        char v11 = 3;
        goto LABEL_15;
      }
      if (a4) {
        goto LABEL_12;
      }
    }
LABEL_14:
    char v11 = 1;
    goto LABEL_15;
  }
  char v11 = 5;
LABEL_15:
  *a5 = v11;
}

Swift::Bool __swiftcall UINavigationController.managesWindowToolbar()()
{
  uint64_t v1 = [(UIViewController *)v0 view];
  if (!v1)
  {
    __break(1u);
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }
  uint64_t v2 = v1;
  id v3 = [(UIView *)v1 window];

  if (!v3) {
    goto LABEL_18;
  }
  uint64_t v1 = [(UIViewController *)v0 view];
  if (!v1) {
    goto LABEL_20;
  }
  id v4 = v1;
  uint64_t v1 = [(UIViewController *)v0 view];
  if (!v1)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  id v5 = v1;
  [(UIView *)v1 bounds];
  double v7 = v6;
  double v9 = v8;
  double v11 = v10;
  double v13 = v12;

  -[UIView convertRect:toCoordinateSpace:](v4, sel_convertRect_toCoordinateSpace_, v3, v7, v9, v11, v13);
  double v15 = v14;
  CGFloat v17 = v16;
  double v19 = v18;
  double v21 = v20;

  uint64_t v22 = [(UIViewController *)v0 splitViewController];
  if (!v22) {
    goto LABEL_12;
  }
  id v23 = v22;
  UISplitViewControllerColumn_optional v49 = UISplitViewController.column(forViewController:)(v0);
  if (!v49.is_nil && v49.value <= (unint64_t)UISplitViewControllerColumnSecondary)
  {
    uint64_t v1 = (UIView *)[(UISplitViewController *)v23 view];
    if (v1)
    {
      char v24 = v1;
      uint64_t v1 = (UIView *)[(UISplitViewController *)v23 view];
      if (v1)
      {
        uint64_t v25 = v1;
        [(UIView *)v1 bounds];
        double v27 = v26;
        double v29 = v28;
        double v31 = v30;
        double v33 = v32;

        uint64_t v34 = v3;
        -[UIView convertRect:toCoordinateSpace:](v24, sel_convertRect_toCoordinateSpace_, v34, v27, v29, v31, v33);
        double v15 = v35;
        CGFloat v17 = v36;
        double v19 = v37;
        double v21 = v38;

        goto LABEL_11;
      }
LABEL_23:
      __break(1u);
      return (char)v1;
    }
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
LABEL_11:

LABEL_12:
  if ((static SemanticFeature.isEnabled.getter() & 1) == 0)
  {
    [(UIWindow *)v3 bounds];
    double v45 = v44;
    double v47 = v46;

    if (vabdd_f64(v45, v19) < 0.1)
    {
      LOBYTE(v1) = vabdd_f64(v47, v21) < 0.1;
      return (char)v1;
    }
LABEL_18:
    LOBYTE(v1) = 0;
    return (char)v1;
  }
  [(UIWindow *)v3 bounds];
  double v40 = v39;
  v50.origin.CGFloat x = v15;
  v50.origin.CGFloat y = v17;
  v50.size.CGFloat width = v19;
  v50.size.CGFloat height = v21;
  BOOL v41 = vabdd_f64(v40, CGRectGetHeight(v50)) < 0.1;
  [(UIWindow *)v3 bounds];
  double v43 = v42;

  LOBYTE(v1) = vabdd_f64(v15, v43) < 0.1 && v41;
  return (char)v1;
}

uint64_t outlined consume of ToolbarLabelStyle.Data?(uint64_t a1, uint64_t a2, char a3)
{
  if ((~a2 & 0xF000000000000007) != 0 || a3 <= 0xFBu) {
    return outlined consume of ToolbarLabelStyle.Data(a1, a2, a3);
  }
  return a1;
}

uint64_t outlined assign with take of ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t assignWithTake for ToolbarAppearanceConfiguration(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  swift_release();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t closure #1 in BarAppearanceBridge.updateNavigationAppearances(navigationController:)(id *a1, uint64_t a2)
{
  id v4 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_barConfigurations);
  swift_beginAccess();
  uint64_t v5 = *v4;
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  if (!*(void *)(v5 + 16)) {
    return outlined destroy of ToolbarPlacement.Role((uint64_t)&v129);
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v129);
  if ((v7 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return outlined destroy of ToolbarPlacement.Role((uint64_t)&v129);
  }
  uint64_t v8 = *(void *)(v5 + 56) + 80 * v6;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v9 = *(void *)(v8 + 16);
  int v119 = *(unsigned __int8 *)(v8 + 24);
  int v125 = *(unsigned __int8 *)(v8 + 40);
  int v123 = *(unsigned __int8 *)(v8 + 56);
  int v11 = *(unsigned __int8 *)(v8 + 57);
  swift_retain();
  swift_retain();
  uint64_t v115 = v9;
  swift_retain();
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v129);
  id v120 = objc_msgSend(*a1, sel_navigationItem);
  double v12 = (uint64_t *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment);
  uint64_t v112 = v10;
  if (*(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastEnvironment + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    swift_retain();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarForegroundStyleKey>);
    swift_retain();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t v14 = v129;
  uint64_t v131 = 0;
  long long v129 = 0u;
  long long v130 = 0u;
  double v15 = v120;
  if (*(void *)(v14 + 16) && (uint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)&v129), (v17 & 1) != 0))
  {
    uint64_t v18 = *(void *)(*(void *)(v14 + 56) + 8 * v16);
    swift_retain();
  }
  else
  {
    uint64_t v18 = 0;
  }
  swift_bridgeObjectRelease();
  outlined destroy of ToolbarPlacement.Role((uint64_t)&v129);
  if (v10)
  {
    if (v18)
    {
      if (v10 == v18) {
        goto LABEL_19;
      }
      swift_retain();
      swift_retain();
      char v19 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
      swift_release();
      swift_release();
      if (v19) {
        goto LABEL_19;
      }
    }
    goto LABEL_18;
  }
  if (v18) {
LABEL_18:
  }
    *(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_pendingUpdates) |= 1uLL;
LABEL_19:
  char v20 = *(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 56);
  if (*(void *)(a2 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_lastNavigationTitleStorage + 24) == 1) {
    char v20 = 3;
  }
  char v118 = v20;
  uint64_t v21 = *v12;
  uint64_t v22 = v12[1];
  uint64_t v23 = v115;
  if (v115) {
    BOOL v24 = 0;
  }
  else {
    BOOL v24 = v11 == 2;
  }
  uint64_t v25 = v10;
  int v27 = !v24 || v10 != 0;
  if (v119) {
    int v28 = v119;
  }
  else {
    int v28 = 3;
  }
  int v111 = v28;
  if (v119) {
    int v29 = 1;
  }
  else {
    int v29 = v27;
  }
  char v117 = (void *)*MEMORY[0x1E4FB0700];
  if (v20 == 3) {
    int v30 = v29 | v123 & v125 ^ 1;
  }
  else {
    int v30 = 1;
  }
  uint64_t v122 = v21;
  swift_retain();
  uint64_t v121 = v22;
  swift_retain();
  uint64_t v31 = 0;
  int v116 = v30;
  do
  {
    uint64_t v33 = outlined read-only object #0 of closure #1 in BarAppearanceBridge.updateNavigationAppearances(navigationController:)[v31 + 32];
    id v34 = objc_msgSend(v15, *off_1E53B96F8[v33]);
    if (v34)
    {
      double v35 = v34;
      swift_getObjectType();
      unsigned int v36 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel__isFromSwiftUI);

      if (!v36) {
        goto LABEL_42;
      }
    }
    if (!v30)
    {
      switch((char)v33)
      {
        case 1:
          objc_msgSend(v15, sel_setScrollEdgeAppearance_, 0);
          break;
        case 2:
          objc_msgSend(v15, sel_setCompactAppearance_, 0);
          break;
        case 3:
          objc_msgSend(v15, sel_setCompactScrollEdgeAppearance_, 0);
          break;
        default:
          objc_msgSend(v15, sel_setStandardAppearance_, 0);
          break;
      }
      goto LABEL_42;
    }
    int v37 = v119;
    uint64_t v124 = v33;
    switch((char)v33)
    {
      case 1:
      case 3:
        int v37 = v111;
        break;
      default:
        break;
    }
    type metadata accessor for UIKitNavigationBarAppearance();
    id v38 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());
    swift_retain();
    swift_retain();
    swift_retain();
    id v39 = objc_msgSend(v38, sel_init);
    id v40 = objc_msgSend(v39, sel_copy);

    id v126 = v40;
    if (v37 == 1)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      objc_msgSend(v40, sel_configureWithDefaultBackground);
      if (v23) {
        goto LABEL_58;
      }
      goto LABEL_55;
    }
    if (v37 != 3)
    {
      swift_retain();
      swift_retain();
      swift_retain();
      if (v23)
      {
LABEL_58:
        *(void *)&long long v127 = v122;
        *((void *)&v127 + 1) = v121;
        swift_retain();
        ShapeStyle.resolveBackgroundMaterial(in:level:)();
        unsigned __int8 v41 = BYTE8(v129);
        if (BYTE8(v129) != 0xFF)
        {
          uint64_t v42 = v129;
          type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIBlurEffect);
          *(void *)&long long v129 = v42;
          BYTE8(v129) = v41;
          outlined copy of Material.ID(v42, v41);
          id v43 = UIBlurEffect.init(materialID:)((uint64_t)&v129);
          if (v43)
          {
            double v44 = v43;
            objc_msgSend(v40, sel_setBackgroundEffect_, v43);

            outlined consume of Material?(v42, v41);
            goto LABEL_68;
          }
          outlined consume of Material?(v42, v41);
        }
        *(void *)&long long v127 = v23;
        *(void *)&long long v129 = v122;
        *((void *)&v129 + 1) = v121;
        if (ShapeStyle.fallbackColor(in:level:)())
        {
          type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
          uint64_t v45 = swift_retain();
          id v46 = UIColor.init(_:)(v45);
          objc_msgSend(v40, sel_setBackgroundColor_, v46);
          swift_release();
          swift_release();
          swift_release();

          goto LABEL_69;
        }
LABEL_68:
        swift_release();
        swift_release();
LABEL_69:
        swift_release_n();
        if (!v25)
        {
LABEL_51:
          swift_retain();
          swift_retain();
          swift_retain();
LABEL_73:
          if (v118 == 2)
          {
            id v51 = objc_msgSend(self, sel_clearColor);
            uint64_t v52 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
            *((void *)&v130 + 1) = v52;
            *(void *)&long long v129 = v51;
            id v53 = v117;
            id v54 = v51;
            id v55 = objc_msgSend(v40, sel_titleTextAttributes);
            type metadata accessor for NSAttributedStringKey(0);
            lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
            uint64_t v56 = MEMORY[0x1E4FBC840] + 8;
            uint64_t v57 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            if (*((void *)&v130 + 1))
            {
              outlined init with take of Any(&v129, &v127);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v127, v53, isUniquelyReferenced_nonNull_native);

              swift_bridgeObjectRelease();
              uint64_t v59 = MEMORY[0x1E4FBC840];
            }
            else
            {
              outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, v56);
              swift_bridgeObjectRetain();
              unint64_t v97 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v53);
              char v99 = v98;
              swift_bridgeObjectRelease();
              if (v99)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  specialized _NativeDictionary.copy()();
                }

                outlined init with take of Any((_OWORD *)(*(void *)(v57 + 56) + 32 * v97), &v127);
                specialized _NativeDictionary._delete(at:)(v97, v57);
                swift_bridgeObjectRelease();
              }
              else
              {
                long long v127 = 0u;
                long long v128 = 0u;
              }

              uint64_t v59 = MEMORY[0x1E4FBC840];
              outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v127, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
            }
            uint64_t v100 = v59 + 8;
            Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v40, sel_setTitleTextAttributes_, isa);

            *((void *)&v130 + 1) = v52;
            *(void *)&long long v129 = v54;
            id v102 = v54;
            id v103 = v53;
            id v104 = objc_msgSend(v40, sel_largeTitleTextAttributes);
            uint64_t v105 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

            if (*((void *)&v130 + 1))
            {
              outlined init with take of Any(&v129, &v127);
              char v106 = swift_isUniquelyReferenced_nonNull_native();
              specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v127, v103, v106);

              swift_bridgeObjectRelease();
              uint64_t v23 = v115;
              double v15 = v120;
            }
            else
            {
              outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, v100);
              swift_bridgeObjectRetain();
              unint64_t v107 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v103);
              char v109 = v108;
              swift_bridgeObjectRelease();
              if (v109)
              {
                if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                  specialized _NativeDictionary.copy()();
                }

                outlined init with take of Any((_OWORD *)(*(void *)(v105 + 56) + 32 * v107), &v127);
                specialized _NativeDictionary._delete(at:)(v107, v105);
                swift_bridgeObjectRelease();
              }
              else
              {
                long long v127 = 0u;
                long long v128 = 0u;
              }
              uint64_t v23 = v115;
              double v15 = v120;

              outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v127, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
            }
            Class v110 = Dictionary._bridgeToObjectiveC()().super.isa;
            swift_bridgeObjectRelease();
            objc_msgSend(v40, sel_setLargeTitleTextAttributes_, v110);
            swift_release();
            swift_release();
            swift_release();

            int v30 = v116;
            switch(v124)
            {
              case 1:
                goto LABEL_113;
              case 2:
                goto LABEL_114;
              case 3:
                goto LABEL_115;
              default:
                goto LABEL_40;
            }
          }
          id v60 = v117;
          id v61 = objc_msgSend(v40, sel_titleTextAttributes);
          type metadata accessor for NSAttributedStringKey(0);
          lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
          uint64_t v62 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          swift_bridgeObjectRetain();
          unint64_t v63 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v60);
          char v65 = v64;
          swift_bridgeObjectRelease();
          if (v65)
          {
            char v66 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v127 = v62;
            if ((v66 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v62 = v127;
            }

            outlined init with take of Any((_OWORD *)(*(void *)(v62 + 56) + 32 * v63), &v129);
            specialized _NativeDictionary._delete(at:)(v63, v62);
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v129 = 0u;
            long long v130 = 0u;
          }

          outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
          Class v73 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v40, sel_setTitleTextAttributes_, v73);

          id v74 = v60;
          id v75 = objc_msgSend(v40, sel_largeTitleTextAttributes);
          uint64_t v76 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

          swift_bridgeObjectRetain();
          unint64_t v77 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v74);
          char v79 = v78;
          swift_bridgeObjectRelease();
          if (v79)
          {
            char v80 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v127 = v76;
            if ((v80 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v76 = v127;
            }

            outlined init with take of Any((_OWORD *)(*(void *)(v76 + 56) + 32 * v77), &v129);
            specialized _NativeDictionary._delete(at:)(v77, v76);
            swift_bridgeObjectRelease();
          }
          else
          {
            long long v129 = 0u;
            long long v130 = 0u;
          }
          double v15 = v120;

          outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
          Class v81 = Dictionary._bridgeToObjectiveC()().super.isa;
          swift_bridgeObjectRelease();
          objc_msgSend(v40, sel_setLargeTitleTextAttributes_, v81);
          swift_release();
          swift_release();
          swift_release();

          int v30 = v116;
          switch(v124)
          {
            case 1:
              goto LABEL_113;
            case 2:
              goto LABEL_114;
            case 3:
              goto LABEL_115;
            default:
              goto LABEL_40;
          }
        }
        goto LABEL_70;
      }
LABEL_55:
      swift_release();
      swift_release();
      swift_release();
      if (!v25) {
        goto LABEL_51;
      }
      goto LABEL_70;
    }
    objc_msgSend(v40, sel_configureWithTransparentBackground);
    if (!v25) {
      goto LABEL_51;
    }
LABEL_70:
    *(void *)&long long v127 = v25;
    *(void *)&long long v129 = v122;
    *((void *)&v129 + 1) = v121;
    swift_retain();
    swift_retain();
    swift_retain();
    if (!ShapeStyle.fallbackColor(in:level:)()) {
      goto LABEL_73;
    }
    uint64_t v47 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    uint64_t v48 = swift_retain();
    id v49 = UIColor.init(_:)(v48);
    char v114 = v49;
    if (v118 == 2) {
      id v50 = objc_msgSend(self, sel_clearColor);
    }
    else {
      id v50 = v49;
    }
    uint64_t v67 = v50;
    *((void *)&v130 + 1) = v47;
    *(void *)&long long v129 = v50;
    id v68 = v117;
    id v69 = v67;
    id v70 = objc_msgSend(v40, sel_titleTextAttributes);
    type metadata accessor for NSAttributedStringKey(0);
    lazy protocol witness table accessor for type NSAttributedStringKey and conformance NSAttributedStringKey();
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*((void *)&v130 + 1))
    {
      outlined init with take of Any(&v129, &v127);
      char v71 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v127, v68, v71);

      swift_bridgeObjectRelease();
      uint64_t v72 = MEMORY[0x1E4FBC840];
    }
    else
    {
      uint64_t v72 = MEMORY[0x1E4FBC840];
      uint64_t v82 = MEMORY[0x1E4FBC840] + 8;
      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8);
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v68, &v127);

      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v127, (unint64_t *)&lazy cache variable for type metadata for Any?, v82);
    }
    uint64_t v83 = v72 + 8;
    Class v84 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v126, sel_setTitleTextAttributes_, v84);

    *((void *)&v130 + 1) = v47;
    *(void *)&long long v129 = v69;
    id v113 = v69;
    id v85 = v68;
    id v86 = objc_msgSend(v126, sel_largeTitleTextAttributes);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*((void *)&v130 + 1))
    {
      outlined init with take of Any(&v129, &v127);
      char v87 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v127, v85, v87);

      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, v83);
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v85, &v127);

      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v127, (unint64_t *)&lazy cache variable for type metadata for Any?, v83);
    }
    uint64_t v88 = MEMORY[0x1E4FBC840] + 8;
    Class v89 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v126, sel_setLargeTitleTextAttributes_, v89);

    id v90 = objc_msgSend(v126, sel_backButtonAppearance);
    id v91 = objc_msgSend(v90, sel_normal);

    *((void *)&v130 + 1) = v47;
    *(void *)&long long v129 = v114;
    id v92 = v114;
    id v93 = v85;
    id v94 = objc_msgSend(v91, sel_titleTextAttributes);
    static Dictionary._unconditionallyBridgeFromObjectiveC(_:)();

    if (*((void *)&v130 + 1))
    {
      outlined init with take of Any(&v129, &v127);
      char v95 = swift_isUniquelyReferenced_nonNull_native();
      specialized _NativeDictionary.setValue(_:forKey:isUnique:)(&v127, v93, v95);

      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v129, (unint64_t *)&lazy cache variable for type metadata for Any?, v88);
      specialized Dictionary._Variant.removeValue(forKey:)((uint64_t)v93, &v127);

      outlined destroy of BarAppearanceBridge.UpdateContext?((uint64_t)&v127, (unint64_t *)&lazy cache variable for type metadata for Any?, v88);
    }
    uint64_t v25 = v112;
    Class v96 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v91, sel_setTitleTextAttributes_, v96);
    swift_release();
    uint64_t v23 = v115;
    swift_release();
    swift_release();

    swift_release();
    double v15 = v120;
    int v30 = v116;
    switch(v124)
    {
      case 1:
LABEL_113:
        double v32 = sel_setScrollEdgeAppearance_;
        break;
      case 2:
LABEL_114:
        double v32 = sel_setCompactAppearance_;
        break;
      case 3:
LABEL_115:
        double v32 = sel_setCompactScrollEdgeAppearance_;
        break;
      default:
LABEL_40:
        double v32 = sel_setStandardAppearance_;
        break;
    }
    objc_msgSend(v15, v32, v126);
    swift_release();
    swift_release();
    swift_release();

LABEL_42:
    ++v31;
  }
  while (v31 != 4);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release_n();

  return swift_release();
}

uint64_t BarAppearanceBridge.invalidate(bar:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_allowedBars);
  swift_bridgeObjectRetain();
  char v4 = specialized Set.contains(_:)(a1, v3);
  uint64_t result = swift_bridgeObjectRelease();
  if (v4)
  {
    outlined init with copy of ToolbarPlacement.Role(a1, (uint64_t)v9);
    uint64_t v6 = (uint64_t *)(v1 + OBJC_IVAR____TtC7SwiftUI19BarAppearanceBridge_toUpdateBars);
    swift_beginAccess();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v8 = *v6;
    *uint64_t v6 = 0x8000000000000000;
    specialized _NativeSet.update(with:isUnique:)((uint64_t)v9, isUniquelyReferenced_nonNull_native, (uint64_t)v10);
    *uint64_t v6 = v8;
    swift_bridgeObjectRelease();
    swift_endAccess();
    return outlined destroy of ToolbarPlacement.Role?((uint64_t)v10, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  }
  return result;
}

UISplitViewControllerColumn_optional __swiftcall UISplitViewController.column(forViewController:)(UIViewController *forViewController)
{
  if (objc_msgSend(v1, sel_style))
  {
    id v3 = objc_msgSend(v1, sel_viewControllerForColumn_, 0);
    if (v3)
    {
      char v4 = v3;
      self;
      uint64_t v5 = (UIViewController *)swift_dynamicCastObjCClass();

      if (v5 && v5 == forViewController)
      {
        UISplitViewControllerColumn v11 = UISplitViewControllerColumnPrimary;
        Swift::Bool v10 = 0;
        goto LABEL_25;
      }
    }
  }
  if (objc_msgSend(v1, sel_style)
    && (id v7 = objc_msgSend(v1, sel_viewControllerForColumn_, 2)) != 0
    && (v8 = v7, self, uint64_t v9 = (UIViewController *)swift_dynamicCastObjCClass(), v8, v9)
    && v9 == forViewController)
  {
    Swift::Bool v10 = 0;
    UISplitViewControllerColumn v11 = UISplitViewControllerColumnSecondary;
  }
  else
  {
    if (!objc_msgSend(v1, sel_style)
      || (id v12 = objc_msgSend(v1, sel_viewControllerForColumn_, 1)) == 0
      || (double v13 = v12, self, v14 = (UIViewController *)swift_dynamicCastObjCClass(), v13, !v14)
      || v14 != forViewController)
    {
      if (objc_msgSend(v1, sel_style))
      {
        id v15 = objc_msgSend(v1, sel_viewControllerForColumn_, 3);
        if (v15)
        {
          uint64_t v16 = v15;
          self;
          if (swift_dynamicCastObjCClass())
          {
            type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIViewController);
            char v17 = forViewController;
            id v18 = v16;
            char v19 = static NSObject.== infix(_:_:)();

            if (v19)
            {
              Swift::Bool v10 = 0;
              UISplitViewControllerColumn v11 = UISplitViewControllerColumnCompact;
              goto LABEL_25;
            }
          }
          else
          {
          }
        }
      }
      UISplitViewControllerColumn v11 = UISplitViewControllerColumnPrimary;
      Swift::Bool v10 = 1;
      goto LABEL_25;
    }
    Swift::Bool v10 = 0;
    UISplitViewControllerColumn v11 = UISplitViewControllerColumnSupplementary;
  }
LABEL_25:
  result.value = v11;
  result.is_nil = v10;
  return result;
}

double specialized Dictionary._Variant.removeValue(forKey:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    uint64_t v20 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v20;
    }
    outlined destroy of ToolbarPlacement.Role(*(void *)(v9 + 48) + 40 * v6);
    uint64_t v10 = *(void *)(v9 + 56) + 80 * v6;
    char v11 = *(unsigned char *)(v10 + 24);
    uint64_t v12 = *(void *)(v10 + 32);
    char v13 = *(unsigned char *)(v10 + 40);
    uint64_t v14 = *(void *)(v10 + 48);
    char v15 = *(unsigned char *)(v10 + 56);
    __int16 v16 = *(_WORD *)(v10 + 57);
    uint64_t v17 = *(void *)(v10 + 64);
    char v18 = *(unsigned char *)(v10 + 72);
    *(unsigned char *)a2 = *(unsigned char *)v10;
    *(_OWORD *)(a2 + 8) = *(_OWORD *)(v10 + 8);
    *(unsigned char *)(a2 + 24) = v11;
    *(void *)(a2 + 32) = v12;
    *(unsigned char *)(a2 + 40) = v13;
    *(void *)(a2 + 48) = v14;
    *(unsigned char *)(a2 + 56) = v15;
    *(_WORD *)(a2 + 57) = v16;
    *(void *)(a2 + 64) = v17;
    *(unsigned char *)(a2 + 72) = v18;
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)a2 = xmmword_18834BB90;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)(a2 + 57) = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  double result;
  uint64_t v11;
  uint64_t vars8;

  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    char v11 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v11;
    }
    outlined init with take of OptionalBinaryInteger((long long *)(*(void *)(v9 + 56) + 40 * v6), a2);
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
  }
  else
  {
    *(void *)(a2 + 32) = 0;
    double result = 0.0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
  return result;
}

{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v6;
  char v7;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  double result;
  uint64_t v15;

  id v3 = v2;
  swift_bridgeObjectRetain();
  unint64_t v6 = specialized __RawDictionaryStorage.find<A>(_:)(a1);
  LOBYTE(a1) = v7;
  swift_bridgeObjectRelease();
  if (a1)
  {
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v9 = *v3;
    char v15 = *v3;
    *id v3 = 0x8000000000000000;
    if (!isUniquelyReferenced_nonNull_native)
    {
      specialized _NativeDictionary.copy()();
      uint64_t v9 = v15;
    }
    outlined destroy of TableRowID(*(void *)(v9 + 48) + 48 * v6);
    uint64_t v10 = *(void *)(v9 + 56) + 56 * v6;
    char v11 = *(void *)(v10 + 16);
    uint64_t v12 = *(unsigned char *)(v10 + 24);
    char v13 = *(unsigned char *)(v10 + 48);
    *(_OWORD *)a2 = *(_OWORD *)v10;
    *(void *)(a2 + 16) = v11;
    *(unsigned char *)(a2 + 24) = v12;
    *(_OWORD *)(a2 + 32) = *(_OWORD *)(v10 + 32);
    *(unsigned char *)(a2 + 48) = v13;
    specialized _NativeDictionary._delete(at:)(v6, v9);
    *id v3 = v9;
    swift_bridgeObjectRelease();
    *(unsigned char *)(a2 + 49) = 0;
  }
  else
  {
    double result = 0.0;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_WORD *)(a2 + 48) = 256;
  }
  return result;
}

uint64_t assignWithCopy for NavigationAuthority(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t destructiveInjectEnumTag for ListStackBehavior(uint64_t result, int a2)
{
  if (a2)
  {
    *(void *)double result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)double result = a2 - 1;
    *(unsigned char *)(result + 9) = 1;
  }
  else
  {
    *(unsigned char *)(result + 9) = 0;
  }
  return result;
}

uint64_t type metadata accessor for RenderBoxLayer()
{
  return self;
}

uint64_t View.toolbar(_:for:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = 4;
  char v23 = 2;
  char v22 = 3;
  char v21 = 3;
  swift_bridgeObjectRetain();
  ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)(a1, 0, 0, v9, 0, 1, 0, 1, (uint64_t)v24, &v23, &v22, &v21, a2, 0);
  v9[0] = v24[0];
  uint64_t v10 = v25;
  uint64_t v11 = v26;
  char v12 = v27;
  uint64_t v13 = v28;
  char v14 = v29;
  uint64_t v15 = v30;
  char v16 = v31;
  __int16 v17 = v32;
  char v18 = v33;
  uint64_t v19 = v34;
  char v20 = v35;
  MEMORY[0x18C113660](v9, a3, &type metadata for ToolbarAppearanceModifier, a4);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t View.inspectorColumnWidth(min:ideal:max:)()
{
  return View._trait<A>(_:_:)();
}

uint64_t ToolbarAppearanceModifier.init(visibility:foregroundStyle:background:backgroundVisibility:backgroundVisibilityOnScrollDistance:backgroundOpacity:colorScheme:toolbarLegibility:fullScreenVisibility:bars:context:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X6>, char a8@<W7>, uint64_t a9@<X8>, char *a10, char *a11, char *a12, uint64_t a13, char a14)
{
  char v14 = a8;
  uint64_t v15 = a7;
  char v16 = a6;
  char v20 = a14;
  char v35 = *a11;
  char v36 = *a10;
  char v33 = *a4;
  char v34 = *a12;
  int64_t v21 = *(void *)(a13 + 16);
  if (v21)
  {
    uint64_t v45 = MEMORY[0x1E4FBC860];
    swift_retain();
    swift_retain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21, 0);
    uint64_t v22 = a13 + 32;
    do
    {
      outlined init with copy of ToolbarPlacement(v22, (uint64_t)v41);
      outlined init with copy of ToolbarPlacement.Storage((uint64_t)v41, (uint64_t)v39);
      if (v40 == 7)
      {
        uint64_t v44 = 0;
        long long v42 = 0u;
        long long v43 = 0u;
      }
      else
      {
        outlined destroy of ToolbarPlacement.Storage((uint64_t)v39);
        outlined init with copy of ToolbarPlacement((uint64_t)v41, (uint64_t)&v42);
      }
      outlined destroy of ToolbarPlacement((uint64_t)v41);
      uint64_t v23 = v45;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1);
        uint64_t v23 = v45;
      }
      unint64_t v25 = *(void *)(v23 + 16);
      unint64_t v24 = *(void *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1);
        uint64_t v23 = v45;
      }
      *(void *)(v23 + 16) = v25 + 1;
      uint64_t v26 = v23 + 40 * v25;
      long long v27 = v42;
      long long v28 = v43;
      *(void *)(v26 + 64) = v44;
      *(_OWORD *)(v26 + 32) = v27;
      *(_OWORD *)(v26 + 48) = v28;
      v22 += 40;
      --v21;
    }
    while (v21);
    swift_bridgeObjectRelease();
    char v14 = a8;
    uint64_t v15 = a7;
    char v16 = a6;
    char v20 = a14;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRelease();
    uint64_t v23 = MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  *(unsigned char *)a9 = a1;
  *(void *)(a9 + 8) = a2;
  *(void *)(a9 + 16) = a3;
  *(unsigned char *)(a9 + 24) = v33;
  *(void *)(a9 + 32) = a5;
  *(unsigned char *)(a9 + 40) = v16 & 1;
  *(void *)(a9 + 48) = v15;
  *(unsigned char *)(a9 + 56) = v14 & 1;
  *(unsigned char *)(a9 + 57) = v36;
  *(unsigned char *)(a9 + 58) = v35;
  *(unsigned char *)(a9 + 59) = v34;
  *(void *)(a9 + 64) = v23;
  *(unsigned char *)(a9 + 72) = v20;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

char *specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter()
{
  uint64_t v0 = *(char **)(AGGraphGetValue() + 64);
  unint64_t v1 = *((void *)v0 + 2);
  if (v1)
  {
    swift_bridgeObjectRetain();
  }
  else
  {
    memset(v16, 0, sizeof(v16));
    long long v17 = xmmword_188382690;
    outlined init with copy of ToolbarPlacement.Storage((uint64_t)v16, (uint64_t)v14);
    if ((void)v15 == 7)
    {
      uint64_t v20 = 0;
      long long v19 = 0u;
      long long v18 = 0u;
      swift_bridgeObjectRetain();
    }
    else
    {
      swift_bridgeObjectRetain();
      outlined destroy of ToolbarPlacement.Storage((uint64_t)v14);
      outlined init with copy of ToolbarPlacement((uint64_t)v16, (uint64_t)&v18);
    }
    outlined destroy of ToolbarPlacement((uint64_t)v16);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v0 + 2) + 1, 1, v0);
    }
    unint64_t v3 = *((void *)v0 + 2);
    unint64_t v2 = *((void *)v0 + 3);
    if (v3 >= v2 >> 1) {
      uint64_t v0 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v2 > 1), v3 + 1, 1, v0);
    }
    *((void *)v0 + 2) = v3 + 1;
    char v4 = &v0[40 * v3];
    long long v5 = v18;
    long long v6 = v19;
    *((void *)v4 + 8) = v20;
    *((_OWORD *)v4 + 2) = v5;
    *((_OWORD *)v4 + 3) = v6;
    unint64_t v1 = v3 + 1;
    if (v3 == -1)
    {
      swift_bridgeObjectRelease();
      return (char *)MEMORY[0x1E4FBC860];
    }
  }
  uint64_t v7 = (uint64_t)(v0 + 32);
  swift_bridgeObjectRetain();
  uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of ToolbarPlacement(v7, (uint64_t)&v18);
    outlined init with copy of ToolbarPlacement.Storage((uint64_t)&v18, (uint64_t)v12);
    if (v13 == 7)
    {
      outlined destroy of ToolbarPlacement.Storage((uint64_t)v12);
      memset(v14, 0, sizeof(v14));
      long long v15 = xmmword_188382690;
    }
    else
    {
      outlined init with take of ToolbarPlacement.Role((uint64_t)v12, (uint64_t)v16);
      outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v14);
    }
    outlined destroy of ToolbarPlacement((uint64_t)&v18);
    if ((void)v15 == 7)
    {
      _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v14, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    }
    else
    {
      outlined init with take of ToolbarPlacement.Role((uint64_t)v14, (uint64_t)v16);
      outlined init with take of ToolbarPlacement.Role((uint64_t)v16, (uint64_t)v14);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      unint64_t v10 = *((void *)v8 + 2);
      unint64_t v9 = *((void *)v8 + 3);
      if (v10 >= v9 >> 1) {
        uint64_t v8 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v9 > 1), v10 + 1, 1, v8);
      }
      *((void *)v8 + 2) = v10 + 1;
      outlined init with take of ToolbarPlacement.Role((uint64_t)v14, (uint64_t)&v8[40 * v10 + 32]);
    }
    v7 += 40;
    --v1;
  }
  while (v1);
  swift_bridgeObjectRelease_n();
  return v8;
}

uint64_t outlined destroy of ToolbarPlacement(uint64_t a1)
{
  return a1;
}

uint64_t destroy for ToolbarPlacement(uint64_t a1)
{
  if (*(void *)(a1 + 24) >= 8uLL) {
    return __swift_destroy_boxed_opaque_existential_1(a1);
  }
  return a1;
}

uint64_t outlined init with copy of ToolbarPlacement(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t initializeWithCopy for ToolbarPlacement(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  if (v3 >= 8)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v6;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v4;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t specialized static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPagingView>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<Switch>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationSplitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<NavigationStackRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSearchBarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSlider>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<TabItemGroup.HostView>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitStepper>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<TextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitTextViewAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<KitRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitPasteControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BridgedColorPicker>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitRichTextEditor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitToolbarAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<BridgedNavigationView>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<UIKitAdaptableTabView>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<SystemSegmentedControl>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<BackButtonActionableBar.KeyboardBackdropView>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<LinearUIKitProgressView.Base>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<PlatformTextFieldAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitDatePickerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitSegmentedControlAdaptor>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<UIKitCalendarViewRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<GenericViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t result;
  uint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  uint64_t v14;

  uint64_t v14 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = *(void *)(a1 + 48);
  int v13 = *(_DWORD *)(a1 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
    lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    uint64_t v5 = *(void *)a3;
    uint64_t v6 = *(unsigned int *)(a3 + 8);
    uint64_t v7 = *(unsigned int *)(a3 + 12);
    swift_bridgeObjectRetain();
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      unsigned int v8 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v11, (long long *)a1, v5, v6 | (v7 << 32), 0);
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v8, 0x100000000, a1);
    }
    swift_bridgeObjectRelease();
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>();
      lazy protocol witness table accessor for type PlatformViewIdentifiedViews<PlatformViewRepresentableAdaptor<KitRepresentable>> and conformance PlatformViewIdentifiedViews<A>(&lazy protocol witness table cache variable for type AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>> and conformance AccessibilityBridgedPlatformView<A>, (void (*)(uint64_t))type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewControllerRepresentableAdaptor<CustomizableURLDocumentViewControllerRepresentable>>);
      Attribute.init<A>(body:value:flags:update:)();
      AGGraphCreateOffsetAttribute2();
      AGGraphCreateOffsetAttribute2();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
      MEMORY[0x1F4188790](v10);
      outlined retain of [Text.Modifier]((uint64_t)&v12);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

uint64_t static AccessibilityPlatformViewModifier.makeAccessibilityPlatformTransform<A>(inputs:representable:outputs:)(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a1 + 48);
  _OWORD v30[2] = *(_OWORD *)(a1 + 32);
  long long v30[3] = v5;
  unsigned char v30[4] = *(_OWORD *)(a1 + 64);
  int v31 = *(_DWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 16);
  v30[0] = *(_OWORD *)a1;
  v30[1] = v6;
  unint64_t v28 = v5;
  int v29 = DWORD2(v5);
  unint64_t v26 = v5;
  int v27 = DWORD2(v5);
  uint64_t v7 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (v7)
  {
    LODWORD(v26) = a2;
    MEMORY[0x1F4188790](v7);
    uint64_t v23 = type metadata accessor for AccessibilityBridgedPlatformView();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(0, &lazy cache variable for type metadata for Attribute<AccessibilityPlatformViewModifier>, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v22, v23, MEMORY[0x1E4FBC248], v8, MEMORY[0x1E4FBC278], v9);
    _GraphValue.init(_:)();
    int v10 = v25;
    uint64_t v11 = *(void *)a3;
    uint64_t v12 = *(unsigned int *)(a3 + 8);
    uint64_t v13 = *(unsigned int *)(a3 + 12);
    unint64_t v26 = v28;
    int v27 = v29;
    swift_bridgeObjectRetain();
    char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (v14)
    {
      unsigned int v15 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v10, v30, v11, v12 | (v13 << 32), 0);
      LOBYTE(v26) = 1;
      specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v15, 0x100000000, (uint64_t)v30);
    }
    swift_bridgeObjectRelease();
    LOBYTE(v26) = (v14 & 1) == 0;
    return _ViewOutputs.subscript.setter();
  }
  else
  {
    unint64_t v26 = v28;
    int v27 = v29;
    uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    if (result)
    {
      LODWORD(v26) = a2;
      MEMORY[0x1F4188790](result);
      uint64_t v23 = type metadata accessor for AccessibilityBridgedPlatformView();
      uint64_t WitnessTable = swift_getWitnessTable();
      type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(0, &lazy cache variable for type metadata for Attribute<AccessibilityPlatformViewModifier>, MEMORY[0x1E4F4E740]);
      _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v26, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_22, (uint64_t)v22, v23, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
      unsigned int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
      unint64_t v26 = __PAIR64__(AGGraphCreateOffsetAttribute2(), OffsetAttribute2);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type AccessibilityPlatformViewModifier.PlatformViewAttachment and conformance AccessibilityPlatformViewModifier.PlatformViewAttachment();
      uint64_t v20 = Attribute.init<A>(body:value:flags:update:)();
      unint64_t v26 = v28;
      int v27 = v29;
      MEMORY[0x1F4188790](v20);
      LODWORD(v23) = v21;
      outlined retain of [Text.Modifier]((uint64_t)&v28);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      return swift_bridgeObjectRelease();
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>;
  if (!lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>)
  {
    type metadata accessor for _LazyLayoutViewCache<LazyFixedSizeHStackLayout>(255, &lazy cache variable for type metadata for PropertiesTransform<AccessibilityPlatformViewModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityPlatformViewModifier and conformance AccessibilityPlatformViewModifier, (uint64_t)&type metadata for AccessibilityPlatformViewModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PropertiesTransform);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PropertiesTransform<AccessibilityPlatformViewModifier> and conformance PropertiesTransform<A>);
  }
  return result;
}

uint64_t static MergePlatformItemsView._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t *a5@<X8>)
{
  int v27 = a5;
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v6 = *a1;
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 80);
  uint64_t v31 = a3;
  uint64_t v32 = a4;
  int v26 = v6;
  LODWORD(v33) = v6;
  type metadata accessor for MergePlatformItemsView();
  type metadata accessor for _GraphValue();
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v12 = *(void *)(a2 + 32);
  *(void *)&long long v13 = *(void *)(a2 + 56);
  uint64_t v14 = *(void *)(a2 + 64);
  long long v28 = v13;
  uint64_t v15 = *(void *)(a2 + 72);
  _GraphValue.subscript.getter();
  uint64_t v35 = v7;
  uint64_t v36 = v11;
  uint64_t v37 = v12;
  uint64_t v38 = v8;
  unint64_t v39 = v9;
  uint64_t v40 = v28;
  uint64_t v41 = v14;
  uint64_t v42 = v15;
  int v43 = v10;
  static View.makeDebuggableView(view:inputs:)();
  unint64_t v33 = v9;
  LODWORD(v34) = v28;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    unsigned int v17 = _GraphValue.value.getter();
    unint64_t v33 = v29;
    unint64_t v34 = v30;
    uint64_t v18 = _ViewOutputs.subscript.getter();
    unsigned int v19 = *MEMORY[0x1E4F4E7A0];
    if ((v18 & 0x100000000) == 0) {
      unsigned int v19 = v18;
    }
    unint64_t v33 = __PAIR64__(v19, v17);
    MEMORY[0x1F4188790](v18);
    uint64_t v24 = type metadata accessor for MergePlatformItemsView.Transform();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s7SwiftUI5ImageVAAE8ResolvedVSgMaTm_0(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v33, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v23, v24, MEMORY[0x1E4FBC248], v20, MEMORY[0x1E4FBC278], v21);
    LOBYTE(v33) = 0;
    uint64_t result = _ViewOutputs.subscript.setter();
  }
  uint64_t v22 = v27;
  *int v27 = v29;
  v22[1] = v30;
  return result;
}

uint64_t PlatformItemLabelView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v65 = a2;
  uint64_t v62 = a1[3];
  uint64_t v4 = type metadata accessor for ModifiedContent();
  uint64_t v63 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  id v61 = (char *)&v43 - v5;
  uint64_t v55 = a1[6];
  uint64_t v6 = v55;
  unint64_t v7 = lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier();
  uint64_t v74 = v6;
  unint64_t v75 = v7;
  uint64_t v64 = MEMORY[0x1E4F3FBC0];
  uint64_t v59 = v4;
  swift_getWitnessTable();
  uint64_t v56 = type metadata accessor for MergePlatformItemsView();
  uint64_t v60 = *(void *)(v56 - 8);
  MEMORY[0x1F4188790](v56);
  unint64_t v9 = (char *)&v43 - v8;
  uint64_t v10 = a1[5];
  uint64_t v70 = a1[2];
  uint64_t v71 = v11;
  uint64_t v47 = v70;
  uint64_t v72 = v10;
  Class v73 = &protocol witness table for MergePlatformItemsView<A>;
  uint64_t v48 = v10;
  uint64_t v49 = type metadata accessor for PlatformItemListGeneratingViewModifier();
  uint64_t v54 = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49);
  long long v13 = (char *)&v43 - v12;
  uint64_t v14 = a1[4];
  uint64_t v57 = a1[7];
  uint64_t v44 = v14;
  uint64_t v15 = type metadata accessor for MergePlatformItemsView();
  uint64_t v52 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  unsigned int v17 = (char *)&v43 - v16;
  uint64_t v50 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v45 = (char *)&v43 - v18;
  type metadata accessor for PlatformItemListTransformModifier();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v53 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  id v46 = (char *)&v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  id v51 = (char *)&v43 - v22;
  uint64_t v43 = v2;
  uint64_t v23 = View.mergePlatformItems()(v14, (uint64_t)v17);
  uint64_t v24 = v61;
  uint64_t v25 = v62;
  uint64_t v26 = v55;
  MEMORY[0x18C113660](v23, v62, &type metadata for PlatformItemListContentModifier, v55);
  int v27 = v9;
  uint64_t v28 = (uint64_t)v9;
  uint64_t v29 = v59;
  View.mergePlatformItems()(v59, v28);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v24, v29);
  unint64_t v30 = v13;
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v13, v27, v56);
  uint64_t v31 = v45;
  uint64_t v32 = v49;
  MEMORY[0x18C113660](v30, v15, v49, &protocol witness table for MergePlatformItemsView<A>);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v30, v32);
  (*(void (**)(char *, uint64_t))(v52 + 8))(v17, v15);
  uint64_t v33 = v47;
  unint64_t v34 = implicit closure #1 in PlatformItemLabelView.body.getter(v43, v47, v25, v44, v48, v26, v57);
  uint64_t v36 = v35;
  id v68 = &protocol witness table for MergePlatformItemsView<A>;
  id v69 = &protocol witness table for PlatformItemListGeneratingViewModifier<A, B>;
  uint64_t v37 = v50;
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v39 = v46;
  View.transformPlatformItemList<A>(_:_:)(WitnessTable, (uint64_t)v34, v36, v37, v33, WitnessTable);
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v31, v37);
  uint64_t v66 = WitnessTable;
  uint64_t v67 = &protocol witness table for PlatformItemListTransformModifier<A>;
  swift_getWitnessTable();
  uint64_t v40 = v51;
  static ViewBuilder.buildExpression<A>(_:)(v39);
  uint64_t v41 = *(void (**)(char *, uint64_t))(v53 + 8);
  v41(v39, v19);
  static ViewBuilder.buildExpression<A>(_:)(v40);
  return ((uint64_t (*)(char *, uint64_t))v41)(v40, v19);
}

uint64_t specialized AccessibilityViewGraph.modifyViewOutputs(outputs:inputs:graph:)(uint64_t a1, uint64_t *a2)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[2];
  uint64_t v5 = a2[3];
  int v19 = *((_DWORD *)a2 + 8);
  int v20 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  uint64_t v8 = a2[8];
  uint64_t v21 = a2[7];
  uint64_t v9 = a2[9];
  int v18 = *((_DWORD *)a2 + 20);
  unsigned int v10 = *((_DWORD *)a2 + 9) & 0xFFFFFF7F;
  uint64_t v11 = one-time initialization token for host;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v11 != -1) {
    swift_once();
  }
  type metadata accessor for External<AccessibilityContainerModifier>(0, &lazy cache variable for type metadata for External<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<AccessibilityContainerModifier> and conformance External<A>();
  swift_retain();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphValue.init(_:)();
  *(void *)&long long v24 = v3;
  DWORD2(v24) = v20;
  uint64_t v25 = v4;
  uint64_t v26 = v5;
  int v27 = v19;
  unsigned int v28 = v10;
  uint64_t v29 = v6;
  uint64_t v30 = v7;
  uint64_t v31 = v21;
  uint64_t v32 = v8;
  uint64_t v33 = v9;
  int v34 = v18;
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(unsigned int *)(a1 + 8);
  uint64_t v14 = *(unsigned int *)(a1 + 12);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    unsigned int v15 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v23, &v24, v12, v13 | (v14 << 32), 0);
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v15, 0x100000000, (uint64_t)&v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  _ViewOutputs.subscript.setter();
  _ViewOutputs.subscript.getter();
  uint64_t v16 = AGCreateWeakAttribute();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  *(void *)(v22 + 8) = v16;
  return result;
}

uint64_t initializeWithTake for Link(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32);
  uint64_t v7 = type metadata accessor for URL();
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + v6;
  uint64_t v11 = (v10 + a1) & ~(v9 | 7);
  uint64_t v12 = (v10 + a2) & ~(v9 | 7);
  LODWORD(v10) = *(_DWORD *)(v12 + 0x1F);
  long long v13 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v13;
  *(_DWORD *)(v11 + 31) = v10;
  unint64_t v14 = (v11 + 42) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v12 + 42) & 0xFFFFFFFFFFFFFFF8;
  LODWORD(v11) = *(_DWORD *)(v15 + 31);
  long long v16 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v16;
  *(_DWORD *)(v14 + 31) = v11;
  uint64_t v17 = (v9 + 35 + v14) & ~v9;
  uint64_t v18 = (v9 + 35 + v15) & ~v9;
  uint64_t v19 = v8 + 32;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 32))(v17, v18, v7);
  *(unsigned char *)(v17 + *(void *)(v19 + 32)) = *(unsigned char *)(v18 + *(void *)(v19 + 32));
  return a1;
}

unint64_t lazy protocol witness table accessor for type External<AccessibilityContainerModifier> and conformance External<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type External<AccessibilityContainerModifier> and conformance External<A>;
  if (!lazy protocol witness table cache variable for type External<AccessibilityContainerModifier> and conformance External<A>)
  {
    type metadata accessor for External<AccessibilityContainerModifier>(255, &lazy cache variable for type metadata for External<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, MEMORY[0x1E4F4E778]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type External<AccessibilityContainerModifier> and conformance External<A>);
  }
  return result;
}

uint64_t type metadata accessor for MergePlatformItemsView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with copy of ToolbarPlacement.Storage(uint64_t a1, uint64_t a2)
{
  return a2;
}

void *assignWithTake for MainMenuItemHost.RootView(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for MainMenuItem(0);
  uint64_t v6 = *(int *)(v5 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 10, v9);
  int v13 = v11(v8, 10, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    uint64_t v14 = type metadata accessor for MainMenuItem.Identifier(0);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 10, v9);
LABEL_7:
  *(void *)((char *)a1 + *(int *)(v5 + 24)) = *(void *)((char *)a2 + *(int *)(v5 + 24));
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t View.mergePlatformItems()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v4 + 16))(v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v4 + 32))(a2, v6, a1);
}

uint64_t View.inspector<A>(behavior:isPresented:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t (**a9)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v37 = a8;
  uint64_t v38 = a2;
  uint64_t v41 = a5;
  uint64_t v42 = a6;
  int v40 = a4;
  uint64_t v39 = a3;
  uint64_t v43 = a9;
  uint64_t v13 = *(void *)(a7 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  double v15 = MEMORY[0x1F4188790](a1);
  long long v16 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = *v17;
  uint64_t v35 = v17[1];
  uint64_t v36 = v18;
  HIDWORD(v34) = *((unsigned __int8 *)v17 + 16);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v11, v19, v15);
  unint64_t v20 = (*(unsigned __int8 *)(v13 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  unint64_t v21 = (v20 + v14 + 7) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v14 + 31) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v23 = (v20 + v14 + 55) & 0xFFFFFFFFFFFFFFF8;
  long long v24 = (char *)swift_allocObject();
  uint64_t v25 = v37;
  *((void *)v24 + 2) = a7;
  *((void *)v24 + 3) = v25;
  *((void *)v24 + 4) = a10;
  *((void *)v24 + 5) = a11;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v24[v20], v16, a7);
  uint64_t v26 = &v24[v21];
  uint64_t v27 = v39;
  *(void *)uint64_t v26 = v38;
  *((void *)v26 + 1) = v27;
  v26[16] = v40;
  unsigned int v28 = &v24[v22];
  uint64_t v29 = v35;
  *(void *)unsigned int v28 = v36;
  *((void *)v28 + 1) = v29;
  v28[16] = BYTE4(v34);
  uint64_t v30 = &v24[v23];
  uint64_t v31 = v42;
  *(void *)uint64_t v30 = v41;
  *((void *)v30 + 1) = v31;
  type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(255, &lazy cache variable for type metadata for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>, (uint64_t)&type metadata for InspectorStorage.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorage.PreferenceKey, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for IdentifiedPreferenceTransformModifier);
  type metadata accessor for ModifiedContent();
  uint64_t v44 = a10;
  uint64_t v45 = &protocol witness table for IdentifiedPreferenceTransformModifier<A>;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t result = swift_getWitnessTable();
  uint64_t v33 = v43;
  *uint64_t v43 = partial apply for closure #1 in View.inspector<A>(behavior:isPresented:content:);
  v33[1] = (uint64_t (*)@<X0>(uint64_t *@<X0>, uint64_t@<X8>))v24;
  return result;
}

uint64_t outlined init with copy of MainMenuItem(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for ToolbarPlacement.Storage(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 24);
  LODWORD(v4) = -1;
  if (v3 < 0xFFFFFFFF) {
    uint64_t v4 = *(void *)(a2 + 24);
  }
  if ((v4 + 1) <= 7 && v4 == -1)
  {
    uint64_t v6 = *(void *)(a2 + 32);
    *(void *)(a1 + 24) = v3;
    *(void *)(a1 + 32) = v6;
    (**(void (***)(uint64_t))(v3 - 8))(a1);
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
  }
  return a1;
}

uint64_t type metadata accessor for MergePlatformItemsView.Transform()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for AccessibilityBridgedPlatformView()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<AccessibilityPlatformViewModifier>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void, ValueMetadata *))
{
  if (!*a2)
  {
    unint64_t v4 = a3(0, &type metadata for AccessibilityPlatformViewModifier);
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t type metadata accessor for PlatformItemListGeneratingViewModifier()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier;
  if (!lazy protocol witness table cache variable for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemListContentModifier and conformance PlatformItemListContentModifier);
  }
  return result;
}

void (*implicit closure #1 in PlatformItemLabelView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(uint64_t *a1)
{
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = a2;
  uint64_t v24 = a3;
  uint64_t v25 = a4;
  uint64_t v26 = a5;
  uint64_t v27 = a6;
  uint64_t v28 = a7;
  uint64_t v12 = type metadata accessor for PlatformItemLabelView();
  uint64_t v13 = *(void *)(v12 - 8);
  double v14 = MEMORY[0x1F4188790](v12);
  long long v16 = (char *)&v21 - v15;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))((char *)&v21 - v15, a1, v12, v14);
  unint64_t v17 = (*(unsigned __int8 *)(v13 + 80) + 64) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  uint64_t v18 = (char *)swift_allocObject();
  *((void *)v18 + 2) = a2;
  *((void *)v18 + 3) = a3;
  *((void *)v18 + 4) = a4;
  *((void *)v18 + 5) = a5;
  uint64_t v19 = v22;
  *((void *)v18 + 6) = v21;
  *((void *)v18 + 7) = v19;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(&v18[v17], v16, v12);
  return partial apply for implicit closure #2 in implicit closure #1 in PlatformItemLabelView.body.getter;
}

uint64_t type metadata accessor for PlatformItemLabelView()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>()
{
  if (!lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>)
  {
    type metadata accessor for PlatformViewRepresentableAdaptor<UIKitPasteControl>(255, &lazy cache variable for type metadata for PlatformViewRepresentableAdaptor<CircularUIKitProgressView>, (uint64_t)&type metadata for CircularUIKitProgressView, (uint64_t)&protocol witness table for CircularUIKitProgressView, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformViewRepresentableAdaptor);
    lazy protocol witness table accessor for type PlatformViewRepresentableAdaptor<CircularUIKitProgressView> and conformance PlatformViewRepresentableAdaptor<A>();
    unint64_t v0 = type metadata accessor for AccessibilityBridgedPlatformView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityBridgedPlatformView<PlatformViewRepresentableAdaptor<CircularUIKitProgressView>>);
    }
  }
}

uint64_t assignWithCopy for NavigationLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 17);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v7 = *(unsigned __int8 *)(a2 + 17);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
      *(unsigned char *)(a1 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)a1 = *(unsigned char *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 17) = 0;
    }
    swift_retain();
  }
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 18 + a1) & ~v10;
  uint64_t v12 = (v10 + 18 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 40);
  uint64_t v14 = *(void *)(a3 + 24);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v17 = v13 + v16;
  uint64_t v18 = (char *)((v17 + v11) & ~v16);
  uint64_t v19 = (char *)((v17 + v12) & ~v16);
  unint64_t v20 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  LODWORD(v12) = v20(v18, 1, v14);
  int v21 = v20(v19, 1, v14);
  if (v12)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v18, v19, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v18, 0, 1, v14);
      goto LABEL_23;
    }
    int v22 = *(_DWORD *)(v15 + 84);
    size_t v23 = *(void *)(v15 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v18, v19, v14);
      goto LABEL_23;
    }
    (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
    int v22 = *(_DWORD *)(v15 + 84);
    size_t v23 = *(void *)(v15 + 64);
  }
  if (v22) {
    size_t v24 = v23;
  }
  else {
    size_t v24 = v23 + 1;
  }
  memcpy(v18, v19, v24);
LABEL_23:
  if (*(_DWORD *)(v15 + 84)) {
    uint64_t v25 = *(void *)(v15 + 64);
  }
  else {
    uint64_t v25 = *(void *)(v15 + 64) + 1;
  }
  unint64_t v26 = (unint64_t)&v18[v25];
  unint64_t v27 = (unint64_t)&v19[v25];
  *(unsigned char *)unint64_t v26 = *(unsigned char *)v27;
  unint64_t v28 = v26 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v29 = v27 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v26 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v27 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v28 + 16) = *(unsigned char *)(v29 + 16);
  *(_DWORD *)(v28 + 24) = *(_DWORD *)(v29 + 24);
  *(void *)(v28 + 32) = *(void *)(v29 + 32);
  swift_retain();
  swift_release();
  unint64_t v30 = (v28 + 47) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v31 = (v29 + 47) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v30 = *(unsigned char *)v31;
  *(void *)(v30 + 8) = *(void *)(v31 + 8);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithCopy for BoundInputsView(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  unint64_t v4 = *(void **)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v4;
  id v6 = v4;

  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a2 + 68);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

void storeEnumTagSinglePayload for Link(unsigned char *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v29 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  uint64_t v10 = *(void *)(type metadata accessor for URL() - 8);
  unsigned int v11 = *(_DWORD *)(v10 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  if (v11 <= 0xFE) {
    unsigned int v13 = 254;
  }
  else {
    unsigned int v13 = *(_DWORD *)(v10 + 84);
  }
  if (v13 <= v9) {
    unsigned int v14 = v9;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = (v12 | 7) + *(void *)(v8 + 64);
  size_t v16 = *(void *)(v10 + 64) + ((v12 + 75) & ~v12) + 1;
  size_t v17 = (v15 & ~(v12 | 7)) + v16;
  if (a3 <= v14)
  {
    int v18 = 0;
  }
  else if (v17 <= 3)
  {
    unsigned int v21 = ((a3 - v14 + ~(-1 << (8 * v17))) >> (8 * v17)) + 1;
    if (HIWORD(v21))
    {
      int v18 = 4;
    }
    else if (v21 >= 0x100)
    {
      int v18 = 2;
    }
    else
    {
      int v18 = v21 > 1;
    }
  }
  else
  {
    int v18 = 1;
  }
  if (v14 >= a2)
  {
    switch(v18)
    {
      case 1:
        a1[v17] = 0;
        if (a2) {
          goto LABEL_27;
        }
        break;
      case 2:
        *(_WORD *)&a1[v17] = 0;
        if (a2) {
          goto LABEL_27;
        }
        break;
      case 3:
LABEL_61:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)&a1[v17] = 0;
        goto LABEL_26;
      default:
LABEL_26:
        if (a2)
        {
LABEL_27:
          if (v9 >= v13)
          {
            unint64_t v27 = *(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(v29 + 56);
            v27(a1, a2, v9, v7);
          }
          else
          {
            size_t v23 = (unsigned char *)((unint64_t)&a1[v15] & ~(v12 | 7));
            if (v13 >= a2)
            {
              if (v11 > 0xFE)
              {
                unint64_t v28 = *(void (**)(unint64_t, uint64_t))(v10 + 56);
                v28((v12 + ((unint64_t)(v23 + 42) & 0xFFFFFFFFFFFFFFF8) + 35) & ~v12, a2);
              }
              else if (a2 > 0xFE)
              {
                *((void *)v23 + 2) = 0;
                *((void *)v23 + 3) = 0;
                v23[34] = 0;
                *((_WORD *)v23 + 16) = 0;
                *(void *)size_t v23 = (a2 - 255);
                *((void *)v23 + 1) = 0;
              }
              else
              {
                v23[34] = -(char)a2;
              }
            }
            else
            {
              if (v16 <= 3) {
                int v24 = ~(-1 << (8 * v16));
              }
              else {
                int v24 = -1;
              }
              if (v16)
              {
                int v25 = v24 & (~v13 + a2);
                if (v16 <= 3) {
                  int v26 = v16;
                }
                else {
                  int v26 = 4;
                }
                bzero(v23, v16);
                switch(v26)
                {
                  case 2:
                    *(_WORD *)size_t v23 = v25;
                    break;
                  case 3:
                    *(_WORD *)size_t v23 = v25;
                    v23[2] = BYTE2(v25);
                    break;
                  case 4:
                    *(_DWORD *)size_t v23 = v25;
                    break;
                  default:
                    *size_t v23 = v25;
                    break;
                }
              }
            }
          }
        }
        break;
    }
  }
  else
  {
    unsigned int v19 = ~v14 + a2;
    if (v17 < 4)
    {
      int v20 = (v19 >> (8 * v17)) + 1;
      if (v17)
      {
        int v22 = v19 & ~(-1 << (8 * v17));
        bzero(a1, v17);
        if (v17 == 3)
        {
          *(_WORD *)a1 = v22;
          a1[2] = BYTE2(v22);
        }
        else if (v17 == 2)
        {
          *(_WORD *)a1 = v22;
        }
        else
        {
          *a1 = v22;
        }
      }
    }
    else
    {
      bzero(a1, (v15 & ~(v12 | 7)) + v16);
      *(_DWORD *)a1 = v19;
      int v20 = 1;
    }
    switch(v18)
    {
      case 1:
        a1[v17] = v20;
        break;
      case 2:
        *(_WORD *)&a1[v17] = v20;
        break;
      case 3:
        goto LABEL_61;
      case 4:
        *(_DWORD *)&a1[v17] = v20;
        break;
      default:
        return;
    }
  }
}

uint64_t FocusedValues.inspectorPresented.setter(uint64_t result, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = result;
    char v5 = *(unsigned char *)(v2 + 8);
    outlined copy of Binding<NavigationSplitViewColumn>?(result, a2);
    if ((v5 & 2) != 0)
    {
      uint64_t v7 = one-time initialization token for scene;
      swift_retain();
      swift_retain();
      if (v7 == -1)
      {
LABEL_6:
        swift_bridgeObjectRetain();
        type metadata accessor for IdentifiedPreferenceTransformModifier<InspectorStorage.PreferenceKey>(0, &lazy cache variable for type metadata for FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented>, (uint64_t)&type metadata for FocusedValues.__Key_inspectorPresented, (uint64_t)&protocol witness table for FocusedValues.__Key_inspectorPresented, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for FocusedValuePropertyKey);
        lazy protocol witness table accessor for type FocusedValuePropertyKey<FocusedValues.__Key_inspectorPresented> and conformance FocusedValuePropertyKey<A>();
        swift_retain();
        swift_retain();
        PropertyList.subscript.setter();
        outlined consume of Binding<NavigationSplitViewColumn>?(v4, a2);
        swift_release();
        swift_release();
        return outlined consume of Binding<NavigationSplitViewColumn>?(v4, a2);
      }
    }
    else
    {
      uint64_t v6 = one-time initialization token for view;
      swift_retain();
      swift_retain();
      if (v6 == -1) {
        goto LABEL_6;
      }
    }
    swift_once();
    goto LABEL_6;
  }
  return result;
}

uint64_t outlined destroy of ToolbarPlacement.Storage(uint64_t a1)
{
  return a1;
}

uint64_t key path getter for FocusedValues.inspectorPresented : FocusedValues@<X0>(uint64_t a1@<X8>)
{
  swift_retain();
  uint64_t v2 = specialized FocusedValues.subscript.getter();
  uint64_t v4 = v3;
  char v6 = v5;
  uint64_t result = swift_release();
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v6;
  return result;
}

uint64_t FocusedValues.inspectorPresented.getter()
{
  swift_retain();
  uint64_t v0 = specialized FocusedValues.subscript.getter();
  swift_release();
  return v0;
}

uint64_t specialized StackPlacement.place(subviews:from:position:stopping:style:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, double a5)
{
  uint64_t v6 = v5;
  char v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 56), *(double *)(v6 + 64));
  uint64_t result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  uint64_t v13 = *(void *)(v6 + 96);
  uint64_t v14 = *(void *)(v6 + 32);
  BOOL v15 = __OFSUB__(v13, v14);
  uint64_t v16 = v13 - v14;
  if (v16 < 0 == v15)
  {
    *(unsigned char *)(v6 + 104) = 1;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)(v6 + 96) = v16;
    uint64_t v13 = v16;
  }
  uint64_t v21 = v13;
  MEMORY[0x1F4188790](result);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v17 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v19);
  MEMORY[0x1F4188790](v17);
  swift_bridgeObjectRetain();
  char v18 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v19);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v18 & 1) != 0 && vabdd_f64(*(double *)(v6 + 112), *(double *)(v6 + 280)) < 0.01;
}

{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned char v19[88];
  uint64_t v20;
  uint64_t v21;

  uint64_t v6 = v5;
  char v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 56), *(double *)(v6 + 64));
  uint64_t result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  uint64_t v13 = *(void *)(v6 + 96);
  uint64_t v14 = *(void *)(v6 + 32);
  BOOL v15 = __OFSUB__(v13, v14);
  uint64_t v16 = v13 - v14;
  if (v16 < 0 == v15)
  {
    *(unsigned char *)(v6 + 104) = 1;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)(v6 + 96) = v16;
    uint64_t v13 = v16;
  }
  uint64_t v21 = v13;
  MEMORY[0x1F4188790](result);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v17 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v19);
  MEMORY[0x1F4188790](v17);
  swift_bridgeObjectRetain();
  char v18 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v19);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v18 & 1) != 0 && vabdd_f64(*(double *)(v6 + 112), *(double *)(v6 + 280)) < 0.01;
}

{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned char v19[88];
  uint64_t v20;
  uint64_t v21;

  uint64_t v6 = v5;
  char v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 64), *(double *)(v6 + 72));
  uint64_t result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  uint64_t v13 = *(void *)(v6 + 104);
  uint64_t v14 = *(void *)(v6 + 40);
  BOOL v15 = __OFSUB__(v13, v14);
  uint64_t v16 = v13 - v14;
  if (v16 < 0 == v15)
  {
    *(unsigned char *)(v6 + 112) = 1;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)(v6 + 104) = v16;
    uint64_t v13 = v16;
  }
  uint64_t v21 = v13;
  MEMORY[0x1F4188790](result);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v17 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v19);
  MEMORY[0x1F4188790](v17);
  swift_bridgeObjectRetain();
  char v18 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v19);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v18 & 1) != 0 && vabdd_f64(*(double *)(v6 + 120), *(double *)(v6 + 288)) < 0.01;
}

{
  uint64_t v5;
  uint64_t v6;
  char v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unsigned char v19[88];
  uint64_t v20;
  uint64_t v21;

  uint64_t v6 = v5;
  char v11 = a4 & 1;
  specialized StackPlacement.log(_:)(v6, a2, a5, *(double *)(v6 + 64), *(double *)(v6 + 72));
  uint64_t result = specialized StackPlacement.reset(index:position:stoppingCondition:skipFirst:)(a2, a3, v11, 0, a5);
  uint64_t v13 = *(void *)(v6 + 104);
  uint64_t v14 = *(void *)(v6 + 40);
  BOOL v15 = __OFSUB__(v13, v14);
  uint64_t v16 = v13 - v14;
  if (v16 < 0 == v15)
  {
    *(unsigned char *)(v6 + 112) = 1;
    if (v15)
    {
      __break(1u);
      return result;
    }
    *(void *)(v6 + 104) = v16;
    uint64_t v13 = v16;
  }
  uint64_t v21 = v13;
  MEMORY[0x1F4188790](result);
  uint64_t v20 = *(void *)(a1 + 104);
  uint64_t v17 = outlined init with copy of _ViewList_Node(a1 + 16, (uint64_t)v19);
  MEMORY[0x1F4188790](v17);
  swift_bridgeObjectRetain();
  char v18 = _ViewList_Node.applyNodes(from:style:transform:to:)();
  outlined destroy of _ViewList_Node((uint64_t)v19);
  swift_bridgeObjectRelease();
  specialized StackPlacement.flushMinorGroup()();
  return (v18 & 1) != 0 && vabdd_f64(*(double *)(v6 + 120), *(double *)(v6 + 288)) < 0.01;
}

void specialized StackPlacement.flushMinorGroup()()
{
  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 136);
  if (!*(void *)(*(void *)(v0 + 136) + 16)) {
    return;
  }
  if (*(unsigned char *)(v0 + 104))
  {
    *(unsigned char *)(v0 + 104) = 0;
LABEL_13:
    uint64_t v16 = *(void *)(v1 + 32);
    uint64_t v17 = *(void *)(v1 + 96);
    BOOL v18 = __OFADD__(v17, v16);
    uint64_t v19 = v17 + v16;
    if (v18)
    {
      __break(1u);
      return;
    }
    *(void *)(v1 + 96) = v19;
    uint64_t v3 = (uint64_t *)(v1 + 144);
    goto LABEL_15;
  }
  uint64_t v3 = (uint64_t *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v5, v4);
  uint64_t v7 = v6;
  double v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4) {
    uint64_t v10 = *(void *)&v9;
  }
  else {
    uint64_t v10 = 0;
  }
  EstimationCache.add(length:spacing:count:)(v10, v4 == 0, 1, *(double *)&v7);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) == 0)
  {
    *(double *)(v0 + 112) = v9 + *(double *)(v0 + 112);
    if (specialized StackPlacement.isVisible(length:)(*(double *)&v7))
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(*(double *)&v7, v9);
      specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E4F40430], 0, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
      uint64_t v11 = *(void *)v0;
      uint64_t v12 = *(void *)(v1 + 8);
      unsigned __int8 v13 = *(unsigned char *)(v1 + 16);
      uint64_t v14 = *(unsigned int *)(v1 + 20);
      uint64_t v15 = swift_bridgeObjectRetain();
      specialized LazyHVStack<>.place(subviews:length:minorGeometry:emit:)(v15, v7, 0, v11, v12, v13 | (unint64_t)(v14 << 32), v1);
      swift_bridgeObjectRelease();
    }
    *(double *)(v1 + 112) = *(double *)&v7 + *(double *)(v1 + 112);
    goto LABEL_13;
  }
  *(unsigned char *)(v0 + 304) = 1;
LABEL_15:

  swapSubviews(_:_:)(v3, v2);
}

{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double v8;
  double v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned __int8 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t vars8;

  uint64_t v1 = v0;
  uint64_t v2 = (uint64_t *)(v0 + 136);
  if (!*(void *)(*(void *)(v0 + 136) + 16)) {
    return;
  }
  if (*(unsigned char *)(v0 + 104))
  {
    *(unsigned char *)(v0 + 104) = 0;
LABEL_13:
    uint64_t v16 = *(void *)(v1 + 32);
    uint64_t v17 = *(void *)(v1 + 96);
    BOOL v18 = __OFADD__(v17, v16);
    uint64_t v19 = v17 + v16;
    if (v18)
    {
      __break(1u);
      return;
    }
    *(void *)(v1 + 96) = v19;
    uint64_t v3 = (uint64_t *)(v1 + 144);
    goto LABEL_15;
  }
  uint64_t v3 = (uint64_t *)(v0 + 144);
  uint64_t v4 = *(void *)(v0 + 144);
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v5, v4);
  uint64_t v7 = v6;
  double v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v4) {
    uint64_t v10 = *(void *)&v9;
  }
  else {
    uint64_t v10 = 0;
  }
  EstimationCache.add(length:spacing:count:)(v10, v4 == 0, 1, *(double *)&v7);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) == 0)
  {
    *(double *)(v0 + 112) = v9 + *(double *)(v0 + 112);
    if (specialized StackPlacement.isVisible(length:)(*(double *)&v7))
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(*(double *)&v7, v9);
      specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E4F401B8], 1, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
      uint64_t v11 = *(void *)v0;
      uint64_t v12 = *(void *)(v1 + 8);
      unsigned __int8 v13 = *(unsigned char *)(v1 + 16);
      uint64_t v14 = *(unsigned int *)(v1 + 20);
      uint64_t v15 = swift_bridgeObjectRetain();
      specialized LazyHVStack<>.place(subviews:length:minorGeometry:emit:)(v15, v7, 0, v11, v12, v13 | (unint64_t)(v14 << 32), v1);
      swift_bridgeObjectRelease();
    }
    *(double *)(v1 + 112) = *(double *)&v7 + *(double *)(v1 + 112);
    goto LABEL_13;
  }
  *(unsigned char *)(v0 + 304) = 1;
LABEL_15:

  swapSubviews(_:_:)(v3, v2);
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t vars8;

  if (!*(void *)(*(void *)(v0 + 144) + 16)) {
    return;
  }
  if (*(unsigned char *)(v0 + 112))
  {
    *(unsigned char *)(v0 + 112) = 0;
LABEL_13:
    uint64_t v15 = *(void *)(v0 + 40);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = __OFADD__(v16, v15);
    BOOL v18 = v16 + v15;
    if (v17)
    {
      __break(1u);
      return;
    }
    *(void *)(v0 + 104) = v18;
    uint64_t v1 = (uint64_t *)(v0 + 152);
    goto LABEL_15;
  }
  uint64_t v1 = (uint64_t *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 8);
  uint64_t v19 = *(void *)v0;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(unsigned char *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v7, v2, v3, v19, v4, v5, v6);
  double v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2) {
    uint64_t v12 = *(void *)&v11;
  }
  else {
    uint64_t v12 = 0;
  }
  EstimationCache.add(length:spacing:count:)(v12, v2 == 0, 1, *(double *)&v9);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) == 0)
  {
    *(double *)(v0 + 120) = v11 + *(double *)(v0 + 120);
    if (specialized StackPlacement.isVisible(length:)(*(double *)&v9))
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(*(double *)&v9, v11);
      specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment, MEMORY[0x1E4F401B8], 1, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
      unsigned __int8 v13 = *(void *)(v0 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = swift_bridgeObjectRetain();
      specialized HVGrid.place(subviews:length:minorGeometry:emit:)(v14, v9, 0, v13, v0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    *(double *)(v0 + 120) = *(double *)&v9 + *(double *)(v0 + 120);
    goto LABEL_13;
  }
  *(unsigned char *)(v0 + 312) = 1;
LABEL_15:

  swapSubviews(_:_:)(v1, (uint64_t *)(v0 + 144));
}

{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double v10;
  double v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t vars8;

  if (!*(void *)(*(void *)(v0 + 144) + 16)) {
    return;
  }
  if (*(unsigned char *)(v0 + 112))
  {
    *(unsigned char *)(v0 + 112) = 0;
LABEL_13:
    uint64_t v15 = *(void *)(v0 + 40);
    uint64_t v16 = *(void *)(v0 + 104);
    uint64_t v17 = __OFADD__(v16, v15);
    BOOL v18 = v16 + v15;
    if (v17)
    {
      __break(1u);
      return;
    }
    *(void *)(v0 + 104) = v18;
    uint64_t v1 = (uint64_t *)(v0 + 152);
    goto LABEL_15;
  }
  uint64_t v1 = (uint64_t *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 8);
  uint64_t v19 = *(void *)v0;
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(unsigned char *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = swift_bridgeObjectRetain();
  specialized HVGrid.lengthAndSpacing(subviews:predecessors:minorGeometry:)(v7, v2, v3, v19, v4, v5, v6);
  double v9 = v8;
  uint64_t v11 = v10;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v2) {
    uint64_t v12 = *(void *)&v11;
  }
  else {
    uint64_t v12 = 0;
  }
  EstimationCache.add(length:spacing:count:)(v12, v2 == 0, 1, *(double *)&v9);
  type metadata accessor for AGGraphRef(0);
  if ((static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()() & 1) == 0)
  {
    *(double *)(v0 + 120) = v11 + *(double *)(v0 + 120);
    if (specialized StackPlacement.isVisible(length:)(*(double *)&v9))
    {
      specialized StackPlacement.addVisibleSubview(length:spacing:)(*(double *)&v9, v11);
      specialized StackPlacement.flushPendingHeader()((void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment, MEMORY[0x1E4F40430], 0, (void (*)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))specialized StackPlacement.emit(_:at:size:anchor:));
      unsigned __int8 v13 = *(void *)(v0 + 56);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v14 = swift_bridgeObjectRetain();
      specialized HVGrid.place(subviews:length:minorGeometry:emit:)(v14, v9, 0, v13, v0);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    *(double *)(v0 + 120) = *(double *)&v9 + *(double *)(v0 + 120);
    goto LABEL_13;
  }
  *(unsigned char *)(v0 + 312) = 1;
LABEL_15:

  swapSubviews(_:_:)(v1, (uint64_t *)(v0 + 144));
}

BOOL specialized closure #1 in closure #1 in StackPlacement.place(subviews:from:position:stopping:style:)(uint64_t a1, unsigned char *a2, uint64_t a3, void (*a4)(void), unint64_t a5)
{
  outlined init with copy of _LazyLayout_Subview(a1, (uint64_t)v19);
  double v9 = *(char **)(a3 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a3 + 136) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    double v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(a3 + 136) = v9;
  }
  unint64_t v12 = *((void *)v9 + 2);
  unint64_t v11 = *((void *)v9 + 3);
  if (v12 >= v11 >> 1)
  {
    double v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
    *(void *)(a3 + 136) = v9;
  }
  *((void *)v9 + 2) = v12 + 1;
  unsigned __int8 v13 = &v9[96 * v12];
  long long v14 = v19[1];
  *((_OWORD *)v13 + 2) = v19[0];
  *((_OWORD *)v13 + 3) = v14;
  long long v15 = v19[2];
  long long v16 = v19[3];
  long long v17 = v20[0];
  *(_OWORD *)(v13 + 111) = *(_OWORD *)((char *)v20 + 15);
  *((_OWORD *)v13 + 5) = v16;
  *((_OWORD *)v13 + 6) = v17;
  *((_OWORD *)v13 + 4) = v15;
  if (*(void *)(*(void *)(a3 + 136) + 16) == *(void *)(a3 + 32)) {
    a4();
  }
  BOOL result = specialized StackPlacement.shouldStop()(a5);
  *a2 = result;
  return result;
}

{
  char *v9;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  long long v14;
  long long v15;
  long long v16;
  long long v17;
  BOOL result;
  _OWORD v19[4];
  _OWORD v20[2];

  outlined init with copy of _LazyLayout_Subview(a1, (uint64_t)v19);
  double v9 = *(char **)(a3 + 144);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a3 + 144) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    double v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
    *(void *)(a3 + 144) = v9;
  }
  unint64_t v12 = *((void *)v9 + 2);
  unint64_t v11 = *((void *)v9 + 3);
  if (v12 >= v11 >> 1)
  {
    double v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
    *(void *)(a3 + 144) = v9;
  }
  *((void *)v9 + 2) = v12 + 1;
  unsigned __int8 v13 = &v9[96 * v12];
  long long v14 = v19[1];
  *((_OWORD *)v13 + 2) = v19[0];
  *((_OWORD *)v13 + 3) = v14;
  long long v15 = v19[2];
  long long v16 = v19[3];
  long long v17 = v20[0];
  *(_OWORD *)(v13 + 111) = *(_OWORD *)((char *)v20 + 15);
  *((_OWORD *)v13 + 5) = v16;
  *((_OWORD *)v13 + 6) = v17;
  *((_OWORD *)v13 + 4) = v15;
  if (*(void *)(*(void *)(a3 + 144) + 16) == *(void *)(a3 + 40)) {
    a4();
  }
  BOOL result = specialized StackPlacement.shouldStop()(a5);
  *a2 = result;
  return result;
}

BOOL specialized StackPlacement.shouldStop()(unint64_t a1)
{
  uint64_t v3 = v1;
  type metadata accessor for AGGraphRef(0);
  if (static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()())
  {
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if (static UserDefaultKeyedFeature.isEnabled.getter())
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Log.LazyLayoutPrefetch.log);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = swift_slowAlloc();
        uint64_t v10 = v8;
        *(_DWORD *)uint64_t v7 = 136446210;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000047, a1, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1872C6000, v5, v6, "%{public}s: Stopping placement because deadline passed", v7, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v8, -1, -1);
        MEMORY[0x18C119C60](v7, -1, -1);
      }
    }
    BOOL result = 1;
    *(unsigned char *)(v3 + 304) = 1;
  }
  else if (*(unsigned char *)(v1 + 128))
  {
    return *(double *)(v1 + 64) <= *(double *)(v1 + 112);
  }
  else
  {
    return *(void *)(v1 + 120) < *(void *)(v1 + 96);
  }
  return result;
}

{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  BOOL result;
  uint64_t v10;

  uint64_t v3 = v1;
  type metadata accessor for AGGraphRef(0);
  if (static AGGraphRef.cancelCurrentUpdateIfDeadlinePassed()())
  {
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if (static UserDefaultKeyedFeature.isEnabled.getter())
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v4 = type metadata accessor for Logger();
      __swift_project_value_buffer(v4, (uint64_t)static Log.LazyLayoutPrefetch.log);
      uint64_t v5 = Logger.logObject.getter();
      os_log_type_t v6 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v5, v6))
      {
        uint64_t v7 = (uint8_t *)swift_slowAlloc();
        uint64_t v8 = swift_slowAlloc();
        uint64_t v10 = v8;
        *(_DWORD *)uint64_t v7 = 136446210;
        getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(0xD000000000000046, a1, &v10);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        _os_log_impl(&dword_1872C6000, v5, v6, "%{public}s: Stopping placement because deadline passed", v7, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v8, -1, -1);
        MEMORY[0x18C119C60](v7, -1, -1);
      }
    }
    BOOL result = 1;
    *(unsigned char *)(v3 + 312) = 1;
  }
  else if (*(unsigned char *)(v1 + 136))
  {
    return *(double *)(v1 + 72) <= *(double *)(v1 + 120);
  }
  else
  {
    return *(void *)(v1 + 128) < *(void *)(v1 + 104);
  }
  return result;
}

uint64_t specialized closure #1 in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, BOOL *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, char a16, void *a17, double (*a18)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  uint64_t v19 = a6;
  uint64_t v20 = a4;
  uint64_t v21 = a3;
  double v22 = a10;
  uint64_t v23 = a1;
  uint64_t v24 = a12;
  unint64_t v25 = a11 & 0xFFFFFFFF00000000;
  uint64_t v26 = a11 & 1;
  unint64_t v27 = (uint64_t *)(a3 + 16);
  uint64_t v66 = v26;
  if ((*(unsigned char *)(a1 + 93) & 1) == 0 && (*(unsigned char *)(a1 + 94) & 1) == 0)
  {
    uint64_t v62 = a18;
    uint64_t v63 = a14;
    uint64_t v64 = a13;
    uint64_t v65 = a7;
    uint64_t v29 = (uint64_t *)a8;
    outlined init with copy of _LazyLayout_Subview(a1, (uint64_t)&v69);
    swift_beginAccess();
    uint64_t v23 = *v27;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *unint64_t v27 = v23;
    if (isUniquelyReferenced_nonNull_native) {
      goto LABEL_9;
    }
    goto LABEL_33;
  }
  unint64_t v28 = (unsigned char *)(a6 + 16);
  uint64_t v29 = (uint64_t *)(a12 + 16);
  LOBYTE(v69) = v26 != 0;
  uint64_t v30 = v25 | (v26 != 0);
  unint64_t v25 = a13;
  uint64_t v65 = a8;
  specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(a5, a3, a4, a6, a7, a8, v30, a12, a10, a13, a14, a15, a18);
  swift_beginAccess();
  if (*(unsigned char *)(v19 + 16))
  {
    swift_beginAccess();
    *unint64_t v28 = 0;
LABEL_15:
    if (__OFADD__(*a15, v20))
    {
      __break(1u);
    }
    else
    {
      *a15 += v20;
      if ((v20 & 0x8000000000000000) == 0)
      {
        if (v20)
        {
          swift_beginAccess();
          do
          {
            outlined init with copy of _LazyLayout_Subview(v23, (uint64_t)&v69);
            uint64_t v49 = (char *)*v27;
            char v50 = swift_isUniquelyReferenced_nonNull_native();
            *unint64_t v27 = (uint64_t)v49;
            if ((v50 & 1) == 0)
            {
              uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v49 + 2) + 1, 1, v49);
              *unint64_t v27 = (uint64_t)v49;
            }
            unint64_t v52 = *((void *)v49 + 2);
            unint64_t v51 = *((void *)v49 + 3);
            if (v52 >= v51 >> 1)
            {
              uint64_t v49 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v51 > 1), v52 + 1, 1, v49);
              *unint64_t v27 = (uint64_t)v49;
            }
            *((void *)v49 + 2) = v52 + 1;
            uint64_t v53 = &v49[96 * v52];
            long long v54 = v70;
            *((_OWORD *)v53 + 2) = v69;
            *((_OWORD *)v53 + 3) = v54;
            long long v55 = v71;
            long long v56 = v72;
            long long v57 = v73[0];
            *(_OWORD *)(v53 + 111) = *(_OWORD *)((char *)v73 + 15);
            *((_OWORD *)v53 + 5) = v56;
            *((_OWORD *)v53 + 6) = v57;
            *((_OWORD *)v53 + 4) = v55;
            --v20;
          }
          while (v20);
        }
        swift_beginAccess();
        swift_beginAccess();
        swapSubviews(_:_:)(v29, v27);
        swift_endAccess();
        swift_endAccess();
        goto LABEL_25;
      }
    }
    __break(1u);
    goto LABEL_32;
  }
  uint64_t v21 = a16 & 1;
  uint64_t v64 = ProposedViewSize.init(_:in:by:)();
  uint64_t v19 = v31;
  uint64_t v24 = v32;
  swift_beginAccess();
  uint64_t v33 = *v29;
  if (!*v29)
  {
    long long v72 = 0u;
    memset(v73, 0, 31);
    long long v70 = 0u;
    long long v71 = 0u;
    long long v69 = 0u;
    goto LABEL_14;
  }
  if (*(void *)(v33 + 16))
  {
    outlined init with copy of _LazyLayout_Subview(v33 + 32, (uint64_t)&v69);
LABEL_14:
    unint64_t v25 = a13 + 16;
    double v46 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
    double v48 = v47;
    outlined destroy of AccessibilityScrollableContext?((uint64_t)&v69, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
    double v22 = v48 + v46;
    swift_beginAccess();
    *(double *)(a13 + 16) = v22 + *(double *)(a13 + 16);
    goto LABEL_15;
  }
LABEL_32:
  __break(1u);
LABEL_33:
  uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v23 + 16) + 1, 1, (char *)v23);
  *unint64_t v27 = v23;
LABEL_9:
  unint64_t v36 = *(void *)(v23 + 16);
  unint64_t v35 = *(void *)(v23 + 24);
  unint64_t v37 = v36 + 1;
  uint64_t v38 = a5;
  uint64_t v39 = v65;
  if (v36 >= v35 >> 1)
  {
    id v61 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v35 > 1), v36 + 1, 1, (char *)v23);
    unint64_t v37 = v36 + 1;
    uint64_t v39 = v65;
    uint64_t v40 = (uint64_t)v29;
    uint64_t v38 = a5;
    uint64_t v23 = (uint64_t)v61;
    *unint64_t v27 = (uint64_t)v61;
  }
  else
  {
    uint64_t v40 = (uint64_t)v29;
  }
  *(void *)(v23 + 16) = v37;
  uint64_t v41 = (_OWORD *)(v23 + 96 * v36);
  long long v42 = v70;
  v41[2] = v69;
  v41[3] = v42;
  long long v43 = v71;
  long long v44 = v72;
  long long v45 = v73[0];
  *(_OWORD *)((char *)v41 + 111) = *(_OWORD *)((char *)v73 + 15);
  v41[5] = v44;
  v41[6] = v45;
  v41[4] = v43;
  if (*(void *)(*v27 + 16) == v20)
  {
    LOBYTE(v69) = v66 != 0;
    specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(v38, v21, v20, v19, v39, v40, v25 | (v66 != 0), v24, v22, v64, v63, a15, v62);
LABEL_25:
    uint64_t v38 = a5;
  }
  uint64_t v58 = (unsigned char *)(v38 + 16);
  uint64_t result = swift_beginAccess();
  BOOL v60 = (*v58 & 1) != 0 || *a15 >= *a17;
  *a2 = v60;
  return result;
}

uint64_t specialized flushMinorGroup #1 <A>() in LazyStack<>.measureEstimates(updatingPosition:index:minor:subviews:cache:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, uint64_t a10, uint64_t a11, void *a12, double (*a13)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, double))
{
  double v22 = (uint64_t *)(a2 + 16);
  swift_beginAccess();
  if (!*(void *)(*(void *)(a2 + 16) + 16)) {
    goto LABEL_10;
  }
  uint64_t v23 = (unsigned char *)(a4 + 16);
  uint64_t v24 = (uint64_t *)(a8 + 16);
  swift_beginAccess();
  if (*v23)
  {
    uint64_t result = swift_beginAccess();
    *uint64_t v23 = 0;
  }
  else
  {
    swift_beginAccess();
    uint64_t v26 = *v24;
    swift_bridgeObjectRetain();
    uint64_t v27 = swift_bridgeObjectRetain();
    double v28 = a13(v27, v26, a5, a6, a7 & 0xFFFFFFFF00000001, a9);
    double v30 = v29;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    *(double *)(a10 + 16) = v30 + v28 + *(double *)(a10 + 16);
    swift_beginAccess();
    char v31 = *v24 == 0;
    if (*v24) {
      uint64_t v32 = *(void *)&v30;
    }
    else {
      uint64_t v32 = 0;
    }
    swift_beginAccess();
    EstimationCache.add(length:spacing:count:)(v32, v31, 1, v28);
    uint64_t result = swift_endAccess();
  }
  if (!__OFADD__(*a12, a3))
  {
    *a12 += a3;
    swift_beginAccess();
    swift_beginAccess();
    swapSubviews(_:_:)(v24, v22);
    swift_endAccess();
    swift_endAccess();
LABEL_10:
    char HasDeadlinePassed = AGGraphHasDeadlinePassed();
    uint64_t result = swift_beginAccess();
    *(unsigned char *)(a1 + 16) = HasDeadlinePassed;
    return result;
  }
  __break(1u);
  return result;
}

uint64_t specialized LazyHVStack<>.lengthAndSpacing(subviews:predecessors:minorGeometry:)(uint64_t result, uint64_t a2)
{
  if (*(void *)(result + 16))
  {
    outlined init with copy of _LazyLayout_Subview(result + 32, (uint64_t)v4);
    uint64_t result = ProposedViewSize.init(_:in:by:)();
    if (!a2)
    {
      memset(v3, 0, 95);
      goto LABEL_6;
    }
    if (*(void *)(a2 + 16))
    {
      outlined init with copy of _LazyLayout_Subview(a2 + 32, (uint64_t)v3);
LABEL_6:
      _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v3, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
      return outlined destroy of _LazyLayout_Subview((uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

{
  _OWORD v3[6];
  unsigned char v4[96];

  if (*(void *)(result + 16))
  {
    outlined init with copy of _LazyLayout_Subview(result + 32, (uint64_t)v4);
    uint64_t result = ProposedViewSize.init(_:in:by:)();
    if (!a2)
    {
      memset(v3, 0, 95);
      goto LABEL_6;
    }
    if (*(void *)(a2 + 16))
    {
      outlined init with copy of _LazyLayout_Subview(a2 + 32, (uint64_t)v3);
LABEL_6:
      _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
      outlined destroy of AccessibilityScrollableContext?((uint64_t)v3, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
      return outlined destroy of _LazyLayout_Subview((uint64_t)v4);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

double _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)()
{
  LazyLayoutViewCache.item(data:)(v0 + 16);
  swift_bridgeObjectRetain();
  swift_release();
  _ViewOutputs.layoutComputer.getter();
  swift_bridgeObjectRelease();
  LayoutProxy.init(context:layoutComputer:)();
  _ProposedSize.init(_:)();
  LayoutProxy.lengthThatFits(_:in:)();
  double v2 = v1;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI19_LazyLayout_SubviewV_s5NeverO12CoreGraphics7CGFloatVTg5((void (*)(uint64_t *__return_ptr, _OWORD *))partial apply for closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:));
  return v2;
}

uint64_t _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI19_LazyLayout_SubviewV_s5NeverO12CoreGraphics7CGFloatVTg5(void (*a1)(uint64_t *__return_ptr, _OWORD *))
{
  outlined init with copy of AccessibilityScrollableContext?(v1, (uint64_t)v7, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  if (!*(void *)&v7[0]) {
    return 0;
  }
  _OWORD v5[2] = v7[2];
  void v5[3] = v7[3];
  v6[0] = v8[0];
  *(_OWORD *)((char *)v6 + 15) = *(_OWORD *)((char *)v8 + 15);
  v5[0] = v7[0];
  v5[1] = v7[1];
  a1(&v9, v5);
  uint64_t result = outlined destroy of _LazyLayout_Subview((uint64_t)v5);
  if (!v2) {
    return v9;
  }
  return result;
}

uint64_t partial apply for closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)@<X0>(uint64_t a1@<X0>, double *a2@<X8>)
{
  return closure #1 in _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)(a1, *(void *)(v2 + 16), *(unsigned char *)(v2 + 24), *(unsigned char *)(v2 + 25), *(void *)(v2 + 32), a2);
}

uint64_t specialized StackPlacement.isVisible(length:)(double a1)
{
  if (*(unsigned char *)(v1 + 128) == 1)
  {
    double v2 = *(double *)(v1 + 112);
    double v3 = *(double *)(v1 + 56);
    if (v3 <= v2) {
      double v3 = *(double *)(v1 + 112);
    }
    double v4 = v2 + a1;
    if (v4 >= *(double *)(v1 + 64)) {
      double v4 = *(double *)(v1 + 64);
    }
    BOOL v5 = a1 == 0.0;
    if (v3 != v4) {
      BOOL v5 = 0;
    }
    return v3 < v4 || v5;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 96);
    uint64_t v8 = *(void *)(v1 + 32) + v7;
    if (v8 < v7)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = *(void *)(v1 + 120);
      return v9 >= v7 && v9 < v8;
    }
  }
  return result;
}

{
  uint64_t v1;
  double v2;
  double v3;
  double v4;
  BOOL v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  if (*(unsigned char *)(v1 + 136) == 1)
  {
    double v2 = *(double *)(v1 + 120);
    double v3 = *(double *)(v1 + 64);
    if (v3 <= v2) {
      double v3 = *(double *)(v1 + 120);
    }
    double v4 = v2 + a1;
    if (v4 >= *(double *)(v1 + 72)) {
      double v4 = *(double *)(v1 + 72);
    }
    BOOL v5 = a1 == 0.0;
    if (v3 != v4) {
      BOOL v5 = 0;
    }
    return v3 < v4 || v5;
  }
  else
  {
    uint64_t v7 = *(void *)(v1 + 104);
    uint64_t v8 = *(void *)(v1 + 40) + v7;
    if (v8 < v7)
    {
      __break(1u);
    }
    else
    {
      uint64_t v9 = *(void *)(v1 + 128);
      return v9 >= v7 && v9 < v8;
    }
  }
  return result;
}

uint64_t specialized StackPlacement.flushPendingHeader()(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, void (*a4)(_OWORD *, uint64_t, uint64_t, uint64_t, void, double, double, double, double))
{
  uint64_t v7 = (_OWORD *)(v4 + 152);
  outlined init with copy of AccessibilityScrollableContext?(v4 + 152, (uint64_t)&v20, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  if (!(void)v20) {
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v20, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  }
  void v25[2] = v22;
  v25[3] = v23;
  v26[0] = v24[0];
  *(_OWORD *)((char *)v26 + 15) = *(_OWORD *)((char *)v24 + 15);
  v25[0] = v20;
  v25[1] = v21;
  if ((*(unsigned char *)(v4 + 72) & 1) == 0 || (*(unsigned char *)(v4 + 128) & 1) == 0) {
    return outlined destroy of _LazyLayout_Subview((uint64_t)v25);
  }
  ProposedViewSize.init(_:in:by:)();
  long long v23 = 0u;
  memset(v24, 0, 31);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  double v8 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
  uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v20, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  if (*(unsigned char *)(v4 + 24)) {
    double v9 = 0.0;
  }
  else {
    double v9 = -v8;
  }
  if (*(unsigned char *)(v4 + 24)) {
    double v10 = -v8;
  }
  else {
    double v10 = 0.0;
  }
  uint64_t v11 = _ProposedSize.init(_:in:by:)();
  uint64_t v18 = v20;
  uint64_t v12 = BYTE8(v20);
  uint64_t v13 = v21;
  unsigned __int8 v14 = BYTE8(v21);
  *(void *)&long long v20 = *(void *)v4;
  a1(v11);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  LOBYTE(v20) = v12;
  a4(v25, v18, v12, v13, v14, v9, v10, v15, v16);
  outlined destroy of _LazyLayout_Subview((uint64_t)v25);
  uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v7, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v19);
  *uint64_t v7 = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 231) = 0u;
  return result;
}

{
  uint64_t v4;
  _OWORD *v7;
  double v8;
  double v9;
  double v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  double v15;
  double v16;
  uint64_t result;
  uint64_t v18;
  uint64_t (*v19)(void, uint64_t);
  long long v20;
  long long v21;
  long long v22;
  long long v23;
  _OWORD v24[2];
  _OWORD v25[4];
  _OWORD v26[3];

  uint64_t v7 = (_OWORD *)(v4 + 160);
  outlined init with copy of AccessibilityScrollableContext?(v4 + 160, (uint64_t)&v20, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  if (!(void)v20) {
    return outlined destroy of AccessibilityScrollableContext?((uint64_t)&v20, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  }
  void v25[2] = v22;
  v25[3] = v23;
  v26[0] = v24[0];
  *(_OWORD *)((char *)v26 + 15) = *(_OWORD *)((char *)v24 + 15);
  v25[0] = v20;
  v25[1] = v21;
  if ((*(unsigned char *)(v4 + 80) & 1) == 0 || (*(unsigned char *)(v4 + 136) & 1) == 0) {
    return outlined destroy of _LazyLayout_Subview((uint64_t)v25);
  }
  ProposedViewSize.init(_:in:by:)();
  long long v23 = 0u;
  memset(v24, 0, 31);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  double v8 = _LazyLayout_Subview.lengthAndSpacing(size:axis:predecessor:uniformSpacing:)();
  uint64_t v19 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined destroy of AccessibilityScrollableContext?((uint64_t)&v20, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, MEMORY[0x1E4FBB718]);
  if (*(unsigned char *)(v4 + 32)) {
    double v9 = 0.0;
  }
  else {
    double v9 = -v8;
  }
  if (*(unsigned char *)(v4 + 32)) {
    double v10 = -v8;
  }
  else {
    double v10 = 0.0;
  }
  uint64_t v11 = _ProposedSize.init(_:in:by:)();
  uint64_t v18 = v20;
  uint64_t v12 = BYTE8(v20);
  uint64_t v13 = v21;
  unsigned __int8 v14 = BYTE8(v21);
  *(void *)&long long v20 = *(void *)(v4 + 8);
  a1(v11);
  AlignmentGuide.fraction.getter();
  UnitPoint.init(_:in:by:)();
  LOBYTE(v20) = v12;
  a4(v25, v18, v12, v13, v14, v9, v10, v15, v16);
  outlined destroy of _LazyLayout_Subview((uint64_t)v25);
  uint64_t result = outlined destroy of AccessibilityScrollableContext?((uint64_t)v7, &lazy cache variable for type metadata for _LazyLayout_Subview?, (uint64_t)&type metadata for _LazyLayout_Subview, v19);
  *uint64_t v7 = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 239) = 0u;
  return result;
}

void specialized StackPlacement.addVisibleSubview(length:spacing:)(double a1, double a2)
{
  uint64_t v3 = *(void *)(v2 + 96);
  uint64_t v4 = *(void *)(v2 + 264);
  if (v3 >= *(void *)(v2 + 256)) {
    uint64_t v5 = *(void *)(v2 + 256);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 96);
  }
  uint64_t v6 = *(void *)(v2 + 32);
  BOOL v7 = __OFADD__(v3, v6);
  uint64_t v8 = v3 + v6;
  char v9 = v7;
  if (v8 - 1 > v4) {
    uint64_t v4 = v8 - 1;
  }
  double v10 = *(double *)(v2 + 112);
  double v11 = v10 - a2;
  double v12 = *(double *)(v2 + 280);
  if (v11 >= *(double *)(v2 + 272)) {
    double v11 = *(double *)(v2 + 272);
  }
  *(void *)(v2 + 256) = v5;
  *(void *)(v2 + 264) = v4;
  double v13 = v10 + a1;
  if (v12 > v13) {
    double v14 = v12;
  }
  else {
    double v14 = v13;
  }
  *(double *)(v2 + 272) = v11;
  *(double *)(v2 + 280) = v14;
  if ((*(unsigned char *)(v2 + 88) & 1) == 0)
  {
    if (v9)
    {
      __break(1u);
    }
    else if (v8 >= v3)
    {
      uint64_t v15 = *(void *)(v2 + 80);
      if (v15 >= v3 && v15 < v8)
      {
        double v16 = *(double *)(v2 + 288);
        if (v10 < v16) {
          double v16 = v10;
        }
        if (*(double *)(v2 + 296) > v13) {
          double v13 = *(double *)(v2 + 296);
        }
        *(double *)(v2 + 288) = v16;
        *(double *)(v2 + 296) = v13;
      }
      return;
    }
    __break(1u);
  }
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  char v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  uint64_t v15;
  double v16;

  uint64_t v3 = *(void *)(v2 + 104);
  uint64_t v4 = *(void *)(v2 + 272);
  if (v3 >= *(void *)(v2 + 264)) {
    uint64_t v5 = *(void *)(v2 + 264);
  }
  else {
    uint64_t v5 = *(void *)(v2 + 104);
  }
  uint64_t v6 = *(void *)(v2 + 40);
  BOOL v7 = __OFADD__(v3, v6);
  uint64_t v8 = v3 + v6;
  char v9 = v7;
  if (v8 - 1 > v4) {
    uint64_t v4 = v8 - 1;
  }
  double v10 = *(double *)(v2 + 120);
  double v11 = v10 - a2;
  double v12 = *(double *)(v2 + 288);
  if (v11 >= *(double *)(v2 + 280)) {
    double v11 = *(double *)(v2 + 280);
  }
  *(void *)(v2 + 264) = v5;
  *(void *)(v2 + 272) = v4;
  double v13 = v10 + a1;
  if (v12 > v13) {
    double v14 = v12;
  }
  else {
    double v14 = v13;
  }
  *(double *)(v2 + 280) = v11;
  *(double *)(v2 + 288) = v14;
  if ((*(unsigned char *)(v2 + 96) & 1) == 0)
  {
    if (v9)
    {
      __break(1u);
    }
    else if (v8 >= v3)
    {
      uint64_t v15 = *(void *)(v2 + 88);
      if (v15 >= v3 && v15 < v8)
      {
        double v16 = *(double *)(v2 + 296);
        if (v10 < v16) {
          double v16 = v10;
        }
        if (*(double *)(v2 + 304) > v13) {
          double v13 = *(double *)(v2 + 304);
        }
        *(double *)(v2 + 296) = v16;
        *(double *)(v2 + 304) = v13;
      }
      return;
    }
    __break(1u);
  }
}

uint64_t specialized LazyHVStack<>.place(subviews:length:minorGeometry:emit:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return specialized LazyHVStack<>.place(subviews:length:minorGeometry:emit:)(a1, a2, a3, a4, a5, a6, a7, 0, (void (*)(uint64_t))lazy protocol witness table accessor for type VerticalAlignment and conformance VerticalAlignment);
}

{
  return specialized LazyHVStack<>.place(subviews:length:minorGeometry:emit:)(a1, a2, a3, a4, a5, a6, a7, 1, (void (*)(uint64_t))lazy protocol witness table accessor for type HorizontalAlignment and conformance HorizontalAlignment);
}

uint64_t specialized StackPlacement.log(_:)(uint64_t a1, uint64_t a2, double a3, double a4, double a5)
{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000188328BD0);
}

{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000188328CA0);
}

{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000188328CF0);
}

{
  return specialized StackPlacement.log(_:)(a3, a4, a5, a1, a2, 0x8000000188328D40);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance ProgressViewStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF78](a1, a2, a3, a4, a5, WitnessTable);
}

ValueMetadata *type metadata accessor for SidebarSectionActionStyleContext()
{
  return &type metadata for SidebarSectionActionStyleContext;
}

ValueMetadata *type metadata accessor for SidebarSectionActionButtonStyle()
{
  return &type metadata for SidebarSectionActionButtonStyle;
}

ValueMetadata *type metadata accessor for PlatformFallbackButtonStyle()
{
  return &type metadata for PlatformFallbackButtonStyle;
}

ValueMetadata *type metadata accessor for AccessibilityButtonStyle()
{
  return &type metadata for AccessibilityButtonStyle;
}

uint64_t protocol witness for static DynamicProperty._makeProperty<A>(in:container:fieldOffset:inputs:) in conformance NestedDynamicProperties<A>()
{
  return static NestedDynamicProperties._makeProperty<A>(in:container:fieldOffset:inputs:)();
}

ValueMetadata *type metadata accessor for TabSectionStyleContext()
{
  return &type metadata for TabSectionStyleContext;
}

ValueMetadata *type metadata accessor for PagePresentationSizing()
{
  return &type metadata for PagePresentationSizing;
}

ValueMetadata *type metadata accessor for ToolbarButtonStyle()
{
  return &type metadata for ToolbarButtonStyle;
}

ValueMetadata *type metadata accessor for SidebarButtonStyle()
{
  return &type metadata for SidebarButtonStyle;
}

ValueMetadata *type metadata accessor for NavigationRequest.KeyKind()
{
  return &type metadata for NavigationRequest.KeyKind;
}

ValueMetadata *type metadata accessor for AnyListSelection()
{
  return &type metadata for AnyListSelection;
}

ValueMetadata *type metadata accessor for NavigationPath.CollectionProxy()
{
  return &type metadata for NavigationPath.CollectionProxy;
}

uint64_t ScrollViewAdjustedProperties.value.getter@<X0>(unsigned char *a1@<X8>)
{
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of ScrollViewConfiguration(Value, (uint64_t)v13);
  uint64_t v3 = AGGraphGetValue();
  outlined init with copy of ScrollEnvironmentProperties(v3, (uint64_t)a1);
  a1[81] = *(unsigned char *)AGGraphGetValue();
  if (*(unsigned char *)AGGraphGetValue() != 1
    || ((int v4 = *(unsigned __int8 *)(AGGraphGetValue() + 40), v4 != 2) ? (v5 = (v4 & 1) == 0) : (v5 = 0), v5))
  {
    *a1 = 0;
    goto LABEL_10;
  }
  if (*a1 != 1)
  {
LABEL_10:
    char v6 = 3;
    a1[96] = 3;
    goto LABEL_11;
  }
  if (v13[1])
  {
    char v6 = a1[120];
  }
  else
  {
    char v8 = a1[96];
    if (v8) {
      char v9 = a1[96];
    }
    else {
      char v9 = 3;
    }
    unsigned __int8 v10 = v13[0];
    if ((v13[0] & 2) != 0) {
      char v8 = v9;
    }
    a1[96] = v8;
    char v6 = a1[120];
    if (v6) {
      char v11 = a1[120];
    }
    else {
      char v11 = 3;
    }
    if (v10) {
      char v6 = v11;
    }
  }
LABEL_11:
  a1[120] = v6;
  ScrollViewAdjustedProperties.resolvedDecerationRate(config:properties:)(v13, (uint64_t)a1, &v12);
  uint64_t result = outlined destroy of ScrollViewConfiguration((uint64_t)v13);
  a1[80] = v12;
  return result;
}

unsigned __int8 *ScrollViewAdjustedProperties.resolvedDecerationRate(config:properties:)@<X0>(unsigned __int8 *result@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  int v4 = *(unsigned __int8 *)(a2 + 80);
  if (v4 == 1)
  {
    char v6 = result;
    outlined init with copy of ResolvedScrollBehavior?(a2 + 8, (uint64_t)v11);
    uint64_t v7 = v12;
    uint64_t result = (unsigned __int8 *)outlined destroy of ResolvedScrollBehavior?((uint64_t)v11);
    if (v7)
    {
      int v8 = *v6;
      if ((v8 == 1 || v8 == 2)
        && ((type metadata accessor for External<SystemScrollLayoutState>(0, &lazy cache variable for type metadata for UserInterfaceSizeClass?, MEMORY[0x1E4F409E8], MEMORY[0x1E4FBB718]), uint64_t result = (unsigned __int8 *)AGGraphGetValue(), v9 = *result, v9 != 2)? (v10 = (v9 & 1) == 0): (v10 = 0), v10))
      {
        LOBYTE(v4) = 2;
      }
      else
      {
        LOBYTE(v4) = 4;
      }
    }
    else
    {
      LOBYTE(v4) = *(unsigned char *)(a2 + 80);
    }
  }
  *a3 = v4;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>();
    lazy protocol witness table accessor for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, MEMORY[0x1E4F40838]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(255, a2, a3, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>)
  {
    type metadata accessor for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, MEMORY[0x1E4F40838], (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F3FBA0]);
    type metadata accessor for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(255, &lazy cache variable for type metadata for AccessibilityLargeContentViewModifier<Text>, MEMORY[0x1E4F41420], MEMORY[0x1E4F41418], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for AccessibilityLargeContentViewModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>, AccessibilityLargeContentViewModifier<Text>>);
    }
  }
}

void type metadata accessor for ModifiedContent<StyledTextContentView, AccessibilityAttachmentModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>();
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGACyxGAA09ViewInputF0AAWlTm_0(&lazy protocol witness table cache variable for type Stepper<StepperStyleConfiguration.Label> and conformance Stepper<A>, (void (*)(uint64_t))type metadata accessor for Stepper<StepperStyleConfiguration.Label>);
    lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGACyxGAA09ViewInputF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>)
  {
    type metadata accessor for Stepper<StepperStyleConfiguration.Label>();
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Stepper<StepperStyleConfiguration.Label>, StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, StepperStyleModifier<MenuStepperStyle>, EmptyModifier>>);
    }
  }
}

void type metadata accessor for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>);
    }
  }
}

void type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t UIKitSensoryFeedbackCache.__allocating_init()()
{
  uint64_t v0 = swift_allocObject();
  swift_unknownObjectWeakInit();
  *(void *)(v0 + 24) = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  return v0;
}

id specialized DeprecatedAlertBridge.init(style:)(uint64_t a1, uint64_t (*a2)(void))
{
  BOOL v5 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakInit();
  *((unsigned char *)v2 + *(void *)((*v5 & *v2) + 0x78)) = 0;
  *(_DWORD *)((char *)v2 + *(void *)((*v5 & *v2) + 0x80)) = 0;
  *(void *)((char *)v2 + *(void *)((*v5 & *v2) + 0x88)) = 0;
  unint64_t v6 = v2;
  EnvironmentValues.init()();
  uint64_t v7 = (char *)v6 + *(void *)((*v5 & *v6) + 0x98);
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((void *)v7 + 20) = 0;
  *((unsigned char *)v6 + *(void *)((*v5 & *v6) + 0xA0)) = 0;
  *(void *)((char *)v6 + *(void *)((*v5 & *v6) + 0xA8)) = a1;

  v9.receiver = v6;
  v9.super_class = (Class)a2(0);
  return objc_msgSendSuper2(&v9, sel_init);
}

{
  void *v2;
  void *v5;
  void *v6;
  char *v7;
  objc_super v9;

  BOOL v5 = (void *)MEMORY[0x1E4FBC8C8];
  swift_unknownObjectWeakInit();
  *((unsigned char *)v2 + *(void *)((*v5 & *v2) + 0x78)) = 0;
  *(_DWORD *)((char *)v2 + *(void *)((*v5 & *v2) + 0x80)) = 0;
  *(void *)((char *)v2 + *(void *)((*v5 & *v2) + 0x88)) = 0;
  unint64_t v6 = v2;
  EnvironmentValues.init()();
  uint64_t v7 = (char *)v6 + *(void *)((*v5 & *v6) + 0x98);
  *(_OWORD *)uint64_t v7 = 0u;
  *((_OWORD *)v7 + 1) = 0u;
  *((_OWORD *)v7 + 2) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 7) = 0u;
  *((_OWORD *)v7 + 8) = 0u;
  *((_OWORD *)v7 + 9) = 0u;
  *((_OWORD *)v7 + 10) = 0u;
  *((_OWORD *)v7 + 11) = 0u;
  *((_OWORD *)v7 + 12) = 0u;
  *((_OWORD *)v7 + 13) = 0u;
  *((_OWORD *)v7 + 14) = 0u;
  *((_OWORD *)v7 + 15) = 0u;
  *((_OWORD *)v7 + 16) = 0u;
  *((void *)v7 + 34) = 0;
  *((unsigned char *)v6 + *(void *)((*v5 & *v6) + 0xA0)) = 0;
  *(void *)((char *)v6 + *(void *)((*v5 & *v6) + 0xA8)) = a1;

  v9.receiver = v6;
  v9.super_class = (Class)a2(0);
  return objc_msgSendSuper2(&v9, sel_init);
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, Alert.Presentation>);
    }
  }
}

id SwiftUIGlue.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)swift_getObjectType();
  return objc_msgSendSuper2(&v2, sel_init);
}

void @objc _UIHostingView.__ivar_destroyer(char *a1)
{
  objc_super v2 = (void *)MEMORY[0x1E4FBC8C8];
  (*(void (**)(char *))(*(void *)(*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x50) - 8) + 8))(&a1[*(void *)((*MEMORY[0x1E4FBC8C8] & *(void *)a1) + 0x60)]);
  swift_release();

  swift_release();
  swift_unknownObjectWeakDestroy();

  swift_release();
  outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(*(id *)&a1[*(void *)((*v2 & *(void *)a1)
                                                                                              + 0xF0)]);
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_weakDestroy();
  swift_release();

  swift_release();
  swift_release();
  swift_release();
  swift_release();
  outlined destroy of weak FallbackResponderProvider?((uint64_t)&a1[*(void *)((*v2 & *(void *)a1) + 0x198)]);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t v3 = *(void **)&a1[*(void *)((*v2 & *(void *)a1) + 0x1D0)];
}

void *specialized _UIHostingView.sheetBridge.getter(uint64_t (*a1)(uint64_t), void (*a2)(uint64_t), void (*a3)(void *))
{
  uint64_t v5 = *(void *)((*MEMORY[0x1E4FBC8C8] & *v3) + 0xF0);
  unint64_t v6 = *(void **)((char *)v3 + v5);
  uint64_t v7 = v6;
  if (v6 == (void *)1)
  {
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v7 = (void *)a1(ObjectType);
    uint64_t v11 = *(void *)((char *)v3 + v5);
    *(void *)((char *)v3 + v5) = v7;
    id v12 = v7;
    a2(v11);
  }
  a3(v6);
  return v7;
}

void outlined consume of SheetBridge<_ViewList_View, SheetPreference.Key>??(id a1)
{
  if (a1 != (id)1) {
}
  }

id specialized closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1, uint64_t (*a2)(void))
{
  if ((*(uint64_t (**)(void))(a1 + 1200))()) {
    return 0;
  }
  else {
    return objc_msgSend(objc_allocWithZone((Class)a2(0)), sel_init);
  }
}

id @objc SheetBridge.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return SheetBridge.__deallocating_deinit();
}

id SheetBridge.__deallocating_deinit()
{
  id v1 = v0;
  uint64_t v2 = *MEMORY[0x1E4FBC8C8] & *v0;
  if ((*((unsigned char *)v0 + direct field offset for SheetBridge.hasWindow) & 1) == 0)
  {
    uint64_t v3 = (uint64_t)v0 + direct field offset for SheetBridge.presentationState;
    swift_beginAccess();
    outlined init with copy of PresentationState(v3, (uint64_t)v10);
    int v4 = (void *)PresentationState.Base.presentedVC.getter();
    outlined destroy of PresentationState((uint64_t)v10);
    if (v4)
    {
      id v5 = objc_msgSend(v4, sel_presentingViewController);
      if (!v5) {
        id v5 = v4;
      }
      static Transaction.current.getter();
      char v6 = Transaction.disablesAnimations.getter();
      swift_release();
      objc_msgSend(v5, sel_dismissViewControllerAnimated_completion_, (v6 & 1) == 0, 0);
    }
  }
  long long v7 = *(_OWORD *)(v2 + 96);
  v10[0] = *(_OWORD *)(v2 + 80);
  v10[1] = v7;
  v9.receiver = v1;
  v9.super_class = (Class)type metadata accessor for SheetBridge();
  return objc_msgSendSuper2(&v9, sel_dealloc);
}

id closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1)
{
  if ((*(uint64_t (**)(void))(a1 + 1200))()) {
    return 0;
  }
  type metadata accessor for SheetBridge();
  return PencilEventsBridge.__allocating_init()();
}

id @objc SheetBridge.init()()
{
  return SheetBridge.init()();
}

id SheetBridge.init()()
{
  uint64_t v1 = *MEMORY[0x1E4FBC8C8] & *v0;
  swift_unknownObjectWeakInit();
  *(_DWORD *)((char *)v0 + direct field offset for SheetBridge.seed) = 0;
  *(_DWORD *)((char *)v0 + direct field offset for SheetBridge.presentationOptionsTracker) = 0;
  *(_DWORD *)((char *)v0 + direct field offset for SheetBridge.backgroundTracker) = 0;
  *(_DWORD *)((char *)v0 + direct field offset for SheetBridge.interactiveDismissTracker) = 0;
  *(_DWORD *)((char *)v0 + direct field offset for SheetBridge.interactiveDismissHandlerSeed) = -1;
  uint64_t v2 = (void *)((char *)v0 + direct field offset for SheetBridge.interactiveDismissHandler);
  *uint64_t v2 = 0;
  v2[1] = 0;
  *((unsigned char *)v0 + direct field offset for SheetBridge.hasWindow) = 0;
  uint64_t v3 = (char *)v0 + direct field offset for SheetBridge.presentationState;
  *(_OWORD *)uint64_t v3 = 0u;
  *((_OWORD *)v3 + 1) = 0u;
  *((_OWORD *)v3 + 2) = 0u;
  *((_OWORD *)v3 + 3) = 0u;
  *((_OWORD *)v3 + 4) = 0u;
  *((_OWORD *)v3 + 5) = 0u;
  *((_OWORD *)v3 + 6) = 0u;
  *((_OWORD *)v3 + 7) = 0u;
  *((_OWORD *)v3 + 8) = 0u;
  *((_OWORD *)v3 + 9) = 0u;
  *((_OWORD *)v3 + 10) = 0u;
  *((_OWORD *)v3 + 11) = 0u;
  *((_OWORD *)v3 + 12) = 0u;
  *((_OWORD *)v3 + 13) = 0u;
  *(_OWORD *)(v3 + 217) = 0u;
  v3[233] = 10;
  swift_unknownObjectWeakInit();
  EnvironmentValues.init()();
  long long v5 = *(_OWORD *)(v1 + 80);
  long long v6 = *(_OWORD *)(v1 + 96);
  v7.receiver = v0;
  v7.super_class = (Class)type metadata accessor for SheetBridge();
  return objc_msgSendSuper2(&v7, sel_init, v5, v6);
}

uint64_t type metadata accessor for SheetBridge()
{
  return swift_getGenericMetadata();
}

uint64_t PresentationState.Base.presentedVC.getter()
{
  outlined init with copy of PresentationState.Base(v0, (uint64_t)&v3);
  uint64_t v1 = 0;
  switch(v6[105])
  {
    case 2:
    case 3:
    case 5:
      uint64_t v1 = v3;
      outlined destroy of SheetPreference((uint64_t)&v4);
      return v1;
    case 4:
    case 6:
      outlined destroy of SheetPreference((uint64_t)&v3);
      return 0;
    case 7:
      return v3;
    case 8:
      uint64_t v1 = v5;
      outlined destroy of SheetPreference((uint64_t)v6);
      goto LABEL_6;
    case 9:
      outlined destroy of PresentationState.Base((uint64_t)&v3);
      return 0;
    case 0xA:
      return v1;
    default:
      uint64_t v1 = v5;
LABEL_6:
      outlined destroy of SheetPreference((uint64_t)&v3);
      return v1;
  }
}

id specialized closure #1 in _UIHostingView.sheetBridge.getter(uint64_t a1)
{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<AnyView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<AnyView, RootModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<BarItemView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<TableRowView, CollectionViewCellModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<AnyView, ClarityUIInterfaceIdiomModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, SheetPreference.Key>);
}

{
  Class v2;

  if ((*(uint64_t (**)(void))(a1 + 1200))()) {
    return 0;
  }
  type metadata accessor for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>(0, &lazy cache variable for type metadata for SheetBridge<TestIDView<<<opaque return type of View.truePreference<A>(_:)>>.0, <<opaque return type of static _TestApp.rootViewIdentifier>>.0>, SheetPreference.Key>, (uint64_t)&type metadata for SheetPreference.Key, (uint64_t)&protocol witness table for SheetPreference.Key, (uint64_t (*)(uint64_t, void *))type metadata accessor for SheetBridge);
  return objc_msgSend(objc_allocWithZone(v2), sel_init);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<EmptyView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<BoundInputsView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<BridgedPresentation.RootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<TabItem.RootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<_IntelligenceSupport.AnimatingSummarySymbol, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<DocumentGroupsIntroRootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<_ViewList_View, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, ListTableCellModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<ModifiedContent<AnyView, DocumentSceneRootBoxModifier>, DocumentBaseModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<AnyView, DocumentBaseModifier>, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<InputAccessoryBar, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<BridgedNavigationView.RootView, SheetPreference.Key>);
}

{
  return specialized closure #1 in _UIHostingView.sheetBridge.getter(a1, (uint64_t (*)(void))type metadata accessor for SheetBridge<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, SheetPreference.Key>);
}

void type metadata accessor for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, SheetPreference.Key>);
    }
  }
}

id @objc ContextMenuBridge.__deallocating_deinit(void *a1)
{
  id v1 = a1;
  return ContextMenuBridge.__deallocating_deinit();
}

id ContextMenuBridge.__deallocating_deinit()
{
  uint64_t ObjectType = (objc_class *)swift_getObjectType();
  uint64_t v2 = *(void *)&v0[direct field offset for ContextMenuBridge.inspectorBridgeToken];
  if (v2)
  {
    uint64_t v3 = self;
    swift_unknownObjectRetain();
    id v4 = objc_msgSend(v3, sel_defaultCenter);
    objc_msgSend(v4, sel_removeObserver_, v2);
    swift_unknownObjectRelease();
  }
  v6.receiver = v0;
  v6.super_class = ObjectType;
  return objc_msgSendSuper2(&v6, sel_dealloc);
}

void type metadata accessor for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, ActionSheet.Presentation>);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<AnyView, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, Alert.Presentation>)
  {
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<AnyView, Alert.Presentation>);
    }
  }
}

uint64_t specialized UIHostingViewBase.init<A>(rootViewType:options:)(uint64_t a1, void (*a2)(void), unint64_t *a3, void (*a4)(uint64_t), void (*a5)(void))
{
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v5 + 48) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for UIViewPlatformViewDefinition();
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(void *)(v5 + 72) = DisplayList.ViewRenderer.init(platform:)();
  type metadata accessor for EventBindingManager();
  *(void *)(v5 + 80) = EventBindingManager.__allocating_init()();
  *(void *)(v5 + 88) = 0;
  static ViewRendererHostProperties.all.getter();
  *(unsigned char *)(v5 + 98) = 0;
  *(void *)(v5 + 104) = 0;
  *(_DWORD *)(v5 + 112) = 0;
  *(unsigned char *)(v5 + 116) = 1;
  *(_OWORD *)(v5 + 120) = xmmword_18834FC50;
  *(_OWORD *)(v5 + 136) = xmmword_18834FC50;
  *(void *)(v5 + 152) = 1;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(void *)(v5 + 192) = 0;
  *(unsigned char *)(v5 + 200) = 1;
  *(void *)(v5 + 208) = 0;
  *(unsigned char *)(v5 + 216) = 1;
  *(void *)(v5 + 232) = 0;
  *(void *)(v5 + 217) = 0;
  *(unsigned char *)(v5 + 225) = 0;
  *(_WORD *)(v5 + 240) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  a2(0);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(a3, a4, a5);
  uint64_t v11 = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  *(void *)(v5 + 56) = a1;
  *(void *)(v5 + 64) = v11;
  return v5;
}

uint64_t specialized UIHostingViewBase.init<A>(rootViewType:options:)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(void))
{
  swift_unknownObjectWeakInit();
  *(void *)(v4 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v4 + 48) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for UIViewPlatformViewDefinition();
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(void *)(v4 + 72) = DisplayList.ViewRenderer.init(platform:)();
  type metadata accessor for EventBindingManager();
  *(void *)(v4 + 80) = EventBindingManager.__allocating_init()();
  *(void *)(v4 + 88) = 0;
  static ViewRendererHostProperties.all.getter();
  *(unsigned char *)(v4 + 98) = 0;
  *(void *)(v4 + 104) = 0;
  *(_DWORD *)(v4 + 112) = 0;
  *(unsigned char *)(v4 + 116) = 1;
  *(_OWORD *)(v4 + 120) = xmmword_18834FC50;
  *(_OWORD *)(v4 + 136) = xmmword_18834FC50;
  *(void *)(v4 + 152) = 1;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(void *)(v4 + 192) = 0;
  *(unsigned char *)(v4 + 200) = 1;
  *(void *)(v4 + 208) = 0;
  *(unsigned char *)(v4 + 216) = 1;
  *(void *)(v4 + 232) = 0;
  *(void *)(v4 + 217) = 0;
  *(unsigned char *)(v4 + 225) = 0;
  *(_WORD *)(v4 + 240) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, a2, a3);
  type metadata accessor for ViewGraph();
  swift_allocObject();
  a4();
  uint64_t v9 = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  *(void *)(v4 + 56) = a1;
  *(void *)(v4 + 64) = v9;
  return v4;
}

uint64_t UIHostingViewBase.__allocating_init<A>(rootViewType:options:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_allocObject();
  UIHostingViewBase.init<A>(rootViewType:options:)(v3, a2);
  return v3;
}

uint64_t UIHostingViewBase.init<A>(rootViewType:options:)(uint64_t a1, uint64_t a2)
{
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 32) = 0;
  swift_unknownObjectWeakInit();
  *(void *)(v2 + 48) = 0;
  swift_unknownObjectWeakInit();
  type metadata accessor for UIViewPlatformViewDefinition();
  DisplayList.ViewUpdater.Platform.init(definition:)();
  type metadata accessor for DisplayList.ViewRenderer();
  swift_allocObject();
  *(void *)(v2 + 72) = DisplayList.ViewRenderer.init(platform:)();
  type metadata accessor for EventBindingManager();
  *(void *)(v2 + 80) = EventBindingManager.__allocating_init()();
  *(void *)(v2 + 88) = 0;
  static ViewRendererHostProperties.all.getter();
  *(unsigned char *)(v2 + 98) = 0;
  *(void *)(v2 + 104) = 0;
  *(_DWORD *)(v2 + 112) = 0;
  *(unsigned char *)(v2 + 116) = 1;
  *(_OWORD *)(v2 + 120) = xmmword_18834FC50;
  *(_OWORD *)(v2 + 136) = xmmword_18834FC50;
  *(void *)(v2 + 152) = 1;
  *(_OWORD *)(v2 + 160) = 0u;
  *(_OWORD *)(v2 + 176) = 0u;
  *(void *)(v2 + 192) = 0;
  *(unsigned char *)(v2 + 200) = 1;
  *(void *)(v2 + 208) = 0;
  *(unsigned char *)(v2 + 216) = 1;
  *(void *)(v2 + 232) = 0;
  *(void *)(v2 + 217) = 0;
  *(unsigned char *)(v2 + 225) = 0;
  *(_WORD *)(v2 + 240) = 1;
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakInit();
  type metadata accessor for ViewGraph();
  swift_allocObject();
  uint64_t v4 = ViewGraph.init<A>(rootViewType:requestedOutputs:)();
  *(void *)(v2 + 56) = a2;
  *(void *)(v2 + 64) = v4;
  return v2;
}

uint64_t type metadata accessor for UIViewPlatformViewDefinition()
{
  uint64_t result = type metadata singleton initialization cache for UIViewPlatformViewDefinition;
  if (!type metadata singleton initialization cache for UIViewPlatformViewDefinition) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void *specialized closure #1 in _UIHostingView.setRootView(_:transaction:)(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  unint64_t result = (void *)MEMORY[0x18C119DF0](v1);
  if (result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)result + *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0xC0));
    swift_retain();
    if (v4) {

    }
    swift_beginAccess();
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>();
    swift_retain();
    ViewGraph.setRootView<A>(_:)();

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

{
  uint64_t v1;
  void *result;
  void *v3;
  void *v4;

  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  unint64_t result = (void *)MEMORY[0x18C119DF0](v1);
  if (result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)result + *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0xC0));
    swift_retain();
    if (v4) {

    }
    swift_beginAccess();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
    swift_retain();
    ViewGraph.setRootView<A>(_:)();

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

{
  uint64_t v1;
  void *result;
  void *v3;
  void *v4;

  uint64_t v1 = a1 + 16;
  swift_beginAccess();
  unint64_t result = (void *)MEMORY[0x18C119DF0](v1);
  if (result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)MEMORY[0x18C119DF0]((char *)result + *(void *)((*MEMORY[0x1E4FBC8C8] & *result) + 0xC0));
    swift_retain();
    if (v4) {

    }
    swift_beginAccess();
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
    swift_retain();
    ViewGraph.setRootView<A>(_:)();

    swift_release();
    return (void *)swift_release();
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EditModeScopeModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier>();
    lazy protocol witness table accessor for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TestIDView<_TestApp.RootView, <<opaque return type of static _TestApp.comparisonViewIdentifier>>.0>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<AnyView> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>)
  {
    type metadata accessor for _SetStorage<ObjectIdentifier>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView> and conformance _UIHostingView<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<AnyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<AnyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<AnyView>.EnableVFDFeature, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.EnableVFDFeature);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature);
  }
  return result;
}

uint64_t outlined destroy of _UIHostingView<AnyView>.HostViewGraph(uint64_t a1)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, &lazy cache variable for type metadata for _UIHostingView<AnyView>.HostViewGraph, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<AnyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<AnyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph;
  if (!lazy protocol witness table cache variable for type _UIHostingView<AnyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for _UIHostingView<AnyView>.HostViewGraph, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView.HostViewGraph);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<AnyView>.HostViewGraph and conformance _UIHostingView<A>.HostViewGraph);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, ActionSheet.Presentation>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<AnyView, EditModeScopeModifier>);
    lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<AnyView, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for SheetBridge<AnyView, SheetPreference.Key>()
{
  if (!lazy cache variable for type metadata for SheetBridge<AnyView, SheetPreference.Key>)
  {
    unint64_t v0 = type metadata accessor for SheetBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for SheetBridge<AnyView, SheetPreference.Key>);
    }
  }
}

uint64_t protocol witness for View.body.getter in conformance ResolvedSearchFieldStyle@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI16SearchFieldStateVWOcTm_1(v1, a1, type metadata accessor for ResolvedSearchFieldStyle);
}

uint64_t protocol witness for StyleableView.configuration.getter in conformance ResolvedSearchFieldStyle@<X0>(uint64_t a1@<X8>)
{
  return _s7SwiftUI16SearchFieldStateVWOcTm_1(v1, a1, type metadata accessor for SearchFieldConfiguration);
}

void type metadata completion function for TokenFieldConfiguration()
{
  type metadata accessor for Binding<AttributedString>();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t protocol witness for Projection.get(base:) in conformance SearchStateProjection@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v5 = a1 + *(int *)(v4 + 48);
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool), (void (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString));
  int v7 = *(unsigned __int8 *)(a1 + *(int *)(v6 + 48));

  return SearchStateProjection.get(base:)(a1, v5, v7, a2);
}

uint64_t SearchField.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v56 = a2;
  uint64_t v53 = *(void *)(a1 - 8);
  uint64_t v55 = *(void *)(v53 + 64);
  MEMORY[0x1F4188790](a1);
  long long v54 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v57 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ResolvedSearchFieldStyle(255);
  uint64_t v6 = *(void *)(a1 + 16);
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, &lazy cache variable for type metadata for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTextFieldStyle and conformance SearchFieldConfigurationTextFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTextFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TextFieldStyleModifier);
  uint64_t v50 = v6;
  type metadata accessor for ModifiedContent();
  type metadata accessor for TextFieldStyleModifier<SearchFieldConfigurationTextFieldStyle>(255, (unint64_t *)&lazy cache variable for type metadata for TokenFieldStyleModifier<SearchFieldConfigurationTokenFieldStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type SearchFieldConfigurationTokenFieldStyle and conformance SearchFieldConfigurationTokenFieldStyle, (uint64_t)&type metadata for SearchFieldConfigurationTokenFieldStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TokenFieldStyleModifier);
  uint64_t v7 = type metadata accessor for ModifiedContent();
  unint64_t v8 = lazy protocol witness table accessor for type SearchFieldConfiguration.Control and conformance SearchFieldConfiguration.Control();
  uint64_t v73 = *(void *)(a1 + 24);
  uint64_t v74 = &protocol witness table for TextFieldStyleModifier<A>;
  uint64_t v51 = v73;
  uint64_t WitnessTable = swift_getWitnessTable();
  long long v72 = &protocol witness table for TokenFieldStyleModifier<A>;
  uint64_t v9 = swift_getWitnessTable();
  uint64_t v67 = &type metadata for SearchFieldConfiguration.Control;
  id v68 = (ValueMetadata *)v7;
  uint64_t v47 = v7;
  unint64_t v69 = v8;
  unint64_t v70 = v9;
  uint64_t v45 = v9;
  type metadata accessor for StaticSourceWriter();
  type metadata accessor for ModifiedContent();
  uint64_t IsNotConfiguredFromStyle = type metadata accessor for SearchField.IsNotConfiguredFromStyle();
  uint64_t v11 = swift_getWitnessTable();
  unint64_t HasSuggestions = lazy protocol witness table accessor for type SearchHasSuggestions and conformance SearchHasSuggestions();
  uint64_t v67 = (ValueMetadata *)IsNotConfiguredFromStyle;
  id v68 = &type metadata for SearchHasSuggestions;
  unint64_t v69 = v11;
  unint64_t v70 = HasSuggestions;
  uint64_t v13 = type metadata accessor for AndOperationViewInputPredicate();
  type metadata accessor for StaticSourceWriter<SearchFieldConfiguration.Suggestions, _UnaryViewAdaptor<ModifiedContent<TextInputSuggestions<ModifiedContent<ModifiedContent<ModifiedContent<EnvironmentValues.SearchSuggestions, SearchEnvironmentTransformModifier<SearchTextTransform>>, _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>>, OnChangeOfSuggestionsModifier>?>, DynamicHiddenModifier>?>>();
  uint64_t v15 = v14;
  uint64_t v16 = swift_getWitnessTable();
  uint64_t v67 = (ValueMetadata *)v13;
  id v68 = v15;
  unint64_t v69 = MEMORY[0x1E4F3F740];
  unint64_t v70 = v16;
  type metadata accessor for StaticIf();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v65 = lazy protocol witness table accessor for type AttributedString.Index and conformance AttributedString.Index(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedSearchFieldStyle);
  uint64_t v66 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v18 = swift_getWitnessTable();
  uint64_t v63 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v64 = MEMORY[0x1E4F3F738];
  uint64_t v19 = swift_getWitnessTable();
  uint64_t v61 = v18;
  uint64_t v62 = v19;
  uint64_t v48 = v17;
  uint64_t v46 = swift_getWitnessTable();
  uint64_t v67 = (ValueMetadata *)v17;
  id v68 = (ValueMetadata *)v7;
  unint64_t v69 = v46;
  unint64_t v70 = v9;
  uint64_t v20 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t v49 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  long long v22 = (char *)&v40 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  unint64_t v25 = (char *)&v40 - v24;
  uint64_t v26 = v52;
  SearchField.$state.getter(v57);
  uint64_t v27 = a1;
  uint64_t v41 = a1;
  uint64_t v28 = a1;
  uint64_t v29 = v26;
  uint64_t v44 = SearchField.$isPresented.getter(v28);
  uint64_t v43 = v30;
  int v42 = v31;
  uint64_t v32 = v53;
  uint64_t v33 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v53 + 16))(v54, v29, v27);
  unint64_t v34 = (*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v50;
  uint64_t v37 = v51;
  *(void *)(v35 + 16) = v50;
  *(void *)(v35 + 24) = v37;
  (*(void (**)(unint64_t, char *, uint64_t))(v32 + 32))(v35 + v34, v33, v41);
  uint64_t v58 = v36;
  uint64_t v59 = v37;
  uint64_t v60 = v29;
  SearchFieldConfigurationReader.init(state:isPresented:content:source:)(v57, v44, v43, v42 & 1, (uint64_t)partial apply for closure #1 in SearchField.body.getter, v35, partial apply for closure #2 in SearchField.body.getter, (uint64_t)v22);
  static ViewBuilder.buildExpression<A>(_:)(v22);
  uint64_t v38 = *(void (**)(char *, uint64_t))(v49 + 8);
  v38(v22, v20);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v38)(v25, v20);
}

uint64_t destroy for SearchFieldConfigurationReader(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 15;
  swift_release();
  swift_release();
  uint64_t v5 = type metadata accessor for AttributedString();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = v6 + 8;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t, uint64_t))(v6 + 8))((v8 + (((((v4 & 0xFFFFFFFFFFFFFFF8) + (v8 | 3) + 8) & ~(v8 | 3)) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 5) & ~v8, v5);
  unint64_t v9 = a1 + ((v8 + 16) & ~(v8 | 3)) + ((((v8 + 9) & ~v8) + *(void *)(v7 + 56)) & 0xFFFFFFFFFFFFFFFCLL);
  swift_release();
  swift_release();
  swift_release();
  uint64_t v10 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v11 = *(uint64_t (**)(unint64_t))(v10 + 8);
  unint64_t v12 = (((v9 + 40) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(v10 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);

  return v11(v12);
}

uint64_t SearchFieldConfigurationReader.init(state:isPresented:content:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(void)@<X6>, uint64_t a8@<X8>)
{
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_3(a1, a8, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v15 = type metadata accessor for SearchFieldConfigurationReader();
  uint64_t v16 = a8 + *(int *)(v15 + 52);
  *(void *)uint64_t v16 = a2;
  *(void *)(v16 + 8) = a3;
  *(unsigned char *)(v16 + 16) = a4;
  uint64_t v17 = (void *)(a8 + *(int *)(v15 + 56));
  *uint64_t v17 = a5;
  v17[1] = a6;
  return a7();
}

uint64_t SearchField.$isPresented.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 36));
  uint64_t v3 = *v2;
  if (*((unsigned char *)v2 + 17))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<SearchSuggestionsPlacement>(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

void type metadata completion function for SearchPrimitiveModifier.FocusStoreListFilter()
{
  type metadata accessor for SearchFieldState?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

void type metadata completion function for SearchEnvironmentWritingModifier()
{
  type metadata accessor for Binding<SearchFieldState>(319);
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<AttributedString>();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

void type metadata completion function for SearchModifier()
{
  swift_checkMetadataState();
  if (v0 <= 0x3F)
  {
    type metadata accessor for Binding<AttributedString>();
    if (v1 <= 0x3F)
    {
      type metadata accessor for Binding<AttributedString>(319, &lazy cache variable for type metadata for State<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41580]);
      if (v2 <= 0x3F) {
        swift_initStructMetadata();
      }
    }
  }
}

void type metadata completion function for DismissSearchAction()
{
  type metadata accessor for Binding<SearchFieldState>?(319);
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance ResolvedSearchFieldStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle, (void (*)(uint64_t))type metadata accessor for ResolvedSearchFieldStyle);

  return MEMORY[0x1F40FDF98](a1, a2, a3, v6);
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SearchFieldConfiguration.Key(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v14 - v9;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_3(a1, (uint64_t)v7, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, v4);
  uint64_t v11 = type metadata accessor for SearchFieldConfiguration.Data(0);
  uint64_t v12 = *(void *)(v11 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v7, 1, v11) == 1)
  {
    a2();
    outlined destroy of SearchFieldConfiguration.Data?((uint64_t)v7, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
  }
  else
  {
    outlined init with take of SearchFieldState((uint64_t)v7, (uint64_t)v10, type metadata accessor for SearchFieldConfiguration.Data);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v10, 0, 1, v11);
  }
  return _s7SwiftUI7BindingVyAA16SearchFieldStateVGWObTm_3((uint64_t)v10, a1, &lazy cache variable for type metadata for SearchFieldConfiguration.Data?, type metadata accessor for SearchFieldConfiguration.Data, MEMORY[0x1E4FBB718]);
}

uint64_t keypath_getTm@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

void keypath_getTm_0()
{
}

uint64_t keypath_getTm_1@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  *a2 = v2;
  a2[1] = v3;
  return swift_retain();
}

uint64_t keypath_getTm_2(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = a4(0, *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t keypath_getTm_3@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t keypath_getTm_4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t keypath_getTm_5@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, uint64_t)@<X3>, unsigned char *a4@<X8>)
{
  uint64_t result = a3(a1, a2);
  *a4 = result & 1;
  return result;
}

uint64_t keypath_getTm_6(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void, void, void), uint64_t (*a5)(uint64_t))
{
  uint64_t v6 = a4(0, *(void *)(a3 + a2 - 16), *(void *)(a3 + a2 - 8));
  return a5(v6);
}

uint64_t partial apply for closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(uint64_t a1)
{
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v4 = *(void *)(v1 + 96);
  uint64_t v5 = *(void *)(v1 + 104);
  uint64_t v6 = v1
     + ((*(unsigned __int8 *)(*(void *)(v3 - 8) + 80) + 112) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v3 - 8) + 80));

  return closure #1 in SearchPrimitiveModifier.FocusStoreListFilter.updateValue()(a1, v1 + 16, v4, v5, v6);
}

uint64_t SearchZipLocation.update()(uint64_t a1, char *a2)
{
  uint64_t v38 = a1;
  uint64_t v39 = a2;
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, &lazy cache variable for type metadata for (AttributedString, Bool), MEMORY[0x1E4F273A8]);
  uint64_t v3 = v2 - 8;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v34 - v7;
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, &lazy cache variable for type metadata for (SearchFieldState, Bool), (void (*)(uint64_t))type metadata accessor for SearchFieldState);
  uint64_t v10 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v34 = (uint64_t)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v37 = (uint64_t)&v34 - v13;
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v34 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v21 = *(int *)(v20 + 48);
  int v36 = dispatch thunk of AnyLocation.update()();
  uint64_t v22 = v36 & 1;
  v19[v21] = v36 & 1;
  uint64_t v23 = *(int *)(v3 + 56);
  uint64_t v35 = v8;
  char v24 = dispatch thunk of AnyLocation.update()() & 1;
  v8[v23] = v24;
  uint64_t v25 = *(int *)(v10 + 48);
  _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v19, (uint64_t)v16, type metadata accessor for SearchFieldState);
  v16[v25] = v22;
  outlined init with take of SearchFieldState((uint64_t)v16, v38, type metadata accessor for SearchFieldState);
  uint64_t v26 = *(int *)(v3 + 56);
  uint64_t v27 = type metadata accessor for AttributedString();
  uint64_t v28 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 32);
  v28(v5, v35, v27);
  v5[v26] = v24;
  v28(v39, v5, v27);
  uint64_t v29 = *(int *)(v10 + 48);
  uint64_t v30 = v37;
  outlined init with take of SearchFieldState((uint64_t)v19, v37, type metadata accessor for SearchFieldState);
  *(unsigned char *)(v30 + v29) = v22;
  if (v36)
  {
    outlined destroy of (SearchFieldState, Bool)(v30, &lazy cache variable for type metadata for (SearchFieldState, Bool), (void (*)(uint64_t))type metadata accessor for SearchFieldState);
  }
  else
  {
    uint64_t v31 = *(int *)(v10 + 48);
    uint64_t v32 = v34;
    outlined init with take of SearchFieldState(v30, v34, type metadata accessor for SearchFieldState);
    *(unsigned char *)(v32 + v31) = v22;
    _s7SwiftUI16SearchFieldStateVWOhTm_5(v32, type metadata accessor for SearchFieldState);
  }
  return v22;
}

uint64_t specialized static ResetSearchEnvironmentModifier.makeEnvironment(modifier:environment:)(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  swift_retain_n();
  if (v2)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  if (LOBYTE(v5[0]) == 4)
  {
    LOBYTE(v5[0]) = 3;
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain();
    PropertyList.subscript.setter();
    if (v2)
    {
      swift_retain();
      swift_retain();
      PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
      swift_release();
      swift_release();
    }
    swift_release();
  }
  LOBYTE(v5[0]) = 7;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  *(void *)&v5[0] = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v5[0]) = 0;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  LOBYTE(v5[0]) = 2;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchScopeActivationKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  memset(v5, 0, sizeof(v5));
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOcTm_0((uint64_t)v5, (uint64_t)&v4, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (v2)
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_1((uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for SearchFocusContext?, (uint64_t)&type metadata for SearchFocusContext, MEMORY[0x1E4FBB718]);
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
  v5[0] = 0uLL;
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a1 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction>, (uint64_t)&type metadata for EnvironmentValues.__Key_searchTextClearAction, (uint64_t)&protocol witness table for EnvironmentValues.__Key_searchTextClearAction, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_searchTextClearAction> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

uint64_t SearchModifier.adjustedState.getter@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v40 = a2;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v5 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (uint64_t *)((char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<(SearchFieldState, AttributedString)>(0);
  uint64_t v13 = v12;
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (uint64_t *)((char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>(0);
  uint64_t v37 = v16;
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (uint64_t *)((char *)&v34 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v35 = a1;
  uint64_t v36 = v2;
  type metadata accessor for Binding<AttributedString>(0, &lazy cache variable for type metadata for State<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41580]);
  State.projectedValue.getter();
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(v2 + *(int *)(a1 + 44), (uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  uint64_t v19 = v11[1];
  uint64_t v20 = *((void *)v7 + 1);
  uint64_t v38 = v13;
  swift_retain();
  swift_retain();
  uint64_t v39 = v9;
  MEMORY[0x18C113DA0](v9);
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v22 = v21;
  MEMORY[0x18C113DA0](v5);
  uint64_t v43 = v19;
  uint64_t v44 = v20;
  type metadata accessor for LocationBox<SearchZipLocation>();
  swift_allocObject();
  uint64_t v23 = LocationBox.init(_:)();
  *uint64_t v15 = *v11;
  v15[1] = v23;
  swift_retain();
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v7, (uint64_t (*)(void))type metadata accessor for Binding<AttributedString>);
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for Binding<SearchFieldState>);
  char v24 = (uint64_t *)(v36 + *(int *)(v35 + 48));
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  if (*((unsigned char *)v24 + 17))
  {
    char v27 = v24[2] & 1;
    swift_retain();
    swift_retain();
  }
  else
  {
    char v41 = v25 & 1;
    uint64_t v42 = v26;
    _s7SwiftUI5StateVySbGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for State<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41580]);
    State.projectedValue.getter();
    uint64_t v25 = v43;
    uint64_t v26 = v44;
    char v27 = v45;
  }
  uint64_t v43 = v25;
  uint64_t v44 = v26;
  char v45 = v27;
  Binding.zip<A>(with:)();
  swift_release();
  swift_release();
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v15, (uint64_t (*)(void))type metadata accessor for Binding<(SearchFieldState, AttributedString)>);
  uint64_t v28 = (uint64_t)v18 + *(int *)(v37 + 32);
  uint64_t v29 = v28 + *(int *)(v22 + 48);
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)();
  uint64_t v31 = v40;
  SearchStateProjection.get(base:)(v28, v29, *(unsigned __int8 *)(v28 + *(int *)(v30 + 48)), (uint64_t)v40 + *(int *)(v39 + 32));
  lazy protocol witness table accessor for type SearchStateProjection and conformance SearchStateProjection();
  uint64_t v32 = dispatch thunk of AnyLocation.projecting<A>(_:)();
  *uint64_t v31 = *v18;
  v31[1] = v32;
  swift_retain();
  return outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v18, (uint64_t (*)(void))type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>);
}

uint64_t specialized static SearchEnvironmentWritingModifier.makeEnvironment(modifier:environment:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for SearchFieldState(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v6 = type metadata accessor for SearchEnvironmentWritingModifier(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = &v14[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Value = AGGraphGetValue();
  _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(Value, (uint64_t)v8, type metadata accessor for SearchEnvironmentWritingModifier);
  uint64_t v10 = *(int *)(v6 + 24);
  v14[15] = v8[v10];
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  type metadata accessor for Binding<SearchFieldState>(0);
  MEMORY[0x18C113DA0]();
  BOOL v11 = *v5 != 2;
  outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v5, type metadata accessor for SearchFieldState);
  v14[14] = v11;
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(a2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();
  if (v8[v10] == 4)
  {
    uint64_t v12 = *(void *)(a2 + 8);
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    if (v12)
    {
      swift_retain_n();
      PropertyList.Tracker.value<A>(_:for:)();
      swift_release_n();
    }
    else
    {
      PropertyList.subscript.getter();
    }
    swift_release_n();
    if (!v14[13])
    {
      v14[12] = 1;
      type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey>);
      lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.DefaultToolbarRoleKey> and conformance EnvironmentPropertyKey<A>();
      swift_retain();
      PropertyList.subscript.setter();
      if (v12)
      {
        swift_retain();
        swift_retain();
        PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
        swift_release();
        swift_release();
      }
      swift_release();
    }
  }
  return outlined destroy of SearchEnvironmentWritingModifier((uint64_t)v8, type metadata accessor for SearchEnvironmentWritingModifier);
}

uint64_t outlined init with copy of Binding<AttributedString>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI7BindingVy10Foundation16AttributedStringVGWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for Binding<AttributedString>()
{
  if (!lazy cache variable for type metadata for Binding<AttributedString>)
  {
    type metadata accessor for AttributedString();
    unint64_t v0 = type metadata accessor for Binding();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<AttributedString>);
    }
  }
}

uint64_t outlined destroy of SearchEnvironmentWritingModifier(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for Binding<SearchFieldState>?(uint64_t a1)
{
}

void type metadata accessor for Binding<TabViewCustomization>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t type metadata accessor for SearchEnvironmentWritingModifier(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for SearchEnvironmentWritingModifier);
}

void type metadata accessor for Binding<AttributedString>?(uint64_t a1)
{
}

void type metadata accessor for Binding<AttributedString>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void _s7SwiftUI7BindingVy10Foundation16AttributedStringVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for AttributedString();
    unint64_t v7 = a3(a1, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.__Key_searchStorage>(255, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey>, (uint64_t)&type metadata for EnvironmentValues.SearchFieldPlacementKey, (uint64_t)&protocol witness table for EnvironmentValues.SearchFieldPlacementKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFieldPlacementKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for Binding<SearchFieldState>(uint64_t a1)
{
}

void type metadata accessor for SearchFieldState?(uint64_t a1)
{
}

void *initializeWithCopy for SearchEnvironmentWritingModifier(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  type metadata accessor for Binding<SearchFieldState>(0);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  uint64_t v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v26 = &v8[v11];
  uint64_t v12 = &v9[v11];
  uint64_t v13 = type metadata accessor for AttributedString();
  char v27 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 16);
  swift_retain();
  swift_retain();
  v27(v26, v12, v13);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v14 = v10[11];
  uint64_t v15 = &v8[v14];
  uint64_t v16 = &v9[v14];
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = *(int *)(a3 + 20);
  uint64_t v18 = (void *)((char *)a1 + v17);
  uint64_t v19 = (char *)a2 + v17;
  uint64_t v20 = *(void *)((char *)a2 + v17 + 8);
  *uint64_t v18 = *(void *)((char *)a2 + v17);
  v18[1] = v20;
  type metadata accessor for Binding<AttributedString>();
  uint64_t v22 = *(int *)(v21 + 32);
  uint64_t v23 = (char *)v18 + v22;
  char v24 = &v19[v22];
  swift_retain();
  swift_retain();
  v27(v23, v24, v13);
  *((unsigned char *)a1 + *(int *)(a3 + 24)) = *((unsigned char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t key path getter for EnvironmentValues.isSearching : EnvironmentValues@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.isSearching.getter();
  *a1 = result & 1;
  return result;
}

uint64_t EnvironmentValues.isSearching.getter()
{
  return EnvironmentValues.searchFieldPlacement.getter(&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>, (uint64_t)&type metadata for EnvironmentValues.IsSearchingKey, (uint64_t)&protocol witness table for EnvironmentValues.IsSearchingKey, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsSearchingKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void type metadata accessor for Binding<((SearchFieldState, AttributedString), Bool)>(uint64_t a1)
{
}

void type metadata accessor for Binding<(SearchFieldState, AttributedString)>(uint64_t a1)
{
}

uint64_t SearchStateProjection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  int v71 = a3;
  unint64_t v69 = (unsigned char *)a4;
  uint64_t v6 = type metadata accessor for AttributedString();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v56 = (char *)&v54 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9);
  uint64_t v55 = (char *)&v54 - v10;
  MEMORY[0x1F4188790](v11);
  id v68 = (char *)&v54 - v12;
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool), (void (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString));
  unint64_t v70 = (char *)(v13 - 8);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v64 = (uint64_t)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v63 = (uint64_t)&v54 - v16;
  MEMORY[0x1F4188790](v17);
  uint64_t v60 = (uint64_t)&v54 - v18;
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v54 - v20;
  type metadata accessor for (SearchFieldState, AttributedString)();
  uint64_t v23 = v22 - 8;
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v54 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = &v25[*(int *)(v23 + 56)];
  uint64_t v67 = type metadata accessor for SearchFieldState;
  _s7SwiftUI16SearchFieldStateVWOcTm_1(a1, (uint64_t)v25, type metadata accessor for SearchFieldState);
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
  uint64_t v66 = v7;
  v65(v26, a2, v6);
  char v27 = &v21[*(int *)(v23 + 56)];
  uint64_t v59 = type metadata accessor for SearchFieldState;
  outlined init with take of SearchFieldState((uint64_t)v25, (uint64_t)v21, type metadata accessor for SearchFieldState);
  uint64_t v61 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
  uint64_t v58 = v6;
  v61(v27, v26, v6);
  uint64_t v28 = (uint64_t)v70;
  LOBYTE(v7) = v71;
  v21[*((int *)v70 + 14)] = v71;
  uint64_t v57 = *(int *)(v28 + 56);
  uint64_t v29 = v60;
  uint64_t v62 = (char *)(v60 + *(int *)(v23 + 56));
  uint64_t v30 = v62;
  uint64_t v31 = v67;
  _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v21, v60, v67);
  uint64_t v32 = v30;
  uint64_t v33 = (void (*)(uint64_t, char *, uint64_t))v65;
  v65(v32, (uint64_t)v27, v6);
  *(unsigned char *)(v29 + v57) = v7;
  outlined init with take of SearchFieldState(v29, (uint64_t)v69, v59);
  uint64_t v60 = *((int *)v70 + 14);
  uint64_t v34 = v63;
  uint64_t v35 = (char *)(v63 + *(int *)(v23 + 56));
  _s7SwiftUI16SearchFieldStateVWOcTm_1((uint64_t)v21, v63, v31);
  uint64_t v36 = v27;
  uint64_t v37 = v58;
  v33((uint64_t)v35, v27, v58);
  uint64_t v38 = v33;
  char v39 = v71;
  *(unsigned char *)(v34 + v60) = v71;
  uint64_t v40 = v34;
  LOBYTE(v34) = v39;
  v61(v68, v35, v37);
  uint64_t v41 = *((int *)v70 + 14);
  uint64_t v42 = v64 + *(int *)(v23 + 56);
  unint64_t v70 = v21;
  uint64_t v43 = (uint64_t)v21;
  uint64_t v44 = v37;
  uint64_t v45 = v64;
  _s7SwiftUI16SearchFieldStateVWOcTm_1(v43, v64, v67);
  v38(v42, v36, v44);
  *(unsigned char *)(v45 + v41) = v34;
  uint64_t v46 = v69;
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v66 + 8);
  v47(v42, v44);
  _s7SwiftUI16SearchFieldStateVWOhTm_5(v45, type metadata accessor for SearchFieldState);
  _s7SwiftUI16SearchFieldStateVWOhTm_5(v40, type metadata accessor for SearchFieldState);
  v47((uint64_t)v62, v44);
  uint64_t v48 = &v46[*(int *)(type metadata accessor for SearchFieldState(0) + 36)];
  lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(&lazy protocol witness table cache variable for type AttributedString and conformance AttributedString, MEMORY[0x1E4F273A8]);
  uint64_t v49 = v68;
  if ((dispatch thunk of static Equatable.== infix(_:_:)() & 1) == 0)
  {
    uint64_t v50 = v55;
    uint64_t v51 = v65;
    v65(v55, (uint64_t)v49, v44);
    uint64_t v52 = v56;
    v51(v56, (uint64_t)v48, v44);
    (*(void (**)(unsigned char *, char *, uint64_t))(v66 + 24))(v48, v50, v44);
    SearchFieldState.textDidChange(from:)();
    v47((uint64_t)v50, v44);
    v47((uint64_t)v52, v44);
  }
  if ((((*v46 == 2) ^ v71) & 1) == 0) {
    SearchFieldState.updateIsSearching(_:)(v71 & 1);
  }
  v47((uint64_t)v49, v44);
  return outlined destroy of (SearchFieldState, Bool)((uint64_t)v70, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool), (void (*)(uint64_t))type metadata accessor for (SearchFieldState, AttributedString));
}

uint64_t outlined init with copy of SearchFieldState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOcTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16SearchFieldStateVWOcTm_1(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t initializeWithCopy for SearchFieldState(uint64_t a1, uint64_t a2, int *a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(_WORD *)(a1 + 2) = *(_WORD *)(a2 + 2);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v6 = a3[9];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for AttributedString();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16))(v7, v8, v9);
  uint64_t v10 = a3[11];
  *(unsigned char *)(a1 + a3[10]) = *(unsigned char *)(a2 + a3[10]);
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
  *(unsigned char *)(v11 + 4) = *(unsigned char *)(v12 + 4);
  return a1;
}

uint64_t outlined init with take of SearchFieldState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void *initializeWithCopy for ResolvedSearchFieldStyle(void *a1, void *a2)
{
  uint64_t v31 = a2[1];
  *a1 = *a2;
  a1[1] = v31;
  _s7SwiftUI7BindingVyAA16SearchFieldStateVGMaTm_4(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v5 = *(int *)(v4 + 32);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  *uint64_t v6 = *((unsigned char *)a2 + v5);
  v6[1] = *((unsigned char *)a2 + v5 + 1);
  *((_WORD *)v6 + 1) = *(_WORD *)((char *)a2 + v5 + 2);
  unsigned char v6[8] = *((unsigned char *)a2 + v5 + 8);
  *((_DWORD *)v6 + 1) = *(_DWORD *)((char *)a2 + v5 + 4);
  uint64_t v8 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v9 = v8[9];
  uint64_t v10 = &v6[v9];
  uint64_t v11 = &v7[v9];
  uint64_t v12 = type metadata accessor for AttributedString();
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16);
  swift_retain();
  swift_retain();
  v13(v10, v11, v12);
  v6[v8[10]] = v7[v8[10]];
  uint64_t v14 = v8[11];
  uint64_t v15 = &v6[v14];
  uint64_t v16 = &v7[v14];
  v15[4] = v16[4];
  *(_DWORD *)uint64_t v15 = *(_DWORD *)v16;
  uint64_t v17 = (int *)type metadata accessor for SearchFieldConfiguration(0);
  uint64_t v18 = v17[6];
  uint64_t v19 = (char *)a1 + v18;
  uint64_t v20 = (char *)a2 + v18;
  int v21 = v20[8];
  if (v21 == 255)
  {
    *(void *)uint64_t v19 = *(void *)v20;
    v19[8] = v20[8];
  }
  else
  {
    char v22 = v21 & 1;
    uint64_t v23 = *(void *)v20;
    outlined copy of PlatformItemCollection.Storage(*(void *)v20, v21 & 1);
    *(void *)uint64_t v19 = v23;
    v19[8] = v22;
  }
  *((unsigned char *)a1 + v17[7]) = *((unsigned char *)a2 + v17[7]);
  uint64_t v24 = v17[8];
  uint64_t v25 = (char *)a1 + v24;
  uint64_t v26 = (char *)a2 + v24;
  uint64_t v27 = *(void *)((char *)a2 + v24);
  uint64_t v28 = *((void *)v26 + 1);
  char v29 = v26[16];
  outlined copy of Text.Storage(v27, v28, v29);
  *(void *)uint64_t v25 = v27;
  *((void *)v25 + 1) = v28;
  v25[16] = v29;
  *((void *)v25 + 3) = *((void *)v26 + 3);
  swift_bridgeObjectRetain();
  return a1;
}

void type metadata accessor for StateOrBinding<SearchFieldState>(uint64_t a1)
{
}

void type metadata accessor for (SearchFieldState, AttributedString)()
{
  if (!lazy cache variable for type metadata for (SearchFieldState, AttributedString))
  {
    type metadata accessor for SearchFieldState(255);
    type metadata accessor for AttributedString();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SearchFieldState, AttributedString));
    }
  }
}

uint64_t lazy protocol witness table accessor for type ResolvedSearchFieldStyle and conformance ResolvedSearchFieldStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined destroy of (SearchFieldState, Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  type metadata accessor for ((SearchFieldState, AttributedString), Bool)(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for ((SearchFieldState, AttributedString), Bool)(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

uint64_t type metadata accessor for ResolvedSearchFieldStyle(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for ResolvedSearchFieldStyle);
}

unint64_t lazy protocol witness table accessor for type SearchStateProjection and conformance SearchStateProjection()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection;
  if (!lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection;
  if (!lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection;
  if (!lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchStateProjection and conformance SearchStateProjection);
  }
  return result;
}

void type metadata accessor for ((SearchFieldState, AttributedString), Bool)()
{
  if (!lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool))
  {
    type metadata accessor for (SearchFieldState, AttributedString)();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for ((SearchFieldState, AttributedString), Bool));
    }
  }
}

void type metadata accessor for LocationBox<SearchZipLocation>()
{
  if (!lazy cache variable for type metadata for LocationBox<SearchZipLocation>)
  {
    lazy protocol witness table accessor for type SearchZipLocation and conformance SearchZipLocation();
    unint64_t v0 = type metadata accessor for LocationBox();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for LocationBox<SearchZipLocation>);
    }
  }
}

void type metadata accessor for (SearchFieldState?, SearchFieldState?)()
{
  if (!lazy cache variable for type metadata for (SearchFieldState?, SearchFieldState?))
  {
    type metadata accessor for SearchFieldState?(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (SearchFieldState?, SearchFieldState?));
    }
  }
}

void type metadata accessor for EnvironmentPropertyKey<TabViewContentDisplayMode.Key>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SearchZipLocation and conformance SearchZipLocation()
{
  unint64_t result = lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation;
  if (!lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation;
  if (!lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SearchZipLocation and conformance SearchZipLocation);
  }
  return result;
}

uint64_t partial apply for closure #1 in NavigationAuthority.enqueueRequest(_:)()
{
  return NavigationAuthority.flushRequestQueue()();
}

double static AlertModifier._makeView(modifier:inputs:body:)@<D0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, uint64_t *)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, double *a8@<X8>)
{
  uint64_t v60 = a7;
  uint64_t v61 = a8;
  uint64_t v57 = a4;
  uint64_t v58 = a6;
  uint64_t v104 = *MEMORY[0x1E4F143B8];
  int v59 = *a1;
  uint64_t v10 = *(void *)a2;
  uint64_t v11 = *(void *)(a2 + 16);
  int v12 = *(_DWORD *)(a2 + 24);
  int v65 = *(_DWORD *)(a2 + 8);
  LODWORD(v66) = v12;
  int v13 = *(_DWORD *)(a2 + 32);
  HIDWORD(v66) = *(_DWORD *)(a2 + 28);
  LODWORD(v67) = v13;
  int v14 = *(_DWORD *)(a2 + 36);
  uint64_t v15 = *(void *)(a2 + 40);
  uint64_t v64 = *(void *)(a2 + 48);
  unsigned int v17 = *(_DWORD *)(a2 + 56);
  unsigned int v16 = *(_DWORD *)(a2 + 60);
  HIDWORD(v67) = v14;
  unsigned int v68 = v16;
  unsigned int v18 = *(_DWORD *)(a2 + 64);
  int v19 = *(_DWORD *)(a2 + 72);
  unsigned int v62 = *(_DWORD *)(a2 + 68);
  LODWORD(v63) = v19;
  HIDWORD(v63) = *(_DWORD *)(a2 + 76);
  int v20 = *(_DWORD *)(a2 + 80);
  unsigned int v69 = v18;
  int v70 = v20;
  lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v88)
  {
    MEMORY[0x18C112B90](0xD000000000000041, 0x8000000188327C80);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v21 = swift_release();
    uint64_t v88 = v10;
    LODWORD(v89) = v65;
    uint64_t v90 = v11;
    uint64_t v91 = v66;
    uint64_t v92 = v67;
    *(void *)&long long v93 = v15;
    *((void *)&v93 + 1) = v64;
    *(void *)&long long v94 = __PAIR64__(v68, v17);
    *((void *)&v94 + 1) = __PAIR64__(v62, v69);
    *(void *)&long long v95 = v63;
    DWORD2(v95) = v70;
    a3(v21, &v88);
  }
  else
  {
    lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v23 = swift_release();
    uint64_t v88 = v10;
    LODWORD(v89) = v65;
    uint64_t v90 = v11;
    uint64_t v91 = v66;
    uint64_t v92 = v67;
    *(void *)&long long v93 = v15;
    *((void *)&v93 + 1) = v64;
    unsigned int v56 = v17;
    *(void *)&long long v94 = __PAIR64__(v68, v17);
    *((void *)&v94 + 1) = __PAIR64__(v62, v69);
    *(void *)&long long v95 = v63;
    DWORD2(v95) = v70;
    ((void (*)(uint64_t *__return_ptr, uint64_t, uint64_t *))a3)(&v72, v23, &v88);
    LODWORD(v76) = v59;
    uint64_t v24 = v57;
    uint64_t v88 = v57;
    uint64_t v89 = a5;
    uint64_t v55 = a5;
    uint64_t v25 = v58;
    uint64_t v90 = v58;
    uint64_t v91 = v60;
    type metadata accessor for AlertModifier();
    uint64_t v54 = type metadata accessor for _GraphValue();
    _GraphValue.value.getter();
    if (*(void *)(*(void *)(v57 - 8) + 64)) {
      closure #1 in static AlertModifier._makeView(modifier:inputs:body:)(1, v57, v55, v58, v60);
    }
    int OffsetAttribute2 = AGGraphCreateOffsetAttribute2();
    uint64_t v76 = (void *)v10;
    int v77 = v65;
    uint64_t v78 = v11;
    uint64_t v79 = v66;
    uint64_t v80 = v67;
    *(void *)&long long v81 = v15;
    *((void *)&v81 + 1) = v64;
    *(void *)&long long v82 = __PAIR64__(v68, v56);
    *((void *)&v82 + 1) = __PAIR64__(v62, v69);
    *(void *)&long long v83 = v63;
    DWORD2(v83) = v70;
    id v27 = PlatformItemListGenerator<>.init(content:inputs:inputsIncludeGeometry:)(OffsetAttribute2, (uint64_t *)&v76, 1, (uint64_t)&v88);
    uint64_t v52 = v50;
    uint64_t v76 = (void *)v88;
    int v77 = v89;
    uint64_t v78 = v90;
    LODWORD(v79) = v91;
    uint64_t v80 = v92;
    long long v81 = v93;
    long long v82 = v94;
    long long v83 = v95;
    uint64_t v84 = v96;
    int v85 = v97;
    char v86 = v98;
    int v87 = v99;
    MEMORY[0x1F4188790](v27);
    *(void *)&long long v100 = &type metadata for AllPlatformItemListFlags;
    *((void *)&v100 + 1) = v24;
    *(void *)&long long v101 = &protocol witness table for AllPlatformItemListFlags;
    *((void *)&v101 + 1) = v25;
    uint64_t v48 = type metadata accessor for PlatformItemListGenerator();
    uint64_t WitnessTable = swift_getWitnessTable();
    _s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1(0, &lazy cache variable for type metadata for Attribute<PlatformItemList>, (uint64_t)&type metadata for PlatformItemList, MEMORY[0x1E4F4E740]);
    uint64_t v29 = v28;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v53 = v29;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v76, (uint64_t)partial apply for closure #1 in Attribute.init<A>(_:), (uint64_t)v47, v48, MEMORY[0x1E4FBC248], v29, MEMORY[0x1E4FBC278], v30);
    uint64_t v51 = 0;
    uint64_t v31 = v76;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    LODWORD(v52) = v100;
    LODWORD(v88) = v59;
    _GraphValue.value.getter();
    uint64_t v32 = v55;
    uint64_t v33 = v60;
    if (*(void *)(*(void *)(v55 - 8) + 64)) {
      closure #2 in static AlertModifier._makeView(modifier:inputs:body:)(1, v57, v55, v58, v60);
    }
    int v34 = AGGraphCreateOffsetAttribute2();
    uint64_t v88 = v10;
    LODWORD(v89) = v65;
    uint64_t v90 = v11;
    uint64_t v91 = v66;
    uint64_t v92 = v67;
    uint64_t v35 = v64;
    *(void *)&long long v93 = v15;
    *((void *)&v93 + 1) = v64;
    *(void *)&long long v94 = __PAIR64__(v68, v56);
    *((void *)&v94 + 1) = __PAIR64__(v62, v69);
    *(void *)&long long v95 = v63;
    DWORD2(v95) = v70;
    id v36 = PlatformItemListGenerator.init(flags:content:inputs:inputsIncludeGeometry:)(v34, &v88, 1, (uint64_t)&v76);
    v50[1] = v47;
    uint64_t v88 = (uint64_t)v76;
    LODWORD(v89) = v77;
    uint64_t v90 = v78;
    LODWORD(v91) = v79;
    uint64_t v92 = v80;
    long long v93 = v81;
    long long v94 = v82;
    long long v95 = v83;
    uint64_t v96 = v84;
    int v97 = v85;
    char v98 = v86;
    int v99 = v87;
    MEMORY[0x1F4188790](v36);
    *(void *)&long long v100 = &type metadata for TextPlatformItemListFlags;
    *((void *)&v100 + 1) = v32;
    *(void *)&long long v101 = &protocol witness table for TextPlatformItemListFlags;
    *((void *)&v101 + 1) = v33;
    uint64_t v45 = type metadata accessor for PlatformItemListGenerator();
    uint64_t v46 = swift_getWitnessTable();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v88, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v44, v45, MEMORY[0x1E4FBC248], v53, MEMORY[0x1E4FBC278], v37);
    uint64_t v38 = (void *)v88;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();

    swift_release();
    LODWORD(v51) = v100;
    uint64_t v88 = v10;
    LODWORD(v89) = v65;
    uint64_t v90 = v11;
    uint64_t v91 = v66;
    uint64_t v92 = v67;
    *(void *)&long long v93 = v15;
    *((void *)&v93 + 1) = v35;
    LODWORD(v35) = v56;
    *(void *)&long long v94 = __PAIR64__(v68, v56);
    LODWORD(v38) = v62;
    unsigned int v39 = v63;
    *((void *)&v94 + 1) = __PAIR64__(v62, v69);
    unsigned int v40 = HIDWORD(v63);
    *(void *)&long long v95 = v63;
    DWORD2(v95) = v70;
    LODWORD(v53) = _ViewInputs.environment.getter();
    LODWORD(v88) = v59;
    int v59 = _GraphValue.value.getter();
    uint64_t v54 = AGCreateWeakAttribute();
    uint64_t v52 = (void *)AGCreateWeakAttribute();
    uint64_t v88 = v10;
    LODWORD(v89) = v65;
    uint64_t v90 = v11;
    uint64_t v91 = v66;
    uint64_t v92 = v67;
    *(void *)&long long v93 = v15;
    uint64_t v41 = v64;
    *((void *)&v93 + 1) = v64;
    *(void *)&long long v94 = __PAIR64__(v68, v35);
    *((void *)&v94 + 1) = __PAIR64__(v38, v69);
    *(void *)&long long v95 = __PAIR64__(v40, v39);
    DWORD2(v95) = v70;
    int v42 = _ViewInputs.viewPhase.getter();
    LOBYTE(v74) = 2;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    char v103 = 0;
    v71[0] = 1;
    uint64_t v45 = v60;
    v44[1] = v58;
    v44[0] = v55;
    MakeAlertStorage.init(environment:modifier:actionsItemList:messageItemList:phase:identityTracker:lastTitle:lastColorScheme:lastIcon:lastTintColor:lastSeverity:lastSuppressionConfiguration:)(v53, v59, v54, (uint64_t)v52, v42, 0, 0, 0, (uint64_t)&v88, (char *)&v74, 0, 0, 1, v71, (uint64_t)&v100);
    uint64_t v74 = v41;
    int v75 = v35;
    MEMORY[0x1F4188790](v41);
    swift_bridgeObjectRetain();
    PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
    swift_bridgeObjectRelease();
    outlined release of MakeAlertStorage<A, B>(&v88);
    uint64_t v43 = v61;
    *(void *)uint64_t v61 = v72;
    double result = v73;
    v43[1] = v73;
  }
  return result;
}

uint64_t static SharingActivityPickerModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  uint64_t v38 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *a2;
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  int v7 = *((_DWORD *)a2 + 6);
  int v6 = *((_DWORD *)a2 + 7);
  int v9 = *((_DWORD *)a2 + 8);
  int v8 = *((_DWORD *)a2 + 9);
  uint64_t v11 = a2[5];
  uint64_t v10 = a2[6];
  int v20 = *((_DWORD *)a2 + 14);
  int v21 = *((_DWORD *)a2 + 15);
  int v14 = *((_DWORD *)a2 + 16);
  int v15 = *((_DWORD *)a2 + 17);
  int v16 = *((_DWORD *)a2 + 18);
  int v17 = *((_DWORD *)a2 + 19);
  int v18 = *((_DWORD *)a2 + 20);
  lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if (v22)
  {
    MEMORY[0x18C112B90](0xD000000000000041, 0x8000000188327C80);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v12 = swift_release();
    uint64_t v22 = v3;
    int v23 = v4;
    uint64_t v24 = v5;
    int v25 = v7;
    int v26 = v6;
    int v27 = v9;
    int v28 = v8;
    uint64_t v29 = v11;
    uint64_t v30 = v10;
    int v31 = v20;
    int v32 = v21;
    int v33 = v14;
    int v34 = v15;
    int v35 = v16;
    int v36 = v17;
    int v37 = v18;
    return a3(v12, &v22);
  }
  else
  {
    lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    type metadata accessor for _GraphValue<SharingActivityPickerModifier>(0, &lazy cache variable for type metadata for _GraphValue<SharingActivityPickerModifier>, (uint64_t)&type metadata for SharingActivityPickerModifier, MEMORY[0x1E4F3F590]);
    _GraphValue.value.getter();
    _ViewInputs.environment.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>();
    lazy protocol witness table accessor for type SharingActivityPickerModifier.Child and conformance SharingActivityPickerModifier.Child();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    type metadata accessor for CGRect?();
    return static _AnchorTransformModifier._makeView(modifier:inputs:body:)();
  }
}

uint64_t specialized static AllowPresentationPredicate.evaluate(inputs:)()
{
  lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  if ((v2 & 1) == 0)
  {
    lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    PropertyList.subscript.getter();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if (v1 != 1) {
      return 1;
    }
  }
  MEMORY[0x18C112B90](0xD000000000000041, 0x8000000188327C80);
  return 0;
}

unint64_t lazy protocol witness table accessor for type IsInVolumetricContext and conformance IsInVolumetricContext()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext;
  if (!lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInVolumetricContext and conformance IsInVolumetricContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type IsInImmersiveContext and conformance IsInImmersiveContext()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext;
  if (!lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInImmersiveContext and conformance IsInImmersiveContext);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SharingActivityPickerModifier.Child and conformance SharingActivityPickerModifier.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type SharingActivityPickerModifier.Child and conformance SharingActivityPickerModifier.Child;
  if (!lazy protocol witness table cache variable for type SharingActivityPickerModifier.Child and conformance SharingActivityPickerModifier.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SharingActivityPickerModifier.Child and conformance SharingActivityPickerModifier.Child);
  }
  return result;
}

uint64_t MakeAlertStorage.init(environment:modifier:actionsItemList:messageItemList:phase:identityTracker:lastTitle:lastColorScheme:lastIcon:lastTintColor:lastSeverity:lastSuppressionConfiguration:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, char *a10, long long a11, uint64_t a12, char a13, char *a14, uint64_t a15)
{
  char v18 = *a10;
  char v19 = *a14;
  *(_DWORD *)a9 = a1;
  *(_DWORD *)(a9 + 4) = a2;
  *(void *)(a9 + 8) = a3;
  *(void *)(a9 + 16) = a4;
  *(_DWORD *)(a9 + 24) = a5;
  *(void *)(a9 + 28) = a6;
  type metadata accessor for PropertyList.Tracker();
  *(void *)(a9 + 40) = PropertyList.Tracker.__allocating_init()();
  *(void *)(a9 + 48) = a7;
  *(void *)(a9 + 56) = a8;
  *(unsigned char *)(a9 + 64) = v18;
  *(_OWORD *)(a9 + 72) = a11;
  *(void *)(a9 + 88) = a12;
  *(unsigned char *)(a9 + 96) = a13 & 1;
  *(unsigned char *)(a9 + 97) = v19;
  return outlined init with take of DialogSuppressionConfiguration?(a15, a9 + 104, (uint64_t)&lazy cache variable for type metadata for DialogSuppressionConfiguration?, (uint64_t)&type metadata for DialogSuppressionConfiguration, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s14AttributeGraph0A0Vy7SwiftUI16PlatformItemListVGMaTm_1);
}

uint64_t closure #1 in static AlertModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for AlertModifier();
  uint64_t v8 = a1 + *(int *)(v7 + 60);
  v12[2] = v7;
  _OWORD v12[3] = a2;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a2, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t implicit closure #1 in static AlertModifier._makeView(modifier:inputs:body:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  long long v6 = a1[7];
  long long v23 = a1[6];
  long long v24 = v6;
  v25[0] = a1[8];
  *(_OWORD *)((char *)v25 + 9) = *(long long *)((char *)a1 + 137);
  long long v7 = a1[3];
  long long v19 = a1[2];
  long long v20 = v7;
  long long v8 = a1[5];
  long long v21 = a1[4];
  long long v22 = v8;
  long long v9 = a1[1];
  long long v17 = *a1;
  long long v18 = v9;
  *(void *)&long long v26 = a2;
  *((void *)&v26 + 1) = a3;
  *(void *)&long long v27 = a4;
  *((void *)&v27 + 1) = a5;
  uint64_t AlertStorage = type metadata accessor for MakeAlertStorage();
  uint64_t WitnessTable = swift_getWitnessTable();
  outlined retain of MakeAlertStorage<A, B>(a1);
  type metadata accessor for Attribute<(_:)>(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v17, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)v14, AlertStorage, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  long long v32 = v23;
  long long v33 = v24;
  v34[0] = v25[0];
  *(_OWORD *)((char *)v34 + 9) = *(_OWORD *)((char *)v25 + 9);
  long long v28 = v19;
  long long v29 = v20;
  long long v30 = v21;
  long long v31 = v22;
  long long v26 = v17;
  long long v27 = v18;
  outlined release of MakeAlertStorage<A, B>(&v26);
  return v13;
}

void *outlined release of MakeAlertStorage<A, B>(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[14];
  uint64_t v4 = a1[15];
  uint64_t v5 = a1[16];
  uint64_t v6 = a1[17];
  uint64_t v7 = a1[18];
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  outlined consume of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

void *outlined retain of MakeAlertStorage<A, B>(void *a1)
{
  uint64_t v2 = a1[13];
  uint64_t v3 = a1[14];
  uint64_t v4 = a1[15];
  uint64_t v5 = a1[16];
  uint64_t v6 = a1[17];
  uint64_t v7 = a1[18];
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  outlined copy of DialogSuppressionConfiguration?(v2, v3, v4, v5, v6, v7);
  return a1;
}

uint64_t type metadata accessor for MakeAlertStorage()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for Attribute<(_:)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;

  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t closure #2 in static AlertModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a2;
  uint64_t v14 = a3;
  uint64_t v15 = a4;
  uint64_t v16 = a5;
  uint64_t v7 = type metadata accessor for AlertModifier();
  uint64_t v8 = a1 + *(int *)(v7 + 64);
  v12[2] = v7;
  _OWORD v12[3] = a3;
  uint64_t v9 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v8, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v12, a3, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  return v13;
}

uint64_t specialized prefetchOutput #1 (_:label:) in LazyLayoutViewCache.prefetchOutputs()(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, char *a5)
{
  if (AGGraphHasDeadlinePassed())
  {
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    if (static UserDefaultKeyedFeature.isEnabled.getter())
    {
      if (one-time initialization token for log != -1) {
        swift_once();
      }
      uint64_t v9 = type metadata accessor for Logger();
      __swift_project_value_buffer(v9, (uint64_t)static Log.LazyLayoutPrefetch.log);
      swift_retain_n();
      swift_bridgeObjectRetain_n();
      uint64_t v10 = Logger.logObject.getter();
      os_log_type_t v11 = static os_log_type_t.default.getter();
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = swift_slowAlloc();
        uint64_t v13 = swift_slowAlloc();
        *(_DWORD *)uint64_t v12 = 136446466;
        v57[0] = v13;
        uint64_t v14 = *(void *)(a4 + 144);
        uint64_t v60 = *(void *)(a4 + 136);
        uint64_t v61 = v14;
        _ViewList_ID.canonicalID.getter();
        uint64_t v15 = _ViewList_ID.Canonical.description.getter();
        unint64_t v17 = v16;
        swift_release();
        uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v15, v17, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_release_n();
        swift_bridgeObjectRelease();
        *(_WORD *)(v12 + 12) = 2082;
        swift_bridgeObjectRetain();
        uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(a2, a3, v57);
        UnsafeMutableRawBufferPointer.copyMemory(from:)();
        swift_bridgeObjectRelease_n();
        _os_log_impl(&dword_1872C6000, v10, v11, "%{public}s Skip prefetch %{public}s, past deadline", (uint8_t *)v12, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x18C119C60](v13, -1, -1);
        MEMORY[0x18C119C60](v12, -1, -1);
      }
      else
      {
        swift_bridgeObjectRelease_n();
        swift_release_n();
      }
    }
    swift_beginAccess();
    BOOL v40 = 0;
    *a5 = 1;
  }
  else
  {
    char ValueState = AGGraphGetValueState();
    lazy protocol witness table accessor for type EnableLazyLayoutPrefetchLogging and conformance EnableLazyLayoutPrefetchLogging();
    char v19 = static UserDefaultKeyedFeature.isEnabled.getter();
    if (ValueState)
    {
      long long v30 = &lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>;
      if (v19)
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v31 = type metadata accessor for Logger();
        __swift_project_value_buffer(v31, (uint64_t)static Log.LazyLayoutPrefetch.log);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        long long v32 = Logger.logObject.getter();
        os_log_type_t v33 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v32, v33))
        {
          uint64_t v55 = a2;
          uint64_t v34 = swift_slowAlloc();
          uint64_t v53 = swift_slowAlloc();
          v57[0] = v53;
          *(_DWORD *)uint64_t v34 = 136446466;
          uint64_t v35 = *(void *)(a4 + 144);
          uint64_t v60 = *(void *)(a4 + 136);
          uint64_t v61 = v35;
          _ViewList_ID.canonicalID.getter();
          uint64_t v36 = _ViewList_ID.Canonical.description.getter();
          unint64_t v38 = v37;
          swift_release();
          uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v36, v38, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v34 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v55, a3, v57);
          long long v30 = (void *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<InsetGroupedListStyleContext>;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1872C6000, v32, v33, "%{public}s: start prefetch %{public}s", (uint8_t *)v34, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v53, -1, -1);
          uint64_t v39 = v34;
          a2 = v55;
          MEMORY[0x18C119C60](v39, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
      }
      AGGraphPrefetchValue();
      int v41 = AGGraphGetValueState() & 1;
      BOOL v40 = v41 == 0;
      if (v41) {
        char v42 = 1;
      }
      else {
        char v42 = 2;
      }
      swift_beginAccess();
      *a5 = v42;
      if (static UserDefaultKeyedFeature.isEnabled.getter())
      {
        if (v30[261] != -1) {
          swift_once();
        }
        uint64_t v43 = type metadata accessor for Logger();
        __swift_project_value_buffer(v43, (uint64_t)static Log.LazyLayoutPrefetch.log);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        uint64_t v44 = Logger.logObject.getter();
        os_log_type_t v45 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v44, v45))
        {
          uint64_t v46 = swift_slowAlloc();
          uint64_t v56 = a2;
          uint64_t v47 = swift_slowAlloc();
          *(_DWORD *)uint64_t v46 = 136446722;
          uint64_t v48 = *(void *)(a4 + 144);
          v57[0] = *(void *)(a4 + 136);
          v57[1] = v48;
          uint64_t v58 = v47;
          _ViewList_ID.canonicalID.getter();
          uint64_t v49 = _ViewList_ID.Canonical.description.getter();
          int v54 = v41;
          unint64_t v51 = v50;
          swift_release();
          uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v49, v51, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v46 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v60 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v56, a3, &v58);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          *(_WORD *)(v46 + 22) = 1024;
          LODWORD(v60) = v54 ^ 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          _os_log_impl(&dword_1872C6000, v44, v45, "%{public}s: end prefetch %{public}s, done = %{BOOL}d", (uint8_t *)v46, 0x1Cu);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v47, -1, -1);
          MEMORY[0x18C119C60](v46, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
      }
    }
    else
    {
      if (v19)
      {
        if (one-time initialization token for log != -1) {
          swift_once();
        }
        uint64_t v20 = type metadata accessor for Logger();
        __swift_project_value_buffer(v20, (uint64_t)static Log.LazyLayoutPrefetch.log);
        swift_retain_n();
        swift_bridgeObjectRetain_n();
        long long v21 = Logger.logObject.getter();
        os_log_type_t v22 = static os_log_type_t.default.getter();
        if (os_log_type_enabled(v21, v22))
        {
          uint64_t v23 = swift_slowAlloc();
          uint64_t v24 = swift_slowAlloc();
          v57[0] = v24;
          *(_DWORD *)uint64_t v23 = 136446466;
          uint64_t v25 = *(void *)(a4 + 144);
          uint64_t v60 = *(void *)(a4 + 136);
          uint64_t v61 = v25;
          _ViewList_ID.canonicalID.getter();
          uint64_t v26 = _ViewList_ID.Canonical.description.getter();
          uint64_t v27 = a2;
          unint64_t v29 = v28;
          swift_release();
          uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v26, v29, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_release_n();
          swift_bridgeObjectRelease();
          *(_WORD *)(v23 + 12) = 2082;
          swift_bridgeObjectRetain();
          uint64_t v59 = getNullTerminatedUTF8PointerImpl(_:storingStringOwnersIn:)(v27, a3, v57);
          UnsafeMutableRawBufferPointer.copyMemory(from:)();
          swift_bridgeObjectRelease_n();
          _os_log_impl(&dword_1872C6000, v21, v22, "%{public}s Skip prefetch %{public}s, already done", (uint8_t *)v23, 0x16u);
          swift_arrayDestroy();
          MEMORY[0x18C119C60](v24, -1, -1);
          MEMORY[0x18C119C60](v23, -1, -1);
        }
        else
        {
          swift_bridgeObjectRelease_n();
          swift_release_n();
        }
      }
      return 1;
    }
  }
  return v40;
}

void type metadata accessor for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>()
{
  if (!lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>)
  {
    type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(255, (unint64_t *)&lazy cache variable for type metadata for CGRect?, (uint64_t (*)(uint64_t))type metadata accessor for CGRect, MEMORY[0x1E4FBB718]);
    unint64_t v0 = type metadata accessor for _AnchorTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _AnchorTransformModifier<CGRect?, SharingActivityPickerPresentation.Key>);
    }
  }
}

double closure #1 in SharingActivityPickerModifier.Child.value.getter(char **a1, uint64_t a2, char a3, void *a4, unint64_t a5)
{
  outlined init with take of SharingPickerSource((uint64_t)a4, (uint64_t)v26);
  outlined init with take of SharingPickerSource((uint64_t)v26, (uint64_t)v27);
  if (a3)
  {
    unint64_t v11 = HIDWORD(a5);
    uint64_t v12 = *a1;
    outlined retain of SharingPickerSource(a4, outlined copy of SharingPickerSource);
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v12 + 2) + 1, 1, v12);
    }
    unint64_t v14 = *((void *)v12 + 2);
    unint64_t v13 = *((void *)v12 + 3);
    if (v14 >= v13 >> 1) {
      uint64_t v12 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v14 + 1, 1, v12);
    }
    outlined init with take of SharingPickerSource((uint64_t)v27, (uint64_t)v23);
    *((void *)&v24 + 1) = a2;
    int v25 = v11;
    *((void *)v12 + 2) = v14 + 1;
    uint64_t v15 = &v12[152 * v14];
    long long v16 = v23[6];
    long long v17 = v23[7];
    long long v18 = v24;
    *((_DWORD *)v15 + 44) = v25;
    *((_OWORD *)v15 + 9) = v17;
    *((_OWORD *)v15 + 10) = v18;
    *((_OWORD *)v15 + 8) = v16;
    long long v19 = v23[2];
    long long v20 = v23[3];
    long long v21 = v23[5];
    *((_OWORD *)v15 + 6) = v23[4];
    *((_OWORD *)v15 + 7) = v21;
    *((_OWORD *)v15 + 4) = v19;
    *((_OWORD *)v15 + 5) = v20;
    double result = *(double *)v23;
    long long v22 = v23[1];
    *((_OWORD *)v15 + 2) = v23[0];
    *((_OWORD *)v15 + 3) = v22;
    *a1 = v12;
  }
  return result;
}

uint64_t outlined init with take of SharingPickerSource(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a2 = *(_OWORD *)a1;
  long long v2 = *(_OWORD *)(a1 + 16);
  long long v3 = *(_OWORD *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 48) = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a2 + 64) = v4;
  *(_OWORD *)(a2 + 16) = v2;
  *(_OWORD *)(a2 + 32) = v3;
  long long v5 = *(_OWORD *)(a1 + 80);
  long long v6 = *(_OWORD *)(a1 + 96);
  long long v7 = *(_OWORD *)(a1 + 112);
  *(void *)(a2 + 128) = *(void *)(a1 + 128);
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  *(_OWORD *)(a2 + 80) = v5;
  return a2;
}

uint64_t *outlined retain of SharingPickerSource(uint64_t *a1)
{
  return a1;
}

uint64_t SharingPickerSource.isPresented.getter()
{
  outlined init with take of SharingPickerSource(v0, (uint64_t)v14);
  int v1 = _s7SwiftUI19SharingPickerSourceOWOg((uint64_t)v14);
  uint64_t v2 = _s7SwiftUI19SharingPickerSourceOWOj0_((uint64_t)v14);
  if (v1 == 1)
  {
    uint64_t v3 = *(void *)(v2 + 8);
    char v4 = *(unsigned char *)(v2 + 16) & 1;
    *(void *)&long long v15 = *(void *)v2;
    *((void *)&v15 + 1) = v3;
    LOBYTE(v16) = v4;
    type metadata accessor for _ContiguousArrayStorage<Any>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](v7);
    return LOBYTE(v7[0]);
  }
  else
  {
    long long v19 = *(_OWORD *)(v2 + 64);
    long long v20 = *(_OWORD *)(v2 + 80);
    long long v21 = *(_OWORD *)(v2 + 96);
    long long v22 = *(_OWORD *)(v2 + 112);
    long long v15 = *(_OWORD *)v2;
    long long v16 = *(_OWORD *)(v2 + 16);
    long long v17 = *(_OWORD *)(v2 + 32);
    long long v18 = *(_OWORD *)(v2 + 48);
    _OWORD v7[4] = v19;
    v7[5] = v20;
    void v7[6] = v21;
    v7[7] = v22;
    v7[0] = v15;
    v7[1] = v16;
    void v7[2] = v17;
    void v7[3] = v18;
    type metadata accessor for State<SharingPickerHostModifier.Model?>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<AnyIdentifiableShareConfiguration?>, &lazy cache variable for type metadata for AnyIdentifiableShareConfiguration?, (uint64_t)&type metadata for AnyIdentifiableShareConfiguration, MEMORY[0x1E4F41638]);
    MEMORY[0x18C113DA0](v8);
    BOOL v5 = v9 != 1;
    if (v9 != 1) {
      outlined consume of AnyIdentifiableShareConfiguration?(v8[0], v8[1], v8[2], v8[3], v8[4], v8[5], v8[6], v8[7], v8[8], v9, v10, v11, v12, v13, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of AnyShareConfiguration.Storage, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))outlined consume of Text?);
    }
  }
  return v5;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOj0_(uint64_t result)
{
  *(void *)(result + 8) &= ~0x8000000000000000;
  return result;
}

uint64_t _s7SwiftUI19SharingPickerSourceOWOg(uint64_t a1)
{
  return *(void *)(a1 + 8) >> 63;
}

uint64_t specialized implicit closure #1 in closure #1 in closure #1 in Attribute.init<A>(_:)(_DWORD *a1)
{
  uint64_t v5 = *MEMORY[0x1E4F143B8];
  if (*a1 == *MEMORY[0x1E4F4E7A0])
  {
    id v1 = 0;
  }
  else
  {
    type metadata accessor for HostingScrollView();
    id v1 = *(id *)(*(void *)AGGraphGetValue() + OBJC_IVAR____TtC7SwiftUI17HostingScrollView_host);
  }
  swift_unknownObjectWeakInit();
  swift_unknownObjectWeakAssign();

  _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0((uint64_t)v3, (uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WeakBox<UIView>);
  type metadata accessor for WeakBox<UIView>();
  AGGraphSetOutputValue();
  return _s7SwiftUI27AccessibilityNodeAttachmentVSgWOhTm_0((uint64_t)v4, (uint64_t (*)(void))type metadata accessor for WeakBox<UIView>);
}

uint64_t outlined init with take of AccessibilityNodeAttachment(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI27AccessibilityNodeAttachmentVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t key path getter for EnvironmentValues.searchFocusContext : EnvironmentValues(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>();
    lazy protocol witness table accessor for type _PreferenceActionModifier<IsSearchFocusedPreferenceKey> and conformance _PreferenceActionModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>();
    lazy protocol witness table accessor for type _PreferenceActionModifier<IsSearchFocusedPreferenceKey> and conformance _PreferenceActionModifier<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.SearchFocusContextKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _PreferenceActionModifier<IsSearchFocusedPreferenceKey> and conformance _PreferenceActionModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateViewDestinationRequestProcessor<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance RelationshipModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance UpdateViewDestinationViewModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

void protocol witness for static _AttributeBody._destroySelf(_:) in conformance PlatformViewChild<A>()
{
}

Swift::Void __swiftcall PlatformViewChild.destroy()()
{
  uint64_t v2 = v0;
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = type metadata accessor for Optional();
  uint64_t v26 = *(void *)(v28 - 8);
  MEMORY[0x1F4188790](v28);
  long long v7 = (char *)&v25 - v6;
  uint64_t v32 = AssociatedTypeWitness;
  uint64_t v31 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v27 = (char *)&v25 - v9;
  uint64_t v29 = v4;
  uint64_t v30 = v3;
  uint64_t v10 = swift_getAssociatedTypeWitness();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v25 - v13;
  uint64_t v15 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v16);
  long long v18 = (char *)&v25 - v17;
  uint64_t v33 = *(void *)(v1 + 56);
  uint64_t v34 = *(void *)(v1 + 64);
  _DynamicPropertyBuffer.destroy()();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v1 + *(int *)(v2 + 80), v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v14, 1, v10) == 1)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v18, v14, v10);
    PlatformViewChild.representedViewProvider.getter(v2, (uint64_t)v7);
    uint64_t v20 = v31;
    uint64_t v19 = v32;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v7, 1, v32) == 1)
    {
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v10);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v7, v28);
    }
    else
    {
      long long v21 = v27;
      uint64_t v22 = (*(uint64_t (**)(char *, char *, uint64_t))(v20 + 32))(v27, v7, v19);
      double v23 = MEMORY[0x1F4188790](v22);
      uint64_t v24 = v30;
      *(&v25 - 4) = v29;
      *(&v25 - 3) = v24;
      *(&v25 - 2) = (uint64_t)v21;
      *(&v25 - 1) = (uint64_t)v18;
      MEMORY[0x18C113CE0](partial apply for closure #1 in PlatformViewChild.destroy(), v23);
      PlatformViewChild.reset()(v2);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v21, v19);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v10);
    }
  }
  PreferenceBridge.invalidate()();
}

uint64_t partial apply for closure #5 in closure #1 in PlatformViewChild.updateValue()()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[4];
  uint64_t v4 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v7 = v0[8];
  AGGraphClearUpdate();
  closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v3, v4, v5, v6, v7, v1, v2);
  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v32 = a4;
  uint64_t v33 = a5;
  uint64_t v34 = a1;
  uint64_t v35 = a3;
  uint64_t v30 = a2;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v31 = type metadata accessor for Optional();
  uint64_t v10 = *(void *)(v31 - 8);
  MEMORY[0x1F4188790](v31);
  uint64_t v12 = (char *)&v29 - v11;
  uint64_t v13 = type metadata accessor for PlatformViewChild();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v29 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  double v19 = MEMORY[0x1F4188790](v18);
  long long v21 = (char *)&v29 - v20;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v16, v35, v13, v19);
  PlatformViewChild.representedViewProvider.getter(v13, (uint64_t)v12);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v12, 1, AssociatedTypeWitness) == 1) {
    return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v31);
  }
  uint64_t v23 = (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(v21, v12, AssociatedTypeWitness);
  MEMORY[0x1F4188790](v23);
  *(&v29 - 6) = a6;
  *(&v29 - 5) = a7;
  uint64_t v24 = v32;
  uint64_t v25 = v33;
  *(&v29 - 4) = v32;
  *(&v29 - 3) = v25;
  *(&v29 - 2) = (uint64_t)v21;
  uint64_t v26 = v34;
  if (v34)
  {
    MEMORY[0x1F4188790](v24);
    uint64_t v27 = v30;
    *(&v29 - 4) = v26;
    *(&v29 - 3) = v27;
    *(&v29 - 2) = (uint64_t)partial apply for closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue();
    *(&v29 - 1) = v28;
    swift_unknownObjectRetain();
    static Update.ensure<A>(_:)();
    swift_unknownObjectRelease();
  }
  else
  {
    closure #1 in closure #1 in closure #5 in closure #1 in PlatformViewChild.updateValue()(v24, v25, (uint64_t)v21, a6, a7);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v21, AssociatedTypeWitness);
}

uint64_t PlatformViewChild.representedViewProvider.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void **)(v2 + *(int *)(a1 + 84));
  if (v4)
  {
    uint64_t v5 = (char *)v4 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v4) + 0x78);
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    uint64_t v13 = *(void *)(AssociatedTypeWitness - 8);
    (*(void (**)(uint64_t, char *, uint64_t))(v13 + 16))(a2, v5, AssociatedTypeWitness);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v13 + 56);
    uint64_t v8 = a2;
    uint64_t v9 = 0;
    uint64_t v10 = AssociatedTypeWitness;
  }
  else
  {
    uint64_t v11 = swift_getAssociatedTypeWitness();
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v10 = v11;
    uint64_t v8 = a2;
    uint64_t v9 = 1;
  }

  return v7(v8, v9, 1, v10);
}

void PlatformViewChild.reset()(uint64_t a1)
{
  uint64_t v3 = v1 + *(int *)(a1 + 80);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(v3, v5);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 56))(v3, 1, 1, AssociatedTypeWitness);
  uint64_t v6 = *(int *)(a1 + 84);

  *(void *)(v1 + v6) = 0;
}

void *assignWithTake for LoadingState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 40))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = *(void *)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = *(void *)((char *)a2 + v15);
  outlined consume of AsyncImagePhase(v16);
  return a1;
}

uint64_t OnScrollVisibilityGeometryAction.OnScrollVisibilityGeometryActionBinder.updateValue()()
{
  uint64_t result = AGGraphGetValue();
  if (*(unsigned char *)(result + 24) == 1)
  {
    double v2 = *(double *)result;
    int v3 = *(_DWORD *)AGGraphGetValue() >> 1;
    if (v3 != *(_DWORD *)(v0 + 44))
    {
      *(_DWORD *)(v0 + 44) = v3;
      *(void *)(v0 + 32) = 0xFFFFFFFFLL;
      *(unsigned char *)(v0 + 40) = 0;
      *(unsigned char *)(v0 + 52) = 2;
    }
    ++*(_DWORD *)(v0 + 48);
    uint64_t result = AGGraphGetCurrentAttribute();
    if (result == *MEMORY[0x1E4F4E7A0])
    {
      __break(1u);
    }
    else
    {
      BOOL v4 = *(_DWORD *)(v0 + 20) == *MEMORY[0x1E4F4E7A0];
      swift_retain();
      LOBYTE(v18) = v4;
      GeometryProxy.init(owner:size:environment:transform:position:safeAreaInsets:seed:)();
      uint64_t v16 = 0;
      memset(v15, 0, sizeof(v15));
      char v17 = 2;
      GeometryProxy.frameClippedToScrollViews(in:)();
      outlined destroy of CoordinateSpace((uint64_t)v15);
      uint64_t Value = (long long *)AGGraphGetValue();
      long long v6 = Value[1];
      long long v18 = *Value;
      long long v19 = v6;
      double v7 = MEMORY[0x18C114450]();
      double v9 = v14 / v8;
      double v10 = v13 / v7;
      if (v10 >= v9) {
        double v10 = v9;
      }
      int v11 = *(unsigned __int8 *)(v0 + 52);
      if ((v11 == 2 || ((v11 & 1) == 0) == v2 <= v10)
        && (*(unsigned char *)(v0 + 52) = v2 <= v10, uint64_t v12 = UpdateCycleDetector.dispatch(label:isDebug:)(), (v12 & 1) != 0))
      {
        MEMORY[0x1F4188790](v12);
        Attribute.syncMainIfReferences<A>(do:)();
        return swift_release();
      }
      else
      {
        return swift_release();
      }
    }
  }
  else if (*(unsigned char *)(v0 + 52))
  {
    MEMORY[0x1F4188790](result);
    swift_retain();
    Attribute.syncMainIfReferences<A>(do:)();
    uint64_t result = swift_release();
    *(unsigned char *)(v0 + 52) = 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for AutomaticLabeledContentStyle()
{
  return &type metadata for AutomaticLabeledContentStyle;
}

ValueMetadata *type metadata accessor for _DisclosureIndicator()
{
  return &type metadata for _DisclosureIndicator;
}

unsigned char *initializeWithCopy for BarItemModifier(unsigned char *a1, unsigned char *a2)
{
  *a1 = *a2;
  swift_unknownObjectWeakCopyInit();
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>, EditModeScopeModifier>, HitTestBindingModifier>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type EditModeScopeModifier and conformance EditModeScopeModifier);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>, HitTestBindingModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<TableRowView, CollectionViewCellModifier>, EditModeScopeModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<AnyView, RootModifier>, EditModeScopeModifier>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewList_View, CollectionViewCellModifier>, EditModeScopeModifier>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.EnableVFDFeature and conformance _UIHostingView<A>.EnableVFDFeature(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4, uint64_t a5)
{
  type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(0, a3, a4, a5, MEMORY[0x1E4F3FBA0]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

uint64_t outlined destroy of _UIHostingView<ModifiedContent<TableViewListHeaderFooterContent, EmptyModifier>>.HostViewGraph(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.HostViewGraph);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.HostViewGraph();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.HostViewGraph);
    }
  }
}

void type metadata accessor for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>()
{
  if (!lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DeprecatedAlertBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DeprecatedAlertBridge<ModifiedContent<AnyView, RootModifier>, Alert.Presentation>);
    }
  }
}

void type metadata accessor for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.EnableVFDFeature()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.EnableVFDFeature)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _UIHostingView.EnableVFDFeature();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>.EnableVFDFeature);
    }
  }
}

void type metadata accessor for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitSensoryFeedbackCache();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitSensoryFeedbackCache<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for AVKitCaptureButtonBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AVKitCaptureButtonBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for UIKitStatusBarBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for UIKitStatusBarBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for PencilEventsBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PencilEventsBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for DragAndDropBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for DragAndDropBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for ContextMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ContextMenuBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>;
  if (!lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>)
  {
    type metadata accessor for UIHostingController<ModifiedContent<AnyView, RootModifier>>(255, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<AnyView, RootModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<AnyView, RootModifier>> and conformance _UIHostingView<A>);
  }
  return result;
}

void type metadata accessor for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for EditMenuBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EditMenuBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

void type metadata accessor for TooltipBridge<ModifiedContent<AnyView, RootModifier>>()
{
  if (!lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, RootModifier>>)
  {
    type metadata accessor for ModifiedContent<InputAccessoryBar, EditModeScopeModifier>(255, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<AnyView, RootModifier>, MEMORY[0x1E4F41618], (uint64_t)&type metadata for RootModifier, MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<AnyView, RootModifier> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for TooltipBridge();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for TooltipBridge<ModifiedContent<AnyView, RootModifier>>);
    }
  }
}

uint64_t partial apply for closure #1 in UIHostingContentView.init(configuration:)()
{
  return closure #1 in UIHostingContentView.init(configuration:)();
}

uint64_t closure #1 in UIHostingContentView.init(configuration:)()
{
  return swift_release();
}

uint64_t BridgedListState.CommitMutation.combine<A>(with:)(uint64_t a1, uint64_t a2)
{
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
  MEMORY[0x1F4188790](v4 - 8);
  long long v6 = (char *)v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  double v9 = (char *)v32 - v8;
  type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.CommitMutation?, (void (*)(uint64_t))type metadata accessor for BridgedListState.CommitMutation);
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)v32 - v11;
  uint64_t v13 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for BridgedListState.CommitMutation(0);
  uint64_t v18 = *(void *)(v17 - 8);
  double v19 = MEMORY[0x1F4188790](v17);
  long long v21 = (char *)v32 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, a1, a2, v19);
  char v22 = swift_dynamicCast();
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  if ((v22 & 1) == 0)
  {
    v23(v12, 1, 1, v17);
    _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for BridgedListState.CommitMutation?, (uint64_t)type metadata accessor for BridgedListState.CommitMutation, (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
    return 0;
  }
  v23(v12, 0, 1, v17);
  outlined init with take of BridgedListState((uint64_t)v12, (uint64_t)v21, type metadata accessor for BridgedListState.CommitMutation);
  uint64_t v24 = v32[1];
  uint64_t v25 = type metadata accessor for BridgedListState(0);
  if ((static WeakAttribute.== infix(_:_:)() & 1) == 0)
  {
    outlined destroy of BridgedListState.ScrollTarget((uint64_t)v21, type metadata accessor for BridgedListState.CommitMutation);
    return 0;
  }
  uint64_t v26 = v24 + *(int *)(v17 + 20);
  uint64_t v27 = v26 + *(int *)(v25 + 20);
  _s7SwiftUI12TableRowListVSgWOcTm_0(v27, (uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BridgedListState.ScrollTarget?);
  outlined assign with take of BridgedListState((uint64_t)&v21[*(int *)(v17 + 20)], v26);
  uint64_t v28 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48);
  if (v29(v9, 1, v28) != 1)
  {
    _s7SwiftUI12TableRowListVSgWOcTm_0(v27, (uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for BridgedListState.ScrollTarget?);
    int v30 = v29(v6, 1, v28);
    _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)v6, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
    if (v30 == 1) {
      outlined assign with copy of BridgedListState.ScrollTarget?((uint64_t)v9, v27);
    }
  }
  _s7SwiftUI12TableRowListVSgWOhTm_0((uint64_t)v9, (uint64_t)&lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (uint64_t)type metadata accessor for BridgedListState.ScrollTarget, (uint64_t (*)(void))type metadata accessor for BridgedListState.ScrollTarget?);
  return 1;
}

uint64_t outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 40))(a2, a1, v8);
  return a2;
}

void specialized PlatformListCell<>.defaultConfigureContent(_:transaction:)(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = direct field offset for ListCollectionViewCellBase.host;
  uint64_t v7 = *(void **)&v3[direct field offset for ListCollectionViewCellBase.host];
  if (v7)
  {
    if (a2 >= 2)
    {
      uint64_t v29 = v7;
      outlined copy of Transaction?(a2);
      specialized _UIHostingView.setRootView(_:transaction:)(a1);

      outlined consume of Transaction?(a2);
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F3F308];
      outlined init with copy of TableRowList?(a1, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      outlined init with copy of TableRowList?((uint64_t)v32, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v8, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      uint64_t v9 = (uint64_t)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x60);
      swift_beginAccess();
      uint64_t v10 = v7;
      outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v31, v9, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v8, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      swift_endAccess();
      v31[0] = 1;
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of TableRowList?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v8, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4F3F308];
    outlined init with copy of TableRowList?(a1, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>();
    id v13 = objc_allocWithZone(v12);
    outlined init with copy of TableRowList?((uint64_t)v32, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v11, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    outlined init with copy of TableRowList?((uint64_t)v31, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v11, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    uint64_t v14 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v30);
    outlined destroy of TableRowList?((uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v11, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    *(unsigned char *)(*(void *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x68)) + 220) = 1;
    uint64_t v15 = v14;
    UIHostingViewBase.updateRemovedState(uiView:)(0);

    outlined destroy of TableRowList?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, v11, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    if (a2 != 1)
    {
      outlined copy of Transaction?(a2);
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      swift_release();
      outlined consume of Transaction?(a2);
    }
    uint64_t v16 = *(void **)&v3[v6];
    *(void *)&v3[v6] = v14;
    uint64_t v17 = v15;

    specialized ListCollectionViewCellBase.host.didset();
    uint64_t v18 = v17;
    id v19 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v19, sel_bounds);
    double v21 = v20;
    double v23 = v22;
    double v25 = v24;
    double v27 = v26;

    objc_msgSend(v18, sel_setFrame_, v21, v23, v25, v27);
    objc_msgSend(v18, sel_setAutoresizingMask_, 18);
    objc_msgSend(v18, sel_setPreservesSuperviewLayoutMargins_, 1);
    id v28 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v28, sel_addSubview_, v18);
  }
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  void *v9;
  Class v10;
  id v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  id v17;
  double v18;
  double v19;
  double v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  id v26;
  void *v27;
  unsigned char v28[488];
  _WORD v29[244];
  unsigned char v30[496];
  uint64_t vars8;

  uint64_t v3 = v2;
  uint64_t v6 = direct field offset for ListCollectionViewCellBase.host;
  uint64_t v7 = *(void **)&v3[direct field offset for ListCollectionViewCellBase.host];
  if (v7)
  {
    if (a2 >= 2)
    {
      double v27 = v7;
      outlined copy of Transaction?(a2);
      specialized _UIHostingView.setRootView(_:transaction:)(a1);

      outlined consume of Transaction?(a2);
    }
    else
    {
      outlined init with copy of TableRowList?(a1, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      outlined init with copy of TableRowList?((uint64_t)v30, (uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      uint64_t v8 = (uint64_t)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x60);
      swift_beginAccess();
      uint64_t v9 = v7;
      outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v29, v8, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      swift_endAccess();
      v29[0] = 1;
      type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for _UIHostingView);
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>> and conformance _UIHostingView<A>();
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of TableRowList?((uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    }
  }
  else
  {
    outlined init with copy of TableRowList?(a1, (uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    type metadata accessor for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>(0, &lazy cache variable for type metadata for CellHostingView<ModifiedContent<TableRowView, CollectionViewCellModifier>>, (uint64_t (*)(uint64_t, uint64_t, unint64_t))type metadata accessor for CellHostingView);
    uint64_t v11 = objc_allocWithZone(v10);
    outlined init with copy of TableRowList?((uint64_t)v30, (uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    outlined init with copy of TableRowList?((uint64_t)v29, (uint64_t)v28, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    Class v12 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v28);
    outlined destroy of TableRowList?((uint64_t)v29, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    *(unsigned char *)(*(void *)((char *)v12 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v12) + 0x68)) + 220) = 1;
    id v13 = v12;
    UIHostingViewBase.updateRemovedState(uiView:)(0);

    outlined destroy of TableRowList?((uint64_t)v30, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<TableRowView, CollectionViewCellModifier>, (uint64_t)&type metadata for TableRowView, (uint64_t)&type metadata for CollectionViewCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    if (a2 != 1)
    {
      outlined copy of Transaction?(a2);
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      swift_release();
      outlined consume of Transaction?(a2);
    }
    uint64_t v14 = *(void **)&v3[v6];
    *(void *)&v3[v6] = v12;
    uint64_t v15 = v13;

    specialized ListCollectionViewCellBase.host.didset();
    uint64_t v16 = v15;
    uint64_t v17 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v17, sel_bounds);
    id v19 = v18;
    double v21 = v20;
    double v23 = v22;
    double v25 = v24;

    objc_msgSend(v16, sel_setFrame_, v19, v21, v23, v25);
    objc_msgSend(v16, sel_setAutoresizingMask_, 18);
    objc_msgSend(v16, sel_setPreservesSuperviewLayoutMargins_, 1);
    double v26 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v26, sel_addSubview_, v16);
  }
}

{
  char *v2;
  char *v3;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  Class v12;
  id v13;
  void *v14;
  void *v15;
  void *v16;
  void *v17;
  void *v18;
  void *v19;
  id v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  id v29;
  void *v30;
  unsigned char v31[256];
  _WORD v32[128];
  unsigned char v33[264];
  uint64_t vars8;

  uint64_t v3 = v2;
  uint64_t v6 = OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host;
  uint64_t v7 = *(void **)&v3[OBJC_IVAR____TtC7SwiftUI17ListTableViewCell_host];
  if (v7)
  {
    if (a2 >= 2)
    {
      int v30 = v7;
      outlined copy of Transaction?(a2);
      specialized _UIHostingView.setRootView(_:transaction:)(a1);

      outlined consume of Transaction?(a2);
    }
    else
    {
      uint64_t v8 = MEMORY[0x1E4F3F308];
      outlined init with copy of TableRowList?(a1, (uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      outlined init with copy of TableRowList?((uint64_t)v33, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v8, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      uint64_t v9 = (uint64_t)v7 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v7) + 0x60);
      swift_beginAccess();
      uint64_t v10 = v7;
      outlined assign with take of ModifiedContent<TableRowView, CollectionViewCellModifier>((uint64_t)v32, v9, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v8, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
      swift_endAccess();
      v32[0] = 1;
      type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
      lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>((unint64_t *)&lazy protocol witness table cache variable for type _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>> and conformance _UIHostingView<A>, (void (*)(uint64_t))type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>);
      ViewRendererHost.invalidateProperties(_:mayDeferUpdate:)();
      outlined destroy of TableRowList?((uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v8, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    }
  }
  else
  {
    uint64_t v11 = MEMORY[0x1E4F3F308];
    outlined init with copy of TableRowList?(a1, (uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, MEMORY[0x1E4F3F308], (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, ListTableCellModifier>>();
    id v13 = objc_allocWithZone(v12);
    outlined init with copy of TableRowList?((uint64_t)v33, (uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    outlined init with copy of TableRowList?((uint64_t)v32, (uint64_t)v31, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    uint64_t v14 = (void *)specialized _UIHostingView.init(rootView:)((uint64_t)v31);
    outlined destroy of TableRowList?((uint64_t)v32, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    *(unsigned char *)(*(void *)((char *)v14 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v14) + 0x68)) + 220) = 1;
    uint64_t v15 = v14;
    UIHostingViewBase.updateRemovedState(uiView:)(0);

    outlined destroy of TableRowList?((uint64_t)v33, (uint64_t)&lazy cache variable for type metadata for ModifiedContent<_ViewList_View, ListTableCellModifier>, v11, (uint64_t)&type metadata for ListTableCellModifier, (uint64_t (*)(void))type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>);
    if (a2 != 1)
    {
      outlined copy of Transaction?(a2);
      swift_retain();
      GraphHost.emptyTransaction(_:)();
      swift_release();
      outlined consume of Transaction?(a2);
    }
    uint64_t v16 = *(void **)&v3[v6];
    *(void *)&v3[v6] = v14;
    uint64_t v17 = v15;

    uint64_t v18 = *(void **)&v3[v6];
    if (v18)
    {
      *(void *)((char *)v18 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v18) + 0x198) + 8) = &protocol witness table for ListTableViewCell;
      swift_unknownObjectWeakAssign();
    }
    ListTableViewCell.updateSeparatorsFromConfiguration()();

    id v19 = v17;
    double v20 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v20, sel_bounds);
    double v22 = v21;
    double v24 = v23;
    double v26 = v25;
    id v28 = v27;

    objc_msgSend(v19, sel_setFrame_, v22, v24, v26, v28);
    objc_msgSend(v19, sel_setAutoresizingMask_, 18);
    objc_msgSend(v19, sel_setPreservesSuperviewLayoutMargins_, 1);
    uint64_t v29 = objc_msgSend(v3, sel_contentView);
    objc_msgSend(v29, sel_addSubview_, v19);
  }
}

uint64_t outlined init with copy of TableRowList?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (*a6)(void, uint64_t, uint64_t, uint64_t))
{
  uint64_t v8 = a6(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(a2, a1, v8);
  return a2;
}

uint64_t _s7SwiftUI12TableRowListVSgWOcTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  uint64_t v7 = a5(0, a3, a4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a2, a1, v7);
  return a2;
}

void type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    unint64_t v3 = type metadata accessor for ModifiedContent();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

void _s7SwiftUI15ModifiedContentVyAA12TableRowViewVAA010CollectionG12CellModifierVGMaTm_0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

uint64_t outlined destroy of TableRowList?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t _s7SwiftUI12TableRowListVSgWOhTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v5 = a4(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

void type metadata accessor for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, (uint64_t)&type metadata for CollectionViewCellModifier, (void (*)(void))lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier);
    unint64_t v0 = type metadata accessor for _UIHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _UIHostingView<ModifiedContent<AnyView, EmptyModifier>> and conformance _UIHostingView<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t specialized ListCollectionViewCellBase.host.didset()
{
  MEMORY[0x18C113CA0]();
  uint64_t v1 = direct field offset for ListCollectionViewCellBase.host;
  double v2 = *(void **)(v0 + direct field offset for ListCollectionViewCellBase.host);
  if (v2)
  {
    *(void *)((char *)v2 + *(void *)((*MEMORY[0x1E4FBC8C8] & *v2) + 0x198) + 8) = &protocol witness table for ListCollectionViewCellBase<A>;
    swift_unknownObjectWeakAssign();
    if (*(void *)(v0 + v1))
    {
      lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature();
      swift_retain();
      ViewGraph.append<A>(feature:)();
      swift_release();
      if (*(void *)(v0 + v1))
      {
        swift_retain();
        GraphHost.addPreference<A>(_:)();
        swift_release();
      }
    }
  }
  unint64_t v3 = (_DWORD *)(v0 + direct field offset for ListCollectionViewCellBase.popUpButtonSeed);
  swift_beginAccess();
  *unint64_t v3 = -1;
  return static Update.end()();
}

unint64_t lazy protocol witness table accessor for type SwipeActions.Feature and conformance SwipeActions.Feature()
{
  unint64_t result = lazy protocol witness table cache variable for type SwipeActions.Feature and conformance SwipeActions.Feature;
  if (!lazy protocol witness table cache variable for type SwipeActions.Feature and conformance SwipeActions.Feature)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeActions.Feature and conformance SwipeActions.Feature);
  }
  return result;
}

void type metadata accessor for CellHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>()
{
  if (!lazy cache variable for type metadata for CellHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>);
    lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ViewList_View, CollectionViewCellModifier> and conformance <> ModifiedContent<A, B>, &lazy cache variable for type metadata for ModifiedContent<_ViewList_View, CollectionViewCellModifier>, (uint64_t)&type metadata for CollectionViewCellModifier, (void (*)(void))lazy protocol witness table accessor for type CollectionViewCellModifier and conformance CollectionViewCellModifier);
    unint64_t v0 = type metadata accessor for CellHostingView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for CellHostingView<ModifiedContent<_ViewList_View, CollectionViewCellModifier>>);
    }
  }
}

uint64_t outlined assign with take of BridgedListState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BridgedListState(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void *assignWithTake for BridgedListState(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for BridgedListState.ScrollTarget(0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      uint64_t v28 = type metadata accessor for IndexPath();
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v28 - 8) + 40))(v7, v8, v28);
      uint64_t v29 = *(int *)(v9 + 20);
      int v30 = &v7[v29];
      uint64_t v31 = &v8[v29];
      *(_OWORD *)int v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
      goto LABEL_7;
    }
    outlined destroy of BridgedListState.ScrollTarget((uint64_t)v7, type metadata accessor for BridgedListState.ScrollTarget);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    type metadata accessor for BridgedListState.ScrollTarget?(0, &lazy cache variable for type metadata for BridgedListState.ScrollTarget?, (void (*)(uint64_t))type metadata accessor for BridgedListState.ScrollTarget);
    memcpy(v7, v8, *(void *)(*(void *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  uint64_t v14 = type metadata accessor for IndexPath();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v14 - 8) + 32))(v7, v8, v14);
  uint64_t v15 = *(int *)(v9 + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  *(_OWORD *)uint64_t v16 = *(_OWORD *)v17;
  long long v16[16] = v17[16];
  v7[*(int *)(v9 + 24)] = v8[*(int *)(v9 + 24)];
  (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v19 = a3[6];
  uint64_t v20 = a3[7];
  double v21 = (char *)a1 + v19;
  double v22 = (char *)a2 + v19;
  v21[112] = v22[112];
  long long v23 = *((_OWORD *)v22 + 6);
  long long v24 = *((_OWORD *)v22 + 4);
  *((_OWORD *)v21 + 5) = *((_OWORD *)v22 + 5);
  *((_OWORD *)v21 + 6) = v23;
  long long v25 = *((_OWORD *)v22 + 1);
  *(_OWORD *)double v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v25;
  long long v26 = *((_OWORD *)v22 + 3);
  *((_OWORD *)v21 + 2) = *((_OWORD *)v22 + 2);
  *((_OWORD *)v21 + 3) = v26;
  *((_OWORD *)v21 + 4) = v24;
  *(_DWORD *)((char *)a1 + v20) = *(_DWORD *)((char *)a2 + v20);
  return a1;
}

uint64_t outlined init with take of BridgedListState(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t _s7SwiftUI16BridgedListStateVWObTm_0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t storeEnumTagSinglePayload for BridgedListState.CommitMutation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187C34F4C);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ViewList_View, ListTableCellModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, unint64_t *a2, uint64_t a3, void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<TableRowView, CollectionViewCellModifier>(255, a2);
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for CellHostingView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.onDrag(isEnabled:localContext:_:onSessionBegan:onSessionEnded:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  outlined init with copy of Any?(a2, (uint64_t)v19);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a3;
  *(void *)(v17 + 24) = a4;
  v20[0] = a1;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  outlined init with take of Any?((uint64_t)v19, (uint64_t)v29);
  unsigned char v29[4] = partial apply for closure #1 in View.onDrag(_:);
  v29[5] = v17;
  outlined copy of AppIntentExecutor?(a5);
  outlined copy of AppIntentExecutor?(a7);
  swift_retain();
  MEMORY[0x18C113660](v20, a9, &type metadata for _DraggingModifier, a10);
  return outlined destroy of _DraggingModifier((uint64_t)v20);
}

uint64_t outlined destroy of _DraggingModifier(uint64_t a1)
{
  return a1;
}

uint64_t destroy for _DraggingModifier(void *a1)
{
  if (a1[1]) {
    swift_release();
  }
  if (a1[3]) {
    swift_release();
  }
  if (a1[5]) {
    swift_release();
  }
  if (a1[7]) {
    swift_release();
  }
  if (a1[12]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 9));
  }

  return swift_release();
}

uint64_t View.onDrag(isEnabled:localContext:_:onLiftEvent:onSessionBegan:onSessionEnded:)(char a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  outlined init with copy of Any?(a2, (uint64_t)v21);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  v22[0] = a1;
  uint64_t v23 = a5;
  uint64_t v24 = a6;
  uint64_t v25 = a7;
  uint64_t v26 = a8;
  uint64_t v27 = a9;
  uint64_t v28 = a10;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  outlined init with take of Any?((uint64_t)v21, (uint64_t)v31);
  v31[4] = partial apply for closure #1 in View.onDrag(_:);
  v31[5] = v19;
  outlined copy of AppIntentExecutor?(a5);
  outlined copy of AppIntentExecutor?(a7);
  outlined copy of AppIntentExecutor?(a9);
  swift_retain();
  MEMORY[0x18C113660](v22, a11, &type metadata for _DraggingModifier, a12);
  return outlined destroy of _DraggingModifier((uint64_t)v22);
}

uint64_t View.onDrag<A>(isEnabled:localContext:_:onSessionBegan:onSessionEnded:preview:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unint64_t a8@<X7>, uint64_t a9@<X8>, void (*a10)(double), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  unint64_t v35 = a8;
  *((void *)&v34 + 1) = a7;
  *(void *)&long long v34 = a6;
  v31[1] = a4;
  uint64_t v32 = a3;
  int v33 = a1;
  uint64_t v39 = a9;
  uint64_t v38 = a12;
  uint64_t v17 = *(void *)(a13 - 8);
  uint64_t v37 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for DraggingPreviewModifier();
  uint64_t v36 = *(void *)(v20 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v31 - v22;
  a10(v21);
  outlined init with copy of Any?(a2, (uint64_t)v40);
  uint64_t v24 = swift_allocObject();
  *(void *)(v24 + 16) = v32;
  *(void *)(v24 + 24) = a4;
  LOBYTE(v41) = v33;
  *((void *)&v41 + 1) = 0;
  *(void *)&long long v42 = 0;
  *((void *)&v42 + 1) = a5;
  long long v43 = v34;
  uint64_t v25 = *((void *)&v34 + 1);
  long long v44 = v35;
  *(void *)&v45[0] = 0;
  outlined init with take of Any?((uint64_t)v40, (uint64_t)v45 + 8);
  *((void *)&v46 + 1) = partial apply for closure #1 in View.onDrag(_:);
  uint64_t v47 = v24;
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v23, v19, a13);
  uint64_t v26 = &v23[*(int *)(v20 + 36)];
  long long v27 = v45[1];
  *((_OWORD *)v26 + 4) = v45[0];
  *((_OWORD *)v26 + 5) = v27;
  *((_OWORD *)v26 + 6) = v46;
  *((void *)v26 + 14) = v47;
  long long v28 = v42;
  *(_OWORD *)uint64_t v26 = v41;
  *((_OWORD *)v26 + 1) = v28;
  long long v29 = v44;
  *((_OWORD *)v26 + 2) = v43;
  *((_OWORD *)v26 + 3) = v29;
  outlined copy of AppIntentExecutor?(a5);
  outlined copy of AppIntentExecutor?(v25);
  swift_retain();
  MEMORY[0x18C113660](v23, v38, v20, v37);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v23, v20);
}

uint64_t destroy for DraggingPreviewModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  uint64_t v4 = (void *)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v4[1]) {
    swift_release();
  }
  if (v4[3]) {
    swift_release();
  }
  if (v4[5]) {
    swift_release();
  }
  if (v4[7]) {
    swift_release();
  }
  if (v4[12]) {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(v4 + 9));
  }

  return swift_release();
}

uint64_t outlined init with take of Any?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Any?(0, (unint64_t *)&lazy cache variable for type metadata for Any?, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance CustomButtonMenuStyleWriter<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ResolvedCustomButtonMenu()
{
  return static StyleableView._viewListCount(inputs:)();
}

void specialized __DictionaryDecoder.unbox<A>(_:as:)(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  outlined init with copy of Any(a1, (uint64_t)&v53);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  if (swift_dynamicCast())
  {

    *a4 = 0u;
    a4[1] = 0u;
    return;
  }
  outlined init with copy of Any(a1, (uint64_t)&v53);
  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSDictionary);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v40 = type metadata accessor for DecodingError();
    swift_allocError();
    long long v42 = v41;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *long long v42 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_beginAccess();
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v40 - 8) + 104))(v42, *MEMORY[0x1E4FBBA70], v40);
    swift_willThrow();
    return;
  }
  long long v43 = a4;
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  uint64_t v45 = v10;
  uint64_t v46 = v9;
  long long v44 = (void *)v50;
  NSDictionary.makeIterator()();
  uint64_t v11 = v47 + 136;
  swift_retain();
  swift_beginAccess();
  NSDictionary.Iterator.next()();
  outlined init with take of (key: Any, value: Any)?((uint64_t)&v50, (uint64_t)&v53);
  if (!v54)
  {
    int v12 = (void *)MEMORY[0x1E4FBC868];
LABEL_39:

    swift_release_n();
    *(void *)&long long v53 = v12;
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], MEMORY[0x1E4FBAEA0]);
    if ((swift_dynamicCast() & 1) == 0)
    {
      *long long v43 = 0u;
      v43[1] = 0u;
    }
    return;
  }
  int v12 = (void *)MEMORY[0x1E4FBC868];
  while (1)
  {
    outlined init with take of Any(&v55, v49);
    outlined init with take of Any(&v53, &v50);
    swift_dynamicCast();
    long long v13 = v48[0];
    uint64_t v14 = *(void **)v11;
    swift_bridgeObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v11 = v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v14[2] + 1, 1, v14);
      *(void *)uint64_t v11 = v14;
    }
    unint64_t v17 = v14[2];
    unint64_t v16 = v14[3];
    if (v17 >= v16 >> 1)
    {
      uint64_t v14 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v16 > 1), v17 + 1, 1, v14);
      *(void *)uint64_t v11 = v14;
    }
    unint64_t v51 = &unk_1ED468578;
    unint64_t v52 = lazy protocol witness table accessor for type _JSONKey and conformance _JSONKey();
    uint64_t v18 = swift_allocObject();
    *(void *)&long long v50 = v18;
    *(_OWORD *)(v18 + 16) = v13;
    *(void *)(v18 + 32) = 0;
    *(unsigned char *)(v18 + 40) = 1;
    void v14[2] = v17 + 1;
    outlined init with take of OptionalBinaryInteger(&v50, (uint64_t)&v14[5 * v17 + 4]);
    __DictionaryDecoder.unbox_(_:as:)(&v50, v49, v46, v45);
    if (v4)
    {
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v47);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
      return;
    }
    if (v51)
    {
      outlined init with take of Any(&v50, v48);
      char v19 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v56 = v12;
      unint64_t v21 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((uint64_t *)&v13 + 1));
      uint64_t v22 = v12[2];
      BOOL v23 = (v20 & 1) == 0;
      uint64_t v24 = v22 + v23;
      if (__OFADD__(v22, v23)) {
        goto LABEL_45;
      }
      char v25 = v20;
      if (v12[3] < v24)
      {
        specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v24, v19);
        unint64_t v26 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((uint64_t *)&v13 + 1));
        if ((v25 & 1) != (v27 & 1)) {
          goto LABEL_47;
        }
        unint64_t v21 = v26;
        int v12 = v56;
        if ((v25 & 1) == 0) {
          goto LABEL_27;
        }
LABEL_23:
        uint64_t v32 = (_OWORD *)(v12[7] + 32 * v21);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v32);
        outlined init with take of Any(v48, v32);
LABEL_29:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_30;
      }
      if (v19)
      {
        int v12 = v56;
        if (v20) {
          goto LABEL_23;
        }
      }
      else
      {
        specialized _NativeDictionary.copy()();
        int v12 = v56;
        if (v25) {
          goto LABEL_23;
        }
      }
LABEL_27:
      v12[(v21 >> 6) + 8] |= 1 << v21;
      *(_OWORD *)(v12[6] + 16 * v21) = v13;
      outlined init with take of Any(v48, (_OWORD *)(v12[7] + 32 * v21));
      uint64_t v33 = v12[2];
      BOOL v34 = __OFADD__(v33, 1);
      uint64_t v35 = v33 + 1;
      if (v34) {
        goto LABEL_46;
      }
      v12[2] = v35;
      swift_bridgeObjectRetain();
      goto LABEL_29;
    }
    outlined destroy of Any?((uint64_t)&v50);
    swift_bridgeObjectRetain();
    unint64_t v28 = specialized __RawDictionaryStorage.find<A>(_:)(v13, *((uint64_t *)&v13 + 1));
    char v30 = v29;
    swift_bridgeObjectRelease();
    if (v30)
    {
      char v31 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v56 = v12;
      if ((v31 & 1) == 0)
      {
        specialized _NativeDictionary.copy()();
        int v12 = v56;
      }
      swift_bridgeObjectRelease();
      outlined init with take of Any((_OWORD *)(v12[7] + 32 * v28), v48);
      specialized _NativeDictionary._delete(at:)(v28, (uint64_t)v12);
      swift_bridgeObjectRelease();
    }
    else
    {
      memset(v48, 0, sizeof(v48));
    }
    swift_bridgeObjectRelease();
    outlined destroy of Any?((uint64_t)v48);
LABEL_30:
    swift_beginAccess();
    uint64_t v36 = *(void **)v11;
    if (!*(void *)(*(void *)v11 + 16)) {
      break;
    }
    char v37 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)uint64_t v11 = v36;
    if (v37)
    {
      uint64_t v38 = v36[2];
      if (!v38) {
        goto LABEL_44;
      }
    }
    else
    {
      uint64_t v36 = specialized _ArrayBuffer._consumeAndCreateNew()(v36);
      *(void *)uint64_t v11 = v36;
      uint64_t v38 = v36[2];
      if (!v38) {
        goto LABEL_44;
      }
    }
    uint64_t v39 = v38 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v36[5 * v38 - 1]);
    void v36[2] = v39;
    *(void *)uint64_t v11 = v36;
    swift_endAccess();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v49);
    NSDictionary.Iterator.next()();
    outlined init with take of (key: Any, value: Any)?((uint64_t)&v50, (uint64_t)&v53);
    if (!v54) {
      goto LABEL_39;
    }
  }
  __break(1u);
LABEL_44:
  __break(1u);
LABEL_45:
  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
}

unsigned char *storeEnumTagSinglePayload for ListAccessoryVisibility(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        break;
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

uint64_t type metadata accessor for SearchUnavailableContent.Label()
{
  uint64_t result = type metadata singleton initialization cache for SearchUnavailableContent.Label;
  if (!type metadata singleton initialization cache for SearchUnavailableContent.Label) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t partial apply for closure #1 in InsettableGroupedListBody.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t protocol witness for Rule.value.getter in conformance NavigationStackCore<A>.NavigationStackRepresentableChild@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return NavigationStackCore.NavigationStackRepresentableChild.value.getter(*(void *)v2, *(_DWORD *)(v2 + 24), *(void *)(a1 + 16), a2);
}

uint64_t UIViewRepresentableContext.coordinator.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  unsigned int v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16);

  return v6(a2, v4, AssociatedTypeWitness);
}

uint64_t partial apply for closure #1 in static LazyVStack._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static LazyVStack._makeView(view:inputs:)(a1);
}

uint64_t type metadata completion function for UIViewPlatformViewDefinition()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata completion function for UIKitInspectorV3Bridge()
{
  return swift_initClassMetadata2();
}

void *assignWithCopy for LoadingState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1, v9);
  int v13 = v11(v8, 1, v9);
  if (!v12)
  {
    if (!v13)
    {
      (*(void (**)(char *, char *, uint64_t))(v10 + 24))(v7, v8, v9);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v10 + 8))(v7, v9);
    goto LABEL_6;
  }
  if (v13)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v7, v8, v9);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 24);
  unint64_t v16 = *(void *)((char *)a2 + v15);
  outlined copy of AsyncImagePhase(v16);
  unint64_t v17 = *(void *)((char *)a1 + v15);
  *(void *)((char *)a1 + v15) = v16;
  outlined consume of AsyncImagePhase(v17);
  return a1;
}

uint64_t base witness table accessor for _AttributeBody in PositionedNavigationDestinationProcessor<A>.PollingRule()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for ViewModifier.Body : View in ButtonFocusInteractionModifier()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t base witness table accessor for _AttributeBody in NavigationDestinationModifier<A, B>.PreferenceTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for MultiViewModifier in NavigationSplitStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for PrimitiveViewModifier in NavigationSplitStyleModifier<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in ReadDestinationsModifier<A>.RequestsTransform()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for AnyViewFactory in _CALayerView<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in AnyHoverEffectChild<A>()
{
  return swift_getWitnessTable();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance _DraggingModifier@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4 = *a2;
  int v5 = *((_DWORD *)a2 + 2);
  uint64_t v6 = a2[2];
  int v7 = *((_DWORD *)a2 + 20);
  int v17 = *a1;
  *(void *)&long long v10 = v4;
  DWORD2(v10) = v5;
  uint64_t v11 = v6;
  long long v8 = *(_OWORD *)(a2 + 5);
  long long v12 = *(_OWORD *)(a2 + 3);
  long long v13 = v8;
  long long v14 = *(_OWORD *)(a2 + 7);
  uint64_t v15 = a2[9];
  int v16 = v7;
  return static _DraggingModifier.makeView(modifier:inputs:body:)(&v10, a3, a4);
}

uint64_t static _DraggingModifier.makeView(modifier:inputs:body:)@<X0>(long long *a1@<X1>, uint64_t (*a2)(void)@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  long long v5 = a1[3];
  long long v40 = a1[2];
  long long v41 = v5;
  long long v42 = a1[4];
  int v43 = *((_DWORD *)a1 + 20);
  long long v6 = *a1;
  long long v7 = a1[1];
  uint64_t v18 = v41;
  int v19 = DWORD2(v41);
  long long v38 = v6;
  long long v39 = v7;
  *(void *)&long long v20 = v41;
  DWORD2(v20) = DWORD2(v41);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0) {
    return a2();
  }
  long long v22 = v40;
  long long v23 = v41;
  long long v24 = v42;
  LODWORD(v25) = v43;
  long long v21 = v39;
  *(void *)&long long v20 = _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PortalGroupID and conformance PortalGroupID();
  uint64_t v8 = Attribute.init<A>(body:value:flags:update:)();
  UniqueID.init()();
  uint64_t v9 = v20;
  closure #1 in static _DraggingModifier.makeView(modifier:inputs:body:)((uint64_t)&v38, v20, v8, (void (*)(uint64_t, long long *))a2);
  long long v20 = v17;
  if ((_ViewOutputs.subscript.getter() & 0x100000000) == 0)
  {
    type metadata accessor for _DraggingModifier?(0, &lazy cache variable for type metadata for _GraphValue<_DraggingModifier>, (uint64_t)&type metadata for _DraggingModifier, MEMORY[0x1E4F3F590]);
    int v16 = _GraphValue.value.getter();
    long long v30 = v40;
    long long v31 = v41;
    long long v32 = v42;
    int v33 = v43;
    long long v28 = v38;
    long long v29 = v39;
    outlined retain of _ViewInputs((uint64_t)&v38);
    int v10 = _ViewOutputs.viewResponders()();
    type metadata accessor for DragPayload();
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = 0;
    *(unsigned char *)(v11 + 24) = 1;
    *(_OWORD *)(v11 + 48) = 0u;
    *(_OWORD *)(v11 + 64) = 0u;
    *(_OWORD *)(v11 + 80) = 0u;
    *(_OWORD *)(v11 + 96) = 0u;
    *(_OWORD *)(v11 + 112) = 0u;
    *(_OWORD *)(v11 + 128) = 0u;
    *(_OWORD *)(v11 + 144) = 0u;
    *(_OWORD *)(v11 + 160) = 0u;
    *(_OWORD *)(v11 + 176) = 0u;
    *(_OWORD *)(v11 + 192) = 0u;
    *(_OWORD *)(v11 + 208) = 0u;
    *(_OWORD *)(v11 + 224) = 0u;
    *(_OWORD *)(v11 + 240) = 0u;
    *(void *)(v11 + 256) = 0;
    *(_OWORD *)(v11 + 32) = 0u;
    uint64_t v27 = 0;
    long long v26 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    swift_beginAccess();
    outlined retain of _ViewInputs((uint64_t)&v38);
    outlined assign with take of _DraggingModifier?((uint64_t)&v20, v11 + 32, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
    swift_endAccess();
    *(void *)(v11 + 16) = 0;
    *(unsigned char *)(v11 + 24) = 1;
    type metadata accessor for DefaultPreviewDragPayloadResponder();
    uint64_t v12 = swift_allocObject();
    *(void *)(v12 + 320) = v11;
    *(unsigned char *)(v12 + 296) = 0;
    *(void *)(v12 + 304) = 0;
    *(_DWORD *)(v12 + 312) = 0;
    *(unsigned char *)(v12 + 316) = 2;
    long long v22 = v40;
    long long v23 = v41;
    long long v24 = v42;
    LODWORD(v25) = v43;
    long long v20 = v38;
    long long v21 = v39;
    *(void *)&long long v34 = v9;
    uint64_t v13 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v20, (uint64_t *)&v34);
    DragPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)(v16, v8, v10, v13, (uint64_t)&v20);
    long long v28 = v20;
    long long v29 = v21;
    long long v30 = v22;
    *(void *)&long long v31 = v23;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DragSnapshotResponderFilter and conformance DragSnapshotResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    LOBYTE(v28) = 0;
    uint64_t v14 = _ViewOutputs.subscript.setter();
    *(void *)&long long v28 = v18;
    DWORD2(v28) = v19;
    MEMORY[0x1F4188790](v14);
    outlined retain of [Text.Modifier]((uint64_t)&v18);
    PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
    swift_bridgeObjectRelease();
    outlined release of DropResponderFilter((uint64_t)&v20);
  }
  *(void *)&long long v28 = v18;
  DWORD2(v28) = v19;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    static AccessibilityActivationPointStorage.defaultDrag.getter();
    long long v28 = v34;
    *(void *)&long long v29 = v35;
    *((void *)&v29 + 1) = v36;
    *(void *)&long long v30 = v37;
    swift_bridgeObjectRetain();
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)((uint64_t *)&v28, (uint64_t)&v38, v17, *((unint64_t *)&v17 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = _ViewOutputs.subscript.setter();
  }
  *a3 = v17;
  return result;
}

uint64_t static DropModifier._makeView(modifier:inputs:body:)@<X0>(long long *a1@<X1>, uint64_t (*a2)(void)@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  long long v5 = a1[3];
  long long v38 = a1[2];
  long long v39 = v5;
  long long v40 = a1[4];
  int v41 = *((_DWORD *)a1 + 20);
  long long v6 = *a1;
  long long v7 = a1[1];
  uint64_t v18 = v39;
  int v19 = DWORD2(v39);
  long long v36 = v6;
  long long v37 = v7;
  *(void *)&long long v30 = v39;
  DWORD2(v30) = DWORD2(v39);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0) {
    return a2();
  }
  UniqueID.init()();
  uint64_t v8 = v30;
  if ((static ViewIdentity.nextSeed + 1) > 1) {
    int v9 = static ViewIdentity.nextSeed + 1;
  }
  else {
    int v9 = 1;
  }
  static ViewIdentity.nextSeed = v9;
  type metadata accessor for External<ViewIdentity>(0, &lazy cache variable for type metadata for External<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity, MEMORY[0x1E4F4E778]);
  lazy protocol witness table accessor for type External<ViewIdentity> and conformance External<A>(&lazy protocol witness table cache variable for type External<ViewIdentity> and conformance External<A>, &lazy cache variable for type metadata for External<ViewIdentity>, (uint64_t)&type metadata for ViewIdentity);
  int v16 = Attribute.init<A>(body:value:flags:update:)();
  closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)((uint64_t)&v36, v30, (void (*)(uint64_t, uint64_t *))a2);
  long long v30 = v17;
  uint64_t v10 = _ViewOutputs.subscript.getter();
  if ((v10 & 0x100000000) == 0)
  {
    type metadata accessor for External<ViewIdentity>(0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<DropModifier>, (uint64_t)&type metadata for DropModifier, MEMORY[0x1E4F3F590]);
    int v11 = _GraphValue.value.getter();
    long long v32 = v38;
    long long v33 = v39;
    long long v34 = v40;
    int v35 = v41;
    long long v30 = v36;
    long long v31 = v37;
    outlined retain of _ViewInputs((uint64_t)&v36);
    int v12 = _ViewOutputs.viewResponders()();
    type metadata accessor for DefaultPreviewDropPayloadResponder();
    uint64_t v13 = swift_allocObject();
    *(unsigned char *)(v13 + 296) = 0;
    *(void *)(v13 + 304) = 0;
    *(_DWORD *)(v13 + 312) = 0;
    *(_OWORD *)(v13 + 320) = 0u;
    *(_OWORD *)(v13 + 336) = 0u;
    *(void *)(v13 + 352) = 0;
    *(unsigned char *)(v13 + 316) = 2;
    long long v22 = v38;
    long long v23 = v39;
    long long v24 = v40;
    int v25 = v41;
    long long v20 = v36;
    long long v21 = v37;
    *(void *)&long long v26 = v8;
    outlined retain of _ViewInputs((uint64_t)&v36);
    uint64_t v14 = UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v20, (uint64_t *)&v26);
    DropPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)(v11, v16, v12, v14, (uint64_t)&v20);
    long long v30 = v20;
    long long v31 = v21;
    long long v32 = v22;
    *(void *)&long long v33 = v23;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for [ViewResponder]();
    lazy protocol witness table accessor for type DropResponderFilter and conformance DropResponderFilter();
    Attribute.init<A>(body:value:flags:update:)();
    outlined release of DropResponderFilter((uint64_t)&v20);
    LOBYTE(v30) = 0;
    uint64_t v10 = _ViewOutputs.subscript.setter();
  }
  *(void *)&long long v30 = v18;
  DWORD2(v30) = v19;
  MEMORY[0x1F4188790](v10);
  outlined retain of [Text.Modifier]((uint64_t)&v18);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  *(void *)&long long v30 = v18;
  DWORD2(v30) = v19;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    static AccessibilityActivationPointStorage.defaultDrop.getter();
    long long v30 = v26;
    *(void *)&long long v31 = v27;
    *((void *)&v31 + 1) = v28;
    *(void *)&long long v32 = v29;
    swift_bridgeObjectRetain();
    specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)((uint64_t *)&v30, (uint64_t)&v36, v17, *((unint64_t *)&v17 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t result = _ViewOutputs.subscript.setter();
  }
  *a3 = v17;
  return result;
}

unint64_t specialized static AccessibilityAttachmentModifier.makeAccessibilityPropertiesTransform<A>(_:value:inputs:outputs:)(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v31[5] = *MEMORY[0x1E4F143B8];
  outlined init with take of AccessibilityActivationPointStorage?((uint64_t)a1, (uint64_t)v31);
  uint64_t v8 = v31[0];
  uint64_t v9 = v31[1];
  uint64_t v10 = v31[2];
  uint64_t v11 = v31[3];
  uint64_t v12 = v31[4];
  int v25 = *(void **)(a2 + 48);
  int v26 = *(_DWORD *)(a2 + 56);
  unsigned __int8 v27 = v25;
  LODWORD(v28) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    unint64_t v23 = a4;
    outlined retain of AccessibilityActivationPointStorage?(a1);
    type metadata accessor for CVarArg(0, (unint64_t *)&lazy cache variable for type metadata for AnyAccessibilityPropertiesEntry);
    int v24 = Dictionary.init(minimumCapacity:)();
    uint64_t v13 = MEMORY[0x1E4F412D8];
    type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E4F412D8]);
    uint64_t v29 = v14;
    uint64_t v30 = lazy protocol witness table accessor for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>(&lazy protocol witness table cache variable for type AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?> and conformance AccessibilityPropertiesEntry<A>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityPropertiesEntry<AccessibilityActivationPointStorage?>, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, v13);
    uint64_t v15 = (void *)swift_allocObject();
    unsigned __int8 v27 = v15;
    _OWORD v15[2] = v8;
    void v15[3] = v9;
    v15[4] = v10;
    _OWORD v15[5] = v11;
    void v15[6] = v12;
    specialized Dictionary.subscript.setter((uint64_t)&v27, MEMORY[0x1E4F40AF0]);
    AccessibilityAttachment.init(properties:)();
    int v16 = v27;
    uint64_t v17 = v28;
    type metadata accessor for External<ViewIdentity>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<AccessibilityAttachment>, MEMORY[0x1E4F40A58], MEMORY[0x1E4F3F398]);
    uint64_t v18 = swift_allocObject();
    *(void *)(v18 + 16) = v16;
    *(void *)(v18 + 24) = v17;
    unsigned __int8 v27 = (void *)v18;
    uint64_t v28 = 0;
    type metadata accessor for External<ViewIdentity>(0, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier, MEMORY[0x1E4F4E778]);
    lazy protocol witness table accessor for type External<ViewIdentity> and conformance External<A>(&lazy protocol witness table cache variable for type External<AccessibilityAttachmentModifier> and conformance External<A>, &lazy cache variable for type metadata for External<AccessibilityAttachmentModifier>, (uint64_t)&type metadata for AccessibilityAttachmentModifier);
    swift_retain();
    Attribute.init<A>(body:value:flags:update:)();
    swift_release();
    _GraphValue.init(_:)();
    unsigned __int8 v27 = v25;
    LODWORD(v28) = v26;
    char v19 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    unsigned int v20 = 0;
    if (v19) {
      unsigned int v20 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(v24, (long long *)a2, a3, v23, 0);
    }
    swift_release();
    char v21 = v19 ^ 1;
  }
  else
  {
    unsigned int v20 = 0;
    char v21 = 1;
  }
  return v20 | ((unint64_t)(v21 & 1) << 32);
}

void type metadata accessor for External<ViewIdentity>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type External<ViewIdentity> and conformance External<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for External<ViewIdentity>(255, a2, a3, MEMORY[0x1E4F4E778]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    type metadata accessor for External<ViewIdentity>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v5 = type metadata accessor for AccessibilityPropertiesEntry();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t *outlined retain of AccessibilityActivationPointStorage?(uint64_t *a1)
{
  return a1;
}

uint64_t outlined copy of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t outlined init with take of AccessibilityActivationPointStorage?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for External<ViewIdentity>(0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityActivationPointStorage?, MEMORY[0x1E4F412D8], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t lazy protocol witness table accessor for type AccessibilityPropertiesEntry<StrongHash?> and conformance AccessibilityPropertiesEntry<A>(unint64_t *a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for AccessibilityPropertiesEntry<StrongHash?>(255, a2, a3, a4);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static DraggingPreviewModifier._makeView(modifier:inputs:body:)@<X0>(long long *a1@<X1>, uint64_t (*a2)(void)@<X2>, uint64_t a3@<X5>, _OWORD *a4@<X8>)
{
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  long long v7 = a1[3];
  long long v50 = a1[2];
  long long v51 = v7;
  long long v52 = a1[4];
  int v53 = *((_DWORD *)a1 + 20);
  long long v8 = *a1;
  long long v9 = a1[1];
  int v31 = DWORD2(v51);
  uint64_t v30 = v51;
  long long v48 = v8;
  long long v49 = v9;
  *(void *)&long long v32 = v51;
  DWORD2(v32) = DWORD2(v51);
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) == 0) {
    return a2();
  }
  uint64_t v26 = a3;
  unsigned __int8 v27 = a4;
  long long v34 = v50;
  long long v35 = v51;
  long long v36 = v52;
  LODWORD(v37) = v53;
  long long v33 = v49;
  *(void *)&long long v32 = _ViewInputs.viewPhase.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type PortalGroupID and conformance PortalGroupID();
  uint64_t v10 = Attribute.init<A>(body:value:flags:update:)();
  UniqueID.init()();
  uint64_t v11 = v32;
  int v25 = v10;
  closure #1 in static _DraggingModifier.makeView(modifier:inputs:body:)((uint64_t)&v48, v32, v10, (void (*)(uint64_t, long long *))a2);
  long long v32 = v29;
  uint64_t v12 = _ViewOutputs.subscript.getter();
  if ((v12 & 0x100000000) == 0)
  {
    unsigned int v13 = v12;
    type metadata accessor for DraggingPreviewModifier();
    type metadata accessor for _GraphValue();
    int v24 = _GraphValue.value.getter();
    long long v44 = v50;
    long long v45 = v51;
    long long v46 = v52;
    int v47 = v53;
    long long v42 = v48;
    long long v43 = v49;
    outlined retain of _ViewInputs((uint64_t)&v48);
    int v23 = _ViewOutputs.viewResponders()();
    type metadata accessor for CustomPreviewDragPayloadResponder();
    v40[2] = v50;
    v40[3] = v51;
    long long v40[4] = v52;
    int v41 = v53;
    v40[0] = v48;
    v40[1] = v49;
    uint64_t v28 = v11;
    type metadata accessor for DragPayload();
    uint64_t v14 = swift_allocObject();
    *(void *)(v14 + 16) = 0;
    *(unsigned char *)(v14 + 24) = 1;
    *(_OWORD *)(v14 + 48) = 0u;
    *(_OWORD *)(v14 + 64) = 0u;
    *(_OWORD *)(v14 + 80) = 0u;
    *(_OWORD *)(v14 + 96) = 0u;
    *(_OWORD *)(v14 + 112) = 0u;
    *(_OWORD *)(v14 + 128) = 0u;
    *(_OWORD *)(v14 + 144) = 0u;
    *(_OWORD *)(v14 + 160) = 0u;
    *(_OWORD *)(v14 + 176) = 0u;
    *(_OWORD *)(v14 + 192) = 0u;
    *(_OWORD *)(v14 + 208) = 0u;
    *(_OWORD *)(v14 + 224) = 0u;
    *(_OWORD *)(v14 + 240) = 0u;
    *(void *)(v14 + 256) = 0;
    *(_OWORD *)(v14 + 32) = 0u;
    uint64_t v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v36 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    swift_beginAccess();
    outlined retain of _ViewInputs((uint64_t)&v48);
    outlined assign with take of _DraggingModifier?((uint64_t)&v32, v14 + 32, &lazy cache variable for type metadata for _DraggingModifier?, (uint64_t)&type metadata for _DraggingModifier);
    swift_endAccess();
    *(void *)(v14 + 16) = 0;
    *(unsigned char *)(v14 + 24) = 1;
    LOBYTE(v32) = 0;
    uint64_t v15 = CustomPreviewDragPayloadResponder.__allocating_init(inputs:space:displayList:payload:)((uint64_t)v40, &v28, v13, v14);
    uint64_t v16 = DragPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)(v24, v25, v23, v15, (uint64_t)&v32);
    long long v42 = v32;
    long long v43 = v33;
    long long v44 = v34;
    *(void *)&long long v45 = v35;
    MEMORY[0x1F4188790](v16);
    char v21 = (long long *)type metadata accessor for DragPreviewResponderFilter();
    uint64_t WitnessTable = swift_getWitnessTable();
    outlined retain of ContextMenuPreviewResponderFilter<A, B>((uint64_t)&v32);
    _sSay7SwiftUI13ViewResponderCGMaTm_1(0, &lazy cache variable for type metadata for Attribute<[ViewResponder]>, (uint64_t (*)(uint64_t))type metadata accessor for [ViewResponder], MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v42, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_14, (uint64_t)&v20, (uint64_t)v21, MEMORY[0x1E4FBC248], v17, MEMORY[0x1E4FBC278], v18);
    swift_release();
    LOBYTE(v42) = 0;
    _ViewOutputs.subscript.setter();
    uint64_t v12 = outlined release of DropResponderFilter((uint64_t)&v32);
  }
  *(void *)&long long v42 = v30;
  DWORD2(v42) = v31;
  MEMORY[0x1F4188790](v12);
  char v21 = &v48;
  outlined retain of [Text.Modifier]((uint64_t)&v30);
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  uint64_t result = swift_bridgeObjectRelease();
  *unsigned __int8 v27 = v29;
  return result;
}

uint64_t outlined release of DropResponderFilter(uint64_t a1)
{
  return a1;
}

uint64_t DragPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int v15 = _ViewInputs.animatedPosition()();
  int v13 = _ViewInputs.transform.getter();
  int v12 = _ViewInputs.animatedSize()();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v10 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v9 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v7 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  int v5 = _ViewInputs.containerPosition.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a5 = a1;
  *(_DWORD *)(a5 + 4) = a3;
  *(_DWORD *)(a5 + 8) = v15;
  *(_DWORD *)(a5 + 12) = v13;
  *(_DWORD *)(a5 + 16) = v12;
  *(_DWORD *)(a5 + 20) = v11;
  *(_DWORD *)(a5 + 24) = v10;
  *(_DWORD *)(a5 + 28) = v9;
  *(_DWORD *)(a5 + 32) = v8;
  *(_DWORD *)(a5 + 36) = v7;
  *(_DWORD *)(a5 + 40) = v5;
  *(_DWORD *)(a5 + 44) = a2;
  *(void *)(a5 + 48) = a4;
  return result;
}

uint64_t outlined assign with take of _DraggingModifier?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  type metadata accessor for _DraggingModifier?(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

void type metadata accessor for _DraggingModifier?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t closure #1 in static _DraggingModifier.makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t, long long *))
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  long long v7 = *(_OWORD *)(a1 + 48);
  long long v8 = *(_OWORD *)(a1 + 16);
  v20[1] = *(_OWORD *)(a1 + 32);
  v21[0] = v7;
  long long v9 = *(_OWORD *)(a1 + 48);
  v21[1] = *(_OWORD *)(a1 + 64);
  long long v10 = *(_OWORD *)(a1 + 16);
  long long v19 = *(_OWORD *)a1;
  v20[0] = v10;
  *(_OWORD *)&long long v16[16] = v20[1];
  *(_OWORD *)uint64_t v17 = v9;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 64);
  int v22 = *(_DWORD *)(a1 + 80);
  int v18 = *(_DWORD *)(a1 + 80);
  long long v15 = v19;
  *(_OWORD *)uint64_t v16 = v8;
  outlined retain of _ViewInputs(a1);
  int v11 = _ViewInputs.transform.getter();
  long long v12 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&long long v16[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)uint64_t v17 = v12;
  *(_OWORD *)&v17[16] = *(_OWORD *)(a1 + 64);
  int v18 = *(_DWORD *)(a1 + 80);
  *(_OWORD *)uint64_t v16 = *(_OWORD *)(a1 + 16);
  LODWORD(v15) = v11;
  DWORD1(v15) = _ViewInputs.position.getter();
  *((void *)&v15 + 1) = a2;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  if (static SemanticFeature.isEnabled.getter())
  {
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type MakePortalGroupRendererEffect and conformance MakePortalGroupRendererEffect();
    Attribute.init<A>(body:value:flags:update:)();
    _GraphValue.init(_:)();
    *(void *)&long long v15 = v19;
    DWORD2(v15) = DWORD2(v19);
    *(void *)uint64_t v16 = *(void *)&v20[0];
    *(_OWORD *)&v16[8] = *(_OWORD *)((char *)v20 + 8);
    *(void *)&v16[24] = *((void *)&v20[1] + 1);
    *(void *)uint64_t v17 = *(void *)&v21[0];
    *(_OWORD *)&v17[8] = *(_OWORD *)((char *)v21 + 8);
    *(void *)&v17[24] = *((void *)&v21[1] + 1);
    int v18 = v22;
    lazy protocol witness table accessor for type PortalGroupRendererEffect and conformance PortalGroupRendererEffect();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    static RendererEffect.makeRendererEffect(effect:inputs:body:)();
  }
  else
  {
    *(void *)&long long v15 = v19;
    DWORD2(v15) = DWORD2(v19);
    *(void *)uint64_t v16 = *(void *)&v20[0];
    *(_OWORD *)&v16[8] = *(_OWORD *)((char *)v20 + 8);
    *(void *)&v16[24] = *((void *)&v20[1] + 1);
    *(void *)uint64_t v17 = *(void *)&v21[0];
    *(_OWORD *)&v17[8] = *(_OWORD *)((char *)v21 + 8);
    *(void *)&v17[24] = *((void *)&v21[1] + 1);
    int v18 = v22;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v13 = swift_bridgeObjectRetain();
    a4(v13, &v15);
  }
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PortalGroupRendererEffect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void))
{
  return static RendererEffect.makeRendererEffect(effect:inputs:body:)();
}

unint64_t lazy protocol witness table accessor for type MakePortalGroupRendererEffect and conformance MakePortalGroupRendererEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type MakePortalGroupRendererEffect and conformance MakePortalGroupRendererEffect;
  if (!lazy protocol witness table cache variable for type MakePortalGroupRendererEffect and conformance MakePortalGroupRendererEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MakePortalGroupRendererEffect and conformance MakePortalGroupRendererEffect);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PortalGroupID and conformance PortalGroupID()
{
  unint64_t result = lazy protocol witness table cache variable for type PortalGroupID and conformance PortalGroupID;
  if (!lazy protocol witness table cache variable for type PortalGroupID and conformance PortalGroupID)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PortalGroupID and conformance PortalGroupID);
  }
  return result;
}

uint64_t type metadata accessor for DragPayload()
{
  return self;
}

uint64_t type metadata accessor for CustomPreviewDragPayloadResponder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CustomPreviewDragPayloadResponder.__allocating_init(inputs:space:displayList:payload:)(uint64_t a1, uint64_t *a2, unint64_t a3, uint64_t a4)
{
  return CustomPreviewDragPayloadResponder.init(inputs:space:displayList:payload:)(a1, a2, a3 | ((HIDWORD(a3) & 1) << 32), a4);
}

uint64_t CustomPreviewDragPayloadResponder.init(inputs:space:displayList:payload:)(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)a1;
  int v6 = *(_DWORD *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  int v8 = *(_DWORD *)(a1 + 80);
  *(void *)((char *)v4 + *(void *)(class metadata base offset for CustomPreviewDragPayloadResponder + *v4 + 16)) = a4;
  uint64_t v11 = *a2;
  uint64_t v12 = v5;
  int v13 = v6;
  uint64_t v14 = v7;
  long long v9 = *(_OWORD *)(a1 + 40);
  long long v15 = *(_OWORD *)(a1 + 24);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 56);
  uint64_t v18 = *(void *)(a1 + 72);
  int v19 = v8;
  return CustomPreviewResponder.init(inputs:space:displayList:)(&v12, &v11);
}

uint64_t outlined retain of ContextMenuPreviewResponderFilter<A, B>(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for DragPreviewResponderFilter()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t CustomPreviewResponder.init(inputs:space:displayList:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = a1[2];
  int v7 = *((_DWORD *)a1 + 20);
  uint64_t v8 = *a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2
                                                                            + class metadata base offset for CustomPreviewResponder)
                                                                - 8)
                                                    + 56))(v2 + *(void *)(*(void *)v2 + class metadata base offset for CustomPreviewResponder + 16), 1, 1);
  *(void *)(v2 + *(void *)(class metadata base offset for CustomPreviewResponder + *(void *)v2 + 24)) = 0;
  *(unsigned char *)(v2 + 296) = 0;
  *(void *)(v2 + 304) = 0;
  *(_DWORD *)(v2 + 312) = 0;
  *(unsigned char *)(v2 + 316) = 2;
  uint64_t v11 = v8;
  uint64_t v12 = v4;
  int v13 = v5;
  uint64_t v14 = v6;
  long long v9 = *(_OWORD *)(a1 + 5);
  long long v15 = *(_OWORD *)(a1 + 3);
  long long v16 = v9;
  long long v17 = *(_OWORD *)(a1 + 7);
  uint64_t v18 = a1[9];
  int v19 = v7;
  return UIViewSnapshotResponder.init(inputs:space:displayList:)((uint64_t)&v12, &v11);
}

uint64_t type metadata accessor for DefaultPreviewDropPayloadResponder()
{
  uint64_t result = type metadata singleton initialization cache for DefaultPreviewDropPayloadResponder;
  if (!type metadata singleton initialization cache for DefaultPreviewDropPayloadResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t DropPreviewResponderFilter.init(modifier:inputs:identity:children:responder:)@<X0>(int a1@<W0>, int a2@<W2>, int a3@<W3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  int v14 = _ViewInputs.animatedPosition()();
  int v13 = _ViewInputs.transform.getter();
  int v12 = _ViewInputs.animatedSize()();
  swift_getKeyPath();
  int v11 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v9 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v8 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  swift_getKeyPath();
  int v7 = _ViewInputs.mapEnvironment<A>(_:)();
  swift_release();
  int v5 = _ViewInputs.containerPosition.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  *(_DWORD *)a5 = a1;
  *(_DWORD *)(a5 + 4) = a3;
  *(_DWORD *)(a5 + 8) = v14;
  *(_DWORD *)(a5 + 12) = v13;
  *(_DWORD *)(a5 + 16) = v12;
  *(_DWORD *)(a5 + 20) = v11;
  *(_DWORD *)(a5 + 24) = v9;
  *(_DWORD *)(a5 + 28) = v8;
  *(_DWORD *)(a5 + 32) = v7;
  *(_DWORD *)(a5 + 36) = v5;
  *(_DWORD *)(a5 + 40) = a2;
  *(void *)(a5 + 48) = a4;
  return result;
}

unint64_t lazy protocol witness table accessor for type DropResponderFilter and conformance DropResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DropResponderFilter and conformance DropResponderFilter;
  if (!lazy protocol witness table cache variable for type DropResponderFilter and conformance DropResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DropResponderFilter and conformance DropResponderFilter);
  }
  return result;
}

uint64_t closure #1 in static PointerHoverEffectModifier._makeView(modifier:inputs:body:)(uint64_t a1, uint64_t a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = HIDWORD(a2);
  uint64_t v21 = *MEMORY[0x1E4F143B8];
  long long v5 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&v18[16] = *(_OWORD *)(a1 + 32);
  *(_OWORD *)int v19 = v5;
  long long v6 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)&unsigned char v19[16] = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v17 = *(_OWORD *)a1;
  *(_OWORD *)uint64_t v18 = v7;
  *(_OWORD *)&v14[8] = *(_OWORD *)&v18[16];
  *(_OWORD *)long long v15 = v6;
  *(_OWORD *)&unsigned char v15[16] = *(_OWORD *)(a1 + 64);
  int v20 = *(_DWORD *)(a1 + 80);
  outlined retain of _ViewInputs(a1);
  _ViewInputs.transform.getter();
  _ViewInputs.position.getter();
  int v12 = v4;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type UIViewSnapshotResponder.Transform and conformance UIViewSnapshotResponder.Transform();
  Attribute.init<A>(body:value:flags:update:)();
  _ViewInputs.transform.setter();
  uint64_t v10 = v17;
  int v11 = DWORD2(v17);
  uint64_t v13 = *(void *)v18;
  *(_OWORD *)int v14 = *(_OWORD *)&v18[8];
  *(void *)&unsigned char v14[16] = *(void *)&v18[24];
  *(void *)long long v15 = *(void *)v19;
  *(_OWORD *)&v15[8] = *(_OWORD *)&v19[8];
  *(void *)&v15[24] = *(void *)&v19[24];
  int v16 = v20;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v8 = swift_bridgeObjectRetain();
  a3(v8, &v10);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t type metadata accessor for DefaultPreviewDragPayloadResponder()
{
  uint64_t result = type metadata singleton initialization cache for DefaultPreviewDragPayloadResponder;
  if (!type metadata singleton initialization cache for DefaultPreviewDragPayloadResponder) {
    return swift_getSingletonMetadata();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type DragSnapshotResponderFilter and conformance DragSnapshotResponderFilter()
{
  unint64_t result = lazy protocol witness table cache variable for type DragSnapshotResponderFilter and conformance DragSnapshotResponderFilter;
  if (!lazy protocol witness table cache variable for type DragSnapshotResponderFilter and conformance DragSnapshotResponderFilter)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DragSnapshotResponderFilter and conformance DragSnapshotResponderFilter);
  }
  return result;
}

uint64_t base witness table accessor for Hashable in UIColor()
{
  return _sSo7UIColorCAB7SwiftUI13ColorProviderACWlTm_1(&lazy protocol witness table cache variable for type UIColor and conformance NSObject);
}

uint64_t type metadata completion function for PlatformViewChild()
{
  swift_getAssociatedTypeWitness();
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeWithCopy for OnModifierKeysChangedModifier(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedCustomButtonMenu(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

unint64_t lazy protocol witness table accessor for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu;
  if (!lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu;
  if (!lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedCustomButtonMenu and conformance ResolvedCustomButtonMenu);
  }
  return result;
}

uint64_t assignWithCopy for LazyVStack(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 24))((*(unsigned __int8 *)(v5 + 80) + 24 + a1) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), (*(unsigned __int8 *)(v5 + 80) + 24 + a2) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t key path getter for EnvironmentValues.focusScopes : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.focusScopes.getter();
  *a1 = result;
  return result;
}

uint64_t EnvironmentValues.focusScopes.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<FocusScopesKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<FocusScopesKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t type metadata completion function for _UIHostingView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F) {
    return swift_initClassMetadata2();
  }
  return result;
}

_UNKNOWN **base witness table accessor for _GraphInputsModifier in IsSharingPickerHost()
{
  return &protocol witness table for IsSharingPickerHost;
}

void partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t), void (*a4)(uint64_t, unsigned char *, uint64_t))
{
  specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)(v4[2], (uint64_t)(v4 + 3), v4 + 52, v4[101], v4[102], v4[103], v4[104], v4[105], a1, a2, a3, a4);
}

uint64_t type metadata completion function for ViewLeafView()
{
  uint64_t AssociatedTypeWitness = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return AssociatedTypeWitness;
}

uint64_t type metadata completion function for ButtonStyleAdaptorMenuStyle()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *specialized NavigationState.StackContent.Views.ViewsSequence.subscript.getter(unint64_t a1, char a2, uint64_t a3, unsigned int a4, uint64_t (*a5)(void, void, void, void, void, void), void (*a6)(unint64_t, void, uint64_t, void, uint64_t *, uint64_t))
{
  outlined init with take of NavigationState.Base(v6, __src);
  outlined init with take of NavigationState.Base(__src, v44);
  int v12 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v44);
  if (!v12)
  {
    uint64_t v16 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
    return (uint64_t *)a5(0, 0, *(void *)v16, *(unsigned __int8 *)(v16 + 8), *(void *)(v16 + 16), 0);
  }
  char v38 = a2;
  uint64_t v35 = a3;
  unsigned int v36 = a4;
  long long v37 = a6;
  if (v12 != 1)
  {
    uint64_t v18 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
    uint64_t v19 = *(void *)v18;
    uint64_t v20 = *(void *)(v18 + 8);
    uint64_t v21 = *(void *)(v18 + 16);
    uint64_t v22 = *(void *)(v18 + 24);
    uint64_t v24 = *(void *)(v18 + 32);
    uint64_t v23 = *(void *)(v18 + 40);
    uint64_t v25 = *(void *)(v18 + 48);
    uint64_t v26 = *(void *)(v18 + 56);
    uint64_t v27 = *(void *)(v18 + 64);
    unsigned __int16 v28 = *(_WORD *)(v18 + 72);
    __dst[0] = v20;
    __dst[1] = v21;
    __dst[2] = v22;
    __dst[3] = v24;
    __dst[4] = v23;
    __dst[5] = v25;
    __dst[6] = v26;
    __dst[7] = v27;
    LOWORD(__dst[8]) = v28;
    if (v38)
    {
LABEL_17:
      __break(1u);
LABEL_18:
      uint64_t result = (uint64_t *)_assertionFailure(_:_:file:line:flags:)();
      __break(1u);
      return result;
    }
    if ((a1 & 0x8000000000000000) != 0)
    {
      __break(1u);
    }
    else
    {
      unint64_t v29 = *(void *)(v19 + 16);
      if (v29 >= a1)
      {
        uint64_t v33 = v27;
        uint64_t v34 = v25;
        uint64_t v39 = v23;
        _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
        uint64_t v30 = swift_bridgeObjectRetain();
        uint64_t v31 = specialized Collection<>.collapsedItemCount<A>(within:splitViewState:)(v30, (uint64_t)__dst, 0, (2 * a1) | 1);
        swift_bridgeObjectRelease();
        if (v29 > a1)
        {
          memcpy(v41, (const void *)(v19 + 304 * a1 + 32), 0x12BuLL);
          outlined retain of NavigationColumnState(v41);
          swift_bridgeObjectRelease();
          v37(a1, 0, v35, v36, v41, v31);
          outlined copy of NavigationSplitViewState?(v20, v21, v22, v24, v39, v34, v26, v33, v28, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          long long v15 = v41;
          return outlined release of NavigationColumnState(v15);
        }
        goto LABEL_16;
      }
    }
    __break(1u);
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  uint64_t v13 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v44);
  outlined init with take of NavigationState.Base(__src, v41);
  long long v32 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v41);
  memcpy(__dst, v13, 0x12BuLL);
  uint64_t v14 = v13[38];
  outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v32);
  outlined consume of ResolvedNavigationDestinations?(v14);
  if ((v38 & 1) != 0 || a1) {
    goto LABEL_18;
  }
  a6(0, 0, a3, a4, __dst, 0);
  long long v15 = v13;
  return outlined release of NavigationColumnState(v15);
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots()(uint64_t a1, uint64_t a2)
{
  void (*v62)(uint64_t *__return_ptr, void *);
  long long v63;
  char v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  long long v72;
  uint64_t v73;
  uint64_t v74;
  long long v75;
  long long v76;
  long long v77;
  long long v78;
  char v79;
  uint64_t v80;
  uint64_t v81;
  _OWORD v82[4];
  char v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  BOOL v89;
  char v90;
  char v91;
  long long v92;
  uint64_t v93;
  uint64_t v94;
  void v95[2];
  char v96;
  uint64_t v97;
  uint64_t v98;
  char v99;
  uint64_t v100;
  long long v101;
  long long v102;
  uint64_t v103;
  char v104;
  uint64_t __dst[38];
  char v106;
  unsigned char __src[392];
  void v108[2];
  char v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  void v113[8];
  unsigned __int16 v114;
  uint64_t v115[38];
  uint64_t v116[38];
  uint64_t v117[38];
  uint64_t v118[38];
  uint64_t v119[38];
  uint64_t v120[38];
  unsigned char v121[408];

  uint64_t v3 = v2;
  outlined init with take of NavigationState.Base(v2, __src);
  outlined init with take of NavigationState.Base(__src, v121);
  if (_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v121) != 2) {
    return 0;
  }
  uint64_t v4 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v121);
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(v4 + 24);
  uint64_t v7 = *(void *)(v4 + 32);
  uint64_t v8 = *(void *)(v4 + 40);
  uint64_t v9 = *(void *)(v4 + 48);
  uint64_t v10 = *(void *)(v4 + 56);
  uint64_t v11 = *(void *)(v4 + 64);
  unsigned __int16 v12 = *(_WORD *)(v4 + 72);
  uint64_t v54 = *(void *)(v4 + 16);
  uint64_t v55 = *(void *)(v4 + 8);
  v113[0] = v55;
  v113[1] = v54;
  v113[2] = v6;
  v113[3] = v7;
  v113[4] = v8;
  v113[5] = v9;
  v113[6] = v10;
  v113[7] = v11;
  unsigned __int16 v53 = v12;
  char v114 = v12;
  int v65 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  unint64_t v13 = *(void *)(v5 + 16);
  unint64_t v14 = v13 != 0;
  char v106 = 0;
  outlined release of NavigationState.StackContent((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  uint64_t v61 = v5;
  uint64_t result = swift_bridgeObjectRetain();
  BOOL v59 = v14;
  if (v13 == v14)
  {
    uint64_t v17 = v54;
    uint64_t v16 = v55;
    goto LABEL_73;
  }
  uint64_t v58 = v3;
  uint64_t v49 = v11;
  uint64_t v50 = v10;
  uint64_t v51 = v8;
  uint64_t v52 = v6;
  uint64_t v18 = v65;
  BOOL v19 = v13 != 0;
  if (v13 <= v14)
  {
LABEL_74:
    __break(1u);
LABEL_75:
    __break(1u);
LABEL_76:
    __break(1u);
LABEL_77:
    __break(1u);
    return result;
  }
  uint64_t v20 = 304 * (v13 != 0) + 32;
  uint64_t v21 = v14 - v13 + 1;
  uint64_t v22 = 88;
  uint64_t v23 = 3;
  uint64_t v24 = v61;
  uint64_t v57 = v13;
  uint64_t v56 = v21;
  while (2)
  {
    uint64_t result = (uint64_t)memcpy(__dst, (const void *)(v24 + v20), 0x12BuLL);
    if (v23 - 2 >= v13) {
      goto LABEL_75;
    }
    unsigned int v69 = v21 + v23;
    int v70 = v23 - 1;
    uint64_t result = (uint64_t)memcpy(v115, (const void *)(v24 + 336), 0x12BuLL);
    switch(LOBYTE(v115[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(v115);
        unsigned int v68 = v24;
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v115, v23 - 2, v61))goto LABEL_12; {
        if (v70 >= v13)
        }
          goto LABEL_46;
        memcpy(v116, (const void *)(v24 + 640), 0x12BuLL);
        switch(LOBYTE(v116[3]))
        {
          case 1:
            outlined retain of NavigationColumnState(v116);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v116, v70, v61))goto LABEL_20; {
            if (v23 >= (uint64_t)v13)
            }
              goto LABEL_45;
            memcpy(v117, (const void *)(v24 + 944), 0x12BuLL);
            switch(LOBYTE(v117[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v117);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v117, v23, v61))goto LABEL_26; {
                if (v23 + 1 >= (uint64_t)v13)
                }
                  goto LABEL_44;
                memcpy(v118, (const void *)(v24 + 1248), 0x12BuLL);
                switch(LOBYTE(v118[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v118);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v118, v23 + 1, v61))goto LABEL_32; {
                    if (v23 + 2 >= (uint64_t)v13)
                    }
                      goto LABEL_43;
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v118);
                    char v25 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v118, v23 + 1, v61);
                    outlined release of NavigationColumnState(v118);
                    goto LABEL_28;
                  case 5:
                    goto LABEL_44;
                  default:
                    goto LABEL_26;
                }
                break;
              case 2:
                outlined retain of NavigationColumnState(v117);
                char v25 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v117, v23, v61);
LABEL_28:
                outlined release of NavigationColumnState(v117);
                goto LABEL_22;
              case 5:
                goto LABEL_45;
              default:
                goto LABEL_20;
            }
            break;
          case 2:
            outlined retain of NavigationColumnState(v116);
            char v25 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v116, v70, v61);
LABEL_22:
            outlined release of NavigationColumnState(v116);
            goto LABEL_14;
          case 5:
            goto LABEL_46;
          default:
            goto LABEL_12;
        }
        break;
      case 2:
        unsigned int v68 = v24;
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(v115);
        char v25 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v115, v23 - 2, v61);
LABEL_14:
        outlined release of NavigationColumnState(v115);
        if (v25) {
          goto LABEL_15;
        }
        goto LABEL_47;
      case 5:
        unsigned int v68 = v24;
        outlined retain of NavigationColumnState(__dst);
        goto LABEL_47;
      default:
        goto LABEL_60;
    }
    memcpy(v119, (const void *)(v24 + 1552), 0x12BuLL);
    unint64_t v13 = v57;
    switch(LOBYTE(v119[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v119);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v119, v23 + 2, v61))
        {
          outlined release of NavigationColumnState(v119);
          unint64_t v13 = v57;
LABEL_32:
          outlined release of NavigationColumnState(v118);
          BOOL v19 = v59;
LABEL_26:
          outlined release of NavigationColumnState(v117);
LABEL_20:
          outlined release of NavigationColumnState(v116);
LABEL_12:
          outlined release of NavigationColumnState(v115);
LABEL_15:
          uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
          uint64_t v24 = v68;
          goto LABEL_60;
        }
        if (v23 + 3 >= v57)
        {
          outlined release of NavigationColumnState(v119);
LABEL_43:
          outlined release of NavigationColumnState(v118);
LABEL_44:
          outlined release of NavigationColumnState(v117);
LABEL_45:
          outlined release of NavigationColumnState(v116);
LABEL_46:
          outlined release of NavigationColumnState(v115);
        }
        else
        {
          memcpy(v120, (const void *)(v24 + 1856), 0x12BuLL);
          switch(LOBYTE(v120[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v120);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v120, v23 + 3, v61))
              {
                outlined release of NavigationColumnState(v120);
                goto LABEL_41;
              }
              if (v23 + 4 >= v57)
              {
                outlined release of NavigationColumnState(v120);
                goto LABEL_70;
              }
              char v27 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v23 + 4, v61, (uint64_t)v113);
              outlined release of NavigationColumnState(v120);
              outlined release of NavigationColumnState(v119);
              outlined release of NavigationColumnState(v118);
              break;
            case 2:
              outlined retain of NavigationColumnState(v120);
              char v48 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v120, v23 + 3, v61);
              outlined release of NavigationColumnState(v120);
              outlined release of NavigationColumnState(v119);
              outlined release of NavigationColumnState(v118);
              char v27 = v48 ^ 1;
              break;
            case 5:
LABEL_70:
              outlined release of NavigationColumnState(v119);
              outlined release of NavigationColumnState(v118);
              char v27 = 1;
              break;
            default:
LABEL_41:
              outlined release of NavigationColumnState(v119);
              outlined release of NavigationColumnState(v118);
              char v27 = 0;
              break;
          }
          outlined release of NavigationColumnState(v117);
LABEL_37:
          outlined release of NavigationColumnState(v116);
          outlined release of NavigationColumnState(v115);
          unint64_t v13 = v57;
          BOOL v19 = v59;
          if ((v27 & 1) == 0) {
            goto LABEL_15;
          }
        }
LABEL_47:
        uint64_t v67 = v22;
        uint64_t v28 = __dst[2];
        uint64_t v29 = LOBYTE(__dst[3]);
        uint64_t v30 = __dst[4];
        uint64_t v31 = v58[51];
        uint64_t result = static HorizontalAlignment.center.getter();
        if ((unint64_t)(v23 - 2) >= *(void *)(v31 + 16)) {
          goto LABEL_77;
        }
        uint64_t v32 = result;
        uint64_t v66 = v18;
        outlined init with copy of _VariadicView_Children(v31 + v67, (uint64_t)&v97);
        v95[0] = v32;
        v95[1] = 0;
        uint64_t v96 = 1;
        v108[0] = 0;
        v108[1] = v28;
        char v109 = v29;
        Class v110 = v30;
        int v111 = 0;
        uint64_t v112 = v29 == 3;
        unsigned int v62 = (void (*)(uint64_t *__return_ptr, void *))v58[49];
        if (v29 >= 3) {
          char v33 = 3;
        }
        else {
          char v33 = v29;
        }
        uint64_t v64 = v33;
        outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v95, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
        uint64_t v84 = 0;
        int v85 = v28;
        char v86 = v29;
        int v87 = v30;
        uint64_t v88 = 0;
        uint64_t v89 = v29 == 3;
        uint64_t v90 = 1;
        uint64_t v34 = swift_allocObject();
        *(unsigned char *)(v34 + 16) = 1;
        outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)v82, (uint64_t)&v75, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        uint64_t v80 = a2;
        long long v81 = v34;
        outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v82, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>);
        v62(&v71, v108);
        char v35 = v71;
        uint64_t v63 = v72;
        uint64_t v36 = v73;
        uint64_t v37 = v74;
        outlined init with copy of UINavigationPresentationAdaptor?((uint64_t)&v75, (uint64_t)v82, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        uint64_t v91 = v35;
        uint64_t v92 = v63;
        long long v93 = v36;
        long long v94 = v37;
        outlined destroy of UINavigationPresentationAdaptor?((uint64_t)&v75, (uint64_t (*)(void))type metadata accessor for ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>);
        type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>();
        lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>((unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>>, ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<NavigationColumnModifier, ModifiedContent<InjectKeyModifier, NavigationBackgroundReaderModifier>> and conformance <> ModifiedContent<A, B>);
        uint64_t v38 = AnyView.init<A>(_:)();
        outlined destroy of UINavigationPresentationAdaptor?((uint64_t)v95, (uint64_t (*)(void))type metadata accessor for _VariadicView.Tree<_VStackLayout, _VariadicView_Children>);
        char v103 = 0;
        long long v101 = 0u;
        long long v102 = 0u;
        uint64_t v104 = 2;
        char v98 = v38;
        int v99 = v64;
        long long v100 = 0;
        outlined init with copy of NavigationState.StackContent.PositionedView?((uint64_t)&v98, (uint64_t)v82, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
        if (*(void *)&v82[0])
        {
          int v77 = v82[2];
          uint64_t v78 = v82[3];
          uint64_t v79 = v83;
          int v75 = v82[0];
          uint64_t v76 = v82[1];
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          v95[0] = v66;
          specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)&v75, v29, isUniquelyReferenced_nonNull_native);
          uint64_t v18 = v95[0];
          swift_bridgeObjectRelease();
          uint64_t v20 = 304 * v59 + 32;
          unint64_t v13 = v57;
          BOOL v19 = v59;
          uint64_t v21 = v56;
          uint64_t v22 = v67;
          uint64_t v24 = v68;
        }
        else
        {
          outlined destroy of PPTTestCase?((uint64_t)v82, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
          uint64_t v18 = v66;
          uint64_t v40 = specialized __RawDictionaryStorage.find<A>(_:)(v29);
          BOOL v19 = v59;
          uint64_t v21 = v56;
          uint64_t v20 = 304 * v59 + 32;
          uint64_t v22 = v67;
          if (v41)
          {
            unint64_t v42 = v40;
            char v43 = swift_isUniquelyReferenced_nonNull_native();
            v95[0] = v66;
            unint64_t v13 = v57;
            if ((v43 & 1) == 0)
            {
              specialized _NativeDictionary.copy()();
              uint64_t v18 = v95[0];
            }
            uint64_t v44 = *(void *)(v18 + 56) + 72 * v42;
            int v75 = *(_OWORD *)v44;
            long long v46 = *(_OWORD *)(v44 + 32);
            long long v45 = *(_OWORD *)(v44 + 48);
            char v47 = *(unsigned char *)(v44 + 64);
            uint64_t v76 = *(_OWORD *)(v44 + 16);
            int v77 = v46;
            uint64_t v79 = v47;
            uint64_t v78 = v45;
            specialized _NativeDictionary._delete(at:)(v42, v18);
            swift_bridgeObjectRelease();
          }
          else
          {
            uint64_t v79 = 0;
            int v77 = 0u;
            uint64_t v78 = 0u;
            int v75 = 0u;
            uint64_t v76 = 0u;
            unint64_t v13 = v57;
          }
          outlined destroy of PPTTestCase?((uint64_t)&v75, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
          uint64_t v24 = v68;
        }
        outlined destroy of PPTTestCase?((uint64_t)&v98, &lazy cache variable for type metadata for NavigationState.StackContent.PositionedView?, (uint64_t)&type metadata for NavigationState.StackContent.PositionedView);
        uint64_t result = (uint64_t)outlined release of NavigationColumnState(__dst);
        if (v106 == 1) {
          goto LABEL_72;
        }
LABEL_60:
        if (__OFADD__(v70, 1)) {
          goto LABEL_76;
        }
        if (v69 != 3)
        {
          v24 += 304;
          ++v23;
          v22 += 56;
          if (v19 + v23 - 3 >= v13) {
            goto LABEL_74;
          }
          continue;
        }
LABEL_72:
        int v65 = v18;
        uint64_t v17 = v54;
        uint64_t v16 = v55;
        uint64_t v6 = v52;
        uint64_t v8 = v51;
        uint64_t v11 = v49;
        uint64_t v10 = v50;
LABEL_73:
        swift_unknownObjectRelease();
        outlined consume of NavigationSplitViewState?(v16, v17, v6, v7, v8, v9, v10, v11, v53, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
        swift_bridgeObjectRelease();
        return v65;
      case 2:
        outlined retain of NavigationColumnState(v119);
        char v26 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v113, (uint64_t)v119, v23 + 2, v61);
        outlined release of NavigationColumnState(v119);
        outlined release of NavigationColumnState(v118);
        outlined release of NavigationColumnState(v117);
        char v27 = v26 ^ 1;
        goto LABEL_37;
      case 5:
        goto LABEL_43;
      default:
        goto LABEL_32;
    }
  }
}

uint64_t NavigationState.StackContent.structuralSeed.getter@<X0>(_DWORD *a1@<X8>)
{
  outlined init with take of NavigationState.Base(v1, __dst);
  outlined init with take of NavigationState.Base(__dst, v28);
  int v3 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v28);
  if (v3)
  {
    if (v3 == 1)
    {
      uint64_t v4 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v28);
      uint64_t v5 = v4[38];
      outlined init with take of NavigationState.Base(__dst, v26);
      uint64_t v6 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v26);
      outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v6);
      outlined consume of ResolvedNavigationDestinations?(v5);
      uint64_t result = (uint64_t)outlined release of NavigationColumnState(v4);
      *a1 = *(_DWORD *)v4;
    }
    else
    {
      uint64_t v8 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v28);
      uint64_t v9 = *(void *)v8;
      uint64_t v10 = *(void *)(v8 + 8);
      uint64_t v12 = *(void *)(v8 + 16);
      uint64_t v11 = *(void *)(v8 + 24);
      uint64_t v13 = *(void *)(v8 + 32);
      uint64_t v14 = *(void *)(v8 + 40);
      uint64_t v16 = *(void *)(v8 + 48);
      uint64_t v15 = *(void *)(v8 + 56);
      if (v11 == 1) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = v10;
      }
      uint64_t v18 = *(void *)(v9 + 16);
      uint64_t v25 = *(void *)(v8 + 64);
      unsigned __int16 v24 = *(_WORD *)(v8 + 72);
      if (v18)
      {
        BOOL v19 = (unsigned int *)(v9 + 32);
        do
        {
          if (v17 == -1 || (uint64_t v20 = *v19, !v20))
          {
            uint64_t v20 = v17;
          }
          else if (v17)
          {
            if (v20 != -1)
            {
              unint64_t v21 = (v20 | (v17 << 32)) + ~(v20 << 32);
              unint64_t v22 = (v21 ^ (v21 >> 22)) + ~((v21 ^ (v21 >> 22)) << 13);
              unint64_t v23 = (9 * (v22 ^ (v22 >> 8))) ^ ((9 * (v22 ^ (v22 >> 8))) >> 15);
              uint64_t v20 = ((v23 + ~(v23 << 27)) >> 31) ^ (v23 + ~(v23 << 27));
            }
          }
          v19 += 76;
          uint64_t v17 = v20;
          --v18;
        }
        while (v18);
      }
      else
      {
        LODWORD(v20) = v17;
      }
      outlined retain of NavigationState.Base((uint64_t)__dst, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
      outlined copy of NavigationSplitViewState?(v10, v12, v11, v13, v14, v16, v15, v25, v24, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
      uint64_t result = swift_bridgeObjectRelease();
      *a1 = v20;
    }
  }
  else
  {
    uint64_t result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v28);
    *a1 = 0;
  }
  return result;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(after:)(unint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v6 = v4;
  outlined init with take of NavigationState.Base(v6, __src);
  outlined init with take of NavigationState.Base(__src, v59);
  int v11 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v59);
  if (!v11)
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v59);
    return 0;
  }
  if (v11 == 1)
  {
    uint64_t v12 = (void *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v59);
    outlined init with take of NavigationState.Base(__src, v48);
    uint64_t v44 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v48);
    memcpy(__dst, v12, 0x12BuLL);
    uint64_t v13 = v12[38];
    outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v44);
    outlined consume of ResolvedNavigationDestinations?(v13);
    uint64_t v5 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, a2 & 1, a3, a4, (uint64_t)__dst);
    int v15 = ~v14;
    outlined release of NavigationColumnState(v12);
    if (!v15) {
      return 0;
    }
    return v5;
  }
  uint64_t result = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v59);
  uint64_t v18 = *(void *)result;
  uint64_t v17 = *(void *)(result + 8);
  uint64_t v20 = *(void *)(result + 16);
  uint64_t v19 = *(void *)(result + 24);
  uint64_t v22 = *(void *)(result + 32);
  uint64_t v21 = *(void *)(result + 40);
  uint64_t v24 = *(void *)(result + 48);
  uint64_t v23 = *(void *)(result + 56);
  uint64_t v25 = *(void *)(result + 64);
  unsigned __int16 v26 = *(_WORD *)(result + 72);
  v50[0] = v17;
  v50[1] = v20;
  void v50[2] = v19;
  v50[3] = v22;
  v50[4] = v21;
  v50[5] = v24;
  v50[6] = v23;
  v50[7] = v25;
  unsigned __int16 v51 = v26;
  if (a2)
  {
    __break(1u);
    return result;
  }
  if ((a1 & 0x8000000000000000) != 0) {
    goto LABEL_64;
  }
  int64_t v27 = *(void *)(v18 + 16);
  if (v27 <= a1)
  {
LABEL_65:
    __break(1u);
LABEL_66:
    outlined release of NavigationColumnState(v56);
LABEL_67:
    outlined release of NavigationColumnState(v55);
LABEL_68:
    outlined release of NavigationColumnState(v54);
LABEL_69:
    outlined release of NavigationColumnState(v53);
LABEL_70:
    outlined release of NavigationColumnState(v52);
    outlined release of NavigationColumnState(v49);
LABEL_71:
    swift_bridgeObjectRelease();
    outlined copy of NavigationSplitViewState?(v40, v41, v42, v43, v45, v46, v47, v39, v26, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    swift_bridgeObjectRelease();
    return v5;
  }
  uint64_t v40 = v17;
  uint64_t v41 = v20;
  uint64_t v42 = v19;
  uint64_t v43 = v22;
  uint64_t v45 = v21;
  uint64_t v46 = v24;
  uint64_t v47 = v23;
  memcpy(v48, (const void *)(v18 + 304 * a1 + 32), 0x12BuLL);
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  outlined retain of NavigationColumnState(v48);
  uint64_t v5 = specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(a1, 0, a3, a4, (uint64_t)v48);
  unint64_t v28 = a1;
  int v30 = ~v29;
  outlined release of NavigationColumnState(v48);
  if (v30)
  {
    outlined copy of NavigationSplitViewState?(v40, v41, v42, v43, v45, v46, v47, v25, v26, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    swift_bridgeObjectRelease();
    return v5;
  }
  if (v28 + 1 == v27)
  {
    outlined copy of NavigationSplitViewState?(v40, v41, v42, v43, v45, v46, v47, v25, v26, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    goto LABEL_62;
  }
  uint64_t v39 = v25;
  swift_bridgeObjectRetain();
  if (v28 + 1 >= v27)
  {
LABEL_63:
    __break(1u);
LABEL_64:
    __break(1u);
    goto LABEL_65;
  }
  uint64_t v31 = v18 + 304 * v28;
  int64_t v32 = v28 + 7;
  while (2)
  {
    memcpy(v49, (const void *)(v31 + 336), 0x12BuLL);
    int64_t v33 = 2 - v27 + v32;
    uint64_t v5 = v32 - 6;
    memcpy(v52, (const void *)(v31 + 336), 0x12BuLL);
    switch(LOBYTE(v52[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v49);
        outlined retain of NavigationColumnState(v52);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v52, v32 - 6, v18))goto LABEL_70; {
        if (v32 - 5 >= v27)
        }
          goto LABEL_48;
        memcpy(v53, (const void *)(v31 + 640), 0x12BuLL);
        switch(LOBYTE(v53[3]))
        {
          case 1:
            outlined retain of NavigationColumnState(v53);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v53, v32 - 5, v18))goto LABEL_69; {
            if (v32 - 4 >= v27)
            }
              goto LABEL_47;
            memcpy(v54, (const void *)(v31 + 944), 0x12BuLL);
            switch(LOBYTE(v54[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v54);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v54, v32 - 4, v18))goto LABEL_68; {
                if (v32 - 3 >= v27)
                }
                  goto LABEL_46;
                memcpy(v55, (const void *)(v31 + 1248), 0x12BuLL);
                switch(LOBYTE(v55[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v55);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v55, v32 - 3, v18))goto LABEL_67; {
                    if (v32 - 2 >= v27)
                    }
                      goto LABEL_45;
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v55);
                    char v35 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v55, v32 - 3, v18);
                    outlined release of NavigationColumnState(v55);
                    goto LABEL_41;
                  case 5:
                    goto LABEL_46;
                  default:
                    goto LABEL_68;
                }
                break;
              case 2:
                outlined retain of NavigationColumnState(v54);
                char v35 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v54, v32 - 4, v18);
LABEL_41:
                outlined release of NavigationColumnState(v54);
                goto LABEL_39;
              case 5:
                goto LABEL_47;
              default:
                goto LABEL_69;
            }
            break;
          case 2:
            outlined retain of NavigationColumnState(v53);
            char v35 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v53, v32 - 5, v18);
LABEL_39:
            outlined release of NavigationColumnState(v53);
            goto LABEL_35;
          case 5:
            goto LABEL_48;
          default:
            goto LABEL_70;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(v49);
        outlined retain of NavigationColumnState(v52);
        char v35 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v52, v32 - 6, v18);
LABEL_35:
        outlined release of NavigationColumnState(v52);
        outlined release of NavigationColumnState(v49);
        if ((v35 & 1) == 0) {
          goto LABEL_36;
        }
        goto LABEL_71;
      case 5:
        goto LABEL_36;
      default:
        goto LABEL_71;
    }
    memcpy(v56, (const void *)(v31 + 1552), 0x12BuLL);
    switch(LOBYTE(v56[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v56);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v56, v32 - 2, v18))goto LABEL_66; {
        if (v32 - 1 < v27)
        }
        {
          memcpy(__dst, (const void *)(v31 + 1856), 0x12BuLL);
          switch(LOBYTE(__dst[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(__dst);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)__dst, v32 - 1, v18))
              {
                outlined release of NavigationColumnState(__dst);
                goto LABEL_33;
              }
              if (v32 >= v27)
              {
                outlined release of NavigationColumnState(__dst);
                goto LABEL_57;
              }
              char v34 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v32, v18, (uint64_t)v50);
              outlined release of NavigationColumnState(__dst);
              outlined release of NavigationColumnState(v56);
              outlined release of NavigationColumnState(v55);
              break;
            case 2:
              outlined retain of NavigationColumnState(__dst);
              char v38 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)__dst, v32 - 1, v18);
              outlined release of NavigationColumnState(__dst);
              outlined release of NavigationColumnState(v56);
              outlined release of NavigationColumnState(v55);
              char v34 = v38 ^ 1;
              break;
            case 5:
LABEL_57:
              outlined release of NavigationColumnState(v56);
              outlined release of NavigationColumnState(v55);
              char v34 = 1;
              break;
            default:
LABEL_33:
              outlined release of NavigationColumnState(v56);
              outlined release of NavigationColumnState(v55);
              char v34 = 0;
              break;
          }
          outlined release of NavigationColumnState(v54);
LABEL_59:
          outlined release of NavigationColumnState(v53);
          outlined release of NavigationColumnState(v52);
          outlined release of NavigationColumnState(v49);
          if ((v34 & 1) == 0) {
            goto LABEL_71;
          }
LABEL_36:
          if (v33 == 7) {
            goto LABEL_61;
          }
LABEL_49:
          v31 += 304;
          int64_t v37 = v32 - 5;
          ++v32;
          if (v37 >= v27) {
            goto LABEL_63;
          }
          continue;
        }
        outlined release of NavigationColumnState(v56);
LABEL_45:
        outlined release of NavigationColumnState(v55);
LABEL_46:
        outlined release of NavigationColumnState(v54);
LABEL_47:
        outlined release of NavigationColumnState(v53);
LABEL_48:
        outlined release of NavigationColumnState(v52);
        outlined release of NavigationColumnState(v49);
        if (v33 != 7) {
          goto LABEL_49;
        }
LABEL_61:
        swift_bridgeObjectRelease();
        outlined copy of NavigationSplitViewState?(v40, v41, v42, v43, v45, v46, v47, v39, v26, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
LABEL_62:
        swift_bridgeObjectRelease();
        return 0;
      case 2:
        outlined retain of NavigationColumnState(v56);
        char v36 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v50, (uint64_t)v56, v32 - 2, v18);
        outlined release of NavigationColumnState(v56);
        outlined release of NavigationColumnState(v55);
        outlined release of NavigationColumnState(v54);
        char v34 = v36 ^ 1;
        goto LABEL_59;
      case 5:
        goto LABEL_45;
      default:
        goto LABEL_67;
    }
  }
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.startIndex.getter()
{
  outlined init with take of NavigationState.Base(v0, __src);
  outlined init with take of NavigationState.Base(__src, v56);
  int v1 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg((uint64_t)v56);
  if (!v1)
  {
    _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
    return 0;
  }
  if (v1 == 1)
  {
    unint64_t v2 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
    outlined init with take of NavigationState.Base(__src, v45);
    int v3 = (uint64_t *)_s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v45);
    uint64_t v4 = v2[38];
    outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(v3);
    outlined consume of ResolvedNavigationDestinations?(v4);
    outlined release of NavigationColumnState(v2);
    return 0;
  }
  uint64_t v7 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v56);
  uint64_t v8 = *(void *)v7;
  uint64_t v10 = *(void *)(v7 + 16);
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t v11 = *(void *)(v7 + 32);
  uint64_t v12 = *(void *)(v7 + 40);
  uint64_t v14 = *(void *)(v7 + 48);
  uint64_t v13 = *(void *)(v7 + 56);
  uint64_t v15 = *(void *)(v7 + 64);
  unsigned __int16 v16 = *(_WORD *)(v7 + 72);
  uint64_t v44 = *(void *)(v7 + 8);
  v47[0] = v44;
  v47[1] = v10;
  void v47[2] = v9;
  v47[3] = v11;
  v47[4] = v12;
  v47[5] = v14;
  v47[6] = v13;
  v47[7] = v15;
  unsigned __int16 v48 = v16;
  unint64_t v17 = *(void *)(v8 + 16);
  if (!v17)
  {
    outlined init with take of NavigationState.Base(__src, v45);
    uint64_t v28 = _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_((uint64_t)v45);
    uint64_t v39 = *(void *)(v28 + 16);
    uint64_t v41 = *(void *)(v28 + 8);
    uint64_t v35 = *(void *)(v28 + 32);
    uint64_t v37 = *(void *)(v28 + 24);
    uint64_t v43 = v15;
    uint64_t v32 = *(void *)(v28 + 48);
    uint64_t v33 = *(void *)(v28 + 40);
    uint64_t v29 = *(void *)(v28 + 64);
    uint64_t v31 = *(void *)(v28 + 56);
    uint64_t v30 = *(unsigned __int16 *)(v28 + 72);
    swift_bridgeObjectRetain();
    outlined copy of NavigationSplitViewState?(v41, v39, v37, v35, v33, v32, v31, v29, v30, (void (*)(uint64_t, uint64_t, uint64_t))outlined copy of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined copy of AppIntentExecutor?);
    outlined copy of NavigationSplitViewState?(v44, v10, v9, v11, v12, v14, v13, v43, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
    goto LABEL_64;
  }
  uint64_t v36 = v13;
  uint64_t v38 = v12;
  uint64_t v40 = v11;
  uint64_t v42 = v14;
  _s7SwiftUI15NavigationStateV12StackContentVSgWOsTm_0((uint64_t)__src, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))outlined copy of NavigationState.Base);
  swift_bridgeObjectRetain();
  memcpy(__dst, (const void *)(v8 + 32), 0x12BuLL);
  uint64_t v5 = 0;
  uint64_t v18 = v8;
  uint64_t v34 = v9;
  uint64_t v19 = v10;
  uint64_t v20 = v44;
  uint64_t v21 = v8;
  unint64_t v22 = v17 - 1;
  while (2)
  {
    memcpy(v49, (const void *)(v18 + 32), 0x12BuLL);
    switch(LOBYTE(v49[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(v49);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v49, v5, v21))goto LABEL_69; {
        if (v5 + 1 >= v17)
        }
          goto LABEL_40;
        memcpy(v50, (const void *)(v18 + 336), 0x12BuLL);
        switch(LOBYTE(v50[3]))
        {
          case 1:
            outlined retain of NavigationColumnState(v50);
            if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v50, v5 + 1, v21))goto LABEL_68; {
            if (v5 + 2 >= v17)
            }
              goto LABEL_39;
            memcpy(v51, (const void *)(v18 + 640), 0x12BuLL);
            switch(LOBYTE(v51[3]))
            {
              case 1:
                outlined retain of NavigationColumnState(v51);
                if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v51, v5 + 2, v21))goto LABEL_67; {
                if (v5 + 3 >= v17)
                }
                  goto LABEL_38;
                memcpy(v52, (const void *)(v18 + 944), 0x12BuLL);
                switch(LOBYTE(v52[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v52);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v52, v5 + 3, v21))goto LABEL_66; {
                    if (v5 + 4 >= v17)
                    }
                      goto LABEL_37;
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v52);
                    char v24 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v52, v5 + 3, v21);
                    outlined release of NavigationColumnState(v52);
                    goto LABEL_33;
                  case 5:
                    goto LABEL_38;
                  default:
                    goto LABEL_67;
                }
                break;
              case 2:
                outlined retain of NavigationColumnState(v51);
                char v24 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v51, v5 + 2, v21);
LABEL_33:
                outlined release of NavigationColumnState(v51);
                goto LABEL_31;
              case 5:
                goto LABEL_39;
              default:
                goto LABEL_68;
            }
            break;
          case 2:
            outlined retain of NavigationColumnState(v50);
            char v24 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v50, v5 + 1, v21);
LABEL_31:
            outlined release of NavigationColumnState(v50);
            goto LABEL_27;
          case 5:
            goto LABEL_40;
          default:
            goto LABEL_69;
        }
        break;
      case 2:
        outlined retain of NavigationColumnState(__dst);
        outlined retain of NavigationColumnState(v49);
        char v24 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v49, v5, v21);
LABEL_27:
        outlined release of NavigationColumnState(v49);
        outlined release of NavigationColumnState(__dst);
        if ((v24 & 1) == 0) {
          goto LABEL_28;
        }
        goto LABEL_70;
      case 5:
        goto LABEL_28;
      default:
        goto LABEL_70;
    }
    memcpy(v53, (const void *)(v18 + 1248), 0x12BuLL);
    switch(LOBYTE(v53[3]))
    {
      case 1:
        outlined retain of NavigationColumnState(v53);
        if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v53, v5 + 4, v21))
        {
          outlined release of NavigationColumnState(v53);
LABEL_66:
          outlined release of NavigationColumnState(v52);
LABEL_67:
          outlined release of NavigationColumnState(v51);
LABEL_68:
          outlined release of NavigationColumnState(v50);
LABEL_69:
          outlined release of NavigationColumnState(v49);
          outlined release of NavigationColumnState(__dst);
LABEL_70:
          swift_bridgeObjectRelease();
          outlined copy of NavigationSplitViewState?(v20, v19, v34, v40, v38, v42, v36, v15, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
          swift_bridgeObjectRelease();
          return v5;
        }
        if (v5 + 5 < v17)
        {
          memcpy(v54, (const void *)(v18 + 1552), 0x12BuLL);
          switch(LOBYTE(v54[3]))
          {
            case 1:
              outlined retain of NavigationColumnState(v54);
              if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v54, v5 + 5, v21))
              {
                outlined release of NavigationColumnState(v54);
                outlined release of NavigationColumnState(v53);
                outlined release of NavigationColumnState(v52);
                char v23 = 0;
              }
              else if (v5 + 6 >= v17)
              {
                outlined release of NavigationColumnState(v54);
                outlined release of NavigationColumnState(v53);
                outlined release of NavigationColumnState(v52);
                char v23 = 1;
              }
              else
              {
                memcpy(v45, (const void *)(v18 + 1856), 0x12BuLL);
                switch(LOBYTE(v45[3]))
                {
                  case 1:
                    outlined retain of NavigationColumnState(v45);
                    if (specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v45, v5 + 6, v21))
                    {
                      outlined release of NavigationColumnState(v45);
                      goto LABEL_48;
                    }
                    if (v5 + 7 >= v17)
                    {
                      outlined release of NavigationColumnState(v45);
                      goto LABEL_56;
                    }
                    char v23 = specialized static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(v5 + 7, v21, (uint64_t)v47);
                    outlined release of NavigationColumnState(v45);
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                    break;
                  case 2:
                    outlined retain of NavigationColumnState(v45);
                    char v27 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v45, v5 + 6, v21);
                    outlined release of NavigationColumnState(v45);
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                    char v23 = v27 ^ 1;
                    break;
                  case 5:
LABEL_56:
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                    char v23 = 1;
                    break;
                  default:
LABEL_48:
                    outlined release of NavigationColumnState(v54);
                    outlined release of NavigationColumnState(v53);
                    char v23 = 0;
                    break;
                }
                outlined release of NavigationColumnState(v52);
              }
              uint64_t v20 = v44;
              break;
            case 2:
              outlined retain of NavigationColumnState(v54);
              char v26 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v54, v5 + 5, v21);
              outlined release of NavigationColumnState(v54);
              outlined release of NavigationColumnState(v53);
              outlined release of NavigationColumnState(v52);
              char v23 = v26 ^ 1;
              break;
            case 5:
              outlined release of NavigationColumnState(v53);
              outlined release of NavigationColumnState(v52);
              char v23 = 1;
              break;
            default:
              outlined release of NavigationColumnState(v53);
              outlined release of NavigationColumnState(v52);
              char v23 = 0;
              break;
          }
          outlined release of NavigationColumnState(v51);
LABEL_60:
          outlined release of NavigationColumnState(v50);
          outlined release of NavigationColumnState(v49);
          outlined release of NavigationColumnState(__dst);
          if ((v23 & 1) == 0) {
            goto LABEL_70;
          }
LABEL_28:
          if (v22 == v5) {
            goto LABEL_63;
          }
LABEL_41:
          memcpy(__dst, (const void *)(v18 + 336), 0x12BuLL);
          v18 += 304;
          ++v5;
          continue;
        }
        outlined release of NavigationColumnState(v53);
LABEL_37:
        outlined release of NavigationColumnState(v52);
LABEL_38:
        outlined release of NavigationColumnState(v51);
LABEL_39:
        outlined release of NavigationColumnState(v50);
LABEL_40:
        outlined release of NavigationColumnState(v49);
        outlined release of NavigationColumnState(__dst);
        if (v22 != v5) {
          goto LABEL_41;
        }
LABEL_63:
        swift_bridgeObjectRelease();
        outlined copy of NavigationSplitViewState?(v20, v19, v34, v40, v38, v42, v36, v15, v16, (void (*)(uint64_t, uint64_t, uint64_t))outlined consume of Binding<NavigationSplitViewColumn>?, (void (*)(uint64_t, uint64_t))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
LABEL_64:
        swift_bridgeObjectRelease();
        return 0;
      case 2:
        outlined retain of NavigationColumnState(v53);
        char v25 = specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)((uint64_t)v47, (uint64_t)v53, v5 + 4, v21);
        outlined release of NavigationColumnState(v53);
        outlined release of NavigationColumnState(v52);
        outlined release of NavigationColumnState(v51);
        char v23 = v25 ^ 1;
        goto LABEL_60;
      case 5:
        goto LABEL_37;
      default:
        goto LABEL_66;
    }
  }
}

void *outlined init with take of NavigationState.Base(void *__src, void *__dst)
{
  return memcpy(__dst, __src, 0x188uLL);
}

uint64_t _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOj0_(uint64_t result)
{
  *(void *)(result + 296) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

uint64_t _s7SwiftUI15NavigationStateV4Base33_D6901E90061344656248AB2898527223LLOWOg(uint64_t a1)
{
  return *(void *)(a1 + 296) >> 62;
}

uint64_t specialized NavigationState.StackContent.Views.ViewsSequence.index(after:for:)(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  outlined init with take of NavigationColumnState.ColumnContent(a5 + 112, (uint64_t)v19);
  uint64_t result = outlined init with take of NavigationColumnState.ColumnContent((uint64_t)v19, (uint64_t)v20);
  if (v21 < 0) {
    return 0;
  }
  uint64_t v9 = v22;
  if (!a4)
  {
    BOOL v10 = __OFADD__(a3, 1);
    uint64_t v12 = a3 + 1;
    if (v10) {
      goto LABEL_17;
    }
    uint64_t v13 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v14 = swift_bridgeObjectRetain();
    uint64_t v15 = v13(v14);
    swift_release();
    if (v12 >= v15)
    {
LABEL_11:
      uint64_t v18 = *(void *)(v9 + 16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (!v18) {
        return 0;
      }
      return a1;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (a4 != 1)
  {
    unsigned __int16 v16 = *(uint64_t (**)(uint64_t))(*(void *)v21 + 80);
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v17 = swift_bridgeObjectRetain();
    LOBYTE(v16) = v16(v17);
    swift_release();
    if (v16) {
      goto LABEL_11;
    }
    goto LABEL_13;
  }
  BOOL v10 = __OFADD__(a3, 1);
  uint64_t v11 = a3 + 1;
  if (!v10)
  {
    if (v11 < *(void *)(v22 + 16)) {
      return a1;
    }
    return 0;
  }
  __break(1u);
LABEL_17:
  __break(1u);
  return result;
}

{
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t);
  uint64_t v10;
  uint64_t v11;
  uint64_t (*v12)(uint64_t);
  uint64_t v13;
  uint64_t v14;

  uint64_t v5 = *(void *)(a5 + 168);
  if (v5 < 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(a5 + 176);
  if (!a4)
  {
    uint64_t v8 = a3 + 1;
    if (__OFADD__(a3, 1)) {
      goto LABEL_17;
    }
    uint64_t v9 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 88);
    swift_retain();
    swift_bridgeObjectRetain();
    BOOL v10 = swift_bridgeObjectRetain();
    uint64_t v11 = v9(v10);
    swift_release();
    if (v8 >= v11) {
      goto LABEL_11;
    }
LABEL_13:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return a1;
  }
  if (a4 == 1)
  {
    if (!__OFADD__(a3, 1))
    {
      if (a3 + 1 < *(void *)(v7 + 16)) {
        return a1;
      }
      return 0;
    }
    __break(1u);
LABEL_17:
    __break(1u);
    JUMPOUT(0x1876EFDB8);
  }
  uint64_t v12 = *(uint64_t (**)(uint64_t))(*(void *)v5 + 80);
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v13 = swift_bridgeObjectRetain();
  LOBYTE(v12) = v12(v13);
  swift_release();
  if ((v12 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_11:
  uint64_t v14 = *(void *)(v7 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v14) {
    return 0;
  }
  return a1;
}

uint64_t outlined init with take of NavigationColumnState.ColumnContent(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t AnyNavigationLinkPresentedValue.isSelected<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a2 + 144))(a1, a3, a4) & 1;
}

uint64_t AnyNavigationLinkPresentedValueStorage.isSelected<A>(in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v25[0] = a3;
  v25[1] = a1;
  uint64_t v5 = *(void *)v3;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v25 - v8;
  uint64_t v10 = *(void *)(v5 + 208);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v25 - v12;
  uint64_t v14 = *(void *)(a2 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v25 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, char *, uint64_t, double))(v19 + 16))(v13, &v3[*(void *)(v5 + 224)], v10, v16);
  int v20 = swift_dynamicCast();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56);
  if (v20)
  {
    v21(v9, 0, 1, a2);
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v18, v9, a2);
    uint64_t v22 = type metadata accessor for SelectionManagerBox();
    char v23 = SelectionManagerBox.isSelected(_:)(v18, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v18, a2);
  }
  else
  {
    v21(v9, 1, 1, a2);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    char v23 = 0;
  }
  return v23 & 1;
}

uint64_t specialized hasContent #1 <A>() in static NavigationColumnState.isElidedInCollapsedSplit<A>(column:within:splitViewState:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = _s7SwiftUI15NavigationStateVSgWObTm_0(a1, (uint64_t)&v32, &lazy cache variable for type metadata for NavigationSplitViewState?, (uint64_t)&type metadata for NavigationSplitViewState);
  if ((void)v33 != 1)
  {
    v38[0] = v33;
    v38[1] = v34;
    v38[2] = v35;
    __int16 v39 = v36;
    long long v37 = v32;
    unsigned int v10 = *(unsigned __int8 *)(a2 + 24);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v39 + 1, (uint64_t)&v40, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
    _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v40, (uint64_t)v43, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
    if (v43[0] == 3)
    {
LABEL_11:
      int v11 = 0;
LABEL_27:
      _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)v38 + 9, (uint64_t)&v41, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
      uint64_t result = _s7SwiftUI15NavigationStateVSgWObTm_0((uint64_t)&v41, (uint64_t)&v42, &lazy cache variable for type metadata for NavigationSplitViewColumn?, (uint64_t)&type metadata for NavigationSplitViewColumn);
      char v26 = 0;
      if (v42 == 3 || v10 > 2)
      {
LABEL_33:
        if (v11) {
          goto LABEL_34;
        }
        goto LABEL_38;
      }
      if (v42)
      {
        if (v42 == 1 && v10 == 2) {
          goto LABEL_32;
        }
      }
      else if (v10 - 1 < 2)
      {
LABEL_32:
        char v26 = 0;
        goto LABEL_33;
      }
      char v26 = 1;
      if (v11)
      {
LABEL_34:
        if (v11 != 1) {
          goto LABEL_35;
        }
        goto LABEL_39;
      }
LABEL_38:
      if (v26) {
        goto LABEL_39;
      }
      goto LABEL_2;
    }
    if (v10)
    {
      if (v10 == 2)
      {
        if (v43[0] != 2) {
          goto LABEL_16;
        }
      }
      else
      {
        if (v10 != 1) {
          goto LABEL_11;
        }
        if (v43[0] - 1 >= 2)
        {
LABEL_16:
          int v11 = 2;
          goto LABEL_27;
        }
      }
    }
    int v11 = 1;
    goto LABEL_27;
  }
LABEL_2:
  unint64_t v8 = a3 - 1;
  if (__OFSUB__(a3, 1))
  {
    __break(1u);
    goto LABEL_44;
  }
  uint64_t v31 = a4;
  if (*(unsigned char *)(a2 + 296)) {
    goto LABEL_4;
  }
  uint64_t v12 = *(void *)(a2 + 168);
  if (v12 < 0)
  {
    uint64_t result = 0;
    char v9 = 0;
    if ((v8 & 0x8000000000000000) != 0) {
      return result & 1;
    }
    goto LABEL_6;
  }
  uint64_t v13 = *(void *)(a2 + 112);
  uint64_t v14 = *(void *)(a2 + 120);
  uint64_t v15 = *(void *)(a2 + 136);
  uint64_t v29 = v13;
  uint64_t v30 = *(void *)(a2 + 128);
  uint64_t v16 = *(void *)(a2 + 152);
  uint64_t v28 = *(void *)(a2 + 144);
  uint64_t v17 = *(void *)(a2 + 160);
  uint64_t v18 = *(void *)(a2 + 176);
  outlined copy of NavigationColumnState.ColumnContent(v13, v14, v30, v15, v28, v16, v17, v12);
  outlined copy of NavigationColumnState.ColumnContent(v13, v14, v30, v15, v28, v16, v17, v12);
  outlined retain of NavigationColumnState((uint64_t *)a2);
  swift_release();
  outlined consume of NavigationColumnState.ReplacedRoot?(v13, v14, v30, v15);
  uint64_t v27 = *(void *)(v18 + 16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v19 = v16;
  uint64_t v20 = v16;
  uint64_t v21 = v17;
  uint64_t v22 = v17;
  uint64_t v23 = v12;
  outlined consume of NavigationColumnState.ColumnContent(v29, v14, v30, v15, v28, v20, v22, v12);
  uint64_t result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)a2);
  if (v27)
  {
LABEL_4:
    a4 = v31;
    if ((v8 & 0x8000000000000000) != 0) {
      goto LABEL_39;
    }
    char v9 = 1;
  }
  else
  {
    outlined copy of NavigationColumnState.ColumnContent(v29, v14, v30, v15, v28, v19, v21, v12);
    outlined copy of NavigationColumnState.ColumnContent(v29, v14, v30, v15, v28, v19, v21, v12);
    outlined retain of NavigationColumnState((uint64_t *)a2);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v24 = outlined consume of NavigationColumnState.ReplacedRoot?(v29, v14, v30, v15);
    char v25 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 80))(v24);
    swift_release();
    outlined consume of NavigationColumnState.ColumnContent(v29, v14, v30, v15, v28, v19, v21, v23);
    uint64_t result = (uint64_t)outlined release of NavigationColumnState((uint64_t *)a2);
    if ((v8 & 0x8000000000000000) != 0)
    {
      if (v25) {
        goto LABEL_35;
      }
      goto LABEL_39;
    }
    char v9 = v25 ^ 1;
    a4 = v31;
  }
LABEL_6:
  if (v8 < *(void *)(a4 + 16))
  {
    if (*(void *)(a4 + 304 * v8 + 80))
    {
      LOBYTE(result) = NavigationListState.hasNonEmptySelection.getter();
      if ((v9 & 1) == 0) {
        return result & 1;
      }
      goto LABEL_39;
    }
    if ((v9 & 1) == 0)
    {
LABEL_35:
      LOBYTE(result) = 0;
      return result & 1;
    }
LABEL_39:
    LOBYTE(result) = 1;
    return result & 1;
  }
LABEL_44:
  __break(1u);
  return result;
}

uint64_t AnyListSelection.Storage.__deallocating_deinit()
{
  AnyListSelection.Storage.deinit();

  return swift_deallocClassInstance();
}

uint64_t AnyListSelection.Storage.deinit()
{
  uint64_t v1 = v0 + *(void *)(*(void *)v0 + 184);
  uint64_t v2 = type metadata accessor for SelectionManagerBox();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  return v0;
}

uint64_t NavigationListState.hasNonEmptySelection.getter()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain_n();
  int64_t v8 = 0;
  if (!v5) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  for (unint64_t i = v9 | (v8 << 6); ; unint64_t i = __clz(__rbit64(v12)) + (v8 << 6))
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t))(**(void **)(*(void *)(v1 + 56) + 8 * i) + 80);
    uint64_t v15 = swift_retain();
    if ((v14(v15) & 1) == 0)
    {
      uint64_t v16 = 1;
LABEL_28:
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return v16;
    }
    uint64_t result = swift_release();
    if (v5) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      break;
    }
    if (v11 >= v6) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v11);
    ++v8;
    if (v12) {
      goto LABEL_22;
    }
    int64_t v8 = v11 + 1;
    if (v11 + 1 >= v6) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    if (v12) {
      goto LABEL_22;
    }
    int64_t v8 = v11 + 2;
    if (v11 + 2 >= v6) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    if (v12) {
      goto LABEL_22;
    }
    int64_t v8 = v11 + 3;
    if (v11 + 3 >= v6) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    if (v12) {
      goto LABEL_22;
    }
    int64_t v8 = v11 + 4;
    if (v11 + 4 >= v6) {
      goto LABEL_27;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v8);
    if (v12) {
      goto LABEL_22;
    }
    int64_t v13 = v11 + 5;
    if (v13 >= v6)
    {
LABEL_27:
      uint64_t v16 = 0;
      goto LABEL_28;
    }
    unint64_t v12 = *(void *)(v2 + 8 * v13);
    if (!v12)
    {
      while (1)
      {
        int64_t v8 = v13 + 1;
        if (__OFADD__(v13, 1)) {
          goto LABEL_30;
        }
        if (v8 >= v6) {
          goto LABEL_27;
        }
        unint64_t v12 = *(void *)(v2 + 8 * v8);
        ++v13;
        if (v12) {
          goto LABEL_22;
        }
      }
    }
    int64_t v8 = v13;
LABEL_22:
    unint64_t v5 = (v12 - 1) & v12;
  }
  __break(1u);
LABEL_30:
  __break(1u);
  return result;
}

uint64_t AnyListSelection.Storage.isEmpty.getter()
{
  return AnyListSelection.Storage.isEmpty.getter(SelectionManagerBox.isEmpty.getter);
}

uint64_t protocol witness for Projection.get(base:) in conformance ToAnyListSelection<A>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = specialized ToAnyListSelection.get(base:)(a1);
  *a2 = result;
  return result;
}

uint64_t specialized ToAnyListSelection.get(base:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SelectionManagerBox();
  double v3 = MEMORY[0x1F4188790](v2);
  unint64_t v5 = (char *)&v8 - v4;
  (*(void (**)(char *, uint64_t, double))(v6 + 16))((char *)&v8 - v4, a1, v3);
  return AnyListSelection.init<A>(_:)((uint64_t)v5);
}

uint64_t static SelectionManagerBox.== infix(_:_:)(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v76 = a1;
  int v77 = a2;
  uint64_t v74 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v64 = (char *)&v62 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  int v65 = (char *)&v62 - v8;
  uint64_t v9 = type metadata accessor for Optional();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v63 = *(void *)(TupleTypeMetadata2 - 8);
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v70 = (char *)&v62 - v10;
  uint64_t v72 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v11);
  unsigned int v62 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  unsigned int v68 = (char *)&v62 - v14;
  MEMORY[0x1F4188790](v15);
  unsigned int v69 = (char *)&v62 - v16;
  uint64_t v75 = a3;
  uint64_t v67 = a4;
  uint64_t v17 = type metadata accessor for SelectionManagerBox();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v62 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v62 - v22;
  MEMORY[0x1F4188790](v24);
  char v26 = (char *)&v62 - v25;
  uint64_t v27 = swift_getTupleTypeMetadata2();
  uint64_t v73 = *(void *)(v27 - 8);
  double v28 = MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v62 - v29;
  long long v32 = (char *)&v62 + *(int *)(v31 + 48) - v29;
  uint64_t v71 = v18;
  long long v33 = *(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16);
  v33((char *)&v62 - v29, v76, v17, v28);
  ((void (*)(char *, char *, uint64_t))v33)(v32, v77, v17);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    ((void (*)(char *, char *, uint64_t))v33)(v26, v30, v17);
    if (!swift_getEnumCaseMultiPayload())
    {
      char v46 = static Set.== infix(_:_:)();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v44 = v71;
      goto LABEL_14;
    }
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  if (EnumCaseMultiPayload != 1)
  {
    ((void (*)(char *, char *, uint64_t))v33)(v20, v30, v17);
    if (swift_getEnumCaseMultiPayload() == 2)
    {
      uint64_t v48 = v74;
      uint64_t v47 = v75;
      uint64_t v49 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      uint64_t v50 = v65;
      v49(v65, v20, v75);
      unsigned __int16 v51 = v64;
      v49(v64, v32, v47);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v52 = *(void (**)(char *, uint64_t))(v48 + 8);
      v52(v51, v47);
      v52(v50, v47);
      uint64_t v44 = v71;
      goto LABEL_14;
    }
    (*(void (**)(char *, uint64_t))(v74 + 8))(v20, v75);
LABEL_13:
    char v46 = 0;
    uint64_t v44 = v73;
    uint64_t v17 = v27;
    goto LABEL_14;
  }
  ((void (*)(char *, char *, uint64_t))v33)(v23, v30, v17);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    (*(void (**)(char *, uint64_t))(v72 + 8))(v23, v9);
    goto LABEL_13;
  }
  uint64_t v35 = v72;
  __int16 v36 = *(void (**)(char *, char *, uint64_t))(v72 + 32);
  long long v37 = v69;
  v36(v69, v23, v9);
  uint64_t v38 = v68;
  v36(v68, v32, v9);
  __int16 v39 = v70;
  char v40 = &v70[*(int *)(TupleTypeMetadata2 + 48)];
  char v41 = *(void (**)(char *, char *, uint64_t))(v35 + 16);
  v41(v70, v37, v9);
  int v77 = v40;
  v41(v40, v38, v9);
  char v42 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v74 + 48);
  int v43 = v42(v39, 1, v75);
  uint64_t v44 = v71;
  if (v43 != 1)
  {
    uint64_t v54 = v62;
    v41(v62, v70, v9);
    uint64_t v55 = v77;
    uint64_t v56 = v75;
    if (v42(v77, 1, v75) != 1)
    {
      uint64_t v58 = v74;
      BOOL v59 = v65;
      (*(void (**)(char *, char *, uint64_t))(v74 + 32))(v65, v55, v56);
      char v46 = dispatch thunk of static Equatable.== infix(_:_:)();
      uint64_t v60 = *(void (**)(char *, uint64_t))(v58 + 8);
      v60(v59, v56);
      uint64_t v61 = *(void (**)(char *, uint64_t))(v72 + 8);
      v61(v68, v9);
      v61(v69, v9);
      v60(v54, v75);
      v61(v70, v9);
      goto LABEL_14;
    }
    uint64_t v57 = *(void (**)(char *, uint64_t))(v72 + 8);
    v57(v68, v9);
    v57(v69, v9);
    (*(void (**)(char *, uint64_t))(v74 + 8))(v54, v56);
    goto LABEL_18;
  }
  uint64_t v45 = *(void (**)(char *, uint64_t))(v72 + 8);
  v45(v68, v9);
  v45(v69, v9);
  if (v42(v77, 1, v75) != 1)
  {
LABEL_18:
    (*(void (**)(char *, uint64_t))(v63 + 8))(v70, TupleTypeMetadata2);
    char v46 = 0;
    goto LABEL_14;
  }
  v45(v70, v9);
  char v46 = 1;
LABEL_14:
  (*(void (**)(char *, uint64_t))(v44 + 8))(v30, v17);
  return v46 & 1;
}

uint64_t AnyListSelection.Storage.isEmpty.getter(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t v4 = type metadata accessor for SelectionManagerBox();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - v6;
  uint64_t v8 = (char *)v1 + *(void *)(v3 + 184);
  swift_beginAccess();
  (*(void (**)(char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  LOBYTE(a1) = a1(v4);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  return a1 & 1;
}

uint64_t OptionalSelectionManagerProjection.get(base:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  double v5 = MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v10 - v6;
  (*(void (**)(char *, uint64_t, double))(v8 + 16))((char *)&v10 - v6, a1, v5);
  return SelectionManagerBox.init(optional:)((uint64_t)v7, a2);
}

uint64_t SelectionManagerBox.init(optional:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  type metadata accessor for SelectionManagerBox();

  return swift_storeEnumTagMultiPayload();
}

uint64_t type metadata accessor for SelectionManagerBox()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t SelectionManagerBox.isEmpty.getter(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v8 = (char *)&v17 - v7;
  uint64_t v9 = *(void *)(a1 - 8);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v9 + 16))(v13, v2, a1, v11);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload)
  {
    if (EnumCaseMultiPayload == 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v13, v5);
      char v15 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(v8, 1, v4) == 1;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    }
    else
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, a1);
      char v15 = 0;
    }
  }
  else
  {
    char v15 = Set.isEmpty.getter();
    swift_bridgeObjectRelease();
  }
  return v15 & 1;
}

uint64_t AnyListSelection.init<A>(_:)(uint64_t a1)
{
  return AnyListSelection.Storage.init(box:)(a1);
}

uint64_t type metadata accessor for AnyListSelection.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AnyListSelection.Storage.init(box:)(uint64_t a1)
{
  uint64_t v3 = v1 + *(void *)(*(void *)v1 + 184);
  uint64_t v4 = type metadata accessor for SelectionManagerBox();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(v3, a1, v4);
  return v1;
}

uint64_t *outlined retain of (NavigationColumnState, precedingDestinations: ResolvedNavigationDestinations?)(uint64_t *a1)
{
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[12];
  uint64_t v4 = a1[14];
  uint64_t v5 = a1[15];
  uint64_t v6 = a1[16];
  uint64_t v11 = a1[18];
  uint64_t v12 = a1[17];
  uint64_t v9 = a1[20];
  uint64_t v10 = a1[19];
  uint64_t v8 = a1[21];
  uint64_t v13 = a1[38];
  outlined copy of NavigationListState?(a1[5], a1[6]);
  outlined copy of Binding<AnyNavigationPath>?(v2, v3);
  outlined copy of NavigationColumnState.ColumnContent(v4, v5, v6, v12, v11, v10, v9, v8);
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_retain();
  outlined copy of ResolvedNavigationDestinations?(v13);
  return a1;
}

unint64_t specialized _NativeDictionary._insert(at:key:value:)(unint64_t result, char a2, uint64_t a3, void *a4)
{
  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  uint64_t v4 = a4[7] + 72 * result;
  *(unsigned char *)(v4 + 64) = *(unsigned char *)(a3 + 64);
  long long v5 = *(_OWORD *)(a3 + 48);
  *(_OWORD *)(v4 + 32) = *(_OWORD *)(a3 + 32);
  *(_OWORD *)(v4 + 48) = v5;
  long long v6 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)uint64_t v4 = *(_OWORD *)a3;
  *(_OWORD *)(v4 + 16) = v6;
  uint64_t v7 = a4[2];
  BOOL v8 = __OFADD__(v7, 1);
  uint64_t v9 = v7 + 1;
  if (v8) {
    __break(1u);
  }
  else {
    a4[2] = v9;
  }
  return result;
}

{
  uint64_t v4;
  BOOL v5;
  uint64_t v6;

  a4[(result >> 6) + 8] |= 1 << result;
  *(unsigned char *)(a4[6] + result) = a2;
  *(void *)(a4[7] + 8 * result) = a3;
  uint64_t v4 = a4[2];
  long long v5 = __OFADD__(v4, 1);
  long long v6 = v4 + 1;
  if (v5) {
    __break(1u);
  }
  else {
    a4[2] = v6;
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_VariadicView.Tree<_VStackLayout, _VariadicView_Children>, ReadDestinationsModifier<ResolvedNavigationDestinations>>, _PreferenceTransformModifier<NavigationDestinationKey>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfig()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, Content;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, Content)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnv();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedCont();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, Content);
  }
  return result;
}

uint64_t protocol witness for ViewModifier.body(content:) in conformance CollectionViewCellModifier(uint64_t a1)
{
  CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(a1);
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnv();
  return CollectionViewCellModifier.resolvedBody(content:isInSidebar:)(v1);
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnv()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurat)
  {
    type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>, MEMORY[0x1E4F404D0], MEMORY[0x1E4F410E8]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, (void (*)(uint64_t))type metadata accessor for ContentConfigurationBasedRootEnvironment);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<SidebarStyleContext>, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurat);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarStyleContext>, MEMORY[0x1E4F404D0], MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment> and conformance <> ModifiedCont()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment> and conformance <> Modifi;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment> and conformance <> Modifi)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, (void (*)(uint64_t))type metadata accessor for ContentConfigurationBasedRootEnvironment);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment> and conformance <> Modifi);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<EdgeInsets> and conformance _EnvironmentKeyWritingModifier<A>, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<EdgeInsets>, MEMORY[0x1E4F3F360]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>)
  {
    type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(255);
    type metadata accessor for _EnvironmentKeyTransformModifier<Text.Case?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListItemTint?>, &lazy cache variable for type metadata for ListItemTint?, (uint64_t)&type metadata for ListItemTint, MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(255);
    type metadata accessor for _EnvironmentKeyTransformModifier<Text.Case?>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E4F413C0], MEMORY[0x1E4F41280]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>(uint64_t a1)
{
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Text.Case?>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Text.Case?>, &lazy cache variable for type metadata for Text.Case?, MEMORY[0x1E4F413C0], MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<Text.Case?> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<Text.Case?>(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListItemTint?>, &lazy cache variable for type metadata for ListItemTint?, (uint64_t)&type metadata for ListItemTint, MEMORY[0x1E4F411E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListItemTint?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void type metadata accessor for _EnvironmentKeyTransformModifier<Text.Case?>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>(255, a3, a4, MEMORY[0x1E4FBB718]);
    unint64_t v9 = a5(a1, v8);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier> and conformance <> ModifiedContent<A, B>);
}

void type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?))
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, &lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, MEMORY[0x1E4FBB718]);
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>();
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?));
    }
  }
}

unint64_t lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>;
  if (!lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>)
  {
    type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>);
  }
  return result;
}

void type metadata accessor for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>()
{
  if (!lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>;
  if (!lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>)
  {
    type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?), MEMORY[0x1E4F41850]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)> and conformance TupleView<A>);
  }
  return result;
}

void type metadata accessor for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>();
    type metadata accessor for EnvironmentPropertyKey<ProminentHeaderStylingKey>(255, &lazy cache variable for type metadata for _AnimationModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4FBB3A8], MEMORY[0x1E4F40370]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyWritingModifier<ListItemTint?>>, AccessibilityScrollableContextModifier>, AccessibilityAttachmentModifier>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<Bool>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, _EnvironmentKeyTransformModifier<Text.Case?>>, ContentConfigurationBasedRootEnvironment>(255, &lazy cache variable for type metadata for ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, (void (*)(uint64_t))type metadata accessor for _ViewModifier_Content<CollectionViewCellModifier>, (void (*)(uint64_t))type metadata accessor for StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>>, _EnvironmentKeyWritingModifier<EdgeInsets>>, (void (*)(void))lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?, ModifiedContent<ModifiedContent<ModifiedContent<_ViewModifier_Content<CollectionViewCellModifier>, StaticIf<_SemanticFeature_v4, OutsetByRowInsetsIfNecessary, EmptyModifier>>, _PaddingLayout>, _AnimationModifier<Bool>>, ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>?)>> and conformance HStack<A>);
}

uint64_t TabContent.badge<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v7 + 16))((char *)v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0), v5);
  uint64_t v8 = Text.init<A>(_:)();
  uint64_t v11 = v8;
  uint64_t v12 = v9;
  uint64_t v14 = v13 & 1;
  unint64_t v15 = v14 | 0x8000000000000000;
  if (v10) {
    uint64_t v16 = v8;
  }
  else {
    uint64_t v16 = 0;
  }
  if (v10) {
    uint64_t v17 = v9;
  }
  else {
    uint64_t v17 = 0;
  }
  v19[0] = v16;
  v19[1] = v17;
  if (!v10) {
    unint64_t v15 = 0x1FFFFFFFELL;
  }
  v19[2] = v15;
  v19[3] = v10;
  TabContent.modifier<A>(_:)((uint64_t)v19, a2, (uint64_t)&unk_1ED4142C0, a3);
  outlined consume of Text.Storage(v11, v12, v14);
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decodeNil(forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, _DictionaryKeyedDecodingContainer.decode(_:forKey:)) & 1;
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

{
  return protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(a1, a2, a3, (uint64_t (*)(uint64_t, void, void, void, void, void))_DictionaryKeyedDecodingContainer.decode(_:forKey:));
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, void, void, void, void, void))
{
  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

{
  void *v4;

  return a4(a1, *v4, v4[1], v4[2], *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void *assignWithTake for EditMenuModifierCore(void *a1, void *a2, uint64_t a3)
{
  unint64_t v5 = (unint64_t)a2 + 11;
  *a1 = *a2;
  swift_release();
  uint64_t v6 = (_DWORD *)(((unint64_t)a1 + 11) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v6 = *(_DWORD *)(v5 & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v7 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v6 + v9 + 4) & ~v9;
  unint64_t v11 = (v9 + 4 + (v5 & 0xFFFFFFFFFFFFFFFCLL)) & ~v9;
  (*(void (**)(uint64_t, unint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24) + 7;
  unint64_t v13 = (v12 + v10) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v14 = (v12 + v11) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v13 = *(void *)v14;
  swift_release();
  *(void *)(v13 + 8) = *(void *)(v14 + 8);
  swift_release();
  *(unsigned char *)(v13 + 16) = *(unsigned char *)(v14 + 16);
  return a1;
}

void PagingLayout.update(state:proxy:)(uint64_t a1, int *a2)
{
  void (*v28)(void *__return_ptr, void);
  double v29;
  uint64_t v30;
  char *v31;
  double v32;
  void (*v33)(int *, void);
  double *v34;
  void (*v35)(int *, void);
  uint64_t v36;
  void (*v37)(int *, void);
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  double v47;
  double v48;
  double v49;
  uint64_t v50;
  uint64_t v51;
  double v52;
  double v53;
  double v54;
  uint64_t v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  uint64_t v60;
  double MinX;
  int v62;
  CGFloat v63;
  CGFloat x;
  int v65;
  _OWORD v66[2];
  long long v67;
  long long v68;
  unsigned char v69[40];
  int v70;
  uint64_t v71;
  double v72;
  double v73;
  CGFloat v74;
  CGFloat v75;
  CGFloat v76;
  CGFloat v77;
  uint64_t v78;
  void (*v79)(void *__return_ptr, void);
  long long v80;
  uint64_t v81;
  char *v82;
  long long v83;
  long long v84;
  long long v85;
  uint64_t v86;
  char v87;
  uint64_t v88;
  char v89;
  long long v90;
  long long v91;
  CGRect v92;
  CGRect v93;
  CGRect v94;

  double v4 = *(double *)v2;
  int v65 = *(unsigned __int8 *)(v2 + 8);
  double v6 = *(double *)(v2 + 16);
  double v5 = *(double *)(v2 + 24);
  uint64_t v7 = *((void *)a2 + 8);
  if (!v7) {
    goto LABEL_4;
  }
  double v8 = v4 + v5;
  if (v4 + v5 == 0.0) {
    goto LABEL_4;
  }
  v92.origin.CGFloat x = *((CGFloat *)a2 + 4);
  CGFloat v9 = *((double *)a2 + 6);
  CGFloat v10 = *((double *)a2 + 7);
  uint64_t v63 = *((double *)a2 + 5);
  v92.origin.CGFloat y = v63;
  CGFloat x = v92.origin.x;
  v92.size.CGFloat width = v9;
  v92.size.CGFloat height = v10;
  if (CGRectIsEmpty(v92))
  {
LABEL_4:
    long long v11 = *(_OWORD *)(MEMORY[0x1E4F1DB10] + 16);
    *((_OWORD *)a2 + 8) = *MEMORY[0x1E4F1DB10];
    *((_OWORD *)a2 + 9) = v11;
    if (!__OFSUB__(v7, 1))
    {
      double v12 = v6 + v6 + v4 * (double)v7 + v5 * (double)(v7 - 1);
      if (v65) {
        *((double *)a2 + 14) = v12;
      }
      else {
        *((double *)a2 + 15) = v12;
      }
      return;
    }
    __break(1u);
    goto LABEL_52;
  }
  CGFloat v13 = x;
  CGFloat v14 = v63;
  CGFloat v15 = v9;
  CGFloat v16 = v10;
  if (v65)
  {
    MinX = CGRectGetMinX(*(CGRect *)&v13);
    v93.origin.CGFloat x = x;
    v93.origin.CGFloat y = v63;
    v93.size.CGFloat width = v9;
    v93.size.CGFloat height = v10;
    double MaxX = CGRectGetMaxX(v93);
  }
  else
  {
    MinX = CGRectGetMinY(*(CGRect *)&v13);
    v94.origin.CGFloat x = x;
    v94.origin.CGFloat y = v63;
    v94.size.CGFloat width = v9;
    v94.size.CGFloat height = v10;
    double MaxX = CGRectGetMaxY(v94);
  }
  if (v6 + v5 * -0.5 < 0.0) {
    double v18 = 0.0;
  }
  else {
    double v18 = v6 + v5 * -0.5;
  }
  double v19 = floor((MinX - v18) / v8);
  if ((~*(void *)&v19 & 0x7FF0000000000000) == 0)
  {
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }
  if (v19 <= -9.22337204e18)
  {
LABEL_53:
    __break(1u);
    goto LABEL_54;
  }
  if (v19 >= 9.22337204e18)
  {
LABEL_54:
    __break(1u);
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }
  if (((uint64_t)v19 & ~((uint64_t)v19 >> 63)) >= v7) {
    uint64_t v20 = v7;
  }
  else {
    uint64_t v20 = (uint64_t)v19 & ~((uint64_t)v19 >> 63);
  }
  double v21 = ceil((MaxX - v18) / v8);
  if ((~*(void *)&v21 & 0x7FF0000000000000) == 0) {
    goto LABEL_55;
  }
  if (v21 <= -9.22337204e18)
  {
LABEL_56:
    __break(1u);
    goto LABEL_57;
  }
  if (v21 >= 9.22337204e18)
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }
  uint64_t v22 = (uint64_t)v21;
  if ((uint64_t)v21 < 0)
  {
    if (v7 < 0)
    {
      uint64_t v24 = v7;
      if (v20 == v7) {
        goto LABEL_45;
      }
      goto LABEL_33;
    }
    uint64_t v22 = 0;
    if (v20 <= 0) {
      goto LABEL_27;
    }
  }
  else
  {
    if (v7 < v22) {
      uint64_t v22 = v7;
    }
    if (v22 >= v20)
    {
LABEL_27:
      uint64_t v23 = v20;
      uint64_t v20 = v22;
      goto LABEL_31;
    }
  }
  uint64_t v23 = v22;
LABEL_31:
  uint64_t v24 = v20;
  BOOL v25 = v20 < v23;
  uint64_t v20 = v23;
  if (v25)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }
  if (v23 != v24)
  {
LABEL_33:
    uint64_t v52 = v18;
    unsigned __int16 v53 = v5;
    uint64_t v54 = v4;
    if (v20 >= v24)
    {
LABEL_60:
      __break(1u);
      return;
    }
    double v26 = *((double *)a2 + 2);
    double v27 = *((double *)a2 + 3);
    unsigned int v62 = *a2;
    uint64_t v60 = *((void *)a2 + 1);
    double v28 = (void (*)(void *__return_ptr, void))*((void *)a2 + 9);
    uint64_t v57 = *((_OWORD *)a2 + 8);
    uint64_t v58 = *((_OWORD *)a2 + 7);
    uint64_t v56 = *((_OWORD *)a2 + 9);
    uint64_t v29 = v4 * 0.5;
    BOOL v59 = *((_OWORD *)a2 + 5);
    uint64_t v50 = v24;
    unsigned __int16 v51 = v20;
    uint64_t v55 = v24 - 1;
    uint64_t v30 = *((void *)a2 + 12);
    uint64_t v31 = (char *)*((void *)a2 + 13);
    while (1)
    {
      static UnitPoint.center.getter();
      _Placement.init(proposedSize:anchoring:at:)();
      long long v32 = v29 + v6 + v8 * (double)v20;
      long long v33 = (void (*)(int *, void))_Placement.anchorPosition.modify();
      if (v65)
      {
        *long long v34 = v32;
        v33(&v70, 0);
        uint64_t v35 = (void (*)(int *, void))_Placement.anchorPosition.modify();
        *(double *)(v36 + 8) = v27 * 0.5;
        v35(&v70, 0);
        _ProposedSize.width.setter();
      }
      else
      {
        *long long v34 = v26 * 0.5;
        v33(&v70, 0);
        long long v37 = (void (*)(int *, void))_Placement.anchorPosition.modify();
        *(double *)(v38 + 8) = v32;
        v37(&v70, 0);
        _ProposedSize.height.setter();
      }
      int v70 = v62;
      uint64_t v71 = v60;
      uint64_t v72 = v26;
      uint64_t v73 = v27;
      uint64_t v74 = x;
      uint64_t v75 = v63;
      uint64_t v76 = v9;
      int v77 = v10;
      uint64_t v78 = v7;
      uint64_t v79 = v28;
      uint64_t v80 = v59;
      long long v81 = v30;
      long long v82 = v31;
      long long v83 = v58;
      uint64_t v84 = v57;
      int v85 = v56;
      outlined retain of _ScrollableLayoutProxy((uint64_t)&v70);
      v28(v66, v20);
      outlined release of _ScrollableLayoutProxy((uint64_t)&v70);
      *((void *)&v67 + 1) = v86;
      LOBYTE(v68) = v87;
      *((void *)&v68 + 1) = v88;
      v69[0] = v89;
      *(_OWORD *)&v69[8] = v90;
      *(_OWORD *)&v69[24] = v91;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v31 + 2) + 1, 1, v31);
      }
      char v40 = *((void *)v31 + 2);
      __int16 v39 = *((void *)v31 + 3);
      if (v40 >= v39 >> 1) {
        uint64_t v31 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v39 > 1), v40 + 1, 1, v31);
      }
      *((void *)v31 + 2) = v40 + 1;
      char v41 = &v31[104 * v40];
      char v42 = v66[0];
      int v43 = v67;
      *((_OWORD *)v41 + 3) = v66[1];
      *((_OWORD *)v41 + 4) = v43;
      *((_OWORD *)v41 + 2) = v42;
      uint64_t v44 = v68;
      uint64_t v45 = *(_OWORD *)v69;
      char v46 = *(_OWORD *)&v69[16];
      *((void *)v41 + 16) = *(void *)&v69[32];
      *((_OWORD *)v41 + 6) = v45;
      *((_OWORD *)v41 + 7) = v46;
      *((_OWORD *)v41 + 5) = v44;
      if (v55 == v20) {
        break;
      }
      ++v20;
    }
    *((void *)a2 + 13) = v31;
    double v5 = v53;
    double v4 = v54;
    double v18 = v52;
    uint64_t v24 = v50;
    uint64_t v20 = v51;
  }
LABEL_45:
  if (__OFSUB__(v7, 1))
  {
LABEL_59:
    __break(1u);
    goto LABEL_60;
  }
  uint64_t v47 = v18 + v8 * (double)v20;
  uint64_t v48 = v18 + v8 * (double)v24 - v47;
  *((_OWORD *)a2 + 7) = *((_OWORD *)a2 + 1);
  *((CGFloat *)a2 + 16) = x;
  *((CGFloat *)a2 + 17) = v63;
  uint64_t v49 = v6 + v6 + v4 * (double)v7 + v5 * (double)(v7 - 1);
  *((CGFloat *)a2 + 18) = v9;
  *((CGFloat *)a2 + 19) = v10;
  if (v65)
  {
    *((double *)a2 + 14) = v49;
    *((double *)a2 + 16) = v47;
    *((double *)a2 + 18) = v48;
  }
  else
  {
    *((double *)a2 + 15) = v49;
    *((double *)a2 + 17) = v47;
    *((double *)a2 + 19) = v48;
  }
}

uint64_t outlined retain of _ScrollableLayoutProxy(uint64_t a1)
{
  return a1;
}

void closure #1 in UIScrollView.updateRefreshControl(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1 + 16;
  swift_beginAccess();
  uint64_t v8 = MEMORY[0x18C119DF0](v7);
  if (v8)
  {
    CGFloat v9 = (void *)v8;
    v10[0] = a2;
    v10[1] = a3;
    _OWORD v10[2] = a4;
    UIScrollView._updateRefreshControl(_:)(v10);
  }
}

uint64_t TabContent.badge(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unint64_t v6 = a3 & 1 | 0x8000000000000000;
  if (a4) {
    uint64_t v7 = a1;
  }
  else {
    uint64_t v7 = 0;
  }
  if (a4) {
    uint64_t v8 = a2;
  }
  else {
    uint64_t v8 = 0;
  }
  v10[0] = v7;
  v10[1] = v8;
  if (!a4) {
    unint64_t v6 = 0x1FFFFFFFELL;
  }
  _OWORD v10[2] = v6;
  uint64_t v10[3] = a4;
  return TabContent.modifier<A>(_:)((uint64_t)v10, a5, (uint64_t)&unk_1ED4142C0, a6);
}

uint64_t EnvironmentValues.isEagerNavigationTransitionEnabled.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.isEagerNavigationTransitionEnabled.setter()
{
  type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>();
  _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_2((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.IsEagerNavigationTransitionEnabled>);
    }
  }
}

void LimitedAvailabilityConfiguration.IndirectOutputs.updateValue()()
{
  if (!*(void *)(v0 + 96))
  {
    id v1 = (id)AGSubgraphGetGraph();
    unsigned __int8 v2 = (void *)AGSubgraphCreate();

    *(void *)(v0 + 96) = v2;
    id v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityConfiguration.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<SearchScopeActivation.Role> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Image.Scale>(255, a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextAcceptsPredicate<SidebarStyleContext>(255, a2, a3, MEMORY[0x1E4F411E8]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_0(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_1(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(void, uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for FailedCallbacks<()>(255, a2, MEMORY[0x1E4FBB390], a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_2(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_3(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t _s7SwiftUI30_EnvironmentKeyWritingModifierVySbGACyxGAA04ViewF0AAWlTm_4(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t closure #1 in LimitedAvailabilityConfiguration.IndirectOutputs.updateValue()(uint64_t a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  long long v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 16);
  double v21 = *(void *)(a1 + 56);
  uint64_t v22 = *(_DWORD *)(a1 + 24);
  uint64_t v23 = *(_DWORD *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  double v18 = *(_OWORD *)(v2 + 48);
  double v19 = *(_OWORD *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  char v11 = *(unsigned char *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(void *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(void *)(v13 + 64) = v8;
  *(void *)(v13 + 72) = v9;
  *(unsigned char *)(v13 + 80) = v10;
  *(unsigned char *)(v13 + 81) = v11;
  *(void *)(v13 + 88) = v12;
  swift_retain();
  uint64_t v14 = *(void *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  double v26 = v20;
  double v27 = v22;
  double v28 = v13;
  uint64_t v29 = v4;
  uint64_t v30 = v5;
  uint64_t v31 = v21;
  long long v32 = v3;
  long long v33 = v23;
  CGFloat v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  double v26 = v14;
  double v27 = v8;
  uint64_t v24 = v34;
  BOOL v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Bool>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>);
    }
  }
}

uint64_t TabContent.tabPlacement(_:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4 = *a1;
  return TabContent.modifier<A>(_:)((uint64_t)&v4, a2, (uint64_t)&type metadata for TabPlacementModifier, a3);
}

uint64_t TabContent.modifier<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v9 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  char v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, v4, a2, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a1, a3);
  return ModifiedTabContent.init(content:modifier:)((uint64_t)v15, (uint64_t)v11, a2, a3, a4);
}

uint64_t static LimitedAvailabilityConfiguration._makeWidgetConfiguration(widget:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  PreferencesInputs.makeIndirectOutputs()();
  swift_bridgeObjectRelease();
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityConfiguration, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  id v1 = (id)AGSubgraphGetCurrent();
  if (!v1) {
    __break(1u);
  }
  uint64_t v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityConfiguration.IndirectOutputs and conformance LimitedAvailabilityConfiguration.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void UIScrollView._updateRefreshControl(_:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v5 = a1[2];
  id v6 = objc_msgSend(v2, sel_refreshControl);
  if (v6)
  {
  }
  else if (v4)
  {
    refreshed = (objc_class *)type metadata accessor for UIKitRefreshControl();
    uint64_t v10 = (char *)objc_allocWithZone(refreshed);
    *(void *)&v10[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_currentTask] = 0;
    char v11 = (uint64_t *)&v10[OBJC_IVAR____TtC7SwiftUI19UIKitRefreshControl_configuration];
    *char v11 = v4;
    v11[1] = v3;
    v11[2] = v5;
    v14.receiver = v10;
    v14.super_class = refreshed;
    swift_retain_n();
    id v12 = objc_msgSendSuper2(&v14, sel_init);
    objc_msgSend(v12, sel_addTarget_action_forControlEvents_, v12, sel__swiftui_handleRefreshControl, 4096);
    objc_msgSend(v2, sel_setRefreshControl_, v12);

    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v4);
    return;
  }
  id v7 = objc_msgSend(v2, sel_refreshControl);
  if (v7)
  {
    id v13 = v7;
    if (v4)
    {
      type metadata accessor for UIKitRefreshControl();
      if (swift_dynamicCastClass())
      {
        v15[0] = v4;
        v15[1] = v3;
        _OWORD v15[2] = v5;
        outlined copy of AppIntentExecutor?(v4);
        id v8 = v13;
        UIKitRefreshControl.configuration.setter((uint64_t)v15);

        return;
      }
    }
    else
    {
      objc_msgSend(v2, sel_setRefreshControl_, 0);
    }
  }
}

uint64_t type metadata completion function for MainMenuItemHost.RootView()
{
  uint64_t result = type metadata accessor for MainMenuItem(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<_SemanticFeature_v4>, MEMORY[0x1E4F405E0], MEMORY[0x1E4F405D8], MEMORY[0x1E4F40F30]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>);
    }
  }
}

void type metadata accessor for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>()
{
  if (!lazy cache variable for type metadata for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>)
  {
    type metadata accessor for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>();
    lazy protocol witness table accessor for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, EmptyView>);
    }
  }
}

void type metadata accessor for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>()
{
  if (!lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, MEMORY[0x1E4F40F30]);
    type metadata accessor for TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPre(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, (void (*)(uint64_t))type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>));
    lazy protocol witness table accessor for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate()
{
  unint64_t result = lazy protocol witness table cache variable for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate;
  if (!lazy protocol witness table cache variable for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ShowsDisclosureIndicatorPredicate and conformance ShowsDisclosureIndicatorPredicate);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, (uint64_t (*)(void))lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, MEMORY[0x1E4F40F30]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

void type metadata accessor for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>))
  {
    type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>();
    type metadata accessor for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>));
    }
  }
}

void type metadata accessor for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>)
  {
    type metadata accessor for EnvironmentPropertyKey<ProminentHeaderStylingKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<LayoutPriorityTraitKey>, MEMORY[0x1E4F40980], MEMORY[0x1E4F40978], MEMORY[0x1E4F408B8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>);
    }
  }
}

void type metadata accessor for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>)
  {
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListNavigationLinkStyle>(255, &lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>, (uint64_t (*)(void))lazy protocol witness table accessor for type DefaultButtonStyle and conformance DefaultButtonStyle, (uint64_t)&type metadata for DefaultButtonStyle, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>)
  {
    type metadata accessor for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>();
    type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>, PlatformItemListTransformModifier<SelectionPlatformItemListFlags>>);
    }
  }
}

void type metadata accessor for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>()
{
  if (!lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>)
  {
    unint64_t v0 = type metadata accessor for PlatformItemListTransformModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemListTransformModifier<SelectionPlatformItemListFlags>);
    }
  }
}

void type metadata accessor for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>()
{
  if (!lazy cache variable for type metadata for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemListContentModifier>(255, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
    lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemListContentModifier> and conformance _ViewModifier_Content<A>(&lazy protocol witness table cache variable for type _ViewModifier_Content<OnPlatformContainerSelectionModifier> and conformance _ViewModifier_Content<A>, &lazy cache variable for type metadata for _ViewModifier_Content<OnPlatformContainerSelectionModifier>, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
    unint64_t v0 = type metadata accessor for MergePlatformItemsView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MergePlatformItemsView<_ViewModifier_Content<OnPlatformContainerSelectionModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _ViewModifier_Content<PlatformItemListContentModifier> and conformance _ViewModifier_Content<A>(unint64_t *a1, unint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _ViewModifier_Content<PlatformItemListContentModifier>(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _ViewModifier_Content<PlatformItemListContentModifier>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for _ViewModifier_Content();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier;
  if (!lazy protocol witness table cache variable for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
  }
  return result;
}

void type metadata accessor for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>);
    }
  }
}

void type metadata accessor for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>)
  {
    type metadata accessor for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>();
    lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v(&lazy protocol witness table cache variable for type AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>> and conformance AndOperationViewInputPredicate<A, B>, (void (*)(uint64_t))type metadata accessor for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>);
    }
  }
}

void type metadata accessor for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>()
{
  if (!lazy cache variable for type metadata for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<_SemanticFeature_v4>, MEMORY[0x1E4F405E0], MEMORY[0x1E4F405D8], MEMORY[0x1E4F40F30]);
    type metadata accessor for StyleContextAcceptsPredicate<PlainListStyleContext>(255, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext, MEMORY[0x1E4F410E8]);
    lazy protocol witness table accessor for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<PlainListStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<SidebarListStyleContext> and conformance StyleContextAcceptsPredicate<A>, &lazy cache variable for type metadata for StyleContextAcceptsPredicate<SidebarListStyleContext>, (uint64_t)&type metadata for SidebarListStyleContext);
    unint64_t v0 = type metadata accessor for AndOperationViewInputPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>;
  if (!lazy protocol witness table cache variable for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>)
  {
    _s7SwiftUI6ButtonVyAA09PrimitiveC18StyleConfigurationV5LabelVGMaTm_4(255, &lazy cache variable for type metadata for InvertedViewInputPredicate<_SemanticFeature_v4>, MEMORY[0x1E4F405E0], MEMORY[0x1E4F405D8], MEMORY[0x1E4F40F30]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InvertedViewInputPredicate<_SemanticFeature_v4> and conformance InvertedViewInputPredicate<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(void *)(a2(0) - 8);
  uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));

  return a3(a1, v6);
}

uint64_t partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(uint64_t a1)
{
  return partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter(a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?, closure #1 in ToolbarModifier.TransformSearch.value.getter);
}

uint64_t (*ToolbarModifier.TransformSearch.value.getter())(uint64_t a1)
{
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = *(void *)(v1 + 64);
  MEMORY[0x1F4188790](v0);
  uint64_t v3 = (char *)&v11 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (char *)&v11 - v5;
  uint64_t Value = AGGraphGetValue();
  outlined init with copy of WeakBox<DocumentViewController>(Value, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  outlined init with take of ToolbarStorage.SearchItem?((uint64_t)v6, (uint64_t)v3, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  unint64_t v8 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v9 = swift_allocObject();
  outlined init with take of ToolbarStorage.SearchItem?((uint64_t)v3, v9 + v8, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  return partial apply for closure #1 in ToolbarModifier.TransformSearch.value.getter;
}

uint64_t outlined init with take of ToolbarStorage.SearchItem?(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t closure #1 in ToolbarModifier.TransformSearch.value.getter(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ToolbarStorage.SearchItem?(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of WeakBox<DocumentViewController>(a1, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  uint64_t v7 = type metadata accessor for ToolbarStorage.SearchItem(0);
  int v8 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7);
  uint64_t result = outlined destroy of ToolbarStorage.SearchItem?((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  if (v8 == 1)
  {
    outlined destroy of ToolbarStorage.SearchItem?(a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
    return outlined init with copy of WeakBox<DocumentViewController>(a2, a1, (uint64_t (*)(void))type metadata accessor for ToolbarStorage.SearchItem?);
  }
  return result;
}

uint64_t outlined init with copy of WeakBox<DocumentViewController>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for AccessibilityPropertiesEntry<AccessibilityNullableOptionSet<AccessibilityVisibility>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for ToolbarStorage.SearchItem?(uint64_t a1)
{
}

uint64_t outlined destroy of ToolbarStorage.SearchItem?(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(void *a1)
{
  return specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, *(void *)(v1 + 16), *(unsigned char *)(v1 + 24), *(void *)(v1 + 32), *(unsigned char *)(v1 + 40), *(void *)(v1 + 48), *(unsigned char *)(v1 + 56), *(void *)(v1 + 64), *(unsigned char *)(v1 + 72), *(_WORD *)(v1 + 73), HIBYTE(*(_WORD *)(v1 + 73)), *(void *)(v1 + 80), *(void *)(v1 + 88), *(unsigned char *)(v1 + 96));
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_188382670);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_188382690);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_18834FC50);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_18838AA10);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_188382680);
}

{
  return partial apply for specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(a1, (__n128)xmmword_18835ED10);
}

uint64_t specialized closure #3 in ToolbarAppearanceModifier.PreferenceValue.value.getter(void *a1, uint64_t a2, char a3, uint64_t a4, char a5, uint64_t a6, char a7, uint64_t a8, char a9, char a10, char a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t v88 = 0;
  memset(v87, 0, sizeof(v87));
  _s7SwiftUI30AccessibilityScrollableContextOSgWOcTm_0((uint64_t)v87, (uint64_t)v85, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
  if (v86 == 7)
  {
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v87, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    uint64_t v17 = specialized ToolbarAppearanceModifier.PreferenceValue.resolvedBars.getter();
    uint64_t v18 = *((void *)v17 + 2);
    if (!v18) {
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    outlined init with take of ToolbarPlacement.Role((uint64_t)v85, (uint64_t)v84);
    _sSay7SwiftUI25_LazyLayout_PlacedSubviewVGMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<ToolbarPlacement.Role>, (uint64_t)&type metadata for ToolbarPlacement.Role, MEMORY[0x1E4FBBE00]);
    uint64_t v19 = swift_allocObject();
    *(_OWORD *)(v19 + 16) = xmmword_18834BB80;
    outlined init with take of ToolbarPlacement.Role((uint64_t)v84, v19 + 32);
    _s7SwiftUI30AccessibilityScrollableContextOSgWOhTm_0((uint64_t)v87, &lazy cache variable for type metadata for ToolbarPlacement.Role?, (uint64_t)&type metadata for ToolbarPlacement.Role);
    uint64_t v17 = (char *)v19;
    uint64_t v18 = *(void *)(v19 + 16);
    if (!v18) {
      return swift_bridgeObjectRelease();
    }
  }
  uint64_t v66 = a4;
  uint64_t v20 = (uint64_t)(v17 + 32);
  long long v83 = a1;
  char v65 = a7;
  while (1)
  {
    uint64_t v71 = v20;
    uint64_t v72 = v18;
    outlined init with copy of ToolbarPlacement.Role(v20, (uint64_t)v87);
    uint64_t v22 = *a1;
    if (*(void *)(*a1 + 16) && (uint64_t v23 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v87), (v24 & 1) != 0))
    {
      uint64_t v25 = *(void *)(v22 + 56) + 80 * v23;
      char v26 = *(unsigned char *)v25;
      uint64_t v27 = *(void *)(v25 + 8);
      uint64_t v28 = *(void *)(v25 + 16);
      char v29 = *(unsigned char *)(v25 + 24);
      uint64_t v78 = *(void *)(v25 + 32);
      uint64_t v30 = *(void *)(v25 + 48);
      char v80 = *(unsigned char *)(v25 + 40);
      char v81 = *(unsigned char *)(v25 + 56);
      char v31 = *(unsigned char *)(v25 + 57);
      char v32 = *(unsigned char *)(v25 + 58);
      char v33 = *(unsigned char *)(v25 + 72);
      uint64_t v82 = *(void *)(v25 + 64);
      swift_retain();
      uint64_t v34 = v27;
      uint64_t v35 = v78;
      swift_retain();
      swift_retain();
    }
    else
    {
      uint64_t v30 = 0;
      char v32 = 0;
      uint64_t v35 = 0;
      char v29 = 0;
      char v33 = 0;
      char v26 = 0;
      uint64_t v82 = 0;
      uint64_t v34 = 0;
      uint64_t v28 = 0;
      char v31 = 2;
      char v80 = 1;
      char v81 = 1;
    }
    if (a3 == 3) {
      char v36 = v26;
    }
    else {
      char v36 = a3;
    }
    char v79 = v36;
    if (v66)
    {
      swift_retain();
      swift_release();
      uint64_t v28 = v66;
    }
    if (a5 == 4) {
      char v37 = v29;
    }
    else {
      char v37 = a5;
    }
    char v74 = v37;
    uint64_t v38 = a6;
    if (a7) {
      uint64_t v38 = v35;
    }
    uint64_t v73 = v38;
    uint64_t v39 = a8;
    if (a9) {
      uint64_t v39 = v30;
    }
    uint64_t v75 = v39;
    if (a10 == 2) {
      char v40 = v31;
    }
    else {
      char v40 = a10;
    }
    if (a11 == 3) {
      char v41 = v32;
    }
    else {
      char v41 = a11;
    }
    char v76 = v41;
    char v77 = v40;
    if (a12)
    {
      swift_retain();
      swift_release();
      uint64_t v34 = a12;
    }
    uint64_t v42 = v82;
    if (a13)
    {
      swift_retain();
      swift_release();
      uint64_t v42 = a13;
    }
    char v43 = a14 == 3 ? v33 : a14;
    outlined init with copy of ToolbarPlacement.Role((uint64_t)v87, (uint64_t)v85);
    uint64_t v44 = v28;
    swift_retain();
    uint64_t v45 = v42;
    swift_retain();
    uint64_t v46 = v34;
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v84[0] = *v83;
    uint64_t v48 = v84[0];
    *long long v83 = 0x8000000000000000;
    unint64_t v50 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v85);
    uint64_t v51 = *(void *)(v48 + 16);
    BOOL v52 = (v49 & 1) == 0;
    uint64_t v53 = v51 + v52;
    if (__OFADD__(v51, v52)) {
      break;
    }
    char v54 = v49;
    if (*(void *)(v48 + 24) >= v53)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        specialized _NativeDictionary.copy()();
      }
    }
    else
    {
      specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v53, isUniquelyReferenced_nonNull_native);
      uint64_t v55 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v85);
      if ((v54 & 1) != (v56 & 1)) {
        goto LABEL_49;
      }
      unint64_t v50 = v55;
    }
    char v57 = a7 & v80;
    char v58 = a9 & v81;
    BOOL v59 = (void *)v84[0];
    if (v54)
    {
      uint64_t v21 = *(void *)(v84[0] + 56) + 80 * v50;
      swift_release();
      swift_release();
      swift_release();
      *(unsigned char *)uint64_t v21 = v79;
      *(void *)(v21 + 8) = v46;
      *(void *)(v21 + 16) = v44;
      *(unsigned char *)(v21 + 24) = v74;
      *(void *)(v21 + 32) = v73;
      *(unsigned char *)(v21 + 40) = v57;
      *(void *)(v21 + 48) = v75;
      *(unsigned char *)(v21 + 56) = v58;
      *(unsigned char *)(v21 + 57) = v77;
      *(unsigned char *)(v21 + 58) = v76;
      *(void *)(v21 + 64) = v45;
      *(unsigned char *)(v21 + 72) = v43;
    }
    else
    {
      *(void *)(v84[0] + 8 * (v50 >> 6) + 64) |= 1 << v50;
      outlined init with copy of ToolbarPlacement.Role((uint64_t)v85, v59[6] + 40 * v50);
      uint64_t v60 = v59[7] + 80 * v50;
      *(unsigned char *)uint64_t v60 = v79;
      *(void *)(v60 + 8) = v46;
      *(void *)(v60 + 16) = v44;
      *(unsigned char *)(v60 + 24) = v74;
      *(void *)(v60 + 32) = v73;
      *(unsigned char *)(v60 + 40) = v57;
      *(void *)(v60 + 48) = v75;
      *(unsigned char *)(v60 + 56) = v58;
      *(unsigned char *)(v60 + 57) = v77;
      *(unsigned char *)(v60 + 58) = v76;
      *(void *)(v60 + 64) = v45;
      *(unsigned char *)(v60 + 72) = v43;
      uint64_t v61 = v59[2];
      BOOL v62 = __OFADD__(v61, 1);
      uint64_t v63 = v61 + 1;
      if (v62) {
        goto LABEL_48;
      }
      v59[2] = v63;
    }
    a1 = v83;
    *long long v83 = v59;
    swift_bridgeObjectRelease();
    outlined destroy of ToolbarPlacement.Role((uint64_t)v85);
    outlined destroy of ToolbarPlacement.Role((uint64_t)v87);
    swift_release();
    swift_release();
    swift_release();
    uint64_t v20 = v71 + 40;
    uint64_t v18 = v72 - 1;
    a7 = v65;
    if (v72 == 1) {
      return swift_bridgeObjectRelease();
    }
  }
  __break(1u);
LABEL_48:
  __break(1u);
LABEL_49:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter(uint64_t a1)
{
  return closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter(a1, *(unsigned char *)(v1 + 16), *(unsigned char *)(v1 + 17));
}

uint64_t closure #1 in ToolbarRemovingModifier.SidebarToggleRemover.value.getter(uint64_t a1, char a2, char a3)
{
  if (a2 != 2 && (a2 & 1) == 0 && a3 != 6 && a3 == 0)
  {
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    return specialized Set._Variant.insert(_:)(&v9, 0);
  }
  return result;
}

uint64_t specialized Set._Variant.insert(_:)(unsigned char *a1, char a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = a2 & 1;
  uint64_t v7 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(a2 & 1);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v3;
    *uint64_t v3 = 0x8000000000000000;
    specialized _NativeSet.insertNew(_:at:isUnique:)(v6, v10, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v15;
    swift_bridgeObjectRelease();
    uint64_t result = 1;
    goto LABEL_8;
  }
  uint64_t v11 = *(void *)(v7 + 48);
  if ((((v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0)
  {
    uint64_t v12 = ~v9;
    do
    {
      unint64_t v10 = (v10 + 1) & v12;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v10) & 1) == 0) {
        goto LABEL_7;
      }
    }
    while ((((v6 == 0) ^ *(unsigned __int8 *)(v11 + v10)) & 1) == 0);
  }
  uint64_t result = 0;
  LOBYTE(v6) = *(unsigned char *)(*(void *)(*v3 + 48) + v10);
LABEL_8:
  *a1 = v6;
  return result;
}

Swift::Int specialized _NativeSet.insertNew(_:at:isUnique:)(Swift::Int result, unint64_t a2, char a3)
{
  Swift::UInt v5 = result & 1;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (((v5 == 0) ^ *(unsigned __int8 *)(v10 + a2)))
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (((v5 == 0) ^ *(unsigned __int8 *)(v10 + a2))) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(unsigned char *)(*(void *)(v12 + 48) + a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::Int v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _OWORD *v12;
  long long v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unsigned char v17[40];
  uint64_t v18;

  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  Hasher._combine(_:)(*(void *)(v5 + 40));
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = ~v9;
    while (1)
    {
      outlined init with copy of AccessibilityRelationshipScope.Key(*(void *)(v8 + 48) + 48 * a2, (uint64_t)v17);
      if ((MEMORY[0x18C1174E0](v17, v5) & 1) != 0 && v18 == *(void *)(v5 + 40)) {
        break;
      }
      uint64_t result = outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v17);
      a2 = (a2 + 1) & v10;
      if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
        goto LABEL_14;
      }
    }
    outlined destroy of AccessibilityRelationshipScope.Key((uint64_t)v17);
    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    __break(1u);
  }
LABEL_14:
  uint64_t v11 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  uint64_t v12 = (_OWORD *)(*(void *)(v11 + 48) + 48 * a2);
  uint64_t v13 = *(_OWORD *)(v5 + 16);
  *uint64_t v12 = *(_OWORD *)v5;
  v12[1] = v13;
  v12[2] = *(_OWORD *)(v5 + 32);
  BOOL v14 = *(void *)(v11 + 16);
  uint64_t v15 = __OFADD__(v14, 1);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v11 + 16) = v16;
  }
  return result;
}

{
  uint64_t *v3;
  Swift::UInt v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;

  Swift::UInt v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v7 > v6)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()(&lazy cache variable for type metadata for _SetStorage<CommandFlag>, (void (*)(void))lazy protocol witness table accessor for type CommandFlag and conformance CommandFlag);
      goto LABEL_14;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v8 = *v3;
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v5);
  uint64_t result = Hasher._finalize()();
  uint64_t v9 = -1 << *(unsigned char *)(v8 + 32);
  a2 = result & ~v9;
  if ((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v10 = *(void *)(v8 + 48);
    if (*(void *)(v10 + 8 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
      __break(1u);
    }
    else
    {
      uint64_t v11 = ~v9;
      while (1)
      {
        a2 = (a2 + 1) & v11;
        if (((*(void *)(v8 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v10 + 8 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }
LABEL_14:
  uint64_t v12 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  *(void *)(*(void *)(v12 + 48) + 8 * a2) = v5;
  uint64_t v13 = *(void *)(v12 + 16);
  BOOL v14 = __OFADD__(v13, 1);
  uint64_t v15 = v13 + 1;
  if (v14) {
    __break(1u);
  }
  else {
    *(void *)(v12 + 16) = v15;
  }
  return result;
}

{
  uint64_t *v3;
  uint64_t *v4;
  Swift::Int v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  long long v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  unsigned char v19[40];

  uint64_t v4 = v3;
  unint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  uint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  if (a3)
  {
    specialized _NativeSet.resize(capacity:)();
  }
  else
  {
    if (v8 > v7)
    {
      uint64_t result = (Swift::Int)specialized _NativeSet.copy()();
      goto LABEL_12;
    }
    specialized _NativeSet.copyAndResize(capacity:)();
  }
  uint64_t v9 = *v3;
  uint64_t result = AnyHashable._rawHashValue(seed:)(*(void *)(*v3 + 40));
  uint64_t v10 = -1 << *(unsigned char *)(v9 + 32);
  a2 = result & ~v10;
  if ((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2))
  {
    uint64_t v11 = ~v10;
    do
    {
      outlined init with copy of AnyHashable(*(void *)(v9 + 48) + 40 * a2, (uint64_t)v19);
      uint64_t v12 = MEMORY[0x18C1174E0](v19, v6);
      uint64_t result = outlined destroy of AnyHashable((uint64_t)v19);
      if (v12) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v11;
    }
    while (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFFF8)) >> a2) & 1) != 0);
  }
LABEL_12:
  uint64_t v13 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1 << a2;
  BOOL v14 = *(void *)(v13 + 48) + 40 * a2;
  uint64_t v15 = *(_OWORD *)(v6 + 16);
  *(_OWORD *)BOOL v14 = *(_OWORD *)v6;
  *(_OWORD *)(v14 + 16) = v15;
  *(void *)(v14 + 32) = *(void *)(v6 + 32);
  uint64_t v16 = *(void *)(v13 + 16);
  uint64_t v17 = __OFADD__(v16, 1);
  uint64_t v18 = v16 + 1;
  if (!v17)
  {
    *(void *)(v13 + 16) = v18;
    return result;
  }
  __break(1u);
LABEL_15:
  uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

uint64_t partial apply for closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter(uint64_t a1)
{
  return closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter(a1, *(unsigned char *)(v1 + 16));
}

uint64_t _s7SwiftUI23ToolbarRemovingModifier33_E54E8F0036C88C06FCE06176D1A5D36FLLV12TitleRemoverV5valueyyAA010NavigationO7StorageVSgzcvgyAJzcfU_TA_0(uint64_t result)
{
  if (*(unsigned char *)(v1 + 16))
  {
    if (*(void *)(result + 24) == 1)
    {
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = xmmword_1883B6DC0;
      *(void *)(result + 48) = 0;
    }
    *(unsigned char *)(result + 56) = 2;
  }
  return result;
}

uint64_t closure #1 in ToolbarRemovingModifier.TitleRemover.value.getter(uint64_t result, char a2)
{
  if (a2)
  {
    if (*(void *)(result + 24) == 1)
    {
      *(_OWORD *)uint64_t result = 0u;
      *(_OWORD *)(result + 16) = 0u;
      *(_OWORD *)(result + 32) = xmmword_1883B6DC0;
      *(void *)(result + 48) = 0;
    }
    *(unsigned char *)(result + 56) = 2;
  }
  return result;
}

void *partial apply for closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter(uint64_t a1)
{
  return closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter(a1);
}

uint64_t partial apply for closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter(uint64_t *a1)
{
  return closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter(a1, *(unsigned char *)(v1 + 16));
}

uint64_t closure #1 in PlatformItemEnabledModifier.PlatformItemListTransform.value.getter(uint64_t *a1, char a2)
{
  uint64_t v4 = type metadata accessor for PlatformItemList.Item();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v14 - v9;
  PlatformItemList.mergedContentItem.getter(*a1, (uint64_t)&v14 - v9);
  swift_bridgeObjectRelease();
  v10[56] = a2;
  outlined init with copy of PlatformItemList.Item((uint64_t)v10, (uint64_t)v7);
  type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>();
  unint64_t v11 = (*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v12 = swift_allocObject();
  *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
  outlined init with take of PlatformItemList.Item((uint64_t)v7, v12 + v11);
  uint64_t result = outlined destroy of PlatformItemList.Item((uint64_t)v10);
  *a1 = v12;
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<PlatformItemList.Item>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>)
  {
    type metadata accessor for PlatformItemList.Item();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<PlatformItemList.Item>);
    }
  }
}

uint64_t specialized PlatformItemList.modify(_:)(uint64_t result, void *a2)
{
  uint64_t v2 = *(void **)result;
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    uint64_t v14 = (void *)result;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    if (result)
    {
      if (v2[2]) {
        goto LABEL_4;
      }
    }
    else
    {
      uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      uint64_t v2 = (void *)result;
      if (*(void *)(result + 16))
      {
LABEL_4:
        unint64_t v4 = 0;
        uint64_t v5 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
        uint64_t v6 = *(void *)(v5 + 72);
        uint64_t v7 = v3 - 1;
        uint64_t v8 = (void *)((char *)v2
                      + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
                      + 248);
        uint64_t v9 = MEMORY[0x1E4F41550];
        uint64_t v15 = v7;
        uint64_t v16 = v6;
        do
        {
          _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)(v8 - 23), (uint64_t)v18, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v9);
          _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v18, (uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?, v9);
          uint64_t result = _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)v19);
          if (result != 1)
          {
            uint64_t v10 = *v8;
            uint64_t v11 = v8[1];
            uint64_t v12 = (void *)v8[2];
            outlined retain of Image.NamedResolved?(a2, (void (*)(void, void, void, void, void, void))outlined copy of Image.NamedResolved?);
            uint64_t v13 = v12;
            uint64_t v7 = v15;
            uint64_t v9 = MEMORY[0x1E4F41550];
            outlined consume of Image.NamedResolved?(v10, v11, v13);
            uint64_t v6 = v16;
            uint64_t result = _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)a2, (uint64_t)v8, &lazy cache variable for type metadata for Image.NamedResolved?, MEMORY[0x1E4F41540]);
          }
          if (v7 == v4) {
            goto LABEL_10;
          }
          ++v4;
          uint64_t v8 = (uint64_t *)((char *)v8 + v6);
        }
        while (v4 < v2[2]);
      }
    }
    __break(1u);
LABEL_10:
    *uint64_t v14 = v2;
  }
  return result;
}

void *closure #1 in PlatformItemListNamedImageRepresentable.NamedResolvedRule.value.getter(uint64_t a1)
{
  type metadata accessor for CommandOperation?(0, (unint64_t *)&lazy cache variable for type metadata for Text.Style?, MEMORY[0x1E4F413C8], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v2 - 8);
  unint64_t v4 = &v12[-v3];
  uint64_t v5 = type metadata accessor for ImageResolutionContext();
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = &v12[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t Value = AGGraphGetValue();
  uint64_t v9 = *(void *)(Value + 16);
  v13[0] = *(void *)(Value + 8);
  v13[1] = v9;
  uint64_t v10 = type metadata accessor for Text.Style();
  (*(void (**)(unsigned char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v4, 1, 1, v10);
  swift_retain();
  swift_retain();
  default argument 2 of ImageResolutionContext.init(environment:textStyle:transaction:)();
  ImageResolutionContext.init(environment:textStyle:transaction:)();
  AGGraphGetValue();
  swift_retain();
  Image.resolveNamedImage(in:)();
  swift_release();
  _s7SwiftUI5ImageVAAE8ResolvedVSgWObTm_2((uint64_t)v12, (uint64_t)v13, &lazy cache variable for type metadata for Image.NamedResolved?, MEMORY[0x1E4F41540]);
  outlined retain of Image.NamedResolved?(v13, (void (*)(void, void, void, void, void, void))outlined copy of Image.NamedResolved?);
  specialized PlatformItemList.modify(_:)(a1, v13);
  outlined retain of Image.NamedResolved?(v13, (void (*)(void, void, void, void, void, void))outlined consume of Image.NamedResolved?);
  outlined destroy of CommandOperation((uint64_t)v7, MEMORY[0x1E4F40970]);
  return outlined retain of Image.NamedResolved?(v13, (void (*)(void, void, void, void, void, void))outlined consume of Image.NamedResolved?);
}

void *outlined retain of Image.NamedResolved?(void *a1, void (*a2)(void, void, void, void, void, void))
{
  return a1;
}

uint64_t outlined consume of Image.NamedResolved?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    outlined consume of Image.Location(a3);
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined copy of Image.NamedResolved?(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    swift_bridgeObjectRetain();
    outlined copy of Image.Location(a3);
    swift_retain();
    return swift_retain();
  }
  return result;
}

void protocol witness for static ResolvedTextProvider.updateImageTextAttachment(in:image:) in conformance SwiftUIResolvedTextProvider(void *a1, uint64_t a2)
{
  id v3 = *(id *)a2;
  char v5 = *(unsigned char *)(a2 + 8);
  outlined copy of GraphicsImage.Contents?(*(id *)a2, v5);
  id v4 = GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(1, 1, 0);
  outlined consume of GraphicsImage.Contents?(v3, v5);
  objc_msgSend(a1, sel_setImage_, v4);
}

id GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(int a1, int a2, uint64_t a3)
{
  LODWORD(v106) = a2;
  uint64_t v4 = *v3;
  int v5 = *((unsigned __int8 *)v3 + 8);
  uint64_t v7 = v3[2];
  uint64_t v6 = v3[3];
  uint64_t v8 = (uint64_t (*)())v3[4];
  int v9 = *((unsigned __int8 *)v3 + 40);
  uint64_t v10 = *(uint64_t *)((char *)v3 + 44);
  uint64_t v11 = *(uint64_t *)((char *)v3 + 52);
  id v12 = (id)*((unsigned __int8 *)v3 + 60);
  uint64_t v14 = v3[8];
  uint64_t v13 = v3[9];
  uint64_t v15 = v3[10];
  uint64_t v16 = v3[11];
  int v17 = *((unsigned __int8 *)v3 + 96);
  int v18 = *((unsigned __int8 *)v3 + 97);
  uint64_t v19 = *((unsigned __int8 *)v3 + 98);
  int v20 = *((unsigned __int8 *)v3 + 99);
  uint64_t v116 = v11;
  int v112 = v18;
  int v113 = v20;
  int v111 = v17;
  uint64_t v109 = v15;
  uint64_t v110 = v16;
  uint64_t v108 = v13;
  int v107 = v9;
  if (v5 == 2)
  {
    LODWORD(value) = a1;
    uint64_t v21 = v10;
    int v105 = 2;
    uint64_t v114 = v14;
    uint64_t v103 = a3;
    long long v22 = *(_OWORD *)(v4 + 32);
    long long v148 = *(_OWORD *)(v4 + 16);
    long long v149 = v22;
    long long v150 = *(uint64_t (**)())(v4 + 48);
    long long v23 = *(_OWORD *)(v4 + 32);
    long long v134 = *(_OWORD *)(v4 + 16);
    long long v135 = v23;
    unsigned int v136 = *(uint64_t (**)())(v4 + 48);
    outlined retain of ResolvedVectorGlyph((uint64_t)&v148);
    char v24 = (void *)ResolvedVectorGlyph.glyph.getter();
    if (v24)
    {
      id v25 = v24;
      uint64_t v115 = v21;
      id v26 = objc_msgSend(v24, sel_name);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        id v102 = v25;
        uint64_t v30 = v29;

        long long v134 = v148;
        long long v135 = v149;
        unsigned int v136 = v150;
        unint64_t v31 = ResolvedVectorGlyph.value.getter();
        outlined init with take of Image.Location((uint64_t)&v149, (uint64_t)v151);
        outlined init with take of Image.Location((uint64_t)v151, (uint64_t)&v117);
        outlined retain of Image.Location(v151);
        id v32 = (id)GraphicsImage.image(with:variableValue:at:)(v28, v30, v31 | ((HIDWORD(v31) & 1) << 32), &v117);
        id v25 = v102;
        swift_bridgeObjectRelease();
        outlined release of Image.Location(v151);
        if (v32)
        {
          if (value)
          {
            id v106 = v32;
            objc_msgSend(v102, sel_pointSize);
            double v34 = v33;
            uint64_t v35 = (char *)objc_msgSend(v102, sel_glyphWeight);
            if ((unint64_t)(v35 - 1) >= 9) {
              uint64_t v36 = 4;
            }
            else {
              uint64_t v36 = (uint64_t)v35;
            }
            char v37 = (char *)objc_msgSend(v102, sel_glyphSize, v102);
            if ((unint64_t)(v37 - 1) >= 3) {
              uint64_t v38 = -1;
            }
            else {
              uint64_t v38 = (uint64_t)v37;
            }
            id v39 = objc_msgSend(self, sel_configurationWithPointSize_weight_scale_, v36, v38, v34);
            MEMORY[0x1F4188790](v39);
            v101[2] = v25;
            v101[3] = &v148;
            uint64_t v40 = swift_allocObject();
            *(void *)(v40 + 16) = partial apply for closure #1 in GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:);
            *(void *)(v40 + 24) = v101;
            unsigned int v136 = partial apply for thunk for @callee_guaranteed (@guaranteed UIMutableTraits) -> ();
            *(void *)uint64_t v137 = v40;
            *(void *)&long long v134 = MEMORY[0x1E4F143A8];
            *((void *)&v134 + 1) = 1107296256;
            *(void *)&long long v135 = thunk for @escaping @callee_guaranteed (@guaranteed UIMutableTraits) -> ();
            *((void *)&v135 + 1) = &block_descriptor_4;
            char v41 = _Block_copy(&v134);
            uint64_t v42 = self;
            id v43 = v39;
            swift_retain();
            id v44 = objc_msgSend(v42, sel_traitCollectionWithTraits_, v41);
            _Block_release(v41);
            swift_release();
            uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
            swift_release();
            if (isEscapingClosureAtFileLocation)
            {
              __break(1u);
LABEL_58:
              swift_once();
LABEL_41:
              uint64_t v80 = static EnvironmentValues.configuredForPlatform;
              if (v43)
              {
                swift_release();
                uint64_t v81 = v19;
                if (!v80 || v43 != (id)v80) {
                  EnvironmentValues._configureForPlatform(traitCollection:)(0);
                }
              }
              else
              {
                uint64_t v81 = v19;
                if (static EnvironmentValues.configuredForPlatform)
                {
                  swift_retain();
                  EnvironmentValues.plist.setter();
                }
              }
              swift_retain();
              outlined copy of GraphicsImage.Contents?((id)v4, 2);
              _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSnySiG_So7UIColorCs5NeverOTg50121_s7SwiftUI13GraphicsImageVAAE012makePlatformD024fixedSymbolConfiguration16flattenMaskColor13colorResolverSo7UIImageCSgSb_v31AA0F8ItemListV0P0V0dlN0VSgtFSo7D9CSiXEfU0_0G2UI0lyZ0V0Y0V0j5ColorR0VAL17EnvironmentValuesVAL0iJ0VTf1cn_nTf4ngnd_n(0, v81);
              outlined consume of GraphicsImage.Contents?((void *)v4, 2);
              swift_release();
              type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
              Class isa = Array._bridgeToObjectiveC()().super.isa;
              swift_bridgeObjectRelease();
              id v90 = objc_msgSend(self, sel_configurationWithPaletteColors_, isa);

              id v91 = v90;
              id v92 = objc_msgSend(v44, sel_configurationByApplyingConfiguration_, v91);

              swift_release();
              swift_release();
              swift_release();
              id v44 = v92;
              id v32 = v12;
LABEL_56:
              id v100 = objc_msgSend((id)isEscapingClosureAtFileLocation, sel_imageWithConfiguration_, v44, v102);
              outlined release of ResolvedVectorGlyph((uint64_t)&v148);

              return v100;
            }
            id v46 = v44;
            id v44 = objc_msgSend(v43, sel_configurationWithTraitCollection_, v46);

            id v32 = v106;
LABEL_31:
            long long v134 = v148;
            long long v135 = v149;
            unsigned int v136 = v150;
            ResolvedVectorGlyph.resolvedRenderingMode.getter();
            switch((char)v117)
            {
              case 1:
                if ((v12 & 1) == 0)
                {
                  type metadata accessor for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>();
                  uint64_t v82 = swift_allocObject();
                  *(_OWORD *)(v82 + 16) = xmmword_18834BB80;
                  long long v83 = (void *)*MEMORY[0x1E4FB31C8];
                  *(void *)(v82 + 32) = *MEMORY[0x1E4FB31C8];
                  id v84 = v83;
                  Color.Resolved.kitColor.getter();
                  self;
                  *(void *)(v82 + 40) = swift_dynamicCastObjCClassUnconditional();
                  specialized Dictionary.init(dictionaryLiteral:)(v82);
                  type metadata accessor for _UIImageNamedColorStyle(0);
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                  lazy protocol witness table accessor for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle();
                  Class v85 = Dictionary._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  id v86 = objc_msgSend(self, sel__configurationWithNamedColorStyles_, v85);

                  id v87 = objc_msgSend(v44, sel_configurationByApplyingConfiguration_, v86);
                  id v44 = v87;
                }
                id v73 = objc_msgSend(v32, sel_imageWithRenderingMode_, 1, v102);
                goto LABEL_48;
              case 2:
              case 5:
              case 6:
                uint64_t isEscapingClosureAtFileLocation = (uint64_t)objc_msgSend(v32, sel_imageWithRenderingMode_, 2);
                if ((v12 & 1) == 0)
                {
                  char v74 = self;
                  type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>();
                  uint64_t v75 = swift_allocObject();
                  *(_OWORD *)(v75 + 16) = xmmword_188351940;
                  Color.Resolved.kitColor.getter();
                  self;
                  *(void *)(v75 + 32) = swift_dynamicCastObjCClassUnconditional();
                  *(void *)&long long v134 = v75;
                  specialized Array._endMutation()();
                  type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                  Class v76 = Array._bridgeToObjectiveC()().super.isa;
                  swift_bridgeObjectRelease();
                  id v77 = objc_msgSend(v74, sel__configurationWithHierarchicalColors_, v76);

                  id v78 = objc_msgSend(v44, sel_configurationByApplyingConfiguration_, v77);
                  id v44 = v78;
                }
                goto LABEL_56;
              case 3:
              case 7:
                *(void *)&long long v134 = v4;
                BYTE8(v134) = 2;
                *(void *)&long long v135 = v7;
                *((void *)&v135 + 1) = v6;
                unsigned int v136 = v8;
                v137[0] = v107;
                *(void *)&v137[4] = v115;
                uint64_t v138 = v116;
                char v139 = (char)v12;
                uint64_t v140 = v114;
                uint64_t v141 = v108;
                uint64_t v142 = v109;
                uint64_t v143 = v110;
                char v144 = v111;
                char v145 = v112;
                char v146 = v19;
                char v147 = v113;
                GraphicsImage.styleResolverMode.getter();
                uint64_t v19 = v118;

                if (!v103)
                {
                  if (v12)
                  {
                    id v88 = v32;
                  }
                  else
                  {
                    type metadata accessor for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>();
                    uint64_t inited = swift_initStackObject();
                    *(_OWORD *)(inited + 16) = xmmword_18834BB80;
                    long long v94 = (void *)*MEMORY[0x1E4FB31C8];
                    *(void *)(inited + 32) = *MEMORY[0x1E4FB31C8];
                    id v95 = v32;
                    id v96 = v94;
                    Color.Resolved.kitColor.getter();
                    self;
                    *(void *)(inited + 40) = swift_dynamicCastObjCClassUnconditional();
                    specialized Dictionary.init(dictionaryLiteral:)(inited);
                    type metadata accessor for _UIImageNamedColorStyle(0);
                    type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
                    lazy protocol witness table accessor for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle();
                    Class v97 = Dictionary._bridgeToObjectiveC()().super.isa;
                    swift_bridgeObjectRelease();
                    id v98 = objc_msgSend(self, sel__configurationWithNamedColorStyles_, v97);

                    id v99 = objc_msgSend(v44, sel_configurationByApplyingConfiguration_, v98);
                    id v44 = v99;
                  }
                  uint64_t isEscapingClosureAtFileLocation = (uint64_t)objc_msgSend(v32, sel_imageWithRenderingMode_, 1, v102);

                  goto LABEL_56;
                }
                id v12 = v32;
                uint64_t isEscapingClosureAtFileLocation = (uint64_t)v32;
                swift_retain();
                EnvironmentValues.init()();
                id v43 = (id)v134;
                uint64_t v79 = one-time initialization token for configuredForPlatform;
                swift_retain();
                if (v79 != -1) {
                  goto LABEL_58;
                }
                break;
              default:
                id v73 = objc_msgSend(v32, sel_imageWithRenderingMode_, 2);
LABEL_48:
                uint64_t isEscapingClosureAtFileLocation = (uint64_t)v73;
                goto LABEL_56;
            }
            goto LABEL_41;
          }
          long long v134 = v148;
          long long v135 = v149;
          unsigned int v136 = v150;
          ResolvedVectorGlyph.resolvedRenderingMode.getter();
          if (v117 == 3)
          {
            id v44 = objc_msgSend(self, sel_unspecifiedConfiguration);
            goto LABEL_31;
          }
          outlined release of ResolvedVectorGlyph((uint64_t)&v148);

          return v32;
        }
      }

      uint64_t v21 = v115;
    }
    outlined release of ResolvedVectorGlyph((uint64_t)&v148);
    uint64_t v11 = v116;
    LOBYTE(v18) = v112;
    LOBYTE(v20) = v113;
    LOBYTE(v17) = v111;
    uint64_t v15 = v109;
    uint64_t v16 = v110;
    uint64_t v13 = v108;
    uint64_t v14 = v114;
    LOBYTE(v9) = v107;
    int v5 = v105;
    uint64_t v10 = v21;
  }
  *(void *)&long long v134 = v4;
  BYTE8(v134) = v5;
  *(void *)&long long v135 = v7;
  *((void *)&v135 + 1) = v6;
  unsigned int v136 = v8;
  v137[0] = v9;
  *(void *)&v137[4] = v10;
  uint64_t v138 = v11;
  char v139 = (char)v12;
  uint64_t v140 = v14;
  uint64_t v141 = v13;
  uint64_t v142 = v15;
  uint64_t v143 = v16;
  char v144 = v17;
  char v145 = v18;
  char v146 = v19;
  char v147 = v20;
  char v117 = (void *)v4;
  LOBYTE(v118) = v5;
  uint64_t v119 = v7;
  uint64_t v120 = v6;
  uint64_t v121 = v8;
  char v122 = v9;
  uint64_t v123 = v10;
  uint64_t v124 = v11;
  char v125 = (char)v12;
  uint64_t v126 = v14;
  uint64_t v127 = v13;
  uint64_t v128 = v15;
  uint64_t v129 = v16;
  char v130 = v17;
  char v131 = v18;
  char v132 = v19;
  char v133 = v20;
  int v105 = v19;
  LODWORD(v114) = v12;
  char v47 = v18;
  uint64_t v48 = v15;
  uint64_t v49 = v14;
  char v50 = v9;
  uint64_t v51 = v10;
  GraphicsImage.size.getter();
  v54.CGImageRef value = GraphicsImage.render(at:prefersMask:)((CGSize)__PAIR128__(v53, v52), 0).value;
  if (!v54.value) {
    return 0;
  }
  *(void *)&long long v134 = v4;
  BYTE8(v134) = v5;
  *(void *)&long long v135 = v7;
  *((void *)&v135 + 1) = v6;
  unsigned int v136 = v8;
  v137[0] = v50;
  *(void *)&v137[4] = v51;
  uint64_t v115 = v51;
  uint64_t v138 = v116;
  char v139 = v114;
  uint64_t v140 = v49;
  uint64_t v141 = v108;
  uint64_t v142 = v48;
  uint64_t v143 = v16;
  char v144 = v111;
  char v145 = v47;
  char v146 = v105;
  char v147 = v113;
  CGImageRef value = v54.value;
  GraphicsImage.scale.getter();
  uint64_t v103 = v4;
  *(void *)&long long v134 = v4;
  BYTE8(v134) = v5;
  *(void *)&long long v135 = v7;
  *((void *)&v135 + 1) = v6;
  unsigned int v136 = v8;
  v137[0] = v107;
  *(void *)&v137[4] = v51;
  uint64_t v138 = v116;
  char v139 = v114;
  uint64_t v140 = v49;
  uint64_t v141 = v108;
  uint64_t v142 = v109;
  uint64_t v143 = v110;
  char v144 = v111;
  char v145 = v112;
  char v146 = v105;
  char v147 = v113;
  id v56 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4FB1818]), sel_initWithCGImage_scale_orientation_, value, qword_188359900[(char)GraphicsImage.bitmapOrientation.getter()], v55);
  char v57 = v56;
  if (v114) {
    uint64_t v58 = 1;
  }
  else {
    uint64_t v58 = 2;
  }
  id v32 = objc_msgSend(v56, sel_imageWithRenderingMode_, v58, v102);

  if (!(v114 & 1 | ((v106 & 1) == 0)))
  {
    id v59 = v32;
    uint64_t v60 = (void *)Color.Resolved.kitColor.getter();
    self;
    id v32 = objc_msgSend(v59, sel_imageWithTintColor_, swift_dynamicCastObjCClassUnconditional());
  }
  CGImageRef v61 = value;
  if (v5 == 255)
  {
LABEL_34:

    return v32;
  }
  if (v5 != 2)
  {
    CGImageRef v61 = value;
    goto LABEL_34;
  }
  char v62 = *(unsigned char *)(v103 + 24);
  uint64_t v63 = *(void **)(v103 + 32);
  int v64 = *(_DWORD *)(v103 + 40);
  char v65 = *(unsigned char *)(v103 + 44);
  char v66 = *(unsigned char *)(v103 + 45);
  uint64_t v67 = *(uint64_t (**)())(v103 + 48);
  *(void *)&long long v134 = *(void *)(v103 + 16);
  BYTE8(v134) = v62;
  *(void *)&long long v135 = v63;
  DWORD2(v135) = v64;
  BYTE12(v135) = v65;
  BYTE13(v135) = v66;
  unsigned int v136 = v67;
  id v68 = (id)v134;
  outlined copy of Image.Location(v63);
  CGImageRef v61 = v67;
  uint64_t v69 = ResolvedVectorGlyph.glyph.getter();
  if (!v69)
  {

    outlined consume of Image.Location(v63);
    goto LABEL_34;
  }
  int v70 = (void *)v69;
  id result = objc_msgSend(v32, sel__imageWithSymbolMetricsFromNamedVectorGlyph_, v69);
  if (result)
  {
    id v72 = result;

    outlined consume of Image.Location(v63);
    id v32 = v72;
    goto LABEL_34;
  }
  __break(1u);
  return result;
}

uint64_t outlined init with take of Image.Location(uint64_t a1, uint64_t a2)
{
  return a2;
}

id *outlined release of Image.Location(id *a1)
{
  return a1;
}

void outlined consume of Image.Location(id a1)
{
  if ((unint64_t)a1 >= 2) {
}
  }

id *outlined retain of Image.Location(id *a1)
{
  return a1;
}

uint64_t outlined release of ResolvedVectorGlyph(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  id v3 = *(void **)(a1 + 32);

  outlined consume of Image.Location(v2);
  return a1;
}

uint64_t outlined retain of ResolvedVectorGlyph(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  id v3 = *(void **)(a1 + 32);
  id v4 = *(id *)a1;
  outlined copy of Image.Location(v2);
  id v5 = v3;
  return a1;
}

id outlined copy of Image.Location(id result)
{
  if ((unint64_t)result >= 2) {
    return result;
  }
  return result;
}

unint64_t GraphicsImage.image(with:variableValue:at:)(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = *a4;
  if ((a3 & 0x100000000) != 0)
  {
    if (v6)
    {
      if (v6 != (void *)1)
      {
        swift_bridgeObjectRetain();
        outlined copy of Image.Location(v6);
        uint64_t v14 = (void *)MEMORY[0x18C115780](a1, a2);
        swift_bridgeObjectRelease();
        id v13 = objc_msgSend(self, sel_imageNamed_inBundle_, v14, v6);

        outlined consume of Image.Location(v6);
        return (unint64_t)v13;
      }
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)MEMORY[0x18C115780](a1, a2);
      swift_bridgeObjectRelease();
      id v9 = objc_msgSend(self, sel__systemImageNamed_, v8);
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v8 = (void *)MEMORY[0x18C115780](a1, a2);
      swift_bridgeObjectRelease();
      id v9 = objc_msgSend(self, sel_systemImageNamed_, v8);
    }
  }
  else
  {
    float v7 = *(float *)&a3;
    if (!v6)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      swift_bridgeObjectRetain();
      v10._countAndFlagsBits = a1;
      v10._object = a2;
      v15.value.super.Class isa = 0;
      return (unint64_t)UIImage.init(systemName:variableValue:configuration:)(v10, v7, v15);
    }
    if (v6 != (void *)1)
    {
      type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIImage);
      swift_bridgeObjectRetain();
      outlined copy of Image.Location(v6);
      v12._countAndFlagsBits = a1;
      v12._object = a2;
      v16.value.super.Class isa = (Class)v6;
      v16.is_nil = 0;
      return (unint64_t)UIImage.init(named:in:variableValue:configuration:)(v12, v16, v7, v17);
    }
    swift_bridgeObjectRetain();
    uint64_t v8 = (void *)MEMORY[0x18C115780](a1, a2);
    swift_bridgeObjectRelease();
    id v9 = objc_msgSend(self, sel__systemImageNamed_variableValue_withConfiguration_, v8, 0, v7);
  }
  id v13 = v9;

  return (unint64_t)v13;
}

uint64_t outlined destroy of PlatformItemList.Item(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for PlatformItemList.Item();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void partial apply for closure #1 in PreferenceTransform.value.getter(uint64_t a1)
{
  closure #1 in PreferenceTransform.value.getter(a1, *(void *)(v1 + 16));
}

void closure #1 in PreferenceTransform.value.getter(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a2 + 16))
  {
    uint64_t v2 = swift_bridgeObjectRetain();
    specialized Array.append<A>(contentsOf:)(v2);
  }
}

uint64_t partial apply for closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1)
{
  return closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(a1, *(void *)(v1 + 48), *(_DWORD *)(v1 + 56), *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  _OWORD v10[5] = a2;
  int v11 = a3;
  void v9[2] = a4;
  void v9[3] = a5;
  v9[4] = a6;
  v9[5] = a7;
  void v9[6] = a1;
  v10[0] = a4;
  v10[1] = a5;
  _OWORD v10[2] = a6;
  uint64_t v10[3] = a7;
  type metadata accessor for NavigationDestinationModifier.SeededResolver();
  type metadata accessor for Optional();
  return _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in closure #1 in NavigationDestinationModifier.PreferenceTransform.value.getter, (uint64_t)v9, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, v7, (uint64_t)v10);
}

uint64_t NavigationDestinationModifier.MakeSeededResolver.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)(v1 + 8);
  int v18 = *(_DWORD *)(v1 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(void *)(a1 + 40);
  long long v19 = *(_OWORD *)(a1 + 24);
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  char v9 = v8;
  uint64_t v11 = *Value;
  uint64_t v10 = Value[1];
  uint64_t v20 = v5;
  long long v21 = v19;
  uint64_t v22 = v6;
  uint64_t v12 = type metadata accessor for NavigationDestinationModifier.SeededResolver();
  uint64_t result = AGGraphGetOutputValue();
  if (!result)
  {
    type metadata accessor for NavigationDestinationResolver();
    uint64_t v15 = NavigationDestinationResolver.__allocating_init(transform:)(v11, v10);
    swift_retain_n();
    swift_release();
    *(void *)(v2 + 8) = v15;
    uint64_t v4 = v15;
LABEL_7:
    uint64_t result = AGGraphGetOutputValue();
    if (result && (v9 & 1) == 0) {
      return swift_release();
    }
    if (v4)
    {
      int v14 = v18;
      goto LABEL_12;
    }
LABEL_15:
    __break(1u);
    return result;
  }
  if ((v9 & 1) == 0)
  {
    swift_retain();
    goto LABEL_7;
  }
  if (!v4)
  {
    __break(1u);
    goto LABEL_15;
  }
  *(void *)(v4 + 16) = v11;
  *(void *)(v4 + 24) = v10;
  swift_retain_n();
  uint64_t result = swift_release();
  int v14 = v18 + 1;
  *(_DWORD *)(v2 + 16) = v18 + 1;
LABEL_12:
  uint64_t v20 = v4;
  LODWORD(v21) = v14;
  MEMORY[0x1F4188790](result);
  v17[2] = a1;
  v17[3] = swift_getWitnessTable();
  swift_retain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v20, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)v17, v12, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v16);
  swift_release();
  return swift_release();
}

uint64_t NavigationDestinationModifier.PreferenceTransform.seededResolver.getter()
{
  type metadata accessor for NavigationDestinationModifier.SeededResolver();
  uint64_t result = AGGraphGetWeakValue();
  if (result) {
    return swift_retain();
  }
  return result;
}

uint64_t type metadata accessor for NavigationDestinationModifier.SeededResolver()
{
  return swift_getGenericMetadata();
}

uint64_t type metadata accessor for NavigationDestinationResolver()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t NavigationDestinationResolver.__allocating_init(transform:)(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = a1;
  *(void *)(result + 24) = a2;
  return result;
}

uint64_t partial apply for closure #1 in FocusStateBindingModifier.ListTransform.value.getter(uint64_t a1)
{
  return closure #1 in FocusStateBindingModifier.ListTransform.value.getter(a1, *(void *)(v1 + 16));
}

uint64_t closure #1 in FocusStateBindingModifier.ListTransform.value.getter(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2)
  {
    uint64_t v3 = result;
    uint64_t v4 = a2 + 32;
    swift_bridgeObjectRetain();
    do
    {
      uint64_t v5 = *(void *)(*(void *)v3 + 16);
      outlined init with copy of FocusStoreList.Item(v4, (uint64_t)v8);
      uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBB08];
      outlined init with copy of CollectionOfOne<FocusStoreList.Item>((uint64_t)v8, (uint64_t)v7, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, MEMORY[0x1E4FBBB08]);
      specialized Array.replaceSubrange<A>(_:with:)(v5, v5, (uint64_t)v7);
      _ss15CollectionOfOneVy7SwiftUI14FocusStoreListV4ItemVGWOhTm_0((uint64_t)v8, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>, (uint64_t)&type metadata for FocusStoreList.Item, v6);
      v4 += 72;
      --v2;
    }
    while (v2);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized Array.replaceSubrange<A>(_:with:)(uint64_t a1, int64_t a2, uint64_t a3)
{
  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_27:
    __break(1u);
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  char isUniquelyReferenced_nonNull_native = (void *)swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[9 * a1 + 4];
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_22;
  }
  uint64_t v15 = v5[2];
  uint64_t v16 = v15 - a2;
  if (__OFSUB__(v15, a2)) {
    goto LABEL_28;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    unint64_t v17 = v14 + 72;
    unint64_t v18 = (unint64_t)&v5[9 * a2 + 4];
    if (v14 + 72 < v18 || v17 >= v18 + 72 * v16)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v17 != v18)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    uint64_t v19 = v5[2];
    BOOL v20 = __OFADD__(v19, v9);
    uint64_t v21 = v19 + v9;
    if (!v20)
    {
      _OWORD v5[2] = v21;
LABEL_22:
      outlined init with copy of FocusStoreList.Item(a3, v14);
      return outlined destroy of CollectionOfOne<FocusStoreList.Item>(a3, &lazy cache variable for type metadata for CollectionOfOne<FocusStoreList.Item>);
    }
    goto LABEL_29;
  }
LABEL_30:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  char **v3;
  char *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  char *isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_22;
  }
  uint64_t v5 = *v3;
  int64_t v6 = *((void *)*v3 + 2);
  if (v6 < a2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  char isUniquelyReferenced_nonNull_native = (char *)swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > *((void *)v5 + 3) >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *uint64_t v3 = v5;
  }
  uint64_t v14 = (uint64_t)&v5[120 * a1 + 32];
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_20;
  }
  uint64_t v15 = *((void *)v5 + 2);
  uint64_t v16 = __OFSUB__(v15, a2);
  unint64_t v17 = v15 - a2;
  if (v16) {
    goto LABEL_26;
  }
  if ((v17 & 0x8000000000000000) == 0)
  {
    unint64_t v18 = (char *)(v14 + 120);
    uint64_t v19 = &v5[120 * a2 + 32];
    if ((char *)(v14 + 120) != v19 || v18 >= &v19[120 * v17]) {
      memmove(v18, v19, 120 * v17);
    }
    BOOL v20 = *((void *)v5 + 2);
    uint64_t v16 = __OFADD__(v20, v9);
    uint64_t v21 = v20 + v9;
    if (!v16)
    {
      *((void *)v5 + 2) = v21;
LABEL_20:
      outlined init with copy of SwiftUIAnySortComparator(a3, (uint64_t)&v5[120 * a1 + 32]);
      return outlined destroy of CollectionOfOne<FocusStoreList.Item>(a3, &lazy cache variable for type metadata for CollectionOfOne<SwiftUIAnySortComparator>);
    }
    goto LABEL_27;
  }
LABEL_28:
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

{
  uint64_t v3;
  void *v5;
  int64_t v6;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  int isUniquelyReferenced_nonNull_native;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v24;
  BOOL v25;
  uint64_t v26;
  uint64_t result;

  if (a1 < 0)
  {
    __break(1u);
    goto LABEL_29;
  }
  uint64_t v5 = *(void **)v3;
  int64_t v6 = *(void *)(*(void *)v3 + 16);
  if (v6 < a2)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v8 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  uint64_t v9 = 1 - v8;
  if (__OFSUB__(1, v8))
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  int64_t v10 = v6 + v9;
  if (__OFADD__(v6, v9))
  {
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
    goto LABEL_34;
  }
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)uint64_t v3 = v5;
  if (!isUniquelyReferenced_nonNull_native || v10 > v5[3] >> 1)
  {
    if (v6 <= v10) {
      int64_t v13 = v6 + v9;
    }
    else {
      int64_t v13 = v6;
    }
    uint64_t v5 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(isUniquelyReferenced_nonNull_native, v13, 1, v5);
    *(void *)uint64_t v3 = v5;
  }
  uint64_t v14 = type metadata accessor for IntelligenceElement();
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = (char *)v5 + ((*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
  unint64_t v17 = *(void *)(v15 + 72);
  unint64_t v18 = &v16[v17 * a1];
  swift_arrayDestroy();
  if (!v9) {
    goto LABEL_25;
  }
  uint64_t v19 = v5[2];
  BOOL v20 = v19 - a2;
  if (__OFSUB__(v19, a2)) {
    goto LABEL_33;
  }
  if (v20 < 0)
  {
LABEL_35:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)();
    __break(1u);
    return result;
  }
  uint64_t v21 = (unint64_t)&v18[v17];
  uint64_t v22 = (unint64_t)&v16[v17 * a2];
  if ((unint64_t)&v18[v17] < v22 || v21 >= v22 + v20 * v17)
  {
    swift_arrayInitWithTakeFrontToBack();
  }
  else if (v21 != v22)
  {
    swift_arrayInitWithTakeBackToFront();
  }
  char v24 = v5[2];
  id v25 = __OFADD__(v24, v9);
  id v26 = v24 + v9;
  if (v25)
  {
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  _OWORD v5[2] = v26;
LABEL_25:
  if (v17 >= 1) {
    (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v18, a3, v14);
  }
  return outlined destroy of CollectionOfOne<IntelligenceElement>(a3, &lazy cache variable for type metadata for CollectionOfOne<IntelligenceElement>, MEMORY[0x1E4FB0BB0]);
}

uint64_t partial apply for closure #1 in BarItemModifier.Transform.value.getter(uint64_t *a1)
{
  return closure #1 in BarItemModifier.Transform.value.getter(a1);
}

uint64_t closure #1 in BarItemModifier.Transform.value.getter(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v17 = *a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(*a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(*a1 + 64);
  int64_t v18 = (unint64_t)(v2 + 63) >> 6;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_25;
    }
    int64_t v9 = v6 + 1;
    if (__OFADD__(v6, 1))
    {
      __break(1u);
      goto LABEL_29;
    }
    if (v9 >= v18) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v17 + 8 * v9);
    ++v6;
    if (!v10)
    {
      int64_t v6 = v9 + 1;
      if (v9 + 1 >= v18) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v17 + 8 * v6);
      if (!v10)
      {
        int64_t v6 = v9 + 2;
        if (v9 + 2 >= v18) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v17 + 8 * v6);
        if (!v10)
        {
          int64_t v6 = v9 + 3;
          if (v9 + 3 >= v18) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v17 + 8 * v6);
          if (!v10)
          {
            int64_t v6 = v9 + 4;
            if (v9 + 4 >= v18) {
              return swift_release();
            }
            unint64_t v10 = *(void *)(v17 + 8 * v6);
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_24:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v6 << 6);
LABEL_25:
    uint64_t v12 = specialized Dictionary.subscript.modify(v20, *(_DWORD *)(*(void *)(v1 + 48) + 4 * v8));
    if (*(void *)(v13 + 16))
    {
      uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4F41720];
      _sSay7SwiftUI14ToolbarStorageV5EntryVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, MEMORY[0x1E4F41720]);
      uint64_t Value = AGGraphGetValue();
      outlined init with copy of WeakBox<UIBarButtonItem>(Value, (uint64_t)v19);
      uint64_t v16 = (void *)MEMORY[0x18C119DF0](v19);
      outlined destroy of ToolbarStorage.Entry?((uint64_t)v19, (unint64_t *)&lazy cache variable for type metadata for WeakBox<UIBarButtonItem>, (uint64_t (*)(uint64_t))type metadata accessor for UIBarButtonItem, v14);
      swift_unknownObjectWeakAssign();
    }
    uint64_t result = ((uint64_t (*)(void *, void))v12)(v20, 0);
  }
  int64_t v11 = v9 + 5;
  if (v11 >= v18) {
    return swift_release();
  }
  unint64_t v10 = *(void *)(v17 + 8 * v11);
  if (v10)
  {
    int64_t v6 = v11;
    goto LABEL_24;
  }
  while (1)
  {
    int64_t v6 = v11 + 1;
    if (__OFADD__(v11, 1)) {
      break;
    }
    if (v6 >= v18) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v17 + 8 * v6);
    ++v11;
    if (v10) {
      goto LABEL_24;
    }
  }
LABEL_29:
  __break(1u);
  return result;
}

void type metadata accessor for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>)
  {
    type metadata accessor for (_UIImageNamedColorStyle, UIColor)();
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<(_UIImageNamedColorStyle, UIColor)>);
    }
  }
}

void type metadata accessor for (_UIImageNamedColorStyle, UIColor)()
{
  if (!lazy cache variable for type metadata for (_UIImageNamedColorStyle, UIColor))
  {
    type metadata accessor for _UIImageNamedColorStyle(255);
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (_UIImageNamedColorStyle, UIColor));
    }
  }
}

unint64_t lazy protocol witness table accessor for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle;
  if (!lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle)
  {
    type metadata accessor for _UIImageNamedColorStyle(255);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle);
  }
  return result;
}

void type metadata accessor for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>)
  {
    type metadata accessor for _UIImageNamedColorStyle(255);
    type metadata accessor for NSObject(255, (unint64_t *)&lazy cache variable for type metadata for UIColor);
    lazy protocol witness table accessor for type UISplitViewControllerColumn and conformance UISplitViewControllerColumn((unint64_t *)&lazy protocol witness table cache variable for type _UIImageNamedColorStyle and conformance _UIImageNamedColorStyle, type metadata accessor for _UIImageNamedColorStyle);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<_UIImageNamedColorStyle, UIColor>);
    }
  }
}

void type metadata accessor for VStack<DefaultListNavigationLinkStyle.ListLink>()
{
  if (!lazy cache variable for type metadata for VStack<DefaultListNavigationLinkStyle.ListLink>)
  {
    type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
    lazy protocol witness table accessor for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink();
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<DefaultListNavigationLinkStyle.ListLink>);
    }
  }
}

uint64_t DefaultListNavigationLinkStyle.makeBody(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  uint64_t v5 = (int *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a2 = static HorizontalAlignment.center.getter();
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>(0, &lazy cache variable for type metadata for _VariadicView.Tree<_VStackLayout, DefaultListNavigationLinkStyle.ListLink>, (void (*)(uint64_t))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
  uint64_t v9 = a2 + *(int *)(v8 + 44);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7(a1, (uint64_t)v7, type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v10 = &v7[v5[7]];
  *(void *)unint64_t v10 = swift_getKeyPath();
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *((void *)v10 + 3) = 0;
  v10[32] = 0;
  int64_t v11 = &v7[v5[8]];
  *(void *)int64_t v11 = swift_getKeyPath();
  v11[8] = 0;
  uint64_t v12 = &v7[v5[9]];
  *(void *)uint64_t v12 = swift_getKeyPath();
  unsigned char v12[8] = 0;
  return outlined init with take of ButtonAction((uint64_t)v7, v9, (uint64_t (*)(void))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
}

double DefaultListNavigationLinkStyle.ListLink.body.getter@<D0>(uint64_t a1@<X8>)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v34 = static VerticalAlignment.center.getter();
  closure #1 in DefaultListNavigationLinkStyle.ListLink.body.getter(v1, (uint64_t)v44);
  int v33 = static Edge.Set.vertical.getter();
  uint64_t v7 = type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  uint64_t v8 = v1 + *(int *)(v7 + 20);
  char v42 = *(unsigned char *)(v8 + 32);
  long long v9 = *(_OWORD *)(v8 + 16);
  v41[0] = *(_OWORD *)v8;
  v41[1] = v9;
  outlined init with take of NavigationState.ListKey?((uint64_t)v41, (uint64_t)v43, (unint64_t *)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content, MEMORY[0x1E4F3F360], MEMORY[0x1E4F3F4D8]);
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v43, (void (*)(void, void, void, void, void))outlined copy of Environment<HoverEffectContext?>.Content);
  specialized Environment.wrappedValue.getter();
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v41, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
  EdgeInsets.negatedInsets.getter();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v18 = v1 + *(int *)(v7 + 24);
  uint64_t v19 = *(void *)v18;
  LOBYTE(v7) = *(unsigned char *)(v18 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v18, v7);
  char v20 = specialized Environment.wrappedValue.getter(v19, v7);
  outlined consume of Environment<Bool>.Content(v19, v7);
  if (v20) {
    double v21 = 1.0;
  }
  else {
    double v21 = 0.5;
  }
  *(_OWORD *)&v35[71] = v44[4];
  *(_OWORD *)&v35[87] = v44[5];
  *(_OWORD *)&v35[103] = v45[0];
  *(_OWORD *)&v35[113] = *(_OWORD *)((char *)v45 + 10);
  *(_OWORD *)&v35[7] = v44[0];
  *(_OWORD *)&v35[23] = v44[1];
  *(_OWORD *)&v35[39] = v44[2];
  char v36 = 1;
  *(_OWORD *)&v35[55] = v44[3];
  char v37 = 0;
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_7(v2, (uint64_t)&v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], type metadata accessor for PrimitiveButtonStyleConfiguration);
  unint64_t v22 = (*(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = swift_allocObject();
  outlined init with take of ButtonAction((uint64_t)&v32[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)], v23 + v22, type metadata accessor for PrimitiveButtonStyleConfiguration);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = swift_getKeyPath();
  outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(0);
  long long v27 = *(_OWORD *)&v35[64];
  *(_OWORD *)(a1 + 97) = *(_OWORD *)&v35[80];
  long long v28 = *(_OWORD *)&v35[112];
  *(_OWORD *)(a1 + 113) = *(_OWORD *)&v35[96];
  *(_OWORD *)(a1 + 129) = v28;
  long long v29 = *(_OWORD *)v35;
  *(_OWORD *)(a1 + 33) = *(_OWORD *)&v35[16];
  double result = *(double *)&v35[32];
  long long v31 = *(_OWORD *)&v35[48];
  *(_OWORD *)(a1 + 49) = *(_OWORD *)&v35[32];
  *(_OWORD *)(a1 + 65) = v31;
  *(_OWORD *)(a1 + 81) = v27;
  char v40 = 0;
  char v39 = 0;
  char v38 = 0;
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 1;
  *(unsigned char *)(a1 + 145) = v35[128];
  *(_OWORD *)(a1 + 17) = v29;
  *(unsigned char *)(a1 + 152) = v33;
  *(void *)(a1 + 160) = v11;
  *(void *)(a1 + 168) = v13;
  *(void *)(a1 + 176) = v15;
  *(void *)(a1 + 184) = v17;
  *(unsigned char *)(a1 + 192) = 0;
  *(double *)(a1 + 200) = v21;
  *(void *)(a1 + 208) = partial apply for implicit closure #2 in implicit closure #1 in PlatformItemListButtonStyle.makeBody(configuration:);
  *(void *)(a1 + 216) = v23;
  *(unsigned char *)(a1 + 224) = 1;
  *(void *)(a1 + 232) = KeyPath;
  *(unsigned char *)(a1 + 240) = v40;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  *(void *)(a1 + 248) = v25;
  *(unsigned char *)(a1 + 272) = 0;
  *(unsigned char *)(a1 + 273) = v39;
  *(void *)(a1 + 280) = v26;
  *(unsigned char *)(a1 + 288) = v38;
  return result;
}

uint64_t type metadata accessor for DefaultListNavigationLinkStyle.ListLink()
{
  uint64_t result = type metadata singleton initialization cache for DefaultListNavigationLinkStyle.ListLink;
  if (!type metadata singleton initialization cache for DefaultListNavigationLinkStyle.ListLink) {
    return swift_getSingletonMetadata();
  }
  return result;
}

double closure #1 in DefaultListNavigationLinkStyle.ListLink.body.getter@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DefaultListNavigationLinkStyle.ListLink();
  uint64_t v5 = a1 + *(int *)(v4 + 20);
  char v25 = *(unsigned char *)(v5 + 32);
  long long v6 = *(_OWORD *)(v5 + 16);
  v24[0] = *(_OWORD *)v5;
  v24[1] = v6;
  outlined init with take of NavigationState.ListKey?((uint64_t)v24, (uint64_t)v26, (unint64_t *)&lazy cache variable for type metadata for Environment<EdgeInsets>.Content, MEMORY[0x1E4F3F360], MEMORY[0x1E4F3F4D8]);
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v26, (void (*)(void, void, void, void, void))outlined copy of Environment<HoverEffectContext?>.Content);
  double v7 = specialized Environment.wrappedValue.getter();
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v24, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v26, (void (*)(void, void, void, void, void))outlined copy of Environment<HoverEffectContext?>.Content);
  specialized Environment.wrappedValue.getter();
  uint64_t v9 = v8;
  outlined retain of Environment<EdgeInsets>.Content((uint64_t)v24, (void (*)(void, void, void, void, void))outlined consume of Environment<HoverEffectContext?>.Content);
  char v10 = static Edge.Set.all.getter();
  uint64_t v11 = a1 + *(int *)(v4 + 28);
  uint64_t v12 = *(void *)v11;
  LOBYTE(v4) = *(unsigned char *)(v11 + 8);
  outlined copy of Environment<Bool>.Content(*(void *)v11, v4);
  char v13 = specialized Environment.wrappedValue.getter(v12, v4);
  outlined consume of Environment<Bool>.Content(v12, v4);
  EdgeInsets.init(_:edges:)();
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v19 = v18;
  uint64_t v21 = v20;
  unsigned __int8 v22 = static Edge.Set.all.getter();
  *(unsigned char *)a2 = v10;
  *(double *)(a2 + 8) = v7;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = v9;
  *(void *)(a2 + 32) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  double result = 0.0;
  *(_OWORD *)(a2 + 48) = xmmword_18834BB90;
  *(_OWORD *)(a2 + 64) = xmmword_18839D310;
  *(void *)(a2 + 80) = v22;
  *(void *)(a2 + 88) = v15;
  *(void *)(a2 + 96) = v17;
  *(void *)(a2 + 104) = v19;
  *(void *)(a2 + 112) = v21;
  *(unsigned char *)(a2 + 120) = 0;
  *(unsigned char *)(a2 + 121) = v13 & 1;
  return result;
}

void type metadata accessor for _VariadicView.Tree<_VStackLayout, ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for _VariadicView.Tree();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

ValueMetadata *type metadata accessor for ScrollClipDisabledBehavior()
{
  return &type metadata for ScrollClipDisabledBehavior;
}

ValueMetadata *type metadata accessor for HVGridGeometry()
{
  return &type metadata for HVGridGeometry;
}

BOOL specialized static EnvironmentKey<>._valuesEqual(_:_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  switch(a1)
  {
    case 2u:
      if (a2 == 2) {
        goto LABEL_13;
      }
      goto LABEL_15;
    case 3u:
      if (a2 != 3) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 4u:
      if (a2 != 4) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 5u:
      if (a2 != 5) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 6u:
      if (a2 != 6) {
        goto LABEL_15;
      }
      goto LABEL_13;
    case 7u:
      if (a2 != 7) {
        goto LABEL_15;
      }
LABEL_13:
      BOOL result = 1;
      break;
    default:
      if (a2 - 2 >= 6) {
        BOOL result = ((a2 ^ a1) & 1) == 0;
      }
      else {
LABEL_15:
      }
        BOOL result = 0;
      break;
  }
  return result;
}

uint64_t type metadata completion function for ResolvedButtonStyleBody()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)()
{
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((uint64_t)&unk_1ED48DE10, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:), (uint64_t (*)(uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots(), (void (*)(uint64_t, unsigned char *, uint64_t))specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

{
  partial apply for specialized closure #2 in NavigationStackCoordinator.updateNavigationController(_:environment:transaction:seeds:transparentBackground:strategy:)((uint64_t)&unk_1ED48E540, (uint64_t)partial apply for specialized implicit closure #2 in implicit closure #1 in NavigationState.StackContent.Views.sequence<A, B>(using:), (uint64_t (*)(uint64_t))specialized NavigationState.StackContent.Views.ViewsSequence.unusedRoots(), (void (*)(uint64_t, unsigned char *, uint64_t))specialized NavigationStackCoordinator.updateExtantViews<A>(navigationController:views:transaction:));
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SearchZipLocation()
{
  if (dispatch thunk of AnyLocation.isEqual(to:)()) {
    return dispatch thunk of AnyLocation.isEqual(to:)() & 1;
  }
  else {
    return 0;
  }
}

uint64_t outlined destroy of SelectionContainerModifier(uint64_t a1)
{
  return a1;
}

void List.body.getter(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v120 = a2;
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[4];
  uint64_t v127 = type metadata accessor for NavigableListModifier();
  uint64_t v118 = *(void *)(v127 - 8);
  MEMORY[0x1F4188790](v127);
  uint64_t v116 = (void *)((char *)v71 - v5);
  uint64_t v121 = v2;
  uint64_t v123 = v3;
  type metadata accessor for SelectionManagerBox();
  uint64_t v117 = type metadata accessor for Binding();
  uint64_t v129 = type metadata accessor for Optional();
  uint64_t v122 = *(void *)(v129 - 8);
  MEMORY[0x1F4188790](v129);
  uint64_t v119 = (char *)v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v128 = (char *)v71 - v8;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v9 = type metadata accessor for _ListStyleConfiguration();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v81 = (uint64_t)v71 - v10;
  uint64_t v109 = type metadata accessor for ResolvedList();
  uint64_t v113 = *(void *)(v109 - 8);
  MEMORY[0x1F4188790](v109);
  uint64_t v12 = (char *)v71 - v11;
  type metadata accessor for StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v112 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  id v100 = (char *)v71 - v14;
  type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(255, (unint64_t *)&lazy cache variable for type metadata for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>, (uint64_t)&type metadata for AutomaticTextFieldLabelDisplayMode, (uint64_t)&protocol witness table for AutomaticTextFieldLabelDisplayMode, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for TextFieldLabelDisplayModeModifier);
  uint64_t v91 = v13;
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v107 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  id v99 = (char *)v71 - v16;
  uint64_t v93 = v15;
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v95 = v17;
  uint64_t v102 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  Class v97 = (char *)v71 - v18;
  unint64_t HasLazyStackBehaviorInScrollableAxis = lazy protocol witness table accessor for type StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  char v145 = &protocol witness table for ResolvedList<A>;
  unint64_t v146 = HasLazyStackBehaviorInScrollableAxis;
  uint64_t v20 = MEMORY[0x1E4F3FBC0];
  uint64_t v90 = swift_getWitnessTable();
  uint64_t v143 = v90;
  char v144 = &protocol witness table for TextFieldLabelDisplayModeModifier<A>;
  uint64_t v92 = swift_getWitnessTable();
  uint64_t v141 = v92;
  uint64_t v142 = &protocol witness table for Fix_53164375;
  uint64_t v94 = swift_getWitnessTable();
  char v131 = (ValueMetadata *)v17;
  uint64_t v132 = v94;
  uint64_t v96 = MEMORY[0x1E4F41490];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v98 = *(void *)(OpaqueTypeMetadata2 - 8);
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  id v88 = (char *)v71 - v21;
  uint64_t v89 = a1;
  uint64_t v87 = a1[3];
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
  type metadata accessor for ModifiedContent();
  type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
  uint64_t v22 = type metadata accessor for ModifiedContent();
  uint64_t v83 = a1[5];
  uint64_t v23 = v83;
  unint64_t refreshed = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v139 = v23;
  unint64_t v140 = refreshed;
  uint64_t v25 = swift_getWitnessTable();
  unint64_t v26 = lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v137 = v25;
  unint64_t v138 = v26;
  uint64_t v85 = v20;
  uint64_t v27 = swift_getWitnessTable();
  char v131 = (ValueMetadata *)v22;
  uint64_t v132 = v27;
  swift_getOpaqueTypeMetadata2();
  uint64_t v28 = type metadata accessor for ModifiedContent();
  unint64_t v29 = lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent();
  unint64_t v76 = v29;
  char v131 = (ValueMetadata *)v22;
  uint64_t v132 = v27;
  uint64_t OpaqueTypeConformance2 = swift_getOpaqueTypeConformance2();
  unsigned int v136 = &protocol witness table for ResetContentMarginModifier;
  uint64_t v75 = v28;
  uint64_t v73 = swift_getWitnessTable();
  char v131 = &type metadata for ListStyleContent;
  uint64_t v132 = v28;
  unint64_t v133 = v29;
  uint64_t v134 = v73;
  type metadata accessor for StaticSourceWriter();
  uint64_t v78 = type metadata accessor for ModifiedContent();
  uint64_t v82 = *(void *)(v78 - 8);
  MEMORY[0x1F4188790](v78);
  uint64_t v126 = (char *)v71 - v30;
  uint64_t v80 = type metadata accessor for ModifiedContent();
  uint64_t v84 = *(void *)(v80 - 8);
  MEMORY[0x1F4188790](v80);
  char v74 = (char *)v71 - v31;
  uint64_t v79 = type metadata accessor for ModifiedContent();
  uint64_t v86 = *(void *)(v79 - 8);
  MEMORY[0x1F4188790](v79);
  id v77 = (char *)v71 - v32;
  type metadata accessor for ViewInputFlagModifier<ProvidesContextMenuInteraction>();
  uint64_t v33 = type metadata accessor for ModifiedContent();
  uint64_t v106 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  v71[1] = (char *)v71 - v34;
  uint64_t v35 = type metadata accessor for ModifiedContent();
  uint64_t v108 = v33;
  uint64_t v36 = type metadata accessor for ModifiedContent();
  uint64_t v101 = v35;
  uint64_t v103 = v36;
  uint64_t v37 = type metadata accessor for _ConditionalContent();
  uint64_t v110 = *(void *)(v37 - 8);
  uint64_t v111 = v37;
  MEMORY[0x1F4188790](v37);
  uint64_t v104 = (char *)v71 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v40 = MEMORY[0x1F4188790](v39);
  int v105 = (char *)v71 - v41;
  char v42 = *(void (**)(char *, uint64_t, uint64_t))(v122 + 16);
  uint64_t v124 = v122 + 16;
  char v125 = v42;
  uint64_t v43 = (uint64_t)v128;
  uint64_t v44 = v129;
  uint64_t v45 = v115;
  ((void (*)(char *, uint64_t, uint64_t, double))v42)(v128, v115, v129, v40);
  uint64_t v46 = v81;
  _ListStyleConfiguration.init(selection:)(v43, v81);
  uint64_t v47 = v121;
  uint64_t v48 = v123;
  ResolvedList.init(configuration:)(v46, (uint64_t)v12);
  uint64_t v49 = v100;
  uint64_t v50 = v109;
  View.listHasLazyStackBehaviorInVerticalScrollView<A>(requiring:)(MEMORY[0x1E4F3FAF8], v109, MEMORY[0x1E4F3FAF8], (uint64_t)&protocol witness table for ResolvedList<A>);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v12, v50);
  uint64_t v51 = v99;
  uint64_t v52 = v91;
  View.textFieldLabelDisplayMode<A>(_:)();
  uint64_t v53 = (*(uint64_t (**)(char *, uint64_t))(v112 + 8))(v49, v52);
  CGImageRef_optional v54 = v97;
  uint64_t v55 = v93;
  MEMORY[0x18C113660](v53, v93, &unk_1ED411460, v92);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v51, v55);
  id v56 = v88;
  uint64_t v57 = v94;
  uint64_t v58 = (ValueMetadata *)v95;
  View.configuresScrollPhaseState()();
  (*(void (**)(char *, ValueMetadata *))(v102 + 8))(v54, v58);
  v130[2] = v47;
  v130[3] = v87;
  v130[4] = v48;
  v130[5] = v83;
  v130[6] = v45;
  char v131 = v58;
  uint64_t v132 = v57;
  uint64_t v59 = swift_getOpaqueTypeConformance2();
  uint64_t v60 = OpaqueTypeMetadata2;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for ListStyleContent, (void (*)(double))partial apply for closure #1 in List.body.getter, (uint64_t)v130, OpaqueTypeMetadata2, (uint64_t)&type metadata for ListStyleContent, v75, v59);
  (*(void (**)(char *, uint64_t))(v98 + 8))(v56, v60);
  uint64_t v61 = Namespace.wrappedValue.getter();
  uint64_t v62 = (uint64_t)v128;
  v125(v128, v45, v44);
  uint64_t v63 = List.stateHost.getter();
  int v64 = v116;
  NavigableListModifier.init(id:selection:stateHost:)(v61, v62, v63, v116);
  v130[19] = v59;
  v130[20] = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v65 = v78;
  uint64_t v66 = swift_getWitnessTable();
  uint64_t v67 = v64;
  id v68 = v64;
  uint64_t v69 = v126;
  uint64_t v70 = v127;
  MEMORY[0x18C113660](v67, v65, v127, v66);
  (*(void (**)(void *, uint64_t))(v118 + 8))(v68, v70);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v69, v65);
  v130[17] = v66;
  v130[18] = &protocol witness table for NavigableListModifier<A>;
  swift_getWitnessTable();
  View.configuredForLazyContainer()();
}

uint64_t sub_1874A9CF0()
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 112) + 8))(v7, v4);
  *(void *)(v0 + 600) = v1;
  *(void *)(v0 + 608) = &protocol witness table for LazyContainerModifier;
  uint64_t v9 = *(void *)(v0 + 72);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v11 = lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
  uint64_t v12 = v5;
  View.input<A>(_:)((uint64_t)&type metadata for ProvidesContextMenuInteraction, v9, (uint64_t)&type metadata for ProvidesContextMenuInteraction, WitnessTable, v11);
  uint64_t v13 = *(void *)(v0 + 472);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 128) + 8))(v6, v9);
  uint64_t v14 = *(void *)(v0 + 392);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 440))(v14, v2, v13);
  uint64_t v15 = *(void *)(v3 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v14, 1, v3) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 416) + 8))(v14, v13);
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
  }
  else
  {
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(*(void *)(v0 + 408), *(void *)(v0 + 424), v16, v17);
    type metadata accessor for ToAnyListSelection();
    swift_getWitnessTable();
    Binding.projecting<A>(_:)();
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v14, v3);
    uint64_t v18 = *(void *)(v8 - 216);
    uint64_t v19 = *(void *)(v8 - 208);
    uint64_t v20 = *(void *)(v8 - 200);
  }
  *(void *)(v8 - 216) = v18;
  *(void *)(v8 - 208) = v19;
  *(void *)(v8 - 200) = v20;
  *(void *)(v0 + 584) = WitnessTable;
  *(void *)(v0 + 592) = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v21 = *(void *)(v0 + 304);
  uint64_t v22 = swift_getWitnessTable();
  uint64_t v23 = *(void *)(v0 + 272);
  View.optionalSelectionContainer<A>(_:)(v8 - 216, v21, (uint64_t)&type metadata for AnyListSelection, v22, (uint64_t)&protocol witness table for AnyListSelection, v23);
  outlined consume of Binding<Set<A>>?<A, B>(v18, v19, v20, MEMORY[0x1E4FBC8D0]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 288) + 8))(v12, v21);
  unint64_t v24 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  *(void *)(v0 + 568) = v22;
  *(void *)(v0 + 576) = v24;
  uint64_t v25 = swift_getWitnessTable();
  uint64_t v26 = MEMORY[0x1E4F3F738];
  *(void *)(v0 + 552) = v22;
  *(void *)(v0 + 560) = v26;
  uint64_t v27 = swift_getWitnessTable();
  *(void *)(v0 + 536) = v25;
  *(void *)(v0 + 544) = v27;
  uint64_t v28 = *(void *)(v0 + 328);
  swift_getWitnessTable();
  uint64_t v29 = *(void *)(v0 + 280);
  static ViewBuilder.buildExpression<A>(_:)(v23);
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 320) + 8);
  v30(v23, v28);
  static ViewBuilder.buildExpression<A>(_:)(v29);
  return ((uint64_t (*)(uint64_t, uint64_t))v30)(v29, v28);
}

uint64_t destroy for ResolvedList(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = (void *)((result + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v4 < 0xFFFFFFFFuLL) {
    return result;
  }
  int v5 = *(_DWORD *)(v3 + 84);
  uint64_t v6 = *(_DWORD *)(v3 + 80) & 0xF8 | 7;
  uint64_t v17 = *(void *)(*(void *)(a2 + 16) - 8);
  unint64_t v7 = *(void *)(v3 + 64);
  swift_release();
  swift_release();
  uint64_t v8 = (unsigned __int8 *)(((unint64_t)v4 + v6 + 8) & ~v6);
  if (v5) {
    unint64_t v9 = v7;
  }
  else {
    unint64_t v9 = v7 + 1;
  }
  if (v9 <= v7) {
    unint64_t v9 = v7;
  }
  if (v9 <= 8) {
    unint64_t v9 = 8;
  }
  unsigned int v10 = v8[v9];
  unsigned int v11 = v10 - 3;
  if (v10 >= 3)
  {
    if (v9 <= 3) {
      uint64_t v12 = v9;
    }
    else {
      uint64_t v12 = 4;
    }
    switch(v12)
    {
      case 1:
        int v13 = *v8;
        goto LABEL_18;
      case 2:
        int v13 = *(unsigned __int16 *)v8;
        goto LABEL_18;
      case 3:
        int v13 = *(unsigned __int16 *)v8 | (v8[2] << 16);
        goto LABEL_18;
      case 4:
        int v13 = *(_DWORD *)v8;
LABEL_18:
        int v14 = (v13 | (v11 << (8 * v9))) + 3;
        unsigned int v10 = v13 + 3;
        if (v9 < 4) {
          unsigned int v10 = v14;
        }
        break;
      default:
        break;
    }
  }
  if (v10 == 2)
  {
    uint64_t v15 = v17;
LABEL_25:
    uint64_t v16 = *(uint64_t (**)(unsigned __int8 *, uint64_t))(v15 + 8);
    return v16(v8, v2);
  }
  if (v10 == 1)
  {
    uint64_t result = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(v17 + 48))(v8, 1, v2);
    uint64_t v15 = v17;
    if (result) {
      return result;
    }
    goto LABEL_25;
  }

  return swift_bridgeObjectRelease();
}

uint64_t destroy for NavigableListModifier(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(_DWORD *)(v3 + 80) & 0xF8;
  uint64_t v6 = v5 + 15;
  uint64_t v7 = ~(v5 | 7);
  unint64_t v8 = *(void *)(v3 + 64);
  unint64_t v9 = (void *)((((v5 + 15 + a1) & v7) + 15) & 0xFFFFFFFFFFFFFFF8);
  if (*v9 > 0xFFFFFFFEuLL)
  {
    swift_release();
    swift_release();
    BOOL v10 = v4 == 0;
    unsigned int v11 = (unsigned __int8 *)(((unint64_t)v9 + v6) & v7);
    if (v10) {
      unint64_t v12 = v8 + 1;
    }
    else {
      unint64_t v12 = v8;
    }
    if (v12 <= v8) {
      unint64_t v12 = v8;
    }
    if (v12 <= 8) {
      uint64_t v13 = 8;
    }
    else {
      uint64_t v13 = v12;
    }
    unsigned int v14 = v11[v13];
    unsigned int v15 = v14 - 3;
    if (v14 >= 3)
    {
      if (v13 <= 3) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = 4;
      }
      switch(v16)
      {
        case 1:
          int v17 = *v11;
          goto LABEL_20;
        case 2:
          int v17 = *(unsigned __int16 *)v11;
          goto LABEL_20;
        case 3:
          int v17 = *(unsigned __int16 *)v11 | (*(unsigned __int8 *)((((unint64_t)v9 + v6) & v7) + 2) << 16);
          goto LABEL_20;
        case 4:
          int v17 = *(_DWORD *)v11;
LABEL_20:
          int v18 = (v17 | (v15 << (8 * v13))) + 3;
          unsigned int v14 = v17 + 3;
          if (v13 < 4) {
            unsigned int v14 = v18;
          }
          break;
        default:
          break;
      }
    }
    if (v14 == 2)
    {
LABEL_25:
      (*(void (**)(unint64_t, uint64_t))(v3 + 8))(((unint64_t)v9 + v6) & v7, v2);
      goto LABEL_27;
    }
    if (v14 == 1)
    {
      if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(((unint64_t)v9 + v6) & v7, 1, v2))
      {
        goto LABEL_27;
      }
      goto LABEL_25;
    }
    swift_bridgeObjectRelease();
  }
LABEL_27:

  return swift_release();
}

uint64_t type metadata accessor for ResolvedList()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, (unint64_t *)&lazy cache variable for type metadata for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>);
    lazy protocol witness table accessor for type RefreshScopeModifier and conformance RefreshScopeModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<_SemanticFeature_v4_4, RefreshScopeModifier, EmptyModifier>(255, &lazy cache variable for type metadata for StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<_SemanticFeature_v6, ResetScrollEnvironmentModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ListStyleContent and conformance ListStyleContent()
{
  unint64_t result = lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent;
  if (!lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent;
  if (!lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ListStyleContent and conformance ListStyleContent);
  }
  return result;
}

void type metadata accessor for StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier>)
  {
    type metadata accessor for AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>(&lazy protocol witness table cache variable for type AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature> and conformance AndOperationViewInputPredicate<A, B>, (void (*)(uint64_t))type metadata accessor for AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>);
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>, ListHasLazyStackBehaviorInScrollableAxisModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for TextFieldLabelDisplayModeModifier<AutomaticTextFieldLabelDisplayMode>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ViewInputFlagModifier<ProvidesContextMenuInteraction>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesContextMenuInteraction>)
  {
    lazy protocol witness table accessor for type ProvidesContextMenuInteraction and conformance ProvidesContextMenuInteraction();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ProvidesContextMenuInteraction>);
    }
  }
}

uint64_t TabView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v59 = a2;
  uint64_t v3 = a1[2];
  type metadata accessor for Binding();
  uint64_t v58 = type metadata accessor for Optional();
  uint64_t v54 = *(void *)(v58 - 8);
  MEMORY[0x1F4188790](v58);
  uint64_t v53 = (char *)&v38 - v4;
  uint64_t v5 = a1[4];
  uint64_t v6 = type metadata accessor for TabViewStyleConfiguration();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v49 = (uint64_t)&v38 - v7;
  uint64_t v43 = type metadata accessor for ResolvedTabView();
  uint64_t v56 = *(void *)(v43 - 8);
  MEMORY[0x1F4188790](v43);
  uint64_t v55 = (uint64_t)&v38 - v8;
  uint64_t v9 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v10 = a1[3];
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E4F407B8], MEMORY[0x1E4F407B0], MEMORY[0x1E4F40318]);
  uint64_t v39 = v10;
  type metadata accessor for ModifiedContent();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v45 = v9;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v47 = WitnessTable;
  uint64_t v13 = a1[5];
  unint64_t v14 = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v78 = v13;
  unint64_t v79 = v14;
  uint64_t v38 = v13;
  uint64_t v52 = MEMORY[0x1E4F3FBC0];
  uint64_t v76 = swift_getWitnessTable();
  id v77 = &protocol witness table for AccessibilityContainerModifier;
  uint64_t v46 = v11;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v72 = v9;
  uint64_t v73 = v11;
  uint64_t v74 = WitnessTable;
  uint64_t v75 = v44;
  type metadata accessor for StaticSourceWriter();
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v51 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  double v40 = (char *)&v38 - v16;
  type metadata accessor for ViewInputFlagModifier<IsInLazyContainer>();
  uint64_t v17 = type metadata accessor for ModifiedContent();
  uint64_t v50 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v41 = (char *)&v38 - v18;
  uint64_t v72 = v3;
  uint64_t v73 = v10;
  uint64_t v74 = v5;
  uint64_t v75 = v13;
  uint64_t v42 = type metadata accessor for TabView.TransformEnvironment();
  uint64_t v19 = type metadata accessor for ModifiedContent();
  uint64_t v48 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)&v38 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v26 = (uint64_t)v53;
  uint64_t v27 = v57;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v54 + 16))(v53, v57, v58, v23);
  uint64_t v28 = v49;
  _ListStyleConfiguration.init(selection:)(v26, v49);
  uint64_t v29 = v55;
  ResolvedTabView.init(configuration:)(v28, v55);
  uint64_t v61 = v3;
  uint64_t v62 = v39;
  uint64_t v63 = v5;
  uint64_t v64 = v38;
  uint64_t v65 = v27;
  uint64_t v30 = v40;
  uint64_t v31 = v43;
  View.viewAlias<A, B>(_:_:)(v45, (void (*)(double))partial apply for closure #1 in TabView.body.getter, (uint64_t)v60, v43, v45, v46, (uint64_t)&protocol witness table for ResolvedTabView<A>);
  (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v29, v31);
  uint64_t v70 = &protocol witness table for ResolvedTabView<A>;
  uint64_t v71 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v32 = swift_getWitnessTable();
  unint64_t v33 = lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
  uint64_t v34 = v41;
  View.input<A>(_:)((uint64_t)&type metadata for IsInLazyContainer, v15, (uint64_t)&type metadata for IsInLazyContainer, v32, v33);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v30, v15);
  uint64_t v68 = v32;
  uint64_t v69 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v35 = swift_getWitnessTable();
  MEMORY[0x18C113660](v35, v17, v42, v35);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v34, v17);
  uint64_t v66 = v35;
  uint64_t v67 = &protocol witness table for TabView<A, B>.TransformEnvironment;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v21);
  uint64_t v36 = *(void (**)(char *, uint64_t))(v48 + 8);
  v36(v21, v19);
  static ViewBuilder.buildExpression<A>(_:)(v25);
  return ((uint64_t (*)(char *, uint64_t))v36)(v25, v19);
}

uint64_t destroy for _ListStyleConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = ~v4;
  uint64_t v6 = (uint64_t *)((a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v10 = v3;
  if ((*(_DWORD *)(v3 + 84) & 0x80000000) != 0)
  {
    uint64_t result = (*(uint64_t (**)(unint64_t))(v3 + 48))(((unint64_t)v6 + v4 + 8) & v5);
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v7 = *v6;
  if ((unint64_t)*v6 >= 0xFFFFFFFF) {
    LODWORD(v7) = -1;
  }
  uint64_t result = (v7 + 1);
  if (v7 == -1)
  {
LABEL_7:
    swift_release();
    swift_release();
    uint64_t v9 = *(uint64_t (**)(unint64_t, uint64_t))(v10 + 8);
    return v9(((unint64_t)v6 + v4 + 8) & v5, v2);
  }
  return result;
}

uint64_t _ListStyleConfiguration.init(selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56))(a2, 1, 1, v4);
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40);

  return v6(a2, a1, v5);
}

uint64_t type metadata accessor for TabView.TransformEnvironment()
{
  return swift_getGenericMetadata();
}

void type metadata accessor for ViewInputFlagModifier<IsInLazyContainer>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<IsInLazyContainer>)
  {
    lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<IsInLazyContainer>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type IsInLazyContainer and conformance IsInLazyContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer;
  if (!lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type IsInLazyContainer and conformance IsInLazyContainer);
  }
  return result;
}

uint64_t ResolvedTabView.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for TabViewStyleConfiguration();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32);

  return v5(a2, a1, v4);
}

uint64_t _TabViewValue.Init2.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  v17[0] = a3;
  v17[1] = a2;
  uint64_t v4 = type metadata accessor for TabViewStyleConfiguration();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v17 - v6;
  uint64_t v8 = type metadata accessor for ResolvedTabView();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)v17 - v9;
  uint64_t v11 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, Value, a1);
  _TabViewValue.Init2.base.getter((uint64_t)v10);
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
  return _TabViewValue.init(style:configuration:)((uint64_t)v14, (uint64_t)v7, a1, v17[0]);
}

void *initializeWithCopy for _ListStyleConfiguration(void *__dst, void *__src, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = (uint64_t *)(((unint64_t)__src + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v6 + 84) & 0x80000000) == 0)
  {
    uint64_t v11 = *v10;
    if ((unint64_t)*v10 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    if (v11 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    void *__dst = *__src;
    uint64_t v12 = (void *)(((unint64_t)__dst + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v12 = *v10;
    uint64_t v13 = ((unint64_t)v12 + v7 + 8) & v8;
    unint64_t v14 = *(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16);
    swift_retain();
    swift_retain();
    v14(v13, ((unint64_t)v10 + v7 + 8) & v8, v5);
    return __dst;
  }
  if (!(*(unsigned int (**)(unint64_t))(v6 + 48))(((unint64_t)v10 + v7 + 8) & v8)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(__dst, __src, ((v7 + 16) & ~v7) + v9);
  return __dst;
}

uint64_t type metadata accessor for TabViewStyleConfiguration()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _TabViewValue.init(style:configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a4, a1);
  uint64_t v6 = a4 + *(int *)(type metadata accessor for _TabViewValue() + 52);
  uint64_t v7 = type metadata accessor for TabViewStyleConfiguration();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32))(v6, a2, v7);
}

uint64_t LazyPageTabView.init(selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t, uint64_t, uint64_t, uint64_t)@<X1>, uint64_t a3@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v6 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t v7 = type metadata accessor for LazyPageTabView();
  return a2(v7, v8, v9, v10);
}

uint64_t partial apply for closure #1 in LazyPageTabViewStyle.Body.value.getter()
{
  return closure #1 in LazyPageTabViewStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #1 in LazyPageTabViewStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v10[0] = &type metadata for LazyPageTabViewStyle;
  v10[1] = a2;
  _OWORD v10[2] = &protocol witness table for LazyPageTabViewStyle;
  uint64_t v10[3] = a3;
  uint64_t v3 = type metadata accessor for _TabViewValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v10 - v5;
  LazyPageTabViewStyle.Body.base.getter((uint64_t)v10 - v5);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  uint64_t v7 = type metadata accessor for TabViewStyleConfiguration.Content();
  uint64_t v8 = static ViewBuilder.buildExpression<A>(_:)(v7);
  return static ViewBuilder.buildExpression<A>(_:)(v8);
}

uint64_t destroy for TableViewListCore(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = v7;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v5 + a1 + (v9 | 7)) & ~(v9 | 7);
  uint64_t v11 = ~v9;
  uint64_t v12 = (uint64_t *)((v10 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v7 + 84) & 0x80000000) != 0)
  {
    uint64_t v16 = *(void *)(v6 - 8);
    uint64_t result = (*(uint64_t (**)(unint64_t))(v7 + 48))(((unint64_t)v12 + v9 + 8) & v11);
    uint64_t v8 = v16;
    if (result) {
      return result;
    }
    goto LABEL_7;
  }
  uint64_t v13 = *v12;
  if ((unint64_t)*v12 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  uint64_t result = (v13 + 1);
  if (v13 == -1)
  {
LABEL_7:
    uint64_t v17 = v8;
    swift_release();
    swift_release();
    uint64_t v15 = *(uint64_t (**)(unint64_t, uint64_t))(v17 + 8);
    return v15(((unint64_t)v12 + v9 + 8) & v11, v6);
  }
  return result;
}

uint64_t LazyPageTabViewStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for Binding();
  uint64_t v8 = type metadata accessor for Optional();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v16[-v10];
  uint64_t v20 = &type metadata for LazyPageTabViewStyle;
  uint64_t v21 = a2;
  uint64_t v22 = &protocol witness table for LazyPageTabViewStyle;
  uint64_t v23 = a3;
  uint64_t v12 = type metadata accessor for _TabViewValue();
  MEMORY[0x1F4188790](v12 - 8);
  unint64_t v14 = &v16[-v13];
  LazyPageTabViewStyle.Body.base.getter((uint64_t)&v16[-v13]);
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v9 + 32))(v11, v14, v8);
  uint64_t v17 = a2;
  uint64_t v18 = a3;
  int v19 = a1;
  type metadata accessor for TabViewStyleConfiguration.Content();
  return LazyPageTabView.init(selection:content:)((uint64_t)v11, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in LazyPageTabViewStyle.Body.value.getter, a4);
}

uint64_t type metadata accessor for TabViewStyleConfiguration.Content()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LazyPageTabViewStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _TabViewValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t type metadata accessor for _TabViewValue()
{
  return swift_getGenericMetadata();
}

uint64_t initializeWithCopy for _TabViewValue(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v9 | 7) + *(void *)(v6 + 48);
  uint64_t v11 = (void *)((v10 + a1) & ~(v9 | 7));
  uint64_t v12 = (void *)((v10 + a2) & ~(v9 | 7));
  uint64_t v13 = ~v9;
  uint64_t v14 = *(void *)(v8 + 64);
  uint64_t v15 = (uint64_t *)(((unint64_t)v12 + 15) & 0xFFFFFFFFFFFFFFF8);
  if ((*(_DWORD *)(v8 + 84) & 0x80000000) == 0)
  {
    uint64_t v16 = *v15;
    if ((unint64_t)*v15 >= 0xFFFFFFFF) {
      LODWORD(v16) = -1;
    }
    if (v16 != -1) {
      goto LABEL_5;
    }
LABEL_7:
    *uint64_t v11 = *v12;
    uint64_t v17 = (void *)(((unint64_t)v11 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v17 = *v15;
    uint64_t v18 = ((unint64_t)v17 + v9 + 8) & v13;
    int v19 = *(void (**)(uint64_t, unint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v19(v18, ((unint64_t)v15 + v9 + 8) & v13, v7);
    return a1;
  }
  if (!(*(unsigned int (**)(unint64_t))(v8 + 48))(((unint64_t)v15 + v9 + 8) & v13)) {
    goto LABEL_7;
  }
LABEL_5:
  memcpy(v11, v12, ((v9 + 16) & ~v9) + v14);
  return a1;
}

uint64_t _TabViewValue.Init2.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ResolvedTabView();
  uint64_t Value = AGGraphGetValue();
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16);

  return v4(a1, Value, v2);
}

uint64_t type metadata accessor for ResolvedTabView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t TabView.init(selection:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  uint64_t v21 = a5;
  uint64_t v22 = a6;
  uint64_t v12 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Binding();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(a7, 1, 1, v15);
  uint64_t v16 = type metadata accessor for Optional();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 24))(a7, a1, v16);
  a2(v18);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a1, v16);
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v25 = v21;
  uint64_t v26 = v22;
  uint64_t v19 = type metadata accessor for TabView();
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a7 + *(int *)(v19 + 52), v14, a4);
}

uint64_t closure #1 in TabView.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v24[1] = a1;
  uint64_t v26 = a6;
  type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E4F407B8], MEMORY[0x1E4F407B0], MEMORY[0x1E4F40318]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v25 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)v24 - v11;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v14 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v24 - v18;
  v31[0] = a2;
  v31[1] = a3;
  void v31[2] = a4;
  v31[3] = a5;
  type metadata accessor for TabView();
  View.styleContext<A>(_:)();
  if (one-time initialization token for contain != -1) {
    swift_once();
  }
  v31[0] = static AccessibilityChildBehavior.contain;
  unint64_t v20 = lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v29 = a5;
  unint64_t v30 = v20;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.accessibilityElement(children:)(v31, v10, WitnessTable);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  uint64_t v27 = WitnessTable;
  uint64_t v28 = &protocol witness table for AccessibilityContainerModifier;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v16);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v14 + 8);
  v22(v16, v13);
  static ViewBuilder.buildExpression<A>(_:)(v19);
  return ((uint64_t (*)(char *, uint64_t))v22)(v19, v13);
}

uint64_t View.accessibilityElement(children:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *a1;
  return MEMORY[0x18C113660](&v4, a2, &type metadata for AccessibilityContainerModifier, a3);
}

uint64_t type metadata accessor for TabView()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>;
  if (!lazy protocol witness table cache variable for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>)
  {
    type metadata accessor for StyleContextWriter<ContainerStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>, MEMORY[0x1E4F407B8], MEMORY[0x1E4F407B0], MEMORY[0x1E4F40318]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextWriter<ContainerStyleContext> and conformance StyleContextWriter<A>);
  }
  return result;
}

uint64_t type metadata accessor for ToAnyListSelection()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined consume of Binding<Set<A>>?<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  if (a2)
  {
    swift_release();
    a4(a3);
    return swift_release();
  }
  return result;
}

uint64_t View.optionalSelectionContainer<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v50 = a5;
  uint64_t v60 = a4;
  uint64_t v55 = a1;
  uint64_t v61 = a6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v54 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v52 = (char *)&v49 - v12;
  uint64_t v57 = a2;
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v53 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v51 = (char *)&v49 - v17;
  uint64_t v49 = a3;
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = type metadata accessor for Optional();
  uint64_t v20 = *(void *)(v19 - 8);
  MEMORY[0x1F4188790](v19);
  uint64_t v22 = (char *)&v49 - v21;
  uint64_t v23 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)&v49 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27);
  uint64_t v56 = (char *)&v49 - v28;
  uint64_t v62 = v8;
  uint64_t v59 = type metadata accessor for _ConditionalContent();
  uint64_t v58 = *(void *)(v59 - 8);
  double v29 = MEMORY[0x1F4188790](v59);
  uint64_t v63 = (char *)&v49 - v30;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v22, v55, v19, v29);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v22, 1, v18) == 1)
  {
    uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v20 + 8))(v22, v19);
    uint64_t v32 = v60;
    MEMORY[0x18C113660](v31, v57, MEMORY[0x1E4F3F740], v60);
    uint64_t v77 = v32;
    uint64_t v78 = MEMORY[0x1E4F3F738];
    uint64_t v33 = v62;
    swift_getWitnessTable();
    uint64_t v34 = v52;
    static ViewBuilder.buildExpression<A>(_:)(v10);
    uint64_t v35 = *(void (**)(char *, uint64_t))(v54 + 8);
    v35(v10, v33);
    static ViewBuilder.buildExpression<A>(_:)(v34);
    unint64_t v36 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
    uint64_t v75 = v32;
    unint64_t v76 = v36;
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(second:)((uint64_t)v10, v13, v33);
    v35(v10, v33);
    v35(v34, v33);
  }
  else
  {
    uint64_t v37 = v56;
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v56, v22, v18);
    (*(void (**)(char *, char *, uint64_t))(v23 + 16))(v26, v37, v18);
    double v39 = SelectionContainerModifier.init<A>(_:)((uint64_t)v26, v49, v50, v38, (uint64_t)v68);
    uint64_t v32 = v60;
    MEMORY[0x18C113660](v68, v57, &type metadata for SelectionContainerModifier, v60, v39);
    outlined destroy of SelectionContainerModifier((uint64_t)v68);
    unint64_t v40 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
    uint64_t v66 = v32;
    unint64_t v67 = v40;
    swift_getWitnessTable();
    uint64_t v41 = v51;
    static ViewBuilder.buildExpression<A>(_:)(v15);
    uint64_t v42 = *(void (**)(char *, uint64_t))(v53 + 8);
    v42(v15, v13);
    static ViewBuilder.buildExpression<A>(_:)(v41);
    uint64_t v64 = v32;
    uint64_t v65 = MEMORY[0x1E4F3F738];
    swift_getWitnessTable();
    static ViewBuilder.buildEither<A, B>(first:)((uint64_t)v15, v13);
    v42(v15, v13);
    v42(v41, v13);
    (*(void (**)(char *, uint64_t))(v23 + 8))(v56, v18);
  }
  unint64_t v43 = lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier();
  uint64_t v73 = v32;
  unint64_t v74 = v43;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v71 = v32;
  uint64_t v72 = MEMORY[0x1E4F3F738];
  uint64_t v45 = swift_getWitnessTable();
  uint64_t v69 = WitnessTable;
  uint64_t v70 = v45;
  uint64_t v46 = v59;
  swift_getWitnessTable();
  uint64_t v47 = v63;
  static ViewBuilder.buildExpression<A>(_:)(v63);
  return (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v47, v46);
}

uint64_t destroy for SelectionContainerModifier(uint64_t a1)
{
  swift_release();
  swift_release();

  return __swift_destroy_boxed_opaque_existential_1(a1 + 16);
}

unint64_t lazy protocol witness table accessor for type SelectionContainerModifier and conformance SelectionContainerModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type SelectionContainerModifier and conformance SelectionContainerModifier;
  if (!lazy protocol witness table cache variable for type SelectionContainerModifier and conformance SelectionContainerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SelectionContainerModifier and conformance SelectionContainerModifier);
  }
  return result;
}

void View.configuredForLazyContainer()()
{
}

void View.textFieldLabelDisplayMode<A>(_:)()
{
  type metadata accessor for TextFieldLabelDisplayModeModifier();

  JUMPOUT(0x18C113660);
}

uint64_t type metadata accessor for TextFieldLabelDisplayModeModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.listHasLazyStackBehaviorInVerticalScrollView<A>(requiring:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ScrollViewStyleContext>, MEMORY[0x1E4F409C0], MEMORY[0x1E4F410E8]);
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>();
  type metadata accessor for AndOperationViewInputPredicate();
  swift_getWitnessTable();
  ViewModifier.requiring<A>(_:)();
  v8[0] = v8[1];
  uint64_t v6 = type metadata accessor for StaticIf();
  return MEMORY[0x18C113660](v8, a2, v6, a4);
}

void type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t List.stateHost.getter()
{
  type metadata accessor for NavigationStateHost();
  lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type NavigationStateHost and conformance NavigationStateHost, (void (*)(uint64_t))type metadata accessor for NavigationStateHost);

  return StateObject.wrappedValue.getter();
}

uint64_t type metadata accessor for NavigationStateHost()
{
  return self;
}

uint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>;
  if (!lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<ScrollContentBackground>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ScrollViewStyleContext>, MEMORY[0x1E4F409C0], MEMORY[0x1E4F410E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>);
  }
  return result;
}

double SelectionContainerModifier.init<A>(_:)@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(a2, a3, a3, a4);
  uint64_t v7 = type metadata accessor for Binding();
  type metadata accessor for AsAnySelection();
  swift_getWitnessTable();
  Binding.projecting<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8))(a1, v7);
  *(_OWORD *)a5 = v9;
  *(_OWORD *)(a5 + 16) = v10;
  double result = *(double *)&v11;
  *(_OWORD *)(a5 + 32) = v11;
  *(void *)(a5 + 48) = v12;
  return result;
}

uint64_t type metadata accessor for AsAnySelection()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>()
{
  if (!lazy cache variable for type metadata for AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>)
  {
    type metadata accessor for StyleContextAcceptsPredicate<ScrollViewStyleContext>();
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>((unint64_t *)&lazy protocol witness table cache variable for type StyleContextAcceptsPredicate<ScrollViewStyleContext> and conformance StyleContextAcceptsPredicate<A>, (void (*)(uint64_t))type metadata accessor for StyleContextAcceptsPredicate<ScrollViewStyleContext>);
    unint64_t v0 = type metadata accessor for AndOperationViewInputPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AndOperationViewInputPredicate<StyleContextAcceptsPredicate<ScrollViewStyleContext>, DisabledFeature>);
    }
  }
}

void type metadata accessor for StyleContextAcceptsPredicate<ScrollViewStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextAcceptsPredicate<ScrollViewStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextAcceptsPredicate();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<ScrollViewStyleContext>);
    }
  }
}

uint64_t assignWithCopy for DraggingPreviewModifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(unsigned char *)unint64_t v7 = *(unsigned char *)v8;
  uint64_t v9 = *(void *)(v8 + 8);
  if (*(void *)(v7 + 8))
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(v8 + 16);
      *(void *)(v7 + 8) = v9;
      *(void *)(v7 + 16) = v10;
      swift_retain();
      swift_release();
      goto LABEL_8;
    }
    swift_release();
  }
  else if (v9)
  {
    uint64_t v11 = *(void *)(v8 + 16);
    *(void *)(v7 + 8) = v9;
    *(void *)(v7 + 16) = v11;
    swift_retain();
    goto LABEL_8;
  }
  *(_OWORD *)(v7 + 8) = *(_OWORD *)(v8 + 8);
LABEL_8:
  uint64_t v12 = *(void *)(v8 + 24);
  if (*(void *)(v7 + 24))
  {
    if (v12)
    {
      uint64_t v13 = *(void *)(v8 + 32);
      *(void *)(v7 + 24) = v12;
      *(void *)(v7 + 32) = v13;
      swift_retain();
      swift_release();
      goto LABEL_15;
    }
    swift_release();
  }
  else if (v12)
  {
    uint64_t v14 = *(void *)(v8 + 32);
    *(void *)(v7 + 24) = v12;
    *(void *)(v7 + 32) = v14;
    swift_retain();
    goto LABEL_15;
  }
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
LABEL_15:
  uint64_t v15 = *(void *)(v8 + 40);
  if (*(void *)(v7 + 40))
  {
    if (v15)
    {
      uint64_t v16 = *(void *)(v8 + 48);
      *(void *)(v7 + 40) = v15;
      *(void *)(v7 + 48) = v16;
      swift_retain();
      swift_release();
      goto LABEL_22;
    }
    swift_release();
  }
  else if (v15)
  {
    uint64_t v17 = *(void *)(v8 + 48);
    *(void *)(v7 + 40) = v15;
    *(void *)(v7 + 48) = v17;
    swift_retain();
    goto LABEL_22;
  }
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(v8 + 40);
LABEL_22:
  uint64_t v18 = *(void *)(v8 + 56);
  if (*(void *)(v7 + 56))
  {
    if (v18)
    {
      uint64_t v19 = *(void *)(v8 + 64);
      *(void *)(v7 + 56) = v18;
      *(void *)(v7 + 64) = v19;
      swift_retain();
      swift_release();
      goto LABEL_29;
    }
    swift_release();
  }
  else if (v18)
  {
    uint64_t v20 = *(void *)(v8 + 64);
    *(void *)(v7 + 56) = v18;
    *(void *)(v7 + 64) = v20;
    swift_retain();
    goto LABEL_29;
  }
  *(_OWORD *)(v7 + 56) = *(_OWORD *)(v8 + 56);
LABEL_29:
  uint64_t v21 = *(void *)(v8 + 96);
  if (!*(void *)(v7 + 96))
  {
    if (v21)
    {
      *(void *)(v7 + 96) = v21;
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))(v7 + 72, v8 + 72);
      goto LABEL_36;
    }
LABEL_35:
    long long v22 = *(_OWORD *)(v8 + 88);
    *(_OWORD *)(v7 + 72) = *(_OWORD *)(v8 + 72);
    *(_OWORD *)(v7 + 88) = v22;
    goto LABEL_36;
  }
  if (!v21)
  {
    __swift_destroy_boxed_opaque_existential_1(v7 + 72);
    goto LABEL_35;
  }
  __swift_assign_boxed_opaque_existential_0((uint64_t *)(v7 + 72), (uint64_t *)(v8 + 72));
LABEL_36:
  uint64_t v23 = *(void *)(v8 + 112);
  *(void *)(v7 + 104) = *(void *)(v8 + 104);
  *(void *)(v7 + 112) = v23;
  swift_retain();
  swift_release();
  return a1;
}

SEL *_DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v54 = a4;
  uint64_t v61 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v53 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v59 = 0u;
    long long v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((void *)&v60 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v59);
    uint64_t v51 = type metadata accessor for DecodingError();
    uint64_t v52 = swift_allocError();
    uint64_t v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    unsigned char v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    uint64_t v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v38(boxed_opaque_existential_1, v16, a5);
    uint64_t v39 = (uint64_t)v61;
    swift_beginAccess();
    *(void *)&long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000188330C20;
    uint64_t v56 = a5;
    uint64_t v57 = a6;
    unint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, v16, a5);
    uint64_t v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    unint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    uint64_t v30 = (SEL *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v51 - 8) + 104))(v35, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v59, &v55);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v51 = v9;
  v50(v14, v16, a5);
  long long v22 = v61;
  uint64_t v23 = v61 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v51;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v50(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v61;
  uint64_t v30 = (SEL *)v61;
  uint64_t v31 = v52;
  uint64_t v32 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_unsignedIntegerValue, (SEL *)&selRef_initWithUnsignedInteger_, 1953384789, (void *)0xE400000000000000);
  if (v31) {
    goto LABEL_15;
  }
  if (v33)
  {
    uint64_t v47 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v49 = MEMORY[0x1E4FBB808];
    *(void *)&long long v59 = 0;
    *((void *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v30 = (SEL *)&v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v49, *MEMORY[0x1E4FBBA80], v47);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v30;
  }
  uint64_t v30 = v32;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v30;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL *v30;
  uint64_t v31;
  SEL *v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  void *v48;
  void *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  void v58[2];
  long long v59;
  long long v60;
  void *v61;

  uint64_t v54 = a4;
  uint64_t v61 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v53 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v59 = 0u;
    long long v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((void *)&v60 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v59);
    uint64_t v51 = type metadata accessor for DecodingError();
    uint64_t v52 = swift_allocError();
    uint64_t v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    unsigned char v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    uint64_t v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v38(boxed_opaque_existential_1, v16, a5);
    uint64_t v39 = (uint64_t)v61;
    swift_beginAccess();
    *(void *)&long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000188330C20;
    uint64_t v56 = a5;
    uint64_t v57 = a6;
    unint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, v16, a5);
    uint64_t v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    unint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    uint64_t v30 = (SEL *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v51 - 8) + 104))(v35, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v59, &v55);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v51 = v9;
  v50(v14, v16, a5);
  long long v22 = v61;
  uint64_t v23 = v61 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v51;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v50(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v61;
  uint64_t v30 = (SEL *)v61;
  uint64_t v31 = v52;
  uint64_t v32 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_unsignedLongLongValue, (SEL *)&selRef_initWithUnsignedLongLong_, 0x3436746E4955, (void *)0xE600000000000000);
  if (v31) {
    goto LABEL_15;
  }
  if (v33)
  {
    uint64_t v47 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v49 = MEMORY[0x1E4FBC538];
    *(void *)&long long v59 = 0;
    *((void *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v30 = (SEL *)&v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v49, *MEMORY[0x1E4FBBA80], v47);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v30;
  }
  uint64_t v30 = v32;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v30;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL *v30;
  uint64_t v31;
  SEL *v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  void *v48;
  void *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  void v58[2];
  long long v59;
  long long v60;
  void *v61;

  uint64_t v54 = a4;
  uint64_t v61 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v53 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v59 = 0u;
    long long v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((void *)&v60 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v59);
    uint64_t v51 = type metadata accessor for DecodingError();
    uint64_t v52 = swift_allocError();
    uint64_t v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    unsigned char v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    uint64_t v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v38(boxed_opaque_existential_1, v16, a5);
    uint64_t v39 = (uint64_t)v61;
    swift_beginAccess();
    *(void *)&long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000188330C20;
    uint64_t v56 = a5;
    uint64_t v57 = a6;
    unint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, v16, a5);
    uint64_t v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    unint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    uint64_t v30 = (SEL *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v51 - 8) + 104))(v35, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v59, &v55);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v51 = v9;
  v50(v14, v16, a5);
  long long v22 = v61;
  uint64_t v23 = v61 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v51;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v50(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v61;
  uint64_t v30 = (SEL *)v61;
  uint64_t v31 = v52;
  uint64_t v32 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_longLongValue, (SEL *)&selRef_initWithLongLong_, 0x3436746E49, (void *)0xE500000000000000);
  if (v31) {
    goto LABEL_15;
  }
  if (v33)
  {
    uint64_t v47 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v49 = MEMORY[0x1E4FBC1C8];
    *(void *)&long long v59 = 0;
    *((void *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v30 = (SEL *)&v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v49, *MEMORY[0x1E4FBBA80], v47);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v30;
  }
  uint64_t v30 = v32;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v30;
}

{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char v21;
  void *v22;
  uint64_t *v23;
  void *v24;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  SEL *v30;
  uint64_t v31;
  SEL *v32;
  char v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *boxed_opaque_existential_1;
  void (*v38)(uint64_t *, uint64_t, uint64_t);
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  Swift::String v44;
  Swift::String v45;
  uint64_t v47;
  void *v48;
  void *v49;
  void (*v50)(char *, uint64_t, uint64_t);
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  long long v55;
  uint64_t v56;
  uint64_t v57;
  void v58[2];
  long long v59;
  long long v60;
  void *v61;

  uint64_t v54 = a4;
  uint64_t v61 = a2;
  uint64_t v9 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v50 - v13;
  uint64_t v16 = v15;
  uint64_t v17 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v53 = a3;
  if (!v19 || (unint64_t v20 = specialized __RawDictionaryStorage.find<A>(_:)(v17, v18), (v21 & 1) == 0))
  {
    long long v59 = 0u;
    long long v60 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }
  outlined init with copy of Any(*(void *)(a3 + 56) + 32 * v20, (uint64_t)&v59);
  swift_bridgeObjectRelease();
  if (!*((void *)&v60 + 1))
  {
LABEL_12:
    outlined destroy of Any?((uint64_t)&v59);
    uint64_t v51 = type metadata accessor for DecodingError();
    uint64_t v52 = swift_allocError();
    uint64_t v35 = v34;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v50 = (void (*)(char *, uint64_t, uint64_t))((char *)v35 + *(int *)(v36 + 48));
    v35[3] = a5;
    unsigned char v35[4] = a6;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v35);
    uint64_t v38 = *(void (**)(uint64_t *, uint64_t, uint64_t))(v9 + 16);
    v38(boxed_opaque_existential_1, v16, a5);
    uint64_t v39 = (uint64_t)v61;
    swift_beginAccess();
    *(void *)&long long v55 = 0;
    *((void *)&v55 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v58[0] = 0xD00000000000001DLL;
    v58[1] = 0x8000000188330C20;
    uint64_t v56 = a5;
    uint64_t v57 = a6;
    unint64_t v40 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v55);
    v38(v40, v16, a5);
    uint64_t v41 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v55, v39);
    unint64_t v43 = v42;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    uint64_t v30 = (SEL *)v58;
    v44._countAndFlagsBits = v41;
    v44._object = v43;
    String.append(_:)(v44);
    swift_bridgeObjectRelease();
    v45._countAndFlagsBits = 46;
    v45._object = (void *)0xE100000000000000;
    String.append(_:)(v45);
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void))(*(void *)(v51 - 8) + 104))(v35, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
    return v30;
  }
  outlined init with take of Any(&v59, &v55);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v51 = v9;
  v50(v14, v16, a5);
  long long v22 = v61;
  uint64_t v23 = v61 + 17;
  swift_beginAccess();
  uint64_t v24 = (void *)v22[17];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v22[17] = v24;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v24 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v24[2] + 1, 1, v24);
    *uint64_t v23 = (uint64_t)v24;
  }
  unint64_t v27 = v24[2];
  unint64_t v26 = v24[3];
  uint64_t v28 = v51;
  if (v27 >= v26 >> 1) {
    *uint64_t v23 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v26 > 1), v27 + 1, 1, v24);
  }
  v50(v11, (uint64_t)v14, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v27, (uint64_t)v11, v23, a5, a6);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v14, a5);
  swift_endAccess();
  uint64_t v29 = (uint64_t)v61;
  uint64_t v30 = (SEL *)v61;
  uint64_t v31 = v52;
  uint64_t v32 = specialized __DictionaryDecoder.unbox(_:as:)((uint64_t)&v55, (SEL *)&selRef_integerValue, (SEL *)&selRef_initWithInteger_, 7630409, (void *)0xE300000000000000);
  if (v31) {
    goto LABEL_15;
  }
  if (v33)
  {
    uint64_t v47 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v49 = v48;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v49 = MEMORY[0x1E4FBB550];
    *(void *)&long long v59 = 0;
    *((void *)&v59 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    uint64_t v30 = (SEL *)&v59;
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v47 - 8) + 104))(v49, *MEMORY[0x1E4FBBA80], v47);
    swift_willThrow();
LABEL_15:
    $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
    return v30;
  }
  uint64_t v30 = v32;
  $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v29);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v55);
  return v30;
}

uint64_t specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v12);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(boxed_opaque_existential_1, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + 16) = a1 + 1;
  return outlined init with take of OptionalBinaryInteger(&v12, v10 + 40 * a1 + 32);
}

uint64_t type metadata completion function for AdaptiveStack()
{
  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void specialized UICollectionViewListCoordinatorBase.init()()
{
}

uint64_t specialized UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:)(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x1E4FBC8C8] & *v1;
  uint64_t v4 = type metadata accessor for ShadowListDataSource();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  unint64_t v7 = &v11[-v6];
  unint64_t v8 = (char *)v1 + *(void *)(v3 + 136);
  swift_beginAccess();
  (*(void (**)(unsigned char *, char *, uint64_t))(v5 + 16))(v7, v8, v4);
  long long v12 = v1;
  uint64_t WitnessTable = swift_getWitnessTable();
  ListCoreDataSource.visitContent<A>(atRow:visitor:)(a1, (uint64_t)partial apply for closure #1 in UICollectionViewListCoordinatorBase.collectionView(_:canEditItemAt:), (uint64_t)v11, v4, MEMORY[0x1E4FBB390], WitnessTable, (uint64_t)&v13);
  (*(void (**)(unsigned char *, uint64_t))(v5 + 8))(v7, v4);
  return v13 & 1;
}

uint64_t partial apply for closure #1 in UIHostingViewBase.requestImmediateUpdate()()
{
  return closure #1 in UIHostingViewBase.requestImmediateUpdate()();
}

uint64_t closure #1 in UIHostingViewBase.requestImmediateUpdate()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    *(unsigned char *)(result + 217) = 0;
    UIHostingViewBase.renderForPreferences(updateDisplayList:)(0);
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #2 in UIHostingViewBase.didMoveToWindow()()
{
  return closure #2 in UIHostingViewBase.didMoveToWindow()();
}

uint64_t closure #2 in UIHostingViewBase.didMoveToWindow()()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    UIHostingViewBase.updateRemovedState(uiView:)(0);
    return swift_release();
  }
  return result;
}

uint64_t partial apply for closure #1 in static SceneBridge.sceneBridgePublisher(_:identifier:sceneBridge:)()
{
  return SceneBridge.flushEnqueuedEvents(for:type:)(*(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t SceneBridge.flushEnqueuedEvents(for:type:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_beginAccess();
  uint64_t v6 = *(void *)(v2 + 168);
  if (!*(void *)(v6 + 16)) {
    return swift_endAccess();
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = specialized __RawDictionaryStorage.find<A>(_:)(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    return swift_endAccess();
  }
  uint64_t v9 = *(void *)(*(void *)(v6 + 56) + 8 * v7);
  swift_endAccess();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(v9 + 16);
  if (v10)
  {
    swift_beginAccess();
    specialized Dictionary._Variant.removeValue(forKey:)(a1, a2);
    swift_endAccess();
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + 32;
    long long v12 = (uint64_t *)(v3 + 16);
    for (uint64_t i = v10 - 1; ; --i)
    {
      outlined init with copy of Any(v11, (uint64_t)v22);
      if (static SceneBridge._devNullSceneBridge) {
        BOOL v14 = static SceneBridge._devNullSceneBridge == v3;
      }
      else {
        BOOL v14 = 0;
      }
      if (!v14)
      {
        AnyHashable.init<A>(_:)();
        swift_beginAccess();
        uint64_t v15 = *v12;
        if (*(void *)(*v12 + 16)
          && (unint64_t v16 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21), (v17 & 1) != 0))
        {
          uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
          swift_endAccess();
          swift_bridgeObjectRetain();
          outlined destroy of AnyHashable((uint64_t)v21);
          swift_bridgeObjectRetain();
          AnyHashable.init<A>(_:)();
          if (*(void *)(v18 + 16))
          {
            specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v21);
            if (v19)
            {
              swift_retain();
              swift_bridgeObjectRelease();
              outlined destroy of AnyHashable((uint64_t)v21);
              PassthroughSubject.send(_:)();
              swift_release();
              goto LABEL_18;
            }
          }
          swift_bridgeObjectRelease();
        }
        else
        {
          swift_endAccess();
        }
        outlined destroy of AnyHashable((uint64_t)v21);
      }
      SceneBridge.enqueueUnpublishedEvent(_:for:)((uint64_t)v22, a1, a2);
LABEL_18:
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      if (!i) {
        return swift_bridgeObjectRelease();
      }
      v11 += 32;
    }
  }
  return swift_bridgeObjectRelease();
}

uint64_t AdaptiveStack.init(axis:alignment:spacing:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void (*a6)(uint64_t))
{
  MEMORY[0x1F4188790](a1);
  if (v7) {
    lazy protocol witness table accessor for type VStackLayout and conformance VStackLayout();
  }
  else {
    lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout();
  }
  AnyLayout.init<A>(_:)();
  uint64_t v8 = swift_retain();
  a6(v8);
  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  _VariadicView.Tree.init(root:content:)();
  return swift_release();
}

uint64_t partial apply for closure #1 in AccessibilityAdaptiveStack.body.getter()
{
  return closure #1 in AccessibilityAdaptiveStack.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t closure #1 in AccessibilityAdaptiveStack.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v10 = *(void (**)(void))v9;
  long long v11 = *(_OWORD *)(v9 + 16);
  long long v12 = *(_OWORD *)(v9 + 48);
  _OWORD v16[2] = *(_OWORD *)(v9 + 32);
  v17[0] = v12;
  *(_OWORD *)((char *)v17 + 9) = *(_OWORD *)(v9 + 57);
  v16[0] = *(_OWORD *)v9;
  v16[1] = v11;
  type metadata accessor for AccessibilityAdaptiveStack();
  char v13 = AccessibilityAdaptiveStack.shouldUseVerticalLayout.getter();
  v10(v13 & 1);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  BOOL v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, a2);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return ((uint64_t (*)(char *, uint64_t))v14)(v8, a2);
}

uint64_t type metadata accessor for AccessibilityAdaptiveStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t AccessibilityAdaptiveStack.shouldUseVerticalLayout.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 41);
  uint64_t v2 = *(void *)(v0 + 48);
  char v3 = *(unsigned char *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  char v5 = *(unsigned char *)(v0 + 72);
  outlined copy of Environment<Bool>.Content(v2, v3);
  specialized Environment.wrappedValue.getter(v2, v3, &v8);
  outlined consume of Environment<Bool>.Content(v2, v3);
  if (v8 - 7 < 5)
  {
    outlined copy of Environment<Bool>.Content(v4, v5);
    specialized Environment.wrappedValue.getter(v4, v5, &v7);
    outlined consume of Environment<Bool>.Content(v4, v5);
    if (v7 != 2 && (v7 & 1) == 0) {
      return 1;
    }
  }
  if (v1 == 2) {
    return 0;
  }
  return v1 & 1;
}

uint64_t partial apply for closure #1 in ListLabelStyle.Implementation.v6Layout.getter@<X0>(char a1@<W0>, void *a2@<X8>)
{
  return closure #1 in ListLabelStyle.Implementation.v6Layout.getter(a1, (_OWORD *)(v2 + 16), a2);
}

uint64_t static AdaptiveStack._makeView(view:inputs:)()
{
  return static View.makeDebuggableView(view:inputs:)();
}

uint64_t lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for _LayoutRoot<AnyLayout>();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for _LayoutRoot<AnyLayout>()
{
  if (!lazy cache variable for type metadata for _LayoutRoot<AnyLayout>)
  {
    lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout();
    unint64_t v0 = type metadata accessor for _LayoutRoot();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _LayoutRoot<AnyLayout>);
    }
  }
}

uint64_t closure #1 in static AdaptiveStack._makeView(view:inputs:)(uint64_t a1)
{
  _OWORD v5[2] = type metadata accessor for AdaptiveStack();
  type metadata accessor for _LayoutRoot<AnyLayout>();
  lazy protocol witness table accessor for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>((unint64_t *)&lazy protocol witness table cache variable for type _LayoutRoot<AnyLayout> and conformance _LayoutRoot<A>);
  uint64_t v6 = type metadata accessor for _VariadicView.Tree();
  uint64_t v2 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v5, v6, MEMORY[0x1E4FBC248], v2, MEMORY[0x1E4FBC278], v3);
  return v7;
}

uint64_t AccessibilityAdaptiveStack.body.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = type metadata accessor for AdaptiveStack();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v18[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = &v18[-v9];
  long long v11 = v1[1];
  long long v12 = v1[3];
  long long v28 = v1[2];
  v29[0] = v12;
  *(_OWORD *)((char *)v29 + 9) = *(long long *)((char *)v1 + 57);
  long long v13 = v1[1];
  long long v26 = *v1;
  long long v27 = v13;
  long long v14 = v1[3];
  long long v24 = v28;
  v25[0] = v14;
  *(_OWORD *)((char *)v25 + 9) = *(long long *)((char *)v1 + 57);
  long long v22 = v26;
  long long v23 = v11;
  char v15 = AccessibilityAdaptiveStack.axis.getter();
  uint64_t v19 = v2;
  uint64_t v20 = v3;
  char v21 = &v26;
  AdaptiveStack.init(axis:alignment:spacing:content:)(v15 & 1, v27, *((uint64_t *)&v27 + 1), v28, BYTE8(v28), (void (*)(uint64_t))partial apply for closure #1 in AccessibilityAdaptiveStack.body.getter);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  unint64_t v16 = *(void (**)(unsigned char *, uint64_t))(v5 + 8);
  v16(v7, v4);
  static ViewBuilder.buildExpression<A>(_:)(v10);
  return ((uint64_t (*)(unsigned char *, uint64_t))v16)(v10, v4);
}

uint64_t specialized __DictionaryDecoder.expectNonNull<A>(_:)()
{
  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBB808];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC450];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC0F8];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC098];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBB550];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBB390];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC150];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC1C8];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC358];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC4C0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBC538];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBB470];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBB3D0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

{
  uint64_t v0;
  uint64_t result;
  uint64_t v2;
  void *v3;
  void *v4;
  void *v5;
  unsigned char v6[32];

  swift_beginAccess();
  _DictionaryDecodingStorage.topContainer.getter(*(void *)(v0 + 16), (uint64_t)v6);
  type metadata accessor for NSObject(0, &lazy cache variable for type metadata for NSNull);
  uint64_t result = swift_dynamicCast();
  if (result)
  {

    uint64_t v2 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v4 = v3;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v4 = MEMORY[0x1E4FBB1A0];
    swift_beginAccess();
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(41);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104))(v4, *MEMORY[0x1E4FBBA80], v2);
    return swift_willThrow();
  }
  return result;
}

uint64_t _DictionaryKeyedDecodingContainer.nestedUnkeyedContainer(forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X8>)
{
  uint64_t v56 = a4;
  uint64_t v59 = a3;
  uint64_t v53 = a7;
  uint64_t v10 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  long long v12 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  unint64_t v16 = (char *)&v53 - v15;
  char v17 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  long long v55 = v18;
  uint64_t v58 = v17;
  ((void (*)(char *, double))v17)((char *)&v53 - v15, v14);
  uint64_t v19 = (uint64_t *)(a2 + 136);
  swift_beginAccess();
  uint64_t v20 = *(void **)(a2 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v54 = a2;
  *(void *)(a2 + 136) = v20;
  uint64_t v22 = a6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v20 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v20[2] + 1, 1, v20);
    *uint64_t v19 = (uint64_t)v20;
  }
  unint64_t v24 = v20[2];
  unint64_t v23 = v20[3];
  if (v24 >= v23 >> 1) {
    *uint64_t v19 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v23 > 1), v24 + 1, 1, v20);
  }
  v58(v12, v16, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, (uint64_t)v12, v19, a5, v22);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v16, a5);
  swift_endAccess();
  uint64_t v25 = v55;
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v28 = v59;
  if (*(void *)(v59 + 16))
  {
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    if (v30)
    {
      outlined init with copy of Any(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v63);
    }
    else
    {
      long long v63 = 0u;
      long long v64 = 0u;
    }
  }
  else
  {
    long long v63 = 0u;
    long long v64 = 0u;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v64 + 1))
  {
    outlined init with take of Any(&v63, &v60);
    outlined init with copy of Any((uint64_t)&v60, (uint64_t)&v63);
    _sypSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for [Any], MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB320]);
    if (swift_dynamicCast())
    {
      uint64_t v31 = v65;
      char v33 = v53;
      uint64_t v32 = v54;
      uint64_t v34 = *(void *)(v54 + 136);
      v53[3] = &unk_1ED457BB0;
      v33[4] = lazy protocol witness table accessor for type _JSONUnkeyedDecodingContainer and conformance _JSONUnkeyedDecodingContainer();
      uint64_t v35 = (void *)swift_allocObject();
      *char v33 = v35;
      v35[2] = v32;
      v35[3] = v31;
      unsigned char v35[4] = v34;
      v35[5] = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
      return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v32);
    }
    uint64_t v50 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v52 = v51;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v52 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v50 - 8) + 104))(v52, *MEMORY[0x1E4FBBA70], v50);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    uint64_t v45 = v54;
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v63);
    uint64_t v37 = type metadata accessor for DecodingError();
    uint64_t v57 = swift_allocError();
    uint64_t v39 = v38;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    uint64_t v56 = (char *)v39 + *(int *)(v40 + 48);
    v39[3] = a5;
    v39[4] = v22;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v39);
    uint64_t v42 = (void (*)(uint64_t *, uint64_t, uint64_t))v58;
    v58((char *)boxed_opaque_existential_1, v25, a5);
    *(void *)&long long v60 = 0;
    *((void *)&v60 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(64);
    long long v63 = v60;
    v43._object = (void *)0x8000000188330B70;
    v43._countAndFlagsBits = 0xD00000000000003ELL;
    String.append(_:)(v43);
    uint64_t v61 = a5;
    uint64_t v62 = v22;
    Swift::String v44 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v60);
    v42(v44, (uint64_t)v25, a5);
    uint64_t v45 = v54;
    uint64_t v46 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v60, v54);
    uint64_t v48 = v47;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v60);
    v49._countAndFlagsBits = v46;
    v49._object = v48;
    String.append(_:)(v49);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v37 - 8) + 104))(v39, *MEMORY[0x1E4FBBA68], v37);
    swift_willThrow();
  }
  return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v45);
}

void *initializeWithCopy for _TaskValueModifier.InnerModifier.TaskState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  uint64_t v7 = ((unint64_t)a1 + v6 + 8) & ~v6;
  uint64_t v8 = ((unint64_t)a2 + v6 + 8) & ~v6;
  swift_retain();
  v5(v7, v8, v4);
  return a1;
}

uint64_t destroy for _TaskValueModifier.InnerModifier.TaskState(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t type metadata accessor for AdaptiveStack()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t _DictionaryKeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v58 = a8;
  uint64_t v62 = a6;
  uint64_t v63 = a4;
  uint64_t v65 = a3;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  double v14 = (char *)v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)v57 - v17;
  long long v60 = *(void (**)(char *, double))(v12 + 16);
  uint64_t v61 = v19;
  v60((char *)v57 - v17, v16);
  uint64_t v20 = (uint64_t *)(a2 + 136);
  swift_beginAccess();
  char v21 = *(void **)(a2 + 136);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v64 = a2;
  *(void *)(a2 + 136) = v21;
  uint64_t v23 = a7;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    char v21 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v21[2] + 1, 1, v21);
    *uint64_t v20 = (uint64_t)v21;
  }
  unint64_t v25 = v21[2];
  unint64_t v24 = v21[3];
  if (v25 >= v24 >> 1) {
    *uint64_t v20 = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((void *)(v24 > 1), v25 + 1, 1, v21);
  }
  uint64_t v66 = a9;
  ((void (*)(char *, char *, uint64_t))v60)(v14, v18, a5);
  specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, (uint64_t)v14, v20, a5, v23);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v18, a5);
  swift_endAccess();
  uint64_t v26 = dispatch thunk of CodingKey.stringValue.getter();
  uint64_t v28 = v65;
  if (*(void *)(v65 + 16))
  {
    unint64_t v29 = specialized __RawDictionaryStorage.find<A>(_:)(v26, v27);
    uint64_t v30 = v64;
    if (v31)
    {
      outlined init with copy of Any(*(void *)(v28 + 56) + 32 * v29, (uint64_t)&v70);
    }
    else
    {
      long long v70 = 0u;
      long long v71 = 0u;
    }
  }
  else
  {
    long long v70 = 0u;
    long long v71 = 0u;
    uint64_t v30 = v64;
  }
  swift_bridgeObjectRelease();
  if (*((void *)&v71 + 1))
  {
    outlined init with take of Any(&v70, &v67);
    outlined init with copy of Any((uint64_t)&v67, (uint64_t)&v70);
    type metadata accessor for [String : Any](0, (unint64_t *)&lazy cache variable for type metadata for [String : Any], MEMORY[0x1E4FBAEA0]);
    if (swift_dynamicCast())
    {
      uint64_t v32 = v72;
      uint64_t v33 = swift_retain();
      uint64_t v34 = specialized _DictionaryKeyedDecodingContainer.init(referencing:wrapping:)(v33, v32);
      uint64_t v36 = v35;
      uint64_t v38 = v37;
      swift_release();
      *(void *)&long long v70 = v34;
      *((void *)&v70 + 1) = v36;
      *(void *)&long long v71 = v38;
      type metadata accessor for _DictionaryKeyedDecodingContainer();
      swift_getWitnessTable();
      KeyedDecodingContainer.init<A>(_:)();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
      return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
    }
    uint64_t v54 = type metadata accessor for DecodingError();
    swift_allocError();
    uint64_t v56 = v55;
    type metadata accessor for (@thick Any.Type, DecodingError.Context)();
    *uint64_t v56 = type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for NSNumber);
    swift_bridgeObjectRetain();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    (*(void (**)(uint64_t *, void, uint64_t))(*(void *)(v54 - 8) + 104))(v56, *MEMORY[0x1E4FBBA70], v54);
    swift_willThrow();
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
  }
  else
  {
    outlined destroy of Any?((uint64_t)&v70);
    uint64_t v58 = type metadata accessor for DecodingError();
    uint64_t v59 = swift_allocError();
    uint64_t v41 = v40;
    type metadata accessor for (CodingKey, DecodingError.Context)();
    v57[1] = (char *)v41 + *(int *)(v42 + 48);
    v41[3] = a5;
    v41[4] = v23;
    boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1(v41);
    Swift::String v44 = (void (*)(uint64_t *, uint64_t, uint64_t))v60;
    uint64_t v45 = v61;
    ((void (*)(uint64_t *, uint64_t, uint64_t))v60)(boxed_opaque_existential_1, v61, a5);
    *(void *)&long long v67 = 0;
    *((void *)&v67 + 1) = 0xE000000000000000;
    swift_bridgeObjectRetain();
    _StringGuts.grow(_:)(42);
    swift_bridgeObjectRelease();
    *(void *)&long long v70 = 0x6720746F6E6E6143;
    *((void *)&v70 + 1) = 0xEB00000000207465;
    type metadata accessor for KeyedDecodingContainer();
    v46._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v46);
    swift_bridgeObjectRelease();
    v47._object = (void *)0x8000000188330C00;
    v47._countAndFlagsBits = 0xD00000000000001BLL;
    String.append(_:)(v47);
    uint64_t v68 = a5;
    uint64_t v69 = v23;
    uint64_t v48 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v67);
    v44(v48, v45, a5);
    uint64_t v49 = _DictionaryKeyedDecodingContainer._errorDescription(of:)(&v67, v64);
    uint64_t v51 = v50;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v67);
    v52._countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    DecodingError.Context.init(codingPath:debugDescription:underlyingError:)();
    uint64_t v53 = v41;
    uint64_t v30 = v64;
    (*(void (**)(uint64_t *, void))(*(void *)(v58 - 8) + 104))(v53, *MEMORY[0x1E4FBBA68]);
    swift_willThrow();
  }
  return $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(v30);
}

uint64_t AccessibilityAdaptiveStack.axis.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 41);
  if (v1 == 2) {
    char v2 = AccessibilityAdaptiveStack.shouldUseVerticalLayout.getter();
  }
  else {
    char v2 = v1 & 1;
  }
  return v2 & 1;
}

unint64_t lazy protocol witness table accessor for type HStackLayout and conformance HStackLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout;
  if (!lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HStackLayout and conformance HStackLayout);
  }
  return result;
}

BOOL specialized static DisplayList.HostedViewState.Key.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4 = type metadata accessor for UUID();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for (UUID?, UUID?)();
  uint64_t v9 = v8;
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  _s10Foundation4UUIDVSgMaTm_1(0, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v12 - 8);
  double v14 = &v38[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = &v38[-v16];
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = &v38[-v19];
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  uint64_t v21 = type metadata accessor for DisplayList.HostedViewState.Key(0);
  uint64_t v40 = v4;
  uint64_t v41 = v5;
  uint64_t v22 = v21;
  uint64_t v23 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27990];
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)a1 + *(int *)(v21 + 24), (uint64_t)v20, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)a2 + *(int *)(v22 + 24), (uint64_t)v17, &lazy cache variable for type metadata for UUID?, v23);
  uint64_t v24 = (uint64_t)&v11[*(int *)(v9 + 48)];
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v20, (uint64_t)v11, &lazy cache variable for type metadata for UUID?, v23);
  unint64_t v25 = v23;
  uint64_t v26 = v40;
  uint64_t v27 = v41;
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v17, v24, &lazy cache variable for type metadata for UUID?, v25);
  uint64_t v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v28((uint64_t)v11, 1, v26) == 1)
  {
    uint64_t v29 = MEMORY[0x1E4F27990];
    uint64_t v30 = MEMORY[0x1E4FBB718];
    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for UUID?, v29, v30, (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
    if (v28(v24, 1, v26) == 1)
    {
      outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
      return 1;
    }
    goto LABEL_8;
  }
  outlined init with copy of DisplayList.ArchiveIDs?((uint64_t)v11, (uint64_t)v14, &lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990]);
  if (v28(v24, 1, v26) == 1)
  {
    uint64_t v31 = MEMORY[0x1E4F27990];
    uint64_t v32 = MEMORY[0x1E4FBB718];
    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
    outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for UUID?, v31, v32, (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
    (*(void (**)(unsigned char *, uint64_t))(v41 + 8))(v14, v26);
LABEL_8:
    outlined destroy of DisplayList.HostedViewState.Key((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (UUID?, UUID?));
    return 0;
  }
  uint64_t v33 = v41;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(v41 + 32))(v7, v24, v26);
  lazy protocol witness table accessor for type UUID and conformance UUID(&lazy protocol witness table cache variable for type UUID and conformance UUID, MEMORY[0x1E4F27990]);
  int v39 = dispatch thunk of static Equatable.== infix(_:_:)();
  uint64_t v34 = *(void (**)(unsigned char *, uint64_t))(v33 + 8);
  v34(v7, v26);
  uint64_t v35 = MEMORY[0x1E4F27990];
  uint64_t v36 = MEMORY[0x1E4FBB718];
  outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v17, (uint64_t)&lazy cache variable for type metadata for UUID?, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
  outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v20, (uint64_t)&lazy cache variable for type metadata for UUID?, v35, v36, (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
  v34(v14, v26);
  outlined destroy of DisplayList.ArchiveIDs?((uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for UUID?, v35, v36, (uint64_t (*)(void))_s10Foundation4UUIDVSgMaTm_1);
  return (v39 & 1) != 0;
}

uint64_t outlined destroy of DisplayList.HostedViewState.Key(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t $defer #1 <A>() in _DictionaryKeyedDecodingContainer.decode(_:forKey:)(uint64_t a1)
{
  char v2 = (void *)(a1 + 136);
  swift_beginAccess();
  uint64_t v3 = *(void **)(a1 + 136);
  if (!v3[2])
  {
    __break(1u);
LABEL_6:
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v3);
    uint64_t v3 = (void *)result;
    uint64_t v5 = *(void *)(result + 16);
    if (v5) {
      goto LABEL_4;
    }
    goto LABEL_7;
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0) {
    goto LABEL_6;
  }
  uint64_t v5 = v3[2];
  if (v5)
  {
LABEL_4:
    uint64_t v6 = v5 - 1;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v3[5 * v5 - 1]);
    v3[2] = v6;
    *char v2 = v3;
    return swift_endAccess();
  }
LABEL_7:
  __break(1u);
  return result;
}

void type metadata accessor for _DictionaryStorage<String, [Any]>()
{
  if (!lazy cache variable for type metadata for _DictionaryStorage<String, [Any]>)
  {
    type metadata accessor for FocusItem?(255, (unint64_t *)&lazy cache variable for type metadata for [Any], MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for _DictionaryStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DictionaryStorage<String, [Any]>);
    }
  }
}

void partial apply for closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void *)(v0 + 16));
}

void closure #5 in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t a1)
{
  id v2 = objc_msgSend(self, sel_sharedApplication);
  objc_msgSend(v2, sel__saveRestorationUserActivityStateForScene_, a1);
}

uint64_t partial apply for closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:)()
{
  return closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t closure #2 in AppSceneDelegate.scene(_:willConnectTo:options:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 56);
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v5 = *(void *)(result + 64);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = v2 + 40;
    do
    {
      specialized _do #1 <A>(_:) in handleConnectionOptionsCallbacks #1 (_:) in AppSceneDelegate.scene(_:willConnectTo:options:)(*(void *)(v6 - 8), a2, v5, *(void *)(v6 - 8));
      v6 += 16;
      --v3;
    }
    while (v3);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t partial apply for closure #1 in UIHostingViewBase.requestUpdate(after:)()
{
  return closure #1 in UIHostingViewBase.requestUpdate(after:)();
}

uint64_t closure #1 in UIHostingViewBase.requestUpdate(after:)()
{
  swift_beginAccess();
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    UIHostingViewBase.requestImmediateUpdate()();
    return swift_release();
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AnyLayout and conformance AnyLayout()
{
  unint64_t result = lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout;
  if (!lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AnyLayout and conformance AnyLayout);
  }
  return result;
}

uint64_t protocol witness for KeyedDecodingContainerProtocol.decode<A>(_:forKey:) in conformance _DictionaryKeyedDecodingContainer<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(uint64_t, uint64_t, void, void, void, void, uint64_t, void, uint64_t))
{
  return a7(a1, a2, *v7, v7[1], v7[2], *(void *)(a5 + 16), a3, *(void *)(a5 + 24), a4);
}

unint64_t instantiation function for generic protocol witness table for AccessibilityChildBehavior.Host(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type AccessibilityChildBehavior.Host and conformance AccessibilityChildBehavior.Host();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>();
    lazy protocol witness table accessor for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>;
  if (!lazy protocol witness table cache variable for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>)
  {
    type metadata accessor for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>> and conformance _CustomViewModifierHoverEffect<A>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>)
  {
    type metadata accessor for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<EmptyHoverEffect, _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>>);
    }
  }
}

void type metadata accessor for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>()
{
  if (!lazy cache variable for type metadata for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>)
  {
    type metadata accessor for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>();
    lazy protocol witness table accessor for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>();
    unint64_t v0 = type metadata accessor for _CustomViewModifierHoverEffect();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _CustomViewModifierHoverEffect<StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>>);
    }
  }
}

double static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)@<D0>(long long *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, double *a6@<X8>)
{
  void (*v17)(uint64_t *__return_ptr, unsigned char *, _OWORD *, double (*)@<D0>(uint64_t *@<X1>, double *@<X8>), uint64_t, uint64_t, uint64_t);
  double result;
  _OWORD v19[5];
  int v20;
  unsigned char v21[4];
  uint64_t v22;
  double v23;
  long long v24;
  long long v25;
  long long v26;
  long long v27;
  long long v28;
  uint64_t v29;

  long long v11 = a1[3];
  uint64_t v26 = a1[2];
  uint64_t v27 = v11;
  uint64_t v28 = a1[4];
  uint64_t v29 = *((void *)a1 + 10);
  long long v12 = a1[1];
  uint64_t v24 = *a1;
  unint64_t v25 = v12;
  type metadata accessor for _CustomViewModifierHoverEffect();
  type metadata accessor for _GraphValue();
  _GraphValue.subscript.getter();
  v19[2] = v26;
  v19[3] = v27;
  void v19[4] = v28;
  uint64_t v20 = v29;
  v19[0] = v24;
  v19[1] = v25;
  uint64_t v13 = swift_allocObject();
  long long v14 = v27;
  *(_OWORD *)(v13 + 48) = v26;
  *(_OWORD *)(v13 + 64) = v14;
  *(_OWORD *)(v13 + 80) = v28;
  uint64_t v15 = v29;
  long long v16 = v25;
  *(_OWORD *)(v13 + 16) = v24;
  *(_OWORD *)(v13 + 32) = v16;
  *(void *)(v13 + 96) = v15;
  *(void *)(v13 + 104) = a2;
  *(void *)(v13 + 112) = a3;
  uint64_t v17 = *(void (**)(uint64_t *__return_ptr, unsigned char *, _OWORD *, double (*)@<D0>(uint64_t *@<X1>, double *@<X8>), uint64_t, uint64_t, uint64_t))(a5 + 24);
  outlined retain of _ViewInputs((uint64_t)&v24);
  outlined retain of _ViewInputs((uint64_t)&v24);
  swift_retain();
  v17(&v22, v21, v19, partial apply for closure #2 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:), v13, a4, a5);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *(void *)a6 = v22;
  unint64_t result = v23;
  a6[1] = v23;
  return result;
}

uint64_t closure #1 in static _CustomViewModifierHoverEffect._makeCustomHoverEffect(effect:inputs:body:)(uint64_t a1, uint64_t a2)
{
  void v7[2] = type metadata accessor for _CustomViewModifierHoverEffect();
  void v7[3] = a2;
  uint64_t v4 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(a1, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v7, a2, MEMORY[0x1E4FBC248], v4, MEMORY[0x1E4FBC278], v5);
  return v7[5];
}

uint64_t type metadata accessor for _CustomViewModifierHoverEffect()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>)
  {
    lazy protocol witness table accessor for type SupportsHoverEffects and conformance SupportsHoverEffects();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier>();
    lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<SupportsHoverEffects, HoverEffectContainerModifier, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier;
  if (!lazy protocol witness table cache variable for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HoverEffectContainerModifier and conformance HoverEffectContainerModifier);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SupportsHoverEffects and conformance SupportsHoverEffects()
{
  unint64_t result = lazy protocol witness table cache variable for type SupportsHoverEffects and conformance SupportsHoverEffects;
  if (!lazy protocol witness table cache variable for type SupportsHoverEffects and conformance SupportsHoverEffects)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SupportsHoverEffects and conformance SupportsHoverEffects);
  }
  return result;
}

uint64_t ScrollViewReader.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject();
  unsigned char v8[2] = a3;
  v8[3] = a4;
  v8[4] = a1;
  _OWORD v8[5] = a2;
  swift_retain();
  uint64_t v9 = MEMORY[0x1E4F40CB8];
  static PreferenceKey._delay<A>(_:)();
  swift_release();
  v11[0] = v12;
  v11[1] = v13;
  type metadata accessor for _DelayedPreferenceView();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  swift_release();
  uint64_t v12 = v9;
  uint64_t v13 = a3;
  static ViewBuilder.buildExpression<A>(_:)(&v12);
  return swift_release();
}

uint64_t partial apply for implicit closure #8 in static SystemScrollView._makeView(view:inputs:)()
{
  return implicit closure #8 in static SystemScrollView._makeView(view:inputs:)();
}

uint64_t associated type witness table accessor for View.Body : View in ScrollViewReader<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance AccessibilityContainerModifier@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  int v4 = *a1;
  long long v5 = *(_OWORD *)(a2 + 48);
  unsigned char v8[2] = *(_OWORD *)(a2 + 32);
  v8[3] = v5;
  v8[4] = *(_OWORD *)(a2 + 64);
  int v9 = *(_DWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 16);
  v8[0] = *(_OWORD *)a2;
  v8[1] = v6;
  return specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)(v4, (uint64_t)v8, a3, a4);
}

uint64_t specialized static AccessibilityViewModifier._makeView(modifier:inputs:body:)@<X0>(int a1@<W0>, uint64_t a2@<X1>, void (*a3)(long long *__return_ptr, uint64_t, _OWORD *)@<X2>, void *a4@<X8>)
{
  uint64_t v101 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = *(void *)(a2 + 48);
  int v7 = *(_DWORD *)(a2 + 56);
  *(void *)&long long v96 = v6;
  DWORD2(v96) = v7;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v83 = *(void *)a2;
    *(_OWORD *)uint64_t v93 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v93[12] = *(_OWORD *)(a2 + 20);
    int v8 = *(_DWORD *)(a2 + 36);
    uint64_t v82 = *(void *)(a2 + 40);
    long long v9 = *(_OWORD *)(a2 + 48);
    long long v10 = *(_OWORD *)(a2 + 64);
    long long v98 = *(_OWORD *)(a2 + 32);
    v99[0] = v9;
    v99[1] = v10;
    int v100 = *(_DWORD *)(a2 + 80);
    long long v11 = *(_OWORD *)(a2 + 16);
    long long v96 = *(_OWORD *)a2;
    long long v97 = v11;
    if ((v8 & 0x20) != 0)
    {
      *(void *)&v94[0] = v6;
      DWORD2(v94[0]) = v7;
      outlined retain of _ViewInputs(a2);
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        char v25 = v8;
        if ((v8 & 0x40) != 0)
        {
          char v25 = v8 & 0xBF;
          DWORD1(v98) = v8 & 0xFFFFFFBF;
        }
        if (v25 < 0) {
          PreferenceKeys.add(_:)();
        }
      }
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    if ((v8 & 0x10) != 0)
    {
      long long v26 = *(_OWORD *)(a2 + 32);
      long long v27 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v27;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v28 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v28;
      v94[2] = v26;
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    *(void *)&v94[0] = v96;
    DWORD2(v94[0]) = DWORD2(v96);
    v94[1] = v97;
    LODWORD(v94[2]) = v98;
    DWORD1(v94[2]) = DWORD1(v98) & 0xFFFFFFBF | (((DWORD1(v98) >> 5) & 1) << 6);
    *((void *)&v94[2] + 1) = *((void *)&v98 + 1);
    *(void *)&v95[0] = *(void *)&v99[0];
    *(_OWORD *)((char *)v95 + 8) = *(_OWORD *)((char *)v99 + 8);
    *((void *)&v95[1] + 1) = *((void *)&v99[1] + 1);
    LODWORD(v95[2]) = v100;
    swift_retain_n();
    swift_retain_n();
    swift_bridgeObjectRetain_n();
    uint64_t v29 = swift_bridgeObjectRetain_n();
    a3(&v92, v29, v94);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if ((v8 & 0x10) != 0)
    {
      *(void *)&v94[0] = v6;
      DWORD2(v94[0]) = v7;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v94[0] = v92;
        uint64_t v30 = _ViewOutputs.subscript.getter();
        unsigned int v31 = *MEMORY[0x1E4F4E7A0];
        unsigned int v80 = *MEMORY[0x1E4F4E7A0];
        if ((v30 & 0x100000000) == 0) {
          unsigned int v31 = v30;
        }
      }
      else
      {
        unsigned int v31 = *MEMORY[0x1E4F4E7A0];
        unsigned int v80 = *MEMORY[0x1E4F4E7A0];
      }
      unsigned int v81 = v31;
      _DisplayList_Identity.init()();
      int v79 = v94[0];
      long long v50 = *(_OWORD *)(a2 + 32);
      long long v51 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v51;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v52 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v52;
      v94[2] = v50;
      LODWORD(v90) = v79;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(void *)&v94[0] = v83;
      *(_OWORD *)((char *)v94 + 8) = *(_OWORD *)v93;
      *(_OWORD *)((char *)&v94[1] + 4) = *(_OWORD *)&v93[12];
      DWORD1(v94[2]) = v8;
      *((void *)&v94[2] + 1) = v82;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v94[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityContainerModifier>, (uint64_t)&type metadata for AccessibilityContainerModifier, MEMORY[0x1E4F3F590]);
      int v78 = _GraphValue.value.getter();
      long long v53 = *(_OWORD *)(a2 + 32);
      long long v54 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v54;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v55 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v55;
      v94[2] = v53;
      unsigned int v77 = _ViewInputs.animatedSize()();
      long long v56 = *(_OWORD *)(a2 + 32);
      long long v57 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v57;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v58 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v58;
      v94[2] = v56;
      unsigned int v76 = _ViewInputs.animatedPosition()();
      long long v59 = *(_OWORD *)(a2 + 32);
      long long v60 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v60;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v61 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v61;
      v94[2] = v59;
      unsigned int v62 = _ViewInputs.containerPosition.getter();
      long long v63 = *(_OWORD *)(a2 + 32);
      long long v64 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v64;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v65 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v65;
      v94[2] = v63;
      unsigned int v66 = _ViewInputs.environment.getter();
      uint64_t v67 = v92;
      unsigned int v68 = DWORD2(v92);
      unsigned int v69 = HIDWORD(v92);
      v94[0] = v92;
      uint64_t v70 = _ViewOutputs.subscript.getter();
      *(void *)&v94[0] = v67;
      if ((v70 & 0x100000000) != 0) {
        unsigned int v71 = v80;
      }
      else {
        unsigned int v71 = v70;
      }
      *((void *)&v94[0] + 1) = __PAIR64__(v69, v68);
      uint64_t v72 = _ViewOutputs.subscript.getter();
      LODWORD(v94[0]) = v79;
      if ((v72 & 0x100000000) != 0) {
        unsigned int v73 = v80;
      }
      else {
        unsigned int v73 = v72;
      }
      BYTE4(v94[0]) = v91 & 1;
      *(_OWORD *)((char *)v94 + 8) = v90;
      BYTE8(v94[1]) = v89;
      HIDWORD(v94[1]) = v78;
      *(void *)&v94[2] = __PAIR64__(v76, v77);
      *((void *)&v94[2] + 1) = __PAIR64__(v66, v62);
      *(void *)&v95[0] = __PAIR64__(v81, v71);
      DWORD2(v95[0]) = v73;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, (unint64_t *)&lazy cache variable for type metadata for DisplayListTransform<AccessibilityContainerModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityContainerModifier and conformance AccessibilityContainerModifier, (uint64_t)&type metadata for AccessibilityContainerModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityContainerModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v94[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    unsigned int v74 = specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v92, *((unint64_t *)&v92 + 1), 0);
    LOBYTE(v94[0]) = 0;
    uint64_t v75 = v74;
    _ViewOutputs.subscript.setter();
    LOBYTE(v94[0]) = 1;
    specialized static ViewModifier.makeAccessibilityGeometryTransform(for:kind:inputs:outputs:)(v75, 0x100000000, a2);
    LOBYTE(v94[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v48 = a4;
    *a4 = v92;
    uint64_t v49 = *((void *)&v92 + 1);
  }
  else
  {
    *(void *)&long long v96 = v6;
    DWORD2(v96) = v7;
    char v12 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
    unsigned int v13 = 0;
    if (v12)
    {
      *(void *)&long long v96 = v6;
      DWORD2(v96) = v7;
      char v14 = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
      unsigned int v13 = 0;
      if (v14)
      {
        outlined retain of _ViewInputs(a2);
        lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
        PropertyList.subscript.getter();
        outlined release of _ViewInputs(a2);
        unsigned int v13 = (v96 >> 4) & 1;
      }
    }
    int v85 = v7;
    uint64_t v87 = v6;
    uint64_t v15 = *(void *)a2;
    int v16 = *(_DWORD *)(a2 + 8);
    uint64_t v17 = *(void *)(a2 + 16);
    uint64_t v18 = *(void *)(a2 + 24);
    int v19 = *(_DWORD *)(a2 + 32);
    unsigned int v20 = *(_DWORD *)(a2 + 36);
    uint64_t v21 = *(void *)(a2 + 40);
    long long v22 = *(_OWORD *)(a2 + 48);
    long long v23 = *(_OWORD *)(a2 + 64);
    long long v98 = *(_OWORD *)(a2 + 32);
    v99[0] = v22;
    v99[1] = v23;
    int v100 = *(_DWORD *)(a2 + 80);
    long long v24 = *(_OWORD *)(a2 + 16);
    long long v96 = *(_OWORD *)a2;
    long long v97 = v24;
    unsigned int v84 = v13;
    if (v13)
    {
      outlined retain of _ViewInputs(a2);
      lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
      PropertyList.subscript.getter();
      LODWORD(v94[0]) &= ~0x10u;
      PropertyList.subscript.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(void *)&v94[0] = v15;
    DWORD2(v94[0]) = v16;
    *(void *)&v94[1] = v17;
    *((void *)&v94[1] + 1) = v18;
    LODWORD(v94[2]) = v19;
    DWORD1(v94[2]) = v20 & 0xFFFFFFBF | (((v20 >> 5) & 1) << 6);
    *((void *)&v94[2] + 1) = v21;
    uint64_t v32 = v87;
    *(void *)&v95[0] = v87;
    DWORD2(v95[0]) = v85;
    *(_OWORD *)((char *)v95 + 12) = *(_OWORD *)(a2 + 60);
    *(void *)((char *)&v95[1] + 12) = *(void *)(a2 + 76);
    outlined retain of _ViewInputs(a2);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v33 = swift_bridgeObjectRetain();
    a3((long long *)v93, v33, v94);
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease_n();
    swift_release_n();
    swift_release_n();
    if (v84)
    {
      v94[0] = *(_OWORD *)v93;
      _ViewOutputs.subscript.getter();
      long long v34 = *(_OWORD *)(a2 + 32);
      long long v35 = *(_OWORD *)(a2 + 64);
      v95[0] = *(_OWORD *)(a2 + 48);
      v95[1] = v35;
      LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
      long long v36 = *(_OWORD *)(a2 + 16);
      v94[0] = *(_OWORD *)a2;
      v94[1] = v36;
      v94[2] = v34;
      uint64_t v37 = _ViewInputs.environment.getter();
      MEMORY[0x1F4188790](v37);
      *(void *)&v94[0] = v87;
      DWORD2(v94[0]) = v85;
      MEMORY[0x1F4188790](v38);
      swift_bridgeObjectRetain();
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      uint64_t v32 = v87;
    }
    *(void *)&v94[0] = v32;
    DWORD2(v94[0]) = v85;
    if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
    {
      outlined retain of _ViewInputs(a2);
      lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      if ((v94[0] & 0x80) != 0)
      {
        v94[0] = *(_OWORD *)v93;
        uint64_t v39 = _ViewOutputs.subscript.getter();
        if ((v39 & 0x100000000) != 0) {
          unsigned int v40 = *MEMORY[0x1E4F4E7A0];
        }
        else {
          unsigned int v40 = v39;
        }
        long long v41 = *(_OWORD *)(a2 + 32);
        long long v42 = *(_OWORD *)(a2 + 64);
        v95[0] = *(_OWORD *)(a2 + 48);
        v95[1] = v42;
        LODWORD(v95[2]) = *(_DWORD *)(a2 + 80);
        long long v43 = *(_OWORD *)(a2 + 16);
        v94[0] = *(_OWORD *)a2;
        v94[1] = v43;
        v94[2] = v41;
        int v44 = _ViewInputs.environment.getter();
        type metadata accessor for PropertyList.Tracker();
        uint64_t v45 = PropertyList.Tracker.__allocating_init()();
        LODWORD(v94[0]) = v44;
        *((void *)&v94[0] + 1) = v45;
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
        unsigned int v46 = Attribute.init<A>(body:value:flags:update:)();
        swift_release();
        *(void *)&v94[0] = __PAIR64__(v46, v40);
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
        lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
        LODWORD(v94[0]) = Attribute.init<A>(body:value:flags:update:)();
        protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
        lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
        Attribute.init<A>(body:value:flags:update:)();
        _GraphValue.init(_:)();
        specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v93, a2);
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    uint64_t v48 = a4;
    *a4 = *(void *)v93;
    uint64_t v49 = *(void *)&v93[8];
  }
  v48[1] = v49;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  char v11;
  long long v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  long long v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v70;
  long long v71;
  char v72;
  long long v73;
  uint64_t v74;
  int v75;
  unsigned char v76[28];
  _OWORD v77[3];
  _OWORD v78[2];
  int v79;
  long long v80;
  _OWORD v81[2];
  _OWORD v82[2];
  int v83;
  uint64_t v84;

  unsigned int v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = *(void *)(a2 + 48);
  uint64_t v75 = *(_DWORD *)(a2 + 56);
  *(void *)&unsigned int v80 = *(void *)(a2 + 48);
  DWORD2(v80) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(_OWORD *)(a2 + 48);
    int v7 = *(_OWORD *)(a2 + 64);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v6;
    v82[1] = v7;
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    int v8 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v8;
    long long v9 = *(void *)a2;
    *(_OWORD *)unsigned int v76 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v76[12] = *(_OWORD *)(a2 + 20);
    long long v10 = *(_DWORD *)(a2 + 36);
    unsigned int v66 = *(void *)(a2 + 40);
    uint64_t v67 = v9;
    if ((v10 & 0x10) != 0)
    {
      long long v36 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v36;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v37 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v37;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(void *)&v77[0] = v80;
    DWORD2(v77[0]) = DWORD2(v80);
    *(void *)&v77[1] = *(void *)&v81[0];
    *(_OWORD *)((char *)&v77[1] + 8) = *(_OWORD *)((char *)v81 + 8);
    *((void *)&v77[2] + 1) = *((void *)&v81[1] + 1);
    *(void *)&v78[0] = *(void *)&v82[0];
    *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)((char *)v82 + 8);
    *((void *)&v78[1] + 1) = *((void *)&v82[1] + 1);
    int v79 = v83;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    a3(&v73, v38, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v77[0] = v73;
        uint64_t v39 = _ViewOutputs.subscript.getter();
        unsigned int v40 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
        if ((v39 & 0x100000000) == 0) {
          unsigned int v40 = v39;
        }
        long long v64 = v40;
      }
      else
      {
        long long v64 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      long long v63 = v77[0];
      long long v41 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v41;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v42 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v42;
      LODWORD(v71) = v63;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(void *)&v77[0] = v67;
      *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)v76;
      *(_OWORD *)((char *)&v77[1] + 4) = *(_OWORD *)&v76[12];
      DWORD1(v77[2]) = v10;
      *((void *)&v77[2] + 1) = v66;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v77[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableContextModifier>, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, MEMORY[0x1E4F3F590]);
      unsigned int v62 = _GraphValue.value.getter();
      long long v43 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v43;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v44 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v44;
      long long v61 = _ViewInputs.animatedSize()();
      uint64_t v45 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v45;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      unsigned int v46 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v46;
      long long v60 = _ViewInputs.animatedPosition()();
      Swift::String v47 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v47;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v48 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v48;
      uint64_t v49 = _ViewInputs.containerPosition.getter();
      long long v50 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v50;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v51 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v51;
      long long v52 = _ViewInputs.environment.getter();
      long long v53 = v73;
      long long v54 = DWORD2(v73);
      long long v55 = HIDWORD(v73);
      v77[0] = v73;
      long long v56 = _ViewOutputs.subscript.getter();
      *(void *)&v77[0] = v53;
      if ((v56 & 0x100000000) != 0) {
        long long v57 = v65;
      }
      else {
        long long v57 = v56;
      }
      *((void *)&v77[0] + 1) = __PAIR64__(v55, v54);
      long long v58 = _ViewOutputs.subscript.getter();
      LODWORD(v77[0]) = v63;
      if ((v58 & 0x100000000) != 0) {
        long long v59 = v65;
      }
      else {
        long long v59 = v58;
      }
      BYTE4(v77[0]) = v72 & 1;
      *(_OWORD *)((char *)v77 + 8) = v71;
      BYTE8(v77[1]) = v70;
      HIDWORD(v77[1]) = v62;
      *(void *)&v77[2] = __PAIR64__(v60, v61);
      *((void *)&v77[2] + 1) = __PAIR64__(v52, v49);
      *(void *)&v78[0] = __PAIR64__(v64, v57);
      DWORD2(v78[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableContextModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableContextModifier and conformance AccessibilityScrollableContextModifier, (uint64_t)&type metadata for AccessibilityScrollableContextModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableContextModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v77[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v73, *((unint64_t *)&v73 + 1), 0);
    LOBYTE(v77[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v34 = a4;
    *a4 = v73;
    long long v35 = *((void *)&v73 + 1);
    goto LABEL_32;
  }
  *(void *)&unsigned int v80 = v74;
  DWORD2(v80) = v75;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(void *)&unsigned int v80 = v74, DWORD2(v80) = v75, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    long long v11 = v80;
    char v12 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v12;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    unsigned int v13 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v77[0]) &= ~0x10u;
      char v14 = PropertyList.subscript.setter();
      uint64_t v15 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v15;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v16 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v16;
      a3((long long *)v76, v14, v77);
      v77[0] = *(_OWORD *)v76;
      _ViewOutputs.subscript.getter();
      uint64_t v17 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v17;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v18 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v18;
      int v19 = _ViewInputs.environment.getter();
      MEMORY[0x1F4188790](v19);
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      MEMORY[0x1F4188790](v20);
      outlined retain of [Text.Modifier]((uint64_t)&v74);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v21;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v22;
  }
  long long v23 = outlined retain of _ViewInputs(a2);
  long long v24 = *(_OWORD *)(a2 + 48);
  v77[2] = *(_OWORD *)(a2 + 32);
  v78[0] = v24;
  v78[1] = *(_OWORD *)(a2 + 64);
  int v79 = *(_DWORD *)(a2 + 80);
  char v25 = *(_OWORD *)(a2 + 16);
  v77[0] = *(_OWORD *)a2;
  v77[1] = v25;
  a3((long long *)v76, v23, v77);
LABEL_10:
  *(void *)&v77[0] = v74;
  DWORD2(v77[0]) = v75;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v77[0] & 0x80) != 0)
    {
      v77[0] = *(_OWORD *)v76;
      long long v26 = _ViewOutputs.subscript.getter();
      if ((v26 & 0x100000000) != 0) {
        long long v27 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        long long v27 = v26;
      }
      long long v28 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v28;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v29 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v29;
      uint64_t v30 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      unsigned int v31 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v77[0]) = v30;
      *((void *)&v77[0] + 1) = v31;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      uint64_t v32 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v77[0] = __PAIR64__(v32, v27);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v77[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v76, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v34 = a4;
  *a4 = *(void *)v76;
  long long v35 = *(void *)&v76[8];
LABEL_32:
  v34[1] = v35;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  char v11;
  long long v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  long long v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v70;
  long long v71;
  char v72;
  long long v73;
  uint64_t v74;
  int v75;
  unsigned char v76[28];
  _OWORD v77[3];
  _OWORD v78[2];
  int v79;
  long long v80;
  _OWORD v81[2];
  _OWORD v82[2];
  int v83;
  uint64_t v84;

  unsigned int v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = *(void *)(a2 + 48);
  uint64_t v75 = *(_DWORD *)(a2 + 56);
  *(void *)&unsigned int v80 = *(void *)(a2 + 48);
  DWORD2(v80) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(_OWORD *)(a2 + 48);
    int v7 = *(_OWORD *)(a2 + 64);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v6;
    v82[1] = v7;
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    int v8 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v8;
    long long v9 = *(void *)a2;
    *(_OWORD *)unsigned int v76 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v76[12] = *(_OWORD *)(a2 + 20);
    long long v10 = *(_DWORD *)(a2 + 36);
    unsigned int v66 = *(void *)(a2 + 40);
    uint64_t v67 = v9;
    if ((v10 & 0x10) != 0)
    {
      long long v36 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v36;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v37 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v37;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(void *)&v77[0] = v80;
    DWORD2(v77[0]) = DWORD2(v80);
    *(void *)&v77[1] = *(void *)&v81[0];
    *(_OWORD *)((char *)&v77[1] + 8) = *(_OWORD *)((char *)v81 + 8);
    *((void *)&v77[2] + 1) = *((void *)&v81[1] + 1);
    *(void *)&v78[0] = *(void *)&v82[0];
    *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)((char *)v82 + 8);
    *((void *)&v78[1] + 1) = *((void *)&v82[1] + 1);
    int v79 = v83;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    a3(&v73, v38, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v77[0] = v73;
        uint64_t v39 = _ViewOutputs.subscript.getter();
        unsigned int v40 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
        if ((v39 & 0x100000000) == 0) {
          unsigned int v40 = v39;
        }
        long long v64 = v40;
      }
      else
      {
        long long v64 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      long long v63 = v77[0];
      long long v41 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v41;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v42 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v42;
      LODWORD(v71) = v63;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(void *)&v77[0] = v67;
      *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)v76;
      *(_OWORD *)((char *)&v77[1] + 4) = *(_OWORD *)&v76[12];
      DWORD1(v77[2]) = v10;
      *((void *)&v77[2] + 1) = v66;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v77[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityScrollableModifier>, (uint64_t)&type metadata for AccessibilityScrollableModifier, MEMORY[0x1E4F3F590]);
      unsigned int v62 = _GraphValue.value.getter();
      long long v43 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v43;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v44 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v44;
      long long v61 = _ViewInputs.animatedSize()();
      uint64_t v45 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v45;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      unsigned int v46 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v46;
      long long v60 = _ViewInputs.animatedPosition()();
      Swift::String v47 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v47;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v48 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v48;
      uint64_t v49 = _ViewInputs.containerPosition.getter();
      long long v50 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v50;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v51 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v51;
      long long v52 = _ViewInputs.environment.getter();
      long long v53 = v73;
      long long v54 = DWORD2(v73);
      long long v55 = HIDWORD(v73);
      v77[0] = v73;
      long long v56 = _ViewOutputs.subscript.getter();
      *(void *)&v77[0] = v53;
      if ((v56 & 0x100000000) != 0) {
        long long v57 = v65;
      }
      else {
        long long v57 = v56;
      }
      *((void *)&v77[0] + 1) = __PAIR64__(v55, v54);
      long long v58 = _ViewOutputs.subscript.getter();
      LODWORD(v77[0]) = v63;
      if ((v58 & 0x100000000) != 0) {
        long long v59 = v65;
      }
      else {
        long long v59 = v58;
      }
      BYTE4(v77[0]) = v72 & 1;
      *(_OWORD *)((char *)v77 + 8) = v71;
      BYTE8(v77[1]) = v70;
      HIDWORD(v77[1]) = v62;
      *(void *)&v77[2] = __PAIR64__(v60, v61);
      *((void *)&v77[2] + 1) = __PAIR64__(v52, v49);
      *(void *)&v78[0] = __PAIR64__(v64, v57);
      DWORD2(v78[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityScrollableModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityScrollableModifier and conformance AccessibilityScrollableModifier, (uint64_t)&type metadata for AccessibilityScrollableModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityScrollableModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v77[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v73, *((unint64_t *)&v73 + 1), 0);
    LOBYTE(v77[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v34 = a4;
    *a4 = v73;
    long long v35 = *((void *)&v73 + 1);
    goto LABEL_32;
  }
  *(void *)&unsigned int v80 = v74;
  DWORD2(v80) = v75;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(void *)&unsigned int v80 = v74, DWORD2(v80) = v75, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    long long v11 = v80;
    char v12 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v12;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    unsigned int v13 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v77[0]) &= ~0x10u;
      char v14 = PropertyList.subscript.setter();
      uint64_t v15 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v15;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v16 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v16;
      a3((long long *)v76, v14, v77);
      v77[0] = *(_OWORD *)v76;
      _ViewOutputs.subscript.getter();
      uint64_t v17 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v17;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v18 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v18;
      int v19 = _ViewInputs.environment.getter();
      MEMORY[0x1F4188790](v19);
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      MEMORY[0x1F4188790](v20);
      outlined retain of [Text.Modifier]((uint64_t)&v74);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v21;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v22;
  }
  long long v23 = outlined retain of _ViewInputs(a2);
  long long v24 = *(_OWORD *)(a2 + 48);
  v77[2] = *(_OWORD *)(a2 + 32);
  v78[0] = v24;
  v78[1] = *(_OWORD *)(a2 + 64);
  int v79 = *(_DWORD *)(a2 + 80);
  char v25 = *(_OWORD *)(a2 + 16);
  v77[0] = *(_OWORD *)a2;
  v77[1] = v25;
  a3((long long *)v76, v23, v77);
LABEL_10:
  *(void *)&v77[0] = v74;
  DWORD2(v77[0]) = v75;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v77[0] & 0x80) != 0)
    {
      v77[0] = *(_OWORD *)v76;
      long long v26 = _ViewOutputs.subscript.getter();
      if ((v26 & 0x100000000) != 0) {
        long long v27 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        long long v27 = v26;
      }
      long long v28 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v28;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v29 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v29;
      uint64_t v30 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      unsigned int v31 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v77[0]) = v30;
      *((void *)&v77[0] + 1) = v31;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      uint64_t v32 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v77[0] = __PAIR64__(v32, v27);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v77[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v76, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v34 = a4;
  *a4 = *(void *)v76;
  long long v35 = *(void *)&v76[8];
LABEL_32:
  v34[1] = v35;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  char v11;
  long long v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  long long v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v70;
  long long v71;
  char v72;
  long long v73;
  uint64_t v74;
  int v75;
  unsigned char v76[28];
  _OWORD v77[3];
  _OWORD v78[2];
  int v79;
  long long v80;
  _OWORD v81[2];
  _OWORD v82[2];
  int v83;
  uint64_t v84;

  unsigned int v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = *(void *)(a2 + 48);
  uint64_t v75 = *(_DWORD *)(a2 + 56);
  *(void *)&unsigned int v80 = *(void *)(a2 + 48);
  DWORD2(v80) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(_OWORD *)(a2 + 48);
    int v7 = *(_OWORD *)(a2 + 64);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v6;
    v82[1] = v7;
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    int v8 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v8;
    long long v9 = *(void *)a2;
    *(_OWORD *)unsigned int v76 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v76[12] = *(_OWORD *)(a2 + 20);
    long long v10 = *(_DWORD *)(a2 + 36);
    unsigned int v66 = *(void *)(a2 + 40);
    uint64_t v67 = v9;
    if ((v10 & 0x10) != 0)
    {
      long long v36 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v36;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v37 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v37;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(void *)&v77[0] = v80;
    DWORD2(v77[0]) = DWORD2(v80);
    *(void *)&v77[1] = *(void *)&v81[0];
    *(_OWORD *)((char *)&v77[1] + 8) = *(_OWORD *)((char *)v81 + 8);
    *((void *)&v77[2] + 1) = *((void *)&v81[1] + 1);
    *(void *)&v78[0] = *(void *)&v82[0];
    *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)((char *)v82 + 8);
    *((void *)&v78[1] + 1) = *((void *)&v82[1] + 1);
    int v79 = v83;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    a3(&v73, v38, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v77[0] = v73;
        uint64_t v39 = _ViewOutputs.subscript.getter();
        unsigned int v40 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
        if ((v39 & 0x100000000) == 0) {
          unsigned int v40 = v39;
        }
        long long v64 = v40;
      }
      else
      {
        long long v64 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      long long v63 = v77[0];
      long long v41 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v41;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v42 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v42;
      LODWORD(v71) = v63;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(void *)&v77[0] = v67;
      *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)v76;
      *(_OWORD *)((char *)&v77[1] + 4) = *(_OWORD *)&v76[12];
      DWORD1(v77[2]) = v10;
      *((void *)&v77[2] + 1) = v66;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v77[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityOpacityModifier>, (uint64_t)&type metadata for AccessibilityOpacityModifier, MEMORY[0x1E4F3F590]);
      unsigned int v62 = _GraphValue.value.getter();
      long long v43 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v43;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v44 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v44;
      long long v61 = _ViewInputs.animatedSize()();
      uint64_t v45 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v45;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      unsigned int v46 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v46;
      long long v60 = _ViewInputs.animatedPosition()();
      Swift::String v47 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v47;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v48 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v48;
      uint64_t v49 = _ViewInputs.containerPosition.getter();
      long long v50 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v50;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v51 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v51;
      long long v52 = _ViewInputs.environment.getter();
      long long v53 = v73;
      long long v54 = DWORD2(v73);
      long long v55 = HIDWORD(v73);
      v77[0] = v73;
      long long v56 = _ViewOutputs.subscript.getter();
      *(void *)&v77[0] = v53;
      if ((v56 & 0x100000000) != 0) {
        long long v57 = v65;
      }
      else {
        long long v57 = v56;
      }
      *((void *)&v77[0] + 1) = __PAIR64__(v55, v54);
      long long v58 = _ViewOutputs.subscript.getter();
      LODWORD(v77[0]) = v63;
      if ((v58 & 0x100000000) != 0) {
        long long v59 = v65;
      }
      else {
        long long v59 = v58;
      }
      BYTE4(v77[0]) = v72 & 1;
      *(_OWORD *)((char *)v77 + 8) = v71;
      BYTE8(v77[1]) = v70;
      HIDWORD(v77[1]) = v62;
      *(void *)&v77[2] = __PAIR64__(v60, v61);
      *((void *)&v77[2] + 1) = __PAIR64__(v52, v49);
      *(void *)&v78[0] = __PAIR64__(v64, v57);
      DWORD2(v78[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityOpacityModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityOpacityModifier and conformance AccessibilityOpacityModifier, (uint64_t)&type metadata for AccessibilityOpacityModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityOpacityModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v77[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v73, *((unint64_t *)&v73 + 1), 0);
    LOBYTE(v77[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v34 = a4;
    *a4 = v73;
    long long v35 = *((void *)&v73 + 1);
    goto LABEL_32;
  }
  *(void *)&unsigned int v80 = v74;
  DWORD2(v80) = v75;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(void *)&unsigned int v80 = v74, DWORD2(v80) = v75, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    long long v11 = v80;
    char v12 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v12;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    unsigned int v13 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v77[0]) &= ~0x10u;
      char v14 = PropertyList.subscript.setter();
      uint64_t v15 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v15;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v16 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v16;
      a3((long long *)v76, v14, v77);
      v77[0] = *(_OWORD *)v76;
      _ViewOutputs.subscript.getter();
      uint64_t v17 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v17;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v18 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v18;
      int v19 = _ViewInputs.environment.getter();
      MEMORY[0x1F4188790](v19);
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      MEMORY[0x1F4188790](v20);
      outlined retain of [Text.Modifier]((uint64_t)&v74);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v21;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v22;
  }
  long long v23 = outlined retain of _ViewInputs(a2);
  long long v24 = *(_OWORD *)(a2 + 48);
  v77[2] = *(_OWORD *)(a2 + 32);
  v78[0] = v24;
  v78[1] = *(_OWORD *)(a2 + 64);
  int v79 = *(_DWORD *)(a2 + 80);
  char v25 = *(_OWORD *)(a2 + 16);
  v77[0] = *(_OWORD *)a2;
  v77[1] = v25;
  a3((long long *)v76, v23, v77);
LABEL_10:
  *(void *)&v77[0] = v74;
  DWORD2(v77[0]) = v75;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v77[0] & 0x80) != 0)
    {
      v77[0] = *(_OWORD *)v76;
      long long v26 = _ViewOutputs.subscript.getter();
      if ((v26 & 0x100000000) != 0) {
        long long v27 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        long long v27 = v26;
      }
      long long v28 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v28;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v29 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v29;
      uint64_t v30 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      unsigned int v31 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v77[0]) = v30;
      *((void *)&v77[0] + 1) = v31;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      uint64_t v32 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v77[0] = __PAIR64__(v32, v27);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v77[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v76, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v34 = a4;
  *a4 = *(void *)v76;
  long long v35 = *(void *)&v76[8];
LABEL_32:
  v34[1] = v35;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  char v11;
  long long v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  long long v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v70;
  long long v71;
  char v72;
  long long v73;
  uint64_t v74;
  int v75;
  unsigned char v76[28];
  _OWORD v77[3];
  _OWORD v78[2];
  int v79;
  long long v80;
  _OWORD v81[2];
  _OWORD v82[2];
  int v83;
  uint64_t v84;

  unsigned int v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = *(void *)(a2 + 48);
  uint64_t v75 = *(_DWORD *)(a2 + 56);
  *(void *)&unsigned int v80 = *(void *)(a2 + 48);
  DWORD2(v80) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(_OWORD *)(a2 + 48);
    int v7 = *(_OWORD *)(a2 + 64);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v6;
    v82[1] = v7;
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    int v8 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v8;
    long long v9 = *(void *)a2;
    *(_OWORD *)unsigned int v76 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v76[12] = *(_OWORD *)(a2 + 20);
    long long v10 = *(_DWORD *)(a2 + 36);
    unsigned int v66 = *(void *)(a2 + 40);
    uint64_t v67 = v9;
    if ((v10 & 0x10) != 0)
    {
      long long v36 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v36;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v37 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v37;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(void *)&v77[0] = v80;
    DWORD2(v77[0]) = DWORD2(v80);
    *(void *)&v77[1] = *(void *)&v81[0];
    *(_OWORD *)((char *)&v77[1] + 8) = *(_OWORD *)((char *)v81 + 8);
    *((void *)&v77[2] + 1) = *((void *)&v81[1] + 1);
    *(void *)&v78[0] = *(void *)&v82[0];
    *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)((char *)v82 + 8);
    *((void *)&v78[1] + 1) = *((void *)&v82[1] + 1);
    int v79 = v83;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    a3(&v73, v38, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v77[0] = v73;
        uint64_t v39 = _ViewOutputs.subscript.getter();
        unsigned int v40 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
        if ((v39 & 0x100000000) == 0) {
          unsigned int v40 = v39;
        }
        long long v64 = v40;
      }
      else
      {
        long long v64 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      long long v63 = v77[0];
      long long v41 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v41;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v42 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v42;
      LODWORD(v71) = v63;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(void *)&v77[0] = v67;
      *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)v76;
      *(_OWORD *)((char *)&v77[1] + 4) = *(_OWORD *)&v76[12];
      DWORD1(v77[2]) = v10;
      *((void *)&v77[2] + 1) = v66;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v77[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<ArchivedAttachmentModifier>, (uint64_t)&type metadata for ArchivedAttachmentModifier, MEMORY[0x1E4F3F590]);
      unsigned int v62 = _GraphValue.value.getter();
      long long v43 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v43;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v44 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v44;
      long long v61 = _ViewInputs.animatedSize()();
      uint64_t v45 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v45;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      unsigned int v46 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v46;
      long long v60 = _ViewInputs.animatedPosition()();
      Swift::String v47 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v47;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v48 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v48;
      uint64_t v49 = _ViewInputs.containerPosition.getter();
      long long v50 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v50;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v51 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v51;
      long long v52 = _ViewInputs.environment.getter();
      long long v53 = v73;
      long long v54 = DWORD2(v73);
      long long v55 = HIDWORD(v73);
      v77[0] = v73;
      long long v56 = _ViewOutputs.subscript.getter();
      *(void *)&v77[0] = v53;
      if ((v56 & 0x100000000) != 0) {
        long long v57 = v65;
      }
      else {
        long long v57 = v56;
      }
      *((void *)&v77[0] + 1) = __PAIR64__(v55, v54);
      long long v58 = _ViewOutputs.subscript.getter();
      LODWORD(v77[0]) = v63;
      if ((v58 & 0x100000000) != 0) {
        long long v59 = v65;
      }
      else {
        long long v59 = v58;
      }
      BYTE4(v77[0]) = v72 & 1;
      *(_OWORD *)((char *)v77 + 8) = v71;
      BYTE8(v77[1]) = v70;
      HIDWORD(v77[1]) = v62;
      *(void *)&v77[2] = __PAIR64__(v60, v61);
      *((void *)&v77[2] + 1) = __PAIR64__(v52, v49);
      *(void *)&v78[0] = __PAIR64__(v64, v57);
      DWORD2(v78[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for DisplayListTransform<ArchivedAttachmentModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type ArchivedAttachmentModifier and conformance ArchivedAttachmentModifier, (uint64_t)&type metadata for ArchivedAttachmentModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<ArchivedAttachmentModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v77[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v73, *((unint64_t *)&v73 + 1), 0);
    LOBYTE(v77[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v34 = a4;
    *a4 = v73;
    long long v35 = *((void *)&v73 + 1);
    goto LABEL_32;
  }
  *(void *)&unsigned int v80 = v74;
  DWORD2(v80) = v75;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(void *)&unsigned int v80 = v74, DWORD2(v80) = v75, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    long long v11 = v80;
    char v12 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v12;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    unsigned int v13 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v77[0]) &= ~0x10u;
      char v14 = PropertyList.subscript.setter();
      uint64_t v15 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v15;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v16 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v16;
      a3((long long *)v76, v14, v77);
      v77[0] = *(_OWORD *)v76;
      _ViewOutputs.subscript.getter();
      uint64_t v17 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v17;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v18 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v18;
      int v19 = _ViewInputs.environment.getter();
      MEMORY[0x1F4188790](v19);
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      MEMORY[0x1F4188790](v20);
      outlined retain of [Text.Modifier]((uint64_t)&v74);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v21;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v22;
  }
  long long v23 = outlined retain of _ViewInputs(a2);
  long long v24 = *(_OWORD *)(a2 + 48);
  v77[2] = *(_OWORD *)(a2 + 32);
  v78[0] = v24;
  v78[1] = *(_OWORD *)(a2 + 64);
  int v79 = *(_DWORD *)(a2 + 80);
  char v25 = *(_OWORD *)(a2 + 16);
  v77[0] = *(_OWORD *)a2;
  v77[1] = v25;
  a3((long long *)v76, v23, v77);
LABEL_10:
  *(void *)&v77[0] = v74;
  DWORD2(v77[0]) = v75;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v77[0] & 0x80) != 0)
    {
      v77[0] = *(_OWORD *)v76;
      long long v26 = _ViewOutputs.subscript.getter();
      if ((v26 & 0x100000000) != 0) {
        long long v27 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        long long v27 = v26;
      }
      long long v28 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v28;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v29 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v29;
      uint64_t v30 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      unsigned int v31 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v77[0]) = v30;
      *((void *)&v77[0] + 1) = v31;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      uint64_t v32 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v77[0] = __PAIR64__(v32, v27);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v77[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v76, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v34 = a4;
  *a4 = *(void *)v76;
  long long v35 = *(void *)&v76[8];
LABEL_32:
  v34[1] = v35;
  return result;
}

{
  long long v6;
  long long v7;
  long long v8;
  uint64_t v9;
  int v10;
  char v11;
  long long v12;
  long long v13;
  uint64_t v14;
  long long v15;
  long long v16;
  long long v17;
  long long v18;
  uint64_t v19;
  uint64_t v20;
  long long v21;
  long long v22;
  uint64_t v23;
  long long v24;
  long long v25;
  uint64_t v26;
  unsigned int v27;
  long long v28;
  long long v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t result;
  void *v34;
  uint64_t v35;
  long long v36;
  long long v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  long long v41;
  long long v42;
  long long v43;
  long long v44;
  long long v45;
  long long v46;
  long long v47;
  long long v48;
  unsigned int v49;
  long long v50;
  long long v51;
  unsigned int v52;
  uint64_t v53;
  unsigned int v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unsigned int v59;
  unsigned int v60;
  unsigned int v61;
  int v62;
  int v63;
  unsigned int v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  char v70;
  long long v71;
  char v72;
  long long v73;
  uint64_t v74;
  int v75;
  unsigned char v76[28];
  _OWORD v77[3];
  _OWORD v78[2];
  int v79;
  long long v80;
  _OWORD v81[2];
  _OWORD v82[2];
  int v83;
  uint64_t v84;

  unsigned int v84 = *MEMORY[0x1E4F143B8];
  unsigned int v74 = *(void *)(a2 + 48);
  uint64_t v75 = *(_DWORD *)(a2 + 56);
  *(void *)&unsigned int v80 = *(void *)(a2 + 48);
  DWORD2(v80) = *(_DWORD *)(a2 + 56);
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    uint64_t v6 = *(_OWORD *)(a2 + 48);
    int v7 = *(_OWORD *)(a2 + 64);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v6;
    v82[1] = v7;
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    int v8 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v8;
    long long v9 = *(void *)a2;
    *(_OWORD *)unsigned int v76 = *(_OWORD *)(a2 + 8);
    *(_OWORD *)&v76[12] = *(_OWORD *)(a2 + 20);
    long long v10 = *(_DWORD *)(a2 + 36);
    unsigned int v66 = *(void *)(a2 + 40);
    uint64_t v67 = v9;
    if ((v10 & 0x10) != 0)
    {
      long long v36 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v36;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v37 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v37;
      outlined retain of _ViewInputs(a2);
      _ViewInputs.animatedPosition()();
      _ViewInputs.containerPosition.setter();
    }
    else
    {
      outlined retain of _ViewInputs(a2);
    }
    *(void *)&v77[0] = v80;
    DWORD2(v77[0]) = DWORD2(v80);
    *(void *)&v77[1] = *(void *)&v81[0];
    *(_OWORD *)((char *)&v77[1] + 8) = *(_OWORD *)((char *)v81 + 8);
    *((void *)&v77[2] + 1) = *((void *)&v81[1] + 1);
    *(void *)&v78[0] = *(void *)&v82[0];
    *(_OWORD *)((char *)v78 + 8) = *(_OWORD *)((char *)v82 + 8);
    *((void *)&v78[1] + 1) = *((void *)&v82[1] + 1);
    int v79 = v83;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v38 = swift_bridgeObjectRetain();
    a3(&v73, v38, v77);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    if ((v10 & 0x10) != 0)
    {
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
      {
        v77[0] = v73;
        uint64_t v39 = _ViewOutputs.subscript.getter();
        unsigned int v40 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
        if ((v39 & 0x100000000) == 0) {
          unsigned int v40 = v39;
        }
        long long v64 = v40;
      }
      else
      {
        long long v64 = *MEMORY[0x1E4F4E7A0];
        long long v65 = *MEMORY[0x1E4F4E7A0];
      }
      _DisplayList_Identity.init()();
      long long v63 = v77[0];
      long long v41 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v41;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v42 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v42;
      LODWORD(v71) = v63;
      _ViewInputs.pushIdentity(_:)();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      *(void *)&v77[0] = v67;
      *(_OWORD *)((char *)v77 + 8) = *(_OWORD *)v76;
      *(_OWORD *)((char *)&v77[1] + 4) = *(_OWORD *)&v76[12];
      DWORD1(v77[2]) = v10;
      *((void *)&v77[2] + 1) = v66;
      _GraphInputs.interfaceIdiom.getter();
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      outlined release of _ViewInputs(a2);
      LODWORD(v77[0]) = a1;
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for _GraphValue<AccessibilityGestureModifier>, (uint64_t)&type metadata for AccessibilityGestureModifier, MEMORY[0x1E4F3F590]);
      unsigned int v62 = _GraphValue.value.getter();
      long long v43 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v43;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v44 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v44;
      long long v61 = _ViewInputs.animatedSize()();
      uint64_t v45 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v45;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      unsigned int v46 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v46;
      long long v60 = _ViewInputs.animatedPosition()();
      Swift::String v47 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v47;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v48 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v48;
      uint64_t v49 = _ViewInputs.containerPosition.getter();
      long long v50 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v50;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      long long v51 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v51;
      long long v52 = _ViewInputs.environment.getter();
      long long v53 = v73;
      long long v54 = DWORD2(v73);
      long long v55 = HIDWORD(v73);
      v77[0] = v73;
      long long v56 = _ViewOutputs.subscript.getter();
      *(void *)&v77[0] = v53;
      if ((v56 & 0x100000000) != 0) {
        long long v57 = v65;
      }
      else {
        long long v57 = v56;
      }
      *((void *)&v77[0] + 1) = __PAIR64__(v55, v54);
      long long v58 = _ViewOutputs.subscript.getter();
      LODWORD(v77[0]) = v63;
      if ((v58 & 0x100000000) != 0) {
        long long v59 = v65;
      }
      else {
        long long v59 = v58;
      }
      BYTE4(v77[0]) = v72 & 1;
      *(_OWORD *)((char *)v77 + 8) = v71;
      BYTE8(v77[1]) = v70;
      HIDWORD(v77[1]) = v62;
      *(void *)&v77[2] = __PAIR64__(v60, v61);
      *((void *)&v77[2] + 1) = __PAIR64__(v52, v49);
      *(void *)&v78[0] = __PAIR64__(v64, v57);
      DWORD2(v78[0]) = v59;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for PropertiesTransform<AccessibilityAttachmentModifier>(0, &lazy cache variable for type metadata for DisplayListTransform<AccessibilityGestureModifier>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityGestureModifier and conformance AccessibilityGestureModifier, (uint64_t)&type metadata for AccessibilityGestureModifier, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DisplayListTransform);
      lazy protocol witness table accessor for type DisplayListTransform<AccessibilityGestureModifier> and conformance DisplayListTransform<A>();
      Attribute.init<A>(body:value:flags:update:)();
      LOBYTE(v77[0]) = 0;
      _ViewOutputs.subscript.setter();
    }
    specialized static AccessibilityViewModifier.makePropertiesTransform(modifier:inputs:outputs:scrapeableID:)(a1, (long long *)a2, v73, *((unint64_t *)&v73 + 1), 0);
    LOBYTE(v77[0]) = 0;
    _ViewOutputs.subscript.setter();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
    long long v34 = a4;
    *a4 = v73;
    long long v35 = *((void *)&v73 + 1);
    goto LABEL_32;
  }
  *(void *)&unsigned int v80 = v74;
  DWORD2(v80) = v75;
  if ((PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0
    && (*(void *)&unsigned int v80 = v74, DWORD2(v80) = v75, (PreferencesInputs.contains<A>(_:includeHostPreferences:)() & 1) != 0))
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type PlatformItemListFlagsInput and conformance PlatformItemListFlagsInput();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    long long v11 = v80;
    char v12 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v12;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    unsigned int v13 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v13;
    if ((v11 & 0x10) != 0)
    {
      outlined retain of _ViewInputs(a2);
      PropertyList.subscript.getter();
      LODWORD(v77[0]) &= ~0x10u;
      char v14 = PropertyList.subscript.setter();
      uint64_t v15 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v15;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      int v16 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v16;
      a3((long long *)v76, v14, v77);
      v77[0] = *(_OWORD *)v76;
      _ViewOutputs.subscript.getter();
      uint64_t v17 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v17;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v18 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v18;
      int v19 = _ViewInputs.environment.getter();
      MEMORY[0x1F4188790](v19);
      *(void *)&v77[0] = v74;
      DWORD2(v77[0]) = v75;
      MEMORY[0x1F4188790](v20);
      outlined retain of [Text.Modifier]((uint64_t)&v74);
      PreferencesOutputs.makePreferenceTransformer<A>(inputs:key:transform:)();
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v21 = *(_OWORD *)(a2 + 48);
    v81[1] = *(_OWORD *)(a2 + 32);
    v82[0] = v21;
    v82[1] = *(_OWORD *)(a2 + 64);
    uint64_t v83 = *(_DWORD *)(a2 + 80);
    long long v22 = *(_OWORD *)(a2 + 16);
    unsigned int v80 = *(_OWORD *)a2;
    v81[0] = v22;
  }
  long long v23 = outlined retain of _ViewInputs(a2);
  long long v24 = *(_OWORD *)(a2 + 48);
  v77[2] = *(_OWORD *)(a2 + 32);
  v78[0] = v24;
  v78[1] = *(_OWORD *)(a2 + 64);
  int v79 = *(_DWORD *)(a2 + 80);
  char v25 = *(_OWORD *)(a2 + 16);
  v77[0] = *(_OWORD *)a2;
  v77[1] = v25;
  a3((long long *)v76, v23, v77);
LABEL_10:
  *(void *)&v77[0] = v74;
  DWORD2(v77[0]) = v75;
  if (PreferencesInputs.contains<A>(_:includeHostPreferences:)())
  {
    outlined retain of _ViewInputs(a2);
    lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
    PropertyList.subscript.getter();
    outlined release of _ViewInputs(a2);
    if ((v77[0] & 0x80) != 0)
    {
      v77[0] = *(_OWORD *)v76;
      long long v26 = _ViewOutputs.subscript.getter();
      if ((v26 & 0x100000000) != 0) {
        long long v27 = *MEMORY[0x1E4F4E7A0];
      }
      else {
        long long v27 = v26;
      }
      long long v28 = *(_OWORD *)(a2 + 48);
      v77[2] = *(_OWORD *)(a2 + 32);
      v78[0] = v28;
      v78[1] = *(_OWORD *)(a2 + 64);
      int v79 = *(_DWORD *)(a2 + 80);
      uint64_t v29 = *(_OWORD *)(a2 + 16);
      v77[0] = *(_OWORD *)a2;
      v77[1] = v29;
      uint64_t v30 = _ViewInputs.environment.getter();
      type metadata accessor for PropertyList.Tracker();
      unsigned int v31 = PropertyList.Tracker.__allocating_init()();
      LODWORD(v77[0]) = v30;
      *((void *)&v77[0] + 1) = v31;
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type PlatformAccessibilityEnv and conformance PlatformAccessibilityEnv();
      uint64_t v32 = Attribute.init<A>(body:value:flags:update:)();
      swift_release();
      *(void *)&v77[0] = __PAIR64__(v32, v27);
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      type metadata accessor for _ContiguousArrayStorage<Swift.AnyObject>(0, &lazy cache variable for type metadata for PlatformItem.AccessibilityContent?, (uint64_t)&type metadata for PlatformItem.AccessibilityContent, MEMORY[0x1E4FBB718]);
      lazy protocol witness table accessor for type PlatformAccessibilityContent and conformance PlatformAccessibilityContent();
      LODWORD(v77[0]) = Attribute.init<A>(body:value:flags:update:)();
      protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
      lazy protocol witness table accessor for type MakePlatformTransform and conformance MakePlatformTransform();
      Attribute.init<A>(body:value:flags:update:)();
      _GraphValue.init(_:)();
      specialized static PlatformItemsModifier.transformPlatformItemsOutputs<A>(_:inputs:modifier:)((uint64_t)v76, a2);
    }
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t result = swift_release();
  long long v34 = a4;
  *a4 = *(void *)v76;
  long long v35 = *(void *)&v76[8];
LABEL_32:
  v34[1] = v35;
  return result;
}