_WORD *assignWithTake for DefaultListNavigationLinkStyle.ListLink(_WORD *a1, _WORD *a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  long long v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  long long v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;

  *a1 = *a2;
  v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  if (a1 != a2)
  {
    v7 = *(int *)(v6 + 24);
    v8 = (char *)a1 + v7;
    v9 = (char *)a2 + v7;
    _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOhTm_2((uint64_t)a1 + v7, (uint64_t (*)(void))type metadata accessor for ButtonAction);
    v10 = type metadata accessor for ButtonAction();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      v11 = *((_OWORD *)v9 + 1);
      *(_OWORD *)v8 = *(_OWORD *)v9;
      *((_OWORD *)v8 + 1) = v11;
      *(_DWORD *)(v8 + 31) = *(_DWORD *)(v9 + 31);
      *(_OWORD *)(v8 + 40) = *(_OWORD *)(v9 + 40);
      *(_OWORD *)(v8 + 56) = *(_OWORD *)(v9 + 56);
      *(_DWORD *)(v8 + 71) = *(_DWORD *)(v9 + 71);
      v12 = *(int *)(type metadata accessor for LinkDestination() + 24);
      v13 = &v8[v12];
      v14 = &v9[v12];
      v15 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
      v16 = type metadata accessor for LinkDestination.Configuration();
      v13[*(int *)(v16 + 20)] = v14[*(int *)(v16 + 20)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v8, v9, *(void *)(*(void *)(v10 - 8) + 64));
    }
  }
  v17 = a3[5];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = v19[32];
  v21 = *(void *)v18;
  v22 = *((void *)v18 + 1);
  v23 = *((void *)v18 + 2);
  v24 = *((void *)v18 + 3);
  v25 = v18[32];
  v26 = *((_OWORD *)v19 + 1);
  *(_OWORD *)v18 = *(_OWORD *)v19;
  *((_OWORD *)v18 + 1) = v26;
  v18[32] = v20;
  outlined consume of Environment<HoverEffectContext?>.Content(v21, v22, v23, v24, v25);
  v27 = a3[6];
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = *(void *)v29;
  LOBYTE(v29) = v29[8];
  v31 = *(void *)v28;
  v32 = v28[8];
  *(void *)v28 = v30;
  v28[8] = (char)v29;
  outlined consume of Environment<Bool>.Content(v31, v32);
  v33 = a3[7];
  v34 = (char *)a1 + v33;
  v35 = (char *)a2 + v33;
  v36 = *(void *)v35;
  LOBYTE(v35) = v35[8];
  v37 = *(void *)v34;
  v38 = v34[8];
  *(void *)v34 = v36;
  v34[8] = (char)v35;
  outlined consume of Environment<Bool>.Content(v37, v38);
  return a1;
}

uint64_t getEnumTagSinglePayload for DefaultListNavigationLinkStyle.ListLink(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D61404);
}

uint64_t sub_187D61404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unsigned int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20) + 32);
    if (v10 > 1) {
      return (v10 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

uint64_t storeEnumTagSinglePayload for DefaultListNavigationLinkStyle.ListLink(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D614D8);
}

uint64_t sub_187D614D8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unsigned int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20) + 32) = -(char)a2;
  }
  return result;
}

uint64_t sub_187D61598()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v(&lazy protocol witness table cache variable for type VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>);
}

void type metadata accessor for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>()
{
  if (!lazy cache variable for type metadata for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>)
  {
    type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(255);
    lazy protocol witness table accessor for type ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>, (void (*)(void))lazy protocol witness table accessor for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSecondaryNavigationModifier and conformance OnPlatformContainerSecondaryNavigationModifier);
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v(&lazy protocol witness table cache variable for type DefaultListNavigationLinkStyle.ListLink and conformance DefaultListNavigationLinkStyle.ListLink, (void (*)(uint64_t))type metadata accessor for DefaultListNavigationLinkStyle.ListLink);
}

uint64_t sub_187D616BC()
{
  return lazy protocol witness table accessor for type HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v(&lazy protocol witness table cache variable for type VStack<DefaultListNavigationLinkStyle.ListLink> and conformance VStack<A>, (void (*)(uint64_t))type metadata accessor for VStack<DefaultListNavigationLinkStyle.ListLink>);
}

_UNKNOWN **base witness table accessor for ViewModifier in ShowsNavigationIndicatorDisclosureIndicatorModifier()
{
  return &protocol witness table for ShowsNavigationIndicatorDisclosureIndicatorModifier;
}

void type metadata accessor for ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void *type metadata accessor for SplitViewNavigationIndicator()
{
  return &unk_1ED4545D0;
}

void *type metadata accessor for AlwaysNavigationIndicator()
{
  return &unk_1ED445700;
}

uint64_t sub_187D61A14()
{
  return lazy protocol witness table accessor for type ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputP, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInpu, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<HStack<TupleView<(ModifiedContent<ModifiedContent<PrimitiveButtonStyleConfiguration.Label, PrimitiveButtonStyleContainerModifier<DefaultButtonStyle>>, StaticIf<InvertedViewInputPredicate<_SemanticFeature_v4>, _PaddingLayout, EmptyModifier>>, _ConditionalContent<StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewInputPredicate<_SemanticFeature_v4>, StyleContextAcceptsPredicate<SidebarListStyleContext>>, _PaddingLayout, EmptyModifier>>)>, EmptyView>, StaticIf<ShowsDisclosureIndicatorPredicate, StaticIf<InvertedViewInputPredicate<HideNavigationLinkDisclosureIndicator>, TupleView<(ModifiedContent<Spacer, _TraitWritingModifier<LayoutPriorityTraitKey>>, ModifiedContent<_DisclosureIndicator, StaticIf<AndOperationViewInputPredicate<InvertedViewI, (void (*)(void))lazy protocol witness table accessor for type OnPlatformContainerSelectionModifier and conformance OnPlatformContainerSelectionModifier);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<DefaultListNavigationLinkStyle.ListLink, OnPlatformContainerSecondaryNavigationModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t static __UniversalListStyle._makeView<A>(value:inputs:)()
{
  return static _VariadicView.Tree<>._makeView(view:inputs:)();
}

uint64_t type metadata accessor for __UniversalListStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static __UniversalListStyle._makeViewList<A>(value:inputs:)()
{
  return static _VariadicView.Tree<>._makeViewList(view:inputs:)();
}

uint64_t __UniversalListStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _ListValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t __UniversalListStyle.Body.value.getter@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v17[1] = a4;
  type metadata accessor for SelectionManagerBox();
  type metadata accessor for Binding();
  v17[0] = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v17[0] - 8);
  MEMORY[0x1F4188790](v17[0]);
  uint64_t v9 = (char *)v17 - v8;
  v19 = &type metadata for __UniversalListStyle;
  uint64_t v20 = a2;
  v21 = &protocol witness table for __UniversalListStyle;
  uint64_t v22 = a3;
  uint64_t v10 = type metadata accessor for _ListValue();
  MEMORY[0x1F4188790](v10 - 8);
  v12 = (char *)v17 - v11;
  swift_getWitnessTable();
  uint64_t v13 = type metadata accessor for UniversalList();
  MEMORY[0x1F4188790](v13);
  v15 = (char *)v17 - v14;
  __UniversalListStyle.Body.base.getter((uint64_t)v12);
  (*(void (**)(char *, char *, void))(v7 + 32))(v9, v12, v17[0]);
  UniversalList.init(selection:)((uint64_t)v9, (uint64_t)v15);
  v17[4] = a2;
  v17[5] = a3;
  int v18 = a1;
  return _VariadicView.Tree.init(_:content:)();
}

uint64_t closure #1 in __UniversalListStyle.Body.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = &type metadata for __UniversalListStyle;
  v8[1] = a2;
  v8[2] = &protocol witness table for __UniversalListStyle;
  v8[3] = a3;
  uint64_t v3 = type metadata accessor for _ListValue();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v8 - v5;
  __UniversalListStyle.Body.base.getter((uint64_t)v8 - v5);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance __UniversalListStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for SelectionManagerBox();
  swift_getWitnessTable();
  type metadata accessor for UniversalList();
  uint64_t v2 = type metadata accessor for _VariadicView.Tree();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance __UniversalListStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return __UniversalListStyle.Body.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for __UniversalListStyle()
{
  return &type metadata for __UniversalListStyle;
}

uint64_t base witness table accessor for _AttributeBody in __UniversalListStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in __UniversalListStyle.Body.value.getter()
{
  return closure #1 in __UniversalListStyle.Body.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t destroy for InspectorState(uint64_t a1)
{
  return outlined consume of StateOrBinding<Bool>(*(void *)a1, *(void *)(a1 + 8), *(unsigned __int8 *)(a1 + 16), *(unsigned char *)(a1 + 17));
}

uint64_t initializeWithCopy for InspectorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v5, v7, v6);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v6;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t assignWithCopy for InspectorState(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  char v6 = *(unsigned char *)(a2 + 17);
  uint64_t v7 = *(unsigned __int8 *)(a2 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)a2, v5, v7, v6);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 17);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v11 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v7;
  *(unsigned char *)(a1 + 17) = v6;
  outlined consume of StateOrBinding<Bool>(v8, v9, v11, v10);
  long long v12 = *(_OWORD *)(a2 + 24);
  long long v13 = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 24) = v12;
  return a1;
}

uint64_t assignWithTake for InspectorState(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 16);
  char v5 = *(unsigned char *)(a2 + 17);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 17);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v9 = *(unsigned __int8 *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 17) = v5;
  outlined consume of StateOrBinding<Bool>(v6, v7, v9, v8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  return a1;
}

uint64_t getEnumTagSinglePayload for InspectorState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 57)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *(void *)(a1 + 32) >> 1;
  int v4 = -2 - v3;
  if (-2 - (int)v3 < 0) {
    int v4 = -1;
  }
  if (v3 <= 0x80000000) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for InspectorState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 56) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 57) = 0;
    }
    if (a2)
    {
      *(void *)(result + 24) = 0;
      *(void *)(result + 32) = 2 * ~a2;
      *(void *)(result + 40) = 0;
      *(void *)(result + 48) = 0;
      *(unsigned char *)(result + 56) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for InspectorState()
{
  return &type metadata for InspectorState;
}

ValueMetadata *type metadata accessor for InspectorColumnWidth()
{
  return &type metadata for InspectorColumnWidth;
}

ValueMetadata *type metadata accessor for InspectorColumnWidth.TraitKey()
{
  return &type metadata for InspectorColumnWidth.TraitKey;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance InspectorStorageV5.PreferenceKey(uint64_t a1@<X8>)
{
  *(_WORD *)a1 = 0;
  *(unsigned char *)(a1 + 2) = 0;
}

void *protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance InspectorStorageV5.PreferenceKey(unsigned char *a1, void *(*a2)(uint64_t *__return_ptr))
{
  uint64_t result = a2(&v5);
  char v4 = BYTE2(v5);
  *a1 = (*a1 | v5) & 1;
  a1[2] = (a1[2] | v4) & 1;
  return result;
}

void static ScrollPagingBehavior.paging.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static ScrollPagingBehavior.childLeading.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

uint64_t PagingScrollViewBehavior.updateTarget(_:context:)(uint64_t a1, long long *a2, __int16 a3)
{
  long long v3 = a2[11];
  v11[10] = a2[10];
  v11[11] = v3;
  long long v4 = a2[13];
  v11[12] = a2[12];
  v11[13] = v4;
  long long v5 = a2[7];
  v11[6] = a2[6];
  v11[7] = v5;
  long long v6 = a2[9];
  v11[8] = a2[8];
  v11[9] = v6;
  long long v7 = a2[3];
  v11[2] = a2[2];
  v11[3] = v7;
  long long v8 = a2[5];
  v11[4] = a2[4];
  v11[5] = v8;
  long long v9 = a2[1];
  v11[0] = *a2;
  v11[1] = v9;
  if ((a3 & 0xFF00) == 0x100) {
    return PagingScrollTargetBehavior.updateTarget(_:context:)(a1, v11);
  }
  else {
    return ViewAlignedScrollTargetBehavior.updateTarget(_:context:)(a1, v11);
  }
}

uint64_t protocol witness for ScrollTargetBehavior.updateTarget(_:context:) in conformance PagingScrollViewBehavior(uint64_t a1, long long *a2)
{
  return PagingScrollViewBehavior.updateTarget(_:context:)(a1, a2, *v2 | (unsigned __int16)(v2[1] << 8));
}

void static ScrollPagingBehavior.childPaging.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t getEnumTagSinglePayload for PagingScrollView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 2) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0xFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 2) & ~v6);
      }
      unsigned int v15 = *((unsigned __int8 *)a1 + 1);
      if (v15 >= 2) {
        return v15 - 1;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for PagingScrollView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 2) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_39;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_39:
      __break(1u);
      JUMPOUT(0x187D62BD8);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0xFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 2] & ~v9;
          v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else
        {
          a1[1] = a2 + 1;
        }
      }
      return;
  }
}

uint64_t sub_187D62C04()
{
  return swift_getWitnessTable();
}

unsigned char *storeEnumTagSinglePayload for ScrollPagingBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D62DD8);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PagingScrollViewBehavior(unsigned __int16 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_17;
  }
  if (a2 + 65281 <= 0xFFFEFFFF) {
    int v2 = 2;
  }
  else {
    int v2 = 4;
  }
  if (a2 + 65281 < 0xFF0000) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = a1[1];
      if (!a1[1]) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 16)) - 65281;
    }
    int v4 = *((unsigned __int8 *)a1 + 2);
    if (*((unsigned char *)a1 + 2)) {
      return (*a1 | (v4 << 16)) - 65281;
    }
  }
LABEL_17:
  unsigned int v6 = *(unsigned __int8 *)a1;
  BOOL v7 = v6 >= 2;
  int v8 = v6 - 2;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for PagingScrollViewBehavior(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a3 + 65281 <= 0xFFFEFFFF) {
    int v3 = 2;
  }
  else {
    int v3 = 4;
  }
  if (a3 + 65281 < 0xFF0000) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 16) + 1;
    *(_WORD *)uint64_t result = a2 - 255;
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = v6;
        break;
      case 2:
        *(_WORD *)(result + 2) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D62F60);
      case 4:
        *(_DWORD *)(result + 2) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        *(unsigned char *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 2) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 2) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *(unsigned char *)uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PagingBehavior and conformance PagingBehavior()
{
  unint64_t result = lazy protocol witness table cache variable for type PagingBehavior and conformance PagingBehavior;
  if (!lazy protocol witness table cache variable for type PagingBehavior and conformance PagingBehavior)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PagingBehavior and conformance PagingBehavior);
  }
  return result;
}

uint64_t ScrollTest.run<A>(in:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  static Update.ensure<A>(_:)();
  swift_beginAccess();
  outlined init with copy of ScrollTestRunner?(v2 + 56, (uint64_t)&v8);
  if (v9)
  {
    outlined init with take of OptionalBinaryInteger(&v8, (uint64_t)v10);
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    __swift_project_boxed_opaque_existential_1(v10, v11);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v5);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v10);
  }
  else
  {
    uint64_t v7 = outlined destroy of ScrollTestRunner?((uint64_t)&v8);
    return a2(v7);
  }
}

uint64_t closure #1 in ScrollTest.run<A>(in:completion:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _UIHostingView();
  swift_getWitnessTable();
  TestHost.scrollViewProxy.getter((uint64_t)&v30);
  uint64_t v7 = v30;
  if (v30)
  {
    int v28 = v31;
    uint64_t v8 = *(void *)(a2 + 16);
    uint64_t v9 = *(void *)(a2 + 24);
    uint64_t v10 = *(void *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    char v12 = *(unsigned char *)(a2 + 48);
    uint64_t v13 = swift_allocObject();
    swift_weakInit();
    unsigned int v14 = (void *)swift_allocObject();
    v14[2] = v13;
    v14[3] = a3;
    v14[4] = a4;
    uint64_t v15 = type metadata accessor for ScrollProxyScrollTestRunner();
    uint64_t v16 = swift_allocObject();
    *(void *)(v16 + 16) = v8;
    *(void *)(v16 + 24) = v9;
    *(void *)(v16 + 32) = v10;
    *(void *)(v16 + 40) = v11;
    *(unsigned char *)(v16 + 48) = v12;
    *(void *)(v16 + 56) = 0;
    *(void *)(v16 + 64) = v7;
    *(_DWORD *)(v16 + 72) = v28;
    *(void *)(v16 + 80) = partial apply for closure #1 in closure #1 in ScrollTest.run<A>(in:completion:);
    *(void *)(v16 + 88) = v14;
    v32 = (void *)v15;
    v33 = &protocol witness table for ScrollProxyScrollTestRunner;
    uint64_t v30 = v16;
    swift_retain();
    outlined init with take of ScrollTestRunner?((uint64_t)&v30, (uint64_t)v29);
    uint64_t v17 = a2 + 56;
    swift_beginAccess();
  }
  else
  {
    uint64_t result = _UIHostingView._topScrollView.getter();
    if (!result) {
      return result;
    }
    uint64_t v19 = result;
    uint64_t v20 = *(void *)(a2 + 16);
    uint64_t v21 = *(void *)(a2 + 24);
    uint64_t v22 = *(void *)(a2 + 32);
    uint64_t v23 = *(void *)(a2 + 40);
    char v24 = *(unsigned char *)(a2 + 48);
    uint64_t v25 = swift_allocObject();
    swift_weakInit();
    v26 = (void *)swift_allocObject();
    v26[2] = v25;
    v26[3] = a3;
    v26[4] = a4;
    v32 = &unk_1ED43C2F0;
    v33 = (char **)&protocol witness table for UIScrollViewTestRunner;
    uint64_t v27 = swift_allocObject();
    uint64_t v30 = v27;
    *(void *)(v27 + 16) = v20;
    *(void *)(v27 + 24) = v21;
    *(void *)(v27 + 32) = v22;
    *(void *)(v27 + 40) = v23;
    *(unsigned char *)(v27 + 48) = v24;
    *(void *)(v27 + 56) = v19;
    *(void *)(v27 + 64) = partial apply for closure #2 in closure #1 in ScrollTest.run<A>(in:completion:);
    *(void *)(v27 + 72) = v26;
    outlined init with take of ScrollTestRunner?((uint64_t)&v30, (uint64_t)v29);
    uint64_t v17 = a2 + 56;
    swift_beginAccess();
    swift_retain();
  }
  outlined assign with take of ScrollTestRunner?((uint64_t)v29, v17);
  return swift_endAccess();
}

uint64_t _UIHostingView._topScrollView.getter()
{
  id v1 = objc_msgSend(v0, sel_subviews);
  type metadata accessor for UIView();
  unint64_t v2 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

  unint64_t v15 = v2;
  if (v2 >> 62) {
    goto LABEL_16;
  }
  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10))
  {
    while (1)
    {
      while (1)
      {
        if (!swift_isUniquelyReferenced_nonNull_bridgeObject()
          || (v2 & 0x8000000000000000) != 0
          || (v2 & 0x4000000000000000) != 0)
        {
          unint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()(v2);
          unint64_t v15 = v2;
        }
        v2 &= 0xFFFFFFFFFFFFFF8uLL;
        uint64_t v3 = *(void *)(v2 + 16);
        if (v3) {
          break;
        }
        __break(1u);
LABEL_16:
        swift_bridgeObjectRetain();
        uint64_t v13 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v13) {
          goto LABEL_17;
        }
      }
      uint64_t v4 = v3 - 1;
      uint64_t v7 = *(void **)(v2 + 32);
      unint64_t v5 = v2 + 32;
      unsigned int v6 = v7;
      memmove((void *)v5, (const void *)(v5 + 8), 8 * (v3 - 1));
      *(void *)(v5 - 16) = v4;
      specialized Array._endMutation()();
      self;
      uint64_t v8 = swift_dynamicCastObjCClass();
      if (v8) {
        break;
      }
      id v9 = objc_msgSend(v6, sel_subviews);
      unint64_t v10 = static Array._unconditionallyBridgeFromObjectiveC(_:)();

      specialized Array.append<A>(contentsOf:)(v10);
      unint64_t v2 = v15;
      if (v15 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v11 = _CocoaArrayWrapper.endIndex.getter();
        swift_bridgeObjectRelease();
        if (!v11) {
          goto LABEL_17;
        }
      }
      else if (!*(void *)((v15 & 0xFFFFFFFFFFFFFF8) + 0x10))
      {
        goto LABEL_17;
      }
    }
    uint64_t v12 = v8;
    swift_bridgeObjectRelease();
  }
  else
  {
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  return v12;
}

uint64_t closure #1 in closure #1 in ScrollTest.run<A>(in:completion:)(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  swift_beginAccess();
  uint64_t Strong = swift_weakLoadStrong();
  if (Strong)
  {
    uint64_t v4 = Strong + 56;
    uint64_t v7 = 0;
    memset(v6, 0, sizeof(v6));
    swift_beginAccess();
    outlined assign with take of ScrollTestRunner?((uint64_t)v6, v4);
    swift_endAccess();
    uint64_t Strong = swift_release();
  }
  return a2(Strong);
}

uint64_t ScrollTest.__deallocating_deinit()
{
  outlined destroy of ScrollTestRunner?(v0 + 56);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollTest()
{
  return self;
}

void ScrollProxyScrollTestRunner.run()()
{
  id v1 = objc_msgSend(self, sel_displayLinkWithTarget_selector_, v0, sel_incrementScrollTest);
  objc_msgSend(v1, sel_maximumRefreshRate);
  double v3 = round(1.0 / v2);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
    __break(1u);
    goto LABEL_8;
  }
  if (v3 <= -9.22337204e18)
  {
LABEL_8:
    __break(1u);
    goto LABEL_9;
  }
  if (v3 >= 9.22337204e18)
  {
LABEL_9:
    __break(1u);
    return;
  }
  objc_msgSend(v1, sel_setPreferredFramesPerSecond_, (uint64_t)v3);
  id v4 = objc_msgSend(self, sel_mainRunLoop);
  objc_msgSend(v1, sel_addToRunLoop_forMode_, v4, *MEMORY[0x1E4F1C4B0]);

  unint64_t v5 = *(void **)(v0 + 56);
  *(void *)(v0 + 56) = v1;
}

void ScrollProxyScrollTestRunner.incrementScrollTest()()
{
  id v1 = *(void **)(v0 + 56);
  if (!v1) {
    return;
  }
  uint64_t v2 = v0;
  double v3 = self;
  id v4 = v1;
  objc_msgSend(v3, sel_generateSeed);
  objc_msgSend(v4, sel_targetTimestamp);
  double v6 = v5;
  objc_msgSend(v4, sel_targetTimestamp);
  double v8 = v7;
  objc_msgSend(v4, sel_timestamp);
  objc_msgSend(v3, sel_setEarliestAutomaticCommitTime_, v6 - (v8 + v9 * -0.5));
  unint64_t v10 = *(double **)(v2 + 64);
  if (v10)
  {
    swift_beginAccess();
    double v12 = v10[8];
    double v11 = v10[9];
    uint64_t v13 = (double *)(v2 + 32);
    double v14 = *(double *)(v2 + 32);
    unint64_t v15 = (double *)(v2 + 16);
    if (*(unsigned char *)(v2 + 48))
    {
      swift_beginAccess();
      double v16 = v10[8];
      double v17 = v10[9];
      swift_beginAccess();
      CGFloat v18 = v16 - v10[27];
      CGFloat v19 = v17 - v10[26];
      CGSize.inset(by:)();
      v49.size.width = v20;
      v49.size.height = v21;
      v49.origin.x = v18;
      v49.origin.y = v19;
      double Height = CGRectGetHeight(v49);
      double v23 = *v13;
      if (v14 > 0.0)
      {
LABEL_5:
        double v24 = v11 + Height;
        goto LABEL_11;
      }
      goto LABEL_8;
    }
    swift_beginAccess();
    double v26 = v10[8];
    double v27 = v10[9];
    swift_beginAccess();
    CGFloat v28 = v26 - v10[27];
    CGFloat v29 = v27 - v10[26];
    CGSize.inset(by:)();
    v50.size.width = v30;
    v50.size.height = v31;
    v50.origin.x = v28;
    v50.origin.y = v29;
    double Width = CGRectGetWidth(v50);
    double v23 = *v13;
    if (v14 > 0.0) {
      goto LABEL_10;
    }
LABEL_14:
    double v25 = v12 + v23;
LABEL_15:
    if (v25 <= *v15)
    {
      *(double *)(v2 + 32) = -v23;
      uint64_t v33 = *(void *)(v2 + 24);
      BOOL v34 = __OFSUB__(v33, 1);
      uint64_t v35 = v33 - 1;
      if (v34)
      {
        __break(1u);
        return;
      }
      *(void *)(v2 + 24) = v35;
    }
    goto LABEL_18;
  }
  uint64_t v13 = (double *)(v2 + 32);
  double v23 = *(double *)(v2 + 32);
  unint64_t v15 = (double *)(v2 + 16);
  if (*(unsigned char *)(v2 + 48))
  {
    double v11 = 0.0;
    double v12 = 0.0;
    double Height = 0.0;
    if (v23 > 0.0) {
      goto LABEL_5;
    }
LABEL_8:
    double v25 = v11 + v23;
    goto LABEL_15;
  }
  double v11 = 0.0;
  double v12 = 0.0;
  double Width = 0.0;
  if (v23 <= 0.0) {
    goto LABEL_14;
  }
LABEL_10:
  double v24 = v12 + Width;
LABEL_11:
  if (*(double *)(v2 + 16) + *(double *)(v2 + 40) < v24 + v23) {
    *uint64_t v13 = -v23;
  }
LABEL_18:
  if (*(unsigned char *)(v2 + 48)) {
    double v36 = *(double *)(v2 + 32);
  }
  else {
    double v36 = -0.0;
  }
  if (*(unsigned char *)(v2 + 48)) {
    double v37 = -0.0;
  }
  else {
    double v37 = *(double *)(v2 + 32);
  }
  uint64_t v38 = *(void *)(v2 + 64);
  if (v38)
  {
    swift_beginAccess();
    if (((*(unsigned __int8 *)(v38 + 146) << 16) & 0xFFC1FFFF) != 0)
    {
      double v39 = v11 + v36;
      double v40 = v12 + v37;
      swift_retain();
      ScrollViewNode.bindingSafeOffset(_:)(v40, v39);
      *(double *)v45 = v40;
      *(double *)&v45[1] = v39;
      *(double *)&v45[2] = v41;
      *(double *)&v45[3] = v42;
      long long v46 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      ScrollViewNode.commitScrollTransaction(_:value:)(v45, v41, v42);
      swift_release();
    }
  }
  if (!*(void *)(v2 + 24) || *(double *)(v2 + 32) == 0.0 || *(double *)(v2 + 40) == 0.0)
  {
    objc_msgSend(v4, sel_invalidate);
    v43 = *(void (**)(uint64_t))(v2 + 80);
    uint64_t v44 = swift_retain();
    v43(v44);
    swift_release();
  }
}

uint64_t ScrollProxyScrollTestRunner.__deallocating_deinit()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScrollProxyScrollTestRunner()
{
  return self;
}

uint64_t getEnumTagSinglePayload for ScrollTest.Parameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = v3 - 2;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for ScrollTest.Parameters()
{
  return &type metadata for ScrollTest.Parameters;
}

void protocol witness for ScrollTestRunner.run() in conformance ScrollProxyScrollTestRunner()
{
}

void UIScrollViewTestRunner.run()()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (v1 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_11;
  }
  if (v1 > 0x7FFFFFFF)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }
  double v2 = *(double *)(v0 + 16);
  if ((~*(void *)&v2 & 0x7FF0000000000000) == 0)
  {
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  if (v2 <= -2147483650.0)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (v2 >= 2147483650.0)
  {
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  double v3 = *(double *)(v0 + 24);
  if ((~*(void *)&v3 & 0x7FF0000000000000) == 0)
  {
LABEL_15:
    __break(1u);
    goto LABEL_16;
  }
  if (v3 <= -2147483650.0)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }
  if (v3 < 2147483650.0)
  {
    BOOL v4 = *(void **)(v0 + 40);
    uint64_t v5 = (int)v2;
    uint64_t v6 = (int)v3;
    double v16 = protocol witness for CollectionViewListDataSourceBase.section(forSectionLabelIndex:) in conformance TableDataSourceAdaptor;
    double v17 = 0;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v13 = 1107296256;
    double v14 = thunk for @escaping @callee_guaranteed () -> (@owned [AnyHashable : Any]?);
    unint64_t v15 = &block_descriptor_46;
    double v7 = _Block_copy(&aBlock);
    double v8 = (_OWORD *)swift_allocObject();
    long long v9 = *(_OWORD *)(v0 + 16);
    v8[1] = *(_OWORD *)v0;
    v8[2] = v9;
    long long v10 = *(_OWORD *)(v0 + 48);
    v8[3] = *(_OWORD *)(v0 + 32);
    void v8[4] = v10;
    double v16 = partial apply for closure #2 in UIScrollViewTestRunner.run();
    double v17 = v8;
    uint64_t aBlock = MEMORY[0x1E4F143A8];
    uint64_t v13 = 1107296256;
    double v14 = thunk for @escaping @callee_guaranteed (@guaranteed [AnyHashable : Any]?) -> ();
    unint64_t v15 = &block_descriptor_40_2;
    double v11 = _Block_copy(&aBlock);
    outlined retain of UIScrollViewTestRunner(v0);
    swift_release();
    objc_msgSend(v4, sel__performScrollTest_iterations_delta_length_scrollAxis_extraResultsBlock_completionBlock_, 0, v1, v5, v6, 2, v7, v11);
    _Block_release(v11);
    _Block_release(v7);
    return;
  }
LABEL_17:
  __break(1u);
}

void protocol witness for ScrollTestRunner.run() in conformance UIScrollViewTestRunner()
{
}

uint64_t outlined destroy of ScrollTestRunner?(uint64_t a1)
{
  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for ScrollTestRunner?()
{
  if (!lazy cache variable for type metadata for ScrollTestRunner?)
  {
    type metadata accessor for ScrollTestRunner();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ScrollTestRunner?);
    }
  }
}

unint64_t type metadata accessor for ScrollTestRunner()
{
  unint64_t result = lazy cache variable for type metadata for ScrollTestRunner;
  if (!lazy cache variable for type metadata for ScrollTestRunner)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for ScrollTestRunner);
  }
  return result;
}

uint64_t partial apply for closure #1 in ScrollTest.run<A>(in:completion:)()
{
  return closure #1 in ScrollTest.run<A>(in:completion:)(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t outlined init with copy of ScrollTestRunner?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_187D640FC()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in closure #1 in ScrollTest.run<A>(in:completion:)()
{
  return closure #1 in closure #1 in ScrollTest.run<A>(in:completion:)(*(void *)(v0 + 16), *(uint64_t (**)(uint64_t))(v0 + 24));
}

uint64_t outlined init with take of ScrollTestRunner?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t outlined assign with take of ScrollTestRunner?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ScrollTestRunner?();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t objectdestroy_26Tm_1()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t destroy for UIScrollViewTestRunner(uint64_t a1)
{
  return swift_release();
}

uint64_t initializeWithCopy for UIScrollViewTestRunner(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 56);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v5;
  *(void *)(a1 + 56) = v4;
  id v6 = (id)v5;
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for UIScrollViewTestRunner(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)(a2 + 40);
  long long v5 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v4;
  id v6 = v4;

  uint64_t v7 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v7;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for UIScrollViewTestRunner(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);

  uint64_t v4 = *(void *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = v4;
  swift_release();
  return a1;
}

void *type metadata accessor for UIScrollViewTestRunner()
{
  return &unk_1ED43C2F0;
}

uint64_t objectdestroy_29Tm()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in UIScrollViewTestRunner.run()()
{
  return (*(uint64_t (**)(void))(v0 + 64))();
}

uint64_t outlined retain of UIScrollViewTestRunner(uint64_t a1)
{
  id v2 = *(id *)(a1 + 40);
  swift_retain();
  return a1;
}

uint64_t key path setter for EnvironmentValues.listSectionSpacing : EnvironmentValues(uint64_t *a1)
{
  char v1 = *((unsigned char *)a1 + 8);
  char v2 = *((unsigned char *)a1 + 9);
  uint64_t v4 = *a1;
  char v5 = v1;
  char v6 = v2;
  return EnvironmentValues.listSectionSpacing.setter(&v4);
}

uint64_t ListSectionSpacing.value.getter()
{
  uint64_t v1 = 0x4028000000000000;
  if (!*(void *)v0) {
    uint64_t v1 = 0;
  }
  if (v0[8]) {
    return v1;
  }
  else {
    return *(void *)v0;
  }
}

void static ListSectionSpacing.default.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 1;
}

void static ListSectionSpacing.compact.getter(uint64_t a1@<X8>)
{
  *(void *)a1 = 1;
  *(unsigned char *)(a1 + 8) = 1;
}

void static ListSectionSpacing.custom(_:)(uint64_t a1@<X8>, double a2@<D0>)
{
  *(double *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
}

uint64_t View.listSectionSpacing(_:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, MEMORY[0x1E4F408B8]);
  uint64_t v7 = v6;
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v9 = *(void *)(v8 - 8);
  double v10 = MEMORY[0x1F4188790](v8);
  double v12 = (char *)v17 - v11;
  unsigned __int8 v13 = *((unsigned char *)a1 + 8);
  uint64_t v18 = *a1;
  __int16 v19 = v13;
  MEMORY[0x18C113660](&v18, a2, v7, a3, v10);
  swift_getKeyPath();
  unsigned __int8 v14 = *((unsigned char *)a1 + 8);
  uint64_t v18 = *a1;
  __int16 v19 = v14;
  unint64_t v15 = lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
  v17[0] = a3;
  v17[1] = v15;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t key path getter for EnvironmentValues.listSectionSpacing : EnvironmentValues, serialized(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t sub_187D64830(uint64_t *a1)
{
  char v1 = *((unsigned char *)a1 + 8);
  char v2 = *((unsigned char *)a1 + 9);
  uint64_t v4 = *a1;
  char v5 = v1;
  char v6 = v2;
  return EnvironmentValues.listSectionSpacing.setter(&v4);
}

unint64_t lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, MEMORY[0x1E4F408B8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>);
  }
  return result;
}

uint64_t View.listSectionSpacing(_:)(uint64_t a1, uint64_t a2, double a3)
{
  double v4 = a3;
  char v5 = 0;
  return View.listSectionSpacing(_:)((uint64_t *)&v4, a1, a2);
}

uint64_t View.listSectionSpacing(_:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v18[1] = a4;
  type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(255, &lazy cache variable for type metadata for _TraitWritingModifier<ListSectionSpacingTraitKey>, (uint64_t)&type metadata for ListSectionSpacingTraitKey, (uint64_t)&protocol witness table for ListSectionSpacingTraitKey, MEMORY[0x1E4F408B8]);
  uint64_t v8 = v7;
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  double v11 = MEMORY[0x1F4188790](v9);
  unsigned __int8 v13 = (char *)v18 - v12;
  uint64_t v14 = *a1;
  char v15 = *((unsigned char *)a1 + 8);
  LOBYTE(a1) = *((unsigned char *)a1 + 9);
  uint64_t v19 = v14;
  char v20 = v15;
  char v21 = (char)a1;
  MEMORY[0x18C113660](&v19, a2, v8, a3, v11);
  swift_getKeyPath();
  uint64_t v19 = v14;
  char v20 = v15;
  char v21 = (char)a1;
  unint64_t v16 = lazy protocol witness table accessor for type _TraitWritingModifier<ListSectionSpacingTraitKey> and conformance _TraitWritingModifier<A>();
  v18[2] = a3;
  v18[3] = v16;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_187D64AEC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm_0(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))EnvironmentValues.listSectionSpacing.setter);
}

uint64_t static UseCompactSectionSpacingTraitKey.defaultValue.getter()
{
  return 0;
}

uint64_t (*EnvironmentValues.listSectionSpacing.modify(void *a1))()
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listSectionSpacing.modify;
}

uint64_t EnvironmentValues.listSectionSpacing.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t key path getter for EnvironmentValues.listSectionSpacing : EnvironmentValues@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  uint64_t result = swift_release_n();
  *(void *)a2 = v4;
  *(unsigned char *)(a2 + 8) = v5;
  *(unsigned char *)(a2 + 9) = v6;
  return result;
}

uint64_t EnvironmentValues.listSectionSpacing.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t (*EnvironmentValues._listSectionSpacing.modify(void *a1))()
{
  long long v3 = malloc(0x28uLL);
  *a1 = v3;
  v3[4] = v1;
  if (*(void *)(v1 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return EnvironmentValues.listSectionSpacing.modify;
}

void EnvironmentValues.listSectionSpacing.modify(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (*a1)[4];
  char v3 = *((unsigned char *)*a1 + 8);
  char v4 = *((unsigned char *)*a1 + 9);
  (*a1)[2] = **a1;
  v1[24] = v3;
  v1[25] = v4;
  type metadata accessor for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey>, (uint64_t)&unk_1ED45CF18, (uint64_t)&protocol witness table for ListSectionSpacingEnvironmentKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ListSectionSpacingEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v2 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  swift_release();

  free(v1);
}

uint64_t sub_187D65258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return key path getter for EnvironmentValues.listSectionSpacing : EnvironmentValues(a1, a2);
}

uint64_t sub_187D65270(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return keypath_set_3Tm_0(a1, a2, a3, a4, (uint64_t (*)(uint64_t *))EnvironmentValues._listSectionSpacing.setter);
}

uint64_t keypath_set_3Tm_0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t *))
{
  char v5 = *((unsigned char *)a1 + 8);
  char v6 = *((unsigned char *)a1 + 9);
  uint64_t v8 = *a1;
  char v9 = v5;
  char v10 = v6;
  return a5(&v8);
}

ValueMetadata *type metadata accessor for ListSectionSpacingTraitKey()
{
  return &type metadata for ListSectionSpacingTraitKey;
}

ValueMetadata *type metadata accessor for UseCompactSectionSpacingTraitKey()
{
  return &type metadata for UseCompactSectionSpacingTraitKey;
}

uint64_t sub_187D652F4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<ListSectionSpacing?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListSectionSpacing?>)
  {
    type metadata accessor for ListSectionSpacing?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<ListSectionSpacing?>);
    }
  }
}

void type metadata accessor for ListSectionSpacing?()
{
  if (!lazy cache variable for type metadata for ListSectionSpacing?)
  {
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ListSectionSpacing?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<ListSectionSpacing?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<ListSectionSpacing?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

void *type metadata accessor for ListSectionSpacingEnvironmentKey()
{
  return &unk_1ED45CF18;
}

uint64_t View.accessibilityDisabled()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  double v5 = MEMORY[0x1F4188790](v3);
  uint64_t v7 = (char *)v9 - v6;
  MEMORY[0x18C113660](v5);
  swift_getKeyPath();
  char v10 = 0;
  v9[1] = a2;
  v9[2] = &protocol witness table for DisableAccessibilityNodesModifier;
  swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t ModifiedContent<>.accessibilityHidden(_:)@<X0>(char a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (a1) {
    uint64_t v5 = 0x400000004;
  }
  else {
    uint64_t v5 = 0x400000000;
  }
  uint64_t v8 = v5;
  uint64_t v6 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)&v8, 1, a2, MEMORY[0x1E4F40AA8], MEMORY[0x1E4F40AA0], v6, a3);
}

uint64_t View.accessibilityHidden(_:isEnabled:)(unsigned __int8 a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  if (a1 & a2) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(inited + 32) = v9;
  swift_bridgeObjectRelease();
  if (a1 & 1 | ((a2 & 1) == 0)) {
    int v10 = v9;
  }
  else {
    int v10 = 4;
  }
  v12[0] = v9;
  v12[1] = v10;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)v12, 1, a3, MEMORY[0x1E4F40AA8], a4);
}

uint64_t ModifiedContent<>.accessibilityHidden(_:isEnabled:)@<X0>(unsigned __int8 a1@<W0>, unsigned __int8 a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  if (a1 & a2) {
    int v9 = 4;
  }
  else {
    int v9 = 0;
  }
  *(_DWORD *)(inited + 32) = v9;
  swift_bridgeObjectRelease();
  if (a1 & 1 | ((a2 & 1) == 0)) {
    int v10 = v9;
  }
  else {
    int v10 = 4;
  }
  v13[0] = v9;
  v13[1] = v10;
  uint64_t v11 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)v13, 1, a3, MEMORY[0x1E4F40AA8], MEMORY[0x1E4F40AA0], v11, a4);
}

void type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>()
{
  if (!lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>)
  {
    unint64_t v0 = type metadata accessor for _ContiguousArrayStorage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<AccessibilityVisibility>);
    }
  }
}

uint64_t View.accessibilityHidden(_:)(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  int v6 = a1;
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  int v8 = 4 * (a1 & 1);
  *(_DWORD *)(inited + 32) = v8;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0 || v6 == 2) {
    int v10 = 0;
  }
  else {
    int v10 = 4;
  }
  v12[0] = 4 * (a1 & 1);
  v12[1] = v10 | v8;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)v12, 1, a2, MEMORY[0x1E4F40AA8], a3);
}

uint64_t ModifiedContent<>.accessibilityHidden(_:)@<X0>(unsigned __int8 a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6 = a1;
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  int v8 = 4 * (a1 & 1);
  *(_DWORD *)(inited + 32) = v8;
  swift_bridgeObjectRelease();
  if ((a1 & 1) != 0 || v6 == 2) {
    int v10 = 0;
  }
  else {
    int v10 = 4;
  }
  v13[0] = 4 * (a1 & 1);
  v13[1] = v10 | v8;
  uint64_t v11 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>((unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)(MEMORY[0x1E4F40AA8], (uint64_t)v13, 1, a2, MEMORY[0x1E4F40AA8], MEMORY[0x1E4F40AA0], v11, a3);
}

uint64_t protocol witness for static ViewInputsModifier._makeViewInputs(modifier:inputs:) in conformance DisableAccessibilityNodesModifier()
{
  return PreferencesInputs.remove<A>(_:)();
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DisableAccessibilityNodesModifier(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[5];
  uint64_t v7 = a2[6];
  int v8 = *((_DWORD *)a2 + 20);
  uint64_t v20 = *a2;
  int v21 = v4;
  uint64_t v22 = v5;
  long long v23 = *(_OWORD *)(a2 + 3);
  uint64_t v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 7);
  uint64_t v27 = a2[9];
  int v28 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesInputs.remove<A>(_:)();
  uint64_t v11 = v20;
  int v12 = v21;
  uint64_t v13 = v5;
  long long v14 = v23;
  uint64_t v15 = v6;
  uint64_t v16 = v7;
  long long v17 = v26;
  uint64_t v18 = v27;
  int v19 = v28;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v9 = swift_bridgeObjectRetain();
  a3(v9, &v11);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DisableAccessibilityNodesModifier(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier();

  return MEMORY[0x1F40FF7D0](a1, a2, a3, a4, a5, v10);
}

void protocol witness for ViewModifier.body(content:) in conformance DisableAccessibilityNodesModifier()
{
}

void AccessibilityVisibilityStorageProxy.init()(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t AccessibilityVisibilityStorageProxy.isElement.getter()
{
  if (*v0) {
    return 1;
  }
  else {
    return ~(2 * v0[4]) & 2;
  }
}

uint64_t AccessibilityVisibilityStorageProxy.isContainer.getter()
{
  if ((*v0 & 2) != 0) {
    return 1;
  }
  else {
    return ~v0[4] & 2;
  }
}

uint64_t AccessibilityVisibilityStorageProxy.resolvesToHidden.getter()
{
  if ((*(_DWORD *)v0 & 4) != 0) {
    return 1;
  }
  if ((*(unsigned char *)(v0 + 4) & 4) != 0) {
    return 0;
  }
  return (*(_DWORD *)v0 >> 3) & 1;
}

BOOL AccessibilityVisibilityStorageProxy.isDefault.getter()
{
  return *v0 == 0;
}

BOOL static AccessibilityVisibilityStorageProxy.== infix(_:_:)(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

void AccessibilityVisibilityStorageProxy.hash(into:)()
{
  Swift::UInt32 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

uint64_t protocol witness for CodingKey.stringValue.getter in conformance AccessibilityVisibilityStorageProxy.CodingKeys()
{
  return 0x65756C6176;
}

uint64_t protocol witness for CodingKey.init(stringValue:) in conformance AccessibilityVisibilityStorageProxy.CodingKeys@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x65756C6176 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = _stringCompareWithSmolCheck(_:_:expecting:)();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance AccessibilityVisibilityStorageProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance AccessibilityVisibilityStorageProxy.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t AccessibilityVisibilityStorageProxy.encode(to:)(void *a1)
{
  unint64_t v2 = v1;
  type metadata accessor for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  int v8 = (char *)v10 - v7;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  v10[1] = *v2;
  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
  lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
  KeyedEncodingContainer.encode<A>(_:forKey:)();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys);
  }
  return result;
}

Swift::Int AccessibilityVisibilityStorageProxy.hashValue.getter()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t AccessibilityVisibilityStorageProxy.init(from:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  type metadata accessor for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>(0, &lazy cache variable for type metadata for KeyedDecodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v9 = (char *)v11 - v8;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
  dispatch thunk of Decoder.container<A>(keyedBy:)();
  if (!v2)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
    lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>(&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
    KeyedDecodingContainer.decode<A>(_:forKey:)();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *a2 = v11[1];
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

BOOL protocol witness for static Equatable.== infix(_:_:) in conformance AccessibilityVisibilityStorageProxy(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1];
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance AccessibilityVisibilityStorageProxy()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance AccessibilityVisibilityStorageProxy()
{
  Swift::UInt32 v1 = v0[1];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance AccessibilityVisibilityStorageProxy()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Hasher.init(_seed:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void type metadata accessor for KeyedEncodingContainer<AccessibilityVisibilityStorageProxy.CodingKeys>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy.CodingKeys and conformance AccessibilityVisibilityStorageProxy.CodingKeys();
    unint64_t v7 = a3(a1, &unk_1ED460F90, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy;
  if (!lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityVisibilityStorageProxy and conformance AccessibilityVisibilityStorageProxy);
  }
  return result;
}

uint64_t protocol witness for Decodable.init(from:) in conformance AccessibilityVisibilityStorageProxy@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return AccessibilityVisibilityStorageProxy.init(from:)(a1, a2);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance AccessibilityVisibilityStorageProxy(void *a1)
{
  return AccessibilityVisibilityStorageProxy.encode(to:)(a1);
}

ValueMetadata *type metadata accessor for AccessibilityVisibilityStorageProxy()
{
  return &type metadata for AccessibilityVisibilityStorageProxy;
}

unsigned char *storeEnumTagSinglePayload for AccessibilityVisibilityStorageProxy.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187D66570);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

void *type metadata accessor for AccessibilityVisibilityStorageProxy.CodingKeys()
{
  return &unk_1ED460F90;
}

ValueMetadata *type metadata accessor for DisableAccessibilityNodesModifier()
{
  return &type metadata for DisableAccessibilityNodesModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in DisableAccessibilityNodesModifier()
{
  return &protocol witness table for DisableAccessibilityNodesModifier;
}

unint64_t lazy protocol witness table accessor for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier()
{
  unint64_t result = lazy protocol witness table cache variable for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier;
  if (!lazy protocol witness table cache variable for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisableAccessibilityNodesModifier and conformance DisableAccessibilityNodesModifier);
  }
  return result;
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance EmptyControlWidgetConfiguration()
{
}

uint64_t static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(a1, a2, a3);
}

{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t AssociatedTypeWitness;
  uint64_t AssociatedConformanceWitness;
  uint64_t v18;
  int v19;
  uint64_t result;
  Swift::String v21;
  uint64_t v22;
  int v23;
  int v24;
  char v25;
  uint64_t v26;
  long long v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  long long v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  unsigned char v37[4];
  int v38;
  uint64_t v39;
  uint64_t v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  long long v45;
  uint64_t v46;
  uint64_t v47;
  int v48;

  int v3 = *a1;
  unsigned int v4 = *a2;
  uint64_t v5 = *((_DWORD *)a2 + 2);
  unint64_t v6 = a2[2];
  uint64_t v27 = *(_OWORD *)(a2 + 3);
  uint64_t v8 = a2[5];
  unint64_t v7 = a2[6];
  uint64_t v9 = *((_DWORD *)a2 + 14);
  if (AGTypeID.isValueType.getter())
  {
    static DynamicPropertyCache.fields(of:)();
    unint64_t v10 = v42;
    uint64_t v11 = v43;
    int v12 = v44;
    uint64_t v13 = HIDWORD(v44);
    double v42 = v4;
    LODWORD(v43) = v5;
    uint64_t v44 = v6;
    v45 = v27;
    long long v46 = v8;
    long long v47 = v7;
    long long v48 = v9;
    long long v23 = v13;
    uint64_t v24 = v3;
    uint64_t v38 = v3;
    long long v26 = v11;
    int v28 = v10;
    HIDWORD(v31) = HIDWORD(v11);
    uint64_t v25 = v12;
    type metadata accessor for ControlWidgetConfigurationBodyAccessor();
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    BodyAccessor.makeBody(container:inputs:fields:)();
    long long v14 = v40;
    uint64_t v22 = v39;
    uint64_t v15 = v41;
    AssociatedTypeWitness = swift_getAssociatedTypeWitness();
    CGFloat v30 = v4;
    LODWORD(v31) = v5;
    v32 = v6;
    uint64_t v33 = v45;
    BOOL v34 = v8;
    uint64_t v35 = v7;
    double v36 = v48;
    AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
    (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness
                                                                                        + 32))(&v39, v37, &v30, AssociatedTypeWitness, AssociatedConformanceWitness);
    uint64_t v18 = v39;
    int v19 = v40;
    if ((v15 & 1) == 0)
    {
      double v39 = v22;
      double v40 = v14;
      uint64_t v38 = v24;
      CGFloat v30 = v28;
      CGFloat v31 = v26;
      LOBYTE(v32) = v25;
      HIDWORD(v32) = v23;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    unint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(void *)a3 = v18;
    *(_DWORD *)(a3 + 8) = v19;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v21._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    unint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  if (AGTypeID.isValueType.getter())
  {
    static DynamicPropertyCache.fields(of:)();
    long long v5 = v25;
    char v6 = v26;
    int v7 = DWORD1(v26);
    long long v8 = a2[1];
    long long v22 = *a2;
    long long v23 = v8;
    v24[0] = a2[2];
    *(_OWORD *)((char *)v24 + 12) = *(long long *)((char *)a2 + 44);
    int v21 = a1;
    outlined retain of _ViewInputs((uint64_t)a2);
    type metadata accessor for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>();
    lazy protocol witness table accessor for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>(&lazy protocol witness table cache variable for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>, (void (*)(uint64_t))type metadata accessor for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>);
    BodyAccessor.makeBody(container:inputs:fields:)();
    uint64_t v9 = *((void *)&v16 + 1);
    uint64_t v10 = v16;
    char v11 = v17;
    long long v25 = v22;
    long long v26 = v23;
    v27[0] = v24[0];
    *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)((char *)v24 + 12);
    specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(v19, &v25, (uint64_t)&v16);
    uint64_t v12 = v16;
    int v13 = DWORD2(v16);
    if ((v11 & 1) == 0)
    {
      uint64_t v19 = v10;
      uint64_t v20 = v9;
      int v21 = a1;
      long long v16 = v5;
      char v17 = v6;
      int v18 = v7;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    outlined release of _ViewInputs((uint64_t)&v25);
    uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(void *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  long long v5;
  char v6;
  int v7;
  long long v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  uint64_t result;
  long long v16;
  char v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  long long v22;
  long long v23;
  _OWORD v24[2];
  long long v25;
  long long v26;
  _OWORD v27[3];

  if (AGTypeID.isValueType.getter())
  {
    static DynamicPropertyCache.fields(of:)();
    long long v5 = v25;
    char v6 = v26;
    int v7 = DWORD1(v26);
    long long v8 = a2[1];
    long long v22 = *a2;
    long long v23 = v8;
    v24[0] = a2[2];
    *(_OWORD *)((char *)v24 + 12) = *(long long *)((char *)a2 + 44);
    int v21 = a1;
    outlined retain of _ViewInputs((uint64_t)a2);
    type metadata accessor for ControlWidgetConfigurationBodyAccessor<Never>();
    lazy protocol witness table accessor for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>(&lazy protocol witness table cache variable for type ControlWidgetConfigurationBodyAccessor<Never> and conformance ControlWidgetConfigurationBodyAccessor<A>, (void (*)(uint64_t))type metadata accessor for ControlWidgetConfigurationBodyAccessor<Never>);
    BodyAccessor.makeBody(container:inputs:fields:)();
    uint64_t v9 = *((void *)&v16 + 1);
    uint64_t v10 = v16;
    char v11 = v17;
    long long v25 = v22;
    long long v26 = v23;
    v27[0] = v24[0];
    *(_OWORD *)((char *)v27 + 12) = *(_OWORD *)((char *)v24 + 12);
    specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(&v16, v19, &v25);
    uint64_t v12 = v16;
    int v13 = DWORD2(v16);
    if ((v11 & 1) == 0)
    {
      uint64_t v19 = v10;
      uint64_t v20 = v9;
      int v21 = a1;
      long long v16 = v5;
      char v17 = v6;
      int v18 = v7;
      _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
    }
    outlined release of _ViewInputs((uint64_t)&v25);
    uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
    *(void *)a3 = v12;
    *(_DWORD *)(a3 + 8) = v13;
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t type metadata accessor for ControlWidgetConfigurationBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t ControlWidgetConfigurationBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for ControlWidgetConfigurationBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance ControlWidgetConfigurationBodyAccessor<A>(uint64_t result, char a2)
{
  return ControlWidgetConfigurationBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance Never@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(v3, v6, a3);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage();
  uint64_t result = LimitedAvailabilityControlWidgetConfiguration.Storage.__allocating_init(config:)(a1);
  *a2 = result;
  return result;
}

uint64_t type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.storage.getter()
{
  return swift_retain();
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.storage.setter(uint64_t a1)
{
  uint64_t result = swift_release();
  *Swift::UInt32 v1 = a1;
  return result;
}

uint64_t (*LimitedAvailabilityControlWidgetConfiguration.storage.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.__allocating_init(config:)(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v2 + 96) - 8) + 32))(v2 + *(void *)(*(void *)v2 + 112), a1);
  return v2;
}

void LimitedAvailabilityControlWidgetConfiguration.body.getter()
{
}

uint64_t static LimitedAvailabilityControlWidgetConfiguration._makeControlWidgetConfiguration(control:inputs:)@<X0>(uint64_t a1@<X8>)
{
  PreferencesOutputs.init()();
  PreferencesInputs.makeIndirectOutputs()();
  swift_bridgeObjectRelease();
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityControlWidgetConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityControlWidgetConfiguration, MEMORY[0x1E4F3F590]);
  _GraphValue.value.getter();
  id v1 = (id)AGSubgraphGetCurrent();
  if (!v1) {
    __break(1u);
  }
  uint64_t v2 = v1;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  Attribute.init<A>(body:value:flags:update:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  uint64_t result = PreferencesOutputs.setIndirectDependency(_:)();
  *(void *)a1 = v5;
  *(_DWORD *)(a1 + 8) = v6;
  return result;
}

void LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue()()
{
  if (!*(void *)(v0 + 96))
  {
    id v1 = (id)AGSubgraphGetGraph();
    uint64_t v2 = (void *)AGSubgraphCreate();

    *(void *)(v0 + 96) = v2;
    id v4 = v2;
    AGSubgraphAddChild();
    AGGraphClearUpdate();
    id v3 = (id)AGSubgraphGetCurrent();
    AGSubgraphSetCurrent();
    closure #1 in LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue()(v0);
    AGSubgraphSetCurrent();

    AGGraphSetUpdate();
  }
}

uint64_t closure #1 in LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs.updateValue()(uint64_t a1)
{
  void (*v16)(uint64_t *__return_ptr, uint64_t *, uint64_t *);
  long long v18;
  long long v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;

  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 64);
  uint64_t v20 = *(void *)(a1 + 16);
  int v21 = *(void *)(a1 + 56);
  long long v22 = *(_DWORD *)(a1 + 24);
  long long v23 = *(_DWORD *)(a1 + 72);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  swift_beginAccess();
  int v6 = *(_DWORD *)(v2 + 16);
  uint64_t v7 = *(void *)(v2 + 24);
  int v18 = *(_OWORD *)(v2 + 48);
  uint64_t v19 = *(_OWORD *)(v2 + 32);
  uint64_t v8 = *(void *)(v2 + 64);
  uint64_t v9 = *(void *)(v2 + 72);
  char v10 = *(unsigned char *)(v2 + 80);
  char v11 = *(unsigned char *)(v2 + 81);
  uint64_t v12 = *(void *)(v2 + 88);
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, (unint64_t *)&lazy cache variable for type metadata for MutableBox<CachedEnvironment>, MEMORY[0x1E4F3FEE0], MEMORY[0x1E4F3F398]);
  uint64_t v13 = swift_allocObject();
  *(_DWORD *)(v13 + 16) = v6;
  *(void *)(v13 + 24) = v7;
  *(_OWORD *)(v13 + 32) = v19;
  *(_OWORD *)(v13 + 48) = v18;
  *(void *)(v13 + 64) = v8;
  *(void *)(v13 + 72) = v9;
  *(unsigned char *)(v13 + 80) = v10;
  *(unsigned char *)(v13 + 81) = v11;
  *(void *)(v13 + 88) = v12;
  swift_retain();
  uint64_t v14 = *(void *)(a1 + 80);
  LODWORD(v8) = *(_DWORD *)(a1 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v15 = *(void *)AGGraphGetValue();
  swift_bridgeObjectRetain();
  swift_retain();
  _GraphValue.init(_:)();
  long long v26 = v20;
  uint64_t v27 = v22;
  int v28 = v13;
  CGFloat v29 = v4;
  CGFloat v30 = v5;
  CGFloat v31 = v21;
  v32 = v3;
  uint64_t v33 = v23;
  long long v16 = *(void (**)(uint64_t *__return_ptr, uint64_t *, uint64_t *))(*(void *)v15 + 80);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v16(&v34, &v24, &v26);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  long long v26 = v14;
  uint64_t v27 = v8;
  uint64_t v24 = v34;
  long long v25 = v35;
  PreferencesOutputs.attachIndirectOutputs(to:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance LimitedAvailabilityControlWidgetConfiguration()
{
}

uint64_t protocol witness for static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:) in conformance LimitedAvailabilityControlWidgetConfiguration@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(v3, v6, a3);
}

void LimitedAvailabilityControlWidgetConfiguration.StorageBase.makeWidgetControlConfiguration(control:inputs:)()
{
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.StorageBase.deinit()
{
  return v0;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.StorageBase.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.Child.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  AGGraphGetValue();
  type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage();
  swift_retain();
  uint64_t v4 = swift_dynamicCastClassUnconditional();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v4 + *(void *)(*(void *)v4 + 112), a1);

  return swift_release();
}

uint64_t protocol witness for Rule.value.getter in conformance LimitedAvailabilityControlWidgetConfiguration.Storage<A>.Child@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return LimitedAvailabilityControlWidgetConfiguration.Storage.Child.value.getter(*(void *)(a1 + 16), a2);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.config.getter@<X0>(uint64_t a1@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 96) - 8) + 16))(a1, v1 + *(void *)(*(void *)v1 + 112));
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.init(config:)(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(*(void *)(*(void *)v1 + 96) - 8) + 32))(v1 + *(void *)(*(void *)v1 + 112), a1);
  return v1;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.makeWidgetControlConfiguration(control:inputs:)(_DWORD *a1, uint64_t *a2)
{
  int v3 = v2;
  uint64_t v5 = *v3;
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v8 = a2[2];
  int v9 = *((_DWORD *)a2 + 14);
  uint64_t v10 = *(void *)(*v3 + 96);
  LODWORD(v16) = *a1;
  type metadata accessor for _GraphValue<LimitedAvailabilityCommandContent>(0, &lazy cache variable for type metadata for _GraphValue<LimitedAvailabilityControlWidgetConfiguration>, (uint64_t)&type metadata for LimitedAvailabilityControlWidgetConfiguration, MEMORY[0x1E4F3F590]);
  long long v15 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.value.getter();
  uint64_t v13 = *(void *)(v5 + 104);
  type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage.Child();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v16 = v6;
  int v17 = v7;
  uint64_t v18 = v8;
  uint64_t v19 = v11;
  uint64_t v20 = v12;
  long long v21 = v15;
  int v22 = v9;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(v13 + 32))(v23, &v16, v10, v13);
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 96) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));
  return v0;
}

uint64_t LimitedAvailabilityControlWidgetConfiguration.Storage.__deallocating_deinit()
{
  (*(void (**)(uint64_t))(*(void *)(*(void *)(*(void *)v0 + 96) - 8) + 8))(v0 + *(void *)(*(void *)v0 + 112));

  return swift_deallocClassInstance();
}

void protocol witness for ControlWidgetConfiguration.body.getter in conformance ControlWidgetConfigurationModifier_Content<A>()
{
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs()
{
  unint64_t result = lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs and conformance LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs);
  }
  return result;
}

_UNKNOWN **associated type witness table accessor for ControlWidgetConfiguration.Body : ControlWidgetConfiguration in Never()
{
  return &protocol witness table for Never;
}

unint64_t instantiation function for generic protocol witness table for LimitedAvailabilityControlWidgetConfiguration(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration()
{
  unint64_t result = lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration;
  if (!lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration);
  }
  return result;
}

uint64_t associated type witness table accessor for ControlWidgetConfiguration.Body : ControlWidgetConfiguration in LimitedAvailabilityControlWidgetConfiguration()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t dispatch thunk of ControlWidgetConfiguration.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static ControlWidgetConfiguration._makeWidgetControlConfiguration(control:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

ValueMetadata *type metadata accessor for ControlWidgetConfigurationBuilder()
{
  return &type metadata for ControlWidgetConfigurationBuilder;
}

ValueMetadata *type metadata accessor for LimitedAvailabilityControlWidgetConfiguration()
{
  return &type metadata for LimitedAvailabilityControlWidgetConfiguration;
}

uint64_t type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.StorageBase()
{
  return self;
}

uint64_t method lookup function for LimitedAvailabilityControlWidgetConfiguration.StorageBase(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityControlWidgetConfiguration.StorageBase);
}

uint64_t method lookup function for LimitedAvailabilityControlWidgetConfiguration.Storage(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for LimitedAvailabilityControlWidgetConfiguration.Storage);
}

uint64_t dispatch thunk of LimitedAvailabilityControlWidgetConfiguration.Storage.__allocating_init(config:)()
{
  return (*(uint64_t (**)(void))(v0 + 120))();
}

_UNKNOWN **sub_187D67E2C()
{
  return &protocol witness table for Never;
}

void *type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.IndirectOutputs()
{
  return &unk_1ED465608;
}

uint64_t partial apply for closure #1 in ControlWidgetConfigurationBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t type metadata accessor for LimitedAvailabilityControlWidgetConfiguration.Storage.Child()
{
  return __swift_instantiateGenericMetadata();
}

void specialized ControlWidgetConfiguration.controlWidgetConfigurationBodyError()()
{
  _StringGuts.grow(_:)(35);
  swift_bridgeObjectRelease();
  v0._countAndFlagsBits = _typeName(_:qualified:)();
  String.append(_:)(v0);
  swift_bridgeObjectRelease();
  v1._countAndFlagsBits = 46;
  v1._object = (void *)0xE100000000000000;
  String.append(_:)(v1);
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

void specialized PrimitiveControlWidgetConfiguration.body.getter()
{
}

void type metadata accessor for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>()
{
  if (!lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>)
  {
    lazy protocol witness table accessor for type LimitedAvailabilityControlWidgetConfiguration and conformance LimitedAvailabilityControlWidgetConfiguration();
    unint64_t v0 = type metadata accessor for ControlWidgetConfigurationBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration>);
    }
  }
}

void type metadata accessor for ControlWidgetConfigurationBodyAccessor<Never>()
{
  if (!lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<Never>)
  {
    unint64_t v0 = type metadata accessor for ControlWidgetConfigurationBodyAccessor();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ControlWidgetConfigurationBodyAccessor<Never>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ControlWidgetConfigurationBodyAccessor<LimitedAvailabilityControlWidgetConfiguration> and conformance ControlWidgetConfigurationBodyAccessor<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in LimitedAvailabilityControlWidgetConfiguration.Storage<A>.Child()
{
  return swift_getWitnessTable();
}

void static WindowPlacement.Position.controlPanel.getter()
{
}

void static WindowPlacement.Position.above(_:)()
{
}

void WindowPlacement.init(_:size:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(x:y:width:height:)()
{
}

void WindowPlacement.init(_:width:height:)()
{
}

void WindowPlacement.init(_:)()
{
}

void WindowPlacement.init(_:width:height:depth:)()
{
}

void WindowPlacement.init(position:size:)()
{
}

{
  _diagnoseUnavailableCodeReached()();
  __break(1u);
}

void WindowPlacement.init(position:size:display:)()
{
}

void WindowPlacement.init(x:y:width:height:display:)()
{
}

void WindowPlacement.init(relativeTo:size:display:)()
{
}

void WindowPlacement.init(relativeTo:width:height:display:)()
{
}

void WindowPlacement.init(position:)()
{
}

void WindowPlacement.init(position:width:height:depth:)()
{
}

void WindowPlacementContext.defaultDisplay.getter()
{
}

void WindowPlacementContext.windows.getter()
{
}

void WindowPlacementContext.activeWindows.getter()
{
}

void WindowPlacementContext.currentDisplay.getter()
{
}

void WindowPlacementContext.focusedDisplay.getter()
{
}

void WindowPlacementContext.displays.getter()
{
}

void DisplayProxy.bounds.getter()
{
}

void DisplayProxy.safeAreaInsets.getter()
{
}

void DisplayProxy.visibleRect.getter()
{
}

void static DisplayProxy.== infix(_:_:)()
{
}

void WindowProxy.id.getter()
{
}

void WindowProxy.phase.getter()
{
}

void WindowProxy.size.getter()
{
}

void WindowProxy.depth.getter()
{
}

ValueMetadata *type metadata accessor for WindowPlacement()
{
  return &type metadata for WindowPlacement;
}

ValueMetadata *type metadata accessor for WindowPlacement.Position()
{
  return &type metadata for WindowPlacement.Position;
}

ValueMetadata *type metadata accessor for WindowPlacementContext()
{
  return &type metadata for WindowPlacementContext;
}

uint64_t getEnumTagSinglePayload for DisplayProxy(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisplayProxy(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

ValueMetadata *type metadata accessor for DisplayProxy()
{
  return &type metadata for DisplayProxy;
}

ValueMetadata *type metadata accessor for WindowProxy()
{
  return &type metadata for WindowProxy;
}

void static WindowPlacement.Position.utilityPanel.getter()
{
}

void static WindowPlacement.Position.trailing(_:)()
{
}

void static WindowPlacement.Position.leading(_:)()
{
}

void static WindowPlacement.Position.below(_:)()
{
}

void static WindowPlacement.Position.replacing(_:)()
{
}

void static WindowPlacement.Position.== infix(_:_:)()
{
  static DisplayProxy.== infix(_:_:)();
}

void static WindowPlacement.== infix(_:_:)()
{
  static DisplayProxy.== infix(_:_:)();
}

uint64_t Form.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t Form.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t IsFooterBearing = type metadata accessor for ContentIsFooterBearing();
  lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  uint64_t v6 = *(void *)(a1 + 24);
  type metadata accessor for StaticSourceWriter();
  uint64_t v26 = IsFooterBearing;
  uint64_t v27 = v4;
  uint64_t v28 = type metadata accessor for ModifiedContent();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for StaticIf();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v17 - v12;
  uint64_t v19 = v4;
  uint64_t v20 = v6;
  uint64_t v21 = v2;
  v17[4] = v4;
  v17[5] = v6;
  uint64_t v18 = v2;
  unint64_t v24 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  long long v25 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v16 = swift_getWitnessTable();
  StaticIf<>.init(_:then:else:)();
  uint64_t v22 = v6;
  uint64_t v23 = v16;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v8 + 8);
  v14(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v14)(v13, v7);
}

uint64_t type metadata accessor for ContentIsFooterBearing()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content()
{
  unint64_t result = lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content);
  }
  return result;
}

uint64_t closure #2 in Form.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v17[1] = a4;
  unint64_t v24 = &type metadata for FormStyleConfiguration.Content;
  uint64_t v25 = a2;
  unint64_t v26 = lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  uint64_t v27 = a3;
  type metadata accessor for StaticSourceWriter();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11);
  uint64_t v13 = (char *)v17 - v12;
  uint64_t v19 = a2;
  uint64_t v20 = a3;
  uint64_t v21 = a1;
  unint64_t v14 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for FormStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in closure #2 in Form.body.getter, (uint64_t)v18, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t)&type metadata for FormStyleConfiguration.Content, a2, v14);
  unint64_t v22 = v14;
  uint64_t v23 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v10);
  long long v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, v7);
}

uint64_t partial apply for closure #2 in Form.body.getter@<X0>(uint64_t a1@<X8>)
{
  return closure #2 in Form.body.getter(v1[4], v1[2], v1[3], a1);
}

unint64_t lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle;
  if (!lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle;
  if (!lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ResolvedFormStyle and conformance ResolvedFormStyle);
  }
  return result;
}

uint64_t closure #1 in Form.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t Form.init<A, B>(content:footer:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v12 = MEMORY[0x1F4188790](v11);
  unint64_t v14 = (char *)&v18 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = v15(v12);
  a2(v16);
  return FormFooterContent.init(content:footer:)((uint64_t)v14, (uint64_t)v10, a3, a4, a5);
}

uint64_t FormFooterContent.init(content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a3 - 8) + 32))(a5, a1);
  uint64_t v8 = type metadata accessor for FormFooterContent();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(a5 + *(int *)(v8 + 52), a2, a4);
}

uint64_t FormFooterContent.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v4 = a1[2];
  unint64_t v27 = lazy protocol witness table accessor for type FormStyleConfiguration.Content and conformance FormStyleConfiguration.Content();
  uint64_t v5 = a1[4];
  long long v46 = &type metadata for FormStyleConfiguration.Content;
  uint64_t v47 = v4;
  unint64_t v48 = v27;
  uint64_t v49 = v5;
  type metadata accessor for StaticSourceWriter();
  uint64_t v24 = type metadata accessor for ModifiedContent();
  uint64_t v28 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v24);
  uint64_t v23 = (char *)&v22 - v6;
  uint64_t v7 = a1[3];
  unint64_t v25 = lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer();
  uint64_t v8 = a1[5];
  long long v46 = &type metadata for FormStyleConfiguration.Footer;
  uint64_t v47 = v7;
  unint64_t v48 = v25;
  uint64_t v49 = v8;
  type metadata accessor for StaticSourceWriter();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v26 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  unint64_t v14 = (char *)&v22 - v13;
  uint64_t v37 = v4;
  uint64_t v38 = v7;
  uint64_t v39 = v5;
  uint64_t v40 = v8;
  uint64_t v41 = v2;
  uint64_t v15 = v2;
  unint64_t v16 = lazy protocol witness table accessor for type ResolvedFormStyle and conformance ResolvedFormStyle();
  int v17 = v23;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for FormStyleConfiguration.Content, (void (*)(double))partial apply for closure #1 in FormFooterContent.body.getter, (uint64_t)v36, (uint64_t)&type metadata for ResolvedFormStyle, (uint64_t)&type metadata for FormStyleConfiguration.Content, v4, v16);
  uint64_t v31 = v4;
  uint64_t v32 = v7;
  uint64_t v33 = v5;
  uint64_t v34 = v8;
  uint64_t v35 = v15;
  unint64_t v44 = v16;
  v45 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v18 = v24;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for FormStyleConfiguration.Footer, (void (*)(double))partial apply for closure #2 in FormFooterContent.body.getter, (uint64_t)v30, v18, (uint64_t)&type metadata for FormStyleConfiguration.Footer, v7, WitnessTable);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v17, v18);
  uint64_t v42 = WitnessTable;
  v43 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v11);
  uint64_t v20 = *(void (**)(char *, uint64_t))(v26 + 8);
  v20(v11, v9);
  static ViewBuilder.buildExpression<A>(_:)(v14);
  return ((uint64_t (*)(char *, uint64_t))v20)(v14, v9);
}

unint64_t lazy protocol witness table accessor for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer()
{
  unint64_t result = lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer;
  if (!lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FormStyleConfiguration.Footer and conformance FormStyleConfiguration.Footer);
  }
  return result;
}

uint64_t closure #1 in FormFooterContent.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, a2);
}

uint64_t partial apply for closure #1 in FormFooterContent.body.getter()
{
  return partial apply for closure #1 in FormFooterContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in FormFooterContent.body.getter);
}

uint64_t closure #2 in FormFooterContent.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  uint64_t v12 = type metadata accessor for FormFooterContent();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t partial apply for closure #2 in FormFooterContent.body.getter()
{
  return partial apply for closure #1 in FormFooterContent.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in FormFooterContent.body.getter);
}

uint64_t partial apply for closure #1 in FormFooterContent.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t associated type witness table accessor for View.Body : View in Form<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for View.Body : View in FormFooterContent<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for Form(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for Form(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D69654);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for Form()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for FormFooterContent(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(a3 + 24);
  unsigned int v6 = *(_DWORD *)(v4 + 84);
  uint64_t v7 = *(void *)(v5 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v4 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + v9;
  unsigned int v12 = a2 - v10;
  if (a2 <= v10) {
    goto LABEL_24;
  }
  uint64_t v13 = (v11 & ~v9) + *(void *)(*(void *)(v5 - 8) + 64);
  char v14 = 8 * v13;
  if (v13 <= 3)
  {
    unsigned int v16 = ((v12 + ~(-1 << v14)) >> v14) + 1;
    if (HIWORD(v16))
    {
      int v15 = *(_DWORD *)((char *)a1 + v13);
      if (!v15) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 > 0xFF)
    {
      int v15 = *(unsigned __int16 *)((char *)a1 + v13);
      if (!*(unsigned __int16 *)((char *)a1 + v13)) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
    if (v16 < 2)
    {
LABEL_24:
      if (v10)
      {
        if (v6 >= v8) {
          return (*(uint64_t (**)(void))(v4 + 48))();
        }
        else {
          return (*(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v7 + 48))(((unint64_t)a1 + v11) & ~v9, v8, v5);
        }
      }
      return 0;
    }
  }
  int v15 = *((unsigned __int8 *)a1 + v13);
  if (!*((unsigned char *)a1 + v13)) {
    goto LABEL_24;
  }
LABEL_14:
  int v17 = (v15 - 1) << v14;
  if (v13 > 3) {
    int v17 = 0;
  }
  if (v13)
  {
    if (v13 <= 3) {
      int v18 = v13;
    }
    else {
      int v18 = 4;
    }
    switch(v18)
    {
      case 2:
        int v19 = *a1;
        break;
      case 3:
        int v19 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v19 = *(_DWORD *)a1;
        break;
      default:
        int v19 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v19 = 0;
  }
  return v10 + (v19 | v17) + 1;
}

void storeEnumTagSinglePayload for FormFooterContent(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  unsigned int v10 = *(_DWORD *)(v9 + 84);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  if (v10 <= v7) {
    unsigned int v12 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v9 + 84);
  }
  uint64_t v13 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + v11;
  size_t v14 = (v13 & ~v11) + *(void *)(*(void *)(v8 - 8) + 64);
  BOOL v15 = a3 >= v12;
  unsigned int v16 = a3 - v12;
  if (v16 != 0 && v15)
  {
    if (v14 <= 3)
    {
      unsigned int v20 = ((v16 + ~(-1 << (8 * v14))) >> (8 * v14)) + 1;
      if (HIWORD(v20))
      {
        int v17 = 4;
      }
      else if (v20 >= 0x100)
      {
        int v17 = 2;
      }
      else
      {
        int v17 = v20 > 1;
      }
    }
    else
    {
      int v17 = 1;
    }
  }
  else
  {
    int v17 = 0;
  }
  if (v12 < a2)
  {
    unsigned int v18 = ~v12 + a2;
    if (v14 < 4)
    {
      int v19 = (v18 >> (8 * v14)) + 1;
      if (v14)
      {
        int v21 = v18 & ~(-1 << (8 * v14));
        bzero(a1, v14);
        if (v14 == 3)
        {
          *(_WORD *)a1 = v21;
          a1[2] = BYTE2(v21);
        }
        else if (v14 == 2)
        {
          *(_WORD *)a1 = v21;
        }
        else
        {
          *a1 = v21;
        }
      }
    }
    else
    {
      bzero(a1, v14);
      *(_DWORD *)a1 = v18;
      int v19 = 1;
    }
    switch(v17)
    {
      case 1:
        a1[v14] = v19;
        return;
      case 2:
        *(_WORD *)&a1[v14] = v19;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v14] = v19;
        return;
      default:
        return;
    }
  }
  switch(v17)
  {
    case 1:
      a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v14] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187D69B58);
    case 4:
      *(_DWORD *)&a1[v14] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 >= v10)
        {
          uint64_t v24 = *(void (**)(void))(v6 + 56);
          v24();
        }
        else
        {
          unint64_t v22 = (unint64_t)&a1[v13] & ~v11;
          uint64_t v23 = *(void (**)(unint64_t))(v9 + 56);
          v23(v22);
        }
      }
      return;
  }
}

uint64_t type metadata accessor for FormFooterContent()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187D69B98()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D69C98()
{
  return swift_getWitnessTable();
}

BOOL static ContentIsFooterBearing.evaluate(inputs:)(uint64_t a1, uint64_t a2)
{
  if (swift_conformsToProtocol2()) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = 0;
  }
  return v3 != 0;
}

BOOL protocol witness for static ViewInputPredicate.evaluate(inputs:) in conformance ContentIsFooterBearing<A>(uint64_t a1, uint64_t a2)
{
  return static ContentIsFooterBearing.evaluate(inputs:)(a1, *(void *)(a2 + 16));
}

uint64_t partial apply for closure #1 in closure #2 in Form.body.getter()
{
  return closure #1 in Form.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance PrototypePrintingCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(void *, long long *, uint64_t, long long *, void, void, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t specialized static Commands._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  outlined retain of _ViewInputs(a1);
  LOBYTE(v5) = v8;
  specialized static Commands.makeBody(commands:inputs:fields:)();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferencesOutputs.init()();
  swift_bridgeObjectRetain();
  PreferencesOutputs.makePreferenceWriter<A>(inputs:key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  if ((v7 & 1) == 0) {
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a2 = v5;
  *(_DWORD *)(a2 + 8) = v6;
  return result;
}

uint64_t specialized static Commands._makeCommands(content:inputs:)@<X0>(int a1@<W0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v5 = v23;
  char v6 = v24;
  int v7 = DWORD1(v24);
  long long v8 = a2[1];
  long long v20 = *a2;
  long long v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static Commands.makeBody(commands:inputs:fields:)();
  long long v9 = v23;
  char v10 = v24;
  long long v23 = v20;
  long long v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  outlined retain of _ViewInputs((uint64_t)&v23);
  specialized static WithCommandFlag._makeCommands(content:inputs:)(v15, (uint64_t)&v15);
  outlined release of _ViewInputs((uint64_t)&v23);
  uint64_t v11 = v15;
  int v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    long long v19 = v9;
    int v18 = a1;
    long long v15 = v5;
    char v16 = v6;
    int v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

{
  long long v5;
  char v6;
  int v7;
  long long v8;
  long long v9;
  char v10;
  uint64_t v11;
  int v12;
  uint64_t result;
  long long v15;
  char v16;
  int v17;
  int v18;
  long long v19;
  long long v20;
  long long v21;
  _OWORD v22[2];
  long long v23;
  long long v24;
  _OWORD v25[3];

  static DynamicPropertyCache.fields(of:)();
  long long v5 = v23;
  char v6 = v24;
  int v7 = DWORD1(v24);
  long long v8 = a2[1];
  long long v20 = *a2;
  long long v21 = v8;
  v22[0] = a2[2];
  *(_OWORD *)((char *)v22 + 12) = *(long long *)((char *)a2 + 44);
  outlined retain of _ViewInputs((uint64_t)a2);
  LOBYTE(v23) = v24;
  specialized static Commands.makeBody(commands:inputs:fields:)();
  long long v9 = v23;
  char v10 = v24;
  long long v23 = v20;
  long long v24 = v21;
  v25[0] = v22[0];
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)((char *)v22 + 12);
  specialized static Commands._makeCommands(content:inputs:)(&v15, v15, &v23);
  uint64_t v11 = v15;
  int v12 = DWORD2(v15);
  if ((v10 & 1) == 0)
  {
    long long v19 = v9;
    int v18 = a1;
    long long v15 = v5;
    char v16 = v6;
    int v17 = v7;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  outlined release of _ViewInputs((uint64_t)&v23);
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v11;
  *(_DWORD *)(a3 + 8) = v12;
  return result;
}

uint64_t specialized static Commands._makeCommands(content:inputs:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(void *, long long *, uint64_t, long long *, void, void, unint64_t)@<X2>, uint64_t a4@<X8>)
{
  static DynamicPropertyCache.fields(of:)();
  long long v8 = v22;
  unsigned __int8 v9 = v23;
  uint64_t v10 = DWORD1(v23);
  long long v11 = *(_OWORD *)(a2 + 16);
  long long v22 = *(_OWORD *)a2;
  long long v23 = v11;
  *(_OWORD *)long long v24 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v24[12] = *(_OWORD *)(a2 + 44);
  outlined retain of _ViewInputs(a2);
  LOBYTE(v17) = v9;
  a3(v21, &v17, a1, &v22, v8, *((void *)&v8 + 1), v9 | (unint64_t)(v10 << 32));
  uint64_t v13 = *((void *)&v17 + 1);
  uint64_t v12 = v17;
  LOBYTE(a2) = v18;
  PreferencesOutputs.init()();
  uint64_t v16 = v17;
  int v14 = DWORD2(v17);
  if ((a2 & 1) == 0)
  {
    v21[0] = v12;
    v21[1] = v13;
    int v20 = a1;
    long long v17 = v8;
    unsigned __int8 v18 = v9;
    int v19 = v10;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a4 = v16;
  *(_DWORD *)(a4 + 8) = v14;
  return result;
}

uint64_t static Commands._makeCommands(content:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v9 = a2[5];
  uint64_t v8 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  static DynamicPropertyCache.fields(of:)();
  uint64_t v11 = v40;
  uint64_t v12 = v41;
  char v13 = v42;
  int v14 = HIDWORD(v42);
  uint64_t v40 = v5;
  LODWORD(v41) = v6;
  uint64_t v42 = v7;
  long long v43 = *(_OWORD *)(a2 + 3);
  uint64_t v44 = v9;
  uint64_t v45 = v8;
  int v46 = v10;
  int v21 = v14;
  int v22 = v4;
  int v36 = v4;
  uint64_t v25 = v12;
  uint64_t v26 = v11;
  HIDWORD(v29) = HIDWORD(v12);
  char v24 = v13;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  static Commands.makeBody(commands:inputs:fields:)();
  uint64_t v15 = v38;
  uint64_t v23 = v37;
  LOBYTE(v10) = v39;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v28 = v5;
  LODWORD(v29) = v41;
  uint64_t v30 = v7;
  long long v31 = v43;
  uint64_t v32 = v9;
  uint64_t v33 = v45;
  int v34 = v46;
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t *__return_ptr, unsigned char *, uint64_t *, uint64_t, uint64_t))(AssociatedConformanceWitness + 32))(&v37, v35, &v28, AssociatedTypeWitness, AssociatedConformanceWitness);
  uint64_t v18 = v37;
  int v19 = v38;
  if ((v10 & 1) == 0)
  {
    uint64_t v37 = v23;
    uint64_t v38 = v15;
    int v36 = v22;
    uint64_t v28 = v26;
    uint64_t v29 = v25;
    LOBYTE(v30) = v24;
    HIDWORD(v30) = v21;
    _DynamicPropertyBuffer.traceMountedProperties<A>(to:fields:)();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t result = outlined consume of DynamicPropertyCache.Fields.Layout();
  *(void *)a3 = v18;
  *(_DWORD *)(a3 + 8) = v19;
  return result;
}

uint64_t Commands._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v7 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  int v10 = (char *)&v13 - v9;
  (*(void (**)(uint64_t, uint64_t, double))(a3 + 24))(a2, a3, v8);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(AssociatedConformanceWitness + 40))(a1, AssociatedTypeWitness, AssociatedConformanceWitness);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, AssociatedTypeWitness);
}

uint64_t specialized static WithCommandFlag._makeCommands(content:inputs:)@<X0>(int a1@<W0>, uint64_t a2@<X8>)
{
  LODWORD(v4) = a1;
  type metadata accessor for _GraphValue<WithCommandFlag<EmptyCommands>>();
  _GraphValue.subscript.getter();
  PreferencesOutputs.init()();
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    _GraphValue.value.getter();
    PreferencesOutputs.subscript.getter();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for WithCommandFlag<EmptyCommands>(0, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>.SetFlag, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WithCommandFlag.SetFlag);
    lazy protocol witness table accessor for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag();
    Attribute.init<A>(body:value:flags:update:)();
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  *(void *)a2 = v4;
  *(_DWORD *)(a2 + 8) = v5;
  return result;
}

void protocol witness for Commands.body.getter in conformance WithCommandFlag<A>()
{
}

uint64_t specialized static Commands.makeBody(commands:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<PrototypePrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrototypePrintingCommands and conformance PrototypePrintingCommands, (uint64_t)&type metadata for PrototypePrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<ImportFromDevicesCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands, (uint64_t)&type metadata for ImportFromDevicesCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<TextFormattingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextFormattingCommands and conformance TextFormattingCommands, (uint64_t)&type metadata for TextFormattingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<TextEditingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextEditingCommands and conformance TextEditingCommands, (uint64_t)&type metadata for TextEditingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<InspectorCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorCommands and conformance InspectorCommands, (uint64_t)&type metadata for InspectorCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<PrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrintingCommands and conformance PrintingCommands, (uint64_t)&type metadata for PrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<ToolbarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarCommands and conformance ToolbarCommands, (uint64_t)&type metadata for ToolbarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<SidebarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarCommands and conformance SidebarCommands, (uint64_t)&type metadata for SidebarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

{
  uint64_t result;
  Swift::String v1;

  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for WithCommandFlag<EmptyCommands>(0, &lazy cache variable for type metadata for CommandsBodyAccessor<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    lazy protocol witness table accessor for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = 0x726576654ELL;
    v1._object = (void *)0xE500000000000000;
    String.append(_:)(v1);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t static Commands.makeBody(commands:inputs:fields:)()
{
  if (AGTypeID.isValueType.getter())
  {
    type metadata accessor for CommandsBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.makeBody(container:inputs:fields:)();
  }
  else
  {
    _StringGuts.grow(_:)(32);
    swift_bridgeObjectRelease();
    v1._countAndFlagsBits = _typeName(_:qualified:)();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  return result;
}

uint64_t CommandsBodyAccessor.updateBody(of:changed:)(uint64_t result, char a2)
{
  if (a2)
  {
    MEMORY[0x1F4188790](result);
    type metadata accessor for CommandsBodyAccessor();
    swift_getWitnessTable();
    return BodyAccessor.setBody(_:)();
  }
  return result;
}

uint64_t protocol witness for BodyAccessor.updateBody(of:changed:) in conformance CommandsBodyAccessor<A>(uint64_t result, char a2)
{
  return CommandsBodyAccessor.updateBody(of:changed:)(result, a2);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance Never@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, v6, a3);
}

uint64_t (*CommandsModifier.UpdateList.value.getter(int a1, uint64_t a2, uint64_t a3))()
{
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 16) = a2;
  *(void *)(v6 + 24) = a3;
  *(_DWORD *)(v6 + 32) = a1;
  return partial apply for closure #1 in CommandsModifier.UpdateList.value.getter;
}

uint64_t closure #1 in CommandsModifier.UpdateList.value.getter()
{
  AGGraphGetValue();
  uint64_t v0 = swift_bridgeObjectRetain();
  return specialized Array.append<A>(contentsOf:)(v0);
}

uint64_t protocol witness for Rule.value.getter in conformance CommandsModifier<A>.UpdateList@<X0>(uint64_t a1@<X0>, uint64_t (**a2)()@<X8>)
{
  updated = CommandsModifier.UpdateList.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  uint64_t v6 = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = updated;
  *(void *)(result + 24) = v6;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  a2[1] = (uint64_t (*)())result;
  return result;
}

void protocol witness for static PreferenceKey.defaultValue.getter in conformance CommandsKey(void *a1@<X8>)
{
  *a1 = destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
  a1[1] = 0;
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance CommandsKey(uint64_t a1, void (*a2)(long long *__return_ptr))
{
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = *(_OWORD *)a1;
  a2(&v8);
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = v8;
  uint64_t v6 = (void *)swift_allocObject();
  long long v6[2] = partial apply for thunk for @escaping @callee_guaranteed (@inout UISplitViewControllerProxy) -> (@out ());
  v6[3] = v4;
  v6[4] = thunk for @escaping @callee_guaranteed (@inout _ResolvedCommands) -> (@out ())partial apply;
  v6[5] = v5;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in static CommandsKey.reduce(value:nextValue:);
  *(void *)(result + 24) = v6;
  *(void *)a1 = partial apply for thunk for @escaping @callee_guaranteed (@in_guaranteed IndexSet) -> ();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t protocol witness for static TupleDescriptor.typeCache.setter in conformance CommandsDescriptor(uint64_t a1)
{
  if (one-time initialization token for typeCache != -1) {
    swift_once();
  }
  swift_beginAccess();
  static CommandsDescriptor.typeCache = a1;
  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance TextEditingCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(void *, long long *, uint64_t, long long *, void, void, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance TextFormattingCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(void *, long long *, uint64_t, long long *, void, void, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance ToolbarCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(void *, long long *, uint64_t, long long *, void, void, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance SidebarCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(void *, long long *, uint64_t, long long *, void, void, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance InspectorCommands@<X0>(_OWORD *a1@<X1>, uint64_t a2@<X8>)
{
  long long v2 = a1[1];
  v4[0] = *a1;
  v4[1] = v2;
  v5[0] = a1[2];
  *(_OWORD *)((char *)v5 + 12) = *(_OWORD *)((char *)a1 + 44);
  return specialized static Commands._makeCommands(content:inputs:)((uint64_t)v4, a2);
}

uint64_t protocol witness for Commands._resolve(into:) in conformance InspectorCommands(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = &v16[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>();
  MEMORY[0x1F4188790](v6 - 8);
  long long v8 = &v16[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v9 = *(void *)v1;
  uint64_t v10 = *(void *)(v1 + 8);
  uint64_t v11 = *(unsigned __int8 *)(v1 + 16);
  int v12 = *(unsigned __int8 *)(v1 + 17);
  if (one-time initialization token for sidebar != -1) {
    swift_once();
  }
  uint64_t v13 = __swift_project_value_buffer(v3, (uint64_t)static CommandGroupPlacement.sidebar);
  outlined init with copy of CommandGroupPlacement(v13, (uint64_t)v5);
  outlined copy of Environment<Binding<Visibility>?>.Content(v9, v10, v11, v12);
  specialized CommandGroup.init(after:addition:)((uint64_t)v5, v9, v10, v11 | (v12 << 8), (uint64_t)v8);
  int v14 = *(void (**)(unsigned char *, uint64_t))&v8[*(int *)(type metadata accessor for CommandOperation() + 24)];
  if (v14) {
    v14(v8, a1);
  }
  return outlined destroy of CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>((uint64_t)v8);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance PrintingCommands@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  int v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(long long *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, v6, a3);
}

void protocol witness for Commands._resolve(into:) in conformance PrintingCommands()
{
  if (one-time initialization token for printing != -1) {
    swift_once();
  }
  _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
}

uint64_t protocol witness for static Commands._makeCommands(content:inputs:) in conformance ImportFromDevicesCommands@<X0>(unsigned int *a1@<X0>, _OWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3 = *a1;
  long long v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  v7[0] = a2[2];
  *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)a2 + 44);
  return specialized static Commands._makeCommands(content:inputs:)(v3, (uint64_t)v6, (void (*)(void *, long long *, uint64_t, long long *, void, void, unint64_t))specialized static Commands.makeBody(commands:inputs:fields:), a3);
}

void protocol witness for Commands.body.getter in conformance <> _ConditionalContent<A, B>()
{
}

void protocol witness for Commands.body.getter in conformance <A> A?()
{
}

uint64_t specialized implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)()
{
  return Attribute.init<A>(body:value:flags:update:)();
}

void protocol witness for Commands.body.getter in conformance <A> Group<A>()
{
}

_UNKNOWN **associated type witness table accessor for Commands.Body : Commands in Never()
{
  return &protocol witness table for Never;
}

uint64_t dispatch thunk of Commands.body.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t dispatch thunk of static Commands._makeCommands(content:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t dispatch thunk of Commands._resolve(into:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 40))();
}

ValueMetadata *type metadata accessor for EmptyCommands()
{
  return &type metadata for EmptyCommands;
}

ValueMetadata *type metadata accessor for _ResolvedCommands()
{
  return &type metadata for _ResolvedCommands;
}

ValueMetadata *type metadata accessor for CommandsBuilder()
{
  return &type metadata for CommandsBuilder;
}

uint64_t sub_187D6C240()
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for CommandsDescriptor()
{
  return &type metadata for CommandsDescriptor;
}

uint64_t getEnumTagSinglePayload for CommandsModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for CommandsModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D6C634);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands;
  if (!lazy protocol witness table cache variable for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands);
  }
  return result;
}

uint64_t type metadata accessor for CommandsBodyAccessor()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<ImportFromDevicesCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ImportFromDevicesCommands and conformance ImportFromDevicesCommands, (uint64_t)&type metadata for ImportFromDevicesCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<ImportFromDevicesCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for _GraphValue<WithCommandFlag<EmptyCommands>>()
{
  if (!lazy cache variable for type metadata for _GraphValue<WithCommandFlag<EmptyCommands>>)
  {
    type metadata accessor for WithCommandFlag<EmptyCommands>(255, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WithCommandFlag);
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<WithCommandFlag<EmptyCommands>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag()
{
  unint64_t result = lazy protocol witness table cache variable for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag;
  if (!lazy protocol witness table cache variable for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag)
  {
    type metadata accessor for WithCommandFlag<EmptyCommands>(255, &lazy cache variable for type metadata for WithCommandFlag<EmptyCommands>.SetFlag, (uint64_t)&type metadata for EmptyCommands, (uint64_t)&protocol witness table for EmptyCommands, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for WithCommandFlag.SetFlag);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type WithCommandFlag<EmptyCommands>.SetFlag and conformance WithCommandFlag<A>.SetFlag);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PrintingCommands and conformance PrintingCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type PrintingCommands and conformance PrintingCommands;
  if (!lazy protocol witness table cache variable for type PrintingCommands and conformance PrintingCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrintingCommands and conformance PrintingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<PrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrintingCommands and conformance PrintingCommands, (uint64_t)&type metadata for PrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<PrintingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList and conformance CommandGroup<A>.MakeList(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined init with copy of CommandGroupPlacement(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for CommandGroupPlacement(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(uint64_t a1)
{
  type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t partial apply for specialized implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)()
{
  return specialized implicit closure #1 in static CommandGroup._makeCommands(content:inputs:)();
}

void type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>.MakeList(uint64_t a1)
{
}

void type metadata accessor for CommandGroup<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>();
    uint64_t v7 = v6;
    uint64_t HasKeyboard = lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>>, _EnvironmentKeyTransformModifier<Bool>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<Button<Text>, _EnvironmentKeyWritingModifier<KeyboardShortcut?>>, ViewInputFlagModifier<HasKeyboardShortcut>>, _TraitWritingModifier<KeyboardShortcutPickerOptionTraitKey>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>);
    unint64_t v9 = a3(a1, v7, HasKeyboard);
    if (!v10) {
      atomic_store(v9, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type InspectorCommands and conformance InspectorCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type InspectorCommands and conformance InspectorCommands;
  if (!lazy protocol witness table cache variable for type InspectorCommands and conformance InspectorCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type InspectorCommands and conformance InspectorCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<InspectorCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type InspectorCommands and conformance InspectorCommands, (uint64_t)&type metadata for InspectorCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<InspectorCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SidebarCommands and conformance SidebarCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type SidebarCommands and conformance SidebarCommands;
  if (!lazy protocol witness table cache variable for type SidebarCommands and conformance SidebarCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SidebarCommands and conformance SidebarCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<SidebarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type SidebarCommands and conformance SidebarCommands, (uint64_t)&type metadata for SidebarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<SidebarCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ToolbarCommands and conformance ToolbarCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarCommands and conformance ToolbarCommands;
  if (!lazy protocol witness table cache variable for type ToolbarCommands and conformance ToolbarCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCommands and conformance ToolbarCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<ToolbarCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type ToolbarCommands and conformance ToolbarCommands, (uint64_t)&type metadata for ToolbarCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<ToolbarCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextFormattingCommands and conformance TextFormattingCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type TextFormattingCommands and conformance TextFormattingCommands;
  if (!lazy protocol witness table cache variable for type TextFormattingCommands and conformance TextFormattingCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextFormattingCommands and conformance TextFormattingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<TextFormattingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextFormattingCommands and conformance TextFormattingCommands, (uint64_t)&type metadata for TextFormattingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<TextFormattingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextEditingCommands and conformance TextEditingCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type TextEditingCommands and conformance TextEditingCommands;
  if (!lazy protocol witness table cache variable for type TextEditingCommands and conformance TextEditingCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextEditingCommands and conformance TextEditingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<TextEditingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type TextEditingCommands and conformance TextEditingCommands, (uint64_t)&type metadata for TextEditingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<TextEditingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for WithCommandFlag<EmptyCommands>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for WithCommandFlag<EmptyCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<Never>, MEMORY[0x1E4FBC248], (uint64_t)&protocol witness table for Never, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<Never> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

void type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PrototypePrintingCommands and conformance PrototypePrintingCommands()
{
  unint64_t result = lazy protocol witness table cache variable for type PrototypePrintingCommands and conformance PrototypePrintingCommands;
  if (!lazy protocol witness table cache variable for type PrototypePrintingCommands and conformance PrototypePrintingCommands)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PrototypePrintingCommands and conformance PrototypePrintingCommands);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>;
  if (!lazy protocol witness table cache variable for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>)
  {
    type metadata accessor for CommandsBodyAccessor<ImportFromDevicesCommands>(255, &lazy cache variable for type metadata for CommandsBodyAccessor<PrototypePrintingCommands>, (uint64_t (*)(void))lazy protocol witness table accessor for type PrototypePrintingCommands and conformance PrototypePrintingCommands, (uint64_t)&type metadata for PrototypePrintingCommands, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for CommandsBodyAccessor);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandsBodyAccessor<PrototypePrintingCommands> and conformance CommandsBodyAccessor<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandsKey()
{
  return &type metadata for CommandsKey;
}

uint64_t sub_187D6D1C8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D6D200()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommandsModifier.UpdateList.value.getter()
{
  return closure #1 in CommandsModifier.UpdateList.value.getter();
}

uint64_t partial apply for closure #1 in CommandsBodyAccessor.updateBody(of:changed:)()
{
  return (*(uint64_t (**)(void))(*(void *)(v0 + 24) + 24))(*(void *)(v0 + 16));
}

uint64_t sub_187D6D254()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in static CommandsKey.reduce(value:nextValue:)(uint64_t a1)
{
  uint64_t v3 = *(uint64_t (**)(uint64_t))(v1 + 32);
  (*(void (**)(void))(v1 + 16))();
  return v3(a1);
}

uint64_t MultiDatePicker.$selection.getter()
{
  uint64_t v1 = *v0;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t MultiDatePicker.init(selection:minimumDate:maximumDate:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t v23 = a6;
  char v24 = a5;
  uint64_t v22 = a3;
  uint64_t v13 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  int v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(void *)a8 = v16;
  *((void *)a8 + 1) = v17;
  *((void *)a8 + 2) = a2;
  uint64_t v18 = (int *)type metadata accessor for MultiDatePicker();
  outlined init with copy of Date?(a3, (uint64_t)&a8[v18[9]]);
  outlined init with copy of Date?(a4, (uint64_t)&a8[v18[10]]);
  swift_retain();
  swift_retain();
  uint64_t v19 = swift_bridgeObjectRetain();
  v24(v19);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  outlined destroy of Date?(a4);
  outlined destroy of Date?(v22);
  return (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 32))(&a8[v18[11]], v15, a7);
}

uint64_t MultiDatePicker.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = MultiDatePicker.$selection.getter();
  uint64_t v7 = v6;
  uint64_t v9 = v8;
  uint64_t v10 = v2 + *(int *)(a1 + 36);
  uint64_t v11 = type metadata accessor for MultiDatePickerStyleConfiguration(0);
  outlined init with copy of Date?(v10, (uint64_t)a2 + *(int *)(v11 + 24));
  uint64_t result = outlined init with copy of Date?(v2 + *(int *)(a1 + 40), (uint64_t)a2 + *(int *)(v11 + 28));
  *a2 = v5;
  a2[1] = v7;
  a2[2] = v9;
  return result;
}

uint64_t MultiDatePicker.init(selection:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, char *a6@<X8>)
{
  uint64_t v20 = a4;
  uint64_t v21 = a5;
  uint64_t v19 = a3;
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12);
  uint64_t v14 = (char *)&v18 - v13;
  uint64_t v15 = type metadata accessor for Date();
  uint64_t v16 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  v16(v14, 1, 1, v15);
  v16(v11, 1, 1, v15);
  return MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, a2, (uint64_t)v14, (uint64_t)v11, v19, v20, v21, a6);
}

uint64_t MultiDatePicker.init(selection:in:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>)
{
  uint64_t v27 = a8;
  uint64_t v28 = a5;
  uint64_t v29 = a6;
  uint64_t v30 = a7;
  uint64_t v25 = a2;
  uint64_t v26 = a3;
  uint64_t v23 = a9;
  uint64_t v24 = a1;
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v10 - 8);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = type metadata accessor for Date();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v17 + 16);
  v18(v15, a4, v16);
  uint64_t v19 = *(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56);
  v19(v15, 0, 1, v16);
  uint64_t v20 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E4FBB6A0];
  type metadata accessor for Range<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, MEMORY[0x1E4FBB6A0]);
  v18(v12, a4 + *(int *)(v21 + 36), v16);
  v19(v12, 0, 1, v16);
  MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(v24, v26, (uint64_t)v15, (uint64_t)v12, v28, v29, v30, v23);
  return outlined destroy of Range<Date>(a4, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, v20);
}

unint64_t lazy protocol witness table accessor for type Date and conformance Date()
{
  unint64_t result = lazy protocol witness table cache variable for type Date and conformance Date;
  if (!lazy protocol witness table cache variable for type Date and conformance Date)
  {
    type metadata accessor for Date();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type Date and conformance Date);
  }
  return result;
}

uint64_t MultiDatePicker.init(selection:in:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, char *a8@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v23 = a4;
  uint64_t v24 = a5;
  uint64_t v25 = a6;
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v22 - v16;
  uint64_t v18 = type metadata accessor for Date();
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 16))(v17, a3, v18);
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
  v20(v17, 0, 1, v18);
  v20(v14, 1, 1, v18);
  MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, a2, (uint64_t)v17, (uint64_t)v14, v23, v24, v25, a8);
  return outlined destroy of Range<Date>(a3, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28]);
}

{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t);
  uint64_t v25;
  uint64_t v26;

  uint64_t v23 = a7;
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v22 = a2;
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v21 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56);
  v19(v16, 1, 1, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v13, a3, v17);
  v19(v13, 0, 1, v17);
  MultiDatePicker.init(selection:minimumDate:maximumDate:label:)(a1, v22, (uint64_t)v16, (uint64_t)v13, v24, v25, v26, a8);
  return outlined destroy of Range<Date>(a3, &lazy cache variable for type metadata for PartialRangeUpTo<Date>, MEMORY[0x1E4FBBC40]);
}

uint64_t outlined destroy of Range<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  type metadata accessor for Range<Date>(0, a2, a3);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

void type metadata accessor for Range<Date>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, unint64_t))
{
  if (!*a2)
  {
    uint64_t v6 = type metadata accessor for Date();
    unint64_t v7 = lazy protocol witness table accessor for type Date and conformance Date();
    unint64_t v8 = a3(a1, v6, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t MultiDatePicker<>.init(_:selection:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  int v31 = a2;
  uint64_t v30 = a1;
  uint64_t v32 = a6;
  type metadata accessor for MultiDatePicker<Text>();
  unint64_t v8 = (int *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v28 - v15;
  uint64_t v17 = type metadata accessor for Date();
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
  v18(v16, 1, 1, v17);
  v18(v13, 1, 1, v17);
  uint64_t v19 = v28;
  *uint64_t v10 = a3;
  v10[1] = v19;
  void v10[2] = v29;
  outlined init with copy of Date?((uint64_t)v16, (uint64_t)v10 + v8[11]);
  outlined init with copy of Date?((uint64_t)v13, (uint64_t)v10 + v8[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  LOBYTE(v18) = v23;
  uint64_t v25 = v24;
  outlined destroy of Date?((uint64_t)v13);
  outlined destroy of Date?((uint64_t)v16);
  uint64_t v26 = (char *)v10 + v8[13];
  *(void *)uint64_t v26 = v20;
  *((void *)v26 + 1) = v22;
  v26[16] = v18 & 1;
  *((void *)v26 + 3) = v25;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v10, v32);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void type metadata accessor for MultiDatePicker<Text>()
{
  if (!lazy cache variable for type metadata for MultiDatePicker<Text>)
  {
    unint64_t v0 = type metadata accessor for MultiDatePicker();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for MultiDatePicker<Text>);
    }
  }
}

uint64_t type metadata accessor for MultiDatePicker()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t outlined init with take of MultiDatePicker<Text>(uint64_t a1, uint64_t a2)
{
  type metadata accessor for MultiDatePicker<Text>();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t MultiDatePicker<>.init(_:selection:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v35 = a8;
  uint64_t v38 = a6;
  uint64_t v39 = a7;
  uint64_t v37 = a5;
  uint64_t v40 = a2;
  uint64_t v41 = a4;
  int v43 = a3;
  uint64_t v42 = a1;
  uint64_t v44 = a9;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v34 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v34 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
  v22(v19, a8, v20);
  char v23 = *(void (**)(char *, void, uint64_t, uint64_t))(v21 + 56);
  v23(v19, 0, 1, v20);
  int v36 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E4FBB6A0];
  type metadata accessor for Range<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, MEMORY[0x1E4FBB6A0]);
  v22(v16, a8 + *(int *)(v24 + 36), v20);
  v23(v16, 0, 1, v20);
  uint64_t v25 = v38;
  *uint64_t v13 = v37;
  v13[1] = v25;
  _DWORD v13[2] = v39;
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v13 + v11[11]);
  outlined init with copy of Date?((uint64_t)v16, (uint64_t)v13 + v11[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v26 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v28 = v27;
  LOBYTE(v21) = v29;
  uint64_t v31 = v30;
  outlined destroy of Date?((uint64_t)v16);
  outlined destroy of Date?((uint64_t)v19);
  uint64_t v32 = (char *)v13 + v11[13];
  *(void *)uint64_t v32 = v26;
  *((void *)v32 + 1) = v28;
  v32[16] = v21 & 1;
  *((void *)v32 + 3) = v31;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v13, v44);
  outlined destroy of Range<Date>(v35, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, v36);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiDatePicker<>.init(_:selection:in:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  uint64_t v33 = a6;
  uint64_t v34 = a5;
  uint64_t v32 = a4;
  int v36 = a2;
  uint64_t v35 = a1;
  uint64_t v37 = a7;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v18, a6, v19);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v21(v18, 0, 1, v19);
  v21(v15, 1, 1, v19);
  uint64_t v22 = v32;
  void *v12 = a3;
  v12[1] = v22;
  _DWORD v12[2] = v34;
  outlined init with copy of Date?((uint64_t)v18, (uint64_t)v12 + v10[11]);
  outlined init with copy of Date?((uint64_t)v15, (uint64_t)v12 + v10[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v25 = v24;
  LOBYTE(a3) = v26;
  uint64_t v28 = v27;
  outlined destroy of Date?((uint64_t)v15);
  outlined destroy of Date?((uint64_t)v18);
  char v29 = (char *)v12 + v10[13];
  *(void *)char v29 = v23;
  *((void *)v29 + 1) = v25;
  v29[16] = a3 & 1;
  *((void *)v29 + 3) = v28;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v12, v37);
  outlined destroy of Range<Date>(v33, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiDatePicker<>.init(_:selection:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v32 = a7;
  uint64_t v33 = a4;
  uint64_t v34 = a5;
  uint64_t v35 = a6;
  int v38 = a3;
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v39 = a8;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t *)((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56);
  v21(v18, 1, 1, v19);
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v15, a7, v19);
  v21(v15, 0, 1, v19);
  uint64_t v22 = v34;
  void *v12 = v33;
  v12[1] = v22;
  _DWORD v12[2] = v35;
  outlined init with copy of Date?((uint64_t)v18, (uint64_t)v12 + v10[11]);
  outlined init with copy of Date?((uint64_t)v15, (uint64_t)v12 + v10[12]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v23 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v25 = v24;
  LOBYTE(v21) = v26;
  uint64_t v28 = v27;
  outlined destroy of Date?((uint64_t)v15);
  outlined destroy of Date?((uint64_t)v18);
  char v29 = (char *)v12 + v10[13];
  *(void *)char v29 = v23;
  *((void *)v29 + 1) = v25;
  v29[16] = v21 & 1;
  *((void *)v29 + 3) = v28;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v12, v39);
  outlined destroy of Range<Date>(v32, &lazy cache variable for type metadata for PartialRangeUpTo<Date>, MEMORY[0x1E4FBBC40]);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t MultiDatePicker<>.init<A>(_:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a6;
  uint64_t v27 = a3;
  uint64_t v30 = a7;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v27 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56);
  v21(v19, 1, 1, v20);
  v21(v16, 1, 1, v20);
  uint64_t v22 = v27;
  *uint64_t v13 = a2;
  v13[1] = v22;
  _DWORD v13[2] = v28;
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v13 + v11[11]);
  outlined init with copy of Date?((uint64_t)v16, (uint64_t)v13 + v11[12]);
  closure #1 in MultiDatePicker<>.init<A>(_:selection:)(a1, (uint64_t)&v31);
  outlined destroy of Date?((uint64_t)v16);
  outlined destroy of Date?((uint64_t)v19);
  uint64_t v23 = (char *)v13 + v11[13];
  char v24 = v32;
  uint64_t v25 = v33;
  *(_OWORD *)uint64_t v23 = v31;
  v23[16] = v24;
  *((void *)v23 + 3) = v25;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v13, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a5 - 8) + 8))(a1, a5);
}

uint64_t MultiDatePicker<>.init<A>(_:selection:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v33 = a3;
  uint64_t v34 = a4;
  uint64_t v32 = a2;
  uint64_t v35 = a1;
  uint64_t v38 = a8;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (uint64_t (**)(uint64_t, uint64_t, unint64_t))((char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v31 - v17;
  uint64_t v19 = type metadata accessor for Date();
  uint64_t v20 = *(void *)(v19 - 8);
  uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t))(v20 + 16);
  v21(v18, a5, v19);
  uint64_t v22 = *(void (**)(char *, void, uint64_t, uint64_t))(v20 + 56);
  v22(v18, 0, 1, v19);
  long long v31 = (uint64_t (*)(uint64_t, uint64_t, unint64_t))MEMORY[0x1E4FBB6A0];
  type metadata accessor for Range<Date>(0, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, MEMORY[0x1E4FBB6A0]);
  v21(v15, a5 + *(int *)(v23 + 36), v19);
  v22(v15, 0, 1, v19);
  uint64_t v24 = v33;
  void *v12 = v32;
  v12[1] = v24;
  _DWORD v12[2] = v34;
  outlined init with copy of Date?((uint64_t)v18, (uint64_t)v12 + v10[11]);
  outlined init with copy of Date?((uint64_t)v15, (uint64_t)v12 + v10[12]);
  uint64_t v25 = v35;
  uint64_t v26 = v36;
  closure #1 in MultiDatePicker<>.init<A>(_:selection:)(v35, (uint64_t)&v39);
  outlined destroy of Date?((uint64_t)v15);
  outlined destroy of Date?((uint64_t)v18);
  uint64_t v27 = (char *)v12 + v10[13];
  char v28 = v40;
  uint64_t v29 = v41;
  *(_OWORD *)uint64_t v27 = v39;
  v27[16] = v28;
  *((void *)v27 + 3) = v29;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v12, v38);
  outlined destroy of Range<Date>(a5, (unint64_t *)&lazy cache variable for type metadata for Range<Date>, v31);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v25, v26);
}

{
  uint64_t v11;
  int *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  long long v36;
  char v37;
  uint64_t v38;

  uint64_t v33 = a1;
  uint64_t v34 = a7;
  long long v31 = a3;
  uint64_t v32 = a4;
  uint64_t v35 = a8;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v12 = (int *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v14 = (uint64_t *)((char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v15 - 8);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v30 - v19;
  uint64_t v21 = type metadata accessor for Date();
  uint64_t v22 = *(void *)(v21 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v20, a5, v21);
  uint64_t v23 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v22 + 56);
  v23(v20, 0, 1, v21);
  v23(v17, 1, 1, v21);
  uint64_t v24 = v31;
  *uint64_t v14 = a2;
  v14[1] = v24;
  v14[2] = v32;
  outlined init with copy of Date?((uint64_t)v20, (uint64_t)v14 + v12[11]);
  outlined init with copy of Date?((uint64_t)v17, (uint64_t)v14 + v12[12]);
  uint64_t v25 = v33;
  closure #1 in MultiDatePicker<>.init<A>(_:selection:)(v33, (uint64_t)&v36);
  outlined destroy of Date?((uint64_t)v17);
  outlined destroy of Date?((uint64_t)v20);
  uint64_t v26 = (char *)v14 + v12[13];
  uint64_t v27 = v37;
  char v28 = v38;
  *(_OWORD *)uint64_t v26 = v36;
  v26[16] = v27;
  *((void *)v26 + 3) = v28;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v14, v35);
  outlined destroy of Range<Date>(a5, &lazy cache variable for type metadata for PartialRangeFrom<Date>, MEMORY[0x1E4FBBC28]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(v25, a6);
}

{
  uint64_t v10;
  int *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  long long v35;
  char v36;
  uint64_t v37;

  uint64_t v32 = a1;
  uint64_t v33 = a7;
  uint64_t v30 = a3;
  long long v31 = a4;
  uint64_t v29 = a2;
  uint64_t v34 = a8;
  type metadata accessor for MultiDatePicker<Text>();
  uint64_t v11 = (int *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (uint64_t *)((char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  type metadata accessor for Date?();
  MEMORY[0x1F4188790](v14 - 8);
  uint64_t v16 = (char *)&v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v29 - v18;
  uint64_t v20 = type metadata accessor for Date();
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  v22(v19, 1, 1, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(v16, a5, v20);
  v22(v16, 0, 1, v20);
  uint64_t v23 = v30;
  *uint64_t v13 = v29;
  v13[1] = v23;
  _DWORD v13[2] = v31;
  outlined init with copy of Date?((uint64_t)v19, (uint64_t)v13 + v11[11]);
  outlined init with copy of Date?((uint64_t)v16, (uint64_t)v13 + v11[12]);
  uint64_t v24 = v32;
  closure #1 in MultiDatePicker<>.init<A>(_:selection:)(v32, (uint64_t)&v35);
  outlined destroy of Date?((uint64_t)v16);
  outlined destroy of Date?((uint64_t)v19);
  uint64_t v25 = (char *)v13 + v11[13];
  uint64_t v26 = v36;
  uint64_t v27 = v37;
  *(_OWORD *)uint64_t v25 = v35;
  v25[16] = v26;
  *((void *)v25 + 3) = v27;
  outlined init with take of MultiDatePicker<Text>((uint64_t)v13, v34);
  outlined destroy of Range<Date>(a5, &lazy cache variable for type metadata for PartialRangeUpTo<Date>, MEMORY[0x1E4FBBC40]);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(v24, a6);
}

uint64_t closure #1 in MultiDatePicker<>.init<A>(_:selection:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in MultiDatePicker<A>()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata completion function for MultiDatePicker()
{
  type metadata accessor for Date?();
  if (v0 <= 0x3F)
  {
    swift_checkMetadataState();
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for MultiDatePicker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  unint64_t v8 = *(_DWORD *)(v7 + 80);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v9 = *(void *)(v7 + 64);
  }
  else {
    size_t v9 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  unint64_t v13 = ((v9 + v12 + ((v9 + v8 + ((v8 + 24) & ~v8)) & ~v8)) & ~v12) + *(void *)(v11 + 64);
  int v14 = (*(_DWORD *)(v11 + 80) | *(_DWORD *)(v7 + 80)) & 0x100000;
  uint64_t v15 = *a2;
  *a1 = *a2;
  if ((v12 | v8) > 7 || v14 != 0 || v13 > 0x18)
  {
    a1 = (uint64_t *)(v15 + (((v12 | v8) & 0xF8 ^ 0x1F8) & ((v12 | v8) + 16)));
    swift_retain();
  }
  else
  {
    size_t v28 = v9 + v8;
    uint64_t v29 = v11;
    uint64_t v30 = v6;
    uint64_t v31 = v10;
    uint64_t v18 = ~v8;
    uint64_t v19 = a2[2];
    a1[1] = a2[1];
    a1[2] = v19;
    __dst = (void *)(((unint64_t)a1 + v8 + 24) & ~v8);
    uint64_t v20 = (const void *)(((unint64_t)a2 + v8 + 24) & ~v8);
    uint64_t v21 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    uint64_t v27 = v21;
    if (v21(v20, 1, v30))
    {
      memcpy(__dst, v20, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(__dst, v20, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(__dst, 0, 1, v30);
    }
    uint64_t v23 = (void *)(((unint64_t)__dst + v28) & v18);
    uint64_t v24 = (const void *)(((unint64_t)v20 + v28) & v18);
    if (v27(v24, 1, v30))
    {
      memcpy(v23, v24, v9);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v23, v24, v30);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v23, 0, 1, v30);
    }
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v29 + 16))(((unint64_t)v23 + v9 + v12) & ~v12, ((unint64_t)v24 + v9 + v12) & ~v12, v31);
  }
  return a1;
}

uint64_t destroy for MultiDatePicker(uint64_t a1, uint64_t a2)
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v4 = type metadata accessor for Date();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = a1 + v6 + 24;
  unint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  if (!v8(v7 & ~v6, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v7 & ~v6, v4);
  }
  if (*(_DWORD *)(v5 + 84)) {
    uint64_t v9 = *(void *)(v5 + 64);
  }
  else {
    uint64_t v9 = *(void *)(v5 + 64) + 1;
  }
  uint64_t v10 = ((v7 | v6) + v9) & ~v6;
  if (!v8(v10, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v4);
  }
  uint64_t v11 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v12 = *(uint64_t (**)(unint64_t))(v11 + 8);
  unint64_t v13 = (v10 + v9 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);

  return v12(v13);
}

void *initializeWithCopy for MultiDatePicker(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a2[1];
  *a1 = *a2;
  a1[1] = v5;
  a1[2] = a2[2];
  uint64_t v6 = type metadata accessor for Date();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v21 = (unint64_t)a1 + v8 + 24;
  uint64_t v22 = ~v8;
  __dst = (void *)(v21 & ~v8);
  unint64_t v20 = (unint64_t)a2 + v8 + 24;
  uint64_t v9 = (const void *)(v20 & ~v8);
  uint64_t v10 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  if (v10(v9, 1, v6))
  {
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
    if (v11) {
      size_t v13 = *(void *)(v7 + 64);
    }
    else {
      size_t v13 = v12 + 1;
    }
    memcpy(__dst, v9, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(__dst, v9, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(__dst, 0, 1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v14 = v12;
  }
  else {
    size_t v14 = v12 + 1;
  }
  uint64_t v15 = (void *)(((v21 | v8) + v14) & v22);
  uint64_t v16 = (const void *)(((v20 | v8) + v14) & v22);
  if (v10(v16, 1, v6))
  {
    memcpy(v15, v16, v14);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v15, v16, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v15, 0, 1, v6);
  }
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 16))(((unint64_t)v15 + v14 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), ((unint64_t)v16 + v14 + *(unsigned __int8 *)(v17 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

void *assignWithCopy for MultiDatePicker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (unint64_t)a1 + v7 + 24;
  unint64_t v23 = (unint64_t)a2 + v7 + 24;
  uint64_t v24 = ~v7;
  uint64_t v9 = (const void *)(v23 & ~v7);
  uint64_t v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8 & ~v7, 1, v5);
  int v12 = v10((unint64_t)v9, 1, v5);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 16))(v8 & ~v7, v9, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 24))(v8 & ~v7, v9, v5);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy((void *)(v8 & ~v7), v9, v15);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v16 = *(void *)(v6 + 64);
  }
  else {
    size_t v16 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v17 = (void *)(((v8 | v7) + v16) & v24);
  uint64_t v18 = (const void *)(((v23 | v7) + v16) & v24);
  int v19 = v10((unint64_t)v17, 1, v5);
  int v20 = v10((unint64_t)v18, 1, v5);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 24))(v17, v18, v5);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
    goto LABEL_20;
  }
  if (v20)
  {
LABEL_20:
    memcpy(v17, v18, v16);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(v17, v18, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
LABEL_21:
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 24))(((unint64_t)v17 + v16 + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), ((unint64_t)v18 + v16 + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t initializeWithTake for MultiDatePicker(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v21 = a1;
  uint64_t v8 = v7 + 24 + a1;
  uint64_t v9 = v7 + 24 + a2;
  uint64_t v18 = ~v7;
  int v19 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (v19(v9 & ~v7, 1, v5))
  {
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
    if (v10) {
      size_t v12 = *(void *)(v6 + 64);
    }
    else {
      size_t v12 = v11 + 1;
    }
    memcpy((void *)(v8 & ~v7), (const void *)(v9 & ~v7), v12);
  }
  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v8 & ~v7, v9 & ~v7, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  if (v10) {
    size_t v13 = v11;
  }
  else {
    size_t v13 = v11 + 1;
  }
  size_t v14 = (void *)(((v8 | v7) + v13) & v18);
  size_t v15 = (const void *)(((v9 | v7) + v13) & v18);
  if (v19((uint64_t)v15, 1, v5))
  {
    memcpy(v14, v15, v13);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v14, v15, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v14, 0, 1, v5);
  }
  uint64_t v16 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v16 + 32))(((unint64_t)v14 + v13 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80), ((unint64_t)v15 + v13 + *(unsigned __int8 *)(v16 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80));
  return v21;
}

void *assignWithTake for MultiDatePicker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRelease();
  uint64_t v5 = type metadata accessor for Date();
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (unint64_t)a1 + v7 + 24;
  unint64_t v23 = (unint64_t)a2 + v7 + 24;
  uint64_t v24 = ~v7;
  uint64_t v9 = (const void *)(v23 & ~v7);
  int v10 = *(uint64_t (**)(unint64_t, uint64_t, uint64_t))(v6 + 48);
  int v11 = v10(v8 & ~v7, 1, v5);
  int v12 = v10((unint64_t)v9, 1, v5);
  if (v11)
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 32))(v8 & ~v7, v9, v5);
      (*(void (**)(unint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8 & ~v7, 0, 1, v5);
      goto LABEL_12;
    }
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v12)
    {
      (*(void (**)(unint64_t, const void *, uint64_t))(v6 + 40))(v8 & ~v7, v9, v5);
      goto LABEL_12;
    }
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v8 & ~v7, v5);
    int v13 = *(_DWORD *)(v6 + 84);
    size_t v14 = *(void *)(v6 + 64);
  }
  if (v13) {
    size_t v15 = v14;
  }
  else {
    size_t v15 = v14 + 1;
  }
  memcpy((void *)(v8 & ~v7), v9, v15);
LABEL_12:
  if (*(_DWORD *)(v6 + 84)) {
    size_t v16 = *(void *)(v6 + 64);
  }
  else {
    size_t v16 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v17 = (void *)(((v8 | v7) + v16) & v24);
  uint64_t v18 = (const void *)(((v23 | v7) + v16) & v24);
  int v19 = v10((unint64_t)v17, 1, v5);
  int v20 = v10((unint64_t)v18, 1, v5);
  if (!v19)
  {
    if (!v20)
    {
      (*(void (**)(void *, const void *, uint64_t))(v6 + 40))(v17, v18, v5);
      goto LABEL_21;
    }
    (*(void (**)(void *, uint64_t))(v6 + 8))(v17, v5);
    goto LABEL_20;
  }
  if (v20)
  {
LABEL_20:
    memcpy(v17, v18, v16);
    goto LABEL_21;
  }
  (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(v17, v18, v5);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(v17, 0, 1, v5);
LABEL_21:
  uint64_t v21 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v21 + 40))(((unint64_t)v17 + v16 + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80), ((unint64_t)v18 + v16 + *(unsigned __int8 *)(v21 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for MultiDatePicker(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v7 = v6;
  unsigned int v8 = *(_DWORD *)(v6 + 84);
  uint64_t v9 = *(void *)(*(void *)(a3 + 16) - 8);
  if (v8) {
    unsigned int v10 = v8 - 1;
  }
  else {
    unsigned int v10 = 0;
  }
  uint64_t v11 = *(unsigned int *)(v9 + 84);
  uint64_t v12 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v13 = *(void *)(v6 + 64);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = *(void *)(v9 + 64);
  if (v10 <= v11) {
    unsigned int v16 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v16 = v10;
  }
  if (v16 <= 0x7FFFFFFF) {
    unsigned int v17 = 0x7FFFFFFF;
  }
  else {
    unsigned int v17 = v16;
  }
  if (v8) {
    uint64_t v18 = v13;
  }
  else {
    uint64_t v18 = v13 + 1;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v19 = v18 + v12;
  uint64_t v20 = v18 + v14;
  if (a2 > v17)
  {
    uint64_t v21 = ((v20 + ((v19 + ((v12 + 24) & ~v12)) & ~v12)) & ~v14) + v15;
    char v22 = 8 * v21;
    if (v21 > 3) {
      goto LABEL_16;
    }
    unsigned int v24 = ((a2 - v17 + ~(-1 << v22)) >> v22) + 1;
    if (HIWORD(v24))
    {
      int v23 = *(_DWORD *)((char *)a1 + v21);
      if (v23) {
        goto LABEL_23;
      }
    }
    else
    {
      if (v24 <= 0xFF)
      {
        if (v24 < 2) {
          goto LABEL_33;
        }
LABEL_16:
        int v23 = *((unsigned __int8 *)a1 + v21);
        if (!*((unsigned char *)a1 + v21)) {
          goto LABEL_33;
        }
LABEL_23:
        int v25 = (v23 - 1) << v22;
        if (v21 > 3) {
          int v25 = 0;
        }
        if (v21)
        {
          if (v21 <= 3) {
            int v26 = v21;
          }
          else {
            int v26 = 4;
          }
          switch(v26)
          {
            case 2:
              int v27 = *a1;
              break;
            case 3:
              int v27 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
              break;
            case 4:
              int v27 = *(_DWORD *)a1;
              break;
            default:
              int v27 = *(unsigned __int8 *)a1;
              break;
          }
        }
        else
        {
          int v27 = 0;
        }
        return v17 + (v27 | v25) + 1;
      }
      int v23 = *(unsigned __int16 *)((char *)a1 + v21);
      if (*(unsigned __int16 *)((char *)a1 + v21)) {
        goto LABEL_23;
      }
    }
  }
LABEL_33:
  if ((v16 & 0x80000000) == 0)
  {
    unint64_t v28 = *((void *)a1 + 1);
    if (v28 >= 0xFFFFFFFF) {
      LODWORD(v28) = -1;
    }
    return (v28 + 1);
  }
  uint64_t v30 = ((unint64_t)a1 + v12 + 24) & ~v12;
  if (v10 == v17)
  {
    if (v8 >= 2)
    {
      unsigned int v33 = (*(uint64_t (**)(uint64_t))(v7 + 48))(v30);
      if (v33 >= 2) {
        return v33 - 1;
      }
      else {
        return 0;
      }
    }
    return 0;
  }
  uint64_t v31 = (v20 + ((v19 + v30) & ~v12)) & ~v14;
  uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 48);

  return v32(v31, v11);
}

void storeEnumTagSinglePayload for MultiDatePicker(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  int v8 = 0;
  uint64_t v9 = *(void *)(type metadata accessor for Date() - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  if (v11) {
    unsigned int v12 = v11 - 1;
  }
  else {
    unsigned int v12 = 0;
  }
  uint64_t v13 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v14 = *(unsigned int *)(v13 + 84);
  uint64_t v15 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(unsigned __int8 *)(v13 + 80);
  if (v12 <= v14) {
    unsigned int v18 = *(_DWORD *)(v13 + 84);
  }
  else {
    unsigned int v18 = v12;
  }
  if (v18 <= 0x7FFFFFFF) {
    unsigned int v19 = 0x7FFFFFFF;
  }
  else {
    unsigned int v19 = v18;
  }
  if (!v11) {
    ++v16;
  }
  uint64_t v20 = v16 + v15;
  uint64_t v21 = (v16 + v15 + ((v15 + 24) & ~v15)) & ~v15;
  uint64_t v22 = v16 + v17;
  size_t v23 = ((v22 + v21) & ~v17) + *(void *)(v13 + 64);
  if (a3 <= v19) {
    goto LABEL_20;
  }
  if (v23 <= 3)
  {
    unsigned int v24 = ((a3 - v19 + ~(-1 << (8 * v23))) >> (8 * v23)) + 1;
    if (HIWORD(v24))
    {
      int v8 = 4;
      if (v19 >= a2) {
        goto LABEL_28;
      }
      goto LABEL_21;
    }
    if (v24 >= 0x100) {
      int v8 = 2;
    }
    else {
      int v8 = v24 > 1;
    }
LABEL_20:
    if (v19 >= a2) {
      goto LABEL_28;
    }
    goto LABEL_21;
  }
  int v8 = 1;
  if (v19 >= a2)
  {
LABEL_28:
    uint64_t v28 = ~v15;
    uint64_t v29 = ~v17;
    switch(v8)
    {
      case 1:
        *((unsigned char *)a1 + v23) = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 2:
        *(_WORD *)((char *)a1 + v23) = 0;
        if (!a2) {
          return;
        }
        goto LABEL_33;
      case 3:
        goto LABEL_54;
      case 4:
        *(_DWORD *)((char *)a1 + v23) = 0;
        goto LABEL_32;
      default:
LABEL_32:
        if (a2)
        {
LABEL_33:
          if ((v18 & 0x80000000) != 0)
          {
            uint64_t v30 = ((unint64_t)a1 + v15 + 24) & v28;
            if (v12 == v19)
            {
              if (v11 >= 2)
              {
                uint64_t v31 = *(void (**)(uint64_t, void))(v10 + 56);
                v31(v30, (a2 + 1));
              }
            }
            else
            {
              uint64_t v32 = (v22 + ((v20 + v30) & v28)) & v29;
              unsigned int v33 = *(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 56);
              v33(v32, a2, v14);
            }
          }
          else if ((a2 & 0x80000000) != 0)
          {
            a1[1] = 0;
            a1[2] = 0;
            *a1 = a2 ^ 0x80000000;
          }
          else
          {
            a1[1] = (a2 - 1);
          }
        }
        break;
    }
    return;
  }
LABEL_21:
  unsigned int v25 = ~v19 + a2;
  if (v23 < 4)
  {
    int v26 = (v25 >> (8 * v23)) + 1;
    if (v23)
    {
      int v27 = v25 & ~(-1 << (8 * v23));
      bzero(a1, v23);
      if (v23 == 3)
      {
        *(_WORD *)a1 = v27;
        *((unsigned char *)a1 + 2) = BYTE2(v27);
      }
      else if (v23 == 2)
      {
        *(_WORD *)a1 = v27;
      }
      else
      {
        *(unsigned char *)a1 = v27;
      }
    }
  }
  else
  {
    bzero(a1, v23);
    *(_DWORD *)a1 = v25;
    int v26 = 1;
  }
  switch(v8)
  {
    case 1:
      *((unsigned char *)a1 + v23) = v26;
      break;
    case 2:
      *(_WORD *)((char *)a1 + v23) = v26;
      break;
    case 3:
LABEL_54:
      __break(1u);
      JUMPOUT(0x187D70908);
    case 4:
      *(_DWORD *)((char *)a1 + v23) = v26;
      break;
    default:
      return;
  }
}

_UNKNOWN **sub_187D70930()
{
  return &protocol witness table for ResolvedMultiDatePicker;
}

uint64_t Scene.onConnectionOptionPayload<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v10[0] = a2;
  v10[1] = a3;
  uint64_t v8 = type metadata accessor for ConnectionOptionPayloadSceneModifier();
  swift_retain();
  Scene.modifier<A>(_:)(v10, a4, v8, a6);
  return swift_release();
}

uint64_t type metadata accessor for ConnectionOptionPayloadSceneModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.onConnectionOptionPayload<A>(_:perform:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  type metadata accessor for ConnectionOptionActionBox();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = a2;
  *(void *)(v11 + 24) = a3;
  unsigned int v12 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBBE00];
  _ss23_ContiguousArrayStorageCy5UIKit33UISceneConnectionOptionDefinition_pXpGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<UISceneConnectionOptionDefinition.Type>, 255, (uint64_t (*)(uint64_t))type metadata accessor for UISceneConnectionOptionDefinition.Type, MEMORY[0x1E4FBBE00]);
  uint64_t v13 = swift_allocObject();
  *(_OWORD *)(v13 + 16) = xmmword_18834BB80;
  *(void *)(v13 + 32) = a1;
  *(void *)(v13 + 40) = a7;
  _ss23_ContiguousArrayStorageCy5UIKit33UISceneConnectionOptionDefinition_pXpGMaTm_0(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<(ObjectIdentifier, [AnyConnectionOptionActionBox])>, 255, (uint64_t (*)(uint64_t))type metadata accessor for (ObjectIdentifier, [AnyConnectionOptionActionBox]), v12);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  *(void *)(inited + 32) = a1;
  _ss23_ContiguousArrayStorageCyyXlGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _ContiguousArrayStorage<Swift.AnyObject>, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_188351940;
  *(void *)(v15 + 32) = v11;
  uint64_t v19 = v15;
  specialized Array._endMutation()();
  *(void *)(inited + 40) = v19;
  specialized Dictionary.init(dictionaryLiteral:)(inited);
  swift_setDeallocating();
  type metadata accessor for (ObjectIdentifier, [AnyConnectionOptionActionBox])(0, v16, v17);
  swift_retain();
  swift_retain();
  swift_arrayDestroy();
  View.preference<A>(key:value:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t type metadata accessor for ConnectionOptionActionBox()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t type metadata accessor for UISceneConnectionOptionDefinition.Type()
{
  unint64_t result = lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type;
  if (!lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type)
  {
    type metadata accessor for UISceneConnectionOptionDefinition();
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition.Type);
  }
  return result;
}

unint64_t type metadata accessor for UISceneConnectionOptionDefinition()
{
  unint64_t result = lazy cache variable for type metadata for UISceneConnectionOptionDefinition;
  if (!lazy cache variable for type metadata for UISceneConnectionOptionDefinition)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for UISceneConnectionOptionDefinition);
  }
  return result;
}

void type metadata accessor for (ObjectIdentifier, [AnyConnectionOptionActionBox])(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!lazy cache variable for type metadata for (ObjectIdentifier, [AnyConnectionOptionActionBox]))
  {
    _ss23_ContiguousArrayStorageCy5UIKit33UISceneConnectionOptionDefinition_pXpGMaTm_0(255, &lazy cache variable for type metadata for [AnyConnectionOptionActionBox], a3, (uint64_t (*)(uint64_t))type metadata accessor for AnyConnectionOptionActionBox, MEMORY[0x1E4FBB320]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v4) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ObjectIdentifier, [AnyConnectionOptionActionBox]));
    }
  }
}

uint64_t type metadata accessor for AnyConnectionOptionActionBox()
{
  return self;
}

char *ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  uint64_t v1 = AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(a1);
  if (!v1) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v2 = (char *)v1;
  type metadata accessor for ConnectionOptionActionBox();
  type metadata accessor for ConnectionOptionPayloadSceneModifier();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v5 = *Value;
  uint64_t v4 = Value[1];
  uint64_t v6 = (uint64_t *)swift_allocObject();
  _OWORD v6[2] = v5;
  v6[3] = v4;
  uint64_t v7 = *((void *)v2 + 2);
  swift_retain();
  if (v7)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_11;
    }
    while (1)
    {
      unint64_t v8 = 0;
      uint64_t v9 = (uint64_t)(v2 + 32);
      while (v8 < *((void *)v2 + 2))
      {
        ++v8;
        closure #1 in ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(v9, v6);
        v9 += 280;
        if (v7 == v8) {
          goto LABEL_7;
        }
      }
      __break(1u);
LABEL_11:
      uint64_t v2 = specialized _ArrayBuffer._consumeAndCreateNew()((uint64_t)v2);
    }
  }
LABEL_7:
  swift_release();
  return v2;
}

uint64_t closure #1 in ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(char **)(a1 + 264);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v4 + 2) + 1, 1, v4);
  }
  unint64_t v6 = *((void *)v4 + 2);
  unint64_t v5 = *((void *)v4 + 3);
  if (v6 >= v5 >> 1) {
    uint64_t v4 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v5 > 1), v6 + 1, 1, v4);
  }
  long long v21 = *(_OWORD *)(v3 + 96);
  *((void *)v4 + 2) = v6 + 1;
  *(_OWORD *)&v4[16 * v6 + 32] = v21;
  *(void *)(a1 + 264) = v4;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v8 = *(void *)(a1 + 272);
  *(void *)(a1 + 272) = 0x8000000000000000;
  unint64_t v10 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  uint64_t v11 = *(void *)(v8 + 16);
  BOOL v12 = (v9 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
LABEL_16:
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)();
LABEL_14:
    specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)();
    return specialized Array._endMutation()();
  }
  char v14 = v9;
  if (*(void *)(v8 + 24) >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
LABEL_11:
    *(void *)(a1 + 272) = v8;
    uint64_t v17 = swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(a1 + 272);
    if ((v14 & 1) == 0) {
      uint64_t v17 = specialized _NativeDictionary._insert(at:key:value:)(v10, v21, MEMORY[0x1E4FBC860], *(void *)(a1 + 272));
    }
    uint64_t v19 = (void *)(*(void *)(v18 + 56) + 8 * v10);
    MEMORY[0x18C115B40](v17);
    if (*(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x10) < *(void *)((*v19 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_14;
    }
    goto LABEL_16;
  }
  specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(v13, isUniquelyReferenced_nonNull_native);
  unint64_t v15 = specialized __RawDictionaryStorage.find<A>(_:)(v21);
  if ((v14 & 1) == (v16 & 1))
  {
    unint64_t v10 = v15;
    goto LABEL_11;
  }
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
  __break(1u);
  return result;
}

char *protocol witness for Rule.value.getter in conformance ConnectionOptionPayloadSceneModifier<A>.UpdateSceneList@<X0>(char **a1@<X8>)
{
  uint64_t result = ConnectionOptionPayloadSceneModifier.UpdateSceneList.value.getter(*v1);
  *a1 = result;
  return result;
}

uint64_t static ConnectionOptionPayloadSceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v23 = *(void *)a2;
  int v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 24);
  uint64_t v27 = v8;
  unint64_t v28 = v9;
  int v29 = v10;
  a3(&v21);
  unint64_t v23 = v9;
  int v24 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v23) = v5;
    type metadata accessor for ConnectionOptionPayloadSceneModifier();
    type metadata accessor for _GraphValue();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v23 = v21;
    int v24 = v22;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v23 = __PAIR64__(v14, v12);
    MEMORY[0x1F4188790](v13);
    uint64_t updated = type metadata accessor for ConnectionOptionPayloadSceneModifier.UpdateSceneList();
    uint64_t WitnessTable = swift_getWitnessTable();
    _ss23_ContiguousArrayStorageCyyXlGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for Attribute<SceneList>, (uint64_t)&type metadata for SceneList, MEMORY[0x1E4F4E740]);
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v23, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v18, updated, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
    LOBYTE(v23) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v17 = v22;
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance ConnectionOptionPayloadSceneModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  return static ConnectionOptionPayloadSceneModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t ConnectionOptionPayloadStorage.merge(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  int v6 = *v2;
  int64_t v7 = *((void *)*v2 + 2);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v7, 0);
    uint64_t v8 = v28;
    unint64_t v9 = *(void *)(v28 + 16);
    uint64_t v10 = 32;
    do
    {
      uint64_t v11 = *(void *)&v6[v10];
      uint64_t v28 = v8;
      unint64_t v12 = *(void *)(v8 + 24);
      if (v9 >= v12 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v9 + 1, 1);
        uint64_t v8 = v28;
      }
      *(void *)(v8 + 16) = v9 + 1;
      *(void *)(v8 + 8 * v9 + 32) = v11;
      v10 += 16;
      ++v9;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v13 = specialized Set.init<A>(_:)(v8);
  swift_bridgeObjectRelease();
  uint64_t v28 = v13;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    while (1)
    {
      long long v26 = *(_OWORD *)(a1 + 32 + 16 * v15);
      uint64_t v16 = v28;
      if (!*(void *)(v28 + 16)) {
        goto LABEL_18;
      }
      uint64_t v17 = static Hasher._hash(seed:_:)();
      uint64_t v18 = -1 << *(unsigned char *)(v16 + 32);
      unint64_t v19 = v17 & ~v18;
      if (((*(void *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v20 = *(void *)(v16 + 48);
      if (*(void *)(v20 + 8 * v19) != (void)v26) {
        break;
      }
LABEL_10:
      if (++v15 == v14)
      {
        swift_bridgeObjectRelease();
        goto LABEL_23;
      }
    }
    uint64_t v21 = ~v18;
    while (1)
    {
      unint64_t v19 = (v19 + 1) & v21;
      if (((*(void *)(v16 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v19) & 1) == 0) {
        break;
      }
      if (*(void *)(v20 + 8 * v19) == (void)v26) {
        goto LABEL_10;
      }
    }
LABEL_18:
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
    }
    unint64_t v23 = *((void *)v6 + 2);
    unint64_t v22 = *((void *)v6 + 3);
    if (v23 >= v22 >> 1) {
      int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v22 > 1), v23 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v23 + 1;
    *(_OWORD *)&v6[16 * v23 + 32] = v26;
    *uint64_t v3 = v6;
    specialized Set._Variant.insert(_:)((uint64_t *)&v27, v26);
    goto LABEL_10;
  }
LABEL_23:
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v27 = v3[1];
  v3[1] = (char *)0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(a2, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v27);
  v3[1] = v27;
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance ConnectionOptionPayloadStoragePreferenceKey(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(v3);
  ConnectionOptionPayloadStorage.merge(_:)(v3[0], v3[1]);
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void AnyConnectionOptionActionBox.dispatch<A>(_:)()
{
}

void ConnectionOptionActionBox.dispatch<A>(_:)(uint64_t a1, uint64_t a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  double v8 = MEMORY[0x1F4188790](AssociatedTypeWitness);
  unint64_t v9 = (char *)&v12 - v7;
  if (*(void *)(*(void *)(a2 - 8) + 64) == v10)
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(v6 + 16))((char *)&v12 - v7, a1, AssociatedTypeWitness, v8);
    uint64_t v11 = *(void (**)(char *))(v2 + 16);
    swift_retain();
    v11(v9);
    swift_release();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, AssociatedTypeWitness);
  }
  else
  {
    __break(1u);
  }
}

uint64_t type metadata completion function for ConnectionOptionActionBox()
{
  return swift_initClassMetadata2();
}

uint64_t sub_187D71C1C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D71C8C()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>()
{
  if (!lazy cache variable for type metadata for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>)
  {
    unint64_t v0 = type metadata accessor for _PreferenceWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>)
  {
    type metadata accessor for _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _PreferenceWritingModifier<ConnectionOptionPayloadStoragePreferenceKey> and conformance _PreferenceWritingModifier<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ConnectionOptionPayloadStoragePreferenceKey()
{
  return &type metadata for ConnectionOptionPayloadStoragePreferenceKey;
}

uint64_t type metadata accessor for ConnectionOptionPayloadSceneModifier.UpdateSceneList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t base witness table accessor for _AttributeBody in ConnectionOptionPayloadSceneModifier<A>.UpdateSceneList()
{
  return swift_getWitnessTable();
}

uint64_t View.documentBrowserContextMenu<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.documentBrowserContextMenu<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DocumentBrowserContextMenuModifier, MEMORY[0x1E4F414A0]);
}

uint64_t type metadata accessor for DocumentBrowserContextMenuModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t Scene.documentBrowserContextMenu<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return View.documentBrowserContextMenu<A>(_:)(a1, a2, a3, a4, a5, a6, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for DocumentBrowserContextMenuSceneModifier, (void (*)(void *, uint64_t, uint64_t, uint64_t))Scene.modifier<A>(_:));
}

uint64_t View.documentBrowserContextMenu<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t (*a7)(void, uint64_t, uint64_t), void (*a8)(void *, uint64_t, uint64_t, uint64_t))
{
  v13[0] = a1;
  v13[1] = a2;
  uint64_t v11 = a7(0, a4, a6);
  swift_retain();
  a8(v13, a3, v11, a5);
  return swift_release();
}

uint64_t type metadata accessor for DocumentBrowserContextMenuSceneModifier()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187D71F18(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA34DocumentBrowserContextMenuModifierVyqd__GGAaBHPxAaBHD1__AgA0cJ0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for DocumentBrowserContextMenuModifier);
}

uint64_t sub_187D71F4C(uint64_t a1)
{
  return get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA34DocumentBrowserContextMenuModifierVyqd__GGAaBHPxAaBHD1__AgA0cJ0HPyHCHCTm(a1, (void (*)(uint64_t, void, void))type metadata accessor for DocumentBrowserContextMenuSceneModifier);
}

uint64_t get_witness_table_7SwiftUI4ViewRzAaBRd__r__lAA15ModifiedContentVyxAA34DocumentBrowserContextMenuModifierVyqd__GGAaBHPxAaBHD1__AgA0cJ0HPyHCHCTm(uint64_t a1, void (*a2)(uint64_t, void, void))
{
  return swift_getWitnessTable();
}

ValueMetadata *type metadata accessor for WeakDocumentBrowserContextMenuStorage()
{
  return &type metadata for WeakDocumentBrowserContextMenuStorage;
}

uint64_t static DocumentBrowserContextMenuSceneModifier._makeScene(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  uint64_t v30 = *MEMORY[0x1E4F143B8];
  int v5 = *a1;
  int v6 = *(_DWORD *)(a2 + 8);
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 40);
  unint64_t v9 = *(void *)(a2 + 48);
  int v10 = *(_DWORD *)(a2 + 56);
  unint64_t v23 = *(void *)a2;
  int v24 = v6;
  uint64_t v25 = v7;
  long long v26 = *(_OWORD *)(a2 + 24);
  uint64_t v27 = v8;
  unint64_t v28 = v9;
  int v29 = v10;
  a3(&v21);
  unint64_t v23 = v9;
  int v24 = v10;
  uint64_t result = PreferencesInputs.contains<A>(_:includeHostPreferences:)();
  if (result)
  {
    LODWORD(v23) = v5;
    type metadata accessor for DocumentBrowserContextMenuSceneModifier();
    type metadata accessor for _GraphValue();
    unsigned int v12 = _GraphValue.value.getter();
    unint64_t v23 = v21;
    int v24 = v22;
    uint64_t v13 = PreferencesOutputs.subscript.getter();
    unsigned int v14 = *MEMORY[0x1E4F4E7A0];
    if ((v13 & 0x100000000) == 0) {
      unsigned int v14 = v13;
    }
    unint64_t v23 = __PAIR64__(v14, v12);
    MEMORY[0x1F4188790](v13);
    uint64_t updated = type metadata accessor for DocumentBrowserContextMenuSceneModifier.UpdateSceneList();
    uint64_t WitnessTable = swift_getWitnessTable();
    type metadata accessor for Attribute<SceneList>();
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v23, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v18, updated, MEMORY[0x1E4FBC248], v15, MEMORY[0x1E4FBC278], v16);
    LOBYTE(v23) = 0;
    uint64_t result = PreferencesOutputs.subscript.setter();
  }
  int v17 = v22;
  *(void *)a4 = v21;
  *(_DWORD *)(a4 + 8) = v17;
  return result;
}

char *DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = AccessibilityScenePropertiesModifier.TransformProperties.sceneList.getter(a1);
  if (!v3) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = *(void *)(v3 + 16);
  if (!v4)
  {
    swift_bridgeObjectRelease();
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v5 = v3 + 32;
  int v6 = (char *)MEMORY[0x1E4FBC860];
  do
  {
    outlined init with copy of SceneList.Item(v5, (uint64_t)v47);
    outlined init with copy of SceneList.Item.Value((uint64_t)v47, (uint64_t)__src);
    if (__src[128] == 7)
    {
      uint64_t v21 = *(void *)&__src[8];
      uint64_t v22 = *(void *)&__src[16];
      uint64_t v7 = *(void *)&__src[40];
      uint64_t v20 = *(void *)&__src[24];
      uint64_t v8 = *(void *)&__src[48];
      char v9 = __src[56];
      uint64_t v18 = *(void *)&__src[56];
      uint64_t v19 = *(void *)&__src[48];
      uint64_t v10 = *(void *)&__src[64];
      uint64_t v25 = *(void *)&__src[72];
      long long v26 = *(_OWORD *)&__src[80];
      uint64_t v27 = *(void *)__src;
      uint64_t v30 = *(void *)&__src[96];
      uint64_t v23 = *(void *)&__src[104];
      uint64_t v24 = *(void *)&__src[112];
      unsigned int v28 = *(_DWORD *)&__src[124];
      unsigned int v29 = *(_DWORD *)&__src[120];
      uint64_t v11 = (void *)swift_allocObject();
      void v11[2] = a2;
      v11[3] = a3;
      v11[4] = a1;
      swift_retain();
      swift_bridgeObjectRetain();
      outlined copy of Text?(v7, v8, v9, v10);
      swift_retain();
      outlined copy of AppIntentExecutor?(v26);
      outlined copy of AppIntentExecutor?(v30);
      swift_bridgeObjectRetain();
      swift_retain();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v20);
      outlined destroy of SceneList.Item.Value((uint64_t)v47);
      *(void *)&long long v31 = v27;
      *((void *)&v31 + 1) = v21;
      *(void *)&long long v32 = v22;
      *((void *)&v32 + 1) = partial apply for closure #1 in DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter;
      *(void *)&long long v33 = v11;
      *((void *)&v33 + 1) = v7;
      *(void *)&long long v34 = v19;
      *((void *)&v34 + 1) = v18;
      *(void *)&long long v35 = v10;
      *((void *)&v35 + 1) = v25;
      long long v36 = v26;
      *(void *)&long long v37 = v30;
      *((void *)&v37 + 1) = v23;
      *(void *)&long long v38 = v24;
      *((void *)&v38 + 1) = __PAIR64__(v28, v29);
      outlined retain of DocumentIntroductionConfiguration(&v31);
      swift_bridgeObjectRelease();
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v30);
      outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?(v26);
      swift_release();
      outlined consume of Text?(v7, v19, v18, v10);
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      v47[4] = v35;
      v47[5] = v36;
      v47[6] = v37;
      v47[7] = v38;
      v47[0] = v31;
      v47[1] = v32;
      v47[2] = v33;
      v47[3] = v34;
      char v48 = 7;
      v39[0] = v27;
      v39[1] = v21;
      v39[2] = v22;
      v39[3] = partial apply for closure #1 in DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter;
      v39[4] = v11;
      v39[5] = v7;
      v39[6] = v19;
      v39[7] = v18;
      v39[8] = v10;
      v39[9] = v25;
      long long v40 = v26;
      uint64_t v41 = v30;
      uint64_t v42 = v23;
      uint64_t v43 = v24;
      unsigned int v44 = v29;
      unsigned int v45 = v28;
      outlined release of DocumentIntroductionConfiguration(v39);
    }
    else
    {
      outlined destroy of SceneList.Item.Value((uint64_t)__src);
    }
    outlined init with copy of SceneList.Item((uint64_t)v47, (uint64_t)__src);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v6 + 2) + 1, 1, v6);
    }
    unint64_t v13 = *((void *)v6 + 2);
    unint64_t v12 = *((void *)v6 + 3);
    if (v13 >= v12 >> 1) {
      int v6 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v12 > 1), v13 + 1, 1, v6);
    }
    *((void *)v6 + 2) = v13 + 1;
    memcpy(&v6[280 * v13 + 32], __src, 0x118uLL);
    outlined destroy of SceneList.Item((uint64_t)v47);
    v5 += 280;
    --v4;
  }
  while (v4);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t closure #1 in DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  MEMORY[0x1F4188790](a1);
  type metadata accessor for DocumentBrowserContextMenuSceneModifier();
  uint64_t v2 = *(void (**)(uint64_t))AGGraphGetValue();
  swift_retain();
  v2(a1);
  swift_release();
  return AnyView.init<A>(_:)();
}

char *protocol witness for Rule.value.getter in conformance DocumentBrowserContextMenuSceneModifier<A>.UpdateSceneList@<X0>(uint64_t a1@<X0>, char **a2@<X8>)
{
  uint64_t result = DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter(*v2, *(void *)(a1 + 16), *(void *)(a1 + 24));
  *a2 = result;
  return result;
}

uint64_t protocol witness for static _SceneModifier._makeScene(modifier:inputs:body:) in conformance DocumentBrowserContextMenuSceneModifier<A>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr)@<X2>, uint64_t a4@<X8>)
{
  return static DocumentBrowserContextMenuSceneModifier._makeScene(modifier:inputs:body:)(a1, a2, a3, a4);
}

uint64_t static DocumentBrowserContextMenuModifier._makeInputs(modifier:inputs:)(int *a1, uint64_t a2)
{
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  int v2 = *a1;
  int v3 = *(_DWORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 40);
  id v21 = *(id *)a2;
  int v22 = v3;
  uint64_t v23 = v4;
  long long v24 = *(_OWORD *)(a2 + 24);
  *(void *)&long long v25 = v5;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  _ViewInputs.init(withoutGeometry:)();
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  LODWORD(v21) = v2;
  type metadata accessor for DocumentBrowserContextMenuModifier();
  type metadata accessor for _GraphValue();
  int v6 = _GraphValue.value.getter();
  long long v19 = v34;
  long long v18 = v37;
  id v7 = (id)AGSubgraphGetCurrent();
  if (!v7) {
    __break(1u);
  }
  v17[1] = v17;
  id v21 = v7;
  int v22 = v6;
  uint64_t v23 = v31;
  LODWORD(v24) = v32;
  *((void *)&v24 + 1) = v33;
  long long v25 = v19;
  uint64_t v26 = v35;
  uint64_t v27 = v36;
  long long v28 = v18;
  uint64_t v29 = v38;
  int v30 = v39;
  MEMORY[0x1F4188790](v7);
  uint64_t v15 = type metadata accessor for DocumentBrowserContextMenuModifier.Child();
  uint64_t WitnessTable = swift_getWitnessTable();
  _sSay10Foundation3URLVGSgMaTm_0(0, &lazy cache variable for type metadata for Attribute<(_:)>, (uint64_t (*)(uint64_t))type metadata accessor for (_:), MEMORY[0x1E4F4E740]);
  uint64_t v9 = v8;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v21, (uint64_t)closure #1 in Attribute.init<A>(_:)partial apply, (uint64_t)&v14, v15, MEMORY[0x1E4FBC248], v9, MEMORY[0x1E4FBC278], v10);
  uint64_t v11 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  swift_release();
  int v12 = v20;
  lazy protocol witness table accessor for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  LODWORD(v21) = v12;
  PropertyList.subscript.setter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t (*DocumentBrowserContextMenuModifier.Child.value.getter(uint64_t a1))@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  long long v3 = v1[5];
  void v14[4] = v1[4];
  v14[5] = v3;
  int v15 = *((_DWORD *)v1 + 24);
  long long v4 = v1[1];
  v14[0] = *v1;
  v14[1] = v4;
  long long v5 = v1[3];
  v14[2] = v1[2];
  v14[3] = v5;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(a1 + 16);
  long long v8 = v1[4];
  long long v9 = v1[5];
  long long v10 = v1[2];
  *(_OWORD *)(v6 + 80) = v1[3];
  *(_OWORD *)(v6 + 96) = v8;
  *(_OWORD *)(v6 + 112) = v9;
  long long v11 = *v1;
  long long v12 = v1[1];
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = v11;
  *(_DWORD *)(v6 + 128) = *((_DWORD *)v1 + 24);
  *(_OWORD *)(v6 + 48) = v12;
  *(_OWORD *)(v6 + 64) = v10;
  outlined retain of SelectionEditMenuModifier<A>.Child((void **)v14);
  return partial apply for closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter;
}

uint64_t closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  AGGraphClearUpdate();
  id v10 = (id)AGSubgraphGetCurrent();
  AGSubgraphSetCurrent();
  closure #1 in closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter(a2, a1, a3, a4, a5);
  AGSubgraphSetCurrent();

  return AGGraphSetUpdate();
}

uint64_t closure #1 in closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  uint64_t v10 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  long long v12 = &v30[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v14 = v13[5];
  long long v36 = v13[4];
  long long v37 = v14;
  int v38 = *((_DWORD *)v13 + 24);
  long long v15 = v13[1];
  long long v32 = *v13;
  long long v33 = v15;
  long long v16 = v13[3];
  long long v34 = v13[2];
  long long v35 = v16;
  type metadata accessor for DocumentBrowserContextMenuModifier.Child();
  int v17 = (void (*)(uint64_t))specialized DocumentBrowserContextMenuModifier.Child.modifier.getter();
  swift_retain();
  v17(a2);
  swift_release();
  uint64_t v31 = a3;
  uint64_t v18 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)v12, (uint64_t)partial apply for closure #1 in Attribute.init(value:), (uint64_t)v30, a3, MEMORY[0x1E4FBC248], v18, MEMORY[0x1E4FBC278], v19);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, a3);
  int v21 = v32;
  long long v22 = *(_OWORD *)(a1 + 64);
  long long v34 = *(_OWORD *)(a1 + 48);
  long long v35 = v22;
  long long v36 = *(_OWORD *)(a1 + 80);
  LODWORD(v37) = *(_DWORD *)(a1 + 96);
  long long v23 = *(_OWORD *)(a1 + 32);
  long long v32 = *(_OWORD *)(a1 + 16);
  long long v33 = v23;
  _ViewInputs.makePlatformItemsGenerator<A, B>(strategy:source:)(v20, v21, (uint64_t)&type metadata for MultiButtonPlatformItemsStrategy, a3, (uint64_t)&protocol witness table for MultiButtonPlatformItemsStrategy, a4);
  uint64_t Value = AGGraphGetValue();
  uint64_t v25 = *(void *)Value;
  int v26 = *(_DWORD *)(Value + 8);
  uint64_t v27 = *(void *)(Value + 16);
  *(void *)a5 = v25;
  *(_DWORD *)(a5 + 8) = v26;
  *(void *)(a5 + 16) = v27;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for Rule.value.getter in conformance DocumentBrowserContextMenuModifier<A>.Child@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  DocumentBrowserContextMenuModifier.Child.value.getter(a1);
  uint64_t v4 = v3;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = partial apply for closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter;
  *(void *)(result + 24) = v4;
  *a2 = partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [URL]?) -> (@out PlatformItems);
  a2[1] = result;
  return result;
}

uint64_t protocol witness for static _GraphInputsModifier._makeInputs(modifier:inputs:) in conformance DocumentBrowserContextMenuModifier<A>(int *a1, uint64_t a2)
{
  return static DocumentBrowserContextMenuModifier._makeInputs(modifier:inputs:)(a1, a2);
}

_UNKNOWN **base witness table accessor for ViewModifier in DocumentBrowserContextMenuModifier<A>()
{
  return &protocol witness table for DocumentBrowserContextMenuModifier<A>;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance DocumentBrowserContextMenuModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA60](a1, a2, a3, a4, a5, a6, &protocol witness table for DocumentBrowserContextMenuModifier<A>);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance DocumentBrowserContextMenuModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return MEMORY[0x1F40FDA68](a1, a2, a3, a4, a5, a6, &protocol witness table for DocumentBrowserContextMenuModifier<A>);
}

uint64_t protocol witness for static ViewModifier._viewListCount(inputs:body:) in conformance DocumentBrowserContextMenuModifier<A>()
{
  return static ViewModifier<>._viewListCount(inputs:body:)();
}

uint64_t type metadata accessor for DocumentBrowserContextMenuSceneModifier.UpdateSceneList()
{
  return __swift_instantiateGenericMetadata();
}

void type metadata accessor for Attribute<SceneList>()
{
  if (!lazy cache variable for type metadata for Attribute<SceneList>)
  {
    unint64_t v0 = type metadata accessor for Attribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Attribute<SceneList>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable()
{
  unint64_t result = lazy protocol witness table cache variable for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable;
  if (!lazy protocol witness table cache variable for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable);
  }
  return result;
}

uint64_t type metadata accessor for DocumentBrowserContextMenuModifier.Child()
{
  return __swift_instantiateGenericMetadata();
}

void _sSay10Foundation3URLVGSgMaTm_0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey;
  if (!lazy protocol witness table cache variable for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _GraphInputs.DocumentBrowserContextMenuStorageKey and conformance _GraphInputs.DocumentBrowserContextMenuStorageKey);
  }
  return result;
}

ValueMetadata *type metadata accessor for DocumentBrowserContextMenuStorage()
{
  return &type metadata for DocumentBrowserContextMenuStorage;
}

ValueMetadata *type metadata accessor for _GraphInputs.DocumentBrowserContextMenuStorageKey()
{
  return &type metadata for _GraphInputs.DocumentBrowserContextMenuStorageKey;
}

uint64_t base witness table accessor for _AttributeBody in DocumentBrowserContextMenuModifier<A>.Child()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in DocumentBrowserContextMenuSceneModifier<A>.UpdateSceneList()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D7324C()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter(uint64_t a1)
{
  return closure #1 in DocumentBrowserContextMenuSceneModifier.UpdateSceneList.value.getter(a1);
}

uint64_t sub_187D73268()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for thunk for @escaping @callee_guaranteed (@guaranteed [URL]?) -> (@out PlatformItems)(void *a1)
{
  return (*(uint64_t (**)(void))(v1 + 16))(*a1);
}

uint64_t sub_187D732CC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in DocumentBrowserContextMenuModifier.Child.value.getter(a1, v2 + 32, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t specialized DocumentBrowserContextMenuModifier.Child.modifier.getter()
{
  return *(void *)AGGraphGetValue();
}

void *assignWithCopy for CommandAccumulator(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CommandAccumulator()
{
  return &type metadata for CommandAccumulator;
}

void *initializeBufferWithCopyOfBuffer for CommandOperation(unsigned char *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(unsigned char *)a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = *(void *)((char *)a2 + v7);
    uint64_t v11 = *(void *)((char *)a2 + v7 + 8);
    char v12 = *((unsigned char *)a2 + v7 + 16);
    outlined copy of Text.Storage(v10, v11, v12);
    *(void *)unint64_t v8 = v10;
    *((void *)v8 + 1) = v11;
    v8[16] = v12;
    *((void *)v8 + 3) = *((void *)v9 + 3);
    uint64_t v13 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    long long v14 = &v8[v13];
    long long v15 = &v9[v13];
    uint64_t v16 = type metadata accessor for UUID();
    int v17 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
    swift_bridgeObjectRetain();
    v17(v14, v15, v16);
    uint64_t v18 = *(int *)(a3 + 24);
    uint64_t v19 = (void *)((char *)v4 + v18);
    uint64_t v20 = (void *)((char *)a2 + v18);
    if (*v20)
    {
      uint64_t v21 = v20[1];
      void *v19 = *v20;
      v19[1] = v21;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }
  }
  return v4;
}

uint64_t destroy for CommandOperation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  swift_bridgeObjectRelease();
  uint64_t v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v6 = type metadata accessor for UUID();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  if (*(void *)(a1 + *(int *)(a2 + 24)))
  {
    return swift_release();
  }
  return result;
}

unsigned char *initializeWithCopy for CommandOperation(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6];
  uint64_t v10 = *(void *)&a2[v6 + 8];
  char v11 = a2[v6 + 16];
  outlined copy of Text.Storage(v9, v10, v11);
  *(void *)uint64_t v7 = v9;
  *((void *)v7 + 1) = v10;
  v7[16] = v11;
  *((void *)v7 + 3) = *((void *)v8 + 3);
  uint64_t v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v13 = &v7[v12];
  long long v14 = &v8[v12];
  uint64_t v15 = type metadata accessor for UUID();
  uint64_t v16 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 16);
  swift_bridgeObjectRetain();
  v16(v13, v14, v15);
  uint64_t v17 = *(int *)(a3 + 24);
  uint64_t v18 = &a1[v17];
  uint64_t v19 = &a2[v17];
  if (*v19)
  {
    uint64_t v20 = v19[1];
    *uint64_t v18 = *v19;
    v18[1] = v20;
    swift_retain();
  }
  else
  {
    *(_OWORD *)uint64_t v18 = *(_OWORD *)v19;
  }
  return a1;
}

unsigned char *assignWithCopy for CommandOperation(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = *(void *)&a2[v6];
  uint64_t v10 = *(void *)&a2[v6 + 8];
  char v11 = a2[v6 + 16];
  outlined copy of Text.Storage(v9, v10, v11);
  uint64_t v12 = *(void *)v7;
  uint64_t v13 = *((void *)v7 + 1);
  char v14 = v7[16];
  *(void *)uint64_t v7 = v9;
  *((void *)v7 + 1) = v10;
  v7[16] = v11;
  outlined consume of Text.Storage(v12, v13, v14);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v15 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v16 = &v7[v15];
  uint64_t v17 = &v8[v15];
  uint64_t v18 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v18 - 8) + 24))(v16, v17, v18);
  uint64_t v19 = *(int *)(a3 + 24);
  uint64_t v20 = &a1[v19];
  uint64_t v21 = (uint64_t *)&a2[v19];
  uint64_t v22 = *(void *)&a1[v19];
  uint64_t v23 = *v21;
  if (!v22)
  {
    if (v23)
    {
      uint64_t v25 = v21[1];
      *uint64_t v20 = v23;
      v20[1] = v25;
      swift_retain();
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    return a1;
  }
  if (!v23)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v24 = v21[1];
  *uint64_t v20 = v23;
  v20[1] = v24;
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *initializeWithTake for CommandOperation(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  long long v9 = *(_OWORD *)&a2[v6 + 16];
  *uint64_t v7 = *(_OWORD *)&a2[v6];
  v7[1] = v9;
  uint64_t v10 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  char v11 = (char *)v7 + v10;
  uint64_t v12 = &v8[v10];
  uint64_t v13 = type metadata accessor for UUID();
  (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v13 - 8) + 32))(v11, v12, v13);
  uint64_t v14 = *(int *)(a3 + 24);
  uint64_t v15 = &a1[v14];
  uint64_t v16 = (uint64_t *)&a2[v14];
  uint64_t v17 = *v16;
  if (*v16)
  {
    uint64_t v18 = v16[1];
    void *v15 = v17;
    v15[1] = v18;
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
  }
  return a1;
}

unsigned char *assignWithTake for CommandOperation(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  LOBYTE(v6) = a2[v6 + 16];
  uint64_t v9 = *(void *)v7;
  uint64_t v10 = *((void *)v7 + 1);
  char v11 = v7[16];
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  v7[16] = v6;
  outlined consume of Text.Storage(v9, v10, v11);
  *((void *)v7 + 3) = *((void *)v8 + 3);
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v13 = &v7[v12];
  uint64_t v14 = &v8[v12];
  uint64_t v15 = type metadata accessor for UUID();
  (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v15 - 8) + 40))(v13, v14, v15);
  uint64_t v16 = *(int *)(a3 + 24);
  uint64_t v17 = &a1[v16];
  uint64_t v18 = (uint64_t *)&a2[v16];
  uint64_t v19 = *(void *)&a1[v16];
  uint64_t v20 = *v18;
  if (!v19)
  {
    if (v20)
    {
      uint64_t v22 = v18[1];
      *uint64_t v17 = v20;
      v17[1] = v22;
      return a1;
    }
LABEL_7:
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
    return a1;
  }
  if (!v20)
  {
    swift_release();
    goto LABEL_7;
  }
  uint64_t v21 = v18[1];
  *uint64_t v17 = v20;
  v17[1] = v21;
  swift_release();
  return a1;
}

uint64_t sub_187D73A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    uint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unint64_t v12 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v12 >= 0xFFFFFFFF) {
      LODWORD(v12) = -1;
    }
    int v13 = v12 - 1;
    if (v13 < 0) {
      int v13 = -1;
    }
    return (v13 + 1);
  }
}

uint64_t sub_187D73B1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for CommandGroupPlacement(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v12(v11, a2, a2, v10);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
  return result;
}

uint64_t closure #1 in CommandOperation.init<A>(mutation:placement:content:)(unsigned char *a1, uint64_t a2, unsigned __int8 a3, uint64_t a4, unsigned char *a5, uint64_t a6, uint64_t a7)
{
  unsigned int v44 = a5;
  uint64_t v45 = a6;
  uint64_t v43 = a1;
  int v10 = a3;
  uint64_t v11 = type metadata accessor for CommandGroupPlacement(0);
  MEMORY[0x1F4188790](v11 - 8);
  int v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v41 - v15;
  uint64_t v17 = type metadata accessor for CommandGroupPlacementBox(0);
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17 - 8);
  uint64_t v20 = (char *)&v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v41 - v22;
  MEMORY[0x1F4188790](v24);
  int v26 = (char *)&v41 - v25;
  if (v10 == 3)
  {
    outlined init with copy of CommandGroupPlacement(a4, (uint64_t)&v41 - v25, type metadata accessor for CommandGroupPlacement);
    uint64_t v27 = *(void **)a2;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v41 = a7;
    uint64_t v42 = a4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v27 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, v27[2] + 1, 1, v27);
    }
    unint64_t v30 = v27[2];
    unint64_t v29 = v27[3];
    if (v30 >= v29 >> 1) {
      uint64_t v27 = (void *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v29 > 1, v30 + 1, 1, v27);
    }
    v27[2] = v30 + 1;
    outlined init with take of CommandGroupPlacement((uint64_t)v26, (uint64_t)v27+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(void *)(v18 + 72) * v30, type metadata accessor for CommandGroupPlacementBox);
    *(void *)a2 = v27;
    a7 = v41;
    a4 = v42;
  }
  outlined init with copy of CommandGroupPlacement(a4, (uint64_t)v16, type metadata accessor for CommandGroupPlacement);
  uint64_t v31 = *(void *)(a2 + 8);
  outlined init with copy of CommandGroupPlacement((uint64_t)v16, (uint64_t)v23, type metadata accessor for CommandGroupPlacement);
  if (*(void *)(v31 + 16) && (unint64_t v32 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v23), (v33 & 1) != 0))
  {
    long long v34 = (uint64_t *)(*(void *)(v31 + 56) + 16 * v32);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    swift_retain();
    swift_bridgeObjectRetain();
    outlined destroy of CommandGroupPlacementBox((uint64_t)v23, type metadata accessor for CommandGroupPlacementBox);
    outlined destroy of CommandGroupPlacementBox((uint64_t)v16, type metadata accessor for CommandGroupPlacement);
  }
  else
  {
    outlined destroy of CommandGroupPlacementBox((uint64_t)v23, type metadata accessor for CommandGroupPlacementBox);
    outlined destroy of CommandGroupPlacementBox((uint64_t)v16, type metadata accessor for CommandGroupPlacement);
    uint64_t v35 = AnyView.init<A>(_:)();
    uint64_t v36 = MEMORY[0x1E4FBC870];
  }
  uint64_t v47 = v35;
  uint64_t v48 = v36;
  CommandAccumulator.visit<A>(_:operation:)(v44, v43, v45, a7);
  outlined init with copy of CommandGroupPlacement(a4, (uint64_t)v13, type metadata accessor for CommandGroupPlacement);
  uint64_t v37 = v47;
  uint64_t v38 = v48;
  outlined init with copy of CommandGroupPlacement((uint64_t)v13, (uint64_t)v20, type metadata accessor for CommandGroupPlacement);
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  char v39 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v46 = *(void *)(a2 + 8);
  *(void *)(a2 + 8) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)(v37, v38, (uint64_t)v20, v39);
  *(void *)(a2 + 8) = v46;
  swift_bridgeObjectRelease();
  outlined destroy of CommandGroupPlacementBox((uint64_t)v20, type metadata accessor for CommandGroupPlacementBox);
  swift_bridgeObjectRelease();
  swift_release();
  outlined destroy of CommandGroupPlacementBox((uint64_t)v13, type metadata accessor for CommandGroupPlacement);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_187D74014()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = (int *)(type metadata accessor for CommandGroupPlacement(0) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)v2 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80);
  uint64_t v4 = *(void *)(v1 - 8);
  unint64_t v5 = (v3 + *(void *)(*(void *)v2 + 64) + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + v3;
  outlined consume of Text.Storage(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8), *(unsigned char *)(v0 + v3 + 16));
  swift_bridgeObjectRelease();
  uint64_t v7 = v6 + v2[7];
  uint64_t v8 = type metadata accessor for UUID();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v7, v8);
  (*(void (**)(unint64_t, uint64_t))(v4 + 8))(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommandOperation.init<A>(mutation:placement:content:)(unsigned char *a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v7 = *(void *)(type metadata accessor for CommandGroupPlacement(0) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 33) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (unsigned char *)(v2
               + ((v8 + *(void *)(v7 + 64) + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80)));
  unsigned __int8 v10 = *(unsigned char *)(v2 + 32);

  return closure #1 in CommandOperation.init<A>(mutation:placement:content:)(a1, a2, v10, v2 + v8, v9, v5, v6);
}

uint64_t CommandAccumulator.visit<A>(_:operation:)(unsigned char *a1, unsigned char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  v55 = a1;
  uint64_t v5 = type metadata accessor for CommandGroupPlacementBox(0);
  MEMORY[0x1F4188790](v5 - 8);
  v51 = (char *)&v44 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v50 = (uint64_t)&v44 - v8;
  type metadata accessor for PlatformItemListTransformModifier<AllPlatformItemListFlags>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  uint64_t v47 = (char *)&v44 - v11;
  uint64_t v48 = type metadata accessor for TupleView();
  MEMORY[0x1F4188790](v48);
  uint64_t v46 = (char *)&v44 - v12;
  uint64_t v13 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (uint64_t *)((char *)&v44 - v14);
  uint64_t v45 = type metadata accessor for TupleView();
  MEMORY[0x1F4188790](v45);
  unsigned int v44 = (char *)&v44 - v16;
  uint64_t v56 = type metadata accessor for CommandOperation();
  uint64_t v17 = *(void *)(v56 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  MEMORY[0x1F4188790](v56);
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v44 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v44 - v24;
  outlined init with copy of CommandGroupPlacement((uint64_t)a2, (uint64_t)v19, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  unint64_t v26 = (*(unsigned __int8 *)(v17 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = (uint64_t)v19;
  uint64_t v29 = v54;
  outlined init with take of CommandGroupPlacement(v28, v27 + v26, (uint64_t (*)(void))type metadata accessor for CommandOperation);
  View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for AllPlatformItemListFlags, (uint64_t)partial apply for closure #1 in CommandAccumulator.visit<A>(_:operation:), v27, v53, (uint64_t)&type metadata for AllPlatformItemListFlags, v29);
  swift_release();
  v55 = a2;
  switch(*a2)
  {
    case 1:
      unint64_t v30 = v52;
      uint64_t v39 = *v52;
      uint64_t v40 = *(int *)(TupleTypeMetadata2 + 48);
      uint64_t v41 = v49;
      uint64_t v42 = v47;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v47, v25, v9);
      *(void *)&v42[v40] = v39;
      swift_retain();
      uint64_t v32 = v41;
      TupleView.init(_:)();
      swift_getWitnessTable();
      goto LABEL_6;
    case 2:
      uint64_t v32 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v22, v25, v9);
      uint64_t v57 = v29;
      v58 = &protocol witness table for PlatformItemListTransformModifier<A>;
      goto LABEL_9;
    case 3:
      uint64_t v32 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v22, v25, v9);
      uint64_t v59 = v29;
      v60 = &protocol witness table for PlatformItemListTransformModifier<A>;
LABEL_9:
      swift_getWitnessTable();
      uint64_t v38 = AnyView.init<A>(_:)();
      unint64_t v30 = v52;
      goto LABEL_10;
    case 4:
      uint64_t v33 = v29;
      unint64_t v30 = v52;
      uint64_t v34 = v52[1];
      uint64_t v35 = v55;
      uint64_t v36 = v50;
      outlined init with copy of CommandGroupPlacement((uint64_t)&v55[*(int *)(v56 + 20)], v50, type metadata accessor for CommandGroupPlacement);
      LOBYTE(v34) = specialized Set.contains(_:)(v36, v34);
      outlined destroy of CommandGroupPlacementBox(v36, type metadata accessor for CommandGroupPlacementBox);
      uint64_t v37 = (uint64_t)v51;
      uint64_t v32 = v49;
      if (v34) {
        goto LABEL_12;
      }
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v22, v25, v9);
      uint64_t v61 = v33;
      v62 = &protocol witness table for PlatformItemListTransformModifier<A>;
      swift_getWitnessTable();
      uint64_t v38 = AnyView.init<A>(_:)();
      break;
    default:
      unint64_t v30 = v52;
      uint64_t v31 = (char *)v15 + *(int *)(v13 + 48);
      uint64_t *v15 = *v52;
      uint64_t v32 = v49;
      (*(void (**)(char *, char *, uint64_t))(v49 + 16))(v31, v25, v9);
      swift_retain();
      TupleView.init(_:)();
      swift_getWitnessTable();
LABEL_6:
      uint64_t v38 = AnyView.init<A>(_:)();
LABEL_10:
      uint64_t v35 = v55;
      uint64_t v36 = v50;
      uint64_t v37 = (uint64_t)v51;
      break;
  }
  swift_release();
  *unint64_t v30 = v38;
LABEL_12:
  outlined init with copy of CommandGroupPlacement((uint64_t)&v35[*(int *)(v56 + 20)], v37, type metadata accessor for CommandGroupPlacement);
  specialized Set._Variant.insert(_:)(v36, v37);
  outlined destroy of CommandGroupPlacementBox(v36, type metadata accessor for CommandGroupPlacementBox);
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v25, v9);
}

uint64_t closure #1 in CommandAccumulator.visit<A>(_:operation:)(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void **)result;
  uint64_t v3 = *(void *)(*(void *)result + 16);
  if (v3)
  {
    uint64_t v5 = (void *)result;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      goto LABEL_8;
    }
    while (1)
    {
      unint64_t v6 = 0;
      while (1)
      {
        *uint64_t v5 = v2;
        if (v6 >= v2[2]) {
          break;
        }
        uint64_t v7 = type metadata accessor for PlatformItemList.Item();
        uint64_t v8 = (uint64_t)v2
           + ((*(unsigned __int8 *)(*(void *)(v7 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v7 - 8) + 80))
           + *(void *)(*(void *)(v7 - 8) + 72) * v6
           + *(int *)(v7 + 112);
        outlined destroy of CommandGroupPlacementBox(v8, (uint64_t (*)(void))type metadata accessor for CommandOperation?);
        outlined init with copy of CommandGroupPlacement(a2, v8, (uint64_t (*)(void))type metadata accessor for CommandOperation);
        uint64_t v9 = type metadata accessor for CommandOperation();
        uint64_t result = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56))(v8, 0, 1, v9);
        uint64_t v2 = (void *)*v5;
        if (v3 == ++v6) {
          return result;
        }
      }
      __break(1u);
LABEL_8:
      uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
    }
  }
  return result;
}

uint64_t sub_187D74B2C()
{
  uint64_t v1 = type metadata accessor for CommandOperation();
  uint64_t v2 = v1 - 8;
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v1 - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v1 - 8) + 80);
  unint64_t v4 = v0 + v3 + *(int *)(v1 + 20);
  outlined consume of Text.Storage(*(void *)v4, *(void *)(v4 + 8), *(unsigned char *)(v4 + 16));
  swift_bridgeObjectRelease();
  unint64_t v5 = v4 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
  uint64_t v6 = type metadata accessor for UUID();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(v5, v6);
  if (*(void *)(v0 + v3 + *(int *)(v2 + 32))) {
    swift_release();
  }

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in CommandAccumulator.visit<A>(_:operation:)(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for CommandOperation() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));

  return closure #1 in CommandAccumulator.visit<A>(_:operation:)(a1, v4);
}

uint64_t outlined destroy of CommandGroupPlacementBox(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for CommandAccumulator.Result()
{
  return &type metadata for CommandAccumulator.Result;
}

unsigned char *storeEnumTagSinglePayload for CommandOperation.Mutation(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *uint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D74E00);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CommandOperation.Mutation()
{
  return &type metadata for CommandOperation.Mutation;
}

unint64_t lazy protocol witness table accessor for type CommandOperation.Mutation and conformance CommandOperation.Mutation()
{
  unint64_t result = lazy protocol witness table cache variable for type CommandOperation.Mutation and conformance CommandOperation.Mutation;
  if (!lazy protocol witness table cache variable for type CommandOperation.Mutation and conformance CommandOperation.Mutation)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CommandOperation.Mutation and conformance CommandOperation.Mutation);
  }
  return result;
}

uint64_t View.onPencilDoubleTap(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = a1;
  v4[1] = a2;
  _OWORD v4[2] = 0;
  v4[3] = 0;
  return MEMORY[0x18C113660](v4, a3, &type metadata for PencilEventsModifier);
}

__n128 PencilDoubleTapGestureValue.hoverPose.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v5 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 64) = v2;
  return result;
}

void PencilDoubleTapGestureValue.hash(into:)()
{
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
}

Swift::Int PencilDoubleTapGestureValue.hashValue.getter()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PencilDoubleTapGestureValue()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance PencilDoubleTapGestureValue()
{
  if (*(unsigned char *)(v0 + 64) == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PencilDoubleTapGestureValue()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  Hasher.init(_seed:)();
  if (v1 == 1)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
  }
  return Hasher._finalize()();
}

uint64_t View.onPencilSqueeze(perform:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[0] = 0;
  v4[1] = 0;
  _OWORD v4[2] = a1;
  v4[3] = a2;
  return MEMORY[0x18C113660](v4, a3, &type metadata for PencilEventsModifier);
}

__n128 PencilSqueezeGestureValue.hoverPose.getter@<Q0>(uint64_t a1@<X8>)
{
  char v2 = *(unsigned char *)(v1 + 64);
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = *(__n128 *)(v1 + 32);
  long long v5 = *(_OWORD *)(v1 + 48);
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v5;
  *(unsigned char *)(a1 + 64) = v2;
  return result;
}

uint64_t PencilSqueezeGestureValue.normalizedForceVelocity.getter()
{
  return *(void *)(v0 + 72);
}

uint64_t PencilSqueezeGestureValue.normalizedForceVelocity.setter(uint64_t result, char a2)
{
  *(void *)(v2 + 72) = result;
  *(unsigned char *)(v2 + 80) = a2 & 1;
  return result;
}

uint64_t (*PencilSqueezeGestureValue.normalizedForceVelocity.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void PencilSqueezeGestureValue.hash(into:)()
{
  Swift::UInt64 v1 = *(void *)(v0 + 72);
  int v2 = *(unsigned __int8 *)(v0 + 80);
  if (*(unsigned char *)(v0 + 64) != 1)
  {
    Hasher._combine(_:)(1u);
    PencilHoverPose.hash(into:)();
    if (!v2) {
      goto LABEL_3;
    }
LABEL_8:
    Hasher._combine(_:)(0);
    return;
  }
  Hasher._combine(_:)(0);
  if (v2) {
    goto LABEL_8;
  }
LABEL_3:
  Hasher._combine(_:)(1u);
  if ((v1 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v1;
  }
  else {
    Swift::UInt64 v3 = 0;
  }
  Hasher._combine(_:)(v3);
}

Swift::Int PencilSqueezeGestureValue.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance PencilSqueezeGestureValue()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance PencilSqueezeGestureValue()
{
  return Hasher._finalize()();
}

uint64_t specialized static PencilSqueezeGesturePhase.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  float64_t v3 = *(double *)a1;
  float64_t v2 = *(double *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v8 = *(void *)(a1 + 48);
  uint64_t v9 = *(void *)(a1 + 56);
  uint64_t v11 = *(void *)(a1 + 64);
  double v10 = *(double *)(a1 + 72);
  char v12 = *(unsigned char *)(a1 + 80);
  int v13 = *(unsigned __int8 *)(a1 + 81);
  float64_t v14 = *(double *)a2;
  float64_t v15 = *(double *)(a2 + 8);
  uint64_t v16 = *(void *)(a2 + 16);
  uint64_t v17 = *(void *)(a2 + 24);
  uint64_t v18 = *(void *)(a2 + 32);
  uint64_t v19 = *(void *)(a2 + 40);
  uint64_t v21 = *(void *)(a2 + 48);
  uint64_t v20 = *(void *)(a2 + 56);
  uint64_t v22 = *(void *)(a2 + 64);
  double v23 = *(double *)(a2 + 72);
  int v24 = *(unsigned __int8 *)(a2 + 80);
  int v25 = *(unsigned __int8 *)(a2 + 81);
  if (!v13)
  {
    if (v25) {
      return 0;
    }
    if (v11)
    {
      if ((v22 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      v35.f64[0] = v3;
      v35.f64[1] = v2;
      uint64_t v36 = v5;
      uint64_t v37 = v4;
      uint64_t v38 = v7;
      uint64_t v39 = v6;
      uint64_t v40 = v8;
      uint64_t v41 = v9;
      char v42 = 0;
      if (v22) {
        return 0;
      }
      v28.f64[0] = v14;
      v28.f64[1] = v15;
      uint64_t v29 = v16;
      uint64_t v30 = v17;
      uint64_t v31 = v18;
      uint64_t v32 = v19;
      uint64_t v33 = v21;
      uint64_t v34 = v20;
      if ((specialized static PencilHoverPose.== infix(_:_:)(&v35, &v28) & 1) == 0) {
        return 0;
      }
    }
    if ((v12 & 1) == 0) {
      return (v24 & 1) == 0 && v10 == v23;
    }
    goto LABEL_26;
  }
  if (v13 != 1)
  {
    if (v25 != 2) {
      return 0;
    }
    return !(*(void *)&v15 | *(void *)&v14 | v16 | v17 | v18 | v19 | v21 | v20 | v22 | *(void *)&v23) && v24 == 0;
  }
  if (v25 == 1)
  {
    if (v11)
    {
      if ((v22 & 1) == 0) {
        return 0;
      }
    }
    else
    {
      v35.f64[0] = v3;
      v35.f64[1] = v2;
      uint64_t v36 = v5;
      uint64_t v37 = v4;
      uint64_t v38 = v7;
      uint64_t v39 = v6;
      uint64_t v40 = v8;
      uint64_t v41 = v9;
      char v42 = 0;
      if (v22) {
        return 0;
      }
      v28.f64[0] = v14;
      v28.f64[1] = v15;
      uint64_t v29 = v16;
      uint64_t v30 = v17;
      uint64_t v31 = v18;
      uint64_t v32 = v19;
      uint64_t v33 = v21;
      uint64_t v34 = v20;
      if ((specialized static PencilHoverPose.== infix(_:_:)(&v35, &v28) & 1) == 0) {
        return 0;
      }
    }
    if ((v12 & 1) == 0) {
      return (v24 & 1) == 0 && v10 == v23;
    }
LABEL_26:
    if (v24) {
      return 1;
    }
  }
  return 0;
}

BOOL specialized static PencilSqueezeGestureValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  double v2 = *(double *)(a1 + 72);
  char v3 = *(unsigned char *)(a1 + 80);
  char v4 = *(unsigned char *)(a2 + 64);
  double v5 = *(double *)(a2 + 72);
  char v6 = *(unsigned char *)(a2 + 80);
  if (*(unsigned char *)(a1 + 64))
  {
    if ((*(unsigned char *)(a2 + 64) & 1) == 0) {
      return 0;
    }
  }
  else
  {
    float64x2_t v7 = *(float64x2_t *)a2;
    float64x2_t v8 = *(float64x2_t *)(a2 + 16);
    float64x2_t v9 = *(float64x2_t *)(a2 + 32);
    float64x2_t v10 = *(float64x2_t *)(a2 + 48);
    float64x2_t v11 = *(float64x2_t *)(a1 + 16);
    v16[0] = *(float64x2_t *)a1;
    v16[1] = v11;
    float64x2_t v12 = *(float64x2_t *)(a1 + 48);
    v16[2] = *(float64x2_t *)(a1 + 32);
    v16[3] = v12;
    char v17 = 0;
    if (v4) {
      return 0;
    }
    v15[0] = v7;
    v15[1] = v8;
    v15[2] = v9;
    v15[3] = v10;
    if ((specialized static PencilHoverPose.== infix(_:_:)(v16, v15) & 1) == 0) {
      return 0;
    }
  }
  if ((v3 & 1) == 0)
  {
    if (v2 == v5) {
      char v14 = v6;
    }
    else {
      char v14 = 1;
    }
    return (v14 & 1) == 0;
  }
  return (v6 & 1) != 0;
}

BOOL specialized static PencilDoubleTapGestureValue.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  char v2 = *(unsigned char *)(a2 + 64);
  if ((*(unsigned char *)(a1 + 64) & 1) == 0)
  {
    float64x2_t v3 = *(float64x2_t *)a2;
    float64x2_t v4 = *(float64x2_t *)(a2 + 16);
    float64x2_t v5 = *(float64x2_t *)(a2 + 32);
    float64x2_t v6 = *(float64x2_t *)(a2 + 48);
    float64x2_t v7 = *(float64x2_t *)(a1 + 16);
    v11[0] = *(float64x2_t *)a1;
    v11[1] = v7;
    float64x2_t v8 = *(float64x2_t *)(a1 + 48);
    void v11[2] = *(float64x2_t *)(a1 + 32);
    v11[3] = v8;
    char v12 = 0;
    if (v2) {
      return 0;
    }
    v10[0] = v3;
    v10[1] = v4;
    void v10[2] = v5;
    void v10[3] = v6;
    return (specialized static PencilHoverPose.== infix(_:_:)(v11, v10) & 1) != 0;
  }
  return (*(unsigned char *)(a2 + 64) & 1) != 0;
}

unint64_t lazy protocol witness table accessor for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue;
  if (!lazy protocol witness table cache variable for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilDoubleTapGestureValue and conformance PencilDoubleTapGestureValue);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue()
{
  unint64_t result = lazy protocol witness table cache variable for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue;
  if (!lazy protocol witness table cache variable for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type PencilSqueezeGestureValue and conformance PencilSqueezeGestureValue);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for PencilDoubleTapGestureValue(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PencilDoubleTapGestureValue(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 65) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PencilDoubleTapGestureValue()
{
  return &type metadata for PencilDoubleTapGestureValue;
}

uint64_t getEnumTagSinglePayload for PencilSqueezeGesturePhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 82)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 81);
  if (v3 >= 3) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PencilSqueezeGesturePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_WORD *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)unint64_t result = 0u;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 82) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 82) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 81) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for PencilSqueezeGesturePhase(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 81);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for PencilSqueezeGesturePhase(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    unsigned int v2 = a2 - 2;
    *(unsigned char *)(result + 80) = 0;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 81) = a2;
  return result;
}

ValueMetadata *type metadata accessor for PencilSqueezeGesturePhase()
{
  return &type metadata for PencilSqueezeGesturePhase;
}

uint64_t getEnumTagSinglePayload for PencilSqueezeGestureValue(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 81)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for PencilSqueezeGestureValue(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 81) = v3;
  return result;
}

ValueMetadata *type metadata accessor for PencilSqueezeGestureValue()
{
  return &type metadata for PencilSqueezeGestureValue;
}

uint64_t sub_187D7596C()
{
  return swift_getWitnessTable();
}

__n128 static OnScrollPhaseChangeModifier._makeView(modifier:inputs:body:)@<Q0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(unint64_t *__return_ptr, uint64_t, unint64_t *)@<X2>, unint64_t *a4@<X8>)
{
  uint64_t v68 = *MEMORY[0x1E4F143B8];
  int v31 = *a1;
  unint64_t v4 = *(void *)a2;
  int v5 = *(_DWORD *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  unsigned int v7 = *(_DWORD *)(a2 + 24);
  unsigned int v8 = *(_DWORD *)(a2 + 28);
  unsigned int v9 = *(_DWORD *)(a2 + 32);
  unsigned int v10 = *(_DWORD *)(a2 + 36);
  uint64_t v11 = *(void *)(a2 + 40);
  uint64_t v12 = *(void *)(a2 + 48);
  unsigned int v13 = *(_DWORD *)(a2 + 56);
  unsigned int v14 = *(_DWORD *)(a2 + 60);
  unsigned int v15 = *(_DWORD *)(a2 + 64);
  unsigned int v16 = *(_DWORD *)(a2 + 68);
  unsigned int v18 = *(_DWORD *)(a2 + 72);
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  int v19 = *(_DWORD *)(a2 + 80);
  unint64_t v59 = v4;
  unsigned int v42 = v7;
  int v43 = v5;
  int v60 = v5;
  uint64_t v61 = v6;
  *(void *)&long long v62 = __PAIR64__(v8, v7);
  unsigned int v40 = v9;
  unsigned int v41 = v8;
  *((void *)&v62 + 1) = __PAIR64__(v10, v9);
  unsigned int v38 = v13;
  unsigned int v39 = v10;
  uint64_t v63 = v11;
  uint64_t v64 = v12;
  *(void *)&long long v65 = __PAIR64__(v14, v13);
  unsigned int v36 = v15;
  unsigned int v37 = v14;
  *((void *)&v65 + 1) = __PAIR64__(v16, v15);
  unsigned int v34 = v18;
  unsigned int v35 = v16;
  unint64_t v66 = __PAIR64__(v17, v18);
  int v32 = v19;
  unsigned int v33 = v17;
  int v67 = v19;
  unint64_t v44 = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PreferenceKeys.add(_:)();
  unint64_t v50 = v59;
  int v51 = v60;
  *(void *)&v52[4] = v6;
  long long v53 = v62;
  uint64_t v54 = v11;
  uint64_t v55 = v12;
  long long v56 = v65;
  unint64_t v57 = v66;
  int v58 = v67;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v20 = swift_bridgeObjectRetain();
  a3(&v48, v20, &v50);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  unint64_t v21 = v48;
  v22.n128_u64[0] = v49;
  unint64_t v50 = v48;
  __n128 v46 = v22;
  int v51 = v49;
  uint64_t v23 = PreferencesOutputs.subscript.getter();
  if ((v23 & 0x100000000) != 0)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    unsigned int v24 = v23;
    LODWORD(v50) = v31;
    type metadata accessor for Binding<ScrollPhaseState>(0, &lazy cache variable for type metadata for _GraphValue<OnScrollPhaseChangeModifier>, (uint64_t)&type metadata for OnScrollPhaseChangeModifier, MEMORY[0x1E4F3F590]);
    unsigned int v25 = _GraphValue.value.getter();
    unint64_t v50 = v44;
    int v51 = v43;
    *(void *)&v52[4] = v6;
    *(void *)&long long v53 = __PAIR64__(v41, v42);
    *((void *)&v53 + 1) = __PAIR64__(v39, v40);
    uint64_t v54 = v11;
    uint64_t v55 = v12;
    *(void *)&long long v56 = __PAIR64__(v37, v38);
    *((void *)&v56 + 1) = __PAIR64__(v35, v36);
    unint64_t v57 = __PAIR64__(v33, v34);
    int v58 = v32;
    unint64_t v26 = v21;
    int v27 = _ViewInputs.viewPhase.getter();
    UpdateCycleDetector.init()();
    int v28 = v49;
    char v29 = BYTE4(v49);
    type metadata accessor for ViewGraph();
    MEMORY[0x18C114EE0]();
    BYTE8(v53) = 5;
    unint64_t v50 = __PAIR64__(v24, v25);
    int v51 = v27;
    *(void *)v52 = v48;
    *(_DWORD *)&v52[8] = v28;
    LOBYTE(v53) = v29;
    DWORD1(v53) = -1;
    swift_weakInit();
    swift_release();
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    type metadata accessor for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>(0, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (void (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
    lazy protocol witness table accessor for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>(&lazy protocol witness table cache variable for type ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider> and conformance ScrollActionDispatcher<A>, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (void (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
    Attribute.init<A>(body:value:flags:update:)();
    outlined destroy of ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>((uint64_t)&v50, &lazy cache variable for type metadata for ScrollActionDispatcher<OnScrollPhaseChangeModifier.PhaseActionProvider>, (void (*)(void))lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider);
    static AGAttributeFlags.transactional.getter();
    AGGraphSetFlags();
    swift_bridgeObjectRelease();
    unint64_t v21 = v26;
  }
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  *a4 = v21;
  __n128 result = v46;
  a4[1] = v46.n128_u64[0];
  return result;
}

uint64_t closure #1 in OnScrollPhaseChangeModifier.PhaseActionProvider.makeAction(oldOutput:newOutput:)(uint64_t (*a1)(uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return a1(a3, a4);
}

uint64_t (*protocol witness for ScrollActionProvider.makeAction(oldOutput:newOutput:) in conformance OnScrollPhaseChangeModifier.PhaseActionProvider(char *a1, char *a2))()
{
  char v2 = *a1;
  char v3 = *a2;
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v6 = *Value;
  uint64_t v5 = Value[1];
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = v6;
  *(void *)(v7 + 24) = v5;
  *(unsigned char *)(v7 + 32) = v2;
  *(unsigned char *)(v7 + 33) = v3;
  swift_retain();
  return _s7SwiftUI27OnScrollPhaseChangeModifierV0E14ActionProvider33_1176EEC1E4A702DD8DB07F9D0C463078LLV04makeH09oldOutput03newT0yycAA0dE0O_AKtFyycfU_TA_0;
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OnScrollPhaseChangeModifier.PhaseActionProvider()
{
  return 0xD00000000000001ELL;
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollPhaseChangeModifier()
{
}

__n128 protocol witness for ScrollActionProvider.makeOutput(input:) in conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider@<Q0>(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *a1;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t (*protocol witness for ScrollActionProvider.makeAction(oldOutput:newOutput:) in conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider(char *a1, char *a2))()
{
  return OnScrollPhaseContextChangeModifier.PhaseContextActionProvider.makeAction(oldOutput:newOutput:)(a1, a2);
}

unint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance OnScrollPhaseContextChangeModifier.PhaseContextActionProvider()
{
  return 0xD000000000000025;
}

void protocol witness for ViewModifier.body(content:) in conformance OnScrollPhaseContextChangeModifier()
{
}

__n128 ScrollPhaseChangeContext.geometry.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(a1 + 48) = v3;
  long long v4 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(a1 + 80) = v4;
  __n128 result = *(__n128 *)(v1 + 96);
  *(__n128 *)(a1 + 96) = result;
  return result;
}

uint64_t ScrollPhaseChangeContext.velocity.getter()
{
  return *(void *)(v0 + 112);
}

BOOL ScrollEventState.isTracking.getter()
{
  return *v0 == 1;
}

BOOL ScrollEventState.isDragging.getter()
{
  return *v0 == 2;
}

BOOL ScrollEventState.isDecelerating.getter()
{
  return *v0 == 3;
}

BOOL ScrollEventState.isAnimating.getter()
{
  return *v0 == 4;
}

uint64_t static ScrollEventStateReader._makeView(view:inputs:)(int *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v39 = *MEMORY[0x1E4F143B8];
  int v7 = *a1;
  int v9 = *((_DWORD *)a2 + 2);
  uint64_t v10 = a2[2];
  int v11 = *((_DWORD *)a2 + 7);
  int v20 = *((_DWORD *)a2 + 8);
  int v21 = *((_DWORD *)a2 + 6);
  int v19 = *((_DWORD *)a2 + 9);
  int v22 = *((_DWORD *)a2 + 20);
  uint64_t v28 = *a2;
  uint64_t v8 = v28;
  int v29 = v9;
  uint64_t v30 = v10;
  int v31 = v21;
  int v32 = v11;
  int v33 = v20;
  int v34 = v19;
  long long v18 = *(_OWORD *)(a2 + 5);
  *(void *)&long long v35 = a2[5];
  int v12 = _GraphInputs.scrollPhaseState.getter();
  LODWORD(v28) = v7;
  type metadata accessor for ScrollEventStateReader();
  type metadata accessor for _GraphValue();
  long long v17 = *(_OWORD *)(a2 + 7);
  uint64_t v13 = a2[9];
  LODWORD(v28) = _GraphValue.value.getter();
  HIDWORD(v28) = v12;
  uint64_t v25 = a3;
  uint64_t View = type metadata accessor for ScrollEventStateReader.MakeView();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v24, View, MEMORY[0x1E4FBC248], v14, MEMORY[0x1E4FBC278], v15);
  _GraphValue.init(_:)();
  uint64_t v28 = v8;
  int v29 = v9;
  uint64_t v30 = v10;
  int v31 = v21;
  int v32 = v11;
  int v33 = v20;
  int v34 = v19;
  long long v35 = v18;
  long long v36 = v17;
  uint64_t v37 = v13;
  int v38 = v22;
  return (*(uint64_t (**)(int *, uint64_t *, uint64_t, uint64_t))(a4 + 24))(&v23, &v28, a3, a4);
}

uint64_t static ScrollEventStateReader._viewListCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3)
{
  int v3 = *((_DWORD *)a1 + 4);
  uint64_t v4 = *((void *)a1 + 3);
  long long v6 = *a1;
  int v7 = v3;
  uint64_t v8 = v4;
  return (*(uint64_t (**)(long long *))(a3 + 40))(&v6);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ScrollEventStateReader<A>(int *a1, uint64_t *a2, uint64_t a3)
{
  return static ScrollEventStateReader._makeView(view:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance ScrollEventStateReader<A>(long long *a1, uint64_t a2)
{
  return static ScrollEventStateReader._viewListCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24));
}

void protocol witness for View.body.getter in conformance ScrollEventStateReader<A>()
{
}

double ScrollGestureState_V1.Binding.wrappedValue.getter@<D0>(uint64_t a1@<X8>)
{
  type metadata accessor for Binding<ScrollPhaseState>(0, &lazy cache variable for type metadata for Binding<ScrollPhaseState>, MEMORY[0x1E4F3FD68], MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0](&v3);
  *(unsigned char *)a1 = v3;
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  return result;
}

double key path getter for ScrollGestureState_V1.Binding.wrappedValue : <A>ScrollGestureState_V1<A>.Binding@<D0>(uint64_t a1@<X8>)
{
  ScrollGestureState_V1.Binding.wrappedValue.getter((uint64_t)v3);
  *(unsigned char *)a1 = v3[0];
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 8) = v4;
  return result;
}

uint64_t key path setter for ScrollGestureState_V1.Binding.wrappedValue : <A>ScrollGestureState_V1<A>.Binding()
{
  return ScrollGestureState_V1.Binding.wrappedValue.setter();
}

uint64_t ScrollGestureState_V1.Binding.wrappedValue.setter()
{
  return swift_release();
}

uint64_t ScrollGestureState_V1.Binding.projectedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  char v3 = *(unsigned char *)(v1 + 16);
  *(void *)a1 = *(void *)v1;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(v1 + 24);
  swift_retain();

  return swift_retain();
}

void ScrollGestureState_V1.wrappedValue.getter()
{
}

void ScrollGestureState_V1.projectedValue.getter()
{
}

uint64_t ScrollGestureStateValue_V1.velocity.getter()
{
  return ScrollPhaseState.velocity.getter();
}

uint64_t static ScrollGestureStateValue_V1.== infix(_:_:)()
{
  return static ScrollPhaseState.== infix(_:_:)() & 1;
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance ScrollGestureStateValue_V1()
{
  return static ScrollPhaseState.== infix(_:_:)() & 1;
}

uint64_t View.scrollGestureState<A>(_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  static os_log_type_t.fault.getter();
  uint64_t v5 = (void *)static Log.runtimeIssuesLog.getter();
  os_log(_:dso:log:_:_:)();

  long long v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16);

  return v6(a2, v2, a1);
}

_UNKNOWN **base witness table accessor for View in ScrollEventStateReader<A>()
{
  return &protocol witness table for ScrollEventStateReader<A>;
}

uint64_t sub_187D766CC()
{
  return 8;
}

void *sub_187D766D8(void *result, void *a2)
{
  *a2 = *result;
  return result;
}

uint64_t getEnumTagSinglePayload for ScrollPhaseChangeContext(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 129)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ScrollPhaseChangeContext(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 128) = 0;
    *(void *)double result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 129) = v3;
  return result;
}

uint64_t type metadata accessor for ScrollGestureState_V1()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t initializeWithCopy for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ScrollGestureState_V1.Binding(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  return a1;
}

uint64_t type metadata accessor for ScrollGestureState_V1.Binding()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for ScrollEventState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFC && a1[24]) {
    return (*(_DWORD *)a1 + 252);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 5;
  int v5 = v3 - 5;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollEventState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFB)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 - 252;
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFC) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 4;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollGestureStateValue_V1()
{
  return &type metadata for ScrollGestureStateValue_V1;
}

uint64_t sub_187D76934()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187D76948()
{
  return get_witness_table_7SwiftUI4ViewRzlAA15ModifiedContentVyxAA27TransformScrollDeceleration33_B8A1805B47C89D6545C6C966F85D8BC6LLVGAaBHPxAaBHD1__AgA0C8ModifierHPyHCHCTm();
}

uint64_t sub_187D7695C()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D769CC(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

ValueMetadata *type metadata accessor for OnScrollPhaseChangeModifier()
{
  return &type metadata for OnScrollPhaseChangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollPhaseChangeModifier()
{
  return &protocol witness table for OnScrollPhaseChangeModifier;
}

_UNKNOWN **base witness table accessor for ViewModifier in OnScrollPhaseContextChangeModifier()
{
  return &protocol witness table for OnScrollPhaseContextChangeModifier;
}

uint64_t sub_187D769FC()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t _s7SwiftUI27OnScrollPhaseChangeModifierV0E14ActionProvider33_1176EEC1E4A702DD8DB07F9D0C463078LLV04makeH09oldOutput03newT0yycAA0dE0O_AKtFyycfU_TA_0()
{
  return (*(uint64_t (**)(void, void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32), *(unsigned __int8 *)(v0 + 33));
}

uint64_t _s7SwiftUI22ScrollActionDispatcher33_1176EEC1E4A702DD8DB07F9D0C463078LLV11updateValueyyFSSyXEfu0_TA_0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  swift_bridgeObjectRetain();
  return v1;
}

uint64_t sub_187D76A98()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D76AD0()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

uint64_t sub_187D76B10()
{
  swift_release();

  return swift_deallocObject();
}

ValueMetadata *type metadata accessor for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider()
{
  return &type metadata for OnScrollPhaseContextChangeModifier.PhaseContextActionProvider;
}

ValueMetadata *type metadata accessor for OnScrollPhaseChangeModifier.PhaseActionProvider()
{
  return &type metadata for OnScrollPhaseChangeModifier.PhaseActionProvider;
}

uint64_t initializeBufferWithCopyOfBuffer for ScrollActionDispatcher(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned __int8 v6 = *(_DWORD *)(*(void *)(swift_getAssociatedTypeWitness() - 8) + 80);
  unsigned __int8 v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = *a2;
  *a1 = *a2;
  uint64_t v9 = (v7 | v6) & 0xF8 | 7u;
  uint64_t v10 = v8 + ((v9 + 16) & ~v9);
  swift_retain();
  return v10;
}

uint64_t assignWithCopy for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 40) + 3;
  unsigned __int8 v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned __int8 v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v11 = *(_DWORD *)v12;
  *(_DWORD *)(v11 + 4) = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(unsigned char *)(v11 + 12) = *(unsigned char *)(v12 + 12);
  uint64_t v13 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  long long v18 = (void *)(((unint64_t)v13 + v17 + 4) & ~v17);
  int v19 = (void *)(((unint64_t)v14 + v17 + 4) & ~v17);
  int v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v14) = v20(v18, 1, AssociatedTypeWitness);
  int v21 = v20(v19, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v18, v19, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v22 = *(_DWORD *)(v16 + 84);
    size_t v23 = *(void *)(v16 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v18, v19, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    int v22 = *(_DWORD *)(v16 + 84);
    size_t v23 = *(void *)(v16 + 64);
  }
  if (v22) {
    size_t v24 = v23;
  }
  else {
    size_t v24 = v23 + 1;
  }
  memcpy(v18, v19, v24);
LABEL_12:
  swift_weakCopyAssign();
  return a1;
}

uint64_t initializeWithTake for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 32) + 3;
  unsigned __int8 v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned __int8 v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = (void *)(((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  unint64_t v12 = (void *)(((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v13 = *(void *)((char *)v12 + 5);
  *unint64_t v11 = *v12;
  *(void *)((char *)v11 + 5) = v13;
  uint64_t v14 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v15 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v14 = *v15;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v18 = *(unsigned __int8 *)(v17 + 80);
  int v19 = (void *)(((unint64_t)v14 + v18 + 4) & ~v18);
  int v20 = (const void *)(((unint64_t)v15 + v18 + 4) & ~v18);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v20, 1, AssociatedTypeWitness))
  {
    int v21 = *(_DWORD *)(v17 + 84);
    size_t v22 = *(void *)(v17 + 64);
    if (v21) {
      size_t v23 = v22;
    }
    else {
      size_t v23 = v22 + 1;
    }
    memcpy(v19, v20, v23);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v19, v20, AssociatedTypeWitness);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v19, 0, 1, AssociatedTypeWitness);
  }
  swift_weakTakeInit();
  return a1;
}

uint64_t assignWithTake for ScrollActionDispatcher(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(uint64_t, uint64_t, void))v5)(a1, a2, *(void *)(a3 + 16));
  uint64_t v6 = *(void *)(v5 + 24) + 3;
  unsigned __int8 v7 = (_DWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v8 = (_DWORD *)((v6 + a2) & 0xFFFFFFFFFFFFFFFCLL);
  *unsigned __int8 v7 = *v8;
  uint64_t v9 = (_DWORD *)(((unint64_t)v7 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v10 = (_DWORD *)(((unint64_t)v8 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v9 = *v10;
  unint64_t v11 = ((unint64_t)v9 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  unint64_t v12 = ((unint64_t)v10 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  *(_DWORD *)unint64_t v11 = *(_DWORD *)v12;
  *(_DWORD *)(v11 + 4) = *(_DWORD *)(v12 + 4);
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(v12 + 8);
  *(unsigned char *)(v11 + 12) = *(unsigned char *)(v12 + 12);
  uint64_t v13 = (_DWORD *)(((unint64_t)v9 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  uint64_t v14 = (_DWORD *)(((unint64_t)v10 + 23) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v13 = *v14;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v16 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v17 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v18 = (void *)(((unint64_t)v13 + v17 + 4) & ~v17);
  int v19 = (void *)(((unint64_t)v14 + v17 + 4) & ~v17);
  int v20 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  LODWORD(v14) = v20(v18, 1, AssociatedTypeWitness);
  int v21 = v20(v19, 1, AssociatedTypeWitness);
  if (v14)
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 32))(v18, v19, AssociatedTypeWitness);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v18, 0, 1, AssociatedTypeWitness);
      goto LABEL_12;
    }
    int v22 = *(_DWORD *)(v16 + 84);
    size_t v23 = *(void *)(v16 + 64);
  }
  else
  {
    if (!v21)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 40))(v18, v19, AssociatedTypeWitness);
      goto LABEL_12;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v18, AssociatedTypeWitness);
    int v22 = *(_DWORD *)(v16 + 84);
    size_t v23 = *(void *)(v16 + 64);
  }
  if (v22) {
    size_t v24 = v23;
  }
  else {
    size_t v24 = v23 + 1;
  }
  memcpy(v18, v19, v24);
LABEL_12:
  swift_weakTakeAssign();
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollActionDispatcher(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v9 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v10 = v9;
  unsigned int v11 = *(_DWORD *)(v9 + 84);
  unsigned int v12 = v11 - 1;
  if (!v11) {
    unsigned int v12 = 0;
  }
  if (v7 <= v12) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = v7;
  }
  if (v13 <= 0xFE) {
    unsigned int v14 = 254;
  }
  else {
    unsigned int v14 = v13;
  }
  uint64_t v15 = *(void *)(v6 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = 7;
  if (!v11) {
    uint64_t v17 = 8;
  }
  if (!a2) {
    return 0;
  }
  if (v14 < a2)
  {
    unint64_t v18 = ((v17
          + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64)
          + ((v16 + ((((((v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL) + 4) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    uint64_t v19 = v18 & 0xFFFFFFF8;
    if ((v18 & 0xFFFFFFF8) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = a2 - v14 + 1;
    }
    if (v20 >= 0x10000) {
      LODWORD(v21) = 4;
    }
    else {
      LODWORD(v21) = 2;
    }
    if (v20 < 0x100) {
      LODWORD(v21) = 1;
    }
    if (v20 >= 2) {
      uint64_t v21 = v21;
    }
    else {
      uint64_t v21 = 0;
    }
    switch(v21)
    {
      case 1:
        int v22 = *((unsigned __int8 *)a1 + v18);
        if (!v22) {
          break;
        }
        goto LABEL_28;
      case 2:
        int v22 = *(unsigned __int16 *)((char *)a1 + v18);
        if (v22) {
          goto LABEL_28;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D775B4);
      case 4:
        int v22 = *(_DWORD *)((char *)a1 + v18);
        if (!v22) {
          break;
        }
LABEL_28:
        int v23 = v22 - 1;
        if (v19)
        {
          int v23 = 0;
          LODWORD(v19) = *a1;
        }
        return v14 + (v19 | v23) + 1;
      default:
        break;
    }
  }
  if (v7 != v14)
  {
    unint64_t v26 = (((((unint64_t)a1 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7;
    if (v13 > 0xFE)
    {
      if (v11 >= 2)
      {
        unsigned int v28 = (*(uint64_t (**)(unint64_t))(v10 + 48))((v16 + (v26 & 0xFFFFFFFFFFFFFFFCLL) + 20) & ~v16);
        if (v28 >= 2) {
          return v28 - 1;
        }
        else {
          return 0;
        }
      }
    }
    else
    {
      unsigned int v27 = *(unsigned __int8 *)((v26 & 0xFFFFFFFFFFFFFFFCLL) + 12);
      if (v27 >= 2) {
        return ((v27 + 2147483646) & 0x7FFFFFFF) + 1;
      }
    }
    return 0;
  }
  uint64_t v25 = *(uint64_t (**)(_DWORD *, uint64_t, uint64_t))(v6 + 48);

  return v25(a1, v7, v5);
}

void storeEnumTagSinglePayload for ScrollActionDispatcher(_DWORD *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v28 = v8;
  uint64_t v9 = *(unsigned int *)(v8 + 84);
  int v10 = 0;
  uint64_t v11 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  uint64_t v12 = v11;
  unsigned int v13 = *(_DWORD *)(v11 + 84);
  unsigned int v14 = v13 - 1;
  if (!v13) {
    unsigned int v14 = 0;
  }
  if (v9 > v14) {
    unsigned int v14 = v9;
  }
  uint64_t v15 = *(void *)(v8 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v17 = *(void *)(v11 + 64);
  if (v14 <= 0xFE) {
    unsigned int v18 = 254;
  }
  else {
    unsigned int v18 = v14;
  }
  uint64_t v19 = 7;
  if (!v13) {
    uint64_t v19 = 8;
  }
  size_t v20 = ((v19
        + v17
        + ((v16 + ((((((v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 23) & 0xFFFFFFFFFFFFFFFCLL) + 4) & ~v16)) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v18 < a3)
  {
    if (((v19
         + v17
         + ((v16 + ((((((v15 + 3) & 0xFFFFFFFC) + 7) & 0xFFFFFFFC) + 23) & 0xFFFFFFFC) + 4) & ~v16)) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v21 = a3 - v18 + 1;
    else {
      unsigned int v21 = 2;
    }
    if (v21 >= 0x10000) {
      int v22 = 4;
    }
    else {
      int v22 = 2;
    }
    if (v21 < 0x100) {
      int v22 = 1;
    }
    if (v21 >= 2) {
      int v10 = v22;
    }
    else {
      int v10 = 0;
    }
  }
  if (a2 > v18)
  {
    if (v20) {
      int v23 = 1;
    }
    else {
      int v23 = a2 - v18;
    }
    if (v20)
    {
      int v24 = ~v18 + a2;
      bzero(a1, v20);
      *a1 = v24;
    }
    switch(v10)
    {
      case 1:
        *((unsigned char *)a1 + v20) = v23;
        return;
      case 2:
        *(_WORD *)((char *)a1 + v20) = v23;
        return;
      case 3:
        goto LABEL_52;
      case 4:
        *(_DWORD *)((char *)a1 + v20) = v23;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      *((unsigned char *)a1 + v20) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 2:
      *(_WORD *)((char *)a1 + v20) = 0;
      if (!a2) {
        return;
      }
      goto LABEL_37;
    case 3:
LABEL_52:
      __break(1u);
      JUMPOUT(0x187D778FCLL);
    case 4:
      *(_DWORD *)((char *)a1 + v20) = 0;
      goto LABEL_36;
    default:
LABEL_36:
      if (a2)
      {
LABEL_37:
        if (v9 == v18)
        {
          uint64_t v25 = *(void (**)(_DWORD *, uint64_t, uint64_t, uint64_t))(v28 + 56);
          v25(a1, a2, v9, v7);
        }
        else
        {
          unint64_t v26 = ((((((unint64_t)a1 + v15 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL) + 7) & 0xFFFFFFFFFFFFFFFCLL;
          if (v14 > 0xFE)
          {
            if (v13 >= 2)
            {
              unsigned int v27 = *(void (**)(unint64_t, void))(v12 + 56);
              v27((v16 + v26 + 20) & ~v16, (a2 + 1));
            }
          }
          else if (a2 > 0xFE)
          {
            *(unsigned char *)(v26 + 12) = 0;
            *(_DWORD *)(v26 + 8) = 0;
            *(void *)unint64_t v26 = (a2 - 255);
          }
          else
          {
            *(unsigned char *)(v26 + 12) = a2 + 1;
          }
        }
      }
      return;
  }
}

unint64_t lazy protocol witness table accessor for type ScrollGeometryState and conformance ScrollGeometryState()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollGeometryState and conformance ScrollGeometryState;
  if (!lazy protocol witness table cache variable for type ScrollGeometryState and conformance ScrollGeometryState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollGeometryState and conformance ScrollGeometryState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPhaseState and conformance ScrollPhaseState()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollPhaseState and conformance ScrollPhaseState;
  if (!lazy protocol witness table cache variable for type ScrollPhaseState and conformance ScrollPhaseState)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhaseState and conformance ScrollPhaseState);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ScrollPhase and conformance ScrollPhase()
{
  unint64_t result = lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase;
  if (!lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ScrollPhase and conformance ScrollPhase);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for OnScrollPhaseChangeModifier.PhaseActionProvider(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type OnScrollPhaseChangeModifier.PhaseActionProvider and conformance OnScrollPhaseChangeModifier.PhaseActionProvider();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_187D77AA8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = (*(void *)(v2 + 64) + v3 + v4) & ~v3;
  swift_release();
  uint64_t v6 = v0 + v4;
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v7(v6, v1);
  v7(v0 + v5, v1);

  return swift_deallocObject();
}

uint64_t SliderMark<>.init<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  v18[0] = a3;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *v10;
  uint64_t v12 = v10[1];
  uint64_t v13 = v10[2];
  uint64_t v14 = v10[3];
  uint64_t v15 = type metadata accessor for SliderMark();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1 + *(int *)(v15 + 36), a2);
  outlined copy of Text?(v11, v12, v13, v14);
  outlined copy of Text?(v11, v12, v13, v14);
  lazy protocol witness table accessor for type Double and conformance Double();
  BinaryFloatingPoint.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8))(a1, v15);
  uint64_t v16 = v18[1];
  *a4 = v11;
  a4[1] = v12;
  a4[2] = v13;
  a4[3] = v14;
  a4[4] = v16;
  return outlined consume of Text?(v11, v12, v13, v14);
}

uint64_t SliderMark.normalized<>(in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v48 = a3;
  unint64_t v49 = a4;
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v8 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v46 = AssociatedTypeWitness;
  uint64_t v47 = v8;
  MEMORY[0x1F4188790](AssociatedTypeWitness);
  uint64_t v45 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  unint64_t v44 = (char *)&v39 - v11;
  MEMORY[0x1F4188790](v12);
  unint64_t v50 = (char *)&v39 - v13;
  uint64_t v14 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  unsigned int v21 = (char *)&v39 - v20;
  int v22 = *(void (**)(char *, uint64_t, uint64_t, double))(v14 + 16);
  v22((char *)&v39 - v20, a1, v6, v19);
  uint64_t v23 = a1 + *(int *)(type metadata accessor for ClosedRange() + 36);
  uint64_t v39 = v17;
  ((void (*)(char *, uint64_t, uint64_t))v22)(v17, v23, v6);
  uint64_t v24 = *v4;
  uint64_t v42 = v4[1];
  uint64_t v43 = v24;
  uint64_t v25 = v4[2];
  uint64_t v40 = v4[3];
  uint64_t v41 = v25;
  outlined copy of Text?(v24, v42, v25, v40);
  unint64_t v26 = v44;
  dispatch thunk of Strideable.distance(to:)();
  unsigned int v27 = v45;
  dispatch thunk of Strideable.distance(to:)();
  uint64_t v28 = v27;
  uint64_t v29 = v46;
  dispatch thunk of static FloatingPoint./ infix(_:_:)();
  uint64_t v30 = v47;
  int v31 = *(void (**)(char *, uint64_t))(v47 + 8);
  v31(v28, v29);
  v31(v26, v29);
  int v32 = *(void (**)(char *, uint64_t))(v14 + 8);
  v32(v39, v6);
  v32(v21, v6);
  int v33 = v49;
  uint64_t v34 = v42;
  *unint64_t v49 = v43;
  v33[1] = v34;
  uint64_t v35 = v40;
  v33[2] = v41;
  v33[3] = v35;
  long long v36 = (char *)v33;
  uint64_t v37 = type metadata accessor for SliderMark();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v30 + 32))(&v36[*(int *)(v37 + 36)], v50, v29);
}

void Slider.init<A>(value:in:label:minimumValueLabel:maximumValueLabel:marks:onEditingChanged:)()
{
}

void Slider.init<A>(value:in:step:label:minimumValueLabel:maximumValueLabel:marks:onEditingChanged:)()
{
}

void Slider<>.init<A>(value:in:label:marks:onEditingChanged:)()
{
}

void Slider<>.init<A>(value:in:step:label:marks:onEditingChanged:)()
{
}

uint64_t SliderMark.ID.hash(into:)()
{
  return dispatch thunk of Hashable.hash(into:)();
}

uint64_t static SliderMark.ID.== infix(_:_:)()
{
  return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
}

Swift::Int SliderMark.ID.hashValue.getter()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SliderMark<A>.ID()
{
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SliderMark<A>.ID()
{
  return static SliderMark.ID.== infix(_:_:)();
}

uint64_t SliderMark.init(_:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(void)@<X1>, uint64_t a3@<X3>, void *a4@<X8>)
{
  *a4 = a2();
  a4[1] = v7;
  a4[2] = v8 & 1;
  a4[3] = v9;
  uint64_t v10 = (char *)a4 + *(int *)(type metadata accessor for SliderMark() + 36);
  uint64_t v11 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 32);

  return v11(v10, a1, a3);
}

uint64_t SliderMark.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for SliderMark();
  *a3 = 0u;
  a3[1] = 0u;
  uint64_t v7 = (char *)a3 + *(int *)(v6 + 36);
  char v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32);

  return v8(v7, a1, a2);
}

uint64_t SliderMark.id.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  double v6 = MEMORY[0x1F4188790](a1);
  char v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v8, v2 + *(int *)(v9 + 36), v4, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 32))(a2, v8, v4);
}

uint64_t static SliderMark.< infix(_:_:)()
{
  return dispatch thunk of static Comparable.< infix(_:_:)() & 1;
}

uint64_t type metadata accessor for SliderMark()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static SliderMark.== infix(_:_:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a2[3];
  if (v2)
  {
    if (v3)
    {
      uint64_t v4 = *a1;
      uint64_t v5 = a1[1];
      uint64_t v6 = a1[2];
      uint64_t v8 = *a2;
      uint64_t v7 = a2[1];
      uint64_t v9 = a2[2];
      outlined copy of Text?(*a2, v7, v9, v3);
      uint64_t v11 = v4;
      outlined copy of Text?(v4, v5, v6, v2);
      LOBYTE(v4) = static Text.== infix(_:_:)();
      outlined consume of Text?(v8, v7, v9, v3);
      outlined consume of Text?(v11, v5, v6, v2);
      if (v4) {
        goto LABEL_4;
      }
    }
  }
  else if (!v3)
  {
LABEL_4:
    type metadata accessor for SliderMark();
    return dispatch thunk of static Equatable.== infix(_:_:)() & 1;
  }
  return 0;
}

uint64_t protocol witness for static Comparable.< infix(_:_:) in conformance SliderMark<A>()
{
  return static SliderMark.< infix(_:_:)();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance SliderMark<A>(uint64_t *a1, uint64_t *a2)
{
  return static SliderMark.== infix(_:_:)(a1, a2);
}

uint64_t SliderMark.init(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t *a4@<X8>)
{
  uint64_t v7 = *(void *)(a3 - 8);
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v11, v12, v8);
  *a4 = closure #2 in LabeledContent<>.init(_:content:)();
  a4[1] = v13;
  a4[2] = v14 & 1;
  a4[3] = v15;
  uint64_t v16 = type metadata accessor for SliderMark();
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))((char *)a4 + *(int *)(v16 + 36), v10, a3);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a2, a3);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t SliderMark.init<A>(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10 = *(void *)(a3 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, double))(v10 + 16))(v13, v11);
  *a5 = closure #1 in SliderMark.init<A>(_:_:)(a1);
  a5[1] = v14;
  a5[2] = v15 & 1;
  a5[3] = v16;
  uint64_t v17 = type metadata accessor for SliderMark();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))((char *)a5 + *(int *)(v17 + 36), v13, a3);
  (*(void (**)(uint64_t, uint64_t))(v10 + 8))(a2, a3);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a4 - 8) + 8))(a1, a4);
}

uint64_t closure #1 in SliderMark.init<A>(_:_:)(uint64_t a1)
{
  double v1 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v3 + 16))((char *)&v5 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0), v1);
  return Text.init<A>(_:)();
}

uint64_t static SliderMarkBuilder.buildBlock(_:)()
{
  return Sequence<>.sorted()();
}

uint64_t base witness table accessor for Equatable in SliderMark<A>.ID()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for Identifiable.ID : Hashable in SliderMark<A>()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for Equatable in SliderMark<A>()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for SliderMark()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_OWORD *initializeBufferWithCopyOfBuffer for SliderMark(_OWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v7 + 32) & (unint64_t)~v7) + *(void *)(v6 + 64) > 0x18)
  {
    uint64_t v10 = *(void *)a2;
    *(void *)uint64_t v4 = *(void *)a2;
    uint64_t v4 = (_OWORD *)(v10 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 < 0xFFFFFFFF)
    {
      long long v15 = *(_OWORD *)(a2 + 16);
      *a1 = *(_OWORD *)a2;
      a1[1] = v15;
    }
    else
    {
      uint64_t v12 = *(void *)a2;
      uint64_t v13 = *(void *)(a2 + 8);
      char v14 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v13, v14);
      *(void *)uint64_t v4 = v12;
      *((void *)v4 + 1) = v13;
      *((unsigned char *)v4 + 16) = v14;
      *((void *)v4 + 3) = v11;
      swift_bridgeObjectRetain();
    }
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v6 + 16))(((unint64_t)v4 + v7 + 32) & ~v7, (a2 + v7 + 32) & ~v7, v5);
  }
  return v4;
}

uint64_t destroy for SliderMark(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24) >= 0xFFFFFFFFuLL)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (a1 + *(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

uint64_t initializeWithCopy for SliderMark(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6 = a2[3];
  if (v6 < 0xFFFFFFFF)
  {
    long long v10 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v10;
  }
  else
  {
    uint64_t v7 = *a2;
    uint64_t v8 = a2[1];
    char v9 = *((unsigned char *)a2 + 16);
    outlined copy of Text.Storage(*a2, v8, v9);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    *(unsigned char *)(a1 + 16) = v9;
    *(void *)(a1 + 24) = v6;
    swift_bridgeObjectRetain();
  }
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 16))((*(unsigned __int8 *)(v11 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v11 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithCopy for SliderMark(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL)
  {
    if (v6 >= 0xFFFFFFFF)
    {
      uint64_t v13 = *(void *)a2;
      uint64_t v14 = *(void *)(a2 + 8);
      char v15 = *(unsigned char *)(a2 + 16);
      outlined copy of Text.Storage(*(void *)a2, v14, v15);
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(unsigned char *)(a1 + 16) = v15;
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v16 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v16;
    goto LABEL_8;
  }
  if (v6 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)a2;
  uint64_t v8 = *(void *)(a2 + 8);
  char v9 = *(unsigned char *)(a2 + 16);
  outlined copy of Text.Storage(*(void *)a2, v8, v9);
  uint64_t v10 = *(void *)a1;
  uint64_t v11 = *(void *)(a1 + 8);
  char v12 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v7;
  *(void *)(a1 + 8) = v8;
  *(unsigned char *)(a1 + 16) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  uint64_t v17 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v17 + 24))((*(unsigned __int8 *)(v17 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80), (*(unsigned __int8 *)(v17 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v17 + 80));
  return a1;
}

_OWORD *initializeWithTake for SliderMark(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v5 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  return a1;
}

uint64_t assignWithTake for SliderMark(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 24) < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  unint64_t v6 = *(void *)(a2 + 24);
  if (v6 < 0xFFFFFFFF)
  {
    outlined consume of Text.Storage(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
    swift_bridgeObjectRelease();
LABEL_5:
    long long v11 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v11;
    goto LABEL_6;
  }
  char v7 = *(unsigned char *)(a2 + 16);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  char v10 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease();
LABEL_6:
  uint64_t v12 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v12 + 40))((*(unsigned __int8 *)(v12 + 80) + 32 + a1) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80), (*(unsigned __int8 *)(v12 + 80) + 32 + a2) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for SliderMark(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFE) {
    unsigned int v7 = 2147483646;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  int v8 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v9 = ((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v10 = 8 * v9;
  if (v9 <= 3)
  {
    unsigned int v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      int v11 = *(_DWORD *)((char *)a1 + v9);
      if (!v11) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      int v11 = *(unsigned __int16 *)((char *)a1 + v9);
      if (!*(unsigned __int16 *)((char *)a1 + v9)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_23:
      if (v5 > 0x7FFFFFFE) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 32) & ~v6);
      }
      unint64_t v15 = *((void *)a1 + 3);
      if (v15 >= 0xFFFFFFFF) {
        LODWORD(v15) = -1;
      }
      if ((v15 + 1) >= 2) {
        return v15;
      }
      else {
        return 0;
      }
    }
  }
  int v11 = *((unsigned __int8 *)a1 + v9);
  if (!*((unsigned char *)a1 + v9)) {
    goto LABEL_23;
  }
LABEL_15:
  int v14 = (v11 - 1) << v10;
  if (v9 > 3) {
    int v14 = 0;
  }
  if (v9)
  {
    if (v9 > 3) {
      LODWORD(v9) = 4;
    }
    switch((int)v9)
    {
      case 2:
        LODWORD(v9) = *a1;
        break;
      case 3:
        LODWORD(v9) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v9) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v9) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v9 | v14) + 1;
}

void storeEnumTagSinglePayload for SliderMark(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFE) {
    unsigned int v8 = 2147483646;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  BOOL v11 = a3 >= v8;
  unsigned int v12 = a3 - v8;
  if (v12 != 0 && v11)
  {
    if (v10 <= 3)
    {
      unsigned int v16 = ((v12 + ~(-1 << (8 * v10))) >> (8 * v10)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v14 = ~v8 + a2;
    if (v10 < 4)
    {
      int v15 = (v14 >> (8 * v10)) + 1;
      if (v10)
      {
        int v17 = v14 & ~(-1 << (8 * v10));
        bzero(a1, v10);
        if (v10 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v10 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v10);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_41;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_41:
      __break(1u);
      JUMPOUT(0x187D7949CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if (v7 > 0x7FFFFFFE)
        {
          unint64_t v18 = (unint64_t)&a1[v9 + 32] & ~v9;
          uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
          v19(v18);
        }
        else if (a2 > 0x7FFFFFFE)
        {
          *(_OWORD *)a1 = 0u;
          *((_OWORD *)a1 + 1) = 0u;
          *(_DWORD *)a1 = a2 - 0x7FFFFFFF;
        }
        else
        {
          *((void *)a1 + 3) = a2;
        }
      }
      return;
  }
}

uint64_t getEnumTagSinglePayload for SliderMark.ID(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SliderMark.ID(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D79838);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for SliderMark.ID()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for SliderMarkBuilder()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t View.automationHidden(_:isEnabled:)(char a1, char a2, uint64_t a3, uint64_t a4)
{
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  if (a1) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(inited + 32) = v9;
  swift_bridgeObjectRelease();
  uint64_t v11 = v9 | 0x400000000;
  char v12 = 0;
  lazy protocol witness table accessor for type AccessibilityProperties.AutomationVisibilityKey and conformance AccessibilityProperties.AutomationVisibilityKey();
  return View.accessibility<A>(_:_:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey, (uint64_t)&v11, a2, a3, (uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey, a4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityProperties.AutomationVisibilityKey and conformance AccessibilityProperties.AutomationVisibilityKey()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityProperties.AutomationVisibilityKey and conformance AccessibilityProperties.AutomationVisibilityKey;
  if (!lazy protocol witness table cache variable for type AccessibilityProperties.AutomationVisibilityKey and conformance AccessibilityProperties.AutomationVisibilityKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityProperties.AutomationVisibilityKey and conformance AccessibilityProperties.AutomationVisibilityKey);
  }
  return result;
}

uint64_t ModifiedContent<>.automationHidden(_:isEnabled:)@<X0>(char a1@<W0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  type metadata accessor for _ContiguousArrayStorage<AccessibilityVisibility>();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_18834BB80;
  if (a1) {
    uint64_t v9 = 4;
  }
  else {
    uint64_t v9 = 0;
  }
  *(_DWORD *)(inited + 32) = v9;
  swift_bridgeObjectRelease();
  uint64_t v13 = v9 | 0x400000000;
  char v14 = 0;
  unint64_t v10 = lazy protocol witness table accessor for type AccessibilityProperties.AutomationVisibilityKey and conformance AccessibilityProperties.AutomationVisibilityKey();
  unint64_t v11 = lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility>? and conformance <A> A?();
  return ModifiedContent<>.update<A>(_:combining:isEnabled:)((uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey, (uint64_t)&v13, a2, a3, (uint64_t)&type metadata for AccessibilityProperties.AutomationVisibilityKey, v10, v11, a4);
}

unint64_t lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility>? and conformance <A> A?)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>?(255);
    lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility>? and conformance <A> A?);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>;
  if (!lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>)
  {
    type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type AccessibilityNullableOptionSet<AccessibilityVisibility> and conformance AccessibilityNullableOptionSet<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for AccessibilityProperties.AutomationVisibilityKey()
{
  return &type metadata for AccessibilityProperties.AutomationVisibilityKey;
}

void protocol witness for static AccessibilityOptionalPropertiesKey.valueType.getter in conformance AccessibilityProperties.AutomationVisibilityKey()
{
  if (one-time initialization token for valueType != -1) {
    swift_once();
  }

  type metadata accessor for AccessibilityNullableOptionSet<AccessibilityVisibility>();
}

uint64_t assignWithCopy for SceneID(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(unsigned char *)(a2 + 16);
  outlined copy of SceneID(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  char v8 = *(unsigned char *)(a1 + 16);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of SceneID(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for SceneID(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  char v6 = *(unsigned char *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of SceneID(v4, v5, v6);
  return a1;
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance SceneID()
{
  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance SceneID()
{
  uint64_t v1 = *(void *)(v0 + 8);
  if (*(unsigned char *)(v0 + 16))
  {
    Hasher._combine(_:)(*(void *)v0);
    Hasher._combine(_:)(v1);
  }
  else
  {
    String.hash(into:)();
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance SceneID()
{
  Swift::UInt v2 = *(void *)v0;
  uint64_t v1 = *(void *)(v0 + 8);
  char v3 = *(unsigned char *)(v0 + 16);
  Hasher.init(_seed:)();
  if (v3)
  {
    Hasher._combine(_:)(v2);
    Hasher._combine(_:)(v1);
  }
  else
  {
    String.hash(into:)();
  }
  return Hasher._finalize()();
}

ValueMetadata *type metadata accessor for SceneIDKey()
{
  return &type metadata for SceneIDKey;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in WidgetBorderedProminentButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t ResolvedBorderedButton.init(configuration:isProminent:)@<X0>(char *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  char v5 = *a1;
  char v6 = a1[1];
  char v7 = a1[2];
  *(void *)a3 = swift_getKeyPath();
  *(unsigned char *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = swift_getKeyPath();
  *(unsigned char *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = swift_getKeyPath();
  *(unsigned char *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = swift_getKeyPath();
  *(unsigned char *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = swift_getKeyPath();
  *(_WORD *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = swift_getKeyPath();
  *(unsigned char *)(a3 + 88) = 0;
  *(unsigned char *)(a3 + 89) = v5;
  *(unsigned char *)(a3 + 90) = v6;
  *(unsigned char *)(a3 + 91) = v7;
  *(unsigned char *)(a3 + 92) = a2;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = swift_getKeyPath();
  *(void *)(a3 + 96) = KeyPath;
  *(unsigned char *)(a3 + 104) = 0;
  *(void *)(a3 + 120) = 0;
  *(void *)(a3 + 128) = 0;
  *(void *)(a3 + 112) = v9;
  *(_WORD *)(a3 + 136) = 0;
  *(void *)(a3 + 144) = v10;
  *(unsigned char *)(a3 + 152) = 0;
  uint64_t result = static Color.secondarySystemFill.getter();
  *(void *)(a3 + 160) = result;
  return result;
}

double protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle(a1, 0, a2).n128_u64[0];
  return result;
}

double protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedProminentButtonStyle@<D0>(char *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&double result = protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle(a1, 1, a2).n128_u64[0];
  return result;
}

__n128 protocol witness for ButtonStyle.makeBody(configuration:) in conformance WidgetBorderedButtonStyle@<Q0>(char *a1@<X0>, char a2@<W3>, uint64_t a3@<X8>)
{
  char v4 = a1[1];
  char v5 = a1[2];
  v11[0] = *a1;
  v11[1] = v4;
  void v11[2] = v5;
  ResolvedBorderedButton.init(configuration:isProminent:)(v11, a2, (uint64_t)v12);
  long long v6 = v12[9];
  *(_OWORD *)(a3 + 128) = v12[8];
  *(_OWORD *)(a3 + 144) = v6;
  *(void *)(a3 + 160) = v13;
  long long v7 = v12[5];
  *(_OWORD *)(a3 + 64) = v12[4];
  *(_OWORD *)(a3 + 80) = v7;
  long long v8 = v12[7];
  *(_OWORD *)(a3 + 96) = v12[6];
  *(_OWORD *)(a3 + 112) = v8;
  long long v9 = v12[1];
  *(_OWORD *)a3 = v12[0];
  *(_OWORD *)(a3 + 16) = v9;
  __n128 result = (__n128)v12[3];
  *(_OWORD *)(a3 + 32) = v12[2];
  *(__n128 *)(a3 + 48) = result;
  return result;
}

uint64_t associated type witness table accessor for ButtonStyle.Body : View in WidgetBorderedButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

__n128 ResolvedBorderedButton.body.getter@<Q0>(uint64_t a1@<X8>)
{
  long long v3 = v1[9];
  long long v98 = v1[8];
  long long v99 = v3;
  uint64_t v100 = *((void *)v1 + 20);
  long long v4 = v1[5];
  long long v94 = v1[4];
  long long v95 = v4;
  long long v5 = v1[7];
  long long v96 = v1[6];
  long long v97 = v5;
  long long v6 = v1[1];
  long long v90 = *v1;
  long long v91 = v6;
  long long v7 = v1[3];
  long long v92 = v1[2];
  long long v93 = v7;
  uint64_t v8 = static VerticalAlignment.center.getter();
  long long v9 = v1[8];
  long long v10 = v1[9];
  long long v11 = v1[6];
  long long v86 = v1[7];
  long long v87 = v9;
  long long v88 = v10;
  long long v12 = v1[4];
  long long v13 = v1[5];
  long long v14 = v1[2];
  long long v82 = v1[3];
  long long v83 = v12;
  long long v84 = v13;
  long long v85 = v11;
  long long v15 = v1[1];
  long long v79 = *v1;
  uint64_t v89 = *((void *)v1 + 20);
  long long v80 = v15;
  long long v81 = v14;
  ResolvedBorderedButton.specs.getter((uint64_t)v67);
  long long v16 = v69;
  unint64_t v17 = v71;
  double v18 = v72;
  outlined copy of BorderedButtonColorSpec.LabelStyle(v71);
  swift_release();
  outlined consume of Material?(v16, BYTE8(v16));
  outlined consume of BorderedButtonColorSpec.LabelStyle(v17);
  long long v86 = v97;
  long long v87 = v98;
  long long v88 = v99;
  long long v82 = v93;
  long long v83 = v94;
  long long v84 = v95;
  long long v85 = v96;
  long long v79 = v90;
  uint64_t v89 = v100;
  long long v80 = v91;
  long long v81 = v92;
  ResolvedBorderedButton.specs.getter((uint64_t)v67);
  long long v19 = v69;
  unint64_t v20 = v71;
  uint64_t v21 = v73;
  swift_release();
  outlined consume of Material?(v19, BYTE8(v19));
  outlined consume of BorderedButtonColorSpec.LabelStyle(v20);
  static UnitPoint.center.getter();
  uint64_t v23 = v22;
  uint64_t v25 = v24;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v27 = v90;
  uint64_t v28 = BYTE8(v90);
  outlined retain of ResolvedBorderedButton((uint64_t)&v90);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v27, v28);
  specialized Environment.wrappedValue.getter(v27, v28, &v79);
  outlined consume of Environment<Bool?>.Content(v27, v28);
  if (v79 < 2u) {
    char v29 = 5;
  }
  else {
    char v29 = 6;
  }
  LOBYTE(v79) = v29;
  LOBYTE(v67[0]) = 4;
  static Font.Weight.semibold.getter();
  uint64_t v30 = static Font.system(_:design:weight:)();
  outlined release of ResolvedBorderedButton((uint64_t)&v90);
  uint64_t v31 = v94;
  uint64_t v32 = BYTE8(v94);
  int v33 = BYTE9(v94);
  outlined retain of ResolvedBorderedButton((uint64_t)&v90);
  outlined copy of Environment<CGFloat?>.Content(v31, v32, v33);
  specialized Environment.wrappedValue.getter(v31, v32 | (v33 << 8), (uint64_t)&v79);
  outlined consume of Environment<CGFloat?>.Content(v31, v32, v33);
  uint64_t v65 = v23;
  uint64_t v66 = v21;
  uint64_t v64 = v25;
  uint64_t v62 = v30;
  uint64_t v63 = KeyPath;
  if (BYTE8(v79) == 1 && (unint64_t)v79 >= 3)
  {
    uint64_t v34 = v8;
    long long v86 = v97;
    long long v87 = v98;
    long long v88 = v99;
    long long v82 = v93;
    long long v83 = v94;
    long long v84 = v95;
    long long v85 = v96;
    long long v79 = v90;
    uint64_t v89 = v100;
    long long v80 = v91;
    long long v81 = v92;
    ResolvedBorderedButton.circleButtonPadding.getter();
  }
  else
  {
    uint64_t v34 = v8;
    *(void *)&long long v79 = v96;
    BYTE8(v79) = BYTE8(v96);
    long long v80 = v97;
    *(void *)&long long v81 = v98;
    WORD4(v81) = WORD4(v98);
    *(void *)&long long v82 = v99;
    BYTE8(v82) = BYTE8(v99);
    double v35 = BorderedButtonSpec.padding.getter();
  }
  double v59 = v35;
  uint64_t v39 = v36;
  uint64_t v40 = v37;
  uint64_t v41 = v38;
  outlined release of ResolvedBorderedButton((uint64_t)&v90);
  char v43 = static Edge.Set.all.getter();
  long long v86 = v97;
  long long v87 = v98;
  long long v88 = v99;
  long long v82 = v93;
  long long v83 = v94;
  long long v84 = v95;
  long long v85 = v96;
  long long v79 = v90;
  char v78 = 1;
  char v77 = 0;
  uint64_t v89 = v100;
  long long v80 = v91;
  long long v81 = v92;
  ResolvedBorderedButton.background.getter((uint64_t)v67);
  char v44 = v67[0];
  uint64_t v45 = v67[1];
  char v46 = v68;
  uint64_t v47 = v70;
  unint64_t v48 = v71;
  double v49 = v72;
  char v50 = v73;
  char v51 = BYTE1(v73);
  long long v60 = v69;
  __n128 v61 = v74;
  uint64_t v53 = v75;
  uint64_t v52 = v76;
  uint64_t v54 = static Alignment.center.getter();
  char v55 = v78;
  char v56 = v77;
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = v55;
  *(void *)(a1 + 24) = v17;
  float v42 = v18;
  *(float *)(a1 + 32) = v42;
  *(void *)(a1 + 40) = v66;
  *(void *)(a1 + 48) = v66;
  *(void *)(a1 + 56) = v65;
  *(void *)(a1 + 64) = v64;
  *(void *)(a1 + 72) = v63;
  *(void *)(a1 + 80) = v62;
  *(unsigned char *)(a1 + 88) = v43;
  *(double *)(a1 + 96) = v59;
  *(void *)(a1 + 104) = v39;
  *(void *)(a1 + 112) = v40;
  *(void *)(a1 + 120) = v41;
  *(unsigned char *)(a1 + 128) = v56;
  *(unsigned char *)(a1 + 136) = v44;
  *(void *)(a1 + 144) = v45;
  *(unsigned char *)(a1 + 152) = v46;
  *(_OWORD *)(a1 + 160) = v60;
  *(void *)(a1 + 176) = v47;
  *(void *)(a1 + 184) = v48;
  *(double *)(a1 + 192) = v49;
  *(unsigned char *)(a1 + 200) = v50;
  *(unsigned char *)(a1 + 201) = v51;
  __n128 result = v61;
  *(__n128 *)(a1 + 208) = v61;
  *(void *)(a1 + 224) = v53;
  *(void *)(a1 + 232) = v52;
  *(void *)(a1 + 240) = v54;
  *(void *)(a1 + 248) = v58;
  return result;
}

double ResolvedBorderedButton.specs.getter@<D0>(uint64_t a1@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 128);
  long long v4 = *(_OWORD *)(v1 + 144);
  long long v5 = *(_OWORD *)(v1 + 96);
  long long v50 = *(_OWORD *)(v1 + 112);
  long long v51 = v3;
  long long v52 = v4;
  uint64_t v53 = *(void *)(v1 + 160);
  long long v6 = *(_OWORD *)(v1 + 80);
  long long v47 = *(_OWORD *)(v1 + 64);
  long long v48 = v6;
  long long v49 = v5;
  long long v7 = *(_OWORD *)(v1 + 16);
  v44[0] = *(_OWORD *)v1;
  v44[1] = v7;
  long long v8 = *(_OWORD *)(v1 + 48);
  long long v45 = *(_OWORD *)(v1 + 32);
  long long v46 = v8;
  uint64_t v9 = v7;
  uint64_t v10 = BYTE8(v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, BYTE8(v7));
  char v11 = specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool?>.Content(v9, v10);
  if (v11)
  {
    int v12 = BYTE9(v48);
    char v13 = BYTE10(v48);
    double v14 = 1.0;
    int v15 = BYTE11(v48);
    double v16 = 1.0;
    if (BYTE11(v48) == 1)
    {
      uint64_t v17 = v47;
      uint64_t v18 = BYTE8(v47);
      int v19 = BYTE9(v47);
      outlined copy of Environment<CGFloat?>.Content(v47, BYTE8(v47), SBYTE9(v47));
      outlined retain of ResolvedBorderedButton((uint64_t)v44);
      specialized Environment.wrappedValue.getter(v17, v18 | (v19 << 8), (uint64_t)&v42);
      outlined consume of Environment<CGFloat?>.Content(v17, v18, v19);
      outlined release of ResolvedBorderedButton((uint64_t)v44);
      double v16 = 0.9;
      if ((v43 & (v42 > 2)) != 0) {
        double v14 = 0.8;
      }
      else {
        double v14 = 0.9;
      }
    }
    uint64_t v20 = v46;
    uint64_t v21 = BYTE8(v46);
    outlined copy of Environment<Color?>.Content(v46, BYTE8(v46));
    uint64_t v22 = specialized Environment.wrappedValue.getter(v20, v21);
    outlined consume of Environment<Color?>.Content(v20, v21);
    if (!v22)
    {
      if (v12 == 1) {
        char v23 = v13;
      }
      else {
        char v23 = 1;
      }
      if (v23) {
        uint64_t v24 = static Color.accentColor.getter();
      }
      else {
        uint64_t v24 = static Color.red.getter();
      }
      uint64_t v22 = v24;
    }
    char v31 = BYTE12(v48);
    uint64_t v32 = v48;
    uint64_t v33 = BYTE8(v48);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v48, BYTE8(v48));
    char v34 = specialized Environment.wrappedValue.getter(v32, v33);
    outlined consume of Environment<Bool?>.Content(v32, v33);
    if (v34 == 2)
    {
      if ((v31 & 1) == 0) {
        goto LABEL_25;
      }
      goto LABEL_22;
    }
    if (v31)
    {
      if (v34)
      {
LABEL_22:
        LOBYTE(v42) = 0;
        Color.init(_:white:opacity:)();
        uint64_t v35 = Color.over(_:)();
        swift_release();
        swift_release();
        uint64_t v36 = 0;
        double v37 = 1.0;
        uint64_t v22 = v35;
LABEL_41:
        *(void *)a1 = v22;
        *(double *)(a1 + 8) = v37;
        *(double *)(a1 + 16) = v16;
        double result = 0.0;
        *(_OWORD *)(a1 + 24) = xmmword_188368AE0;
        *(unsigned char *)(a1 + 40) = 0;
        *(void *)(a1 + 48) = v36;
        *(void *)(a1 + 56) = 0x3FF0000000000000;
        *(double *)(a1 + 64) = v14;
        return result;
      }
    }
    else if (v34)
    {
LABEL_25:
      uint64_t v38 = v45;
      uint64_t v39 = BYTE8(v45);
      swift_retain_n();
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v38, v39);
      specialized Environment.wrappedValue.getter(v38, v39, &v42);
      outlined consume of Environment<Bool?>.Content(v38, v39);
      if (v42)
      {
        swift_release();
        if (v15) {
          double v37 = 0.24;
        }
        else {
          double v37 = 0.32;
        }
      }
      else
      {
        if (v15) {
          double v37 = 0.2;
        }
        else {
          double v37 = 0.14;
        }
        if (v22 == static Color.yellow.getter())
        {
          swift_release_n();
        }
        else
        {
          if (v15) {
            double v40 = 0.18;
          }
          else {
            double v40 = 0.12;
          }
          char v41 = dispatch thunk of AnyShapeStyleBox.isEqual(to:)();
          swift_release();
          swift_release();
          if ((v41 & 1) == 0) {
            double v37 = v40;
          }
        }
      }
      uint64_t v36 = v22;
      goto LABEL_41;
    }
    uint64_t v36 = v22;
    uint64_t v22 = v53;
    swift_retain();
    double v37 = 1.0;
    goto LABEL_41;
  }
  *(void *)a1 = v53;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 8) = _Q0;
  *(_OWORD *)(a1 + 24) = xmmword_188368AE0;
  *(unsigned char *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 1;
  *(_OWORD *)(a1 + 56) = xmmword_18839FB90;

  swift_retain();
  return result;
}

uint64_t ResolvedBorderedButton.background.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 64);
  uint64_t v6 = *(unsigned __int8 *)(v1 + 72);
  char v7 = *(unsigned char *)(v1 + 73);
  outlined copy of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
  specialized Environment.wrappedValue.getter(v5, v6 & 0xFFFFFEFF | ((v7 & 1) << 8), (uint64_t)&v34);
  outlined consume of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
  if (v35 == 1 && v34 == 0)
  {
    uint64_t v33 = 1;
    char v9 = 1;
  }
  else
  {
    outlined copy of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
    specialized Environment.wrappedValue.getter(v5, v6 & 0xFFFFFEFF | ((v7 & 1) << 8), (uint64_t)&v34);
    outlined consume of Environment<CGFloat?>.Content(v5, v6, v7 & 1);
    uint64_t v33 = v34;
    char v9 = v35;
  }
  char v32 = v9;
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v3, v4 & 1);
  specialized Environment.wrappedValue.getter(v3, v4 & 1, &v34);
  outlined consume of Environment<Bool?>.Content(v3, v4 & 1);
  char v31 = v34;
  static EdgeInsets.zero.getter();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14;
  uint64_t v17 = v16;
  uint64_t v34 = v3;
  char v35 = v4;
  long long v36 = *(_OWORD *)(v1 + 9);
  long long v37 = *(_OWORD *)(v1 + 25);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(v1 + 41);
  *(void *)&v38[15] = *(void *)(v1 + 56);
  uint64_t v39 = v5;
  char v40 = v6;
  char v41 = v7;
  long long v44 = *(_OWORD *)(v1 + 106);
  long long v45 = *(_OWORD *)(v1 + 122);
  *(_OWORD *)long long v46 = *(_OWORD *)(v1 + 138);
  *(_OWORD *)&v46[14] = *(_OWORD *)(v1 + 152);
  long long v42 = *(_OWORD *)(v1 + 74);
  long long v43 = *(_OWORD *)(v1 + 90);
  ResolvedBorderedButton.specs.getter((uint64_t)v47);
  char v29 = v7;
  uint64_t v18 = v48;
  unsigned __int8 v19 = v49;
  char v20 = v4;
  unint64_t v21 = v50;
  uint64_t v30 = Color.opacity(_:)();
  swift_release();
  outlined consume of Material?(v18, v19);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v21);
  uint64_t v34 = v3;
  char v35 = v20;
  long long v36 = *(_OWORD *)(v1 + 9);
  long long v37 = *(_OWORD *)(v1 + 25);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)(v1 + 41);
  *(void *)&v38[15] = *(void *)(v1 + 56);
  uint64_t v39 = v5;
  char v40 = v6;
  char v41 = v29;
  long long v44 = *(_OWORD *)(v1 + 106);
  long long v45 = *(_OWORD *)(v1 + 122);
  *(_OWORD *)long long v46 = *(_OWORD *)(v1 + 138);
  *(_OWORD *)&v46[14] = *(_OWORD *)(v1 + 152);
  long long v42 = *(_OWORD *)(v1 + 74);
  long long v43 = *(_OWORD *)(v1 + 90);
  ResolvedBorderedButton.specs.getter((uint64_t)v47);
  uint64_t v22 = v47[2];
  uint64_t v23 = v48;
  unsigned __int8 v24 = v49;
  unint64_t v25 = v50;
  swift_release();
  outlined consume of Material?(v23, v24);
  outlined consume of BorderedButtonColorSpec.LabelStyle(v25);
  uint64_t result = static UnitPoint.center.getter();
  *(unsigned char *)a1 = v31;
  *(void *)(a1 + 8) = v33;
  *(unsigned char *)(a1 + 16) = v32;
  *(void *)(a1 + 24) = v11;
  *(void *)(a1 + 32) = v13;
  *(void *)(a1 + 40) = v15;
  *(void *)(a1 + 48) = v17;
  *(void *)(a1 + 56) = v30;
  *(_WORD *)(a1 + 64) = 256;
  *(void *)(a1 + 72) = v22;
  *(void *)(a1 + 80) = v22;
  *(void *)(a1 + 88) = v27;
  *(void *)(a1 + 96) = v28;
  return result;
}

uint64_t ResolvedBorderedButton.circleButtonPadding.getter()
{
  uint64_t v12 = *(void *)v0;
  uint64_t v1 = *(unsigned __int8 *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v6 = *(void *)(v0 + 128);
  char v7 = *(unsigned char *)(v0 + 137);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v9 = *(unsigned __int8 *)(v0 + 152);
  uint64_t v10 = *(unsigned __int8 *)(v0 + 136);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  outlined copy of Environment<KeyboardShortcut?>.Content(v4, v5, v6, v10, v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  specialized Environment.wrappedValue.getter(v8, v9, &v14);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  outlined consume of Environment<Bool?>.Content(v2, v3);
  outlined consume of Environment<KeyboardShortcut?>.Content(v4, v5, v6, v10, v7);
  outlined consume of Environment<Bool?>.Content(v8, v9);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v1);
  specialized Environment.wrappedValue.getter(v12, v1, &v13);
  outlined consume of Environment<Bool?>.Content(v12, v1);

  return EdgeInsets.init(_all:)();
}

uint64_t initializeWithCopy for ResolvedBorderedButton(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v5);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  uint64_t v6 = a2[2];
  unsigned __int8 v7 = *((unsigned char *)a2 + 24);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7);
  *(void *)(a1 + 16) = v6;
  *(unsigned char *)(a1 + 24) = v7;
  uint64_t v8 = a2[4];
  unsigned __int8 v9 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  *(void *)(a1 + 32) = v8;
  *(unsigned char *)(a1 + 40) = v9;
  uint64_t v10 = a2[6];
  unsigned __int8 v11 = *((unsigned char *)a2 + 56);
  outlined copy of Environment<Color?>.Content(v10, v11);
  *(void *)(a1 + 48) = v10;
  *(unsigned char *)(a1 + 56) = v11;
  uint64_t v12 = a2[8];
  char v13 = *((unsigned char *)a2 + 73);
  unsigned __int8 v14 = *((unsigned char *)a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v12, v14, v13);
  *(void *)(a1 + 64) = v12;
  *(unsigned char *)(a1 + 72) = v14;
  *(unsigned char *)(a1 + 73) = v13;
  uint64_t v15 = a2[10];
  unsigned __int8 v16 = *((unsigned char *)a2 + 88);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v15, v16);
  *(void *)(a1 + 80) = v15;
  *(unsigned char *)(a1 + 88) = v16;
  *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)a2 + 89);
  uint64_t v17 = a2[12];
  unsigned __int8 v18 = *((unsigned char *)a2 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v17, v18);
  *(void *)(a1 + 96) = v17;
  *(unsigned char *)(a1 + 104) = v18;
  uint64_t v19 = a2[14];
  uint64_t v20 = a2[15];
  uint64_t v21 = a2[16];
  char v22 = *((unsigned char *)a2 + 137);
  unsigned __int8 v23 = *((unsigned char *)a2 + 136);
  outlined copy of Environment<KeyboardShortcut?>.Content(v19, v20, v21, v23, v22);
  *(void *)(a1 + 112) = v19;
  *(void *)(a1 + 120) = v20;
  *(void *)(a1 + 128) = v21;
  *(unsigned char *)(a1 + 136) = v23;
  *(unsigned char *)(a1 + 137) = v22;
  uint64_t v24 = a2[18];
  LOBYTE(v20) = *((unsigned char *)a2 + 152);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v24, v20);
  *(void *)(a1 + 144) = v24;
  *(unsigned char *)(a1 + 152) = v20;
  *(void *)(a1 + 160) = a2[20];
  swift_retain();
  return a1;
}

uint64_t *assignWithCopy for ResolvedBorderedButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unsigned __int8 v5 = *((unsigned char *)a2 + 8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(*a2, v5);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = a2[2];
  unsigned __int8 v9 = *((unsigned char *)a2 + 24);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  uint64_t v10 = a1[2];
  uint64_t v11 = *((unsigned __int8 *)a1 + 24);
  a1[2] = v8;
  *((unsigned char *)a1 + 24) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  uint64_t v12 = a2[4];
  unsigned __int8 v13 = *((unsigned char *)a2 + 40);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v13);
  uint64_t v14 = a1[4];
  uint64_t v15 = *((unsigned __int8 *)a1 + 40);
  a1[4] = v12;
  *((unsigned char *)a1 + 40) = v13;
  outlined consume of Environment<Bool?>.Content(v14, v15);
  uint64_t v16 = a2[6];
  unsigned __int8 v17 = *((unsigned char *)a2 + 56);
  outlined copy of Environment<Color?>.Content(v16, v17);
  uint64_t v18 = a1[6];
  uint64_t v19 = *((unsigned __int8 *)a1 + 56);
  a1[6] = v16;
  *((unsigned char *)a1 + 56) = v17;
  outlined consume of Environment<Color?>.Content(v18, v19);
  uint64_t v20 = a2[8];
  char v21 = *((unsigned char *)a2 + 73);
  unsigned __int8 v22 = *((unsigned char *)a2 + 72);
  outlined copy of Environment<CGFloat?>.Content(v20, v22, v21);
  uint64_t v23 = a1[8];
  char v24 = *((unsigned char *)a1 + 73);
  a1[8] = v20;
  uint64_t v25 = *((unsigned __int8 *)a1 + 72);
  *((unsigned char *)a1 + 72) = v22;
  *((unsigned char *)a1 + 73) = v21;
  outlined consume of Environment<CGFloat?>.Content(v23, v25, v24);
  uint64_t v26 = a2[10];
  unsigned __int8 v27 = *((unsigned char *)a2 + 88);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v26, v27);
  uint64_t v28 = a1[10];
  uint64_t v29 = *((unsigned __int8 *)a1 + 88);
  a1[10] = v26;
  *((unsigned char *)a1 + 88) = v27;
  outlined consume of Environment<Bool?>.Content(v28, v29);
  *(_WORD *)((char *)a1 + 89) = *(_WORD *)((char *)a2 + 89);
  *((unsigned char *)a1 + 91) = *((unsigned char *)a2 + 91);
  *((unsigned char *)a1 + 92) = *((unsigned char *)a2 + 92);
  uint64_t v30 = a2[12];
  unsigned __int8 v31 = *((unsigned char *)a2 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v30, v31);
  uint64_t v32 = a1[12];
  uint64_t v33 = *((unsigned __int8 *)a1 + 104);
  a1[12] = v30;
  *((unsigned char *)a1 + 104) = v31;
  outlined consume of Environment<Bool?>.Content(v32, v33);
  uint64_t v34 = a2[14];
  uint64_t v35 = a2[15];
  uint64_t v36 = a2[16];
  char v37 = *((unsigned char *)a2 + 137);
  unsigned __int8 v38 = *((unsigned char *)a2 + 136);
  outlined copy of Environment<KeyboardShortcut?>.Content(v34, v35, v36, v38, v37);
  uint64_t v39 = a1[14];
  uint64_t v40 = a1[15];
  uint64_t v41 = a1[16];
  char v42 = *((unsigned char *)a1 + 137);
  a1[14] = v34;
  a1[15] = v35;
  a1[16] = v36;
  uint64_t v43 = *((unsigned __int8 *)a1 + 136);
  *((unsigned char *)a1 + 136) = v38;
  *((unsigned char *)a1 + 137) = v37;
  outlined consume of Environment<KeyboardShortcut?>.Content(v39, v40, v41, v43, v42);
  uint64_t v44 = a2[18];
  LOBYTE(v35) = *((unsigned char *)a2 + 152);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v44, v35);
  uint64_t v45 = a1[18];
  uint64_t v46 = *((unsigned __int8 *)a1 + 152);
  a1[18] = v44;
  *((unsigned char *)a1 + 152) = v35;
  outlined consume of Environment<Bool?>.Content(v45, v46);
  a1[20] = a2[20];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t *assignWithTake for ResolvedBorderedButton(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *a1;
  uint64_t v7 = *((unsigned __int8 *)a1 + 8);
  *a1 = v4;
  *((unsigned char *)a1 + 8) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = a1[2];
  uint64_t v10 = *((unsigned __int8 *)a1 + 24);
  a1[2] = a2[2];
  *((unsigned char *)a1 + 24) = v8;
  outlined consume of Environment<Bool?>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 40);
  uint64_t v12 = a1[4];
  uint64_t v13 = *((unsigned __int8 *)a1 + 40);
  a1[4] = a2[4];
  *((unsigned char *)a1 + 40) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  char v14 = *((unsigned char *)a2 + 56);
  uint64_t v15 = a1[6];
  uint64_t v16 = *((unsigned __int8 *)a1 + 56);
  a1[6] = a2[6];
  *((unsigned char *)a1 + 56) = v14;
  outlined consume of Environment<Color?>.Content(v15, v16);
  char v17 = *((unsigned char *)a2 + 72);
  char v18 = *((unsigned char *)a2 + 73);
  uint64_t v19 = a1[8];
  char v20 = *((unsigned char *)a1 + 73);
  a1[8] = a2[8];
  uint64_t v21 = *((unsigned __int8 *)a1 + 72);
  *((unsigned char *)a1 + 72) = v17;
  *((unsigned char *)a1 + 73) = v18;
  outlined consume of Environment<CGFloat?>.Content(v19, v21, v20);
  char v22 = *((unsigned char *)a2 + 88);
  uint64_t v23 = a1[10];
  uint64_t v24 = *((unsigned __int8 *)a1 + 88);
  a1[10] = a2[10];
  *((unsigned char *)a1 + 88) = v22;
  outlined consume of Environment<Bool?>.Content(v23, v24);
  *(_WORD *)((char *)a1 + 89) = *(_WORD *)((char *)a2 + 89);
  *((unsigned char *)a1 + 91) = *((unsigned char *)a2 + 91);
  *((unsigned char *)a1 + 92) = *((unsigned char *)a2 + 92);
  char v25 = *((unsigned char *)a2 + 104);
  uint64_t v26 = a1[12];
  uint64_t v27 = *((unsigned __int8 *)a1 + 104);
  a1[12] = a2[12];
  *((unsigned char *)a1 + 104) = v25;
  outlined consume of Environment<Bool?>.Content(v26, v27);
  uint64_t v28 = a2[16];
  char v29 = *((unsigned char *)a2 + 136);
  char v30 = *((unsigned char *)a2 + 137);
  uint64_t v31 = a1[14];
  uint64_t v32 = a1[15];
  uint64_t v33 = a1[16];
  char v34 = *((unsigned char *)a1 + 137);
  *((_OWORD *)a1 + 7) = *((_OWORD *)a2 + 7);
  a1[16] = v28;
  uint64_t v35 = *((unsigned __int8 *)a1 + 136);
  *((unsigned char *)a1 + 136) = v29;
  *((unsigned char *)a1 + 137) = v30;
  outlined consume of Environment<KeyboardShortcut?>.Content(v31, v32, v33, v35, v34);
  char v36 = *((unsigned char *)a2 + 152);
  uint64_t v37 = a1[18];
  uint64_t v38 = *((unsigned __int8 *)a1 + 152);
  a1[18] = a2[18];
  *((unsigned char *)a1 + 152) = v36;
  outlined consume of Environment<Bool?>.Content(v37, v38);
  a1[20] = a2[20];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for ResolvedBorderedButton(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 168)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 160);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ResolvedBorderedButton(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 168) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 160) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 168) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>)
  {
    _s7SwiftUI6HStackVyAA24ButtonStyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for HStack<ButtonStyleConfiguration.Label>, (uint64_t)&type metadata for ButtonStyleConfiguration.Label, (uint64_t)&protocol witness table for ButtonStyleConfiguration.Label, MEMORY[0x1E4F415B8]);
    type metadata accessor for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>);
    }
  }
}

void type metadata accessor for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>()
{
  if (!lazy cache variable for type metadata for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>)
  {
    _s7SwiftUI6HStackVyAA24ButtonStyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>();
    unint64_t v0 = type metadata accessor for _DefaultForegroundStyleModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>;
  if (!lazy protocol witness table cache variable for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>)
  {
    _s7SwiftUI6HStackVyAA24ButtonStyleConfigurationV5LabelVGMaTm_0(255, &lazy cache variable for type metadata for _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>, (uint64_t)&type metadata for BorderedButtonColorSpec.LabelStyle, (uint64_t)&protocol witness table for BorderedButtonColorSpec.LabelStyle, MEMORY[0x1E4F403C0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle> and conformance _OpacityShapeStyle<A>);
  }
  return result;
}

void type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>()
{
  if (!lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
    lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>();
    unint64_t v0 = type metadata accessor for _BackgroundModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _ShapeView<ResolvedBorderShape, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<ResolvedBorderShape, Color>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ViewInputFlagModifier<ButtonContainerIsBorderedInput>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>)
  {
    lazy protocol witness table accessor for type ButtonContainerIsBorderedInput and conformance ButtonContainerIsBorderedInput();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<ButtonContainerIsBorderedInput>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(255);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>, (void (*)(uint64_t))type metadata accessor for _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>);
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Font?>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>();
    lazy protocol witness table accessor for type HStack<ButtonStyleConfiguration.Label> and conformance HStack<A>();
    lazy protocol witness table accessor for type _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>> and conformance _BackgroundModifier<A>(&lazy protocol witness table cache variable for type _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>> and conformance _DefaultForegroundStyleModifier<A>, (void (*)(uint64_t))type metadata accessor for _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t sub_187D7BD50()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>, ViewInputFlagModifier<ButtonContainerIsBorderedInput>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<ButtonStyleConfiguration.Label>, _DefaultForegroundStyleModifier<_OpacityShapeStyle<BorderedButtonColorSpec.LabelStyle>>>, _ScaleEffect>, _EnvironmentKeyWritingModifier<Font?>>, _PaddingLayout>, _BackgroundModifier<ModifiedContent<_ShapeView<ResolvedBorderShape, Color>, _ScaleEffect>>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void TabRole.hash(into:)()
{
}

uint64_t static TabRole.== infix(_:_:)()
{
  return 1;
}

Swift::Int TabRole.hashValue.getter()
{
  return Hasher._finalize()();
}

unint64_t lazy protocol witness table accessor for type TabRole and conformance TabRole()
{
  unint64_t result = lazy protocol witness table cache variable for type TabRole and conformance TabRole;
  if (!lazy protocol witness table cache variable for type TabRole and conformance TabRole)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabRole and conformance TabRole);
  }
  return result;
}

ValueMetadata *type metadata accessor for TabRole()
{
  return &type metadata for TabRole;
}

unsigned char *storeEnumTagSinglePayload for TabRole.Role(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x187D7C044);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for TabRole.Role()
{
  return &type metadata for TabRole.Role;
}

unint64_t lazy protocol witness table accessor for type TabRole.Role and conformance TabRole.Role()
{
  unint64_t result = lazy protocol witness table cache variable for type TabRole.Role and conformance TabRole.Role;
  if (!lazy protocol witness table cache variable for type TabRole.Role and conformance TabRole.Role)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TabRole.Role and conformance TabRole.Role);
  }
  return result;
}

uint64_t associated type witness table accessor for IndexViewStyle._Body : View in DefaultIndexViewStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for IndexViewStyle._makeBody(configuration:) in conformance DefaultIndexViewStyle@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return PageIndexViewStyle._makeBody(configuration:)(a1, a2);
}

ValueMetadata *type metadata accessor for DefaultIndexViewStyle()
{
  return &type metadata for DefaultIndexViewStyle;
}

_UNKNOWN **sub_187D7C130()
{
  return &protocol witness table for UIKitPageIndexView<A>;
}

void *protocol witness for ExpressibleByStringLiteral.init(stringLiteral:) in conformance DisplayListTestComparator.Key@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[1];
  *(void *)a2 = *result;
  *(void *)(a2 + 8) = v2;
  *(unsigned char *)(a2 + 16) = 1;
  return result;
}

Swift::Int DisplayListTestComparator.Option.hashValue.getter(uint64_t a1)
{
  Hasher.init(_seed:)();
  switch(a1)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      break;
    default:
      Hasher._combine(_:)(0);
      if (a1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)((uint64_t)v3, a1);
        outlined consume of DisplayListTestComparator.Option(a1);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance DisplayListTestComparator.Option()
{
  return DisplayListTestComparator.Option.hashValue.getter(*v0);
}

void protocol witness for Hashable.hash(into:) in conformance DisplayListTestComparator.Option(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  if (*v2 == 1)
  {
    Swift::UInt v5 = 1;
    goto LABEL_7;
  }
  if (v4 == 2)
  {
    Swift::UInt v5 = 2;
    goto LABEL_7;
  }
  if (v4 == 3)
  {
    Swift::UInt v5 = 3;
LABEL_7:
    Hasher._combine(_:)(v5);
    return;
  }
  Hasher._combine(_:)(0);
  if (v4)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    specialized Set.hash(into:)(a1, v4);
    outlined consume of DisplayListTestComparator.Option(v4);
  }
  else
  {
    Hasher._combine(_:)(0);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance DisplayListTestComparator.Option()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)();
  switch(v1)
  {
    case 1:
      Hasher._combine(_:)(1uLL);
      break;
    case 2:
      Hasher._combine(_:)(2uLL);
      break;
    case 3:
      Hasher._combine(_:)(3uLL);
      break;
    default:
      Hasher._combine(_:)(0);
      if (v1)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain();
        specialized Set.hash(into:)((uint64_t)v3, v1);
        outlined consume of DisplayListTestComparator.Option(v1);
      }
      else
      {
        Hasher._combine(_:)(0);
      }
      break;
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static Equatable.== infix(_:_:) in conformance DisplayListTestComparator.Option(uint64_t *a1, uint64_t *a2)
{
  return specialized static DisplayListTestComparator.Option.== infix(_:_:)(*a1, *a2);
}

uint64_t type metadata accessor for DisplayListTestComparator()
{
  return self;
}

unint64_t destroy for DisplayListTestComparator.Option(unint64_t *a1)
{
  unint64_t result = *a1;
  int v2 = -1;
  if (result < 0xFFFFFFFF) {
    int v2 = result;
  }
  if ((v2 + 1) <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisplayListTestComparator.Option(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  LODWORD(v4) = -1;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v4 = *a2;
  }
  if ((v4 + 1) <= 1) {
    uint64_t v3 = swift_bridgeObjectRetain();
  }
  *a1 = v3;
  return a1;
}

uint64_t *assignWithCopy for DisplayListTestComparator.Option(uint64_t *a1, uint64_t *a2)
{
  LODWORD(v3) = -1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v4) = -1;
  }
  else {
    uint64_t v4 = *a1;
  }
  unsigned int v5 = v4 + 1;
  uint64_t v6 = *a2;
  if ((unint64_t)*a2 < 0xFFFFFFFF) {
    uint64_t v3 = *a2;
  }
  unsigned int v7 = v3 + 1;
  if (v5 > 1)
  {
    *a1 = v6;
    if (v7 <= 1) {
      swift_bridgeObjectRetain();
    }
  }
  else if (v7 > 1)
  {
    swift_bridgeObjectRelease();
    *a1 = *a2;
  }
  else
  {
    *a1 = v6;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
  }
  return a1;
}

unint64_t *assignWithTake for DisplayListTestComparator.Option(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  int v4 = -1;
  if (v3 < 0xFFFFFFFF) {
    int v4 = v3;
  }
  unint64_t v5 = *a2;
  if ((v4 + 1) > 1) {
    goto LABEL_9;
  }
  LODWORD(v6) = -1;
  if (v5 < 0xFFFFFFFF) {
    unint64_t v6 = *a2;
  }
  if ((v6 + 1) > 1)
  {
    swift_bridgeObjectRelease();
LABEL_9:
    *a1 = v5;
    return a1;
  }
  *a1 = v5;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayListTestComparator.Option(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFC && *((unsigned char *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  if ((v3 + 1) < 2) {
    LODWORD(v3) = 0;
  }
  if (v3 >= 4) {
    return (v3 - 3);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for DisplayListTestComparator.Option(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)unint64_t result = a2 + 3;
    }
  }
  return result;
}

uint64_t getEnumTag for DisplayListTestComparator.Option(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  if ((v1 + 1) >= 2) {
    return v1;
  }
  else {
    return 0;
  }
}

void *destructiveInjectEnumTag for DisplayListTestComparator.Option(void *result, unsigned int a2)
{
  if (a2 > 0x7FFFFFFE)
  {
    *unint64_t result = 0;
    *(_DWORD *)unint64_t result = a2 - 0x7FFFFFFF;
  }
  else if (a2)
  {
    *unint64_t result = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DisplayListTestComparator.Option()
{
  return &type metadata for DisplayListTestComparator.Option;
}

uint64_t outlined copy of DisplayListTestComparator.Key(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for DisplayListTestComparator.Key(uint64_t a1)
{
  return outlined consume of DisplayListTestComparator.Key(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t outlined consume of DisplayListTestComparator.Key(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 - 1 <= 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for DisplayListTestComparator.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of DisplayListTestComparator.Key(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for DisplayListTestComparator.Key(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  outlined copy of DisplayListTestComparator.Key(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  outlined consume of DisplayListTestComparator.Key(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for DisplayListTestComparator.Key(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  outlined consume of DisplayListTestComparator.Key(v4, v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for DisplayListTestComparator.Key(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 <= 3) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DisplayListTestComparator.Key(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 253;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for DisplayListTestComparator.Key(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 16) <= 2u) {
    return *(unsigned __int8 *)(a1 + 16);
  }
  else {
    return (*(_DWORD *)a1 + 3);
  }
}

uint64_t destructiveInjectEnumTag for DisplayListTestComparator.Key(uint64_t result, unsigned int a2)
{
  if (a2 >= 3)
  {
    *(void *)uint64_t result = a2 - 3;
    *(void *)(result + 8) = 0;
    LOBYTE(a2) = 3;
  }
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DisplayListTestComparator.Key()
{
  return &type metadata for DisplayListTestComparator.Key;
}

uint64_t associated type witness table accessor for ExpressibleByUnicodeScalarLiteral.UnicodeScalarLiteralType : _ExpressibleByBuiltinUnicodeScalarLiteral in DisplayListTestComparator.Key()
{
  return MEMORY[0x1E4FBB228];
}

unint64_t lazy protocol witness table accessor for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key;
  if (!lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key;
  if (!lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTestComparator.Key and conformance DisplayListTestComparator.Key);
  }
  return result;
}

uint64_t associated type witness table accessor for ExpressibleByExtendedGraphemeClusterLiteral.ExtendedGraphemeClusterLiteralType : _ExpressibleByBuiltinExtendedGraphemeClusterLiteral in DisplayListTestComparator.Key()
{
  return MEMORY[0x1E4FBB230];
}

uint64_t associated type witness table accessor for ExpressibleByStringLiteral.StringLiteralType : _ExpressibleByBuiltinStringLiteral in DisplayListTestComparator.Key()
{
  return MEMORY[0x1E4FBB220];
}

unint64_t lazy protocol witness table accessor for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option()
{
  unint64_t result = lazy protocol witness table cache variable for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option;
  if (!lazy protocol witness table cache variable for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type DisplayListTestComparator.Option and conformance DisplayListTestComparator.Option);
  }
  return result;
}

void specialized Set.hash(into:)(uint64_t a1, uint64_t a2)
{
  Hasher._finalize()();
  uint64_t v3 = a2 + 56;
  uint64_t v4 = 1 << *(unsigned char *)(a2 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a2 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  Swift::UInt v8 = 0;
  int64_t v9 = 0;
  while (1)
  {
    if (v6)
    {
      unint64_t v10 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    if (__OFADD__(v9++, 1)) {
      goto LABEL_19;
    }
    if (v9 >= v7)
    {
LABEL_17:
      swift_release();
      Hasher._combine(_:)(v8);
      return;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v9);
    if (!v16) {
      break;
    }
LABEL_16:
    unint64_t v6 = (v16 - 1) & v16;
    unint64_t v11 = __clz(__rbit64(v16)) + (v9 << 6);
LABEL_5:
    uint64_t v12 = *(void **)(*(void *)(a2 + 48) + 8 * v11);
    static String._unconditionallyBridgeFromObjectiveC(_:)();
    Hasher.init(_seed:)();
    id v13 = v12;
    String.hash(into:)();
    Swift::Int v14 = Hasher._finalize()();

    swift_bridgeObjectRelease();
    v8 ^= v14;
  }
  int64_t v17 = v9 + 1;
  if (v9 + 1 >= v7) {
    goto LABEL_17;
  }
  unint64_t v16 = *(void *)(v3 + 8 * v17);
  if (v16)
  {
    ++v9;
    goto LABEL_16;
  }
  while (1)
  {
    int64_t v9 = v17 + 1;
    if (__OFADD__(v17, 1)) {
      break;
    }
    if (v9 >= v7) {
      goto LABEL_17;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v9);
    ++v17;
    if (v16) {
      goto LABEL_16;
    }
  }
  __break(1u);
LABEL_19:
  __break(1u);
}

uint64_t outlined consume of DisplayListTestComparator.Option(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t specialized static DisplayListTestComparator.Option.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  switch(a1)
  {
    case 1:
      return a2 == 1;
    case 2:
      if (a2 == 2) {
        return 1;
      }
      break;
    case 3:
      return a2 == 3;
    default:
      if ((unint64_t)(a2 - 1) >= 3)
      {
        if (a1)
        {
          if (!a2) {
            return 0;
          }
          outlined copy of DisplayListTestComparator.Option(a2);
          outlined copy of DisplayListTestComparator.Option(a1);
          char v5 = specialized static Set.== infix(_:_:)(a1, a2);
          outlined consume of DisplayListTestComparator.Option(a2);
          outlined consume of DisplayListTestComparator.Option(a1);
          return (v5 & 1) != 0;
        }
        if (!a2) {
          return 1;
        }
        outlined consume of DisplayListTestComparator.Option(0);
      }
      break;
  }
  return 0;
}

uint64_t outlined copy of DisplayListTestComparator.Option(uint64_t result)
{
  if ((unint64_t)(result - 1) >= 3) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t EnvironmentValues.toolbarCustomizationVisibility.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationVisibilityKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t EnvironmentValues.toolbarCustomizationOptions.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.toolbarCustomizationOptions.setter()
{
  type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.ToolbarCustomizationOptionsKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t static CustomizationOptionsModifier._makeToolbar(content:inputs:body:)(uint64_t a1, uint64_t *a2, void (*a3)(uint64_t, uint64_t *))
{
  uint64_t v35 = *MEMORY[0x1E4F143B8];
  int v4 = *((_DWORD *)a2 + 2);
  uint64_t v5 = a2[2];
  unsigned int v6 = *((_DWORD *)a2 + 6);
  unsigned int v7 = *((_DWORD *)a2 + 7);
  unsigned int v8 = *((_DWORD *)a2 + 8);
  unsigned int v9 = *((_DWORD *)a2 + 9);
  uint64_t v10 = a2[5];
  uint64_t v11 = a2[6];
  int v12 = *((_DWORD *)a2 + 14);
  uint64_t v13 = a2[8];
  int v14 = *((_DWORD *)a2 + 18);
  uint64_t v26 = *a2;
  int v27 = v4;
  uint64_t v28 = v5;
  *(void *)&long long v29 = __PAIR64__(v7, v6);
  *((void *)&v29 + 1) = __PAIR64__(v9, v8);
  uint64_t v30 = v10;
  uint64_t v31 = v11;
  int v32 = v12;
  uint64_t v33 = v13;
  int v34 = v14;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _GraphInputs.environment.getter();
  type metadata accessor for _GraphValue<CustomizationOptionsModifier>();
  _GraphValue.value.getter();
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment();
  Attribute.init<A>(body:value:flags:update:)();
  _GraphInputs.environment.setter();
  uint64_t v17 = v26;
  int v18 = v27;
  uint64_t v19 = v5;
  long long v20 = v29;
  uint64_t v21 = v10;
  uint64_t v22 = v11;
  int v23 = v32;
  uint64_t v24 = v33;
  int v25 = v34;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v15 = swift_bridgeObjectRetain();
  a3(v15, &v17);
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
  swift_release_n();
  return swift_release_n();
}

double CustomizationOptionsModifier.ChildEnvironment.value.getter@<D0>(_OWORD *a1@<X8>)
{
  uint64_t Value = (void *)AGGraphGetValue();
  uint64_t v3 = Value[1];
  *(void *)&long long v7 = *Value;
  *((void *)&v7 + 1) = v3;
  unsigned __int8 v4 = *(unsigned char *)AGGraphGetValue();
  swift_retain();
  swift_retain();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI10VisibilityO_s5NeverOytTg503_s7c114UI28CustomizationOptionsModifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA10E6OXEfU_AD0X6ValuesVTf1cn_n(v4, (uint64_t)&v7);
  uint64_t v5 = AGGraphGetValue();
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF7SwiftUI27ToolbarCustomizationOptionsV_s5NeverOytTB503_s7c4UI28fG107Modifier33_D8F8B35B8E1C27D674C1EB157F00472FLLV16ChildEnvironmentV5valueAA0Q6ValuesVvgyAA07ToolbarcD0VXEfU0_AD0X6ValuesVTf1cn_n(*(void *)(v5 + 8), *(unsigned char *)(v5 + 16), (uint64_t)&v7);
  double result = *(double *)&v7;
  *a1 = v7;
  return result;
}

double protocol witness for Rule.value.getter in conformance CustomizationOptionsModifier.ChildEnvironment@<D0>(_OWORD *a1@<X8>)
{
  return CustomizationOptionsModifier.ChildEnvironment.value.getter(a1);
}

void static ToolbarCustomizationOptions.alwaysAvailable.getter(void *a1@<X8>)
{
  *a1 = 1;
}

SwiftUI::ToolbarCustomizationOptions __swiftcall ToolbarCustomizationOptions.init(rawValue:)(SwiftUI::ToolbarCustomizationOptions rawValue)
{
  v1->rawuint64_t Value = rawValue.rawValue;
  return rawValue;
}

uint64_t ToolbarCustomizationOptions.rawValue.getter()
{
  return *(void *)v0;
}

uint64_t ToolbarCustomizationOptions.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*ToolbarCustomizationOptions.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t CustomizableToolbarContent.defaultCustomization(_:options:)@<X0>(char a1@<W0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a2;
  v6[0] = a1;
  uint64_t v7 = v4;
  char v8 = 0;
  return ToolbarContent.modifier<A>(_:)((uint64_t)v6, a3, (uint64_t)&type metadata for CustomizationOptionsModifier, a4);
}

uint64_t CustomizableToolbarContent.defaultCustomization()@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 - 8) + 16))(a2, v2, a1);
}

unint64_t lazy protocol witness table accessor for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions()
{
  unint64_t result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions;
  if (!lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ToolbarCustomizationOptions and conformance ToolbarCustomizationOptions);
  }
  return result;
}

uint64_t sub_187D7D450()
{
  return swift_getWitnessTable();
}

uint64_t sub_187D7D4B4(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t getEnumTagSinglePayload for CustomizationOptionsModifier(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && a1[17]) {
    return (*(_DWORD *)a1 + 253);
  }
  if (*a1 <= 3u) {
    int v3 = 3;
  }
  else {
    int v3 = *a1;
  }
  int v4 = v3 - 4;
  if (*a1 < 3u) {
    int v5 = -1;
  }
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for CustomizationOptionsModifier()
{
  return &type metadata for CustomizationOptionsModifier;
}

void type metadata accessor for _GraphValue<CustomizationOptionsModifier>()
{
  if (!lazy cache variable for type metadata for _GraphValue<CustomizationOptionsModifier>)
  {
    unint64_t v0 = type metadata accessor for _GraphValue();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _GraphValue<CustomizationOptionsModifier>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment()
{
  unint64_t result = lazy protocol witness table cache variable for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment;
  if (!lazy protocol witness table cache variable for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CustomizationOptionsModifier.ChildEnvironment and conformance CustomizationOptionsModifier.ChildEnvironment);
  }
  return result;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarCustomizationVisibilityKey()
{
  return &type metadata for EnvironmentValues.ToolbarCustomizationVisibilityKey;
}

ValueMetadata *type metadata accessor for EnvironmentValues.ToolbarCustomizationOptionsKey()
{
  return &type metadata for EnvironmentValues.ToolbarCustomizationOptionsKey;
}

void *type metadata accessor for CustomizationOptionsModifier.ChildEnvironment()
{
  return &unk_1ED4528A0;
}

uint64_t assignWithTake for SystemScrollLayoutState(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  unint64_t v7 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v7);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemScrollLayoutState(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1E && *(unsigned char *)(a1 + 108)) {
    return (*(_DWORD *)a1 + 30);
  }
  unsigned int v3 = (*(void *)(a1 + 96) & 4 | ((*(void *)(a1 + 96) >> 59) >> 3) & 0xFFFFFFE7 | (8 * (((*(void *)(a1 + 96) >> 59) >> 1) & 3))) ^ 0x1F;
  if (v3 >= 0x1D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemScrollLayoutState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1D)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 104) = 0;
    *(void *)unint64_t result = a2 - 30;
    if (a3 >= 0x1E) {
      *(unsigned char *)(result + 108) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1E) {
      *(unsigned char *)(result + 108) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 7 | (8 * (-a2 & 0x1F));
      *(void *)(result + 96) = ((v3 << 59) | (4 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SystemScrollLayoutState()
{
  return &type metadata for SystemScrollLayoutState;
}

void SystemScrollLayoutState.adjustContentOffset(by:state:updateSeed:reason:)(double a1, double a2, uint64_t a3, uint64_t a4, unsigned __int8 *a5)
{
  unint64_t v6 = *a5;
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(v5 + 24);
  uint64_t v9 = *(void *)(v5 + 32);
  uint64_t v10 = *(void *)(v5 + 40);
  uint64_t v11 = *(void *)(v5 + 48);
  uint64_t v12 = *(void *)(v5 + 56);
  uint64_t v13 = *(unsigned int *)(v5 + 104);
  if (a1 != 0.0 || a2 != 0.0)
  {
    double v14 = *(double *)v5 + a1;
    double v15 = *(double *)(v5 + 8) + a2;
    uint64_t v19 = *(void *)(v5 + 80);
    uint64_t v20 = *(void *)(v5 + 72);
    uint64_t v18 = *(void *)(v5 + 88);
    uint64_t v16 = *(void *)(v5 + 64);
    if (v13 != -1)
    {
      if (v13) {
        a4 = merge32(_:_:)(v13, a4);
      }
      if (a4 == -1)
      {
        LODWORD(v13) = -1;
      }
      else
      {
        LODWORD(v13) = v6 + 1;
        if (a4) {
          LODWORD(v13) = merge32(_:_:)(a4, (int)v6 + 1);
        }
      }
    }
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v6);
    uint64_t v17 = AGCreateWeakAttribute();
    *(double *)uint64_t v22 = v14;
    *(double *)&v22[1] = v15;
    _OWORD v22[2] = v7;
    v22[3] = v8;
    v22[4] = v9;
    v22[5] = v10;
    v22[6] = v11;
    v22[7] = v12;
    v22[8] = v16;
    v22[9] = v20;
    v22[10] = v19;
    v22[11] = v18;
    v22[12] = v6;
    v22[13] = v13 | (unint64_t)(v17 << 32);
    int v23 = HIDWORD(v17);
    v21[0] = 5;
    memset(&v21[1], 0, 24);
    specialized static ScrollViewCommitMutation.commit(layoutState:phaseState:containerSize:isPreferred:transaction:)(v22, v21, 0, 0, 0, 1, 1, 1);
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(v6);
    outlined consume of SystemScrollLayoutState.ContentOffsetMode(v6);
  }
}

uint64_t SystemScrollLayoutState.description.getter()
{
  unint64_t v1 = *(void *)(v0 + 96);
  int v2 = *(_DWORD *)(v0 + 104);
  _StringGuts.grow(_:)(102);
  v3._countAndFlagsBits = 0xD00000000000001ALL;
  v3._object = (void *)0x80000001883395C0;
  String.append(_:)(v3);
  type metadata accessor for CGPoint(0);
  _print_unlocked<A, B>(_:_:)();
  v4._countAndFlagsBits = 0x74657366666F202CLL;
  v4._object = (void *)0xEE00203A65646F4DLL;
  String.append(_:)(v4);
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(v1);
  v5._countAndFlagsBits = SystemScrollLayoutState.ContentOffsetMode.description.getter();
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v1);
  v6._countAndFlagsBits = 0x74657366666F202CLL;
  v6._object = (void *)0xEE00203A64656553;
  String.append(_:)(v6);
  if (v2 == -1)
  {
    unint64_t v7 = 0xE700000000000000;
    uint64_t v8 = 0x64696C61766E69;
  }
  else if (v2)
  {
    uint64_t v8 = dispatch thunk of CustomStringConvertible.description.getter();
    unint64_t v7 = v9;
  }
  else
  {
    unint64_t v7 = 0xE500000000000000;
    uint64_t v8 = 0x7974706D65;
  }
  unint64_t v10 = v7;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v11._object = (void *)0x80000001883395E0;
  v11._countAndFlagsBits = 0xD000000000000010;
  String.append(_:)(v11);
  _print_unlocked<A, B>(_:_:)();
  v12._countAndFlagsBits = 0xD000000000000015;
  v12._object = (void *)0x8000000188339600;
  String.append(_:)(v12);
  type metadata accessor for CGSize(0);
  _print_unlocked<A, B>(_:_:)();
  v13._countAndFlagsBits = 62;
  v13._object = (void *)0xE100000000000000;
  String.append(_:)(v13);
  return 0;
}

uint64_t SystemScrollLayoutState.ContentOffsetMode.description.getter()
{
  uint64_t v1 = *v0 >> 62;
  if (v1)
  {
    if (v1 != 1) {
      return 0x6D6574737973;
    }
    int v2 = *(unsigned __int8 *)((*v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x20);
    int v3 = *(unsigned __int8 *)((*v0 & 0x3FFFFFFFFFFFFFFFLL) + 0x21);
    _StringGuts.grow(_:)(44);
    swift_bridgeObjectRelease();
    unint64_t v13 = 0xD000000000000011;
    if (v2) {
      uint64_t v4 = 1702195828;
    }
    else {
      uint64_t v4 = 0x65736C6166;
    }
    if (v2) {
      unint64_t v5 = 0xE400000000000000;
    }
    else {
      unint64_t v5 = 0xE500000000000000;
    }
    unint64_t v6 = v5;
    String.append(_:)(*(Swift::String *)&v4);
    swift_bridgeObjectRelease();
    v7._countAndFlagsBits = 0xD000000000000016;
    v7._object = (void *)0x8000000188339640;
    String.append(_:)(v7);
    if (v3) {
      unint64_t v8 = 1702195828;
    }
    else {
      unint64_t v8 = 0x65736C6166;
    }
    if (v3) {
      unint64_t v9 = 0xE400000000000000;
    }
    else {
      unint64_t v9 = 0xE500000000000000;
    }
  }
  else
  {
    unint64_t v13 = 0x656D7473756A6461;
    unint64_t v9 = 0xEB000000006E6F69;
    unint64_t v8 = 0x74616C736E617274;
    switch(*v0)
    {
      case 1u:
        unint64_t v8 = 0xD000000000000013;
        unint64_t v9 = 0x8000000188339660;
        break;
      case 2u:
        unint64_t v9 = 0xE900000000000074;
        unint64_t v8 = 0x6E656D6E67696C61;
        break;
      case 3u:
        unint64_t v9 = 0xE500000000000000;
        unint64_t v8 = 0x7465736572;
        break;
      default:
        break;
    }
  }
  unint64_t v11 = v9;
  String.append(_:)(*(Swift::String *)&v8);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 62;
  v12._object = (void *)0xE100000000000000;
  String.append(_:)(v12);
  return v13;
}

uint64_t sub_187D7DD00()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t assignWithCopy for ScrollViewCommitMutation(uint64_t a1, long long *a2)
{
  unint64_t v4 = a2[6] & 0xF000000000000004;
  if ((~*(void *)(a1 + 96) & 0xF000000000000004) != 0)
  {
    if (v4 == 0xF000000000000004)
    {
      outlined destroy of (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)(a1);
      long long v11 = a2[3];
      long long v13 = *a2;
      long long v12 = a2[1];
      *(_OWORD *)(a1 + 32) = a2[2];
      *(_OWORD *)(a1 + 48) = v11;
      *(_OWORD *)a1 = v13;
      *(_OWORD *)(a1 + 16) = v12;
      long long v15 = a2[5];
      long long v14 = a2[6];
      long long v16 = a2[4];
      *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
      *(_OWORD *)(a1 + 80) = v15;
      *(_OWORD *)(a1 + 96) = v14;
      *(_OWORD *)(a1 + 64) = v16;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *((void *)a2 + 1);
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(void *)(a1 + 24) = *((void *)a2 + 3);
      *(void *)(a1 + 32) = *((void *)a2 + 4);
      *(void *)(a1 + 40) = *((void *)a2 + 5);
      *(void *)(a1 + 48) = *((void *)a2 + 6);
      *(void *)(a1 + 56) = *((void *)a2 + 7);
      *(void *)(a1 + 64) = *((void *)a2 + 8);
      *(void *)(a1 + 72) = *((void *)a2 + 9);
      *(void *)(a1 + 80) = *((void *)a2 + 10);
      *(void *)(a1 + 88) = *((void *)a2 + 11);
      unint64_t v20 = *((void *)a2 + 12);
      outlined copy of SystemScrollLayoutState.ContentOffsetMode(v20);
      unint64_t v21 = *(void *)(a1 + 96);
      *(void *)(a1 + 96) = v20;
      outlined consume of SystemScrollLayoutState.ContentOffsetMode(v21);
      *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
      *(_DWORD *)(a1 + 108) = *((_DWORD *)a2 + 27);
      *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    }
  }
  else if (v4 == 0xF000000000000004)
  {
    long long v5 = *a2;
    long long v6 = a2[1];
    long long v7 = a2[3];
    *(_OWORD *)(a1 + 32) = a2[2];
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)a1 = v5;
    *(_OWORD *)(a1 + 16) = v6;
    long long v8 = a2[4];
    long long v9 = a2[5];
    long long v10 = a2[6];
    *(_DWORD *)(a1 + 112) = *((_DWORD *)a2 + 28);
    *(_OWORD *)(a1 + 80) = v9;
    *(_OWORD *)(a1 + 96) = v10;
    *(_OWORD *)(a1 + 64) = v8;
  }
  else
  {
    *(_OWORD *)a1 = *a2;
    long long v17 = a2[2];
    *(_OWORD *)(a1 + 16) = a2[1];
    *(_OWORD *)(a1 + 32) = v17;
    long long v18 = a2[4];
    *(_OWORD *)(a1 + 48) = a2[3];
    *(_OWORD *)(a1 + 64) = v18;
    *(_OWORD *)(a1 + 80) = a2[5];
    unint64_t v19 = *((void *)a2 + 12);
    outlined copy of SystemScrollLayoutState.ContentOffsetMode(v19);
    *(void *)(a1 + 96) = v19;
    *(_DWORD *)(a1 + 104) = *((_DWORD *)a2 + 26);
    *(void *)(a1 + 108) = *(void *)((char *)a2 + 108);
  }
  long long v22 = *(long long *)((char *)a2 + 120);
  *(_OWORD *)(a1 + 136) = *(long long *)((char *)a2 + 136);
  *(_OWORD *)(a1 + 120) = v22;
  long long v23 = *(long long *)((char *)a2 + 152);
  *(_OWORD *)(a1 + 161) = *(long long *)((char *)a2 + 161);
  *(_OWORD *)(a1 + 152) = v23;
  *(unsigned char *)(a1 + 177) = *((unsigned char *)a2 + 177);
  return a1;
}

uint64_t outlined destroy of (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)(uint64_t a1)
{
  type metadata accessor for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void type metadata accessor for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)()
{
  if (!lazy cache variable for type metadata for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>))
  {
    type metadata accessor for WeakAttribute<SystemScrollLayoutState>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>));
    }
  }
}

void type metadata accessor for WeakAttribute<SystemScrollLayoutState>()
{
  if (!lazy cache variable for type metadata for WeakAttribute<SystemScrollLayoutState>)
  {
    unint64_t v0 = type metadata accessor for WeakAttribute();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for WeakAttribute<SystemScrollLayoutState>);
    }
  }
}

uint64_t assignWithTake for ScrollViewCommitMutation(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 96);
  if ((~v4 & 0xF000000000000004) != 0)
  {
    uint64_t v5 = *(void *)(a2 + 96);
    if ((~v5 & 0xF000000000000004) != 0)
    {
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      long long v10 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v10;
      long long v11 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v11;
      *(void *)(a1 + 96) = v5;
      outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
      goto LABEL_6;
    }
    outlined destroy of (value: SystemScrollLayoutState, attr: WeakAttribute<SystemScrollLayoutState>)(a1);
  }
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  long long v7 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v7;
  long long v8 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v8;
LABEL_6:
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 161) = *(_OWORD *)(a2 + 161);
  *(unsigned char *)(a1 + 177) = *(unsigned char *)(a2 + 177);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScrollViewCommitMutation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 178)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 177);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ScrollViewCommitMutation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 176) = 0;
    *(void *)unint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 178) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 178) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 177) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ScrollViewCommitMutation()
{
  return &type metadata for ScrollViewCommitMutation;
}

unint64_t *initializeBufferWithCopyOfBuffer for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(*a2);
  *a1 = v3;
  return a1;
}

unint64_t destroy for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1)
{
  return outlined consume of SystemScrollLayoutState.ContentOffsetMode(*a1);
}

unint64_t *assignWithCopy for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of SystemScrollLayoutState.ContentOffsetMode(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v4);
  return a1;
}

unint64_t *assignWithTake for SystemScrollLayoutState.ContentOffsetMode(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of SystemScrollLayoutState.ContentOffsetMode(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SystemScrollLayoutState.ContentOffsetMode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x1E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 30);
  }
  unsigned int v3 = (*(void *)a1 & 4 | ((*(void *)a1 >> 59) >> 3) & 0xFFFFFFE7 | (8
                                                                                     * (((*(void *)a1 >> 59) >> 1) & 3))) ^ 0x1F;
  if (v3 >= 0x1D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for SystemScrollLayoutState.ContentOffsetMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x1D)
  {
    *(void *)unint64_t result = a2 - 30;
    if (a3 >= 0x1E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x1E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 7 | (8 * (-a2 & 0x1F));
      *(void *)unint64_t result = ((v3 << 59) | (4 * v3)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t static MultimodalNavigationTitle.title(from:)()
{
  return swift_release();
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle and conformance MultimodalNavigationTitle);
  }
  return result;
}

uint64_t static MultimodalNavigationTitle.== infix(_:_:)()
{
  return 1;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance MultimodalNavigationTitle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t protocol witness for CustomDebugStringConvertible.debugDescription.getter in conformance MultimodalNavigationTitle.CodingKeys(uint64_t a1)
{
  unint64_t v2 = lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t MultimodalNavigationTitle.encode(to:)(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  long long v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void type metadata accessor for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>()
{
  if (!lazy cache variable for type metadata for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>)
  {
    lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
    unint64_t v0 = type metadata accessor for KeyedEncodingContainer();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys()
{
  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys;
  if (!lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys);
  }
  return result;
}

uint64_t MultimodalNavigationTitle.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t protocol witness for Encodable.encode(to:) in conformance MultimodalNavigationTitle(void *a1)
{
  type metadata accessor for KeyedEncodingContainer<MultimodalNavigationTitle.CodingKeys>();
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  long long v6 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  lazy protocol witness table accessor for type MultimodalNavigationTitle.CodingKeys and conformance MultimodalNavigationTitle.CodingKeys();
  dispatch thunk of Encoder.container<A>(keyedBy:)();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

ValueMetadata *type metadata accessor for MultimodalNavigationTitle()
{
  return &type metadata for MultimodalNavigationTitle;
}

void *type metadata accessor for MultimodalNavigationTitle.CodingKeys()
{
  return &unk_1ED4474F0;
}

BOOL static MenuActionDismissBehavior.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t EnvironmentValues.menuActionDismissBehavior.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>();
    lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  return swift_release_n();
}

uint64_t EnvironmentValues.menuActionDismissBehavior.setter()
{
  type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>();
  lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyWritingModifier<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<MenuActionDismissBehaviorKey> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t View.menuActionDismissBehavior(_:)()
{
  return swift_release();
}

void static MenuActionDismissBehavior.automatic.getter(unsigned char *a1@<X8>)
{
  *a1 = 0;
}

void static MenuActionDismissBehavior.enabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static MenuActionDismissBehavior.disabled.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t View.actionKeepsMenuPresented(_:)()
{
  return swift_release();
}

uint64_t sub_187D7EBB4()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>)
  {
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<MenuActionDismissBehavior>);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for MenuActionDismissBehavior(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D7ED74);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts()
{
  unint64_t result = lazy protocol witness table cache variable for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts;
  if (!lazy protocol witness table cache variable for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MenuActionDismissBehavior.Guts and conformance MenuActionDismissBehavior.Guts);
  }
  return result;
}

void type metadata accessor for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<MenuActionDismissBehaviorKey>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyWritingModifier<A>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

ValueMetadata *type metadata accessor for MenuActionDismissBehaviorKey()
{
  return &type metadata for MenuActionDismissBehaviorKey;
}

void HSplitView.init(content:)()
{
}

void protocol witness for View.body.getter in conformance HSplitView<A>()
{
}

void protocol witness for View.body.getter in conformance VSplitView<A>()
{
}

void _SplitViewContainer.body(children:)()
{
}

void static _SplitViewContainer._viewListOptions.getter()
{
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in HSplitView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for HSplitView<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in HSplitView<A>()
{
  return &protocol witness table for HSplitView<A>;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveView.InternalBody : View in VSplitView<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t instantiation function for generic protocol witness table for VSplitView<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

_UNKNOWN **base witness table accessor for View in VSplitView<A>()
{
  return &protocol witness table for VSplitView<A>;
}

unint64_t instantiation function for generic protocol witness table for _SplitViewContainer(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer()
{
  unint64_t result = lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer;
  if (!lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer;
  if (!lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _SplitViewContainer and conformance _SplitViewContainer);
  }
  return result;
}

uint64_t associated type witness table accessor for _VariadicView_ViewRoot.Body : View in _SplitViewContainer()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t protocol witness for static _VariadicView_ViewRoot._makeViewList(root:inputs:body:) in conformance _SplitViewContainer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = lazy protocol witness table accessor for type _SplitViewContainer and conformance _SplitViewContainer();

  return MEMORY[0x1F40FD028](a1, a2, a3, a4, a5, v10);
}

uint64_t type metadata completion function for HSplitView()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for HSplitView(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unsigned int v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57 > 0x18)
  {
    uint64_t v9 = *a2;
    *unsigned int v4 = *a2;
    unsigned int v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v10 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v11 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    if ((*(void *)(v11 + 32) >> 1) + 1 > 0x80000001)
    {
      long long v18 = *(_OWORD *)v11;
      long long v19 = *(_OWORD *)(v11 + 16);
      long long v20 = *(_OWORD *)(v11 + 32);
      *(_OWORD *)(v10 + 41) = *(_OWORD *)(v11 + 41);
      *(_OWORD *)(v10 + 16) = v19;
      *(_OWORD *)(v10 + 32) = v20;
      *(_OWORD *)unint64_t v10 = v18;
    }
    else
    {
      uint64_t v12 = *(void *)v11;
      uint64_t v13 = *(void *)(v11 + 8);
      char v14 = *(unsigned char *)(v11 + 17);
      unsigned __int8 v15 = *(unsigned char *)(v11 + 16);
      outlined copy of StateOrBinding<Bool>(*(void *)v11, v13, v15, v14);
      *(void *)unint64_t v10 = v12;
      *(void *)(v10 + 8) = v13;
      *(unsigned char *)(v10 + 16) = v15;
      *(unsigned char *)(v10 + 17) = v14;
      long long v16 = *(_OWORD *)(v11 + 24);
      long long v17 = *(_OWORD *)(v11 + 40);
      *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
      *(_OWORD *)(v10 + 40) = v17;
      *(_OWORD *)(v10 + 24) = v16;
    }
  }
  return v4;
}

uint64_t destroy for HSplitView(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  uint64_t result = (*(uint64_t (**)(void))v3)();
  unint64_t v5 = (a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  if ((*(void *)(v5 + 32) >> 1) + 1 <= 0x80000001)
  {
    uint64_t v6 = *(void *)v5;
    uint64_t v7 = *(void *)(v5 + 8);
    char v8 = *(unsigned char *)(v5 + 17);
    uint64_t v9 = *(unsigned __int8 *)(v5 + 16);
    return outlined consume of StateOrBinding<Bool>(v6, v7, v9, v8);
  }
  return result;
}

uint64_t initializeWithCopy for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if ((*(void *)(v8 + 32) >> 1) + 1 > 0x80000001)
  {
    long long v15 = *(_OWORD *)v8;
    long long v16 = *(_OWORD *)(v8 + 16);
    long long v17 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    *(_OWORD *)(v7 + 16) = v16;
    *(_OWORD *)(v7 + 32) = v17;
    *(_OWORD *)unint64_t v7 = v15;
  }
  else
  {
    uint64_t v9 = *(void *)v8;
    uint64_t v10 = *(void *)(v8 + 8);
    char v11 = *(unsigned char *)(v8 + 17);
    unsigned __int8 v12 = *(unsigned char *)(v8 + 16);
    outlined copy of StateOrBinding<Bool>(*(void *)v8, v10, v12, v11);
    *(void *)unint64_t v7 = v9;
    *(void *)(v7 + 8) = v10;
    *(unsigned char *)(v7 + 16) = v12;
    *(unsigned char *)(v7 + 17) = v11;
    long long v13 = *(_OWORD *)(v8 + 24);
    long long v14 = *(_OWORD *)(v8 + 40);
    *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
    *(_OWORD *)(v7 + 40) = v14;
    *(_OWORD *)(v7 + 24) = v13;
  }
  return a1;
}

uint64_t assignWithCopy for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v9 = (*(void *)(v8 + 32) >> 1) + 1;
  if ((*(void *)(v7 + 32) >> 1) + 1 >= 0x80000002)
  {
    if (v9 < 0x80000002)
    {
      uint64_t v18 = *(void *)v8;
      uint64_t v19 = *(void *)(v8 + 8);
      char v20 = *(unsigned char *)(v8 + 17);
      unsigned __int8 v21 = *(unsigned char *)(v8 + 16);
      outlined copy of StateOrBinding<Bool>(*(void *)v8, v19, v21, v20);
      *(void *)unint64_t v7 = v18;
      *(void *)(v7 + 8) = v19;
      *(unsigned char *)(v7 + 16) = v21;
      *(unsigned char *)(v7 + 17) = v20;
      goto LABEL_6;
    }
LABEL_8:
    long long v24 = *(_OWORD *)v8;
    long long v25 = *(_OWORD *)(v8 + 16);
    long long v26 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    *(_OWORD *)(v7 + 16) = v25;
    *(_OWORD *)(v7 + 32) = v26;
    *(_OWORD *)unint64_t v7 = v24;
    return a1;
  }
  if (v9 >= 0x80000002)
  {
    outlined consume of StateOrBinding<Bool>(*(void *)v7, *(void *)(v7 + 8), *(unsigned __int8 *)(v7 + 16), *(unsigned char *)(v7 + 17));
    goto LABEL_8;
  }
  uint64_t v10 = *(void *)v8;
  uint64_t v11 = *(void *)(v8 + 8);
  char v12 = *(unsigned char *)(v8 + 17);
  unsigned __int8 v13 = *(unsigned char *)(v8 + 16);
  outlined copy of StateOrBinding<Bool>(*(void *)v8, v11, v13, v12);
  uint64_t v14 = *(void *)v7;
  uint64_t v15 = *(void *)(v7 + 8);
  char v16 = *(unsigned char *)(v7 + 17);
  *(void *)unint64_t v7 = v10;
  *(void *)(v7 + 8) = v11;
  uint64_t v17 = *(unsigned __int8 *)(v7 + 16);
  *(unsigned char *)(v7 + 16) = v13;
  *(unsigned char *)(v7 + 17) = v12;
  outlined consume of StateOrBinding<Bool>(v14, v15, v17, v16);
LABEL_6:
  long long v22 = *(_OWORD *)(v8 + 24);
  long long v23 = *(_OWORD *)(v8 + 40);
  *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
  *(_OWORD *)(v7 + 24) = v22;
  *(_OWORD *)(v7 + 40) = v23;
  return a1;
}

uint64_t initializeWithTake for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 32) + 7;
  unint64_t v7 = (_OWORD *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  unint64_t v8 = (long long *)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  long long v10 = v8[1];
  long long v9 = v8[2];
  long long v11 = *v8;
  *(_OWORD *)((char *)v7 + 41) = *(long long *)((char *)v8 + 41);
  v7[1] = v10;
  _OWORD v7[2] = v9;
  *unint64_t v7 = v11;
  return a1;
}

uint64_t assignWithTake for HSplitView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  unint64_t v7 = (v6 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v8 = (v6 + a2) & 0xFFFFFFFFFFFFFFF8;
  if ((*(void *)(v7 + 32) >> 1) + 1 >= 0x80000002) {
    goto LABEL_5;
  }
  if ((*(void *)(v8 + 32) >> 1) + 1 >= 0x80000002)
  {
    outlined consume of StateOrBinding<Bool>(*(void *)v7, *(void *)(v7 + 8), *(unsigned __int8 *)(v7 + 16), *(unsigned char *)(v7 + 17));
LABEL_5:
    long long v17 = *(_OWORD *)v8;
    long long v18 = *(_OWORD *)(v8 + 16);
    long long v19 = *(_OWORD *)(v8 + 32);
    *(_OWORD *)(v7 + 41) = *(_OWORD *)(v8 + 41);
    *(_OWORD *)(v7 + 16) = v18;
    *(_OWORD *)(v7 + 32) = v19;
    *(_OWORD *)unint64_t v7 = v17;
    return a1;
  }
  char v9 = *(unsigned char *)(v8 + 16);
  char v10 = *(unsigned char *)(v8 + 17);
  uint64_t v11 = *(void *)v7;
  uint64_t v12 = *(void *)(v7 + 8);
  char v13 = *(unsigned char *)(v7 + 17);
  *(_OWORD *)unint64_t v7 = *(_OWORD *)v8;
  uint64_t v14 = *(unsigned __int8 *)(v7 + 16);
  *(unsigned char *)(v7 + 16) = v9;
  *(unsigned char *)(v7 + 17) = v10;
  outlined consume of StateOrBinding<Bool>(v11, v12, v14, v13);
  long long v15 = *(_OWORD *)(v8 + 24);
  long long v16 = *(_OWORD *)(v8 + 40);
  *(unsigned char *)(v7 + 56) = *(unsigned char *)(v8 + 56);
  *(_OWORD *)(v7 + 24) = v15;
  *(_OWORD *)(v7 + 40) = v16;
  return a1;
}

uint64_t getEnumTagSinglePayload for HSplitView(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFD) {
    unsigned int v7 = 2147483645;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D7F9D0);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((v6 + 7) & 0xFFFFFFF8) == 0xFFFFFFC8) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFD) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  uint64_t v17 = *(void *)(((unint64_t)&a1[v6 + 7] & 0xFFFFFFFFFFFFFFF8) + 32) >> 1;
  int v18 = -2 - v17;
  if (-2 - (int)v17 < 0) {
    int v18 = -1;
  }
  if (v17 <= 0x80000000) {
    unsigned int v19 = -1;
  }
  else {
    unsigned int v19 = v18;
  }
  if (v19 + 1 >= 2) {
    return v19;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for HSplitView(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFD) {
    unsigned int v8 = 2147483645;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 57;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 < 0x7FFFFFFD)
            {
              unint64_t v22 = (unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8;
              if (a2 > 0x7FFFFFFD)
              {
                double result = 0.0;
                *(_OWORD *)(v22 + 41) = 0u;
                *(_OWORD *)(v22 + 16) = 0u;
                *(_OWORD *)(v22 + 32) = 0u;
                *(_OWORD *)unint64_t v22 = 0u;
                *(_DWORD *)unint64_t v22 = a2 - 2147483646;
              }
              else
              {
                *(void *)(v22 + 24) = 0;
                *(void *)(v22 + 32) = 2 * (-2 - a2);
                *(void *)(v22 + 40) = 0;
                *(void *)(v22 + 48) = 0;
                *(unsigned char *)(v22 + 56) = 0;
              }
            }
            else
            {
              unsigned __int8 v21 = *(void (**)(void))(v6 + 56);
              v21();
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = ~v8 + a2;
  unsigned int v17 = (~(_BYTE)v8 + a2);
  if (v10 < 4) {
    int v18 = (v16 >> v11) + 1;
  }
  else {
    int v18 = 1;
  }
  if (v10 >= 4) {
    unsigned int v19 = v16;
  }
  else {
    unsigned int v19 = v17;
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v19;
  }
  else {
    *(_DWORD *)a1 = v19;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v18;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v18;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187D7FC2CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v18;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t type metadata accessor for HSplitView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t getEnumTagSinglePayload for VSplitView(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for VSplitView(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D7FFE0);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unsigned int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for VSplitView()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for _SplitViewContainer(uint64_t result)
{
  if (*(void *)(result + 40) >> 1 != 4294967294 || *(unsigned __int8 *)(result + 64) >= 2u) {
    return outlined consume of StateOrBinding<Bool>(*(void *)(result + 8), *(void *)(result + 16), *(unsigned __int8 *)(result + 24), *(unsigned char *)(result + 25));
  }
  return result;
}

uint64_t initializeWithCopy for _SplitViewContainer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  if (*(void *)(a2 + 40) >> 1 != 4294967294 || *(unsigned __int8 *)(a2 + 64) >= 2u)
  {
    uint64_t v5 = *(void *)(a2 + 8);
    uint64_t v6 = *(void *)(a2 + 16);
    char v7 = *(unsigned char *)(a2 + 25);
    unsigned __int8 v8 = *(unsigned char *)(a2 + 24);
    outlined copy of StateOrBinding<Bool>(v5, v6, v8, v7);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = v6;
    *(unsigned char *)(a1 + 24) = v8;
    *(unsigned char *)(a1 + 25) = v7;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a1 + 24) = v10;
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
  }
  return a1;
}

uint64_t assignWithCopy for _SplitViewContainer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = (_OWORD *)(a1 + 8);
  uint64_t v5 = (long long *)(a2 + 8);
  BOOL v7 = *(void *)(a2 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a2 + 64) < 2u;
  if (*(void *)(a1 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a1 + 64) < 2u)
  {
    if (v7)
    {
      long long v12 = *v5;
      long long v13 = *(_OWORD *)(a2 + 24);
      long long v14 = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 49) = *(_OWORD *)(a2 + 49);
      *(_OWORD *)(a1 + 24) = v13;
      *(_OWORD *)(a1 + 40) = v14;
      *uint64_t v4 = v12;
      return a1;
    }
    uint64_t v23 = *(void *)(a2 + 8);
    uint64_t v24 = *(void *)(a2 + 16);
    char v25 = *(unsigned char *)(a2 + 25);
    unsigned __int8 v26 = *(unsigned char *)(a2 + 24);
    outlined copy of StateOrBinding<Bool>(v23, v24, v26, v25);
    *(void *)(a1 + 8) = v23;
    *(void *)(a1 + 16) = v24;
    *(unsigned char *)(a1 + 24) = v26;
    *(unsigned char *)(a1 + 25) = v25;
LABEL_18:
    long long v27 = *(_OWORD *)(a2 + 32);
    long long v28 = *(_OWORD *)(a2 + 48);
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
    *(_OWORD *)(a1 + 32) = v27;
    *(_OWORD *)(a1 + 48) = v28;
    return a1;
  }
  if (!v7)
  {
    uint64_t v15 = *(void *)(a2 + 8);
    uint64_t v16 = *(void *)(a2 + 16);
    char v17 = *(unsigned char *)(a2 + 25);
    unsigned __int8 v18 = *(unsigned char *)(a2 + 24);
    outlined copy of StateOrBinding<Bool>(v15, v16, v18, v17);
    uint64_t v19 = *(void *)(a1 + 8);
    uint64_t v20 = *(void *)(a1 + 16);
    char v21 = *(unsigned char *)(a1 + 25);
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = v16;
    uint64_t v22 = *(unsigned __int8 *)(a1 + 24);
    *(unsigned char *)(a1 + 24) = v18;
    *(unsigned char *)(a1 + 25) = v17;
    outlined consume of StateOrBinding<Bool>(v19, v20, v22, v21);
    goto LABEL_18;
  }
  outlined destroy of InspectorState(a1 + 8);
  long long v10 = v5[1];
  long long v9 = v5[2];
  long long v11 = *v5;
  *(_OWORD *)((char *)v4 + 41) = *(long long *)((char *)v5 + 41);
  v4[1] = v10;
  _OWORD v4[2] = v9;
  *uint64_t v4 = v11;
  return a1;
}

uint64_t outlined destroy of InspectorState(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for _SplitViewContainer(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v3 = (_OWORD *)(a1 + 8);
  uint64_t v4 = (_OWORD *)(a2 + 8);
  if (*(void *)(a1 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a1 + 64) < 2u) {
    goto LABEL_12;
  }
  if (*(void *)(a2 + 40) >> 1 == 4294967294 && *(unsigned __int8 *)(a2 + 64) < 2u)
  {
    outlined destroy of InspectorState(a1 + 8);
LABEL_12:
    long long v15 = v4[1];
    *uint64_t v3 = *v4;
    v3[1] = v15;
    uint64_t v3[2] = v4[2];
    *(_OWORD *)((char *)v3 + 41) = *(_OWORD *)((char *)v4 + 41);
    return a1;
  }
  char v8 = *(unsigned char *)(a2 + 24);
  char v9 = *(unsigned char *)(a2 + 25);
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  char v12 = *(unsigned char *)(a1 + 25);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 24);
  *(unsigned char *)(a1 + 24) = v8;
  *(unsigned char *)(a1 + 25) = v9;
  outlined consume of StateOrBinding<Bool>(v10, v11, v13, v12);
  long long v14 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v14;
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for _SplitViewContainer(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  uint64_t v3 = *(void *)(a1 + 40) >> 1;
  if (v3 <= 0x80000000) {
    int v4 = -1;
  }
  else {
    int v4 = ((-2 - v3) & ~((-2 - (int)v3) >> 31)) - 1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for _SplitViewContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)double result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 65) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 65) = 0;
    }
    if (a2)
    {
      *(void *)(result + 32) = 0;
      *(void *)(result + 40) = 2 * (-2 - a2);
      *(void *)(result + 48) = 0;
      *(void *)(result + 56) = 0;
      *(unsigned char *)(result + 64) = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for _SplitViewContainer()
{
  return &type metadata for _SplitViewContainer;
}

uint64_t sub_187D80448()
{
  return swift_getWitnessTable();
}

void type metadata accessor for StyleContextWriter<ContainerStyleContext>()
{
  if (!lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>)
  {
    unint64_t v0 = type metadata accessor for StyleContextWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<ContainerStyleContext>);
    }
  }
}

void VSplitView.init(content:)()
{
}

void __swiftcall PullDownMenuButtonStyle.init()()
{
}

void PullDownMenuButtonStyle._body(configuration:)()
{
}

void __swiftcall BorderlessPullDownMenuButtonStyle.init()()
{
}

void BorderlessPullDownMenuButtonStyle._body(configuration:)()
{
}

void __swiftcall BorderlessButtonMenuButtonStyle.init()()
{
}

void BorderlessButtonMenuButtonStyle._body(configuration:)()
{
}

void __swiftcall _TexturedPullDownMenuButtonStyle.init()()
{
}

void _TexturedPullDownMenuButtonStyle._body(configuration:)()
{
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in PullDownMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in BorderlessPullDownMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in BorderlessButtonMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for MenuButtonStyle._Body : View in _TexturedPullDownMenuButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for PullDownMenuButtonStyle()
{
  return &type metadata for PullDownMenuButtonStyle;
}

ValueMetadata *type metadata accessor for BorderlessPullDownMenuButtonStyle()
{
  return &type metadata for BorderlessPullDownMenuButtonStyle;
}

ValueMetadata *type metadata accessor for BorderlessButtonMenuButtonStyle()
{
  return &type metadata for BorderlessButtonMenuButtonStyle;
}

ValueMetadata *type metadata accessor for _TexturedPullDownMenuButtonStyle()
{
  return &type metadata for _TexturedPullDownMenuButtonStyle;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderedButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle);
    lazy protocol witness table accessor for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>(&lazy protocol witness table cache variable for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>()
{
  if (!lazy cache variable for type metadata for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>)
  {
    unint64_t v0 = type metadata accessor for Menu();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type BorderedButtonMenuStyle and conformance BorderedButtonMenuStyle);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
    lazy protocol witness table accessor for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>(&lazy protocol witness table cache variable for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(uint64_t a1, unint64_t *a2, unint64_t *a3, void (*a4)(void))
{
  if (!*a2)
  {
    type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>();
    type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(255, a3, a4);
    unint64_t v7 = type metadata accessor for ModifiedContent();
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>();
    lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>> and conformance <> ModifiedContent<A, B>();
    lazy protocol witness table accessor for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Visibility> and conformance _EnvironmentKeyWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<BorderlessButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type BorderlessButtonMenuStyle and conformance BorderlessButtonMenuStyle);
    type metadata accessor for _EnvironmentKeyWritingModifier<Visibility>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderlessButtonMenuStyle>>, _EnvironmentKeyWritingModifier<Visibility>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<BorderedButtonMenuStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>>, &lazy cache variable for type metadata for MenuStyleModifier<TexturedButtonMenuStyle>, (void (*)(void))lazy protocol witness table accessor for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle);
    lazy protocol witness table accessor for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>(&lazy protocol witness table cache variable for type Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content> and conformance Menu<A, B>, (void (*)(uint64_t))type metadata accessor for Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Menu<_MenuButtonStyleConfiguration.Label, _MenuButtonStyleConfiguration.Content>, MenuStyleModifier<TexturedButtonMenuStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for MenuStyleModifier<BorderedButtonMenuStyle>(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = type metadata accessor for MenuStyleModifier();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle;
  if (!lazy protocol witness table cache variable for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TexturedButtonMenuStyle and conformance TexturedButtonMenuStyle);
  }
  return result;
}

void ContainerBackgroundBridge.background.didset(void *a1, char a2)
{
  uint64_t v3 = v2;
  unint64_t v4 = *(void **)(v2 + 128);
  if (v4)
  {
    id v6 = v4;
    if (a1)
    {
      _s7SwiftUI15ModifiedContentVyAA7AnyViewVAA30_SafeAreaRegionsIgnoringLayoutVGMaTm_0(0, (unint64_t *)&lazy cache variable for type metadata for _UIHostingView<AnyView>, MEMORY[0x1E4F41618], MEMORY[0x1E4F41610], (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for _UIHostingView);
      id v7 = a1;
      id v8 = v6;
      char v9 = static NSObject.== infix(_:_:)();

      if (v9 & 1) != 0 && *(void *)(v3 + 128) && ((((a2 & 1) == 0) ^ *(unsigned __int8 *)(v3 + 136))) {
        return;
      }
    }
    else
    {
    }
    goto LABEL_12;
  }
  if (a1)
  {
LABEL_12:
    if (MEMORY[0x18C119DF0](v3 + 24))
    {
      uint64_t v11 = *(void *)(v3 + 32);
      uint64_t ObjectType = swift_getObjectType();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(ObjectType, v11);
      swift_unknownObjectRelease();
    }
    return;
  }

  id v10 = 0;
}

uint64_t sub_187D80EA4()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t outlined copy of ContainerBackgroundValue?(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 1)
  {
    outlined copy of ContainerBackgroundValue.Content(result, a2);
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t sub_187D80F40()
{
  swift_weakDestroy();

  return swift_deallocObject();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in TextEditingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t associated type witness table accessor for Commands.Body : Commands in TextFormattingCommands()
{
  return swift_getOpaqueTypeConformance2();
}

ValueMetadata *type metadata accessor for TextEditingCommands()
{
  return &type metadata for TextEditingCommands;
}

ValueMetadata *type metadata accessor for TextFormattingCommands()
{
  return &type metadata for TextFormattingCommands;
}

_UNKNOWN **sub_187D80FE0()
{
  return &protocol witness table for EmptyCommands;
}

uint64_t getEnumTagSinglePayload for PlatformItemsReader(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 32) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 16;
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v11 = (v9 & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 32) - 8) + 64) + (v9 & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v6);
      }
      uint64_t v17 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_23;
  }
LABEL_15:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for PlatformItemsReader(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 32) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 32) - 8) + 64);
  size_t v11 = v10 + ((v9 + 16) & ~(v9 | 7));
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x187D814ACLL);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          uint64_t v20 = (unsigned char *)((unint64_t)&a1[(v9 | 7) + 16] & ~(v9 | 7));
          if (v7 >= a2)
          {
            uint64_t v24 = *(void (**)(unint64_t))(v6 + 56);
            v24((unint64_t)&v20[v9 + 16] & ~v9);
          }
          else
          {
            if (v10 <= 3) {
              int v21 = ~(-1 << (8 * v10));
            }
            else {
              int v21 = -1;
            }
            if (v10)
            {
              int v22 = v21 & (~v7 + a2);
              if (v10 <= 3) {
                int v23 = v10;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v10);
              switch(v23)
              {
                case 2:
                  *(_WORD *)uint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)uint64_t v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)uint64_t v20 = v22;
                  break;
                default:
                  *uint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *(void *)a1 = v19;
        }
      }
      return;
  }
}

uint64_t type metadata accessor for PlatformItemsReader()
{
  return swift_getGenericMetadata();
}

uint64_t getEnumTagSinglePayload for PlatformItemTraitWriter(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for PlatformItemTraitWriter(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D81870);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        int v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for PlatformItemTraitWriter()
{
  return swift_getGenericMetadata();
}

_UNKNOWN **base witness table accessor for ViewModifier in PlatformItemTraitWriter<A, B, C>()
{
  return &protocol witness table for PlatformItemTraitWriter<A, B, C>;
}

_UNKNOWN **base witness table accessor for View in PlatformItemsReader<A, B, C>()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

uint64_t View.platformItemTrait<A, B, C>(for:strategy:source:)@<X0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v24 = a7;
  uint64_t v22 = a2;
  uint64_t v23 = a3;
  uint64_t v21 = a1;
  uint64_t v25 = a5;
  uint64_t v26 = a6;
  uint64_t v27 = a4;
  uint64_t v28 = a10;
  uint64_t v29 = a11;
  uint64_t v30 = a9;
  uint64_t v14 = type metadata accessor for PlatformItemTraitWriter();
  uint64_t v15 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unsigned int v17 = (char *)&v20 - v16;
  uint64_t v18 = v23;
  closure #1 in View.platformItemTrait<A, B, C>(for:strategy:source:)(v21, v22, v23, a4, a5, a6);
  MEMORY[0x18C113660](v17, v18, v14, a8);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v17, v14);
}

uint64_t PlatformItemsReader.init(for:content:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, char *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v24 = a4;
  uint64_t v25 = a5;
  uint64_t v23 = a2;
  uint64_t v26 = a1;
  uint64_t v27 = type metadata accessor for ZStack();
  uint64_t v17 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v19 = (char *)&v22 - v18;
  *(void *)a9 = v23;
  *((void *)a9 + 1) = a3;
  uint64_t v28 = a6;
  uint64_t v29 = a7;
  uint64_t v30 = a8;
  uint64_t v31 = a10;
  uint64_t v32 = a11;
  uint64_t v33 = a12;
  uint64_t v34 = v24;
  uint64_t v35 = v25;
  swift_retain();
  static Alignment.center.getter();
  ZStack.init(alignment:content:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(v26, a6);
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v38 = a8;
  uint64_t v39 = a10;
  uint64_t v40 = a11;
  uint64_t v41 = a12;
  uint64_t v20 = type metadata accessor for PlatformItemsReader();
  return (*(uint64_t (**)(char *, char *, uint64_t))(v17 + 32))(&a9[*(int *)(v20 + 68)], v19, v27);
}

uint64_t View.platformItemLabelTrait<A, B>(for:_:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v18 = a3;
  uint64_t v19 = a4;
  uint64_t v20 = a5;
  uint64_t v21 = a6;
  uint64_t v22 = a7;
  uint64_t v23 = a9;
  uint64_t v24 = a1;
  uint64_t v25 = a2;
  type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v30 = a9;
  uint64_t v31 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v29 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v26 = swift_getWitnessTable();
  uint64_t v27 = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  uint64_t v15 = swift_getWitnessTable();
  return View.platformItemTrait<A, B, C>(for:strategy:source:)((uint64_t)partial apply for closure #1 in View.platformItemLabelTrait<A, B>(for:_:), (uint64_t)v17, a3, a4, (uint64_t)&type metadata for LabelPlatformItemsStrategy, v14, a8, a6, a7, (uint64_t)&protocol witness table for LabelPlatformItemsStrategy, v15);
}

uint64_t closure #1 in PlatformItemsReader.init(for:content:source:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  size_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v10 = MEMORY[0x1F4188790](v9);
  unsigned int v12 = (char *)&v16 - v11;
  v13(v10);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v6 + 8);
  v14(v8, a5);
  static ViewBuilder.buildExpression<A>(_:)(v12);
  return ((uint64_t (*)(char *, uint64_t))v14)(v12, a5);
}

uint64_t static PlatformItemsReader._makeView(view:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v58 = a9;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness - 8);
  char v55 = (char *)v42 - v18;
  uint64_t v91 = a3;
  uint64_t v92 = a4;
  uint64_t v93 = a5;
  *(void *)&long long v94 = a6;
  *((void *)&v94 + 1) = a7;
  *(void *)&long long v95 = a8;
  uint64_t v19 = type metadata accessor for PlatformItemsReader.Child();
  uint64_t v56 = *(void *)(v19 - 8);
  uint64_t v57 = v19;
  MEMORY[0x1F4188790](v19);
  uint64_t v54 = (char *)v42 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v53 = (_DWORD *)((char *)v42 - v22);
  int v48 = *a1;
  uint64_t v23 = *a2;
  int v24 = *((_DWORD *)a2 + 2);
  uint64_t v67 = a2[2];
  uint64_t v68 = v23;
  unsigned int v25 = *((_DWORD *)a2 + 6);
  unsigned int v65 = *((_DWORD *)a2 + 7);
  unsigned int v66 = v25;
  unsigned int v26 = *((_DWORD *)a2 + 8);
  unsigned int v63 = *((_DWORD *)a2 + 9);
  unsigned int v64 = v26;
  uint64_t v27 = a2[5];
  uint64_t v61 = a2[6];
  uint64_t v62 = v27;
  LODWORD(v27) = *((_DWORD *)a2 + 14);
  unsigned int v59 = *((_DWORD *)a2 + 15);
  unsigned int v60 = v27;
  LODWORD(v27) = *((_DWORD *)a2 + 16);
  unsigned int v72 = *((_DWORD *)a2 + 17);
  unsigned int v73 = v27;
  LODWORD(v27) = *((_DWORD *)a2 + 18);
  unsigned int v70 = *((_DWORD *)a2 + 19);
  unsigned int v71 = v27;
  int v69 = *((_DWORD *)a2 + 20);
  uint64_t v44 = a6;
  uint64_t v45 = a3;
  uint64_t v74 = a3;
  uint64_t v75 = a4;
  uint64_t v51 = a7;
  uint64_t v52 = a4;
  uint64_t v76 = a5;
  uint64_t v77 = a6;
  uint64_t v78 = a7;
  uint64_t v79 = a8;
  LODWORD(v82) = v48;
  uint64_t v91 = a3;
  uint64_t v92 = a4;
  uint64_t v93 = a5;
  *(void *)&long long v94 = a6;
  uint64_t v49 = a8;
  uint64_t v50 = a5;
  *((void *)&v94 + 1) = a7;
  *(void *)&long long v95 = a8;
  type metadata accessor for PlatformItemsReader();
  uint64_t v46 = type metadata accessor for _GraphValue();
  uint64_t v43 = type metadata accessor for ZStack();
  _GraphValue.subscript.getter();
  uint64_t v91 = v23;
  int v47 = v24;
  LODWORD(v92) = v24;
  uint64_t v28 = v67;
  uint64_t v93 = v67;
  LODWORD(a4) = v65;
  LODWORD(a5) = v66;
  *(void *)&long long v94 = __PAIR64__(v65, v66);
  LODWORD(v23) = v63;
  LODWORD(a3) = v64;
  *((void *)&v94 + 1) = __PAIR64__(v63, v64);
  uint64_t v29 = v62;
  *(void *)&long long v95 = v62;
  *((void *)&v95 + 1) = v61;
  *(void *)&long long v96 = __PAIR64__(v59, v60);
  *((void *)&v96 + 1) = __PAIR64__(v72, v73);
  unint64_t v97 = __PAIR64__(v70, v71);
  int v98 = v69;
  PreferenceKeys.init()();
  uint64_t v80 = v82;
  char v90 = 0;
  v42[1] = _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  uint64_t v82 = v68;
  LODWORD(v83) = v24;
  uint64_t v84 = v28;
  *(void *)&long long v85 = __PAIR64__(a4, a5);
  *((void *)&v85 + 1) = __PAIR64__(v23, a3);
  uint64_t v30 = v61;
  *(void *)&long long v86 = v29;
  *((void *)&v86 + 1) = v61;
  LODWORD(v28) = v59;
  LODWORD(a5) = v60;
  *(void *)&long long v87 = __PAIR64__(v59, v60);
  *((void *)&v87 + 1) = __PAIR64__(v72, v73);
  unint64_t v88 = __PAIR64__(v70, v71);
  int v89 = v69;
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferencesInputs.init(hostKeys:)();
  uint64_t v31 = v82;
  LODWORD(a7) = v83;
  swift_bridgeObjectRelease();
  *((void *)&v95 + 1) = v31;
  LODWORD(v96) = a7;
  uint64_t v32 = v44;
  uint64_t v33 = v45;
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48))(&v91, v45, v44);
  long long v85 = v94;
  uint64_t v82 = v91;
  LODWORD(v83) = v92;
  uint64_t v84 = v93;
  long long v86 = v95;
  long long v87 = v96;
  unint64_t v88 = v97;
  int v89 = v98;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v82 = v80;
  uint64_t v83 = v81;
  LODWORD(a7) = (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v32 + 56))(&v82, v33, v32);
  swift_bridgeObjectRelease();
  LODWORD(v82) = v48;
  _GraphValue.value.getter();
  LODWORD(a4) = AGGraphCreateOffsetAttribute2();
  uint64_t v34 = *(void (**)(uint64_t))(v32 + 16);
  uint64_t v35 = (uint64_t)v55;
  v34(v33);
  uint64_t v36 = v53;
  PlatformItemsReader.Child.init(content:viewContent:oldContent:)(a7, a4, v35, v53);
  uint64_t v37 = v56;
  uint64_t v38 = v36;
  uint64_t v39 = v36;
  uint64_t v40 = v57;
  (*(void (**)(char *, _DWORD *, uint64_t))(v56 + 16))(v54, v38, v57);
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  uint64_t v82 = v68;
  LODWORD(v83) = v47;
  uint64_t v84 = v67;
  *(void *)&long long v85 = __PAIR64__(v65, v66);
  *((void *)&v85 + 1) = __PAIR64__(v63, v64);
  *(void *)&long long v86 = v62;
  *((void *)&v86 + 1) = v30;
  *(void *)&long long v87 = __PAIR64__(v28, a5);
  *((void *)&v87 + 1) = __PAIR64__(v72, v73);
  unint64_t v88 = __PAIR64__(v70, v71);
  int v89 = v69;
  static View.makeDebuggableView(view:inputs:)();
  (*(void (**)(_DWORD *, uint64_t))(v37 + 8))(v39, v40);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t closure #1 in static PlatformItemsReader._makeView(view:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v15 = a2;
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  uint64_t v19 = a6;
  uint64_t v20 = a7;
  uint64_t v8 = type metadata accessor for PlatformItemsReader();
  uint64_t v9 = a1 + *(int *)(v8 + 68);
  void v13[2] = v8;
  uint64_t v14 = type metadata accessor for ZStack();
  uint64_t v10 = type metadata accessor for PointerOffset();
  _ss17withUnsafePointer2to_q0_xz_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v9, (uint64_t)closure #1 in static PointerOffset.of(_:)partial apply, (uint64_t)v13, v14, MEMORY[0x1E4FBC248], v10, MEMORY[0x1E4FBC278], v11);
  return v15;
}

uint64_t PlatformItemsReader.Child.init(content:viewContent:oldContent:)@<X0>(int a1@<W0>, int a2@<W1>, uint64_t a3@<X2>, _DWORD *a4@<X8>)
{
  *a4 = a1;
  a4[1] = a2;
  unsigned int v5 = (char *)a4 + *(int *)(type metadata accessor for PlatformItemsReader.Child() + 72);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 32))(v5, a3, AssociatedTypeWitness);
}

uint64_t PlatformItemsReader.Child.updateValue()(uint64_t a1)
{
  uint64_t v66 = *MEMORY[0x1E4F143B8];
  uint64_t v60 = a1;
  uint64_t v56 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  char v55 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v4 = *(void *)(v3 + 32);
  uint64_t v58 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v5);
  uint64_t v57 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = *(void *)(v7 + 48);
  uint64_t v9 = *(void *)(v7 + 24);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  MEMORY[0x1F4188790](TupleTypeMetadata2);
  int v13 = (char *)&v50 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = *(void *)(AssociatedTypeWitness - 8);
  MEMORY[0x1F4188790](v18);
  unsigned int v63 = (char *)&v50 - v19;
  uint64_t v65 = v4;
  swift_getFunctionTypeMetadata1();
  uint64_t Value = (uint64_t *)AGGraphGetValue();
  uint64_t v21 = *Value;
  uint64_t v22 = Value[1];
  uint64_t v53 = v23;
  uint64_t v54 = v21;
  uint64_t v62 = *(int *)(TupleTypeMetadata2 + 48);
  unsigned int v64 = v1;
  LODWORD(v21) = *(_DWORD *)v1;
  int v24 = *MEMORY[0x1E4F4E7A0];
  uint64_t v61 = v17;
  uint64_t v59 = v22;
  if (v21 == v24)
  {
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    v31(v9, v8);
    int v30 = 0;
    uint64_t v29 = *(void (**)(void))(v17 + 32);
  }
  else
  {
    uint64_t v25 = AGGraphGetValue();
    char v27 = v26;
    (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v13, v25, AssociatedTypeWitness);
    v13[v62] = v27 & 1;
    uint64_t v28 = *(int *)(TupleTypeMetadata2 + 48);
    uint64_t v29 = *(void (**)(void))(v17 + 32);
    ((void (*)(char *, char *, uint64_t))v29)(v16, v13, AssociatedTypeWitness);
    int v30 = v13[v28];
    swift_retain();
  }
  uint64_t v32 = v63;
  v16[v62] = v30;
  uint64_t v62 = AssociatedTypeWitness;
  uint64_t v33 = (uint64_t)v32;
  v29();
  uint64_t v34 = (void *)v60;
  uint64_t v35 = (uint64_t)v64;
  unsigned __int8 v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 40))(&v64[*(int *)(v60 + 72)], v33, v9, v8);
  uint64_t v37 = v65;
  if (!AGGraphGetOutputValue() || ((v30 != 0) & v36) != 0 || (v53 & 1) != 0)
  {
    uint64_t v38 = v55;
    uint64_t v39 = v56;
    uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, void *))(v56 + 16))(v55, v35, v34);
    uint64_t v50 = (uint64_t)&v50;
    MEMORY[0x1F4188790](v40);
    *(&v50 - 10) = v9;
    *(&v50 - 9) = v37;
    uint64_t v52 = v34[4];
    uint64_t v53 = v9;
    *(&v50 - 8) = v52;
    *(&v50 - 7) = v8;
    uint64_t v41 = v34[7];
    uint64_t v51 = v34[6];
    *(&v50 - 6) = v51;
    *(&v50 - 5) = v41;
    uint64_t v42 = v59;
    *(&v50 - 4) = v54;
    *(&v50 - 3) = v42;
    *(&v50 - 2) = v33;
    uint64_t WitnessTable = swift_getWitnessTable();
    uint64_t v44 = (uint64_t)v57;
    StatefulRule.withObservation<A>(do:)();
    uint64_t v45 = (*(uint64_t (**)(char *, void *))(v39 + 8))(v38, v34);
    MEMORY[0x1F4188790](v45);
    *(&v50 - 2) = (uint64_t)v34;
    *(&v50 - 1) = WitnessTable;
    uint64_t v46 = v65;
    _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF(v44, (uint64_t)partial apply for closure #1 in StatefulRule.value.setter, (uint64_t)(&v50 - 4), v65, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v47);
    uint64_t v48 = v44;
    uint64_t v33 = (uint64_t)v63;
    uint64_t v35 = (uint64_t)v64;
    (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v48, v46);
  }
  $defer #1 <A, B, C>() in PlatformItemsReader.Child.updateValue()(v35, v33);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 8))(v33, v62);
}

uint64_t $defer #1 <A, B, C>() in PlatformItemsReader.Child.updateValue()(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1 + *(int *)(type metadata accessor for PlatformItemsReader.Child() + 72);
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 24))(v3, a2, AssociatedTypeWitness);
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance PlatformItemsReader<A, B, C>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  return static PlatformItemsReader._makeView(view:inputs:)(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6], a3[7], a4);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance PlatformItemsReader<A, B, C>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance PlatformItemsReader<A, B, C>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance PlatformItemsReader<A, B, C>()
{
}

uint64_t static PlatformItemTraitWriter._makeViewList(modifier:inputs:body:)@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11)
{
  uint64_t v62 = a8;
  uint64_t v63 = a7;
  uint64_t v42 = a6;
  unint64_t v61 = a5;
  uint64_t v57 = a4;
  uint64_t v58 = a3;
  uint64_t v56 = a9;
  uint64_t v60 = a11;
  uint64_t v59 = a10;
  uint64_t v97 = *MEMORY[0x1E4F143B8];
  int v41 = *a1;
  int v11 = *(_DWORD *)(a2 + 8);
  uint64_t v12 = *(void *)(a2 + 16);
  unsigned int v13 = *(_DWORD *)(a2 + 24);
  unsigned int v14 = *(_DWORD *)(a2 + 28);
  unsigned int v15 = *(_DWORD *)(a2 + 32);
  unsigned int v16 = *(_DWORD *)(a2 + 36);
  uint64_t v18 = *(void *)(a2 + 40);
  uint64_t v17 = *(void *)(a2 + 48);
  uint64_t v19 = *(void *)(a2 + 56);
  int v20 = *(_DWORD *)(a2 + 64);
  unint64_t v21 = *(void *)(a2 + 72);
  int v22 = *(unsigned __int8 *)(a2 + 80);
  unint64_t v88 = *(void *)a2;
  int v89 = v11;
  uint64_t v90 = v12;
  *(void *)&long long v91 = __PAIR64__(v14, v13);
  *((void *)&v91 + 1) = __PAIR64__(v16, v15);
  uint64_t v92 = v18;
  *(void *)&long long v93 = v17;
  uint64_t v46 = v19;
  uint64_t v47 = v17;
  *((void *)&v93 + 1) = v19;
  int v45 = v20;
  int v94 = v20;
  unint64_t v95 = v21;
  int v43 = v22;
  char v96 = v22;
  int v54 = v11;
  unsigned int v51 = v14;
  unsigned int v52 = v13;
  unsigned int v49 = v16;
  unsigned int v50 = v15;
  swift_bridgeObjectRetain_n();
  swift_retain_n();
  swift_retain_n();
  swift_bridgeObjectRetain_n();
  _ViewInputs.init(withoutGeometry:)();
  unint64_t v65 = v72;
  LODWORD(v66) = v73;
  uint64_t v67 = v74;
  long long v68 = v75;
  *(_OWORD *)int v69 = v76;
  *(_OWORD *)&v69[16] = v77;
  unint64_t v70 = v78;
  int v71 = v79;
  _ViewInputs.withoutGeometryDependencies.getter();
  unint64_t v44 = v21;
  swift_bridgeObjectRelease();
  uint64_t v48 = v18;
  swift_bridgeObjectRelease();
  uint64_t v53 = v12;
  swift_release();
  unint64_t v55 = v88;
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v23 = *(void *)(v62 + 8);
  (*(void (**)(unint64_t *, unint64_t, uint64_t))(v23 + 48))(&v80, v61, v23);
  LODWORD(v65) = v41;
  type metadata accessor for PlatformItemTraitWriter();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  unint64_t v72 = v80;
  unint64_t v73 = __PAIR64__(HIDWORD(v42), v81);
  uint64_t v74 = v82;
  long long v75 = v83;
  long long v76 = v84;
  long long v77 = v85;
  unint64_t v78 = v86;
  int v79 = v87;
  (*(void (**)(unint64_t *__return_ptr, uint64_t *, unint64_t *, uint64_t, uint64_t))(a10 + 24))(&v65, &v64, &v72, v42, a10);
  unint64_t v72 = v65;
  LODWORD(v73) = v66;
  uint64_t v24 = PreferencesOutputs.subscript.getter();
  if ((v24 & 0x100000000) != 0)
  {
    unsigned int v26 = *MEMORY[0x1E4F4E7A0];
    swift_bridgeObjectRelease();
    unsigned int v25 = v26;
  }
  else
  {
    LODWORD(v72) = v24;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem();
    unsigned int v25 = Attribute.init<A>(body:value:flags:update:)();
    swift_bridgeObjectRelease();
    unsigned int v26 = *MEMORY[0x1E4F4E7A0];
  }
  unint64_t v72 = v55;
  LODWORD(v73) = v54;
  uint64_t v74 = v53;
  *(void *)&long long v75 = __PAIR64__(v51, v52);
  *((void *)&v75 + 1) = __PAIR64__(v49, v50);
  *(void *)&long long v76 = v48;
  *((void *)&v76 + 1) = v47;
  *(void *)&long long v77 = v46;
  DWORD2(v77) = v45;
  unint64_t v78 = v44;
  LOBYTE(v79) = v43;
  uint64_t v27 = _ViewListInputs.traits.getter();
  if ((v27 & 0x100000000) != 0) {
    unsigned int v28 = v26;
  }
  else {
    unsigned int v28 = v27;
  }
  (*(void (**)(unint64_t *__return_ptr, unint64_t, uint64_t))(v23 + 16))(&v73, v61, v23);
  unint64_t v72 = __PAIR64__(v28, v25);
  unint64_t v65 = v61;
  uint64_t v66 = v42;
  uint64_t v29 = v63;
  uint64_t v67 = v63;
  *(void *)&long long v68 = v62;
  *((void *)&v68 + 1) = v59;
  *(void *)int v69 = v60;
  uint64_t v30 = type metadata accessor for PlatformItemTraitWriter.AddTrait();
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = (*(uint64_t (**)(unint64_t *, unint64_t *, uint64_t))(v31 + 16))(&v65, &v72, v30);
  MEMORY[0x1F4188790](v32);
  v40[2] = v30;
  v40[3] = swift_getWitnessTable();
  type metadata accessor for Attribute<ViewTraitCollection>();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v65, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_20, (uint64_t)v40, v30, MEMORY[0x1E4FBC248], v33, MEMORY[0x1E4FBC278], v34);
  uint64_t v35 = *(void (**)(unint64_t *, uint64_t))(v31 + 8);
  v35(&v65, v30);
  LOBYTE(v65) = 0;
  _ViewListInputs.traits.setter();
  char v36 = v96;
  if (v95)
  {
    unint64_t v65 = v95;
    LOBYTE(v66) = v96 & 1;
    specialized Set._Variant.insert(_:)(&v64, v29);
    unint64_t v37 = v65;
    char v36 = v66;
    unint64_t v95 = v65;
    char v96 = v66;
  }
  else
  {
    unint64_t v37 = 0;
  }
  unint64_t v65 = v88;
  LODWORD(v66) = v89;
  uint64_t v67 = v90;
  long long v68 = v91;
  *(void *)int v69 = v92;
  *(_OWORD *)&v69[8] = v93;
  *(_DWORD *)&v69[24] = v94;
  unint64_t v70 = v37;
  LOBYTE(v71) = v36;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  uint64_t v38 = swift_bridgeObjectRetain();
  v58(v38, &v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v35(&v72, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t PlatformItemTraitWriter.AddTrait.updateValue()(uint64_t a1)
{
  uint64_t v2 = v1;
  __dst[43] = *MEMORY[0x1E4F143B8];
  int v4 = *MEMORY[0x1E4F4E7A0];
  if (*v1 == *MEMORY[0x1E4F4E7A0])
  {
    (*(void (**)(void *__return_ptr))(*(void *)(*(void *)(a1 + 40) + 8) + 16))(__dst);
    int v8 = 0;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v7 = v6;
    outlined init with copy of PlatformItem(Value, (uint64_t)__src);
    memcpy(__dst, __src, 0x150uLL);
    int v8 = v7 & 1;
  }
  memcpy(__src, __dst, 0x150uLL);
  if (v2[1] == v4 || (uint64_t v9 = (uint64_t *)AGGraphGetValue(), v11 = v10, v12 = *v9, swift_bridgeObjectRetain(), !v12))
  {
    ViewTraitCollection.init()();
    int v13 = 0;
    uint64_t v12 = __dst[0];
  }
  else
  {
    int v13 = v11 & 1;
  }
  uint64_t v14 = (uint64_t)(v2 + 2);
  int v15 = (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)(*(void *)(a1 + 40) + 8) + 40))(v14, __src);
  if (!AGGraphGetOutputValue() || (v8 & v15 & 1) != 0 || v13)
  {
    outlined init with copy of PlatformItem((uint64_t)__src, (uint64_t)__dst);
    ViewTraitCollection.subscript.setter();
    __dst[0] = v12;
    AGGraphSetOutputValue();
  }
  swift_bridgeObjectRelease();
  outlined assign with copy of PlatformItem((uint64_t)__src, v14);
  return outlined destroy of PlatformItem((uint64_t)__src);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance PlatformItemTraitWriter<A, B, C>.AddTrait(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance PlatformItemTraitWriter<A, B, C>(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t *))
{
  return protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance OnChangeOfSuggestionsModifier(a1, a2, a3);
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance PlatformItemTraitWriter<A, B, C>@<X0>(int *a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t, unint64_t *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  return static PlatformItemTraitWriter._makeViewList(modifier:inputs:body:)(a1, a2, a3, a4, *(void *)(a5 + 16), *(void *)(a5 + 24), *(void *)(a5 + 32), *(void *)(a5 + 40), a6, *(void *)(a5 + 48), *(void *)(a5 + 56));
}

uint64_t closure #1 in View.platformItemTrait<A, B, C>(for:strategy:source:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v7 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  int v13 = (char *)&v17 - v12;
  v14(v11);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  int v15 = *(void (**)(char *, uint64_t))(v7 + 8);
  v15(v9, a6);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return ((uint64_t (*)(char *, uint64_t))v15)(v13, a6);
}

void closure #1 in View.platformItemLabelTrait<A, B>(for:_:)(void (*a1)(double)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X7>, uint64_t a4@<X8>)
{
  uint64_t v18 = a3;
  uint64_t v19 = a1;
  uint64_t v24 = a4;
  uint64_t v20 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  char v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>();
  uint64_t v7 = type metadata accessor for ModifiedContent();
  uint64_t v22 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (void (*)(double))((char *)&v18 - v8);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v21 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v23 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  double v13 = MEMORY[0x1F4188790](v12);
  v19(v13);
  unint64_t v14 = lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon();
  uint64_t v19 = v9;
  uint64_t v15 = v18;
  View.input<A>(_:)((uint64_t)&type metadata for AccessibilityShowsLabelIcon, a2, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, v18, v14);
  (*(void (**)(char *, uint64_t))(v20 + 8))(v6, a2);
  if (one-time initialization token for combine != -1) {
    swift_once();
  }
  uint64_t v29 = static AccessibilityChildBehavior.combine;
  uint64_t v27 = v15;
  unsigned int v28 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v17 = v19;
  View._accessibilityElement(children:)(&v29, v7, WitnessTable);
  (*(void (**)(void (*)(double), uint64_t))(v22 + 8))(v17, v7);
  uint64_t v25 = WitnessTable;
  unsigned int v26 = &protocol witness table for AccessibilityAttachmentModifier;
  swift_getWitnessTable();
  View.accessibilityApplyDetachedProperties()();
}

uint64_t type metadata accessor for PlatformItemTraitWriter.AddTrait()
{
  return swift_getGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem;
  if (!lazy protocol witness table cache variable for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem);
  }
  return result;
}

uint64_t type metadata accessor for PlatformItemsReader.Child()
{
  return swift_getGenericMetadata();
}

uint64_t partial apply for closure #1 in static PlatformItemsReader._makeView(view:inputs:)(uint64_t a1)
{
  return closure #1 in static PlatformItemsReader._makeView(view:inputs:)(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)()
{
  return partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)((uint64_t (*)(void, void, void, void, void, void, void, void))closure #1 in PlatformItemsReader.init(for:content:source:));
}

uint64_t partial apply for closure #1 in View.platformItemLabelTrait<A, B>(for:_:)()
{
  return partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)((uint64_t (*)(void, void, void, void, void, void, void, void))closure #1 in View.platformItemLabelTrait<A, B>(for:_:));
}

uint64_t partial apply for closure #1 in PlatformItemsReader.init(for:content:source:)(uint64_t (*a1)(void, void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[9], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void type metadata accessor for ViewInputFlagModifier<AccessibilityShowsLabelIcon>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>)
  {
    lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>);
    }
  }
}

uint64_t type metadata completion function for PlatformItemsReader.Child()
{
  uint64_t result = swift_getAssociatedTypeWitness();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for PlatformItemsReader.Child(uint64_t *a1, uint64_t *a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  if ((v6 | 3uLL) > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 8) & (unint64_t)~v6) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64) > 0x18)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 + 16) & ~(v6 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    uint64_t v10 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    uint64_t v11 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
    *uint64_t v10 = *v11;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16))(((unint64_t)v10 + v6 + 4) & ~v6, ((unint64_t)v11 + v6 + 4) & ~v6, AssociatedTypeWitness);
  }
  return a1;
}

uint64_t destroy for PlatformItemsReader.Child(uint64_t a1)
{
  unint64_t v1 = (a1 + 7) & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v3 = *(void *)(AssociatedTypeWitness - 8);
  int v4 = *(uint64_t (**)(unint64_t, uint64_t))(v3 + 8);
  uint64_t v5 = AssociatedTypeWitness;
  unint64_t v6 = (v1 + *(unsigned __int8 *)(v3 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);

  return v4(v6, v5);
}

_DWORD *initializeWithCopy for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 16))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithCopy for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 24))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *initializeWithTake for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 32))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

_DWORD *assignWithTake for PlatformItemsReader.Child(_DWORD *a1, _DWORD *a2)
{
  *a1 = *a2;
  uint64_t v3 = (_DWORD *)(((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  int v4 = (_DWORD *)(((unint64_t)a2 + 7) & 0xFFFFFFFFFFFFFFFCLL);
  *uint64_t v3 = *v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v6 = *(void *)(AssociatedTypeWitness - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v6 + 40))(((unint64_t)v3 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), AssociatedTypeWitness);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemsReader.Child(unsigned __int16 *a1, unsigned int a2)
{
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t v5 = *(void *)(AssociatedTypeWitness - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (!a2) {
    return 0;
  }
  if (a2 <= v6) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v7 + 8) & ~v7) + *(void *)(*(void *)(AssociatedTypeWitness - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((a2 - v6 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v6)
      {
        double v13 = *(uint64_t (**)(unint64_t))(v5 + 48);
        return v13(((((unint64_t)a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v7 + 4) & ~v7);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v6 + (v8 | v12) + 1;
}

void storeEnumTagSinglePayload for PlatformItemsReader.Child(unsigned char *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = *(void *)(swift_getAssociatedTypeWitness() - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  if (a3 <= v7)
  {
    int v10 = 0;
  }
  else if (v9 <= 3)
  {
    unsigned int v13 = ((a3 - v7 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
    if (HIWORD(v13))
    {
      int v10 = 4;
    }
    else if (v13 >= 0x100)
    {
      int v10 = 2;
    }
    else
    {
      int v10 = v13 > 1;
    }
  }
  else
  {
    int v10 = 1;
  }
  if (v7 < a2)
  {
    unsigned int v11 = ~v7 + a2;
    if (v9 < 4)
    {
      int v12 = (v11 >> (8 * v9)) + 1;
      if (v9)
      {
        int v14 = v11 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v14;
          a1[2] = BYTE2(v14);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v14;
        }
        else
        {
          *a1 = v14;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v11;
      int v12 = 1;
    }
    switch(v10)
    {
      case 1:
        a1[v9] = v12;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v12;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v12;
        return;
      default:
        return;
    }
  }
  switch(v10)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187D84748);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        uint64_t v15 = *(void (**)(unint64_t, uint64_t))(v6 + 56);
        v15((((unint64_t)(a1 + 7) & 0xFFFFFFFFFFFFFFFCLL) + v8 + 4) & ~v8, a2);
      }
      return;
  }
}

uint64_t destroy for PlatformItemTraitWriter.AddTrait(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2 != (void *)1)
  {

    uint64_t v3 = *(void *)(a1 + 176);
    if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v4 = *(unsigned __int8 *)(a1 + 64);
      if (v4 != 255) {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 56), v4);
      }
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(a1 + 160), *(void *)(a1 + 168), v3);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(a1 + 296) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 272);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for PlatformItemTraitWriter.AddTrait(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = a2 + 32;
  uint64_t v6 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 == (void *)1)
  {
    long long v7 = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v5 + 192);
    *(void *)(a1 + 240) = *(void *)(v5 + 208);
    long long v8 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a1 + 144) = v8;
    long long v9 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a1 + 176) = v9;
    long long v10 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a1 + 80) = v10;
    long long v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    unsigned int v13 = *(void **)(a2 + 40);
    int v14 = *(void **)(a2 + 48);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    uint64_t v15 = (_OWORD *)(a1 + 56);
    unsigned int v16 = (id *)(a2 + 56);
    uint64_t v17 = *(void *)(a2 + 176);
    id v18 = v6;
    id v19 = v13;
    id v20 = v14;
    if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
    {
      long long v21 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v21;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      long long v22 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v22;
      long long v23 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v23;
      long long v24 = *(_OWORD *)(a2 + 72);
      _OWORD *v15 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 72) = v24;
      long long v25 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v25;
    }
    else
    {
      int v26 = *(unsigned __int8 *)(a2 + 64);
      if (v26 == 255)
      {
        *(void *)uint64_t v15 = *v16;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      }
      else
      {
        id v27 = *v16;
        outlined copy of GraphicsImage.Contents(*v16, *(unsigned char *)(a2 + 64));
        *(void *)(a1 + 56) = v27;
        *(unsigned char *)(a1 + 64) = v26;
      }
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
      *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      long long v28 = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
      *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
      *(_OWORD *)(a1 + 136) = v28;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
      {
        long long v29 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v29;
      }
      else
      {
        uint64_t v30 = *(void *)(a2 + 160);
        uint64_t v31 = *(void *)(a2 + 168);
        uint64_t v32 = *(void *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v30, v31, v17);
        *(void *)(a1 + 160) = v30;
        *(void *)(a1 + 168) = v31;
        *(void *)(a1 + 176) = v17;
        *(void *)(a1 + 184) = v32;
      }
      uint64_t v33 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = v33;
      *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      uint64_t v34 = *(void **)(a2 + 224);
      *(void *)(a1 + 224) = v34;
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
      swift_unknownObjectRetain();
      swift_retain();
      id v35 = v34;
    }
    *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    swift_retain();
  }
  uint64_t v36 = *(void *)(a2 + 296);
  if (v36 == 1)
  {
    long long v37 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v37;
    long long v38 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v38;
  }
  else
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    uint64_t v39 = (_OWORD *)(a1 + 272);
    uint64_t v40 = (_OWORD *)(a2 + 272);
    if (v36)
    {
      uint64_t v41 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = v36;
      *(void *)(a1 + 304) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v39, v40);
    }
    else
    {
      long long v42 = *(_OWORD *)(a2 + 288);
      *uint64_t v39 = *v40;
      *(_OWORD *)(a1 + 288) = v42;
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
    }
  }
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v43 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v43;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for PlatformItemTraitWriter.AddTrait(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v7 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void **)(a2 + 32);
  if (v5 == (void *)1)
  {
    if (v6 == (void *)1)
    {
      long long v8 = *(_OWORD *)(a2 + 48);
      *uint64_t v4 = *v7;
      *(_OWORD *)(a1 + 48) = v8;
      long long v9 = *(_OWORD *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 80) = v10;
      long long v12 = *(_OWORD *)(a2 + 128);
      long long v13 = *(_OWORD *)(a2 + 144);
      long long v14 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 144) = v13;
      long long v15 = *(_OWORD *)(a2 + 192);
      long long v16 = *(_OWORD *)(a2 + 208);
      long long v17 = *(_OWORD *)(a2 + 224);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(_OWORD *)(a1 + 208) = v16;
      *(_OWORD *)(a1 + 224) = v17;
      *(_OWORD *)(a1 + 192) = v15;
    }
    else
    {
      *(void *)(a1 + 32) = v6;
      long long v28 = *(void **)(a2 + 40);
      *(void *)(a1 + 40) = v28;
      long long v29 = *(void **)(a2 + 48);
      *(void *)(a1 + 48) = v29;
      uint64_t v30 = (_OWORD *)(a1 + 56);
      uint64_t v31 = (id *)(a2 + 56);
      unint64_t v32 = *(void *)(a2 + 176);
      id v33 = v6;
      id v34 = v28;
      id v35 = v29;
      if (v32 >> 1 == 4294967294)
      {
        long long v36 = *(_OWORD *)v31;
        long long v37 = *(_OWORD *)(a2 + 72);
        long long v38 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v38;
        *uint64_t v30 = v36;
        *(_OWORD *)(a1 + 72) = v37;
        long long v39 = *(_OWORD *)(a2 + 120);
        long long v40 = *(_OWORD *)(a2 + 136);
        long long v41 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v41;
        *(_OWORD *)(a1 + 120) = v39;
        *(_OWORD *)(a1 + 136) = v40;
        long long v42 = *(_OWORD *)(a2 + 184);
        long long v43 = *(_OWORD *)(a2 + 200);
        long long v44 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v43;
        *(_OWORD *)(a1 + 216) = v44;
        *(_OWORD *)(a1 + 184) = v42;
      }
      else
      {
        int v64 = *(unsigned __int8 *)(a2 + 64);
        if (v64 == 255)
        {
          id v81 = *v31;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)uint64_t v30 = v81;
        }
        else
        {
          id v65 = *v31;
          outlined copy of GraphicsImage.Contents(*v31, *(unsigned char *)(a2 + 64));
          *(void *)(a1 + 56) = v65;
          *(unsigned char *)(a1 + 64) = v64;
        }
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
        long long v82 = *(_OWORD *)(a2 + 100);
        *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v82;
        long long v83 = *(_OWORD *)(a2 + 120);
        long long v84 = *(_OWORD *)(a2 + 136);
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v84;
        *(_OWORD *)(a1 + 120) = v83;
        *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
        *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
        *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
        unint64_t v85 = *(void *)(a2 + 176);
        if (v85 >> 1 == 0xFFFFFFFF)
        {
          long long v86 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v86;
        }
        else
        {
          uint64_t v87 = *(void *)(a2 + 160);
          uint64_t v88 = *(void *)(a2 + 168);
          uint64_t v89 = *(void *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v87, v88, *(void *)(a2 + 176));
          *(void *)(a1 + 160) = v87;
          *(void *)(a1 + 168) = v88;
          *(void *)(a1 + 176) = v85;
          *(void *)(a1 + 184) = v89;
        }
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
        *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
        int v90 = *(_DWORD *)(a2 + 212);
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v90;
        long long v91 = *(void **)(a2 + 224);
        *(void *)(a1 + 224) = v91;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        id v92 = v91;
      }
      *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_retain();
    }
  }
  else if (v6 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
    long long v18 = *(_OWORD *)(a2 + 48);
    *uint64_t v4 = *v7;
    *(_OWORD *)(a1 + 48) = v18;
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v21 = *(_OWORD *)(a2 + 64);
    long long v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = v20;
    long long v22 = *(_OWORD *)(a2 + 176);
    long long v24 = *(_OWORD *)(a2 + 128);
    long long v23 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    long long v26 = *(_OWORD *)(a2 + 208);
    long long v25 = *(_OWORD *)(a2 + 224);
    long long v27 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v26;
    *(_OWORD *)(a1 + 224) = v25;
    *(_OWORD *)(a1 + 192) = v27;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
    id v45 = v6;

    uint64_t v46 = *(void **)(a1 + 40);
    uint64_t v47 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v47;
    id v48 = v47;

    unsigned int v49 = *(void **)(a1 + 48);
    unsigned int v50 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v50;
    id v51 = v50;

    unsigned int v52 = (_OWORD *)(a1 + 56);
    uint64_t v53 = (id *)(a2 + 56);
    unint64_t v54 = *(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 176) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        long long v55 = *(_OWORD *)v53;
        long long v56 = *(_OWORD *)(a2 + 72);
        long long v57 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v57;
        _OWORD *v52 = v55;
        *(_OWORD *)(a1 + 72) = v56;
        long long v58 = *(_OWORD *)(a2 + 120);
        long long v59 = *(_OWORD *)(a2 + 136);
        long long v60 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v60;
        *(_OWORD *)(a1 + 120) = v58;
        *(_OWORD *)(a1 + 136) = v59;
        long long v61 = *(_OWORD *)(a2 + 184);
        long long v62 = *(_OWORD *)(a2 + 200);
        long long v63 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v62;
        *(_OWORD *)(a1 + 216) = v63;
        *(_OWORD *)(a1 + 184) = v61;
      }
      else
      {
        int v75 = *(unsigned __int8 *)(a2 + 64);
        if (v75 == 255)
        {
          id v93 = *v53;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)unsigned int v52 = v93;
        }
        else
        {
          id v76 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 64));
          *(void *)(a1 + 56) = v76;
          *(unsigned char *)(a1 + 64) = v75;
        }
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
        long long v94 = *(_OWORD *)(a2 + 100);
        *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v94;
        long long v95 = *(_OWORD *)(a2 + 120);
        long long v96 = *(_OWORD *)(a2 + 136);
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v96;
        *(_OWORD *)(a1 + 120) = v95;
        *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
        *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
        *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
        unint64_t v97 = *(void *)(a2 + 176);
        if (v97 >> 1 == 0xFFFFFFFF)
        {
          long long v98 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v98;
        }
        else
        {
          uint64_t v99 = *(void *)(a2 + 160);
          uint64_t v100 = *(void *)(a2 + 168);
          uint64_t v101 = *(void *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v99, v100, *(void *)(a2 + 176));
          *(void *)(a1 + 160) = v99;
          *(void *)(a1 + 168) = v100;
          *(void *)(a1 + 176) = v97;
          *(void *)(a1 + 184) = v101;
        }
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
        *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
        int v102 = *(_DWORD *)(a2 + 212);
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v102;
        v103 = *(void **)(a2 + 224);
        *(void *)(a1 + 224) = v103;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        id v104 = v103;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(a1 + 56);
      long long v66 = *(_OWORD *)(a2 + 104);
      long long v68 = *(_OWORD *)v53;
      long long v67 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v66;
      _OWORD *v52 = v68;
      *(_OWORD *)(a1 + 72) = v67;
      long long v69 = *(_OWORD *)(a2 + 168);
      long long v71 = *(_OWORD *)(a2 + 120);
      long long v70 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v69;
      *(_OWORD *)(a1 + 120) = v71;
      *(_OWORD *)(a1 + 136) = v70;
      long long v73 = *(_OWORD *)(a2 + 200);
      long long v72 = *(_OWORD *)(a2 + 216);
      long long v74 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      *(_OWORD *)(a1 + 200) = v73;
      *(_OWORD *)(a1 + 216) = v72;
      *(_OWORD *)(a1 + 184) = v74;
    }
    else
    {
      int v77 = *(unsigned __int8 *)(a2 + 64);
      if (*(unsigned __int8 *)(a1 + 64) == 255)
      {
        if (v77 == 255)
        {
          id v107 = *v53;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)unsigned int v52 = v107;
        }
        else
        {
          id v105 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 64));
          *(void *)(a1 + 56) = v105;
          *(unsigned char *)(a1 + 64) = v77;
        }
      }
      else if (v77 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1 + 56);
        char v106 = *(unsigned char *)(a2 + 64);
        *(void *)unsigned int v52 = *v53;
        *(unsigned char *)(a1 + 64) = v106;
      }
      else
      {
        id v78 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 64));
        int v79 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v78;
        char v80 = *(unsigned char *)(a1 + 64);
        *(unsigned char *)(a1 + 64) = v77;
        outlined consume of GraphicsImage.Contents(v79, v80);
      }
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v108 = *(_OWORD *)(a2 + 100);
      *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
      *(_OWORD *)(a1 + 100) = v108;
      long long v109 = *(_OWORD *)(a2 + 120);
      long long v110 = *(_OWORD *)(a2 + 136);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = v110;
      *(_OWORD *)(a1 + 120) = v109;
      *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
      *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
      *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
      v111 = (_OWORD *)(a1 + 160);
      v112 = (_OWORD *)(a2 + 160);
      uint64_t v113 = *(void *)(a2 + 176);
      unint64_t v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
      if (*(void *)(a1 + 176) >> 1 == 0xFFFFFFFFLL)
      {
        if (v114 == 0x1FFFFFFFELL)
        {
          long long v115 = *(_OWORD *)(a2 + 176);
          _OWORD *v111 = *v112;
          *(_OWORD *)(a1 + 176) = v115;
        }
        else
        {
          uint64_t v117 = *(void *)(a2 + 160);
          uint64_t v118 = *(void *)(a2 + 168);
          uint64_t v119 = *(void *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v117, v118, *(void *)(a2 + 176));
          *(void *)(a1 + 160) = v117;
          *(void *)(a1 + 168) = v118;
          *(void *)(a1 + 176) = v113;
          *(void *)(a1 + 184) = v119;
        }
      }
      else if (v114 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(a1 + 160);
        long long v116 = *(_OWORD *)(a2 + 176);
        _OWORD *v111 = *v112;
        *(_OWORD *)(a1 + 176) = v116;
      }
      else
      {
        uint64_t v120 = *(void *)(a2 + 160);
        uint64_t v121 = *(void *)(a2 + 168);
        uint64_t v122 = *(void *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v120, v121, *(void *)(a2 + 176));
        uint64_t v123 = *(void *)(a1 + 160);
        uint64_t v124 = *(void *)(a1 + 168);
        uint64_t v125 = *(void *)(a1 + 176);
        *(void *)(a1 + 160) = v120;
        *(void *)(a1 + 168) = v121;
        *(void *)(a1 + 176) = v113;
        *(void *)(a1 + 184) = v122;
        outlined consume of AccessibilityImageLabel(v123, v124, v125);
      }
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
      int v126 = *(_DWORD *)(a2 + 212);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = v126;
      v127 = *(void **)(a1 + 224);
      v128 = *(void **)(a2 + 224);
      *(void *)(a1 + 224) = v128;
      id v129 = v128;

      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
    }
    *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    swift_retain();
    swift_release();
  }
  v130 = (long long *)(a1 + 248);
  v131 = (long long *)(a2 + 248);
  uint64_t v132 = *(void *)(a1 + 296);
  uint64_t v133 = *(void *)(a2 + 296);
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      long long v134 = *v131;
      long long v135 = *(_OWORD *)(a2 + 264);
      long long v136 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v136;
LABEL_47:
      long long *v130 = v134;
      v130[1] = v135;
      goto LABEL_59;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    v140 = (_OWORD *)(a1 + 272);
    v141 = (long long *)(a2 + 272);
    uint64_t v142 = *(void *)(a2 + 296);
    if (v142)
    {
      *(void *)(a1 + 296) = v142;
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      (**(void (***)(_OWORD *, long long *))(v142 - 8))(v140, v141);
    }
    else
    {
      long long v145 = *v141;
      long long v146 = *(_OWORD *)(a2 + 288);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      _OWORD *v140 = v145;
      *(_OWORD *)(a1 + 288) = v146;
    }
  }
  else
  {
    if (v133 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent(a1 + 248);
      long long v137 = *(_OWORD *)(a2 + 296);
      long long v139 = *v131;
      long long v138 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v137;
      long long *v130 = v139;
      *(_OWORD *)(a1 + 264) = v138;
      goto LABEL_59;
    }
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    v130 = (long long *)(a1 + 272);
    v143 = (long long *)(a2 + 272);
    uint64_t v144 = *(void *)(a2 + 296);
    if (!v132)
    {
      if (v144)
      {
        *(void *)(a1 + 296) = v144;
        *(void *)(a1 + 304) = *(void *)(a2 + 304);
        (**(void (***)(uint64_t, uint64_t))(v144 - 8))(a1 + 272, a2 + 272);
        goto LABEL_59;
      }
      long long v134 = *v143;
      long long v135 = *(_OWORD *)(a2 + 288);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      goto LABEL_47;
    }
    if (v144)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 272), (uint64_t *)(a2 + 272));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 272);
      uint64_t v147 = *(void *)(a2 + 304);
      long long v148 = *(_OWORD *)(a2 + 288);
      long long *v130 = *v143;
      *(_OWORD *)(a1 + 288) = v148;
      *(void *)(a1 + 304) = v147;
    }
  }
LABEL_59:
  uint64_t v149 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v149;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  return a1;
}

void *__swift_memcpy344_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x158uLL);
}

uint64_t assignWithTake for PlatformItemTraitWriter.AddTrait(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (v5 == (void *)1) {
    goto LABEL_4;
  }
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    long long v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    long long v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    goto LABEL_21;
  }
  *(void *)(a1 + 32) = v4;

  long long v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  long long v13 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  long long v14 = (void *)(a1 + 56);
  long long v15 = (void *)(a2 + 56);
  if (*(void *)(a1 + 176) >> 1 == 4294967294) {
    goto LABEL_8;
  }
  if (*(void *)(a2 + 176) >> 1 != 4294967294)
  {
    int v21 = *(unsigned __int8 *)(a1 + 64);
    if (v21 != 255)
    {
      int v22 = *(unsigned __int8 *)(a2 + 64);
      if (v22 != 255)
      {
        long long v23 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = *v15;
        *(unsigned char *)(a1 + 64) = v22;
        outlined consume of GraphicsImage.Contents(v23, v21);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 56);
    }
    *long long v14 = *v15;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
LABEL_14:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
    *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
    unint64_t v24 = *(void *)(a1 + 176);
    *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
    if (v24 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v25 = *(void *)(a2 + 176);
      if (v25 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v27 = *(void *)(a2 + 184);
        uint64_t v28 = *(void *)(a1 + 160);
        uint64_t v29 = *(void *)(a1 + 168);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(void *)(a1 + 176) = v25;
        *(void *)(a1 + 184) = v27;
        outlined consume of AccessibilityImageLabel(v28, v29, v24);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 160);
    }
    long long v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
LABEL_19:
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_unknownObjectRelease();
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_release();
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    uint64_t v30 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);

    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 56);
LABEL_8:
  long long v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  long long v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v17;
  long long v18 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v18;
  long long v19 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)long long v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 72) = v19;
  long long v20 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v20;
LABEL_20:
  *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_release();
LABEL_21:
  uint64_t v31 = *(void *)(a1 + 296);
  if (v31 == 1)
  {
LABEL_24:
    long long v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    long long v34 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v34;
    goto LABEL_30;
  }
  uint64_t v32 = *(void *)(a2 + 296);
  if (v32 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 248);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  if (v31)
  {
    uint64_t v35 = a1 + 272;
    if (v32) {
      __swift_destroy_boxed_opaque_existential_1(v35);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v35);
    }
  }
  long long v36 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v36;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
LABEL_30:
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

uint64_t getEnumTagSinglePayload for PlatformItemTraitWriter.AddTrait(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 344)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PlatformItemTraitWriter.AddTrait(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 344) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 344) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemTraitWriter<A, B, C>.AddTrait()
{
  return swift_getWitnessTable();
}

uint64_t base witness table accessor for _AttributeBody in PlatformItemsReader<A, B, C>.Child()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in PlatformItemsReader.Child.updateValue()()
{
  return (*(uint64_t (**)(void))(v0 + 64))(*(void *)(v0 + 80));
}

void TableColumnAlignment.Guts.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1F4188790](v5 - 8);
  long long v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TableColumnAlignment.Guts(v0, (uint64_t)v7, type metadata accessor for TableColumnAlignment.Guts);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 5, v1))
  {
    case 1u:
      Swift::UInt v8 = 0;
      goto LABEL_8;
    case 2u:
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 3u:
      Swift::UInt v8 = 2;
      goto LABEL_8;
    case 4u:
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 5u:
      Swift::UInt v8 = 4;
LABEL_8:
      Hasher._combine(_:)(v8);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(5uLL);
      lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem, MEMORY[0x1E4F279F0]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
}

Swift::Int protocol witness for Hashable.hashValue.getter in conformance TableColumnAlignment.Guts()
{
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance TableColumnAlignment.Guts()
{
  return Hasher._finalize()();
}

uint64_t static TableColumnAlignment.automatic.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(1, a1);
}

uint64_t static TableColumnAlignment.leading.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(2, a1);
}

uint64_t static TableColumnAlignment.center.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(3, a1);
}

uint64_t static TableColumnAlignment.trailing.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(4, a1);
}

uint64_t static TableColumnAlignment.numeric.getter@<X0>(uint64_t a1@<X8>)
{
  return static TableColumnAlignment.automatic.getter(5, a1);
}

uint64_t static TableColumnAlignment.automatic.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a2, a1, 5, v4);
}

uint64_t static TableColumnAlignment.numeric(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a2, a1, v4);
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);

  return v5(a2, 0, 5, v4);
}

uint64_t TableColumnAlignment.resolve(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Locale.NumberingSystem?();
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v29 = (char *)&v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale.Components();
  uint64_t v30 = *(void *)(v6 - 8);
  uint64_t v31 = v6;
  MEMORY[0x1F4188790](v6);
  uint64_t v28 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v8);
  long long v10 = (char *)&v28 - v9;
  uint64_t v11 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  long long v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Locale();
  uint64_t v32 = *(void *)(v15 - 8);
  uint64_t v33 = v15;
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1F4188790](v18 - 8);
  long long v20 = (char *)&v28 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = *a1;
  uint64_t v22 = a1[1];
  uint64_t v34 = v2;
  outlined init with copy of TableColumnAlignment.Guts(v2, (uint64_t)v20, type metadata accessor for TableColumnAlignment.Guts);
  uint64_t v23 = 1;
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v20, 5, v11))
  {
    case 1u:
    case 2u:
      uint64_t v36 = v21;
      uint64_t v37 = v22;
      EnvironmentValues.layoutDirection.getter();
      if (v35) {
        uint64_t v23 = 2;
      }
      else {
        uint64_t v23 = 0;
      }
      break;
    case 3u:
      return v23;
    case 4u:
      uint64_t v36 = v21;
      uint64_t v37 = v22;
      EnvironmentValues.layoutDirection.getter();
      if (v35) {
        uint64_t v23 = 0;
      }
      else {
        uint64_t v23 = 2;
      }
      break;
    case 5u:
      uint64_t v36 = v21;
      uint64_t v37 = v22;
      EnvironmentValues.locale.getter();
      uint64_t v23 = TableColumnAlignment.resolveNumeric(locale:)((uint64_t)v17);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v20, v11);
      uint64_t v36 = v21;
      uint64_t v37 = v22;
      EnvironmentValues.locale.getter();
      Locale.Components.init(locale:)();
      unint64_t v24 = v29;
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v29, v14, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v24, 0, 1, v11);
      Locale.Components.numberingSystem.setter();
      uint64_t v26 = v30;
      uint64_t v25 = v31;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v28, v10, v31);
      Locale.init(components:)();
      uint64_t v23 = TableColumnAlignment.resolveNumeric(locale:)((uint64_t)v17);
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v33);
      (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v25);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
      break;
  }
  return v23;
}

uint64_t TableColumnAlignment.resolveNumeric(locale:)(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for IntegerFormatStyle<Int>();
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  double v9 = MEMORY[0x1F4188790](v6);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[1] = 0;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v3 + 16))(v5, a1, v2, v9);
  lazy protocol witness table accessor for type Int and conformance Int();
  IntegerFormatStyle.init(locale:)();
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem((unint64_t *)&lazy protocol witness table cache variable for type IntegerFormatStyle<Int> and conformance IntegerFormatStyle<A>, (void (*)(uint64_t))type metadata accessor for IntegerFormatStyle<Int>);
  BinaryInteger.formatted<A>(_:)();
  (*(void (**)(char *, uint64_t))(v8 + 8))(v11, v7);
  unint64_t v12 = specialized Collection.first.getter(v14[2], v14[3]);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v12 & 0x100000000) != 0) {
    return 2;
  }
  if ((v12 & 0x80000000) != 0)
  {
    __break(1u);
  }
  else if (_DirectionForCharIsRTL())
  {
    return 0;
  }
  else
  {
    return 2;
  }
  return result;
}

uint64_t TableColumnAlignment.resolveTextAlignment(in:)(uint64_t *a1)
{
  uint64_t v2 = v1;
  type metadata accessor for Locale.NumberingSystem?();
  MEMORY[0x1F4188790](v4 - 8);
  long long v39 = (char *)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v37 = (char *)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Locale();
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v43 = v9;
  MEMORY[0x1F4188790](v9);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for Locale.Components();
  uint64_t v40 = *(void *)(v12 - 8);
  uint64_t v41 = v12;
  MEMORY[0x1F4188790](v12);
  long long v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v36 - v16;
  uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1F4188790](v18 - 8);
  long long v20 = (char *)&v36 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v36 - v22;
  uint64_t v24 = *a1;
  uint64_t v25 = a1[1];
  uint64_t v44 = v24;
  uint64_t v26 = v2;
  outlined init with copy of TableColumnAlignment.Guts(v2, (uint64_t)&v36 - v22, type metadata accessor for TableColumnAlignment.Guts);
  uint64_t v38 = v7;
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v28 = v27(v23, 5, v6);
  uint64_t result = 0;
  switch(v28)
  {
    case 1:
    case 2:
      return result;
    case 3:
      return 1;
    case 4:
      return 2;
    case 5:
      goto LABEL_3;
    default:
      outlined destroy of (TableColumnAlignment.Guts, TableColumnAlignment.Guts)((uint64_t)v23, type metadata accessor for TableColumnAlignment.Guts);
LABEL_3:
      uint64_t v46 = v44;
      uint64_t v47 = v25;
      uint64_t v36 = v25;
      EnvironmentValues.locale.getter();
      Locale.Components.init(locale:)();
      outlined init with copy of TableColumnAlignment.Guts(v26, (uint64_t)v20, type metadata accessor for TableColumnAlignment.Guts);
      if (v27(v20, 5, v6))
      {
        outlined destroy of (TableColumnAlignment.Guts, TableColumnAlignment.Guts)((uint64_t)v20, type metadata accessor for TableColumnAlignment.Guts);
      }
      else
      {
        uint64_t v31 = v37;
        uint64_t v30 = v38;
        (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v37, v20, v6);
        uint64_t v32 = v39;
        (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v39, v31, v6);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v32, 0, 1, v6);
        Locale.Components.numberingSystem.setter();
        (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v6);
      }
      uint64_t v34 = v40;
      uint64_t v33 = v41;
      (*(void (**)(char *, char *, uint64_t))(v40 + 16))(v14, v17, v41);
      Locale.init(components:)();
      char v35 = TableColumnAlignment.resolveNumeric(locale:)((uint64_t)v11);
      (*(void (**)(char *, uint64_t))(v42 + 8))(v11, v43);
      uint64_t v46 = v44;
      uint64_t v47 = v36;
      EnvironmentValues.layoutDirection.getter();
      (*(void (**)(char *, uint64_t))(v34 + 8))(v17, v33);
      if (v35)
      {
        if (v35 == 1) {
          return 1;
        }
        if (!v45) {
          return 2;
        }
        return 0;
      }
      if ((v45 & 1) == 0) {
        return 0;
      }
      return 2;
  }
}

void TableColumnAlignment.hash(into:)()
{
  uint64_t v1 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of TableColumnAlignment.Guts(v0, (uint64_t)v7, type metadata accessor for TableColumnAlignment.Guts);
  switch((*(unsigned int (**)(char *, uint64_t, uint64_t))(v2 + 48))(v7, 5, v1))
  {
    case 1u:
      Swift::UInt v8 = 0;
      goto LABEL_8;
    case 2u:
      Swift::UInt v8 = 1;
      goto LABEL_8;
    case 3u:
      Swift::UInt v8 = 2;
      goto LABEL_8;
    case 4u:
      Swift::UInt v8 = 3;
      goto LABEL_8;
    case 5u:
      Swift::UInt v8 = 4;
LABEL_8:
      Hasher._combine(_:)(v8);
      break;
    default:
      (*(void (**)(char *, char *, uint64_t))(v2 + 32))(v4, v7, v1);
      Hasher._combine(_:)(5uLL);
      lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(&lazy protocol witness table cache variable for type Locale.NumberingSystem and conformance Locale.NumberingSystem, MEMORY[0x1E4F279F0]);
      dispatch thunk of Hashable.hash(into:)();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
      break;
  }
}

uint64_t type metadata accessor for TableColumnAlignment.Guts(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnAlignment.Guts);
}

Swift::Int TableColumnAlignment.hashValue.getter()
{
  return Hasher._finalize()();
}

uint64_t TableColumnContent.alignment(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return TableColumnContent.environment<A>(key:value:)((uint64_t)&unk_1ED432E10, a1, a2, a3);
}

uint64_t protocol witness for static EnvironmentKey.defaultValue.getter in conformance TableColumnAlignment.Key@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  uint64_t v2 = type metadata accessor for TableColumnAlignment(0);
  uint64_t v3 = __swift_project_value_buffer(v2, (uint64_t)static TableColumnAlignment.Key.defaultValue);
  return outlined init with copy of TableColumnAlignment.Guts(v3, a1, type metadata accessor for TableColumnAlignment);
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance TableColumnAlignment.Resolved.Key@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized static TableColumnAlignment.Resolved.Key.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t protocol witness for static DerivedEnvironmentKey.value(in:) in conformance TableColumnAlignment.Resolved.TextAlignmentKey@<X0>(uint64_t *a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = specialized static TableColumnAlignment.Resolved.TextAlignmentKey.value(in:)(a1);
  *a2 = result;
  return result;
}

uint64_t specialized static TableColumnAlignment.Guts.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for TableColumnAlignment.Guts(0);
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for (TableColumnAlignment.Guts, TableColumnAlignment.Guts)();
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (char *)&v26 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = (uint64_t)&v13[*(int *)(v14 + 56)];
  outlined init with copy of TableColumnAlignment.Guts(a1, (uint64_t)v13, type metadata accessor for TableColumnAlignment.Guts);
  outlined init with copy of TableColumnAlignment.Guts(a2, v15, type metadata accessor for TableColumnAlignment.Guts);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  switch(v16((uint64_t)v13, 5, v4))
  {
    case 1u:
      int v17 = v16(v15, 5, v4);
      uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts;
      if (v17 != 1) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 2u:
      int v20 = v16(v15, 5, v4);
      uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts;
      if (v20 != 2) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 3u:
      int v21 = v16(v15, 5, v4);
      uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts;
      if (v21 != 3) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 4u:
      int v22 = v16(v15, 5, v4);
      uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts;
      if (v22 != 4) {
        goto LABEL_13;
      }
      goto LABEL_5;
    case 5u:
      int v23 = v16(v15, 5, v4);
      uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts;
      if (v23 != 5) {
        goto LABEL_13;
      }
LABEL_5:
      char v19 = 1;
      break;
    default:
      outlined init with copy of TableColumnAlignment.Guts((uint64_t)v13, (uint64_t)v10, type metadata accessor for TableColumnAlignment.Guts);
      if (v16(v15, 5, v4))
      {
        (*(void (**)(char *, uint64_t))(v5 + 8))(v10, v4);
LABEL_13:
        char v19 = 0;
        uint64_t v18 = (uint64_t (*)(void))type metadata accessor for (TableColumnAlignment.Guts, TableColumnAlignment.Guts);
      }
      else
      {
        (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v15, v4);
        char v19 = MEMORY[0x18C10A650](v10, v7);
        uint64_t v25 = *(void (**)(char *, uint64_t))(v5 + 8);
        v25(v7, v4);
        v25(v10, v4);
        uint64_t v18 = type metadata accessor for TableColumnAlignment.Guts;
      }
      break;
  }
  outlined destroy of (TableColumnAlignment.Guts, TableColumnAlignment.Guts)((uint64_t)v13, v18);
  return v19 & 1;
}

uint64_t base witness table accessor for Equatable in TableColumnAlignment()
{
  return lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(&lazy protocol witness table cache variable for type TableColumnAlignment and conformance TableColumnAlignment, (void (*)(uint64_t))type metadata accessor for TableColumnAlignment);
}

uint64_t lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for TableColumnAlignment(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for TableColumnAlignment);
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnAlignment(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(type metadata accessor for TableColumnAlignment.Guts(0) - 8);
  int v5 = *(_DWORD *)(v4 + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = type metadata accessor for Locale.NumberingSystem();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 5, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 5, v7);
    }
  }
  return a1;
}

void *initializeWithCopy for TableColumnAlignment(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 5, v4))
  {
    uint64_t v6 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  }
  return a1;
}

void *assignWithCopy for TableColumnAlignment(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 5, v4);
  int v8 = v6(a2, 5, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  return a1;
}

void *initializeWithTake for TableColumnAlignment(void *a1, const void *a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 5, v4))
  {
    uint64_t v6 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  }
  return a1;
}

void *assignWithTake for TableColumnAlignment(void *a1, void *a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 5, v4);
  int v8 = v6(a2, 5, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    uint64_t v9 = type metadata accessor for TableColumnAlignment.Guts(0);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 5, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnAlignment(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D877AC);
}

uint64_t sub_187D877AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TableColumnAlignment.Guts(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t storeEnumTagSinglePayload for TableColumnAlignment(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D8782C);
}

uint64_t sub_187D8782C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TableColumnAlignment.Guts(0);
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata completion function for TableColumnAlignment()
{
  uint64_t result = type metadata accessor for TableColumnAlignment.Guts(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_187D87928()
{
  return swift_getWitnessTable();
}

void *type metadata accessor for TableColumnAlignment.Key()
{
  return &unk_1ED432E10;
}

uint64_t *initializeBufferWithCopyOfBuffer for TableColumnAlignment.Guts(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    uint64_t v7 = type metadata accessor for Locale.NumberingSystem();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 5, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 5, v7);
    }
  }
  return a1;
}

uint64_t destroy for TableColumnAlignment(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 5, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *initializeWithCopy for TableColumnAlignment.Guts(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 5, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  }
  return a1;
}

void *assignWithCopy for TableColumnAlignment.Guts(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 5, v6);
  int v10 = v8(a2, 5, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 24))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  return a1;
}

void *initializeWithTake for TableColumnAlignment.Guts(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v7 + 48))(a2, 5, v6))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  }
  return a1;
}

void *assignWithTake for TableColumnAlignment.Guts(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 5, v6);
  int v10 = v8(a2, 5, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(void *, void *, uint64_t))(v7 + 40))(a1, a2, v6);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for TableColumnAlignment.Guts(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D880D0);
}

uint64_t sub_187D880D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  unsigned int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48))(a1, a2, v4);
  if (v5 >= 6) {
    return v5 - 5;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TableColumnAlignment.Guts(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D88150);
}

uint64_t sub_187D88150(uint64_t a1, int a2, uint64_t a3)
{
  if (a2) {
    uint64_t v5 = (a2 + 5);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56);

  return v7(a1, v5, a3, v6);
}

uint64_t getEnumTag for TableColumnAlignment.Guts(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48);

  return v3(a1, 5, v2);
}

uint64_t destructiveInjectEnumTag for TableColumnAlignment.Guts(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Locale.NumberingSystem();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, 5, v4);
}

uint64_t type metadata completion function for TableColumnAlignment.Guts()
{
  uint64_t result = type metadata accessor for Locale.NumberingSystem();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t base witness table accessor for Equatable in TableColumnAlignment.Guts()
{
  return lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(&lazy protocol witness table cache variable for type TableColumnAlignment.Guts and conformance TableColumnAlignment.Guts, (void (*)(uint64_t))type metadata accessor for TableColumnAlignment.Guts);
}

uint64_t outlined init with copy of TableColumnAlignment.Guts(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for (TableColumnAlignment.Guts, TableColumnAlignment.Guts)()
{
  if (!lazy cache variable for type metadata for (TableColumnAlignment.Guts, TableColumnAlignment.Guts))
  {
    type metadata accessor for TableColumnAlignment.Guts(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TableColumnAlignment.Guts, TableColumnAlignment.Guts));
    }
  }
}

uint64_t outlined destroy of (TableColumnAlignment.Guts, TableColumnAlignment.Guts)(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

ValueMetadata *type metadata accessor for TableColumnAlignment.Resolved.TextAlignmentKey()
{
  return &type metadata for TableColumnAlignment.Resolved.TextAlignmentKey;
}

ValueMetadata *type metadata accessor for TableColumnAlignment.Resolved.Key()
{
  return &type metadata for TableColumnAlignment.Resolved.Key;
}

unsigned char *storeEnumTagSinglePayload for TableColumnAlignment.Resolved(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D88584);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TableColumnAlignment.Resolved()
{
  return &type metadata for TableColumnAlignment.Resolved;
}

unint64_t lazy protocol witness table accessor for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved()
{
  unint64_t result = lazy protocol witness table cache variable for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved;
  if (!lazy protocol witness table cache variable for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TableColumnAlignment.Resolved and conformance TableColumnAlignment.Resolved);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type TextAlignment and conformance TextAlignment()
{
  unint64_t result = lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment;
  if (!lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TextAlignment and conformance TextAlignment);
  }
  return result;
}

uint64_t specialized static TableColumnAlignment.Resolved.Key.value(in:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for TableColumnAlignment(0);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>();
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnAlignment.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v9[0] = v6;
  v9[1] = v5;
  uint64_t v7 = TableColumnAlignment.resolve(in:)(v9);
  outlined destroy of (TableColumnAlignment.Guts, TableColumnAlignment.Guts)((uint64_t)v4, type metadata accessor for TableColumnAlignment);
  return v7;
}

void type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnAlignment.Key>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<TableColumnAlignment.Key>);
    }
  }
}

void type metadata accessor for Locale.NumberingSystem?()
{
  if (!lazy cache variable for type metadata for Locale.NumberingSystem?)
  {
    type metadata accessor for Locale.NumberingSystem();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Locale.NumberingSystem?);
    }
  }
}

void type metadata accessor for IntegerFormatStyle<Int>()
{
  if (!lazy cache variable for type metadata for IntegerFormatStyle<Int>)
  {
    lazy protocol witness table accessor for type Int and conformance Int();
    unint64_t v0 = type metadata accessor for IntegerFormatStyle();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for IntegerFormatStyle<Int>);
    }
  }
}

uint64_t specialized static TableColumnAlignment.Resolved.TextAlignmentKey.value(in:)(uint64_t *a1)
{
  uint64_t v2 = type metadata accessor for TableColumnAlignment(0);
  MEMORY[0x1F4188790](v2 - 8);
  unsigned int v4 = (char *)v9 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = *a1;
  uint64_t v5 = a1[1];
  type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>();
  lazy protocol witness table accessor for type Locale.NumberingSystem and conformance Locale.NumberingSystem(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TableColumnAlignment.Key> and conformance EnvironmentPropertyKey<A>, (void (*)(uint64_t))type metadata accessor for EnvironmentPropertyKey<TableColumnAlignment.Key>);
  swift_retain_n();
  if (v5)
  {
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    PropertyList.subscript.getter();
  }
  swift_release_n();
  v9[0] = v6;
  v9[1] = v5;
  uint64_t v7 = TableColumnAlignment.resolveTextAlignment(in:)(v9);
  outlined destroy of (TableColumnAlignment.Guts, TableColumnAlignment.Guts)((uint64_t)v4, type metadata accessor for TableColumnAlignment);
  return v7;
}

uint64_t initializeBufferWithCopyOfBuffer for HalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for HalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for HalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for HalfOpenCircularGauge()
{
  return &type metadata for HalfOpenCircularGauge;
}

uint64_t associated type witness table accessor for View.Body : View in HalfOpenCircularGauge()
{
  return swift_getOpaqueTypeConformance2();
}

double SizedHalfOpenCircularGauge.init(configuration:isComplication:indicatorStyle:gradient:)@<D0>(uint64_t *a1@<X0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  char v6 = a3 & 1;
  uint64_t v7 = *a1;
  char v8 = *((unsigned char *)a1 + 8);
  char v9 = *((unsigned char *)a1 + 9);
  char v10 = *((unsigned char *)a1 + 10);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = swift_getKeyPath();
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = swift_getKeyPath();
  uint64_t v16 = swift_getKeyPath();
  *(void *)a5 = v7;
  *(unsigned char *)(a5 + 8) = v8;
  *(unsigned char *)(a5 + 9) = v9;
  *(unsigned char *)(a5 + 10) = v10;
  *(unsigned char *)(a5 + 11) = v6;
  *(void *)(a5 + 16) = a4;
  *(void *)(a5 + 24) = KeyPath;
  *(unsigned char *)(a5 + 32) = 0;
  *(void *)(a5 + 40) = v12;
  *(void *)(a5 + 48) = 0;
  *(unsigned char *)(a5 + 56) = 0;
  *(void *)(a5 + 64) = v13;
  *(unsigned char *)(a5 + 72) = 0;
  *(void *)(a5 + 80) = v14;
  *(unsigned char *)(a5 + 88) = 0;
  *(void *)(a5 + 96) = v15;
  *(unsigned char *)(a5 + 104) = 0;
  *(void *)(a5 + 112) = v16;
  *(unsigned char *)(a5 + 120) = 0;
  *(unsigned char *)(a5 + 121) = a2;
  double result = 58.0;
  *(_OWORD *)(a5 + 128) = xmmword_1883A1000;
  *(_OWORD *)(a5 + 144) = xmmword_1883A1010;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance HalfOpenCircularGauge()
{
  return static StaticIf<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance HalfOpenCircularGauge@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)v1;
  char v4 = *(unsigned char *)(v1 + 8);
  char v5 = *(unsigned char *)(v1 + 9);
  char v6 = *(unsigned char *)(v1 + 10);
  char v7 = *(unsigned char *)(v1 + 11);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v10 = v3;
  char v11 = v4;
  char v12 = v5;
  char v13 = v6;
  SizedHalfOpenCircularGauge.init(configuration:isComplication:indicatorStyle:gradient:)(&v10, 1, v7, v8, (uint64_t)__src);
  uint64_t v10 = v3;
  char v11 = v4;
  char v12 = v5;
  char v13 = v6;
  SizedHalfOpenCircularGauge.init(configuration:isComplication:indicatorStyle:gradient:)(&v10, 0, v7, v8, (uint64_t)&__src[160]);
  memcpy(a1, __src, 0x140uLL);
  return swift_bridgeObjectRetain_n();
}

uint64_t SizedHalfOpenCircularGauge.effectivePrimaryTint.getter()
{
  long long v1 = v0[7];
  long long v20 = v0[6];
  long long v21 = v1;
  long long v2 = v0[9];
  long long v22 = v0[8];
  long long v23 = v2;
  long long v3 = v0[3];
  long long v16 = v0[2];
  long long v17 = v3;
  long long v4 = v0[5];
  long long v18 = v0[4];
  long long v19 = v4;
  long long v5 = v0[1];
  long long v14 = *v0;
  long long v15 = v5;
  uint64_t v6 = *((void *)&v16 + 1);
  uint64_t v7 = v17;
  char v8 = BYTE8(v17);
  outlined retain of SizedHalfOpenCircularGauge((uint64_t)&v14);
  outlined copy of Environment<(Color, Color)?>.Content(v6, v7, v8);
  uint64_t v9 = specialized Environment.wrappedValue.getter(v6, v7, v8);
  outlined consume of Environment<(Color, Color)?>.Content(v6, v7, v8);
  if (!v9)
  {
    if ((void)v15)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v11 = *((void *)&v15 + 1);
      uint64_t v12 = v16;
      outlined copy of Environment<HoverEffect?>.Content(*((void *)&v15 + 1), v16);
      uint64_t v10 = specialized Environment.wrappedValue.getter(v11, v12);
      outlined consume of Environment<AnyShapeStyle?>.Content(v11, v12);
      if (v10) {
        goto LABEL_7;
      }
      static Color.primary.getter();
    }
    uint64_t v10 = AnyShapeStyle.init<A>(_:)();
LABEL_7:
    outlined release of SizedHalfOpenCircularGauge((uint64_t)&v14);
    return v10;
  }
  swift_release();
  outlined release of SizedHalfOpenCircularGauge((uint64_t)&v14);
  return AnyShapeStyle.init<A>(_:)();
}

uint64_t SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[6];
  long long v4 = v1[8];
  long long v5 = v1[9];
  v34[7] = v1[7];
  v34[8] = v4;
  v34[9] = v5;
  long long v6 = v1[3];
  v34[2] = v1[2];
  v34[3] = v6;
  long long v7 = v1[5];
  v34[4] = v1[4];
  v34[5] = v7;
  v34[6] = v3;
  long long v8 = v1[1];
  v34[0] = *v1;
  v34[1] = v8;
  uint64_t v9 = v7;
  uint64_t v10 = BYTE8(v7);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, BYTE8(v7));
  specialized Environment.wrappedValue.getter(v9, v10);
  outlined consume of Environment<Bool?>.Content(v9, v10);
  uint64_t v11 = (_OWORD *)swift_allocObject();
  long long v12 = v1[7];
  v11[7] = v1[6];
  v11[8] = v12;
  long long v13 = v1[9];
  v11[9] = v1[8];
  v11[10] = v13;
  long long v14 = v1[3];
  char v11[3] = v1[2];
  float64x2_t v11[4] = v14;
  long long v15 = v1[5];
  v11[5] = v1[4];
  v11[6] = v15;
  long long v16 = v1[1];
  v11[1] = *v1;
  void v11[2] = v16;
  outlined retain of SizedHalfOpenCircularGauge((uint64_t)v34);
  static Alignment.center.getter();
  _FrameLayout.init(width:height:alignment:)();
  uint64_t v17 = v28;
  char v18 = v29;
  uint64_t v19 = v30;
  char v20 = v31;
  uint64_t v25 = v33;
  uint64_t v26 = v32;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v22 = static VerticalAlignment.center.getter();
  *(void *)char v35 = *(void *)&v34[0];
  *(_DWORD *)&v35[7] = *(_DWORD *)((char *)v34 + 7);
  outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?((uint64_t)&v35[8], (uint64_t)v36, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel);
  uint64_t result = outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?((uint64_t)v36, (uint64_t)&v27, &lazy cache variable for type metadata for GaugeStyleConfiguration.CurrentValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.CurrentValueLabel);
  char v24 = v27;
  *(void *)a1 = partial apply for closure #1 in SizedHalfOpenCircularGauge.body.getter;
  *(void *)(a1 + 8) = v11;
  *(void *)(a1 + 16) = v17;
  *(unsigned char *)(a1 + 24) = v18;
  *(void *)(a1 + 32) = v19;
  *(unsigned char *)(a1 + 40) = v20;
  *(void *)(a1 + 48) = v26;
  *(void *)(a1 + 56) = v25;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  *(_WORD *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = KeyPath;
  *(void *)(a1 + 88) = 0x3F847AE147AE147BLL;
  *(void *)(a1 + 96) = v22;
  *(void *)(a1 + 104) = 0;
  *(unsigned char *)(a1 + 112) = 1;
  *(unsigned char *)(a1 + 113) = v24;
  return result;
}

uint64_t closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  long long v5 = *(_OWORD *)(a1 + 112);
  v57[6] = *(_OWORD *)(a1 + 96);
  v57[7] = v5;
  long long v6 = *(_OWORD *)(a1 + 144);
  v57[8] = *(_OWORD *)(a1 + 128);
  v57[9] = v6;
  long long v7 = *(_OWORD *)(a1 + 48);
  v57[2] = *(_OWORD *)(a1 + 32);
  v57[3] = v7;
  long long v8 = *(_OWORD *)(a1 + 80);
  v57[4] = *(_OWORD *)(a1 + 64);
  v57[5] = v8;
  long long v9 = *(_OWORD *)(a1 + 16);
  v57[0] = *(_OWORD *)a1;
  v57[1] = v9;
  SizedHalfOpenCircularGauge.centerContent(proxy:)(&v58);
  int64x2_t v10 = v58;
  long long v11 = v59[0];
  long long v12 = v59[1];
  char v48 = BYTE1(v59[2]);
  uint64_t v13 = LOBYTE(v59[2]);
  *(int64x2_t *)unsigned int v52 = v58;
  *(_OWORD *)&v52[16] = v59[0];
  *(_OWORD *)&v52[32] = v59[1];
  *(_WORD *)&v52[48] = v59[2];
  long long v14 = *(_OWORD *)(a2 + 16);
  v57[0] = *(_OWORD *)a2;
  v57[1] = v14;
  v57[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v57[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(0, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
  lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>();
  View.baselineOffset(_:)();
  outlined consume of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(v10.i64[0], v10.i64[1], v11, *((uint64_t *)&v11 + 1), v12, *((uint64_t *)&v12 + 1), v13, v48);
  v65[2] = v57[2];
  v65[3] = v57[3];
  uint64_t v66 = *(void *)&v57[4];
  v65[1] = v57[1];
  v65[0] = v57[0];
  long long v15 = *(_OWORD *)(a2 + 16);
  int64x2_t v58 = *(int64x2_t *)a2;
  v59[0] = v15;
  v59[1] = *(_OWORD *)(a2 + 32);
  LODWORD(v59[2]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  double v17 = v16 * 0.7;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v17, 0, 0.0, 1, (uint64_t)&v69, 0.0, 1, 0.0, 1);
  outlined release of ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>((uint64_t)v65);
  uint64_t v18 = static HorizontalAlignment.center.getter();
  closure #1 in closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter(a1, a2, (uint64_t)__src);
  v82[320] = 1;
  memcpy(&v82[7], __src, 0x139uLL);
  *(void *)long long v62 = *(void *)a1;
  *(_DWORD *)&v62[7] = *(_DWORD *)(a1 + 7);
  outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?((uint64_t)&v62[10], (uint64_t)&v63, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel);
  outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?((uint64_t)&v63, (uint64_t)&v68, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel);
  if ((v68 & 1) != 0
    || (outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?((uint64_t)&v62[9], (uint64_t)&v64, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel), outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?((uint64_t)&v64, (uint64_t)&v67, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel), (v67 & 1) != 0))
  {
    uint64_t v19 = 0x3FF921FB54442D18;
  }
  else
  {
    uint64_t v19 = 0x4000C152382D7365;
  }
  uint64_t v20 = *(void *)(a1 + 96);
  uint64_t v21 = *(unsigned __int8 *)(a1 + 104);
  outlined retain of SizedHalfOpenCircularGauge(a1);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v20, v21);
  specialized Environment.wrappedValue.getter(v20, v21, (uint64_t *)v57);
  outlined consume of Environment<Bool?>.Content(v20, v21);
  if ((v57[0] & 2) == 0
    || (uint64_t v22 = *(void *)(a1 + 112),
        uint64_t v23 = *(unsigned __int8 *)(a1 + 120),
        outlined copy of Environment<MenuActionDismissBehavior>.Content(v22, v23),
        char v24 = specialized Environment.wrappedValue.getter(v22, v23),
        outlined consume of Environment<Bool?>.Content(v22, v23),
        uint64_t v25 = 0,
        (v24 & 1) == 0))
  {
    uint64_t v25 = *(void *)v62;
  }
  long long v26 = *(_OWORD *)(a1 + 112);
  v57[6] = *(_OWORD *)(a1 + 96);
  v57[7] = v26;
  long long v27 = *(_OWORD *)(a1 + 144);
  v57[8] = *(_OWORD *)(a1 + 128);
  v57[9] = v27;
  long long v28 = *(_OWORD *)(a1 + 48);
  v57[2] = *(_OWORD *)(a1 + 32);
  v57[3] = v28;
  long long v29 = *(_OWORD *)(a1 + 80);
  v57[4] = *(_OWORD *)(a1 + 64);
  v57[5] = v29;
  long long v30 = *(_OWORD *)(a1 + 16);
  v57[0] = *(_OWORD *)a1;
  v57[1] = v30;
  uint64_t v31 = SizedHalfOpenCircularGauge.effectivePrimaryTint.getter();
  outlined release of SizedHalfOpenCircularGauge(a1);
  uint64_t v32 = *(void *)(a1 + 40);
  uint64_t v33 = *(void *)(a1 + 48);
  char v34 = *(unsigned char *)(a1 + 56);
  outlined retain of SizedHalfOpenCircularGauge(a1);
  outlined retain of SizedHalfOpenCircularGauge(a1);
  outlined copy of Environment<(Color, Color)?>.Content(v32, v33, v34);
  uint64_t v35 = specialized Environment.wrappedValue.getter(v32, v33, v34);
  uint64_t v37 = v36;
  outlined consume of Environment<(Color, Color)?>.Content(v32, v33, v34);
  if (v35)
  {
    swift_release();
    outlined release of SizedHalfOpenCircularGauge(a1);
    *(void *)&v57[0] = v37;
    uint64_t v35 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    outlined release of SizedHalfOpenCircularGauge(a1);
  }
  outlined release of SizedHalfOpenCircularGauge(a1);
  char v38 = *(unsigned char *)(a1 + 11);
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v40 = swift_getKeyPath();
  uint64_t v41 = swift_getKeyPath();
  uint64_t v42 = swift_getKeyPath();
  v50[8] = v77;
  v50[9] = v78;
  v50[10] = v79;
  uint64_t v51 = v80;
  v50[4] = v73;
  v50[5] = v74;
  v50[6] = v75;
  v50[7] = v76;
  v50[0] = v69;
  v50[1] = v70;
  v50[2] = v71;
  v50[3] = v72;
  *(_OWORD *)unsigned int v52 = (unint64_t)v18;
  v52[16] = 1;
  memcpy(&v52[17], v82, 0x140uLL);
  v57[8] = v77;
  v57[9] = v78;
  v57[10] = v79;
  *(void *)&v57[11] = v80;
  v57[4] = v73;
  v57[5] = v74;
  v57[6] = v75;
  v57[7] = v76;
  v57[0] = v69;
  v57[1] = v70;
  v57[2] = v71;
  v57[3] = v72;
  memcpy((char *)&v57[11] + 8, v52, 0x151uLL);
  char v56 = 0;
  char v55 = 0;
  char v54 = 0;
  char v53 = 0;
  memcpy((void *)a3, v57, 0x210uLL);
  char v43 = v56;
  char v44 = v55;
  char v45 = v54;
  char v46 = v53;
  *(void *)(a3 + 528) = v19;
  *(void *)(a3 + 536) = v25;
  *(void *)(a3 + 544) = v31;
  *(void *)(a3 + 552) = v35;
  *(unsigned char *)(a3 + 560) = v38;
  *(void *)(a3 + 568) = v40;
  *(unsigned char *)(a3 + 576) = v43;
  *(void *)(a3 + 584) = v41;
  *(unsigned char *)(a3 + 592) = v44;
  *(void *)(a3 + 600) = v42;
  *(unsigned char *)(a3 + 608) = v45;
  *(void *)(a3 + 616) = KeyPath;
  *(unsigned char *)(a3 + 624) = v46;
  outlined retain of ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>((uint64_t)v50);
  outlined retain of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>((uint64_t)v52);
  swift_retain();
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v40, 0);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v41, 0);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v42, 0);
  outlined copy of Environment<HoverEffect?>.Content(KeyPath, 0);
  swift_release();
  swift_release();
  outlined consume of Environment<Bool?>.Content(v40, 0);
  outlined consume of Environment<Bool?>.Content(v41, 0);
  outlined consume of Environment<Bool?>.Content(v42, 0);
  outlined consume of Environment<AnyShapeStyle?>.Content(KeyPath, 0);
  int64x2_t v58 = (int64x2_t)(unint64_t)v18;
  LOBYTE(v59[0]) = 1;
  memcpy((char *)v59 + 1, v82, 0x140uLL);
  outlined release of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>((uint64_t)&v58);
  v60[8] = v77;
  v60[9] = v78;
  v60[10] = v79;
  uint64_t v61 = v80;
  v60[4] = v73;
  v60[5] = v74;
  v60[6] = v75;
  v60[7] = v76;
  v60[0] = v69;
  v60[1] = v70;
  v60[2] = v71;
  v60[3] = v72;
  return outlined release of ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>((uint64_t)v60);
}

uint64_t SizedHalfOpenCircularGauge.centerContent(proxy:)@<X0>(int64x2_t *a1@<X8>)
{
  long long v3 = v1[7];
  long long v23 = v1[6];
  long long v24 = v3;
  long long v4 = v1[9];
  long long v25 = v1[8];
  long long v26 = v4;
  long long v5 = v1[3];
  long long v19 = v1[2];
  long long v20 = v5;
  long long v6 = v1[5];
  long long v21 = v1[4];
  long long v22 = v6;
  long long v7 = v1[1];
  v18[0] = *v1;
  v18[1] = v7;
  __int8 v8 = BYTE8(v18[0]);
  if (BYTE8(v18[0]))
  {
    uint64_t KeyPath = 0;
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    int64x2_t v13 = 0uLL;
  }
  else
  {
    GeometryProxy.size.getter();
    static Font.Weight.medium.getter();
    static Font.system(size:weight:design:)();
    uint64_t v10 = Font.leading(_:)();
    swift_release();
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t v14 = *((void *)&v19 + 1);
    uint64_t v15 = v20;
    char v16 = BYTE8(v20);
    outlined retain of SizedHalfOpenCircularGauge((uint64_t)v18);
    outlined copy of Environment<(Color, Color)?>.Content(v14, v15, v16);
    uint64_t v12 = specialized Environment.wrappedValue.getter(v14, v15, v16);
    outlined consume of Environment<(Color, Color)?>.Content(v14, v15, v16);
    if (v12) {
      swift_release();
    }
    outlined release of SizedHalfOpenCircularGauge((uint64_t)v18);
    uint64_t v11 = swift_getKeyPath();
    uint64_t result = swift_getKeyPath();
    int64x2_t v13 = vdupq_n_s64(1uLL);
    v13.i64[0] = result;
  }
  a1->i64[0] = KeyPath;
  a1->i64[1] = v10;
  a1[1].i64[0] = v11;
  a1[1].i64[1] = v12;
  a1[2] = v13;
  a1[3].i8[0] = 0;
  a1[3].i8[1] = v8;
  return result;
}

uint64_t closure #1 in closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  SizedHalfOpenCircularGauge.bottomContent(proxy:)((long long *)a2, (uint64_t)v17);
  double v6 = *(double *)(a1 + 152);
  long long v7 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v7;
  v20[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v20[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  double v9 = v6 * v8;
  long long v10 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v10;
  v20[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v20[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  double v12 = v11 * 0.3;
  static Alignment.center.getter();
  specialized View.frame(minWidth:idealWidth:maxWidth:minHeight:idealHeight:maxHeight:alignment:)(0.0, 1, 0.0, 1, v9, 0, 0.0, 1, __src, 0.0, 1, v12, 0);
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)v17);
  memcpy(__dst, __src, sizeof(__dst));
  memcpy(v19, __src, 0x110uLL);
  long long v13 = *(_OWORD *)(a2 + 16);
  v20[0] = *(_OWORD *)a2;
  v20[1] = v13;
  v20[2] = *(_OWORD *)(a2 + 32);
  LODWORD(v20[3]) = *(_DWORD *)(a2 + 48);
  GeometryProxy.size.getter();
  type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(0, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
  lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>();
  View.baselineOffset(_:)();
  outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>((uint64_t)__dst);
  memcpy(v16, v20, sizeof(v16));
  uint64_t KeyPath = swift_getKeyPath();
  memcpy(v19, v16, 0x120uLL);
  v19[36] = KeyPath;
  LOBYTE(v19[37]) = 1;
  char v21 = 1;
  memcpy((char *)v20 + 7, v19, 0x129uLL);
  *(void *)a3 = 0;
  *(unsigned char *)(a3 + 8) = 1;
  memcpy((void *)(a3 + 9), v20, 0x130uLL);
  memcpy(__src, v16, sizeof(__src));
  uint64_t v23 = KeyPath;
  char v24 = 1;
  outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)v19);
  return outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>((uint64_t)__src);
}

uint64_t SizedHalfOpenCircularGauge.bottomContent(proxy:)@<X0>(long long *a1@<X0>, uint64_t a2@<X8>)
{
  long long v4 = a1[1];
  long long v44 = *a1;
  long long v45 = v4;
  long long v46 = a1[2];
  int v47 = *((_DWORD *)a1 + 12);
  long long v5 = v2[7];
  long long v40 = v2[6];
  long long v41 = v5;
  long long v6 = v2[9];
  long long v42 = v2[8];
  long long v43 = v6;
  long long v7 = v2[3];
  long long v36 = v2[2];
  long long v37 = v7;
  long long v8 = v2[5];
  long long v38 = v2[4];
  long long v39 = v8;
  long long v9 = v2[1];
  v35[0] = *v2;
  v35[1] = v9;
  uint64_t v28 = static VerticalAlignment.center.getter();
  closure #1 in SizedHalfOpenCircularGauge.bottomContent(proxy:)((uint64_t)v35, (uint64_t)&v29);
  uint64_t v26 = *((void *)&v29 + 1);
  uint64_t v27 = v29;
  uint64_t v24 = *((void *)&v30 + 1);
  uint64_t v25 = v30;
  uint64_t v22 = *((void *)&v31 + 1);
  uint64_t v23 = v31;
  uint64_t v21 = v32;
  char v19 = v34;
  char v20 = v33;
  long long v29 = v44;
  long long v30 = v45;
  long long v31 = v46;
  LODWORD(v32) = v47;
  GeometryProxy.size.getter();
  static Font.Weight.medium.getter();
  LOBYTE(v29) = 4;
  static Font.system(size:weight:design:)();
  LOBYTE(v29) = 1;
  uint64_t v10 = Font.leading(_:)();
  swift_release();
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = *((void *)&v36 + 1);
  uint64_t v14 = v37;
  char v15 = BYTE8(v37);
  outlined retain of SizedHalfOpenCircularGauge((uint64_t)v35);
  outlined copy of Environment<(Color, Color)?>.Content(v13, v14, v15);
  uint64_t v16 = specialized Environment.wrappedValue.getter(v13, v14, v15);
  outlined consume of Environment<(Color, Color)?>.Content(v13, v14, v15);
  if (v16) {
    swift_release();
  }
  outlined release of SizedHalfOpenCircularGauge((uint64_t)v35);
  uint64_t v17 = swift_getKeyPath();
  uint64_t result = swift_getKeyPath();
  *(void *)a2 = v28;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 1;
  *(void *)(a2 + 24) = v27;
  *(void *)(a2 + 32) = v26;
  *(void *)(a2 + 40) = v25;
  *(void *)(a2 + 48) = v24;
  *(void *)(a2 + 56) = v23;
  *(void *)(a2 + 64) = v22;
  *(void *)(a2 + 72) = v21;
  *(unsigned char *)(a2 + 80) = v20;
  *(unsigned char *)(a2 + 81) = v19;
  *(void *)(a2 + 88) = KeyPath;
  *(void *)(a2 + 96) = v10;
  *(void *)(a2 + 104) = v12;
  *(void *)(a2 + 112) = 0x3FF0000000000000;
  *(void *)(a2 + 120) = v17;
  *(void *)(a2 + 128) = v16;
  *(void *)(a2 + 136) = result;
  *(void *)(a2 + 144) = 1;
  *(unsigned char *)(a2 + 152) = 0;
  return result;
}

uint64_t closure #1 in SizedHalfOpenCircularGauge.bottomContent(proxy:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(unsigned char *)(a1 + 9);
  if (v3)
  {
    uint64_t KeyPath = 0;
    uint64_t v5 = 0;
    uint64_t result = 0;
    char v7 = 0;
    double v8 = 0.0;
  }
  else
  {
    uint64_t v5 = *(unsigned char *)(a1 + 10) & 1;
    GeometryProxy.size.getter();
    double v8 = v10 * 1.5 / *(double *)(a1 + 128);
    uint64_t KeyPath = swift_getKeyPath();
    uint64_t result = swift_getKeyPath();
    char v7 = 2;
  }
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = KeyPath;
  *(void *)(a2 + 16) = 0;
  *(double *)(a2 + 24) = v8;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = v5;
  *(void *)(a2 + 48) = result;
  *(unsigned char *)(a2 + 56) = v7;
  *(unsigned char *)(a2 + 57) = v3 & 1;
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance SizedHalfOpenCircularGauge()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

double implicit closure #2 in implicit closure #1 in RingOverlay.body.getter@<D0>(uint64_t a1@<X8>)
{
  return RingOverlay.content(_:)(a1);
}

double RingOverlay.content(_:)@<D0>(uint64_t a1@<X8>)
{
  long long v3 = v1[5];
  long long v57 = v1[4];
  long long v58 = v3;
  unsigned __int8 v59 = *((unsigned char *)v1 + 96);
  long long v4 = v1[1];
  long long v53 = *v1;
  long long v54 = v4;
  long long v5 = v1[3];
  long long v55 = v1[2];
  long long v56 = v5;
  GeometryProxy.size.getter();
  double v7 = v6;
  GeometryProxy.size.getter();
  double v9 = v8;
  double v10 = *((double *)&v53 + 1);
  double v11 = *(double *)&v53 * 0.5 + 1.57079633;
  double v12 = v11 + 6.28318531 - *(double *)&v53;
  int v13 = v55;
  long long v42 = v57;
  long long v43 = v58;
  LOBYTE(v44) = v59;
  long long v38 = v53;
  long long v39 = v54;
  long long v40 = v55;
  long long v41 = v56;
  uint64_t v14 = RingOverlay.resolveTint(_:startAngle:endAngle:)(v54, v11, v12);
  uint64_t v15 = v14;
  if (*((void *)&v54 + 1))
  {
    long long v42 = v57;
    long long v43 = v58;
    LOBYTE(v44) = v59;
    long long v38 = v53;
    long long v39 = v54;
    long long v40 = v55;
    long long v41 = v56;
    uint64_t v16 = swift_retain();
    uint64_t v17 = RingOverlay.resolveTint(_:startAngle:endAngle:)(v16, v11, v12);
    swift_release();
  }
  else if ((_BYTE)v55)
  {
    *(void *)&long long v38 = v14;
    DWORD2(v38) = 1051931443;
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(0, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    swift_retain();
    uint64_t v17 = AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    swift_retain();
    uint64_t v17 = v15;
  }
  uint64_t v18 = *((void *)&v58 + 1);
  uint64_t v19 = v59;
  outlined retain of RingOverlay((uint64_t)&v53);
  outlined copy of Environment<HoverEffect?>.Content(v18, v19);
  uint64_t v20 = specialized Environment.wrappedValue.getter(v18, v19);
  outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  outlined release of RingOverlay((uint64_t)&v53);
  if (!v20)
  {
    swift_retain();
    uint64_t v20 = v15;
  }
  if (v9 >= v7) {
    double v21 = v7;
  }
  else {
    double v21 = v9;
  }
  double v22 = v21 / 10.5;
  double v23 = v10 * (v12 - v11);
  double v24 = v11 + v23;
  if (v13) {
    double v25 = v11 + v23;
  }
  else {
    double v25 = v12;
  }
  double v26 = (v21 - v22) * 0.5;
  uint64_t v27 = static Alignment.center.getter();
  uint64_t v29 = v28;
  closure #1 in RingOverlay.content(_:)((uint64_t)&v53, v17, v15, v20, (uint64_t)&v38, v22, v26, v11, v12, v25, v24);
  swift_release();
  swift_release();
  swift_release();
  *(void *)a1 = v27;
  *(void *)(a1 + 8) = v29;
  long long v30 = v51;
  *(_OWORD *)(a1 + 208) = v50;
  *(_OWORD *)(a1 + 224) = v30;
  *(_OWORD *)(a1 + 240) = v52[0];
  *(_OWORD *)(a1 + 254) = *(_OWORD *)((char *)v52 + 14);
  long long v31 = v47;
  *(_OWORD *)(a1 + 144) = v46;
  *(_OWORD *)(a1 + 160) = v31;
  long long v32 = v49;
  *(_OWORD *)(a1 + 176) = v48;
  *(_OWORD *)(a1 + 192) = v32;
  long long v33 = v43;
  *(_OWORD *)(a1 + 80) = v42;
  *(_OWORD *)(a1 + 96) = v33;
  long long v34 = v45;
  *(_OWORD *)(a1 + 112) = v44;
  *(_OWORD *)(a1 + 128) = v34;
  long long v35 = v39;
  *(_OWORD *)(a1 + 16) = v38;
  *(_OWORD *)(a1 + 32) = v35;
  double result = *(double *)&v40;
  long long v37 = v41;
  *(_OWORD *)(a1 + 48) = v40;
  *(_OWORD *)(a1 + 64) = v37;
  return result;
}

uint64_t RingOverlay.resolveTint(_:startAngle:endAngle:)(uint64_t a1, double a2, double a3)
{
  uint64_t v7 = *(void *)(v3 + 72);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  AnyShapeStyle.as<A>(type:)();
  uint64_t v9 = v14[0];
  if (v14[0])
  {
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
    specialized Environment.wrappedValue.getter(v7, v8, v14);
    outlined consume of Environment<Bool?>.Content(v7, v8);
    if (LOBYTE(v14[0]) == 1)
    {
      uint64_t v10 = Gradient.reversed.getter();
      swift_bridgeObjectRelease();
      uint64_t v9 = v10;
    }
    static UnitPoint.center.getter();
    v14[0] = v9;
    v14[1] = v11;
    v14[2] = v12;
    *(double *)&v14[3] = a2;
    *(double *)&void v14[4] = a3;
    return AnyShapeStyle.init<A>(_:)();
  }
  else
  {
    swift_retain();
  }
  return a1;
}

uint64_t closure #1 in RingOverlay.content(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>, double a6@<D0>, double a7@<D1>, double a8@<D2>, double a9@<D3>, double a10@<D4>, double a11@<D6>)
{
  int v19 = *(unsigned __int8 *)(a1 + 32);
  if (v19 != 1)
  {
    uint64_t v23 = *(void *)(a1 + 40);
    uint64_t v24 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of RingOverlay(a1);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v23, v24);
    specialized Environment.wrappedValue.getter(v23, v24, (uint64_t *)v86);
    outlined consume of Environment<Bool?>.Content(v23, v24);
    if ((v86[0] & 2) != 0)
    {
      uint64_t v25 = *(void *)(a1 + 56);
      uint64_t v26 = *(unsigned __int8 *)(a1 + 64);
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v25, v26);
      char v27 = specialized Environment.wrappedValue.getter(v25, v26);
      outlined consume of Environment<Bool?>.Content(v25, v26);
      outlined release of RingOverlay(a1);
      if (v27)
      {
        uint64_t v72 = 0;
        __int16 v70 = 0;
        double v69 = 0.0;
        float v22 = 0.3;
LABEL_10:
        a3 = a2;
        double v65 = 0.0;
        double v66 = 0.0;
        a9 = 0.0;
        goto LABEL_11;
      }
    }
    else
    {
      outlined release of RingOverlay(a1);
    }
    uint64_t v72 = 0;
    __int16 v70 = 0;
    double v69 = 0.0;
    float v22 = 1.0;
    goto LABEL_10;
  }
  double v21 = 0.0;
  if (*(double *)(a1 + 8) > 0.0) {
    double v21 = 1.0;
  }
  float v22 = v21;
  swift_retain();
  __int16 v70 = 256;
  double v69 = a6;
  double v65 = a8;
  double v66 = a7;
  uint64_t v72 = a2;
LABEL_11:
  swift_retain();
  uint64_t v28 = static Alignment.center.getter();
  uint64_t v67 = v29;
  uint64_t v68 = v28;
  if (!v19)
  {
    static Color.black.getter();
    uint64_t v43 = *(void *)(a1 + 40);
    uint64_t v44 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of RingOverlay(a1);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v43, v44);
    specialized Environment.wrappedValue.getter(v43, v44, (uint64_t *)v86);
    outlined consume of Environment<Bool?>.Content(v43, v44);
    if ((v86[0] & 2) != 0)
    {
      uint64_t v45 = *(void *)(a1 + 56);
      uint64_t v46 = *(unsigned __int8 *)(a1 + 64);
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v45, v46);
      specialized Environment.wrappedValue.getter(v45, v46);
      outlined consume of Environment<Bool?>.Content(v45, v46);
    }
    outlined release of RingOverlay(a1);
    uint64_t v38 = Color.opacity(_:)();
    swift_release();
    static Alignment.center.getter();
    _FrameLayout.init(width:height:alignment:)();
    uint64_t v62 = v106;
    uint64_t v63 = v107;
    uint64_t v74 = v108;
    uint64_t v47 = v109;
    uint64_t v32 = v110;
    uint64_t v31 = v111;
    uint64_t v48 = *(void *)(a1 + 40);
    uint64_t v49 = *(unsigned __int8 *)(a1 + 48);
    outlined retain of RingOverlay(a1);
    outlined copy of Environment<MenuActionDismissBehavior>.Content(v48, v49);
    specialized Environment.wrappedValue.getter(v48, v49, (uint64_t *)v86);
    outlined consume of Environment<Bool?>.Content(v48, v49);
    if ((v86[0] & 2) != 0)
    {
      uint64_t v50 = *(void *)(a1 + 56);
      uint64_t v51 = *(unsigned __int8 *)(a1 + 64);
      outlined copy of Environment<MenuActionDismissBehavior>.Content(v50, v51);
      char v52 = specialized Environment.wrappedValue.getter(v50, v51);
      outlined consume of Environment<Bool?>.Content(v50, v51);
      outlined release of RingOverlay(a1);
      if (v52)
      {
        unsigned int v53 = 0;
LABEL_20:
        uint64_t v54 = v53 | 0x10000000000;
        swift_retain();
        uint64_t v40 = v54;
        uint64_t v39 = a4;
        uint64_t v34 = v74;
        char v30 = 18;
        uint64_t v37 = 256;
        double v41 = a7;
        double v42 = a6;
        uint64_t v33 = v47;
        uint64_t v36 = v62;
        uint64_t v35 = v63;
        goto LABEL_21;
      }
    }
    else
    {
      outlined release of RingOverlay(a1);
    }
    unsigned int v53 = 1065353216;
    goto LABEL_20;
  }
  char v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v35 = 0;
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  double v41 = 0.0;
  a11 = 0.0;
  double v42 = 0.0;
LABEL_21:
  uint64_t v75 = v34;
  uint64_t v64 = v33;
  *(double *)&long long v76 = a6;
  *((double *)&v76 + 1) = a7;
  *(double *)&long long v77 = a8;
  *((double *)&v77 + 1) = a10;
  *(void *)&long long v78 = a3;
  *((float *)&v78 + 2) = v22;
  WORD6(v78) = 256;
  *(void *)&long long v79 = v38;
  *((void *)&v79 + 1) = v37;
  *(void *)&long long v80 = v36;
  *((void *)&v80 + 1) = v35;
  *(void *)&long long v81 = v34;
  *((void *)&v81 + 1) = v33;
  *(void *)&long long v82 = v32;
  *((void *)&v82 + 1) = v31;
  *(double *)&long long v83 = a11;
  *((double *)&v83 + 1) = v41;
  *(void *)&long long v84 = 0;
  BYTE8(v84) = v30;
  *(_DWORD *)((char *)&v84 + 9) = *(_DWORD *)v105;
  HIDWORD(v84) = *(_DWORD *)&v105[3];
  *(void *)&long long v85 = v68;
  *((void *)&v85 + 1) = v67;
  *(_OWORD *)&v86[6] = v76;
  *(_OWORD *)&v86[22] = v77;
  *(_OWORD *)&v86[86] = v81;
  *(_OWORD *)&v86[70] = v80;
  *(_OWORD *)&v86[54] = v79;
  *(_OWORD *)&v86[38] = v78;
  *(_OWORD *)&v86[150] = v85;
  *(_OWORD *)&v86[134] = v84;
  *(_OWORD *)&v86[118] = v83;
  *(_OWORD *)&v86[102] = v82;
  long long v55 = *(_OWORD *)&v86[96];
  *(_OWORD *)(a5 + 154) = *(_OWORD *)&v86[112];
  long long v56 = *(_OWORD *)&v86[144];
  *(_OWORD *)(a5 + 170) = *(_OWORD *)&v86[128];
  *(_OWORD *)(a5 + 186) = v56;
  *(void *)(a5 + 200) = *(void *)&v86[158];
  long long v57 = *(_OWORD *)&v86[32];
  *(_OWORD *)(a5 + 90) = *(_OWORD *)&v86[48];
  long long v58 = *(_OWORD *)&v86[80];
  *(_OWORD *)(a5 + 106) = *(_OWORD *)&v86[64];
  *(_OWORD *)(a5 + 122) = v58;
  *(_OWORD *)(a5 + 138) = v55;
  long long v59 = *(_OWORD *)&v86[16];
  *(_OWORD *)(a5 + 42) = *(_OWORD *)v86;
  *(_OWORD *)(a5 + 58) = v59;
  *(_OWORD *)(a5 + 74) = v57;
  *(double *)a5 = v69;
  *(double *)(a5 + 8) = v66;
  *(double *)(a5 + 16) = v65;
  *(double *)(a5 + 24) = a9;
  *(void *)(a5 + 32) = v72;
  *(_WORD *)(a5 + 40) = v70;
  *(double *)(a5 + 208) = v42;
  *(double *)(a5 + 216) = v41;
  *(double *)(a5 + 224) = a11;
  *(double *)(a5 + 232) = a11;
  *(void *)(a5 + 240) = v39;
  *(_WORD *)(a5 + 252) = WORD2(v40);
  *(_DWORD *)(a5 + 248) = v40;
  char v60 = v30;
  swift_retain();
  outlined retain of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>((uint64_t)&v76);
  *(double *)uint64_t v87 = a6;
  *(double *)&v87[1] = a7;
  *(double *)&v87[2] = a8;
  *(double *)&v87[3] = a10;
  v87[4] = a3;
  float v88 = v22;
  __int16 v89 = 256;
  uint64_t v90 = v38;
  uint64_t v91 = v37;
  uint64_t v92 = v36;
  uint64_t v93 = v35;
  uint64_t v94 = v75;
  uint64_t v95 = v64;
  uint64_t v96 = v32;
  uint64_t v97 = v31;
  double v98 = a11;
  double v99 = v41;
  uint64_t v100 = 0;
  char v101 = v60;
  *(_DWORD *)&v102[3] = *(_DWORD *)&v105[3];
  *(_DWORD *)int v102 = *(_DWORD *)v105;
  uint64_t v103 = v68;
  uint64_t v104 = v67;
  outlined release of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>((uint64_t)v87);
  return swift_release();
}

uint64_t protocol witness for View.body.getter in conformance RingOverlay@<X0>(double (**a1)@<D0>(uint64_t a1@<X8>)@<X8>)
{
  long long v3 = *(_OWORD *)(v1 + 80);
  float64x2_t v11[4] = *(_OWORD *)(v1 + 64);
  v11[5] = v3;
  char v12 = *(unsigned char *)(v1 + 96);
  long long v4 = *(_OWORD *)(v1 + 16);
  v11[0] = *(_OWORD *)v1;
  v11[1] = v4;
  long long v5 = *(_OWORD *)(v1 + 48);
  void v11[2] = *(_OWORD *)(v1 + 32);
  char v11[3] = v5;
  uint64_t v6 = swift_allocObject();
  long long v7 = *(_OWORD *)(v1 + 80);
  *(_OWORD *)(v6 + 80) = *(_OWORD *)(v1 + 64);
  *(_OWORD *)(v6 + 96) = v7;
  *(unsigned char *)(v6 + 112) = *(unsigned char *)(v1 + 96);
  long long v8 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)(v6 + 16) = *(_OWORD *)v1;
  *(_OWORD *)(v6 + 32) = v8;
  long long v9 = *(_OWORD *)(v1 + 48);
  *(_OWORD *)(v6 + 48) = *(_OWORD *)(v1 + 32);
  *(_OWORD *)(v6 + 64) = v9;
  *a1 = partial apply for implicit closure #2 in implicit closure #1 in RingOverlay.body.getter;
  a1[1] = (double (*)@<D0>(uint64_t@<X8>))v6;
  return outlined retain of RingOverlay((uint64_t)v11);
}

uint64_t OpenRing.path(in:)@<X0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>, double a6@<D6>, double a7@<D7>)
{
  CGRectGetMidX(*(CGRect *)&a2);
  if (a6 == a7)
  {
    __sincos_stret(a6);
    v33.origin.x = a2;
    v33.origin.y = a3;
    v33.size.width = a4;
    v33.size.height = a5;
    CGRectGetMidY(v33);
    uint64_t v26 = 0x3FF0000000000000;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0x3FF0000000000000;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t result = Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    long long v15 = 0u;
    long long v16 = 0u;
    char v17 = 6;
  }
  else
  {
    v34.origin.x = a2;
    v34.origin.y = a3;
    v34.size.width = a4;
    v34.size.height = a5;
    CGRectGetMidY(v34);
    uint64_t v26 = 0x3FF0000000000000;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = 0x3FF0000000000000;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    Path.addArc(center:radius:startAngle:endAngle:clockwise:transform:)();
    memset(v24, 0, sizeof(v24));
    char v25 = 6;
    outlined init with take of Path.Storage((uint64_t)v24, (uint64_t)v32);
    outlined retain of Path.Storage((uint64_t)v32, (void (*)(void, void, void, void, void))outlined copy of Path.Storage);
    StrokeStyle.init(lineWidth:lineCap:lineJoin:miterLimit:dash:dashPhase:)();
    Path.strokedPath(_:)();
    long long v18 = v22;
    long long v19 = v21;
    char v17 = v23;
    outlined release of StrokeStyle((uint64_t)v20);
    outlined retain of Path.Storage((uint64_t)v24, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    uint64_t result = outlined retain of Path.Storage((uint64_t)v24, (void (*)(void, void, void, void, void))outlined consume of Path.Storage);
    long long v16 = v18;
    long long v15 = v19;
  }
  *(_OWORD *)a1 = v15;
  *(_OWORD *)(a1 + 16) = v16;
  *(unsigned char *)(a1 + 32) = v17;
  return result;
}

double protocol witness for Shape.path(in:) in conformance OpenRing@<D0>(uint64_t a1@<X8>, CGFloat a2@<D0>, CGFloat a3@<D1>, CGFloat a4@<D2>, CGFloat a5@<D3>)
{
  OpenRing.path(in:)((uint64_t)v9, a2, a3, a4, a5, *(double *)(v5 + 16), *(double *)(v5 + 24));
  double result = *(double *)v9;
  long long v8 = v9[1];
  *(_OWORD *)a1 = v9[0];
  *(_OWORD *)(a1 + 16) = v8;
  *(unsigned char *)(a1 + 32) = v10;
  return result;
}

__n128 protocol witness for View.body.getter in conformance OpenRing@<Q0>(uint64_t a1@<X8>)
{
  __n128 result = *(__n128 *)v1;
  long long v3 = *(_OWORD *)(v1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)v1;
  *(_OWORD *)(a1 + 16) = v3;
  *(_WORD *)(a1 + 32) = 256;
  return result;
}

CGFloat protocol witness for GeometryEffect.effectValue(size:) in conformance RotationOffsetEffect@<D0>(uint64_t a1@<X8>, unint64_t a2@<D0>, unint64_t a3@<D1>)
{
  CGFloat v7 = *(double *)(v3 + 8);
  CGFloat v8 = *(double *)(v3 + 16);
  static UnitPoint.center.getter();
  CGPoint v9 = UnitPoint.in(_:)((CGSize)__PAIR128__(a3, a2));
  CGAffineTransformMakeTranslation(&t1, v7, v8);
  long long v25 = *(_OWORD *)&t1.c;
  long long v28 = *(_OWORD *)&t1.a;
  CGFloat tx = t1.tx;
  CGFloat ty = t1.ty;
  CGAffineTransformMakeTranslation(&t1, -v9.x, -v9.y);
  long long v12 = *(_OWORD *)&t1.a;
  long long v13 = *(_OWORD *)&t1.c;
  long long v14 = *(_OWORD *)&t1.tx;
  *(_OWORD *)&t1.a = v28;
  *(_OWORD *)&t1.c = v25;
  t1.CGFloat tx = tx;
  t1.CGFloat ty = ty;
  *(_OWORD *)&t2.a = v12;
  *(_OWORD *)&t2.c = v13;
  *(_OWORD *)&t2.CGFloat tx = v14;
  CGAffineTransformConcat(&v32, &t1, &t2);
  long long v26 = *(_OWORD *)&v32.c;
  long long v29 = *(_OWORD *)&v32.a;
  CGFloat v15 = v32.tx;
  CGFloat v16 = v32.ty;
  CGAffineTransform.init(rotation:)();
  *(_OWORD *)&t2.a = v29;
  *(_OWORD *)&t2.c = v26;
  t2.CGFloat tx = v15;
  t2.CGFloat ty = v16;
  CGAffineTransform v32 = t1;
  CGAffineTransformConcat(&v31, &t2, &v32);
  long long v27 = *(_OWORD *)&v31.c;
  long long v30 = *(_OWORD *)&v31.a;
  CGFloat v17 = v31.tx;
  CGFloat v18 = v31.ty;
  CGAffineTransformMakeTranslation(&t2, v9.x, v9.y);
  long long v19 = *(_OWORD *)&t2.a;
  long long v20 = *(_OWORD *)&t2.c;
  long long v21 = *(_OWORD *)&t2.tx;
  *(_OWORD *)&t2.a = v30;
  *(_OWORD *)&t2.c = v27;
  t2.CGFloat tx = v17;
  t2.CGFloat ty = v18;
  *(_OWORD *)&v32.a = v19;
  *(_OWORD *)&v32.c = v20;
  *(_OWORD *)&v32.CGFloat tx = v21;
  CGAffineTransformConcat(&v31, &t2, &v32);
  CGFloat result = v31.a;
  long long v23 = *(_OWORD *)&v31.c;
  long long v24 = *(_OWORD *)&v31.tx;
  *(_OWORD *)a1 = *(_OWORD *)&v31.a;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 24) = v23;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = v24;
  *(void *)(a1 + 64) = 0x3FF0000000000000;
  return result;
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance RotationOffsetEffect()
{
  return static GeometryEffect.makeGeometryEffect(modifier:inputs:body:)();
}

void protocol witness for ViewModifier.body(content:) in conformance RotationOffsetEffect()
{
}

__n128 protocol witness for Animatable.animatableData.getter in conformance RotationOffsetEffect@<Q0>(uint64_t a1@<X8>)
{
  *(double *)a1 = *(double *)v1 * 128.0;
  __n128 result = *(__n128 *)(v1 + 8);
  *(__n128 *)(a1 + 8) = result;
  return result;
}

__n128 protocol witness for Animatable.animatableData.setter in conformance RotationOffsetEffect(uint64_t a1)
{
  *(double *)uint64_t v1 = *(double *)a1 * 0.0078125;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v1 + 8) = result;
  return result;
}

double (*protocol witness for Animatable.animatableData.modify in conformance RotationOffsetEffect(uint64_t a1))(uint64_t a1)
{
  *(void *)(a1 + 24) = v1;
  *(double *)a1 = *(double *)v1 * 128.0;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(v1 + 8);
  return protocol witness for Animatable.animatableData.modify in conformance RotationOffsetEffect;
}

double protocol witness for Animatable.animatableData.modify in conformance RotationOffsetEffect(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 24);
  double result = *(double *)a1 * 0.0078125;
  long long v3 = *(_OWORD *)(a1 + 8);
  *(double *)uint64_t v1 = result;
  *(_OWORD *)(v1 + 8) = v3;
  return result;
}

unint64_t lazy protocol witness table accessor for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge()
{
  unint64_t result = lazy protocol witness table cache variable for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge;
  if (!lazy protocol witness table cache variable for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge);
  }
  return result;
}

uint64_t destroy for SizedHalfOpenCircularGauge(uint64_t a1)
{
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(a1 + 24), *(unsigned __int8 *)(a1 + 32));
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned char *)(a1 + 56));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 64), *(unsigned __int8 *)(a1 + 72));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 80), *(unsigned __int8 *)(a1 + 88));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 96), *(unsigned __int8 *)(a1 + 104));
  uint64_t v2 = *(void *)(a1 + 112);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 120);

  return outlined consume of Environment<Bool?>.Content(v2, v3);
}

uint64_t initializeWithCopy for SizedHalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 7) = *(_DWORD *)(a2 + 7);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 32);
  swift_bridgeObjectRetain();
  outlined copy of Environment<HoverEffect?>.Content(v4, v5);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  char v8 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<(Color, Color)?>.Content(v6, v7, v8);
  *(void *)(a1 + 40) = v6;
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = v8;
  uint64_t v9 = *(void *)(a2 + 64);
  LOBYTE(v7) = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v9, v7);
  *(void *)(a1 + 64) = v9;
  *(unsigned char *)(a1 + 72) = v7;
  uint64_t v10 = *(void *)(a2 + 80);
  LOBYTE(v7) = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v10, v7);
  *(void *)(a1 + 80) = v10;
  *(unsigned char *)(a1 + 88) = v7;
  uint64_t v11 = *(void *)(a2 + 96);
  LOBYTE(v7) = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v11, v7);
  *(void *)(a1 + 96) = v11;
  *(unsigned char *)(a1 + 104) = v7;
  uint64_t v12 = *(void *)(a2 + 112);
  LOBYTE(v7) = *(unsigned char *)(a2 + 120);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v7);
  *(void *)(a1 + 112) = v12;
  *(unsigned char *)(a1 + 120) = v7;
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  long long v13 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v13;
  return a1;
}

uint64_t assignWithCopy for SizedHalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(unsigned char *)(a1 + 9) = *(unsigned char *)(a2 + 9);
  *(unsigned char *)(a1 + 10) = *(unsigned char *)(a2 + 10);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 32);
  outlined copy of Environment<HoverEffect?>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = v5;
  outlined consume of Environment<AnyShapeStyle?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a2 + 48);
  char v10 = *(unsigned char *)(a2 + 56);
  outlined copy of Environment<(Color, Color)?>.Content(v8, v9, v10);
  uint64_t v11 = *(void *)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  char v13 = *(unsigned char *)(a1 + 56);
  *(void *)(a1 + 40) = v8;
  *(void *)(a1 + 48) = v9;
  *(unsigned char *)(a1 + 56) = v10;
  outlined consume of Environment<(Color, Color)?>.Content(v11, v12, v13);
  uint64_t v14 = *(void *)(a2 + 64);
  LOBYTE(v9) = *(unsigned char *)(a2 + 72);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v14, v9);
  uint64_t v15 = *(void *)(a1 + 64);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = v14;
  *(unsigned char *)(a1 + 72) = v9;
  outlined consume of Environment<Bool?>.Content(v15, v16);
  uint64_t v17 = *(void *)(a2 + 80);
  LOBYTE(v9) = *(unsigned char *)(a2 + 88);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v17, v9);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 88);
  *(void *)(a1 + 80) = v17;
  *(unsigned char *)(a1 + 88) = v9;
  outlined consume of Environment<Bool?>.Content(v18, v19);
  uint64_t v20 = *(void *)(a2 + 96);
  LOBYTE(v9) = *(unsigned char *)(a2 + 104);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v20, v9);
  uint64_t v21 = *(void *)(a1 + 96);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 96) = v20;
  *(unsigned char *)(a1 + 104) = v9;
  outlined consume of Environment<Bool?>.Content(v21, v22);
  uint64_t v23 = *(void *)(a2 + 112);
  LOBYTE(v9) = *(unsigned char *)(a2 + 120);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v23, v9);
  uint64_t v24 = *(void *)(a1 + 112);
  uint64_t v25 = *(unsigned __int8 *)(a1 + 120);
  *(void *)(a1 + 112) = v23;
  *(unsigned char *)(a1 + 120) = v9;
  outlined consume of Environment<Bool?>.Content(v24, v25);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  return a1;
}

uint64_t assignWithTake for SizedHalfOpenCircularGauge(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(_WORD *)(a1 + 9) = *(_WORD *)(a2 + 9);
  *(unsigned char *)(a1 + 11) = *(unsigned char *)(a2 + 11);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of Environment<AnyShapeStyle?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 56);
  uint64_t v8 = *(void *)(a1 + 40);
  uint64_t v9 = *(void *)(a1 + 48);
  char v10 = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(unsigned char *)(a1 + 56) = v7;
  outlined consume of Environment<(Color, Color)?>.Content(v8, v9, v10);
  char v11 = *(unsigned char *)(a2 + 72);
  uint64_t v12 = *(void *)(a1 + 64);
  uint64_t v13 = *(unsigned __int8 *)(a1 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = v11;
  outlined consume of Environment<Bool?>.Content(v12, v13);
  char v14 = *(unsigned char *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 80);
  uint64_t v16 = *(unsigned __int8 *)(a1 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(unsigned char *)(a1 + 88) = v14;
  outlined consume of Environment<Bool?>.Content(v15, v16);
  char v17 = *(unsigned char *)(a2 + 104);
  uint64_t v18 = *(void *)(a1 + 96);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(unsigned char *)(a1 + 104) = v17;
  outlined consume of Environment<Bool?>.Content(v18, v19);
  char v20 = *(unsigned char *)(a2 + 120);
  uint64_t v21 = *(void *)(a1 + 112);
  uint64_t v22 = *(unsigned __int8 *)(a1 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(unsigned char *)(a1 + 120) = v20;
  outlined consume of Environment<Bool?>.Content(v21, v22);
  *(unsigned char *)(a1 + 121) = *(unsigned char *)(a2 + 121);
  long long v23 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v23;
  return a1;
}

uint64_t getEnumTagSinglePayload for SizedHalfOpenCircularGauge(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 16);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SizedHalfOpenCircularGauge(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 160) = 0;
    }
    if (a2) {
      *(void *)(result + 16) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SizedHalfOpenCircularGauge()
{
  return &type metadata for SizedHalfOpenCircularGauge;
}

unsigned char *storeEnumTagSinglePayload for HalfOpenCircularGauge.IndicatorStyle(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D8B950);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for HalfOpenCircularGauge.IndicatorStyle()
{
  return &type metadata for HalfOpenCircularGauge.IndicatorStyle;
}

unint64_t lazy protocol witness table accessor for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>();
    lazy protocol witness table accessor for type SizedHalfOpenCircularGauge and conformance SizedHalfOpenCircularGauge();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

void type metadata accessor for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>()
{
  if (!lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>)
  {
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(255, &lazy cache variable for type metadata for InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, MEMORY[0x1E4F40F28], MEMORY[0x1E4F40F20], MEMORY[0x1E4F40C60]);
    lazy protocol witness table accessor for type InterfaceIdiomPredicate<ComplicationInterfaceIdiom> and conformance InterfaceIdiomPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<InterfaceIdiomPredicate<ComplicationInterfaceIdiom>, SizedHalfOpenCircularGauge, SizedHalfOpenCircularGauge>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle()
{
  unint64_t result = lazy protocol witness table cache variable for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle;
  if (!lazy protocol witness table cache variable for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type HalfOpenCircularGauge.IndicatorStyle and conformance HalfOpenCircularGauge.IndicatorStyle);
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in SizedHalfOpenCircularGauge()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187D8BB14()
{
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(v0 + 40), *(unsigned __int8 *)(v0 + 48));
  outlined consume of Environment<(Color, Color)?>.Content(*(void *)(v0 + 56), *(void *)(v0 + 64), *(unsigned char *)(v0 + 72));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 80), *(unsigned __int8 *)(v0 + 88));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 96), *(unsigned __int8 *)(v0 + 104));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 112), *(unsigned __int8 *)(v0 + 120));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 128), *(unsigned __int8 *)(v0 + 136));

  return swift_deallocObject();
}

void *partial apply for closure #1 in SizedHalfOpenCircularGauge.body.getter@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = *(_OWORD *)(a1 + 16);
  v9[0] = *(_OWORD *)a1;
  v9[1] = v4;
  _OWORD v9[2] = *(_OWORD *)(a1 + 32);
  int v10 = *(_DWORD *)(a1 + 48);
  uint64_t v5 = static Alignment.center.getter();
  uint64_t v7 = v6;
  closure #1 in closure #1 in SizedHalfOpenCircularGauge.body.getter(v2 + 16, (uint64_t)v9, (uint64_t)__src);
  *a2 = v5;
  a2[1] = v7;
  return memcpy(a2 + 2, __src, 0x271uLL);
}

uint64_t outlined retain of SizedHalfOpenCircularGauge(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 112);
  unsigned int v14 = *(unsigned __int8 *)(a1 + 120);
  swift_bridgeObjectRetain();
  outlined copy of Environment<HoverEffect?>.Content(v2, v3);
  outlined copy of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v8);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v9, v10);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v13, v12);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v15, v14);
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>(255);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>(uint64_t a1)
{
}

void type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>)
  {
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>, (void (*)(uint64_t))type metadata accessor for LabelStyleWritingModifier<IconOnlyLabelStyle>);
}

uint64_t lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t outlined consume of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) == 0)
  {
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined init with take of GaugeStyleConfiguration.CurrentValueLabel?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t outlined release of SizedHalfOpenCircularGauge(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  char v6 = *(unsigned char *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 88);
  uint64_t v13 = *(void *)(a1 + 96);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 104);
  uint64_t v15 = *(void *)(a1 + 112);
  unsigned int v14 = *(unsigned __int8 *)(a1 + 120);
  swift_bridgeObjectRelease();
  outlined consume of Environment<AnyShapeStyle?>.Content(v2, v3);
  outlined consume of Environment<(Color, Color)?>.Content(v4, v5, v6);
  outlined consume of Environment<Bool?>.Content(v7, v8);
  outlined consume of Environment<Bool?>.Content(v9, v10);
  outlined consume of Environment<Bool?>.Content(v13, v12);
  outlined consume of Environment<Bool?>.Content(v15, v14);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  if ((a8 & 1) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined retain of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined copy of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a9 & 1) == 0)
  {
    swift_retain();
    return swift_retain();
  }
  return result;
}

uint64_t outlined release of VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined consume of _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  if ((a9 & 1) == 0)
  {
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t outlined release of ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    a4(255);
    unint64_t v6 = type metadata accessor for ModifiedContent();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, MEMORY[0x1E4F41100], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>();
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

void type metadata accessor for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>)
  {
    type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGMaTm_3(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>);
    }
  }
}

void type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>()
{
  if (!lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>)
  {
    type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>();
    lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>();
    unint64_t v0 = type metadata accessor for HStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>);
    }
  }
}

void type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(255, &lazy cache variable for type metadata for TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>), MEMORY[0x1E4F41850]);
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>);
    }
  }
}

void type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

void type metadata accessor for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)()
{
  if (!lazy cache variable for type metadata for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>))
  {
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, &lazy cache variable for type metadata for GaugeStyleConfiguration.MinimumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MinimumValueLabel);
    type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>(255, &lazy cache variable for type metadata for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, &lazy cache variable for type metadata for GaugeStyleConfiguration.MaximumValueLabel?, (uint64_t)&type metadata for GaugeStyleConfiguration.MaximumValueLabel);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>));
    }
  }
}

void type metadata accessor for ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>(uint64_t a1, unint64_t *a2, unint64_t *a3, uint64_t a4)
{
  if (!*a2)
  {
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, a3, a4, MEMORY[0x1E4FBB718]);
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, &lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<TextAlignment>, MEMORY[0x1E4F3F7C8], MEMORY[0x1E4F411E8]);
    unint64_t v5 = type metadata accessor for ModifiedContent();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>();
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>));
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type LabelStyleWritingModifier<IconOnlyLabelStyle> and conformance LabelStyleWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void), void (*a4)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    a4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5(&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Int?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Int?>, (unint64_t *)&lazy cache variable for type metadata for Int?, MEMORY[0x1E4FBB550]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>();
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Color?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Color?>, (unint64_t *)&lazy cache variable for type metadata for Color?, MEMORY[0x1E4F414E0]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, MEMORY[0x1E4F41100], MEMORY[0x1E4F3FBA0]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>, (void (*)(void))lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<CGFloat> and conformance _EnvironmentKeyWritingModifier<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>> and conformance HStack<A>, (void (*)(uint64_t))type metadata accessor for HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>);
    _s7SwiftUI30_EnvironmentKeyWritingModifierVyAA4FontVSgGACyxGAA04ViewF0AAWlTm_5((unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Font?> and conformance _EnvironmentKeyWritingModifier<A>, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Font?>, (unint64_t *)&lazy cache variable for type metadata for Font?, MEMORY[0x1E4F41390]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(uint64_t a1)
{
  return a1;
}

uint64_t sub_187D8D308@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = EnvironmentValues.allowsTightening.getter();
  *a1 = result & 1;
  return result;
}

uint64_t sub_187D8D338()
{
  return EnvironmentValues.allowsTightening.setter();
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>(uint64_t a1)
{
  return a1;
}

void type metadata accessor for ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(255, &lazy cache variable for type metadata for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E4F417F8], MEMORY[0x1E4F40578]);
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

void type metadata accessor for VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>()
{
  if (!lazy cache variable for type metadata for VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(255, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>), MEMORY[0x1E4F41850]);
    lazy protocol witness table accessor for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>(&lazy protocol witness table cache variable for type TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)> and conformance TupleView<A>, &lazy cache variable for type metadata for TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>, (uint64_t (*)(uint64_t))type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>));
    unint64_t v0 = type metadata accessor for VStack();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)>>);
    }
  }
}

void type metadata accessor for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)()
{
  if (!lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>))
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>));
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>();
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>, _EnvironmentKeyWritingModifier<Bool>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>)
  {
    type metadata accessor for _ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, MEMORY[0x1E4F3FE58], MEMORY[0x1E4F3FBA0]);
    _s7SwiftUI23GaugeStyleConfigurationV17CurrentValueLabelVSgMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<CGFloat>, MEMORY[0x1E4FBC958], MEMORY[0x1E4F411E8]);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingModifier<CGFloat>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, _FlexFrameLayout>, _EnvironmentKeyWritingModifier<CGFloat>>);
    }
  }
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t destroy for RingOverlay(uint64_t a1)
{
  swift_release();
  swift_release();
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 56), *(unsigned __int8 *)(a1 + 64));
  outlined consume of Environment<Bool?>.Content(*(void *)(a1 + 72), *(unsigned __int8 *)(a1 + 80));
  uint64_t v2 = *(void *)(a1 + 88);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 96);

  return outlined consume of Environment<AnyShapeStyle?>.Content(v2, v3);
}

uint64_t initializeWithCopy for RingOverlay(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 48);
  swift_retain();
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v5, v6);
  *(void *)(a1 + 40) = v5;
  *(unsigned char *)(a1 + 48) = v6;
  uint64_t v7 = *(void *)(a2 + 56);
  LOBYTE(v5) = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v7, v5);
  *(void *)(a1 + 56) = v7;
  *(unsigned char *)(a1 + 64) = v5;
  uint64_t v8 = *(void *)(a2 + 72);
  LOBYTE(v5) = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v5);
  *(void *)(a1 + 72) = v8;
  *(unsigned char *)(a1 + 80) = v5;
  uint64_t v9 = *(void *)(a2 + 88);
  uint64_t v10 = *(unsigned __int8 *)(a2 + 96);
  outlined copy of Environment<HoverEffect?>.Content(v9, v10);
  *(void *)(a1 + 88) = v9;
  *(unsigned char *)(a1 + 96) = v10;
  return a1;
}

uint64_t assignWithCopy for RingOverlay(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 48);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = v4;
  *(unsigned char *)(a1 + 48) = v5;
  outlined consume of Environment<Bool?>.Content(v6, v7);
  uint64_t v8 = *(void *)(a2 + 56);
  unsigned __int8 v9 = *(unsigned char *)(a2 + 64);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v8, v9);
  uint64_t v10 = *(void *)(a1 + 56);
  uint64_t v11 = *(unsigned __int8 *)(a1 + 64);
  *(void *)(a1 + 56) = v8;
  *(unsigned char *)(a1 + 64) = v9;
  outlined consume of Environment<Bool?>.Content(v10, v11);
  uint64_t v12 = *(void *)(a2 + 72);
  unsigned __int8 v13 = *(unsigned char *)(a2 + 80);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v12, v13);
  uint64_t v14 = *(void *)(a1 + 72);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 80);
  *(void *)(a1 + 72) = v12;
  *(unsigned char *)(a1 + 80) = v13;
  outlined consume of Environment<Bool?>.Content(v14, v15);
  uint64_t v16 = *(void *)(a2 + 88);
  uint64_t v17 = *(unsigned __int8 *)(a2 + 96);
  outlined copy of Environment<HoverEffect?>.Content(v16, v17);
  uint64_t v18 = *(void *)(a1 + 88);
  uint64_t v19 = *(unsigned __int8 *)(a1 + 96);
  *(void *)(a1 + 88) = v16;
  *(unsigned char *)(a1 + 96) = v17;
  outlined consume of Environment<AnyShapeStyle?>.Content(v18, v19);
  return a1;
}

uint64_t assignWithTake for RingOverlay(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  char v4 = *(unsigned char *)(a2 + 48);
  uint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(unsigned char *)(a1 + 48) = v4;
  outlined consume of Environment<Bool?>.Content(v5, v6);
  char v7 = *(unsigned char *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(unsigned char *)(a1 + 64) = v7;
  outlined consume of Environment<Bool?>.Content(v8, v9);
  char v10 = *(unsigned char *)(a2 + 80);
  uint64_t v11 = *(void *)(a1 + 72);
  uint64_t v12 = *(unsigned __int8 *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(unsigned char *)(a1 + 80) = v10;
  outlined consume of Environment<Bool?>.Content(v11, v12);
  char v13 = *(unsigned char *)(a2 + 96);
  uint64_t v14 = *(void *)(a1 + 88);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(unsigned char *)(a1 + 96) = v13;
  outlined consume of Environment<AnyShapeStyle?>.Content(v14, v15);
  return a1;
}

uint64_t getEnumTagSinglePayload for RingOverlay(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 97)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RingOverlay(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 97) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

void *type metadata accessor for RingOverlay()
{
  return &unk_1ED473950;
}

ValueMetadata *type metadata accessor for SizedHalfOpenCircularGauge.Metrics()
{
  return &type metadata for SizedHalfOpenCircularGauge.Metrics;
}

uint64_t associated type witness table accessor for View.Body : View in RingOverlay()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187D8E10C()
{
  swift_release();
  swift_release();
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 56), *(unsigned __int8 *)(v0 + 64));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 72), *(unsigned __int8 *)(v0 + 80));
  outlined consume of Environment<Bool?>.Content(*(void *)(v0 + 88), *(unsigned __int8 *)(v0 + 96));
  outlined consume of Environment<AnyShapeStyle?>.Content(*(void *)(v0 + 104), *(unsigned __int8 *)(v0 + 112));

  return swift_deallocObject();
}

double partial apply for implicit closure #2 in implicit closure #1 in RingOverlay.body.getter@<D0>(uint64_t a1@<X8>)
{
  return implicit closure #2 in implicit closure #1 in RingOverlay.body.getter(a1);
}

uint64_t outlined retain of RingOverlay(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 96);
  swift_retain();
  swift_retain();
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v2, v3);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v4, v5);
  outlined copy of Environment<MenuActionDismissBehavior>.Content(v6, v7);
  outlined copy of Environment<HoverEffect?>.Content(v8, v9);
  return a1;
}

uint64_t outlined release of RingOverlay(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 56);
  uint64_t v5 = *(unsigned __int8 *)(a1 + 64);
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = *(unsigned __int8 *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 88);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 96);
  swift_release();
  swift_release();
  outlined consume of Environment<Bool?>.Content(v2, v3);
  outlined consume of Environment<Bool?>.Content(v4, v5);
  outlined consume of Environment<Bool?>.Content(v6, v7);
  outlined consume of Environment<AnyShapeStyle?>.Content(v8, v9);
  return a1;
}

uint64_t outlined retain of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>(uint64_t a1)
{
  return a1;
}

void *type metadata accessor for RotationOffsetEffect()
{
  return &unk_1ED431FD0;
}

void *type metadata accessor for OpenRing()
{
  return &unk_1ED468070;
}

uint64_t sub_187D8E360()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>> and conformance GeometryReader<A>, (void (*)(uint64_t))type metadata accessor for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>);
}

void type metadata accessor for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>()
{
  if (!lazy cache variable for type metadata for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>)
  {
    type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>();
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect> and conformance <> ModifiedContent<A, B>, (void (*)(uint64_t))type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>, (void (*)(void))lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>);
    unint64_t v0 = type metadata accessor for GeometryReader();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for GeometryReader<ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>>);
    }
  }
}

void type metadata accessor for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>, VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingMo(255, &lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, &lazy cache variable for type metadata for TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?), &lazy protocol witness table cache variable for type TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)> and conformance TupleView<A>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, _CompositingGroupEffect>);
    }
  }
}

void type metadata accessor for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)()
{
  if (!lazy cache variable for type metadata for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?))
  {
    type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>?();
    type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>();
    type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>, MEMORY[0x1E4FBB718]);
    TupleTypeMetadata3 = swift_getTupleTypeMetadata3();
    if (!v1) {
      atomic_store(TupleTypeMetadata3, (unint64_t *)&lazy cache variable for type metadata for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?));
    }
  }
}

void type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>?()
{
  if (!lazy cache variable for type metadata for _ShapeView<OpenRing, AnyShapeStyle>?)
  {
    type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<OpenRing, AnyShapeStyle>);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<OpenRing, AnyShapeStyle>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type OpenRing and conformance OpenRing()
{
  unint64_t result = lazy protocol witness table cache variable for type OpenRing and conformance OpenRing;
  if (!lazy protocol witness table cache variable for type OpenRing and conformance OpenRing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRing and conformance OpenRing);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenRing and conformance OpenRing;
  if (!lazy protocol witness table cache variable for type OpenRing and conformance OpenRing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRing and conformance OpenRing);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type OpenRing and conformance OpenRing;
  if (!lazy protocol witness table cache variable for type OpenRing and conformance OpenRing)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type OpenRing and conformance OpenRing);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>)
  {
    type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>(255, &lazy cache variable for type metadata for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, (void (*)(uint64_t))type metadata accessor for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, (void (*)(uint64_t))type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>);
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>);
    }
  }
}

void type metadata accessor for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>()
{
  if (!lazy cache variable for type metadata for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>)
  {
    type metadata accessor for ModifiedContent<RotatingDisclosureIndicator, _PaddingLayout>(255, &lazy cache variable for type metadata for _OpacityShapeStyle<AnyShapeStyle>, MEMORY[0x1E4F3F700], MEMORY[0x1E4F3F6F8], MEMORY[0x1E4F403C0]);
    lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
    lazy protocol witness table accessor for type _OpacityShapeStyle<AnyShapeStyle> and conformance _OpacityShapeStyle<A>();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>);
    }
  }
}

void type metadata accessor for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>()
{
  if (!lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>)
  {
    type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for _OverlayModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>);
    }
  }
}

void type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>(uint64_t a1)
{
}

void type metadata accessor for _ShapeView<Circle, Color>()
{
  if (!lazy cache variable for type metadata for _ShapeView<Circle, Color>)
  {
    lazy protocol witness table accessor for type Circle and conformance Circle();
    unint64_t v0 = type metadata accessor for _ShapeView();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ShapeView<Circle, Color>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?)
  {
    type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(255, &lazy cache variable for type metadata for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?, (uint64_t (*)(uint64_t))type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, MEMORY[0x1E4FBB718]);
    lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect> and conformance <> ModifiedContent<A, B>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>? and conformance <A> A?);
  }
  return result;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, (void (*)(void))lazy protocol witness table accessor for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>);
}

uint64_t lazy protocol witness table accessor for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type _ShapeView<Circle, Color> and conformance _ShapeView<A, B>, (void (*)(uint64_t))type metadata accessor for _ShapeView<Circle, Color>);
}

void type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>(uint64_t a1)
{
}

uint64_t lazy protocol witness table accessor for type TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)> and conformance TupleView<A>(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?(255, a2, a3, MEMORY[0x1E4F41850]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>;
  if (!lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>)
  {
    type metadata accessor for ZStack<TupleView<(ModifiedContent<ModifiedContent<_ConditionalContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<GaugeStyleConfiguration.CurrentValueLabel, _EnvironmentKeyWritingModifier<Font?>>, _ForegroundLayerViewModifier>, _EnvironmentKeyWritingModifier<Color?>>, _EnvironmentKeyWritingModifier<Int?>>, LabelStyleWritingModifier<IconOnlyLabelStyle>>, EmptyView>, _EnvironmentKeyWritingModifier<CGFloat>>, _FlexFrameLayout>, VStack<TupleView<(Spacer, ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<ModifiedContent<HStack<_ConditionalContent<TupleView<(ModifiedContent<GaugeStyleConfiguration.MinimumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>, Spacer, ModifiedContent<GaugeStyleConfiguration.MaximumValueLabel?, _EnvironmentKeyWritingModifier<TextAlignment>>)>, GaugeStyleConfiguration.Label>>, _EnvironmentKeyWritingModifier<Font?>>, _EnvironmentKeyWritingMo(255, &lazy cache variable for type metadata for ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>>, &lazy cache variable for type metadata for TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>, (uint64_t (*)(uint64_t))type metadata accessor for (_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?), &lazy protocol witness table cache variable for type TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)> and conformance TupleView<A>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ZStack<TupleView<(_ShapeView<OpenRing, AnyShapeStyle>?, ModifiedContent<ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _OverlayModifier<ModifiedContent<ModifiedContent<ModifiedContent<_ShapeView<Circle, Color>, _FrameLayout>, RotationOffsetEffect>, _BlendModeEffect>?>>, _CompositingGroupEffect>, ModifiedContent<_ShapeView<OpenRing, _OpacityShapeStyle<AnyShapeStyle>>, _ForegroundLayerViewModifier>?)>> and conformance ZStack<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>;
  if (!lazy protocol witness table cache variable for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>)
  {
    type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>(255, &lazy cache variable for type metadata for _ShapeView<OpenRing, ForegroundStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ShapeView<OpenRing, ForegroundStyle> and conformance _ShapeView<A, B>);
  }
  return result;
}

void type metadata accessor for _ShapeView<OpenRing, AnyShapeStyle>(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
    unint64_t v3 = type metadata accessor for _ShapeView();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for OpenRing(uint64_t a1)
{
  *(void *)(a1 + 8) = lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
  unint64_t result = lazy protocol witness table accessor for type OpenRing and conformance OpenRing();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t associated type witness table accessor for Animatable.AnimatableData : VectorArithmetic in RotationOffsetEffect()
{
  return lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
}

void type metadata accessor for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>()
{
  if (!lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>)
  {
    type metadata accessor for AnimatablePair<CGFloat, CGFloat>();
    lazy protocol witness table accessor for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>(&lazy protocol witness table cache variable for type AnimatablePair<CGFloat, CGFloat> and conformance AnimatablePair<A, B>, (void (*)(uint64_t))type metadata accessor for AnimatablePair<CGFloat, CGFloat>);
    unint64_t v0 = type metadata accessor for AnimatablePair();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AnimatablePair<Double, AnimatablePair<CGFloat, CGFloat>>);
    }
  }
}

unint64_t instantiation function for generic protocol witness table for RotationOffsetEffect(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type RotationOffsetEffect and conformance RotationOffsetEffect();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t lazy protocol witness table accessor for type RotationOffsetEffect and conformance RotationOffsetEffect()
{
  unint64_t result = lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect;
  if (!lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect;
  if (!lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type RotationOffsetEffect and conformance RotationOffsetEffect);
  }
  return result;
}

uint64_t HitTestingLeafPlatformView<>.responderForHitTesting.getter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t HitTestingLeafPlatformView<>.responderForHitTesting.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a1, a3);
  if (result)
  {
    type metadata accessor for ViewResponder();
    uint64_t result = swift_dynamicCastClass();
    if (!result)
    {
      swift_release();
      return 0;
    }
  }
  return result;
}

uint64_t protocol witness for HitTestingLeafPlatformView.responderForHitTesting.getter in conformance PlatformViewHost<A>()
{
  uint64_t ObjectType = swift_getObjectType();

  return HitTestingLeafPlatformView<>.responderForHitTesting.getter(ObjectType, (uint64_t)&protocol witness table for PlatformViewHost<A>);
}

uint64_t protocol witness for HitTestingLeafPlatformView.responderForHitTesting.getter in conformance _UIHostingView<A1>(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return HitTestingLeafPlatformView<>.responderForHitTesting.getter(a1, v2, WitnessTable);
}

unint64_t initializeBufferWithCopyOfBuffer for FileExportOperation(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for FileExportOperation.Mode(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v28 = *(void *)(a2 + 32);
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        *(void *)(a1 + 32) = v28;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v19 = *(void *)a2;
        uint64_t v20 = *(void *)(a2 + 8);
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        char v23 = *(unsigned char *)(a2 + 32);
        outlined copy of FileExportOperation.Storage(*(void *)a2, v20, v21, v22, v23);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v22;
        *(unsigned char *)(a1 + 32) = v23;
        uint64_t v24 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = v24;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        uint64_t v25 = *(void *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(void *)(a1 + 88) = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v26 = *(unsigned char *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v26;
        uint64_t v27 = *(void *)(a2 + 48);
        long long v73 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v73;
        *(void *)(a1 + 48) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v9 = *(int *)(v8 + 20);
        char v10 = (void *)(a1 + v9);
        uint64_t v11 = (uint64_t *)(a2 + v9);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        *char v10 = v13;
        v10[1] = v12;
        uint64_t v14 = *(int *)(v8 + 24);
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        uint64_t v17 = v16[1];
        void *v15 = *v16;
        v15[1] = v17;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = a3[5];
    uint64_t v31 = a3[6];
    CGAffineTransform v32 = (void *)(a1 + v30);
    CGRect v33 = (void *)(a2 + v30);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = (void *)(a1 + v31);
    uint64_t v36 = (const void *)(a2 + v31);
    uint64_t v37 = type metadata accessor for URL();
    uint64_t v38 = *(void *)(v37 - 8);
    uint64_t v39 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v38 + 48);
    swift_bridgeObjectRetain();
    if (v39(v36, 1, v37))
    {
      _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(v35, v36, *(void *)(*(void *)(v40 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v38 + 16))(v35, v36, v37);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
    }
    uint64_t v41 = a3[7];
    uint64_t v42 = a1 + v41;
    uint64_t v43 = a2 + v41;
    if (*(void *)(a2 + v41 + 24))
    {
      uint64_t v44 = *(void *)v43;
      uint64_t v45 = *(void *)(v43 + 8);
      char v46 = *(unsigned char *)(v43 + 16);
      outlined copy of Text.Storage(*(void *)v43, v45, v46);
      *(void *)uint64_t v42 = v44;
      *(void *)(v42 + 8) = v45;
      *(unsigned char *)(v42 + 16) = v46;
      *(void *)(v42 + 24) = *(void *)(v43 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v47 = *(_OWORD *)(v43 + 16);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v47;
    }
    uint64_t v48 = a3[8];
    uint64_t v49 = a1 + v48;
    uint64_t v50 = a2 + v48;
    if (*(void *)(a2 + v48 + 24))
    {
      uint64_t v51 = *(void *)v50;
      uint64_t v52 = *(void *)(v50 + 8);
      char v53 = *(unsigned char *)(v50 + 16);
      outlined copy of Text.Storage(*(void *)v50, v52, v53);
      *(void *)uint64_t v49 = v51;
      *(void *)(v49 + 8) = v52;
      *(unsigned char *)(v49 + 16) = v53;
      *(void *)(v49 + 24) = *(void *)(v50 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v54 = *(_OWORD *)(v50 + 16);
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
      *(_OWORD *)(v49 + 16) = v54;
    }
    uint64_t v55 = a3[9];
    uint64_t v56 = a1 + v55;
    uint64_t v57 = a2 + v55;
    if (*(void *)(a2 + v55 + 24))
    {
      uint64_t v58 = *(void *)v57;
      uint64_t v59 = *(void *)(v57 + 8);
      char v60 = *(unsigned char *)(v57 + 16);
      outlined copy of Text.Storage(*(void *)v57, v59, v60);
      *(void *)uint64_t v56 = v58;
      *(void *)(v56 + 8) = v59;
      *(unsigned char *)(v56 + 16) = v60;
      *(void *)(v56 + 24) = *(void *)(v57 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v61 = *(_OWORD *)(v57 + 16);
      *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
      *(_OWORD *)(v56 + 16) = v61;
    }
    uint64_t v62 = a3[10];
    uint64_t v63 = (void *)(a1 + v62);
    uint64_t v64 = (const void *)(a2 + v62);
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v66 = v65;
    uint64_t v67 = *(void *)(v65 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v67 + 48))(v64, 1, v65))
    {
      _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v63, v64, *(void *)(*(void *)(v68 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v67 + 16))(v63, v64, v66);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v67 + 56))(v63, 0, 1, v66);
    }
    uint64_t v69 = a3[12];
    *(unsigned char *)(a1 + a3[11]) = *(unsigned char *)(a2 + a3[11]);
    uint64_t v70 = a1 + v69;
    uint64_t v71 = a2 + v69;
    *(void *)uint64_t v70 = *(void *)v71;
    *(unsigned char *)(v70 + 8) = *(unsigned char *)(v71 + 8);
  }
  return a1;
}

uint64_t outlined copy of FileExportOperation.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return outlined copy of AnyTransferable?(a1);
  }
  else
  {
    swift_retain();
    return swift_bridgeObjectRetain();
  }
}

uint64_t outlined copy of AnyTransferable?(uint64_t result)
{
  if (result)
  {
    swift_retain();
    swift_bridgeObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for FileExportOperation(uint64_t a1, int *a2)
{
  type metadata accessor for FileExportOperation.Mode(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
      type metadata accessor for FileExportOperation.Move(0);
      swift_release();
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 2u:
      outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      swift_release();
      break;
    default:
      break;
  }
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[6];
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v8 = a1 + a2[7];
  if (*(void *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + a2[8];
  if (*(void *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + a2[9];
  if (*(void *)(v10 + 24))
  {
    outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = a1 + a2[10];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v13 = v12;
  uint64_t v16 = *(void *)(v12 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v11, 1, v12);
  if (!result)
  {
    uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t))(v16 + 8);
    return v15(v11, v13);
  }
  return result;
}

uint64_t outlined consume of FileExportOperation.Storage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5)
  {
    return outlined consume of AnyTransferable?(a1);
  }
  else
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
}

uint64_t outlined consume of AnyTransferable?(uint64_t result)
{
  if (result)
  {
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for FileExportOperation(uint64_t a1, uint64_t *a2, int *a3)
{
  type metadata accessor for FileExportOperation.Mode(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v26 = a2[4];
      long long v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v26;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    case 2u:
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      uint64_t v19 = a2[2];
      uint64_t v20 = a2[3];
      char v21 = *((unsigned char *)a2 + 32);
      outlined copy of FileExportOperation.Storage(*a2, v18, v19, v20, v21);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v20;
      *(unsigned char *)(a1 + 32) = v21;
      uint64_t v22 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v22;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      uint64_t v23 = a2[11];
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(void *)(a1 + 88) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      char v24 = *((unsigned char *)a2 + 8);
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = v24;
      uint64_t v25 = a2[6];
      long long v71 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v71;
      *(void *)(a1 + 48) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    default:
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (void *)(a1 + v8);
      uint64_t v10 = (uint64_t *)((char *)a2 + v8);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      *uint64_t v9 = v12;
      v9[1] = v11;
      uint64_t v13 = *(int *)(v7 + 24);
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      swift_retain();
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = a3[5];
  uint64_t v29 = a3[6];
  uint64_t v30 = (void *)(a1 + v28);
  uint64_t v31 = (uint64_t *)((char *)a2 + v28);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  CGRect v33 = (void *)(a1 + v29);
  uint64_t v34 = (char *)a2 + v29;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v36 + 48);
  swift_bridgeObjectRetain();
  if (v37(v34, 1, v35))
  {
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v33, v34, *(void *)(*(void *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
  }
  uint64_t v39 = a3[7];
  uint64_t v40 = a1 + v39;
  uint64_t v41 = (uint64_t)a2 + v39;
  if (*(uint64_t *)((char *)a2 + v39 + 24))
  {
    uint64_t v42 = *(void *)v41;
    uint64_t v43 = *(void *)(v41 + 8);
    char v44 = *(unsigned char *)(v41 + 16);
    outlined copy of Text.Storage(*(void *)v41, v43, v44);
    *(void *)uint64_t v40 = v42;
    *(void *)(v40 + 8) = v43;
    *(unsigned char *)(v40 + 16) = v44;
    *(void *)(v40 + 24) = *(void *)(v41 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v45 = *(_OWORD *)(v41 + 16);
    *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
    *(_OWORD *)(v40 + 16) = v45;
  }
  uint64_t v46 = a3[8];
  uint64_t v47 = a1 + v46;
  uint64_t v48 = (uint64_t)a2 + v46;
  if (*(uint64_t *)((char *)a2 + v46 + 24))
  {
    uint64_t v49 = *(void *)v48;
    uint64_t v50 = *(void *)(v48 + 8);
    char v51 = *(unsigned char *)(v48 + 16);
    outlined copy of Text.Storage(*(void *)v48, v50, v51);
    *(void *)uint64_t v47 = v49;
    *(void *)(v47 + 8) = v50;
    *(unsigned char *)(v47 + 16) = v51;
    *(void *)(v47 + 24) = *(void *)(v48 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v52 = *(_OWORD *)(v48 + 16);
    *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
    *(_OWORD *)(v47 + 16) = v52;
  }
  uint64_t v53 = a3[9];
  uint64_t v54 = a1 + v53;
  uint64_t v55 = (uint64_t)a2 + v53;
  if (*(uint64_t *)((char *)a2 + v53 + 24))
  {
    uint64_t v56 = *(void *)v55;
    uint64_t v57 = *(void *)(v55 + 8);
    char v58 = *(unsigned char *)(v55 + 16);
    outlined copy of Text.Storage(*(void *)v55, v57, v58);
    *(void *)uint64_t v54 = v56;
    *(void *)(v54 + 8) = v57;
    *(unsigned char *)(v54 + 16) = v58;
    *(void *)(v54 + 24) = *(void *)(v55 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v59 = *(_OWORD *)(v55 + 16);
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v55;
    *(_OWORD *)(v54 + 16) = v59;
  }
  uint64_t v60 = a3[10];
  long long v61 = (void *)(a1 + v60);
  uint64_t v62 = (char *)a2 + v60;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v64 = v63;
  uint64_t v65 = *(void *)(v63 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v65 + 48))(v62, 1, v63))
  {
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v61, v62, *(void *)(*(void *)(v66 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v65 + 16))(v61, v62, v64);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v65 + 56))(v61, 0, 1, v64);
  }
  uint64_t v67 = a3[12];
  *(unsigned char *)(a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v68 = a1 + v67;
  uint64_t v69 = (uint64_t)a2 + v67;
  *(void *)uint64_t v68 = *(void *)v69;
  *(unsigned char *)(v68 + 8) = *(unsigned char *)(v69 + 8);
  return a1;
}

uint64_t *assignWithCopy for FileExportOperation(uint64_t *a1, uint64_t *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    type metadata accessor for FileExportOperation.Mode(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        uint64_t v17 = a2[2];
        a1[1] = a2[1];
        a1[2] = v17;
        uint64_t v18 = a2[4];
        a1[3] = a2[3];
        a1[4] = v18;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v19 = *a2;
        uint64_t v20 = a2[1];
        uint64_t v21 = a2[2];
        uint64_t v22 = a2[3];
        char v23 = *((unsigned char *)a2 + 32);
        outlined copy of FileExportOperation.Storage(*a2, v20, v21, v22, v23);
        *a1 = v19;
        a1[1] = v20;
        a1[2] = v21;
        a1[3] = v22;
        *((unsigned char *)a1 + 32) = v23;
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        uint64_t v24 = a2[9];
        a1[8] = a2[8];
        a1[9] = v24;
        uint64_t v25 = a2[11];
        a1[10] = a2[10];
        a1[11] = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v26 = *((unsigned char *)a2 + 8);
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = v26;
        a1[2] = a2[2];
        uint64_t v27 = a2[4];
        a1[3] = a2[3];
        a1[4] = v27;
        uint64_t v28 = a2[6];
        a1[5] = a2[5];
        a1[6] = v28;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v8 = *(int *)(v7 + 20);
        uint64_t v9 = (uint64_t *)((char *)a1 + v8);
        uint64_t v10 = (uint64_t *)((char *)a2 + v8);
        uint64_t v12 = *v10;
        uint64_t v11 = v10[1];
        *uint64_t v9 = v12;
        v9[1] = v11;
        uint64_t v13 = *(int *)(v7 + 24);
        uint64_t v14 = (uint64_t *)((char *)a1 + v13);
        uint64_t v15 = (uint64_t *)((char *)a2 + v13);
        uint64_t v16 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v16;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v29 = a3[5];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = a3[6];
  CGRect v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_13:
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_14:
  uint64_t v41 = a3[7];
  uint64_t v42 = (uint64_t)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(uint64_t *)((char *)a1 + v41 + 24);
  uint64_t v45 = *(uint64_t *)((char *)a2 + v41 + 24);
  if (v44)
  {
    if (v45)
    {
      uint64_t v46 = *(void *)v43;
      uint64_t v47 = *((void *)v43 + 1);
      char v48 = v43[16];
      outlined copy of Text.Storage(*(void *)v43, v47, v48);
      uint64_t v49 = *(void *)v42;
      uint64_t v50 = *(void *)(v42 + 8);
      char v51 = *(unsigned char *)(v42 + 16);
      *(void *)uint64_t v42 = v46;
      *(void *)(v42 + 8) = v47;
      *(unsigned char *)(v42 + 16) = v48;
      outlined consume of Text.Storage(v49, v50, v51);
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v42);
      long long v55 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v55;
    }
  }
  else if (v45)
  {
    uint64_t v52 = *(void *)v43;
    uint64_t v53 = *((void *)v43 + 1);
    char v54 = v43[16];
    outlined copy of Text.Storage(*(void *)v43, v53, v54);
    *(void *)uint64_t v42 = v52;
    *(void *)(v42 + 8) = v53;
    *(unsigned char *)(v42 + 16) = v54;
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v56 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *(_OWORD *)(v42 + 16) = v56;
  }
  uint64_t v57 = a3[8];
  uint64_t v58 = (uint64_t)a1 + v57;
  long long v59 = (char *)a2 + v57;
  uint64_t v60 = *(uint64_t *)((char *)a1 + v57 + 24);
  uint64_t v61 = *(uint64_t *)((char *)a2 + v57 + 24);
  if (v60)
  {
    if (v61)
    {
      uint64_t v62 = *(void *)v59;
      uint64_t v63 = *((void *)v59 + 1);
      char v64 = v59[16];
      outlined copy of Text.Storage(*(void *)v59, v63, v64);
      uint64_t v65 = *(void *)v58;
      uint64_t v66 = *(void *)(v58 + 8);
      char v67 = *(unsigned char *)(v58 + 16);
      *(void *)uint64_t v58 = v62;
      *(void *)(v58 + 8) = v63;
      *(unsigned char *)(v58 + 16) = v64;
      outlined consume of Text.Storage(v65, v66, v67);
      *(void *)(v58 + 24) = *((void *)v59 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v58);
      long long v71 = *((_OWORD *)v59 + 1);
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 16) = v71;
    }
  }
  else if (v61)
  {
    uint64_t v68 = *(void *)v59;
    uint64_t v69 = *((void *)v59 + 1);
    char v70 = v59[16];
    outlined copy of Text.Storage(*(void *)v59, v69, v70);
    *(void *)uint64_t v58 = v68;
    *(void *)(v58 + 8) = v69;
    *(unsigned char *)(v58 + 16) = v70;
    *(void *)(v58 + 24) = *((void *)v59 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v72 = *((_OWORD *)v59 + 1);
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    *(_OWORD *)(v58 + 16) = v72;
  }
  uint64_t v73 = a3[9];
  uint64_t v74 = (uint64_t)a1 + v73;
  uint64_t v75 = (char *)a2 + v73;
  uint64_t v76 = *(uint64_t *)((char *)a1 + v73 + 24);
  uint64_t v77 = *(uint64_t *)((char *)a2 + v73 + 24);
  if (v76)
  {
    if (v77)
    {
      uint64_t v78 = *(void *)v75;
      uint64_t v79 = *((void *)v75 + 1);
      char v80 = v75[16];
      outlined copy of Text.Storage(*(void *)v75, v79, v80);
      uint64_t v81 = *(void *)v74;
      uint64_t v82 = *(void *)(v74 + 8);
      char v83 = *(unsigned char *)(v74 + 16);
      *(void *)uint64_t v74 = v78;
      *(void *)(v74 + 8) = v79;
      *(unsigned char *)(v74 + 16) = v80;
      outlined consume of Text.Storage(v81, v82, v83);
      *(void *)(v74 + 24) = *((void *)v75 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v74);
      long long v87 = *((_OWORD *)v75 + 1);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      *(_OWORD *)(v74 + 16) = v87;
    }
  }
  else if (v77)
  {
    uint64_t v84 = *(void *)v75;
    uint64_t v85 = *((void *)v75 + 1);
    char v86 = v75[16];
    outlined copy of Text.Storage(*(void *)v75, v85, v86);
    *(void *)uint64_t v74 = v84;
    *(void *)(v74 + 8) = v85;
    *(unsigned char *)(v74 + 16) = v86;
    *(void *)(v74 + 24) = *((void *)v75 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v88 = *((_OWORD *)v75 + 1);
    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    *(_OWORD *)(v74 + 16) = v88;
  }
  uint64_t v89 = a3[10];
  uint64_t v90 = (char *)a1 + v89;
  uint64_t v91 = (char *)a2 + v89;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v93 = v92;
  uint64_t v94 = *(void *)(v92 - 8);
  uint64_t v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  int v96 = v95(v90, 1, v92);
  int v97 = v95(v91, 1, v93);
  if (!v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 24))(v90, v91, v93);
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v94 + 8))(v90, v93);
    goto LABEL_41;
  }
  if (v97)
  {
LABEL_41:
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v90, v91, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v90, v91, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v90, 0, 1, v93);
LABEL_42:
  *((unsigned char *)a1 + a3[11]) = *((unsigned char *)a2 + a3[11]);
  uint64_t v99 = a3[12];
  uint64_t v100 = (char *)a1 + v99;
  char v101 = (char *)a2 + v99;
  uint64_t v102 = *(void *)v101;
  v100[8] = v101[8];
  *(void *)uint64_t v100 = v102;
  return a1;
}

char *initializeWithTake for FileExportOperation(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FileExportOperation.Mode(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
    *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
    *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
  {
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  }
  uint64_t v15 = a3[7];
  uint64_t v16 = a3[8];
  uint64_t v17 = &a1[v15];
  uint64_t v18 = &a2[v15];
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  uint64_t v20 = &a1[v16];
  uint64_t v21 = &a2[v16];
  long long v22 = *((_OWORD *)v21 + 1);
  *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
  *((_OWORD *)v20 + 1) = v22;
  uint64_t v23 = a3[9];
  uint64_t v24 = a3[10];
  long long v25 = *(_OWORD *)&a2[v23];
  long long v26 = *(_OWORD *)&a2[v23 + 16];
  uint64_t v27 = &a1[v23];
  *(_OWORD *)uint64_t v27 = v25;
  *((_OWORD *)v27 + 1) = v26;
  uint64_t v28 = &a1[v24];
  uint64_t v29 = &a2[v24];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v31 = v30;
  uint64_t v32 = *(void *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v29, 1, v30))
  {
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 32))(v28, v29, v31);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v32 + 56))(v28, 0, 1, v31);
  }
  uint64_t v34 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v35 = &a1[v34];
  uint64_t v36 = &a2[v34];
  *(void *)uint64_t v35 = *(void *)v36;
  v35[8] = v36[8];
  return a1;
}

char *assignWithTake for FileExportOperation(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    uint64_t v6 = type metadata accessor for FileExportOperation.Mode(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
      *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = a3[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  long long v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_10:
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_11:
  uint64_t v23 = a3[7];
  uint64_t v24 = (uint64_t)&a1[v23];
  long long v25 = &a2[v23];
  if (*(void *)&a1[v23 + 24])
  {
    if (*((void *)v25 + 3))
    {
      char v26 = v25[16];
      uint64_t v27 = *(void *)v24;
      uint64_t v28 = *(void *)(v24 + 8);
      char v29 = *(unsigned char *)(v24 + 16);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *(unsigned char *)(v24 + 16) = v26;
      outlined consume of Text.Storage(v27, v28, v29);
      *(void *)(v24 + 24) = *((void *)v25 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Text(v24);
  }
  long long v30 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_16:
  uint64_t v31 = a3[8];
  uint64_t v32 = (uint64_t)&a1[v31];
  uint64_t v33 = &a2[v31];
  if (*(void *)&a1[v31 + 24])
  {
    if (*((void *)v33 + 3))
    {
      char v34 = v33[16];
      uint64_t v35 = *(void *)v32;
      uint64_t v36 = *(void *)(v32 + 8);
      char v37 = *(unsigned char *)(v32 + 16);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *(unsigned char *)(v32 + 16) = v34;
      outlined consume of Text.Storage(v35, v36, v37);
      *(void *)(v32 + 24) = *((void *)v33 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Text(v32);
  }
  long long v38 = *((_OWORD *)v33 + 1);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v38;
LABEL_21:
  uint64_t v39 = a3[9];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = &a2[v39];
  if (*(void *)&a1[v39 + 24])
  {
    if (*((void *)v41 + 3))
    {
      char v42 = v41[16];
      uint64_t v43 = *(void *)v40;
      uint64_t v44 = *(void *)(v40 + 8);
      char v45 = *(unsigned char *)(v40 + 16);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *(unsigned char *)(v40 + 16) = v42;
      outlined consume of Text.Storage(v43, v44, v45);
      *(void *)(v40 + 24) = *((void *)v41 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Text(v40);
  }
  long long v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_26:
  uint64_t v47 = a3[10];
  char v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v51 = v50;
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v48, 1, v50);
  int v55 = v53(v49, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v48, v49, v51);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v51);
    goto LABEL_31;
  }
  if (v55)
  {
LABEL_31:
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v48, v49, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v49, v51);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
LABEL_32:
  uint64_t v57 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v58 = &a1[v57];
  long long v59 = &a2[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  return a1;
}

uint64_t sub_187D91130(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FileExportOperation.Mode(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
LABEL_11:
    return v9(v10, a2, v8);
  }
  if (a2 == 2147483646)
  {
    unint64_t v11 = *(void *)(a1 + a3[5] + 8);
    if (v11 >= 0xFFFFFFFF) {
      LODWORD(v11) = -1;
    }
    int v12 = v11 - 1;
    if (v12 < 0) {
      int v12 = -1;
    }
    return (v12 + 1);
  }
  else
  {
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    uint64_t v15 = *(void *)(v14 - 8);
    if (*(_DWORD *)(v15 + 84) == a2)
    {
      uint64_t v8 = v14;
      uint64_t v10 = a1 + a3[6];
      uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
      goto LABEL_11;
    }
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48);
    uint64_t v18 = v16;
    uint64_t v19 = a1 + a3[10];
    return v17(v19, a2, v18);
  }
}

uint64_t sub_187D91320(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for FileExportOperation.Mode(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
LABEL_7:
    return v11(v12, a2, a2, v10);
  }
  if (a3 == 2147483646)
  {
    *(void *)(a1 + a4[5] + 8) = a2;
    return result;
  }
  _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v14 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v12 = a1 + a4[6];
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    goto LABEL_7;
  }
  _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
  uint64_t v17 = v15;
  uint64_t v18 = a1 + a4[10];

  return v16(v18, a2, a2, v17);
}

uint64_t *initializeBufferWithCopyOfBuffer for FileExportOperation.Move(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    uint64_t v10 = (uint64_t *)((char *)v4 + v8);
    unint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_retain();
  }
  swift_retain();
  return v4;
}

uint64_t destroy for FileExportOperation.Move(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain();
  swift_release();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  uint64_t v14 = v13[1];
  void *v12 = *v13;
  v12[1] = v14;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t initializeWithTake for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t assignWithTake for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  swift_release();
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D91908);
}

uint64_t sub_187D91908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.Move(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D919DC);
}

uint64_t sub_187D919DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL();
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for FileExportOperation.Mode(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v27 = *(void *)(a2 + 32);
        long long v28 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v28;
        *(void *)(a1 + 32) = v27;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v18 = *(void *)a2;
        uint64_t v19 = *(void *)(a2 + 8);
        uint64_t v20 = *(void *)(a2 + 16);
        uint64_t v21 = *(void *)(a2 + 24);
        char v22 = *(unsigned char *)(a2 + 32);
        outlined copy of FileExportOperation.Storage(*(void *)a2, v19, v20, v21, v22);
        *(void *)a1 = v18;
        *(void *)(a1 + 8) = v19;
        *(void *)(a1 + 16) = v20;
        *(void *)(a1 + 24) = v21;
        *(unsigned char *)(a1 + 32) = v22;
        uint64_t v23 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = v23;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        uint64_t v24 = *(void *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(void *)(a1 + 88) = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v25 = *(unsigned char *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v25;
        uint64_t v26 = *(void *)(a2 + 48);
        long long v30 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v30;
        *(void *)(a1 + 48) = v26;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v6 = type metadata accessor for URL();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
        uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v8 = *(int *)(v7 + 20);
        uint64_t v9 = (void *)(a1 + v8);
        unint64_t v10 = (uint64_t *)(a2 + v8);
        uint64_t v12 = *v10;
        uint64_t v11 = v10[1];
        *uint64_t v9 = v12;
        v9[1] = v11;
        uint64_t v13 = *(int *)(v7 + 24);
        uint64_t v14 = (void *)(a1 + v13);
        uint64_t v15 = (void *)(a2 + v13);
        uint64_t v16 = v15[1];
        *uint64_t v14 = *v15;
        v14[1] = v16;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t destroy for FileExportOperation.Mode(uint64_t a1)
{
  uint64_t result = swift_getEnumCaseMultiPayload();
  switch((int)result)
  {
    case 0:
      uint64_t v3 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
      type metadata accessor for FileExportOperation.Move(0);
      swift_release();
      goto LABEL_6;
    case 1:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 2:
      outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for FileExportOperation.Mode(uint64_t a1, uint64_t *a2)
{
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v24 = a2[4];
      long long v25 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v25;
      *(void *)(a1 + 32) = v24;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    case 2u:
      uint64_t v15 = *a2;
      uint64_t v16 = a2[1];
      uint64_t v17 = a2[2];
      uint64_t v18 = a2[3];
      char v19 = *((unsigned char *)a2 + 32);
      outlined copy of FileExportOperation.Storage(*a2, v16, v17, v18, v19);
      *(void *)a1 = v15;
      *(void *)(a1 + 8) = v16;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = v18;
      *(unsigned char *)(a1 + 32) = v19;
      uint64_t v20 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v20;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      uint64_t v21 = a2[11];
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(void *)(a1 + 88) = v21;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      char v22 = *((unsigned char *)a2 + 8);
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = v22;
      uint64_t v23 = a2[6];
      long long v27 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v27;
      *(void *)(a1 + 48) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    default:
      uint64_t v4 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
      uint64_t v5 = type metadata accessor for FileExportOperation.Move(0);
      uint64_t v6 = *(int *)(v5 + 20);
      uint64_t v7 = (void *)(a1 + v6);
      uint64_t v8 = (uint64_t *)((char *)a2 + v6);
      uint64_t v10 = *v8;
      uint64_t v9 = v8[1];
      *uint64_t v7 = v10;
      v7[1] = v9;
      uint64_t v11 = *(int *)(v5 + 24);
      uint64_t v12 = (void *)(a1 + v11);
      uint64_t v13 = (uint64_t *)((char *)a2 + v11);
      uint64_t v14 = v13[1];
      void *v12 = *v13;
      v12[1] = v14;
      swift_retain();
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t *assignWithCopy for FileExportOperation.Mode(uint64_t *a1, uint64_t *a2)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        uint64_t v15 = a2[2];
        a1[1] = a2[1];
        a1[2] = v15;
        uint64_t v16 = a2[3];
        uint64_t v17 = a2[4];
        a1[3] = v16;
        a1[4] = v17;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v18 = *a2;
        uint64_t v19 = a2[1];
        uint64_t v20 = a2[2];
        uint64_t v21 = a2[3];
        char v22 = *((unsigned char *)a2 + 32);
        outlined copy of FileExportOperation.Storage(*a2, v19, v20, v21, v22);
        *a1 = v18;
        a1[1] = v19;
        a1[2] = v20;
        a1[3] = v21;
        *((unsigned char *)a1 + 32) = v22;
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        uint64_t v23 = a2[9];
        a1[8] = a2[8];
        a1[9] = v23;
        uint64_t v24 = a2[10];
        uint64_t v25 = a2[11];
        a1[10] = v24;
        a1[11] = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v26 = *((unsigned char *)a2 + 8);
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = v26;
        a1[2] = a2[2];
        uint64_t v27 = a2[4];
        a1[3] = a2[3];
        a1[4] = v27;
        uint64_t v28 = a2[5];
        uint64_t v29 = a2[6];
        a1[5] = v28;
        a1[6] = v29;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v4 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v4 - 8) + 16))(a1, a2, v4);
        uint64_t v5 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v6 = *(int *)(v5 + 20);
        uint64_t v7 = (uint64_t *)((char *)a1 + v6);
        uint64_t v8 = (uint64_t *)((char *)a2 + v6);
        uint64_t v10 = *v8;
        uint64_t v9 = v8[1];
        *uint64_t v7 = v10;
        v7[1] = v9;
        uint64_t v11 = *(int *)(v5 + 24);
        uint64_t v12 = (uint64_t *)((char *)a1 + v11);
        uint64_t v13 = (uint64_t *)((char *)a2 + v11);
        uint64_t v14 = v13[1];
        void *v12 = *v13;
        v12[1] = v14;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *initializeWithTake for FileExportOperation.Mode(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
    *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
    *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

char *assignWithTake for FileExportOperation.Mode(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.Key()
{
  return &type metadata for FileExportOperation.Key;
}

uint64_t FileExportOperation.Resolved.init(base:environment:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (int *)type metadata accessor for FileExportOperation.Resolved(0);
  uint64_t v5 = (uint64_t *)(a2 + v4[7]);
  *uint64_t v5 = 0;
  v5[1] = 0;
  uint64_t v31 = v5;
  outlined init with copy of FileExportOperation.Mode(a1, a2, type metadata accessor for FileExportOperation);
  uint64_t v6 = (int *)type metadata accessor for FileExportOperation(0);
  uint64_t v7 = (uint64_t *)(a1 + v6[7]);
  if (v7[3])
  {
    uint64_t v8 = v7[1];
    uint64_t v9 = *v7;
    char v10 = v7[2] & 1;
    outlined copy of Text.Storage(*v7, v8, v10);
    swift_bridgeObjectRetain();
    uint64_t v11 = Text.resolveString(in:with:idiom:)();
    uint64_t v13 = v12;
    outlined consume of Text.Storage(v9, v8, v10);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v13 = 0;
  }
  uint64_t v14 = (uint64_t *)(a2 + v4[5]);
  *uint64_t v14 = v11;
  v14[1] = v13;
  uint64_t v15 = (uint64_t *)(a1 + v6[8]);
  if (v15[3])
  {
    uint64_t v16 = v15[1];
    uint64_t v17 = *v15;
    uint64_t v18 = v15[2] & 1;
    outlined copy of Text.Storage(*v15, v16, v18);
    swift_bridgeObjectRetain();
    uint64_t v19 = Text.resolveString(in:with:idiom:)();
    uint64_t v21 = v20;
    outlined consume of Text.Storage(v17, v16, v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v19 = 0;
    uint64_t v21 = 0;
  }
  char v22 = (uint64_t *)(a2 + v4[6]);
  *char v22 = v19;
  v22[1] = v21;
  uint64_t v23 = (uint64_t *)(a1 + v6[9]);
  if (v23[3])
  {
    uint64_t v24 = v23[1];
    uint64_t v25 = *v23;
    char v26 = v23[2] & 1;
    outlined copy of Text.Storage(*v23, v24, v26);
    swift_bridgeObjectRetain();
    uint64_t v27 = Text.resolveString(in:with:idiom:)();
    uint64_t v29 = v28;
    outlined consume of Text.Storage(v25, v24, v26);
    swift_bridgeObjectRelease();
    outlined destroy of FileExportOperation.Mode(a1, type metadata accessor for FileExportOperation);
    swift_release();
    swift_release();
  }
  else
  {
    outlined destroy of FileExportOperation.Mode(a1, type metadata accessor for FileExportOperation);
    swift_release();
    swift_release();
    uint64_t v27 = 0;
    uint64_t v29 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v31 = v27;
  v31[1] = v29;
  return result;
}

uint64_t FileExportOperation.allowedContentTypes.getter()
{
  uint64_t v1 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1F4188790](v1);
  uint64_t v3 = (char *)&v15 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FileExportOperation.Mode(v0, (uint64_t)v3, type metadata accessor for FileExportOperation.Mode);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return MEMORY[0x1E4FBC860];
    case 2u:
      uint64_t v6 = *(void *)v3;
      uint64_t v5 = *((void *)v3 + 1);
      uint64_t v8 = *((void *)v3 + 2);
      uint64_t v7 = *((void *)v3 + 3);
      uint64_t v4 = *((void *)v3 + 5);
      if (v3[32])
      {
        if (v6)
        {
          if (!*(void *)(v4 + 16))
          {
            outlined copy of FileExportOperation.Storage(v6, v5, v8, v7, 1);
            swift_bridgeObjectRelease();
            swift_release();
            outlined consume of FileExportOperation.Storage(v6, v5, v8, v7, 1);
            swift_release();
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v7;
          }
          outlined copy of AnyTransferable?(v6);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_release();
          swift_bridgeObjectRetain();
          uint64_t v9 = v6;
        }
        else
        {
          swift_bridgeObjectRetain();
          uint64_t v9 = 0;
        }
        uint64_t v10 = v5;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        char v13 = 1;
      }
      else
      {
        if (!*(void *)(v4 + 16))
        {
          swift_bridgeObjectRetain();
          outlined consume of FileExportOperation.Storage(v6, v5, v8, v7, 0);
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          return v8;
        }
        swift_bridgeObjectRetain();
        uint64_t v9 = v6;
        uint64_t v10 = v5;
        uint64_t v11 = v8;
        uint64_t v12 = v7;
        char v13 = 0;
      }
      outlined consume of FileExportOperation.Storage(v9, v10, v11, v12, v13);
      swift_release();
      swift_release();
LABEL_15:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v4;
    case 3u:
      uint64_t v4 = specialized FileExportOperation.BatchExport.allowedContentTypes.getter(*(void **)v3, v3[8], *((void *)v3 + 2));
      swift_release();
      swift_release();
      goto LABEL_15;
    default:
      outlined destroy of FileExportOperation.Mode((uint64_t)v3, type metadata accessor for FileExportOperation.Mode);
      return MEMORY[0x1E4FBC860];
  }
}

uint64_t FileExportOperation.defaultFilename(contentType:)(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UTType();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FileExportOperation.Mode(v2, (uint64_t)v10, type metadata accessor for FileExportOperation.Mode);
  if (swift_getEnumCaseMultiPayload() == 2)
  {
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = *((void *)v10 + 2);
    uint64_t v30 = *((void *)v10 + 1);
    uint64_t v31 = v11;
    uint64_t v29 = *((void *)v10 + 3);
    int v28 = v10[32];
    uint64_t v13 = *((void *)v10 + 6);
    uint64_t v14 = *((void *)v10 + 7);
    uint64_t v15 = *((void *)v10 + 9);
    uint64_t v16 = *((void *)v10 + 11);
    (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
    if (v14)
    {
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v21 = UTType.genericPartialFilename.getter();
      v27[1] = v16;
      char v22 = (void *)MEMORY[0x18C115780](v21);
      swift_bridgeObjectRelease();
      Class isa = UTType._bridgeToObjectiveC()().super.isa;
      id v24 = objc_msgSend(v22, sel_stringByAppendingPathExtensionForType_, isa);
      v27[0] = v15;
      id v25 = v24;

      uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
    }
    outlined consume of FileExportOperation.Storage(v31, v30, v12, v29, v28);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
  else
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)v10, type metadata accessor for FileExportOperation.Mode);
    uint64_t v17 = UTType.genericPartialFilename.getter();
    uint64_t v18 = (void *)MEMORY[0x18C115780](v17);
    swift_bridgeObjectRelease();
    Class v19 = UTType._bridgeToObjectiveC()().super.isa;
    id v20 = objc_msgSend(v18, sel_stringByAppendingPathExtensionForType_, v19);

    uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  return v13;
}

uint64_t FileExportOperation.File.preferredFilename.getter()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FileExportOperation.File.Storage(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (id *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v8 = (uint64_t *)(v0 + *(int *)(type metadata accessor for FileExportOperation.File(0) + 20));
  if (v8[1])
  {
    uint64_t v9 = *v8;
  }
  else
  {
    outlined init with copy of FileExportOperation.Mode(v0, (uint64_t)v7, type metadata accessor for FileExportOperation.File.Storage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      id v10 = *v7;
      id v11 = objc_msgSend(*v7, sel_filename);
      if (v11 || (id v11 = objc_msgSend(v10, sel_preferredFilename)) != 0)
      {
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)();
        uint64_t v14 = v13;

        uint64_t v15 = (void *)MEMORY[0x18C115780](v12, v14);
        swift_bridgeObjectRelease();
        Class isa = UTType._bridgeToObjectiveC()().super.isa;
        id v17 = objc_msgSend(v15, sel_stringByAppendingPathExtensionForType_, isa);

        uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)();
      }
      else
      {

        uint64_t v9 = 0;
      }
    }
    else
    {
      (*(void (**)(char *, id *, uint64_t))(v2 + 32))(v4, v7, v1);
      uint64_t v9 = URL.lastPathComponent.getter();
      (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    }
  }
  swift_bridgeObjectRetain();
  return v9;
}

uint64_t FileExportOperation.didFinish(with:)(void *a1, uint64_t a2)
{
  int v54 = a1;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (void (*)(void *))((char *)v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8);
  id v10 = (char *)v48 - v9;
  _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Result<URL, Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Result<URL, Error>, v4);
  MEMORY[0x1F4188790](v11 - 8);
  uint64_t v13 = (void *)((char *)v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (void *)((char *)v48 - v15);
  uint64_t v17 = type metadata accessor for FileExportOperation.Move(0);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)v48 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1F4188790](v20);
  char v22 = (char *)v48 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FileExportOperation.Mode(v2, (uint64_t)v22, type metadata accessor for FileExportOperation.Mode);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*((void (**)(void *, uint64_t))v22 + 1))(v54, a2);
      swift_release();
      swift_release();
      return swift_bridgeObjectRelease();
    case 2u:
      uint64_t v32 = *(void *)v22;
      uint64_t v33 = *((void *)v22 + 1);
      uint64_t v51 = *((void *)v22 + 2);
      uint64_t v52 = v32;
      uint64_t v50 = *((void *)v22 + 3);
      int v49 = v22[32];
      uint64_t v53 = *((void *)v22 + 5);
      char v34 = (void (*)(void *))*((void *)v22 + 8);
      if ((_BYTE)a2 == 0xFF)
      {
        type metadata accessor for Result<URL, Error>();
        (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 56))(v13, 1, 1, v41);
LABEL_19:
        v34(v13);
        outlined consume of FileExportOperation.Storage(v52, v33, v51, v50, v49);
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return outlined destroy of FileExportOperation?((uint64_t)v13, &lazy cache variable for type metadata for Result<URL, Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Result<URL, Error>);
      }
      if (a2)
      {
        char v42 = v54;
        *uint64_t v13 = v54;
        type metadata accessor for Result<URL, Error>();
        uint64_t v38 = v43;
        swift_storeEnumTagMultiPayload();
        id v44 = v42;
        goto LABEL_18;
      }
      v48[1] = *((void *)v22 + 7);
      uint64_t v35 = v54;
      uint64_t v36 = v54[2];
      uint64_t v24 = type metadata accessor for URL();
      uint64_t v29 = *(void *)(v24 - 8);
      if (!v36) {
        goto LABEL_26;
      }
      (*(void (**)(void (*)(void *), unint64_t, uint64_t))(*(void *)(v24 - 8) + 16))(v7, (unint64_t)v35+ ((*(unsigned __int8 *)(*(void *)(v24 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v24 - 8) + 80)), v24);
      (*(void (**)(void (*)(void *), void, uint64_t, uint64_t))(v29 + 56))(v7, 0, 1, v24);
      if ((*(unsigned int (**)(void (*)(void *), uint64_t, uint64_t))(v29 + 48))(v7, 1, v24) != 1)
      {
        (*(void (**)(void *, void (*)(void *), uint64_t))(v29 + 32))(v13, v7, v24);
        type metadata accessor for Result<URL, Error>();
        uint64_t v38 = v37;
        swift_storeEnumTagMultiPayload();
LABEL_18:
        type metadata accessor for Result<URL, Error>();
        (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56))(v13, 0, 1, v38);
        goto LABEL_19;
      }
      goto LABEL_27;
    case 3u:
      (*((void (**)(void *, uint64_t))v22 + 3))(v54, a2);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    default:
      outlined init with take of FileExportOperation((uint64_t)v22, (uint64_t)v19, type metadata accessor for FileExportOperation.Move);
      uint64_t v23 = &v19[*(int *)(v17 + 20)];
      uint64_t v7 = *(void (**)(void *))v23;
      uint64_t v24 = *((void *)v23 + 1);
      if ((_BYTE)a2 != 0xFF)
      {
        if ((a2 & 1) == 0)
        {
          id v25 = v54;
          uint64_t v26 = v54[2];
          uint64_t v27 = type metadata accessor for URL();
          uint64_t v28 = *(void *)(v27 - 8);
          uint64_t v29 = v28;
          if (v26)
          {
            (*(void (**)(char *, unint64_t, uint64_t))(v28 + 16))(v10, (unint64_t)v25+ ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80)), v27);
            (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v10, 0, 1, v27);
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v10, 1, v27) != 1)
            {
              (*(void (**)(void *, char *, uint64_t))(v29 + 32))(v16, v10, v27);
              type metadata accessor for Result<URL, Error>();
              uint64_t v31 = v30;
              swift_storeEnumTagMultiPayload();
LABEL_21:
              type metadata accessor for Result<URL, Error>();
              (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v16, 0, 1, v31);
              goto LABEL_22;
            }
          }
          else
          {
            uint64_t v29 = v28 + 56;
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v28 + 56))(v10, 1, 1, v27);
          }
          __break(1u);
LABEL_26:
          (*(void (**)(void (*)(void *), uint64_t, uint64_t, uint64_t))(v29 + 56))(v7, 1, 1, v24);
LABEL_27:
          __break(1u);
          JUMPOUT(0x187D937A8);
        }
        char v45 = v54;
        *uint64_t v16 = v54;
        type metadata accessor for Result<URL, Error>();
        uint64_t v31 = v46;
        swift_storeEnumTagMultiPayload();
        id v47 = v45;
        goto LABEL_21;
      }
      type metadata accessor for Result<URL, Error>();
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56))(v16, 1, 1, v40);
LABEL_22:
      v7(v16);
      outlined destroy of FileExportOperation?((uint64_t)v16, &lazy cache variable for type metadata for Result<URL, Error>?, (uint64_t (*)(uint64_t))type metadata accessor for Result<URL, Error>);
      return outlined destroy of FileExportOperation.Mode((uint64_t)v19, type metadata accessor for FileExportOperation.Move);
  }
}

Swift::Void __swiftcall FileExportOperation.didCancel()()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for FileExportOperation.Move(0);
  MEMORY[0x1F4188790](v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = type metadata accessor for FileExportOperation.Mode(0);
  MEMORY[0x1F4188790](v5);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of FileExportOperation.Mode(v1, (uint64_t)v7, type metadata accessor for FileExportOperation.Mode);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      (*((void (**)(void))v7 + 3))();
      swift_release();
      swift_release();
      goto LABEL_6;
    case 2u:
      uint64_t v9 = *(void *)v7;
      uint64_t v10 = *((void *)v7 + 1);
      uint64_t v11 = *((void *)v7 + 2);
      uint64_t v12 = *((void *)v7 + 3);
      char v13 = v7[32];
      (*((void (**)(void))v7 + 10))();
      outlined consume of FileExportOperation.Storage(v9, v10, v11, v12, v13);
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 3u:
      (*((void (**)(void))v7 + 5))();
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      uint64_t v8 = outlined init with take of FileExportOperation((uint64_t)v7, (uint64_t)v4, type metadata accessor for FileExportOperation.Move);
      (*(void (**)(uint64_t))&v4[*(int *)(v2 + 24)])(v8);
      outlined destroy of FileExportOperation.Mode((uint64_t)v4, type metadata accessor for FileExportOperation.Move);
      break;
  }
}

uint64_t FileExportOperation.writeTemporaryFilesIfNecessary()()
{
  v1[5] = v0;
  uint64_t v2 = type metadata accessor for UTType();
  v1[6] = v2;
  v1[7] = *(void *)(v2 - 8);
  v1[8] = swift_task_alloc();
  v1[9] = type metadata accessor for FileExportOperation.File(0);
  v1[10] = swift_task_alloc();
  v1[11] = swift_task_alloc();
  v1[12] = type metadata accessor for FileDocumentWriteConfiguration(0);
  v1[13] = swift_task_alloc();
  _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  v1[14] = swift_task_alloc();
  v1[15] = swift_task_alloc();
  v1[16] = swift_task_alloc();
  v1[17] = swift_task_alloc();
  type metadata accessor for FileExportOperation.Move(0);
  v1[18] = swift_task_alloc();
  v1[19] = type metadata accessor for FileExportOperation.Mode(0);
  v1[20] = swift_task_alloc();
  uint64_t v3 = type metadata accessor for URL();
  v1[21] = v3;
  v1[22] = *(void *)(v3 - 8);
  v1[23] = swift_task_alloc();
  v1[24] = swift_task_alloc();
  v1[25] = swift_task_alloc();
  return MEMORY[0x1F4188298](FileExportOperation.writeTemporaryFilesIfNecessary(), 0, 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  id v3;
  id v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t (*v12)(uint64_t, void);
  uint64_t (**v14)(uint64_t);
  uint64_t (*v15)(uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  uint64_t v26;
  char v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unsigned int (*v45)(uint64_t, uint64_t, uint64_t);
  uint64_t v46;
  uint64_t v47;
  void (*v48)(uint64_t, uint64_t, void);
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void *v68;
  uint64_t v69;
  uint64_t v70;
  void *v71;
  id v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  Class isa;
  id v77;
  NSURL *v78;
  void *v79;
  void *v80;
  unsigned int v81;
  void *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  id v88;
  id v89;
  uint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  unint64_t v92;
  void (*v93)(uint64_t, uint64_t);
  uint64_t v94;
  uint64_t v95;
  void *v96;
  void (*v97)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t (*v105)(uint64_t, uint64_t);
  uint64_t v106;

  uint64_t v1 = v0[20];
  uint64_t v2 = v0[5];
  uint64_t v3 = objc_msgSend(self, sel_defaultManager);
  uint64_t v4 = objc_msgSend(v3, sel_temporaryDirectory);

  static URL._unconditionallyBridgeFromObjectiveC(_:)();
  outlined init with copy of FileExportOperation.Mode(v2, v1, type metadata accessor for FileExportOperation.Mode);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v11 = (uint64_t *)v0[20];
      (*(void (**)(void, void))(v0[22] + 8))(v0[25], v0[21]);
      uint64_t v104 = *v11;
      swift_release();
      swift_release();
      goto LABEL_4;
    case 2u:
      uint64_t v14 = (uint64_t (**)(uint64_t))v0[20];
      uint64_t v15 = *v14;
      v0[26] = *v14;
      uint64_t v16 = (uint64_t)v14[1];
      v0[27] = v16;
      uint64_t v17 = (uint64_t)v14[2];
      v0[28] = v17;
      uint64_t v18 = (uint64_t)v14[3];
      v0[29] = v18;
      uint64_t v19 = *((unsigned char *)v14 + 32);
      v0[30] = v14[5];
      v0[31] = v14[7];
      v0[32] = v14[9];
      v0[33] = v14[11];
      if ((v19 & 1) == 0)
      {
        char v101 = v18;
        uint64_t v29 = v17;
        swift_retain();
        uint64_t v99 = v29;
        swift_bridgeObjectRetain();
        uint64_t v30 = FileExportOperation.allowedContentTypes.getter();
        uint64_t v31 = v0[17];
        uint64_t v33 = v0[6];
        uint64_t v32 = v0[7];
        char v34 = v15;
        if (*(void *)(v30 + 16))
        {
          (*(void (**)(uint64_t, unint64_t, uint64_t))(v32 + 16))(v31, v30 + ((*(unsigned __int8 *)(v32 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v32 + 80)), v33);
          uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
          uint64_t v36 = v31;
          uint64_t v37 = 0;
        }
        else
        {
          uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v32 + 56);
          uint64_t v36 = v0[17];
          uint64_t v37 = 1;
        }
        int v97 = v35;
        v35(v36, v37, 1, v33);
        char v42 = v0[17];
        uint64_t v43 = v0[6];
        id v44 = v0[7];
        swift_bridgeObjectRelease();
        char v45 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48);
        if (v45(v42, 1, v43) == 1)
        {
          __break(1u);
LABEL_35:
          __break(1u);
          goto LABEL_36;
        }
        id v47 = v0[12];
        uint64_t v46 = v0[13];
        char v48 = *(void (**)(uint64_t, uint64_t, void))(v0[7] + 16);
        v48(v46, v0[17], v0[6]);
        *(void *)(v46 + *(int *)(v47 + 20)) = 0;
        uint64_t v95 = v16;
        int v96 = (void *)v34(v46);
        uint64_t v94 = (uint64_t)v34;
        int v49 = v0[22];
        uint64_t v50 = v0[17];
        uint64_t v51 = v0[6];
        uint64_t v52 = v0[7];
        outlined destroy of FileExportOperation.Mode(v0[13], type metadata accessor for FileDocumentWriteConfiguration);
        uint64_t v93 = *(void (**)(uint64_t, uint64_t))(v52 + 8);
        v93(v50, v51);
        _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
        uint64_t v53 = (*(unsigned __int8 *)(v49 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v49 + 80);
        int v54 = swift_allocObject();
        *(_OWORD *)(v54 + 16) = xmmword_18834BB80;
        int v55 = FileExportOperation.allowedContentTypes.getter();
        uint64_t v104 = v54;
        uint64_t v92 = v53;
        if (*(void *)(v55 + 16))
        {
          uint64_t v56 = *(unsigned __int8 *)(v0[7] + 80);
          v48(v0[16], v55 + ((v56 + 32) & ~v56), v0[6]);
          uint64_t v57 = 0;
        }
        else
        {
          uint64_t v57 = 1;
        }
        uint64_t v66 = v0[16];
        char v67 = v0[6];
        v97(v66, v57, 1, v67);
        swift_bridgeObjectRelease();
        if (v45(v66, 1, v67) == 1)
        {
LABEL_36:
          __break(1u);
          JUMPOUT(0x187D94994);
        }
        uint64_t v68 = (void *)v0[11];
        uint64_t v69 = v0[9];
        char v70 = (uint64_t)v68 + *(int *)(v69 + 24);
        v48(v70, v0[16], v0[6]);
        long long v71 = (void *)((char *)v68 + *(int *)(v69 + 20));
        *long long v71 = 0;
        v71[1] = 0;
        *uint64_t v68 = v96;
        type metadata accessor for FileExportOperation.File.Storage(0);
        swift_storeEnumTagMultiPayload();
        long long v72 = v96;
        FileExportOperation.File.preferredFilename.getter();
        if (!v73)
        {
          uint64_t v74 = FileExportOperation.defaultFilename(contentType:)(v70);
          uint64_t v75 = (void *)MEMORY[0x18C115780](v74);
          swift_bridgeObjectRelease();
          Class isa = UTType._bridgeToObjectiveC()().super.isa;
          uint64_t v77 = objc_msgSend(v75, sel_stringByAppendingPathExtensionForType_, isa);

          static String._unconditionallyBridgeFromObjectiveC(_:)();
        }
        outlined destroy of FileExportOperation.Mode(v0[11], type metadata accessor for FileExportOperation.File);
        URL.appendingPathComponent(_:)();
        swift_bridgeObjectRelease();
        URL._bridgeToObjectiveC()(v78);
        char v80 = v79;
        v0[4] = 0;
        uint64_t v81 = objc_msgSend(v72, sel_writeToURL_options_originalContentsURL_error_, v79, 0, 0, v0 + 4);

        uint64_t v82 = (void *)v0[4];
        char v83 = v0[24];
        uint64_t v98 = v0[25];
        uint64_t v84 = v0[21];
        uint64_t v85 = v0[22];
        char v86 = v0[16];
        long long v87 = v0[6];
        if (v81)
        {
          (*(void (**)(unint64_t, uint64_t, void))(v85 + 32))(v104 + v92, v83, v0[21]);
          long long v88 = v82;
          v93(v86, v87);

          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of FileExportOperation.Storage(v94, v95, v99, v101, 0);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          (*(void (**)(uint64_t, uint64_t))(v85 + 8))(v98, v84);
LABEL_4:
          uint64_t v100 = 0;
        }
        else
        {
          uint64_t v89 = v82;
          uint64_t v90 = _convertNSErrorToError(_:)();

          swift_willThrow();
          uint64_t v91 = *(void (**)(uint64_t, uint64_t))(v85 + 8);
          v91(v83, v84);
          v93(v86, v87);
          *(void *)(v104 + 16) = 0;
          swift_release();

          swift_release();
          swift_bridgeObjectRelease();
          outlined consume of FileExportOperation.Storage(v94, v95, v99, v101, 0);
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
          swift_bridgeObjectRelease();
          v91(v98, v84);
          uint64_t v100 = 1;
          uint64_t v104 = v90;
        }
LABEL_5:
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        uint64_t v12 = (uint64_t (*)(uint64_t, void))v0[1];
        return v12(v104, v100);
      }
      if (!v15)
      {
        uint64_t v38 = v0[22];
        uint64_t v102 = v0[21];
        uint64_t v103 = v0[25];
        uint64_t v39 = v17;
        lazy protocol witness table accessor for type FileExportOperation.Error and conformance FileExportOperation.Error();
        uint64_t v40 = swift_allocError();
        uint64_t v100 = 1;
        *uint64_t v41 = 1;
        uint64_t v104 = v40;
        swift_willThrow();
        outlined consume of FileExportOperation.Storage(0, v16, v39, v18, 1);
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v103, v102);
        goto LABEL_5;
      }
      outlined copy of AnyTransferable?((uint64_t)v15);
      outlined copy of AnyTransferable?((uint64_t)v15);
      uint64_t v20 = FileExportOperation.allowedContentTypes.getter();
      uint64_t v21 = v0[14];
      char v22 = v0[6];
      uint64_t v23 = v0[7];
      if (*(void *)(v20 + 16))
      {
        (*(void (**)(void, unint64_t, void))(v23 + 16))(v0[14], v20 + ((*(unsigned __int8 *)(v23 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80)), v0[6]);
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        v24(v21, 0, 1, v22);
      }
      else
      {
        uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v23 + 56);
        v24(v0[14], 1, 1, v22);
      }
      uint64_t v58 = v0[14];
      uint64_t v60 = v0[6];
      long long v59 = v0[7];
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v58, 1, v60) == 1) {
        goto LABEL_35;
      }
      uint64_t v61 = v0[15];
      uint64_t v62 = v0[6];
      (*(void (**)(uint64_t, void, uint64_t))(v0[7] + 32))(v61, v0[14], v62);
      v24(v61, 0, 1, v62);
      id v105 = (uint64_t (*)(uint64_t, uint64_t))((char *)v15 + *(int *)v15);
      uint64_t v63 = (void *)swift_task_alloc();
      v0[34] = v63;
      *uint64_t v63 = v0;
      v63[1] = FileExportOperation.writeTemporaryFilesIfNecessary();
      char v64 = v0[15];
      uint64_t v65 = v0[8];
      return v105(v65, v64);
    case 3u:
      id v25 = v0[20];
      uint64_t v26 = *(void *)v25;
      v0[37] = *(void *)v25;
      uint64_t v27 = *(unsigned char *)(v25 + 8);
      v0[38] = *(void *)(v25 + 16);
      v0[39] = *(void *)(v25 + 32);
      v0[40] = *(void *)(v25 + 48);
      v0[2] = MEMORY[0x1E4FBC860];
      uint64_t v28 = (void *)swift_task_alloc();
      v0[41] = v28;
      *uint64_t v28 = v0;
      v28[1] = FileExportOperation.writeTemporaryFilesIfNecessary();
      return FileExportOperation.makeFileWrappers(from:)(v26, v27);
    default:
      uint64_t v5 = v0[25];
      uint64_t v6 = v0[21];
      uint64_t v7 = v0[22];
      uint64_t v8 = v0[18];
      outlined init with take of FileExportOperation(v0[20], v8, type metadata accessor for FileExportOperation.Move);
      _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
      uint64_t v9 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v10 = swift_allocObject();
      *(_OWORD *)(v10 + 16) = xmmword_18834BB80;
      uint64_t v104 = v10;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v7 + 16))(v10 + v9, v8, v6);
      outlined destroy of FileExportOperation.Mode(v8, type metadata accessor for FileExportOperation.Move);
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      goto LABEL_4;
  }
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t (*v7)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = v0[26];
  uint64_t v4 = v0[27];
  uint64_t v10 = v0[25];
  uint64_t v6 = v0[21];
  uint64_t v5 = v0[22];
  outlined destroy of FileExportOperation?(v0[15], (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  outlined consume of FileExportOperation.Storage(v3, v4, v2, v1, 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  outlined consume of FileExportOperation.Storage(v3, v4, v2, v1, 1);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v10, v6);
  uint64_t v9 = v0[36];
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v7(v9, 1);
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  id v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  Class isa;
  id v15;
  void *v16;
  NSURL *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  void *v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  id v30;
  uint64_t v31;
  id v32;
  uint64_t v33;
  void (*v34)(uint64_t, uint64_t);
  uint64_t (*v35)(uint64_t, void);
  unint64_t v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;

  uint64_t v1 = (void *)v0[35];
  uint64_t v2 = v0[22];
  uint64_t v4 = v0[9];
  uint64_t v3 = (void *)v0[10];
  uint64_t v6 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[6];
  outlined destroy of FileExportOperation?(v0[15], (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
  uint64_t v37 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  id v44 = swift_allocObject();
  *(_OWORD *)(v44 + 16) = xmmword_18834BB80;
  uint64_t v8 = (uint64_t)v3 + *(int *)(v4 + 24);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v8, v5, v7);
  uint64_t v9 = (void *)((char *)v3 + *(int *)(v4 + 20));
  *uint64_t v9 = 0;
  v9[1] = 0;
  *uint64_t v3 = v1;
  type metadata accessor for FileExportOperation.File.Storage(0);
  swift_storeEnumTagMultiPayload();
  uint64_t v10 = v1;
  FileExportOperation.File.preferredFilename.getter();
  if (!v11)
  {
    uint64_t v12 = FileExportOperation.defaultFilename(contentType:)(v8);
    char v13 = (void *)MEMORY[0x18C115780](v12);
    swift_bridgeObjectRelease();
    Class isa = UTType._bridgeToObjectiveC()().super.isa;
    uint64_t v15 = objc_msgSend(v13, sel_stringByAppendingPathExtensionForType_, isa);

    static String._unconditionallyBridgeFromObjectiveC(_:)();
  }
  uint64_t v16 = (void *)v0[35];
  outlined destroy of FileExportOperation.Mode(v0[10], type metadata accessor for FileExportOperation.File);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v17);
  uint64_t v19 = v18;
  v0[3] = 0;
  uint64_t v20 = objc_msgSend(v16, sel_writeToURL_options_originalContentsURL_error_, v18, 0, 0, v0 + 3);

  uint64_t v21 = (void *)v0[3];
  char v22 = (void *)v0[35];
  uint64_t v23 = v0[29];
  uint64_t v24 = v0[27];
  id v25 = v0[28];
  uint64_t v40 = v0[26];
  uint64_t v27 = v0[22];
  uint64_t v26 = v0[23];
  uint64_t v28 = v0[7];
  char v42 = v0[8];
  uint64_t v43 = v0[25];
  uint64_t v41 = v0[6];
  uint64_t v39 = v20;
  if (v20)
  {
    uint64_t v29 = v0[21];
    (*(void (**)(unint64_t, uint64_t, uint64_t))(v27 + 32))(v44 + v37, v26, v29);
    uint64_t v30 = v21;

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v40, v24, v25, v23, 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v40, v24, v25, v23, 1);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v42, v41);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v43, v29);
  }
  else
  {
    uint64_t v38 = (void *)v0[35];
    uint64_t v31 = v0[21];
    uint64_t v32 = v21;
    uint64_t v33 = _convertNSErrorToError(_:)();

    swift_willThrow();
    char v34 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
    v34(v26, v31);
    *(void *)(v44 + 16) = 0;
    swift_release();

    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v40, v24, v25, v23, 1);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    outlined consume of FileExportOperation.Storage(v40, v24, v25, v23, 1);
    (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v42, v41);
    v34(v43, v31);
    id v44 = v33;
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v35 = (uint64_t (*)(uint64_t, void))v0[1];
  return v35(v44, v39 ^ 1);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, BOOL);
  uint64_t v11;
  uint64_t v12;

  uint64_t v1 = v0[42];
  uint64_t v2 = v0[43];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[5];
  uint64_t v5 = (void *)swift_task_alloc();
  _OWORD v5[2] = v3;
  v5[3] = v4;
  v5[4] = v0 + 2;
  specialized Sequence.forEach(_:)(v1, (void (*)(uint64_t, char *))partial apply for closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary());
  uint64_t v6 = v0[25];
  uint64_t v7 = v0[21];
  uint64_t v8 = v0[22];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
  swift_bridgeObjectRelease();
  if (v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v11 = v2;
  }
  else
  {
    uint64_t v11 = v0[2];
  }
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v9 = (uint64_t (*)(uint64_t, BOOL))v0[1];
  return v9(v11, v2 != 0);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t (*v4)(uint64_t, uint64_t);
  uint64_t v6;
  uint64_t v7;

  uint64_t v1 = v0[25];
  uint64_t v2 = v0[21];
  uint64_t v3 = v0[22];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v6 = v0[43];
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))v0[1];
  return v4(v6, 1);
}

uint64_t FileExportOperation.writeTemporaryFilesIfNecessary()(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 280) = a1;
  *(void *)(v3 + 288) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = FileExportOperation.writeTemporaryFilesIfNecessary();
  }
  else {
    uint64_t v4 = FileExportOperation.writeTemporaryFilesIfNecessary();
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t v6;

  uint64_t v3 = *v2;
  *(void *)(v3 + 336) = a1;
  *(void *)(v3 + 344) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = FileExportOperation.writeTemporaryFilesIfNecessary();
  }
  else {
    uint64_t v4 = FileExportOperation.writeTemporaryFilesIfNecessary();
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t FileExportOperation.makeFileWrappers(from:)(uint64_t a1, char a2)
{
  *(unsigned char *)(v3 + 216) = a2;
  *(void *)(v3 + 24) = a1;
  *(void *)(v3 + 32) = v2;
  *(void *)(v3 + 40) = type metadata accessor for FileDocumentWriteConfiguration(0);
  *(void *)(v3 + 48) = swift_task_alloc();
  _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8], MEMORY[0x1E4FBB718]);
  *(void *)(v3 + 56) = swift_task_alloc();
  *(void *)(v3 + 64) = swift_task_alloc();
  *(void *)(v3 + 72) = swift_task_alloc();
  uint64_t v4 = type metadata accessor for UTType();
  *(void *)(v3 + 80) = v4;
  *(void *)(v3 + 88) = *(void *)(v4 - 8);
  *(void *)(v3 + 96) = swift_task_alloc();
  *(void *)(v3 + 104) = swift_task_alloc();
  *(void *)(v3 + 112) = swift_task_alloc();
  *(void *)(v3 + 120) = swift_task_alloc();
  return MEMORY[0x1F4188298](FileExportOperation.makeFileWrappers(from:), 0, 0);
}

uint64_t FileExportOperation.makeFileWrappers(from:)()
{
  char v1 = *((unsigned char *)v0 + 216);
  uint64_t v2 = v0[3];
  unint64_t v3 = specialized Dictionary.init(dictionaryLiteral:)(MEMORY[0x1E4FBC860]);
  uint64_t v4 = (void *)v3;
  char v70 = v0;
  if ((v1 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = FileExportOperation.allowedContentTypes.getter();
    if (*(void *)(v5 + 16))
    {
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v0[11] + 16))(v0[9], v5 + ((*(unsigned __int8 *)(v0[11] + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v0[11] + 80)), v0[10]);
      uint64_t v6 = 0;
    }
    else
    {
      uint64_t v6 = 1;
    }
    uint64_t v18 = v0[10];
    uint64_t v19 = v0[11];
    uint64_t v20 = v0[9];
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v20, v6, 1, v18);
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v20, 1, v18);
    if (result != 1)
    {
      char v64 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[11] + 32);
      v64(v0[15], v0[9], v0[10]);
      uint64_t v22 = *(void *)(v2 + 16);
      uint64_t v23 = v0;
      if (v22)
      {
        uint64_t v66 = v0[11];
        uint64_t v67 = v0[5];
        uint64_t v25 = v66 + 16;
        uint64_t v24 = *(void (**)(void, void, void))(v66 + 16);
        uint64_t v26 = v2 + 48;
        uint64_t v65 = v24;
        do
        {
          uint64_t v68 = v22;
          uint64_t v27 = v23[6];
          uint64_t v28 = *(uint64_t (**)(uint64_t))(v26 - 16);
          v24(v27, v23[15], v23[10]);
          *(void *)(v27 + *(int *)(v67 + 20)) = 0;
          swift_retain();
          swift_bridgeObjectRetain();
          uint64_t v29 = (void *)v28(v27);
          uint64_t v30 = v23[15];
          uint64_t v31 = v23[10];
          uint64_t v32 = v23[14];
          outlined destroy of FileExportOperation.Mode(v23[6], type metadata accessor for FileDocumentWriteConfiguration);
          uint64_t v33 = v25;
          v24(v32, v30, v31);
          id v34 = v29;
          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          unint64_t v37 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
          uint64_t v38 = v4[2];
          BOOL v39 = (v36 & 1) == 0;
          uint64_t result = v38 + v39;
          if (__OFADD__(v38, v39))
          {
            __break(1u);
LABEL_35:
            __break(1u);
            goto LABEL_36;
          }
          char v40 = v36;
          if (v4[3] >= result)
          {
            if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
              specialized _NativeDictionary.copy()();
            }
          }
          else
          {
            specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
            unint64_t v41 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v34);
            if ((v40 & 1) != (v42 & 1))
            {
              type metadata accessor for NSFileWrapper();
              return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
            }
            unint64_t v37 = v41;
          }
          uint64_t v43 = v70[14];
          uint64_t v44 = v70[10];
          uint64_t v25 = v33;
          if (v40)
          {
            (*(void (**)(unint64_t, uint64_t, uint64_t))(v66 + 40))(v4[7] + *(void *)(v66 + 72) * v37, v43, v44);
          }
          else
          {
            v4[(v37 >> 6) + 8] |= 1 << v37;
            *(void *)(v4[6] + 8 * v37) = v34;
            uint64_t result = ((uint64_t (*)(unint64_t, uint64_t, uint64_t))v64)(v4[7] + *(void *)(v66 + 72) * v37, v43, v44);
            uint64_t v45 = v4[2];
            BOOL v46 = __OFADD__(v45, 1);
            uint64_t v47 = v45 + 1;
            if (v46) {
              goto LABEL_35;
            }
            _OWORD v4[2] = v47;
            id v48 = v34;
          }
          swift_bridgeObjectRelease();

          swift_release();
          swift_bridgeObjectRelease();
          v26 += 24;
          uint64_t v22 = v68 - 1;
          uint64_t v23 = v70;
          uint64_t v24 = v65;
        }
        while (v68 != 1);
      }
      uint64_t v49 = v23[15];
      uint64_t v50 = v70[11];
      uint64_t v51 = v70[10];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v50 + 8))(v49, v51);
      uint64_t v0 = v70;
LABEL_23:
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      swift_task_dealloc();
      uint64_t v52 = (uint64_t (*)(void *))v0[1];
      return v52(v4);
    }
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    return result;
  }
  uint64_t v7 = *(void *)(v2 + 16);
  v0[16] = v7;
  if (!v7) {
    goto LABEL_23;
  }
  v0[17] = v3;
  v0[18] = 0;
  uint64_t v8 = (void *)v0[3];
  uint64_t v9 = (int *)v8[4];
  v0[19] = v8[5];
  v0[20] = v8[6];
  v0[21] = v8[7];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = FileExportOperation.allowedContentTypes.getter();
  uint64_t v11 = v0[10];
  uint64_t v12 = v0[11];
  uint64_t v13 = v0[7];
  uint64_t v14 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if (*(void *)(v10 + 16))
  {
    uint64_t v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v12 + 16);
    uint64_t v15 = v12 + 16;
    v16(v0[7], v10 + ((*(unsigned __int8 *)(v15 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 64)), v0[10]);
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 40);
    v17(v13, 0, 1, v11);
  }
  else
  {
    uint64_t v17 = *v14;
    (*v14)(v0[7], 1, 1, v11);
  }
  uint64_t v53 = v0[10];
  uint64_t v54 = v0[11];
  uint64_t v55 = v0[7];
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v55, 1, v53);
  if (result == 1) {
    goto LABEL_37;
  }
  uint64_t v57 = v0[10];
  uint64_t v56 = v0[11];
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 32);
  uint64_t v59 = v0[7];
  uint64_t v60 = v0[8];
  v0[22] = (uint64_t)v58;
  v0[23] = (v56 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v58(v60, v59, v57);
  v17(v60, 0, 1, v57);
  uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t))((char *)v9 + *v9);
  uint64_t v61 = (void *)swift_task_alloc();
  v0[24] = (uint64_t)v61;
  *uint64_t v61 = v0;
  v61[1] = FileExportOperation.makeFileWrappers(from:);
  uint64_t v62 = v0[13];
  uint64_t v63 = v0[8];
  return v69(v62, v63);
}

{
  uint64_t v0;
  uint64_t (*v1)(void);
  uint64_t v3;

  outlined destroy of FileExportOperation?(*(void *)(v0 + 64), (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  char v1 = *(uint64_t (**)(void))(v0 + 8);
  return v1();
}

{
  void *v0;
  void *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  int isUniquelyReferenced_nonNull_native;
  void *v9;
  char v10;
  unint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t result;
  char v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  void *v19;
  uint64_t v20;
  uint64_t (*v21)(unint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  uint64_t v27;
  void *v28;
  id v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(void *);
  uint64_t v37;
  void *v38;
  int *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  void (**v44)(void, uint64_t, uint64_t, uint64_t);
  uint64_t v45;
  void (*v46)(void, unint64_t, void);
  void (*v47)(uint64_t, void, uint64_t, uint64_t);
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(uint64_t, uint64_t, uint64_t);
  uint64_t v54;
  uint64_t v55;
  void *v56;
  uint64_t v57;
  uint64_t v58;
  void *v59;
  uint64_t (*v60)(uint64_t, uint64_t);
  uint64_t v61;

  char v1 = (void *)v0[25];
  uint64_t v2 = v0[17];
  uint64_t v4 = v0[12];
  unint64_t v3 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[11];
  outlined destroy of FileExportOperation?(v0[8], (unint64_t *)&lazy cache variable for type metadata for UTType?, MEMORY[0x1E4FBCEA8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v4, v3, v5);
  uint64_t v7 = v1;
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v0[2] = v2;
  uint64_t v9 = v0 + 2;
  uint64_t v11 = specialized __RawDictionaryStorage.find<A>(_:)((uint64_t)v7);
  uint64_t v12 = *(void *)(v2 + 16);
  uint64_t v13 = (v10 & 1) == 0;
  uint64_t result = v12 + v13;
  if (__OFADD__(v12, v13))
  {
    __break(1u);
    goto LABEL_26;
  }
  uint64_t v15 = v10;
  if (*(void *)(v0[17] + 24) >= result)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      specialized _NativeDictionary.copy()();
    }
  }
  else
  {
    uint64_t v16 = v0[25];
    specialized _NativeDictionary._copyOrMoveAndResize(capacity:moveElements:)(result, isUniquelyReferenced_nonNull_native);
    uint64_t v17 = specialized __RawDictionaryStorage.find<A>(_:)(v16);
    if ((v15 & 1) != (v18 & 1))
    {
      type metadata accessor for NSFileWrapper();
      return KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)();
    }
    uint64_t v11 = v17;
  }
  uint64_t v19 = (void *)*v9;
  uint64_t v59 = (void *)*v9;
  if (v15)
  {
    (*(void (**)(unint64_t, void, void))(v0[11] + 40))(v19[7] + *(void *)(v0[11] + 72) * v11, v0[12], v0[10]);
    goto LABEL_14;
  }
  uint64_t v20 = v0[25];
  uint64_t v21 = (uint64_t (*)(unint64_t, uint64_t, uint64_t))v0[22];
  uint64_t v23 = v0[11];
  uint64_t v22 = v0[12];
  uint64_t v24 = v0[10];
  v19[(v11 >> 6) + 8] |= 1 << v11;
  *(void *)(v19[6] + 8 * v11) = v20;
  uint64_t result = v21(v19[7] + *(void *)(v23 + 72) * v11, v22, v24);
  uint64_t v25 = v19[2];
  uint64_t v26 = __OFADD__(v25, 1);
  uint64_t v27 = v25 + 1;
  if (v26)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  uint64_t v28 = (void *)v0[25];
  v19[2] = v27;
  uint64_t v29 = v28;
LABEL_14:
  uint64_t v30 = (void *)v0[25];
  uint64_t v31 = v0[18];
  uint64_t v32 = v0[16];
  uint64_t v33 = v0[13];
  uint64_t v35 = v0[10];
  id v34 = v0[11];
  swift_bridgeObjectRelease();

  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v34 + 8))(v33, v35);
  if (v31 + 1 == v32)
  {
    swift_bridgeObjectRelease();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    char v36 = (uint64_t (*)(void *))v0[1];
    return v36(v59);
  }
  unint64_t v37 = v0[18] + 1;
  v0[17] = v59;
  v0[18] = v37;
  uint64_t v38 = (void *)(v0[3] + 32 * v37);
  BOOL v39 = (int *)v38[4];
  v0[19] = v38[5];
  v0[20] = v38[6];
  v0[21] = v38[7];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  char v40 = FileExportOperation.allowedContentTypes.getter();
  unint64_t v41 = v0[10];
  char v42 = v0[11];
  uint64_t v43 = v0[7];
  uint64_t v44 = (void (**)(void, uint64_t, uint64_t, uint64_t))(v42 + 56);
  if (*(void *)(v40 + 16))
  {
    BOOL v46 = *(void (**)(void, unint64_t, void))(v42 + 16);
    uint64_t v45 = v42 + 16;
    v46(v0[7], v40 + ((*(unsigned __int8 *)(v45 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 64)), v0[10]);
    uint64_t v47 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v45 + 40);
    v47(v43, 0, 1, v41);
  }
  else
  {
    uint64_t v47 = *v44;
    (*v44)(v0[7], 1, 1, v41);
  }
  id v48 = v0[10];
  uint64_t v49 = v0[11];
  uint64_t v50 = v0[7];
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v50, 1, v48);
  if (result == 1)
  {
LABEL_27:
    __break(1u);
    return result;
  }
  uint64_t v52 = v0[10];
  uint64_t v51 = v0[11];
  uint64_t v53 = *(void (**)(uint64_t, uint64_t, uint64_t))(v51 + 32);
  uint64_t v54 = v0[7];
  uint64_t v55 = v0[8];
  v0[22] = v53;
  v0[23] = (v51 + 32) & 0xFFFFFFFFFFFFLL | 0x48D8000000000000;
  v53(v55, v54, v52);
  v47(v55, 0, 1, v52);
  uint64_t v60 = (uint64_t (*)(uint64_t, uint64_t))((char *)v39 + *v39);
  uint64_t v56 = (void *)swift_task_alloc();
  v0[24] = v56;
  *uint64_t v56 = v0;
  v56[1] = FileExportOperation.makeFileWrappers(from:);
  uint64_t v57 = v0[13];
  uint64_t v58 = v0[8];
  return v60(v57, v58);
}

uint64_t FileExportOperation.makeFileWrappers(from:)(uint64_t a1)
{
  uint64_t v3 = *v2;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = v1;
  swift_task_dealloc();
  if (v1) {
    uint64_t v4 = FileExportOperation.makeFileWrappers(from:);
  }
  else {
    uint64_t v4 = FileExportOperation.makeFileWrappers(from:);
  }
  return MEMORY[0x1F4188298](v4, 0, 0);
}

uint64_t closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary()(void *a1, uint64_t a2, uint64_t a3, void *a4, char **a5)
{
  BOOL v46 = a5;
  id v45 = a4;
  v49[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v7 = type metadata accessor for FileExportOperation.File(0);
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  uint64_t v10 = (uint64_t *)((char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v11 = type metadata accessor for URL();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  id v48 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)&v44 - v15;
  MEMORY[0x1F4188790](v17);
  uint64_t v47 = (char *)&v44 - v18;
  uint64_t v19 = (uint64_t)v10 + *(int *)(v8 + 32);
  uint64_t v20 = type metadata accessor for UTType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16))(v19, a2, v20);
  uint64_t v21 = (void *)((char *)v10 + *(int *)(v8 + 28));
  *uint64_t v21 = 0;
  v21[1] = 0;
  *uint64_t v10 = a1;
  type metadata accessor for FileExportOperation.File.Storage(0);
  swift_storeEnumTagMultiPayload();
  id v22 = a1;
  FileExportOperation.File.preferredFilename.getter();
  if (!v23)
  {
    uint64_t v24 = FileExportOperation.defaultFilename(contentType:)(v19);
    uint64_t v25 = (void *)MEMORY[0x18C115780](v24);
    swift_bridgeObjectRelease();
    Class isa = UTType._bridgeToObjectiveC()().super.isa;
    id v27 = objc_msgSend(v25, sel_stringByAppendingPathExtensionForType_, isa);
    id v45 = v22;
    id v28 = v27;

    static String._unconditionallyBridgeFromObjectiveC(_:)();
    id v22 = v45;
  }
  outlined destroy of FileExportOperation.Mode((uint64_t)v10, type metadata accessor for FileExportOperation.File);
  URL.appendingPathComponent(_:)();
  swift_bridgeObjectRelease();
  URL._bridgeToObjectiveC()(v29);
  uint64_t v31 = v30;
  v49[0] = 0;
  unsigned int v32 = objc_msgSend(v22, sel_writeToURL_options_originalContentsURL_error_, v30, 0, 0, v49);

  id v33 = v49[0];
  if (v32)
  {
    id v34 = *(void (**)(char *, char *, uint64_t))(v12 + 32);
    uint64_t v35 = v47;
    v34(v47, v16, v11);
    (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v48, v35, v11);
    char v36 = v46;
    unint64_t v37 = *v46;
    id v38 = v33;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v36 = v37;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v37 + 2) + 1, 1, v37);
      *char v36 = v37;
    }
    unint64_t v41 = *((void *)v37 + 2);
    unint64_t v40 = *((void *)v37 + 3);
    if (v41 >= v40 >> 1)
    {
      unint64_t v37 = (char *)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(v40 > 1, v41 + 1, 1, v37);
      *char v36 = v37;
    }
    *((void *)v37 + 2) = v41 + 1;
    v34(&v37[((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))+ *(void *)(v12 + 72) * v41], v48, v11);
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v47, v11);
  }
  else
  {
    id v43 = v49[0];
    _convertNSErrorToError(_:)();

    swift_willThrow();
    return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v16, v11);
  }
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance FileExportOperation.Key(uint64_t a1, void (*a2)(void))
{
  _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v13 - v8;
  outlined init with take of FileExportOperation?(a1, (uint64_t)v6);
  uint64_t v10 = type metadata accessor for FileExportOperation(0);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v6, 1, v10) == 1)
  {
    a2();
    outlined destroy of FileExportOperation?((uint64_t)v6, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation);
  }
  else
  {
    outlined init with take of FileExportOperation((uint64_t)v6, (uint64_t)v9, type metadata accessor for FileExportOperation);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0, 1, v10);
  }
  return outlined init with take of FileExportOperation?((uint64_t)v9, a1);
}

uint64_t UTType.genericPartialFilename.getter()
{
  type metadata accessor for SwiftUIClass();
  uint64_t ObjCClassFromMetadata = swift_getObjCClassFromMetadata();
  uint64_t v1 = self;
  id v2 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
  v17._uint64_t countAndFlagsBits = 0xD000000000000028;
  v17._object = (void *)0x80000001883397F0;
  v3._uint64_t countAndFlagsBits = 0x646574726F707845;
  v3._object = (void *)0xEB00000000402520;
  v4.value._uint64_t countAndFlagsBits = 0xD000000000000010;
  v4.value._object = (void *)0x80000001883397D0;
  v5._uint64_t countAndFlagsBits = 0x646574726F707845;
  v5._object = (void *)0xEB00000000402520;
  NSLocalizedString(_:tableName:bundle:value:comment:)(v3, v4, (NSBundle)v2, v5, v17);

  type metadata accessor for _ContiguousArrayStorage<CVarArg>();
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_18834BB80;
  uint64_t countAndFlagsBits = UTType.localizedDescription.getter();
  object = v8;
  *(void *)(v6 + 56) = MEMORY[0x1E4FBB1A0];
  *(void *)(v6 + 64) = lazy protocol witness table accessor for type String and conformance String();
  if (!object)
  {
    id v10 = objc_msgSend(v1, sel_bundleForClass_, ObjCClassFromMetadata);
    v18._uint64_t countAndFlagsBits = 0xD000000000000026;
    v18._object = (void *)0x8000000188339820;
    v11._uint64_t countAndFlagsBits = 1701603686;
    v11._object = (void *)0xE400000000000000;
    v12.value._uint64_t countAndFlagsBits = 0xD000000000000010;
    v12.value._object = (void *)0x80000001883397D0;
    v13._uint64_t countAndFlagsBits = 1701603686;
    v13._object = (void *)0xE400000000000000;
    Swift::String v14 = NSLocalizedString(_:tableName:bundle:value:comment:)(v11, v12, (NSBundle)v10, v13, v18);
    uint64_t countAndFlagsBits = v14._countAndFlagsBits;
    object = v14._object;
  }
  *(void *)(v6 + 32) = countAndFlagsBits;
  *(void *)(v6 + 40) = object;
  uint64_t v15 = String.init(format:_:)();
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t protocol witness for ConfigurableFileOperation.customizationID.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (void *)(v3 + *(int *)(a3 + 20));
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v6 = a1;
  v6[1] = a2;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.defaultDirectory.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of Predicate<Pack{URL}>?(a1, v2 + *(int *)(a2 + 24), (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0]);
}

uint64_t protocol witness for ConfigurableFileOperation.message.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (uint64_t *)(v5 + *(int *)(a5 + 28));
  uint64_t result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *id v10 = a1;
  v10[1] = a2;
  void v10[2] = a3;
  void v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.confirmationLabel.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (uint64_t *)(v5 + *(int *)(a5 + 32));
  uint64_t result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *id v10 = a1;
  v10[1] = a2;
  void v10[2] = a3;
  void v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.filenameLabel.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  id v10 = (uint64_t *)(v5 + *(int *)(a5 + 36));
  uint64_t result = outlined consume of Text?(*v10, v10[1], v10[2], v10[3]);
  *id v10 = a1;
  v10[1] = a2;
  void v10[2] = a3;
  void v10[3] = a4;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.urlEnabled.setter in conformance FileExportOperation(uint64_t a1, uint64_t a2)
{
  return outlined assign with take of Predicate<Pack{URL}>?(a1, v2 + *(int *)(a2 + 40), &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>);
}

uint64_t protocol witness for ConfigurableFileOperation.importsUnresolvedAliases.setter in conformance FileExportOperation(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(v2 + *(int *)(a2 + 44)) = result;
  return result;
}

uint64_t protocol witness for ConfigurableFileOperation.browserOptions.setter in conformance FileExportOperation(uint64_t result, uint64_t a2)
{
  char v3 = *(unsigned char *)(result + 8);
  uint64_t v4 = v2 + *(int *)(a2 + 48);
  *(void *)uint64_t v4 = *(void *)result;
  *(unsigned char *)(v4 + 8) = v3;
  return result;
}

uint64_t outlined assign with take of Predicate<Pack{URL}>?(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  _s10Foundation3URLVSgMaTm_3(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40))(a2, a1, v6);
  return a2;
}

uint64_t outlined init with take of FileExportOperation?(uint64_t a1, uint64_t a2)
{
  _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for FileExportOperation?, type metadata accessor for FileExportOperation, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for FileExportOperation.File(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.File);
}

uint64_t partial apply for closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary()(void *a1, uint64_t a2)
{
  return closure #1 in FileExportOperation.writeTemporaryFilesIfNecessary()(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24), *(char ***)(v2 + 32));
}

uint64_t specialized Sequence.forEach(_:)(uint64_t a1, void (*a2)(uint64_t, char *))
{
  id v33 = a2;
  type metadata accessor for (key: NSFileWrapper, value: UTType)();
  uint64_t v32 = v4;
  MEMORY[0x1F4188790](v4);
  uint64_t v6 = (uint64_t *)((char *)&v30 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = *(void *)(a1 + 64);
  uint64_t v30 = a1 + 64;
  uint64_t v11 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v12 = -1;
  if (v11 < 64) {
    uint64_t v12 = ~(-1 << v11);
  }
  unint64_t v13 = v12 & v10;
  int64_t v31 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v34 = a1;
  uint64_t result = swift_bridgeObjectRetain();
  int64_t v15 = 0;
  while (v13)
  {
    unint64_t v16 = __clz(__rbit64(v13));
    v13 &= v13 - 1;
    unint64_t v17 = v16 | (v15 << 6);
LABEL_5:
    uint64_t v18 = *(void *)(v34 + 56);
    uint64_t v19 = *(void **)(*(void *)(v34 + 48) + 8 * v17);
    uint64_t v20 = type metadata accessor for UTType();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = v18 + *(void *)(v21 + 72) * v17;
    uint64_t v23 = v32;
    (*(void (**)(char *, uint64_t, uint64_t))(v21 + 16))(&v9[*(int *)(v32 + 48)], v22, v20);
    *(void *)uint64_t v9 = v19;
    outlined init with take of FileExportOperation((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for (key: NSFileWrapper, value: UTType));
    uint64_t v24 = *v6;
    uint64_t v25 = (char *)v6 + *(int *)(v23 + 48);
    id v26 = v19;
    v33(v24, v25);
    uint64_t result = outlined destroy of FileExportOperation.Mode((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for (key: NSFileWrapper, value: UTType));
    if (v2) {
      return swift_release();
    }
  }
  if (__OFADD__(v15++, 1))
  {
    __break(1u);
    goto LABEL_26;
  }
  if (v15 >= v31) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v30 + 8 * v15);
  if (v28)
  {
LABEL_19:
    unint64_t v13 = (v28 - 1) & v28;
    unint64_t v17 = __clz(__rbit64(v28)) + (v15 << 6);
    goto LABEL_5;
  }
  int64_t v29 = v15 + 1;
  if (v15 + 1 >= v31) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v30 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v15 + 2;
  if (v15 + 2 >= v31) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v30 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v15 + 3;
  if (v15 + 3 >= v31) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v30 + 8 * v29);
  if (v28) {
    goto LABEL_18;
  }
  int64_t v29 = v15 + 4;
  if (v15 + 4 >= v31) {
    return swift_release();
  }
  unint64_t v28 = *(void *)(v30 + 8 * v29);
  if (v28)
  {
LABEL_18:
    int64_t v15 = v29;
    goto LABEL_19;
  }
  while (1)
  {
    int64_t v15 = v29 + 1;
    if (__OFADD__(v29, 1)) {
      break;
    }
    if (v15 >= v31) {
      return swift_release();
    }
    unint64_t v28 = *(void *)(v30 + 8 * v15);
    ++v29;
    if (v28) {
      goto LABEL_19;
    }
  }
LABEL_26:
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type FileExportOperation.Error and conformance FileExportOperation.Error()
{
  unint64_t result = lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error;
  if (!lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error;
  if (!lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type FileExportOperation.Error and conformance FileExportOperation.Error);
  }
  return result;
}

uint64_t outlined destroy of FileExportOperation?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s10Foundation3URLVSgMaTm_3(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t type metadata accessor for FileExportOperation.File.Storage(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.File.Storage);
}

uint64_t outlined init with copy of FileExportOperation.Mode(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t specialized FileExportOperation.BatchExport.allowedContentTypes.getter(void *a1, char a2, uint64_t a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = *(void *)(a3 + 16);
  if (a2)
  {
    if (v4) {
      goto LABEL_8;
    }
    if (a1[2])
    {
      uint64_t v3 = a1[7];
      goto LABEL_8;
    }
    return MEMORY[0x1E4FBC860];
  }
  if (!v4)
  {
    if (a1[2])
    {
      uint64_t v3 = a1[6];
      goto LABEL_8;
    }
    return MEMORY[0x1E4FBC860];
  }
LABEL_8:
  swift_bridgeObjectRetain();
  return v3;
}

void type metadata accessor for (key: NSFileWrapper, value: UTType)()
{
  if (!lazy cache variable for type metadata for (key: NSFileWrapper, value: UTType))
  {
    type metadata accessor for NSFileWrapper();
    type metadata accessor for UTType();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (key: NSFileWrapper, value: UTType));
    }
  }
}

unint64_t type metadata accessor for NSFileWrapper()
{
  unint64_t result = lazy cache variable for type metadata for NSFileWrapper;
  if (!lazy cache variable for type metadata for NSFileWrapper)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&lazy cache variable for type metadata for NSFileWrapper);
  }
  return result;
}

uint64_t outlined init with take of FileExportOperation(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t type metadata accessor for FileExportOperation.Resolved(uint64_t a1)
{
  return type metadata accessor for SortableTableHeaderButton(a1, (uint64_t *)&type metadata singleton initialization cache for FileExportOperation.Resolved);
}

char *initializeBufferWithCopyOfBuffer for FileExportOperation.File.Storage(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)a1 = *a2;
    a1 = &v8[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      *(void *)a1 = *a2;
      uint64_t v7 = v6;
    }
    else
    {
      uint64_t v9 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v9 - 8) + 16))(a1, a2, v9);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void destroy for FileExportOperation.File.Storage(void **a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = *a1;
  }
  else
  {
    uint64_t v3 = type metadata accessor for URL();
    uint64_t v4 = *(void (**)(void **, uint64_t))(*(void *)(v3 - 8) + 8);
    v4(a1, v3);
  }
}

void **initializeWithCopy for FileExportOperation.File.Storage(void **a1, void **a2)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v4 = *a2;
    *a1 = *a2;
    id v5 = v4;
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
  }
  swift_storeEnumTagMultiPayload();
  return a1;
}

void **assignWithCopy for FileExportOperation.File.Storage(void **a1, void **a2)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v4 = *a2;
      *a1 = *a2;
      id v5 = v4;
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
    }
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

uint64_t outlined destroy of FileExportOperation.Mode(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void *initializeWithTake for FileExportOperation.File.Storage(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  else
  {
    uint64_t v6 = type metadata accessor for URL();
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
    swift_storeEnumTagMultiPayload();
  }
  return a1;
}

void *assignWithTake for FileExportOperation.File.Storage(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      swift_storeEnumTagMultiPayload();
    }
  }
  return a1;
}

uint64_t type metadata completion function for FileExportOperation.File.Storage()
{
  uint64_t result = type metadata accessor for URL();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for FileExportOperation.File(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *(void *)a1 = *a2;
    a1 = &v9[(v5 + 16) & ~(unint64_t)v5];
    swift_retain();
  }
  else
  {
    type metadata accessor for FileExportOperation.File.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = *a2;
      *(void *)a1 = *a2;
      uint64_t v8 = v7;
    }
    else
    {
      uint64_t v10 = type metadata accessor for URL();
      (*(void (**)(char *, char **, uint64_t))(*(void *)(v10 - 8) + 16))(a1, a2, v10);
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v11 = *(int *)(a3 + 20);
    uint64_t v12 = *(int *)(a3 + 24);
    unint64_t v13 = &a1[v11];
    Swift::String v14 = (char **)((char *)a2 + v11);
    uint64_t v15 = v14[1];
    *(void *)unint64_t v13 = *v14;
    *((void *)v13 + 1) = v15;
    unint64_t v16 = &a1[v12];
    unint64_t v17 = (char *)a2 + v12;
    uint64_t v18 = type metadata accessor for UTType();
    uint64_t v19 = *(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16);
    swift_bridgeObjectRetain();
    v19(v16, v17, v18);
  }
  return a1;
}

uint64_t destroy for FileExportOperation.File(id *a1, uint64_t a2)
{
  type metadata accessor for FileExportOperation.File.Storage(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
  }
  else
  {
    uint64_t v4 = type metadata accessor for URL();
    (*(void (**)(id *, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  }
  swift_bridgeObjectRelease();
  int v5 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for UTType();
  uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8);

  return v7(v5, v6);
}

void **initializeWithCopy for FileExportOperation.File(void **a1, void **a2, uint64_t a3)
{
  type metadata accessor for FileExportOperation.File.Storage(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v6 = *a2;
    *a1 = *a2;
    id v7 = v6;
  }
  else
  {
    uint64_t v8 = type metadata accessor for URL();
    (*(void (**)(void **, void **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void **)((char *)a1 + v9);
  uint64_t v12 = (void **)((char *)a2 + v9);
  uint64_t v13 = v12[1];
  *uint64_t v11 = *v12;
  v11[1] = v13;
  Swift::String v14 = (char *)a1 + v10;
  uint64_t v15 = (char *)a2 + v10;
  uint64_t v16 = type metadata accessor for UTType();
  unint64_t v17 = *(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 16);
  swift_bridgeObjectRetain();
  v17(v14, v15, v16);
  return a1;
}

void **assignWithCopy for FileExportOperation.File(void **a1, void **a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    type metadata accessor for FileExportOperation.File.Storage(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v6 = *a2;
      *a1 = *a2;
      id v7 = v6;
    }
    else
    {
      uint64_t v8 = type metadata accessor for URL();
      (*(void (**)(void **, void **, uint64_t))(*(void *)(v8 - 8) + 16))(a1, a2, v8);
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = *(int *)(a3 + 20);
  uint64_t v10 = (void **)((char *)a1 + v9);
  uint64_t v11 = (void **)((char *)a2 + v9);
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (char *)a1 + v12;
  Swift::String v14 = (char *)a2 + v12;
  uint64_t v15 = type metadata accessor for UTType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 24))(v13, v14, v15);
  return a1;
}

char *initializeWithTake for FileExportOperation.File(char *a1, char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileExportOperation.File.Storage(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v8 = *(int *)(a3 + 24);
  *(_OWORD *)&a1[*(int *)(a3 + 20)] = *(_OWORD *)&a2[*(int *)(a3 + 20)];
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UTType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 32))(v9, v10, v11);
  return a1;
}

char *assignWithTake for FileExportOperation.File(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.File.Storage);
    uint64_t v6 = type metadata accessor for FileExportOperation.File.Storage(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
    else
    {
      uint64_t v7 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = &a1[v8];
  uint64_t v10 = &a2[v8];
  uint64_t v12 = *(void *)v10;
  uint64_t v11 = *((void *)v10 + 1);
  *(void *)uint64_t v9 = v12;
  *((void *)v9 + 1) = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = *(int *)(a3 + 24);
  Swift::String v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  uint64_t v16 = type metadata accessor for UTType();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v16 - 8) + 40))(v14, v15, v16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FileExportOperation.File(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D984C0);
}

uint64_t sub_187D984C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileExportOperation.File.Storage(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 2147483646)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
  else
  {
    uint64_t v12 = type metadata accessor for UTType();
    uint64_t v13 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48);
    uint64_t v14 = v12;
    uint64_t v15 = a1 + *(int *)(a3 + 24);
    return v13(v15, a2, v14);
  }
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.File(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D98610);
}

uint64_t sub_187D98610(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FileExportOperation.File.Storage(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else if (a3 == 2147483646)
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  else
  {
    uint64_t v11 = type metadata accessor for UTType();
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 24);
    return v12(v14, a2, a2, v13);
  }
  return result;
}

uint64_t type metadata completion function for FileExportOperation.File()
{
  uint64_t result = type metadata accessor for FileExportOperation.File.Storage(319);
  if (v1 <= 0x3F)
  {
    uint64_t result = type metadata accessor for UTType();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for FileExportOperation.Error(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x187D988DCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for FileExportOperation.Error()
{
  return &type metadata for FileExportOperation.Error;
}

unint64_t initializeBufferWithCopyOfBuffer for FileExportOperation.Resolved(unint64_t a1, uint64_t a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v18 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    type metadata accessor for FileExportOperation.Mode(0);
    long long v87 = a3;
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        uint64_t v28 = *(void *)(a2 + 32);
        long long v29 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v29;
        *(void *)(a1 + 32) = v28;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v19 = *(void *)a2;
        uint64_t v20 = *(void *)(a2 + 8);
        uint64_t v21 = *(void *)(a2 + 16);
        uint64_t v22 = *(void *)(a2 + 24);
        char v23 = *(unsigned char *)(a2 + 32);
        outlined copy of FileExportOperation.Storage(*(void *)a2, v20, v21, v22, v23);
        *(void *)a1 = v19;
        *(void *)(a1 + 8) = v20;
        *(void *)(a1 + 16) = v21;
        *(void *)(a1 + 24) = v22;
        *(unsigned char *)(a1 + 32) = v23;
        uint64_t v24 = *(void *)(a2 + 48);
        *(void *)(a1 + 40) = *(void *)(a2 + 40);
        *(void *)(a1 + 48) = v24;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
        uint64_t v25 = *(void *)(a2 + 88);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(void *)(a1 + 88) = v25;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v26 = *(unsigned char *)(a2 + 8);
        *(void *)a1 = *(void *)a2;
        *(unsigned char *)(a1 + 8) = v26;
        uint64_t v27 = *(void *)(a2 + 48);
        long long v86 = *(_OWORD *)(a2 + 32);
        *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
        *(_OWORD *)(a1 + 32) = v86;
        *(void *)(a1 + 48) = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v7 = type metadata accessor for URL();
        (*(void (**)(unint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16))(a1, a2, v7);
        uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v9 = *(int *)(v8 + 20);
        unint64_t v10 = (void *)(a1 + v9);
        uint64_t v11 = (uint64_t *)(a2 + v9);
        uint64_t v13 = *v11;
        uint64_t v12 = v11[1];
        *unint64_t v10 = v13;
        v10[1] = v12;
        uint64_t v14 = *(int *)(v8 + 24);
        uint64_t v15 = (void *)(a1 + v14);
        uint64_t v16 = (void *)(a2 + v14);
        uint64_t v17 = v16[1];
        void *v15 = *v16;
        v15[1] = v17;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = (int *)type metadata accessor for FileExportOperation(0);
    uint64_t v31 = v30[5];
    uint64_t v32 = (void *)(a1 + v31);
    id v33 = (void *)(a2 + v31);
    uint64_t v34 = v33[1];
    void *v32 = *v33;
    v32[1] = v34;
    uint64_t v35 = v30[6];
    char v36 = (void *)(a1 + v35);
    unint64_t v37 = (const void *)(a2 + v35);
    uint64_t v38 = type metadata accessor for URL();
    uint64_t v39 = *(void *)(v38 - 8);
    unint64_t v40 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain();
    if (v40(v37, 1, v38))
    {
      _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(v36, v37, *(void *)(*(void *)(v41 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v39 + 16))(v36, v37, v38);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
    }
    uint64_t v42 = v30[7];
    uint64_t v43 = a1 + v42;
    uint64_t v44 = a2 + v42;
    if (*(void *)(a2 + v42 + 24))
    {
      uint64_t v45 = *(void *)v44;
      uint64_t v46 = *(void *)(v44 + 8);
      char v47 = *(unsigned char *)(v44 + 16);
      outlined copy of Text.Storage(*(void *)v44, v46, v47);
      *(void *)uint64_t v43 = v45;
      *(void *)(v43 + 8) = v46;
      *(unsigned char *)(v43 + 16) = v47;
      *(void *)(v43 + 24) = *(void *)(v44 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v48 = *(_OWORD *)(v44 + 16);
      *(_OWORD *)uint64_t v43 = *(_OWORD *)v44;
      *(_OWORD *)(v43 + 16) = v48;
    }
    uint64_t v49 = v30[8];
    uint64_t v50 = a1 + v49;
    uint64_t v51 = a2 + v49;
    if (*(void *)(a2 + v49 + 24))
    {
      uint64_t v52 = *(void *)v51;
      uint64_t v53 = *(void *)(v51 + 8);
      char v54 = *(unsigned char *)(v51 + 16);
      outlined copy of Text.Storage(*(void *)v51, v53, v54);
      *(void *)uint64_t v50 = v52;
      *(void *)(v50 + 8) = v53;
      *(unsigned char *)(v50 + 16) = v54;
      *(void *)(v50 + 24) = *(void *)(v51 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v55 = *(_OWORD *)(v51 + 16);
      *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
      *(_OWORD *)(v50 + 16) = v55;
    }
    uint64_t v56 = v30[9];
    uint64_t v57 = a1 + v56;
    uint64_t v58 = a2 + v56;
    if (*(void *)(a2 + v56 + 24))
    {
      uint64_t v59 = *(void *)v58;
      uint64_t v60 = *(void *)(v58 + 8);
      char v61 = *(unsigned char *)(v58 + 16);
      outlined copy of Text.Storage(*(void *)v58, v60, v61);
      *(void *)uint64_t v57 = v59;
      *(void *)(v57 + 8) = v60;
      *(unsigned char *)(v57 + 16) = v61;
      *(void *)(v57 + 24) = *(void *)(v58 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v62 = *(_OWORD *)(v58 + 16);
      *(_OWORD *)uint64_t v57 = *(_OWORD *)v58;
      *(_OWORD *)(v57 + 16) = v62;
    }
    uint64_t v63 = v30[10];
    char v64 = (void *)(a1 + v63);
    uint64_t v65 = (const void *)(a2 + v63);
    type metadata accessor for Predicate<Pack{URL}>();
    uint64_t v67 = v66;
    uint64_t v68 = *(void *)(v66 - 8);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v68 + 48))(v65, 1, v66))
    {
      _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
      memcpy(v64, v65, *(void *)(*(void *)(v69 - 8) + 64));
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v68 + 16))(v64, v65, v67);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v68 + 56))(v64, 0, 1, v67);
    }
    *(unsigned char *)(a1 + v30[11]) = *(unsigned char *)(a2 + v30[11]);
    uint64_t v70 = v30[12];
    uint64_t v71 = a1 + v70;
    uint64_t v72 = a2 + v70;
    *(void *)uint64_t v71 = *(void *)v72;
    *(unsigned char *)(v71 + 8) = *(unsigned char *)(v72 + 8);
    uint64_t v73 = v87[5];
    uint64_t v74 = v87[6];
    uint64_t v75 = (void *)(a1 + v73);
    uint64_t v76 = (void *)(a2 + v73);
    uint64_t v77 = v76[1];
    *uint64_t v75 = *v76;
    v75[1] = v77;
    uint64_t v78 = (void *)(a1 + v74);
    uint64_t v79 = (void *)(a2 + v74);
    uint64_t v80 = v79[1];
    *uint64_t v78 = *v79;
    v78[1] = v80;
    uint64_t v81 = v87[7];
    uint64_t v82 = (void *)(a1 + v81);
    char v83 = (void *)(a2 + v81);
    uint64_t v84 = v83[1];
    *uint64_t v82 = *v83;
    v82[1] = v84;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

uint64_t destroy for FileExportOperation.Resolved(uint64_t a1)
{
  type metadata accessor for FileExportOperation.Mode(0);
  switch(swift_getEnumCaseMultiPayload())
  {
    case 0u:
      uint64_t v2 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
      type metadata accessor for FileExportOperation.Move(0);
      swift_release();
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 2u:
      outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      goto LABEL_6;
    case 3u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
LABEL_6:
      swift_release();
      break;
    default:
      break;
  }
  int v3 = (int *)type metadata accessor for FileExportOperation(0);
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + v3[6];
  uint64_t v5 = type metadata accessor for URL();
  uint64_t v6 = *(void *)(v5 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v7 = a1 + v3[7];
  if (*(void *)(v7 + 24))
  {
    outlined consume of Text.Storage(*(void *)v7, *(void *)(v7 + 8), *(unsigned char *)(v7 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v8 = a1 + v3[8];
  if (*(void *)(v8 + 24))
  {
    outlined consume of Text.Storage(*(void *)v8, *(void *)(v8 + 8), *(unsigned char *)(v8 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v9 = a1 + v3[9];
  if (*(void *)(v9 + 24))
  {
    outlined consume of Text.Storage(*(void *)v9, *(void *)(v9 + 8), *(unsigned char *)(v9 + 16));
    swift_bridgeObjectRelease();
  }
  uint64_t v10 = a1 + v3[10];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v12 = v11;
  uint64_t v13 = *(void *)(v11 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v10, 1, v11)) {
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v10, v12);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FileExportOperation.Resolved(uint64_t a1, uint64_t *a2, int *a3)
{
  type metadata accessor for FileExportOperation.Mode(0);
  uint64_t v85 = a3;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      uint64_t v26 = a2[4];
      long long v27 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v27;
      *(void *)(a1 + 32) = v26;
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    case 2u:
      uint64_t v17 = *a2;
      uint64_t v18 = a2[1];
      uint64_t v19 = a2[2];
      uint64_t v20 = a2[3];
      char v21 = *((unsigned char *)a2 + 32);
      outlined copy of FileExportOperation.Storage(*a2, v18, v19, v20, v21);
      *(void *)a1 = v17;
      *(void *)(a1 + 8) = v18;
      *(void *)(a1 + 16) = v19;
      *(void *)(a1 + 24) = v20;
      *(unsigned char *)(a1 + 32) = v21;
      uint64_t v22 = a2[6];
      *(void *)(a1 + 40) = a2[5];
      *(void *)(a1 + 48) = v22;
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 7);
      uint64_t v23 = a2[11];
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 9);
      *(void *)(a1 + 88) = v23;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    case 3u:
      char v24 = *((unsigned char *)a2 + 8);
      *(void *)a1 = *a2;
      *(unsigned char *)(a1 + 8) = v24;
      uint64_t v25 = a2[6];
      long long v84 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
      *(_OWORD *)(a1 + 32) = v84;
      *(void *)(a1 + 48) = v25;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
      break;
    default:
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)(v6 - 8) + 16))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
      uint64_t v8 = *(int *)(v7 + 20);
      uint64_t v9 = (void *)(a1 + v8);
      uint64_t v10 = (uint64_t *)((char *)a2 + v8);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      *uint64_t v9 = v12;
      v9[1] = v11;
      uint64_t v13 = *(int *)(v7 + 24);
      uint64_t v14 = (void *)(a1 + v13);
      uint64_t v15 = (uint64_t *)((char *)a2 + v13);
      uint64_t v16 = v15[1];
      *uint64_t v14 = *v15;
      v14[1] = v16;
      swift_retain();
      swift_retain();
      break;
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = (int *)type metadata accessor for FileExportOperation(0);
  uint64_t v29 = v28[5];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  uint64_t v32 = v31[1];
  *uint64_t v30 = *v31;
  v30[1] = v32;
  uint64_t v33 = v28[6];
  uint64_t v34 = (void *)(a1 + v33);
  uint64_t v35 = (char *)a2 + v33;
  uint64_t v36 = type metadata accessor for URL();
  uint64_t v37 = *(void *)(v36 - 8);
  uint64_t v38 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v37 + 48);
  swift_bridgeObjectRetain();
  if (v38(v35, 1, v36))
  {
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v34, v35, *(void *)(*(void *)(v39 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v37 + 16))(v34, v35, v36);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  uint64_t v40 = v28[7];
  uint64_t v41 = a1 + v40;
  uint64_t v42 = (uint64_t)a2 + v40;
  if (*(uint64_t *)((char *)a2 + v40 + 24))
  {
    uint64_t v43 = *(void *)v42;
    uint64_t v44 = *(void *)(v42 + 8);
    char v45 = *(unsigned char *)(v42 + 16);
    outlined copy of Text.Storage(*(void *)v42, v44, v45);
    *(void *)uint64_t v41 = v43;
    *(void *)(v41 + 8) = v44;
    *(unsigned char *)(v41 + 16) = v45;
    *(void *)(v41 + 24) = *(void *)(v42 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v46 = *(_OWORD *)(v42 + 16);
    *(_OWORD *)uint64_t v41 = *(_OWORD *)v42;
    *(_OWORD *)(v41 + 16) = v46;
  }
  uint64_t v47 = v28[8];
  uint64_t v48 = a1 + v47;
  uint64_t v49 = (uint64_t)a2 + v47;
  if (*(uint64_t *)((char *)a2 + v47 + 24))
  {
    uint64_t v50 = *(void *)v49;
    uint64_t v51 = *(void *)(v49 + 8);
    char v52 = *(unsigned char *)(v49 + 16);
    outlined copy of Text.Storage(*(void *)v49, v51, v52);
    *(void *)uint64_t v48 = v50;
    *(void *)(v48 + 8) = v51;
    *(unsigned char *)(v48 + 16) = v52;
    *(void *)(v48 + 24) = *(void *)(v49 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v53 = *(_OWORD *)(v49 + 16);
    *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
    *(_OWORD *)(v48 + 16) = v53;
  }
  uint64_t v54 = v28[9];
  uint64_t v55 = a1 + v54;
  uint64_t v56 = (uint64_t)a2 + v54;
  if (*(uint64_t *)((char *)a2 + v54 + 24))
  {
    uint64_t v57 = *(void *)v56;
    uint64_t v58 = *(void *)(v56 + 8);
    char v59 = *(unsigned char *)(v56 + 16);
    outlined copy of Text.Storage(*(void *)v56, v58, v59);
    *(void *)uint64_t v55 = v57;
    *(void *)(v55 + 8) = v58;
    *(unsigned char *)(v55 + 16) = v59;
    *(void *)(v55 + 24) = *(void *)(v56 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v60 = *(_OWORD *)(v56 + 16);
    *(_OWORD *)uint64_t v55 = *(_OWORD *)v56;
    *(_OWORD *)(v55 + 16) = v60;
  }
  uint64_t v61 = v28[10];
  long long v62 = (void *)(a1 + v61);
  uint64_t v63 = (char *)a2 + v61;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v65 = v64;
  uint64_t v66 = *(void *)(v64 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v66 + 48))(v63, 1, v64))
  {
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v62, v63, *(void *)(*(void *)(v67 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, char *, uint64_t))(v66 + 16))(v62, v63, v65);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v62, 0, 1, v65);
  }
  *(unsigned char *)(a1 + v28[11]) = *((unsigned char *)a2 + v28[11]);
  uint64_t v68 = v28[12];
  uint64_t v69 = a1 + v68;
  uint64_t v70 = (uint64_t)a2 + v68;
  *(void *)uint64_t v69 = *(void *)v70;
  *(unsigned char *)(v69 + 8) = *(unsigned char *)(v70 + 8);
  uint64_t v71 = v85[5];
  uint64_t v72 = v85[6];
  uint64_t v73 = (void *)(a1 + v71);
  uint64_t v74 = (uint64_t *)((char *)a2 + v71);
  uint64_t v75 = v74[1];
  *uint64_t v73 = *v74;
  v73[1] = v75;
  uint64_t v76 = (void *)(a1 + v72);
  uint64_t v77 = (uint64_t *)((char *)a2 + v72);
  uint64_t v78 = v77[1];
  *uint64_t v76 = *v77;
  v76[1] = v78;
  uint64_t v79 = v85[7];
  uint64_t v80 = (void *)(a1 + v79);
  uint64_t v81 = (uint64_t *)((char *)a2 + v79);
  uint64_t v82 = v81[1];
  *uint64_t v80 = *v81;
  v80[1] = v82;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t *assignWithCopy for FileExportOperation.Resolved(uint64_t *a1, uint64_t *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    type metadata accessor for FileExportOperation.Mode(0);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        *a1 = *a2;
        uint64_t v16 = a2[2];
        a1[1] = a2[1];
        a1[2] = v16;
        uint64_t v17 = a2[4];
        a1[3] = a2[3];
        a1[4] = v17;
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 2u:
        uint64_t v18 = *a2;
        uint64_t v19 = a2[1];
        uint64_t v20 = a2[2];
        uint64_t v21 = a2[3];
        char v22 = *((unsigned char *)a2 + 32);
        outlined copy of FileExportOperation.Storage(*a2, v19, v20, v21, v22);
        *a1 = v18;
        a1[1] = v19;
        a1[2] = v20;
        a1[3] = v21;
        *((unsigned char *)a1 + 32) = v22;
        a1[5] = a2[5];
        a1[6] = a2[6];
        a1[7] = a2[7];
        uint64_t v23 = a2[9];
        a1[8] = a2[8];
        a1[9] = v23;
        uint64_t v24 = a2[11];
        a1[10] = a2[10];
        a1[11] = v24;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      case 3u:
        char v25 = *((unsigned char *)a2 + 8);
        *a1 = *a2;
        *((unsigned char *)a1 + 8) = v25;
        a1[2] = a2[2];
        uint64_t v26 = a2[4];
        a1[3] = a2[3];
        a1[4] = v26;
        uint64_t v27 = a2[6];
        a1[5] = a2[5];
        a1[6] = v27;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
        break;
      default:
        uint64_t v5 = type metadata accessor for URL();
        (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v5 - 8) + 16))(a1, a2, v5);
        uint64_t v6 = type metadata accessor for FileExportOperation.Move(0);
        uint64_t v7 = *(int *)(v6 + 20);
        uint64_t v8 = (uint64_t *)((char *)a1 + v7);
        uint64_t v9 = (uint64_t *)((char *)a2 + v7);
        uint64_t v11 = *v9;
        uint64_t v10 = v9[1];
        *uint64_t v8 = v11;
        v8[1] = v10;
        uint64_t v12 = *(int *)(v6 + 24);
        uint64_t v13 = (uint64_t *)((char *)a1 + v12);
        uint64_t v14 = (uint64_t *)((char *)a2 + v12);
        uint64_t v15 = v14[1];
        *uint64_t v13 = *v14;
        v13[1] = v15;
        swift_retain();
        swift_retain();
        break;
    }
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v28 = (int *)type metadata accessor for FileExportOperation(0);
  uint64_t v29 = v28[5];
  uint64_t v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  *uint64_t v30 = *v31;
  v30[1] = v31[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v32 = v28[6];
  uint64_t v33 = (char *)a1 + v32;
  uint64_t v34 = (char *)a2 + v32;
  uint64_t v35 = type metadata accessor for URL();
  uint64_t v36 = *(void *)(v35 - 8);
  uint64_t v37 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48);
  int v38 = v37(v33, 1, v35);
  int v39 = v37(v34, 1, v35);
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(char *, char *, uint64_t))(v36 + 16))(v33, v34, v35);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v36 + 56))(v33, 0, 1, v35);
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (v39)
  {
    (*(void (**)(char *, uint64_t))(v36 + 8))(v33, v35);
LABEL_13:
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v33, v34, *(void *)(*(void *)(v40 - 8) + 64));
    goto LABEL_14;
  }
  (*(void (**)(char *, char *, uint64_t))(v36 + 24))(v33, v34, v35);
LABEL_14:
  uint64_t v41 = v28[7];
  uint64_t v42 = (uint64_t)a1 + v41;
  uint64_t v43 = (char *)a2 + v41;
  uint64_t v44 = *(uint64_t *)((char *)a1 + v41 + 24);
  uint64_t v45 = *(uint64_t *)((char *)a2 + v41 + 24);
  if (v44)
  {
    if (v45)
    {
      uint64_t v46 = *(void *)v43;
      uint64_t v47 = *((void *)v43 + 1);
      char v48 = v43[16];
      outlined copy of Text.Storage(*(void *)v43, v47, v48);
      uint64_t v49 = *(void *)v42;
      uint64_t v50 = *(void *)(v42 + 8);
      char v51 = *(unsigned char *)(v42 + 16);
      *(void *)uint64_t v42 = v46;
      *(void *)(v42 + 8) = v47;
      *(unsigned char *)(v42 + 16) = v48;
      outlined consume of Text.Storage(v49, v50, v51);
      *(void *)(v42 + 24) = *((void *)v43 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v42);
      long long v55 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *(_OWORD *)(v42 + 16) = v55;
    }
  }
  else if (v45)
  {
    uint64_t v52 = *(void *)v43;
    uint64_t v53 = *((void *)v43 + 1);
    char v54 = v43[16];
    outlined copy of Text.Storage(*(void *)v43, v53, v54);
    *(void *)uint64_t v42 = v52;
    *(void *)(v42 + 8) = v53;
    *(unsigned char *)(v42 + 16) = v54;
    *(void *)(v42 + 24) = *((void *)v43 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v56 = *((_OWORD *)v43 + 1);
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    *(_OWORD *)(v42 + 16) = v56;
  }
  uint64_t v57 = v28[8];
  uint64_t v58 = (uint64_t)a1 + v57;
  char v59 = (char *)a2 + v57;
  uint64_t v60 = *(uint64_t *)((char *)a1 + v57 + 24);
  uint64_t v61 = *(uint64_t *)((char *)a2 + v57 + 24);
  if (v60)
  {
    if (v61)
    {
      uint64_t v62 = *(void *)v59;
      uint64_t v63 = *((void *)v59 + 1);
      char v64 = v59[16];
      outlined copy of Text.Storage(*(void *)v59, v63, v64);
      uint64_t v65 = *(void *)v58;
      uint64_t v66 = *(void *)(v58 + 8);
      char v67 = *(unsigned char *)(v58 + 16);
      *(void *)uint64_t v58 = v62;
      *(void *)(v58 + 8) = v63;
      *(unsigned char *)(v58 + 16) = v64;
      outlined consume of Text.Storage(v65, v66, v67);
      *(void *)(v58 + 24) = *((void *)v59 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v58);
      long long v71 = *((_OWORD *)v59 + 1);
      *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
      *(_OWORD *)(v58 + 16) = v71;
    }
  }
  else if (v61)
  {
    uint64_t v68 = *(void *)v59;
    uint64_t v69 = *((void *)v59 + 1);
    char v70 = v59[16];
    outlined copy of Text.Storage(*(void *)v59, v69, v70);
    *(void *)uint64_t v58 = v68;
    *(void *)(v58 + 8) = v69;
    *(unsigned char *)(v58 + 16) = v70;
    *(void *)(v58 + 24) = *((void *)v59 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v72 = *((_OWORD *)v59 + 1);
    *(_OWORD *)uint64_t v58 = *(_OWORD *)v59;
    *(_OWORD *)(v58 + 16) = v72;
  }
  uint64_t v73 = v28[9];
  uint64_t v74 = (uint64_t)a1 + v73;
  uint64_t v75 = (char *)a2 + v73;
  uint64_t v76 = *(uint64_t *)((char *)a1 + v73 + 24);
  uint64_t v77 = *(uint64_t *)((char *)a2 + v73 + 24);
  if (v76)
  {
    if (v77)
    {
      uint64_t v78 = *(void *)v75;
      uint64_t v79 = *((void *)v75 + 1);
      char v80 = v75[16];
      outlined copy of Text.Storage(*(void *)v75, v79, v80);
      uint64_t v81 = *(void *)v74;
      uint64_t v82 = *(void *)(v74 + 8);
      char v83 = *(unsigned char *)(v74 + 16);
      *(void *)uint64_t v74 = v78;
      *(void *)(v74 + 8) = v79;
      *(unsigned char *)(v74 + 16) = v80;
      outlined consume of Text.Storage(v81, v82, v83);
      *(void *)(v74 + 24) = *((void *)v75 + 3);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of Text(v74);
      long long v87 = *((_OWORD *)v75 + 1);
      *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
      *(_OWORD *)(v74 + 16) = v87;
    }
  }
  else if (v77)
  {
    uint64_t v84 = *(void *)v75;
    uint64_t v85 = *((void *)v75 + 1);
    char v86 = v75[16];
    outlined copy of Text.Storage(*(void *)v75, v85, v86);
    *(void *)uint64_t v74 = v84;
    *(void *)(v74 + 8) = v85;
    *(unsigned char *)(v74 + 16) = v86;
    *(void *)(v74 + 24) = *((void *)v75 + 3);
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v88 = *((_OWORD *)v75 + 1);
    *(_OWORD *)uint64_t v74 = *(_OWORD *)v75;
    *(_OWORD *)(v74 + 16) = v88;
  }
  uint64_t v89 = v28[10];
  uint64_t v90 = (char *)a1 + v89;
  uint64_t v91 = (char *)a2 + v89;
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v93 = v92;
  uint64_t v94 = *(void *)(v92 - 8);
  uint64_t v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v94 + 48);
  int v96 = v95(v90, 1, v92);
  int v97 = v95(v91, 1, v93);
  if (!v96)
  {
    if (!v97)
    {
      (*(void (**)(char *, char *, uint64_t))(v94 + 24))(v90, v91, v93);
      goto LABEL_42;
    }
    (*(void (**)(char *, uint64_t))(v94 + 8))(v90, v93);
    goto LABEL_41;
  }
  if (v97)
  {
LABEL_41:
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v90, v91, *(void *)(*(void *)(v98 - 8) + 64));
    goto LABEL_42;
  }
  (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v90, v91, v93);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v90, 0, 1, v93);
LABEL_42:
  *((unsigned char *)a1 + v28[11]) = *((unsigned char *)a2 + v28[11]);
  uint64_t v99 = v28[12];
  uint64_t v100 = (char *)a1 + v99;
  char v101 = (char *)a2 + v99;
  uint64_t v102 = *(void *)v101;
  v100[8] = v101[8];
  *(void *)uint64_t v100 = v102;
  uint64_t v103 = a3[5];
  uint64_t v104 = (uint64_t *)((char *)a1 + v103);
  id v105 = (uint64_t *)((char *)a2 + v103);
  *uint64_t v104 = *v105;
  v104[1] = v105[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v106 = a3[6];
  unsigned __int8 v107 = (uint64_t *)((char *)a1 + v106);
  uint64_t v108 = (uint64_t *)((char *)a2 + v106);
  *unsigned __int8 v107 = *v108;
  v107[1] = v108[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v109 = a3[7];
  uint64_t v110 = (uint64_t *)((char *)a1 + v109);
  uint64_t v111 = (uint64_t *)((char *)a2 + v109);
  *uint64_t v110 = *v111;
  v110[1] = v111[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

char *initializeWithTake for FileExportOperation.Resolved(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for FileExportOperation.Mode(0);
  if (swift_getEnumCaseMultiPayload())
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32))(a1, a2, v7);
    uint64_t v8 = type metadata accessor for FileExportOperation.Move(0);
    *(_OWORD *)&a1[*(int *)(v8 + 20)] = *(_OWORD *)&a2[*(int *)(v8 + 20)];
    *(_OWORD *)&a1[*(int *)(v8 + 24)] = *(_OWORD *)&a2[*(int *)(v8 + 24)];
    swift_storeEnumTagMultiPayload();
  }
  uint64_t v9 = (int *)type metadata accessor for FileExportOperation(0);
  *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
  uint64_t v10 = v9[6];
  uint64_t v11 = &a1[v10];
  uint64_t v12 = &a2[v10];
  uint64_t v13 = type metadata accessor for URL();
  uint64_t v14 = *(void *)(v13 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13))
  {
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v11, v12, *(void *)(*(void *)(v15 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  uint64_t v16 = v9[7];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  long long v19 = *((_OWORD *)v18 + 1);
  *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  *((_OWORD *)v17 + 1) = v19;
  uint64_t v20 = v9[8];
  uint64_t v21 = &a1[v20];
  char v22 = &a2[v20];
  long long v23 = *((_OWORD *)v22 + 1);
  *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
  *((_OWORD *)v21 + 1) = v23;
  uint64_t v24 = v9[9];
  char v25 = &a1[v24];
  uint64_t v26 = &a2[v24];
  long long v27 = *((_OWORD *)v26 + 1);
  *(_OWORD *)char v25 = *(_OWORD *)v26;
  *((_OWORD *)v25 + 1) = v27;
  uint64_t v28 = v9[10];
  uint64_t v29 = &a1[v28];
  uint64_t v30 = &a2[v28];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v32 = v31;
  uint64_t v33 = *(void *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v30, 1, v31))
  {
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v29, v30, *(void *)(*(void *)(v34 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v29, v30, v32);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56))(v29, 0, 1, v32);
  }
  a1[v9[11]] = a2[v9[11]];
  uint64_t v35 = v9[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  *(void *)uint64_t v36 = *(void *)v37;
  v36[8] = v37[8];
  uint64_t v38 = a3[6];
  *(_OWORD *)&a1[a3[5]] = *(_OWORD *)&a2[a3[5]];
  *(_OWORD *)&a1[v38] = *(_OWORD *)&a2[v38];
  *(_OWORD *)&a1[a3[7]] = *(_OWORD *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for FileExportOperation.Resolved(char *a1, char *a2, int *a3)
{
  if (a1 != a2)
  {
    outlined destroy of FileExportOperation.Mode((uint64_t)a1, type metadata accessor for FileExportOperation.Mode);
    uint64_t v5 = type metadata accessor for FileExportOperation.Mode(0);
    if (swift_getEnumCaseMultiPayload())
    {
      memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
    }
    else
    {
      uint64_t v6 = type metadata accessor for URL();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32))(a1, a2, v6);
      uint64_t v7 = type metadata accessor for FileExportOperation.Move(0);
      *(_OWORD *)&a1[*(int *)(v7 + 20)] = *(_OWORD *)&a2[*(int *)(v7 + 20)];
      *(_OWORD *)&a1[*(int *)(v7 + 24)] = *(_OWORD *)&a2[*(int *)(v7 + 24)];
      swift_storeEnumTagMultiPayload();
    }
  }
  uint64_t v8 = (int *)type metadata accessor for FileExportOperation(0);
  uint64_t v9 = v8[5];
  uint64_t v10 = &a1[v9];
  uint64_t v11 = &a2[v9];
  uint64_t v13 = *(void *)v11;
  uint64_t v12 = *((void *)v11 + 1);
  *(void *)uint64_t v10 = v13;
  *((void *)v10 + 1) = v12;
  swift_bridgeObjectRelease();
  uint64_t v14 = v8[6];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for URL();
  uint64_t v18 = *(void *)(v17 - 8);
  long long v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  int v20 = v19(v15, 1, v17);
  int v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v15, v16, v17);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_10:
    _s10Foundation3URLVSgMaTm_3(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_11;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 40))(v15, v16, v17);
LABEL_11:
  uint64_t v23 = v8[7];
  uint64_t v24 = (uint64_t)&a1[v23];
  char v25 = &a2[v23];
  if (*(void *)&a1[v23 + 24])
  {
    if (*((void *)v25 + 3))
    {
      char v26 = v25[16];
      uint64_t v27 = *(void *)v24;
      uint64_t v28 = *(void *)(v24 + 8);
      char v29 = *(unsigned char *)(v24 + 16);
      *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
      *(unsigned char *)(v24 + 16) = v26;
      outlined consume of Text.Storage(v27, v28, v29);
      *(void *)(v24 + 24) = *((void *)v25 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of Text(v24);
  }
  long long v30 = *((_OWORD *)v25 + 1);
  *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  *(_OWORD *)(v24 + 16) = v30;
LABEL_16:
  uint64_t v31 = v8[8];
  uint64_t v32 = (uint64_t)&a1[v31];
  uint64_t v33 = &a2[v31];
  if (*(void *)&a1[v31 + 24])
  {
    if (*((void *)v33 + 3))
    {
      char v34 = v33[16];
      uint64_t v35 = *(void *)v32;
      uint64_t v36 = *(void *)(v32 + 8);
      char v37 = *(unsigned char *)(v32 + 16);
      *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
      *(unsigned char *)(v32 + 16) = v34;
      outlined consume of Text.Storage(v35, v36, v37);
      *(void *)(v32 + 24) = *((void *)v33 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of Text(v32);
  }
  long long v38 = *((_OWORD *)v33 + 1);
  *(_OWORD *)uint64_t v32 = *(_OWORD *)v33;
  *(_OWORD *)(v32 + 16) = v38;
LABEL_21:
  uint64_t v39 = v8[9];
  uint64_t v40 = (uint64_t)&a1[v39];
  uint64_t v41 = &a2[v39];
  if (*(void *)&a1[v39 + 24])
  {
    if (*((void *)v41 + 3))
    {
      char v42 = v41[16];
      uint64_t v43 = *(void *)v40;
      uint64_t v44 = *(void *)(v40 + 8);
      char v45 = *(unsigned char *)(v40 + 16);
      *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
      *(unsigned char *)(v40 + 16) = v42;
      outlined consume of Text.Storage(v43, v44, v45);
      *(void *)(v40 + 24) = *((void *)v41 + 3);
      swift_bridgeObjectRelease();
      goto LABEL_26;
    }
    outlined destroy of Text(v40);
  }
  long long v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_26:
  uint64_t v47 = v8[10];
  char v48 = &a1[v47];
  uint64_t v49 = &a2[v47];
  type metadata accessor for Predicate<Pack{URL}>();
  uint64_t v51 = v50;
  uint64_t v52 = *(void *)(v50 - 8);
  uint64_t v53 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v52 + 48);
  int v54 = v53(v48, 1, v50);
  int v55 = v53(v49, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      (*(void (**)(char *, char *, uint64_t))(v52 + 40))(v48, v49, v51);
      goto LABEL_32;
    }
    (*(void (**)(char *, uint64_t))(v52 + 8))(v48, v51);
    goto LABEL_31;
  }
  if (v55)
  {
LABEL_31:
    _s10Foundation3URLVSgMaTm_3(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
    memcpy(v48, v49, *(void *)(*(void *)(v56 - 8) + 64));
    goto LABEL_32;
  }
  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v48, v49, v51);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v52 + 56))(v48, 0, 1, v51);
LABEL_32:
  a1[v8[11]] = a2[v8[11]];
  uint64_t v57 = v8[12];
  uint64_t v58 = &a1[v57];
  char v59 = &a2[v57];
  *(void *)uint64_t v58 = *(void *)v59;
  v58[8] = v59[8];
  uint64_t v60 = a3[5];
  uint64_t v61 = &a1[v60];
  uint64_t v62 = &a2[v60];
  uint64_t v64 = *(void *)v62;
  uint64_t v63 = *((void *)v62 + 1);
  *(void *)uint64_t v61 = v64;
  *((void *)v61 + 1) = v63;
  swift_bridgeObjectRelease();
  uint64_t v65 = a3[6];
  uint64_t v66 = &a1[v65];
  char v67 = &a2[v65];
  uint64_t v69 = *(void *)v67;
  uint64_t v68 = *((void *)v67 + 1);
  *(void *)uint64_t v66 = v69;
  *((void *)v66 + 1) = v68;
  swift_bridgeObjectRelease();
  uint64_t v70 = a3[7];
  long long v71 = &a1[v70];
  long long v72 = &a2[v70];
  uint64_t v74 = *(void *)v72;
  uint64_t v73 = *((void *)v72 + 1);
  *(void *)long long v71 = v74;
  *((void *)v71 + 1) = v73;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for FileExportOperation.Resolved(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187D9AA08);
}

uint64_t sub_187D9AA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FileExportOperation(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for FileExportOperation.Resolved(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187D9AAEC);
}

uint64_t sub_187D9AAEC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for FileExportOperation(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20) + 8) = a2;
  }
  return result;
}

uint64_t type metadata completion function for FileExportOperation.Resolved()
{
  uint64_t result = type metadata accessor for FileExportOperation(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for FileExportOperation.BatchExport()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.BatchExport(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 48);
  long long v6 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v6;
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.BatchExport(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_retain();
  swift_release();
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.BatchExport(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = v5;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.BatchExport()
{
  return &type metadata for FileExportOperation.BatchExport;
}

uint64_t destroy for FileExportOperation.Export(uint64_t a1)
{
  outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.Export(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(void *)a2, v5, v6, v7, v8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v9;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = v10;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.Export(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  char v8 = *(unsigned char *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(void *)a2, v5, v6, v7, v8);
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(void *)(a1 + 8);
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  char v13 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(unsigned char *)(a1 + 32) = v8;
  outlined consume of FileExportOperation.Storage(v9, v10, v11, v12, v13);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v14 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v14;
  swift_retain();
  swift_release();
  uint64_t v15 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v15;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.Export(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  char v9 = *(unsigned char *)(a1 + 32);
  long long v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  *(unsigned char *)(a1 + 32) = v4;
  outlined consume of FileExportOperation.Storage(v5, v6, v7, v8, v9);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  swift_release();
  uint64_t v11 = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = v11;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.Export()
{
  return &type metadata for FileExportOperation.Export;
}

uint64_t destroy for FileExportOperation.BatchMove()
{
  swift_bridgeObjectRelease();
  swift_release();

  return swift_release();
}

uint64_t initializeWithCopy for FileExportOperation.BatchMove(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v3;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for FileExportOperation.BatchMove(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = a2[2];
  a1[1] = a2[1];
  a1[2] = v4;
  swift_retain();
  swift_release();
  uint64_t v5 = a2[4];
  a1[3] = a2[3];
  a1[4] = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.BatchMove(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.BatchMove()
{
  return &type metadata for FileExportOperation.BatchMove;
}

uint64_t initializeBufferWithCopyOfBuffer for FileExportOperation.BatchStorage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.BatchStorage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FileExportOperation.BatchStorage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.BatchStorage()
{
  return &type metadata for FileExportOperation.BatchStorage;
}

uint64_t destroy for FileExportOperation.Storage(uint64_t a1)
{
  return outlined consume of FileExportOperation.Storage(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for FileExportOperation.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for FileExportOperation.Storage(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  outlined copy of FileExportOperation.Storage(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  char v12 = *(unsigned char *)(a1 + 32);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  outlined consume of FileExportOperation.Storage(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for FileExportOperation.Storage(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  char v8 = *(unsigned char *)(a1 + 32);
  long long v9 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v9;
  *(unsigned char *)(a1 + 32) = v3;
  outlined consume of FileExportOperation.Storage(v4, v6, v5, v7, v8);
  return a1;
}

ValueMetadata *type metadata accessor for FileExportOperation.Storage()
{
  return &type metadata for FileExportOperation.Storage;
}

uint64_t DisclosureGroupConfiguration.init(isExpanded:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  (*(void (**)(uint64_t, uint64_t))(a7 + 16))(a6, a7);
  uint64_t v14 = type metadata accessor for DisclosureGroupConfiguration();
  uint64_t v15 = a8 + *(int *)(v14 + 52);
  *(void *)uint64_t v15 = a1;
  *(void *)(v15 + 8) = a2;
  *(unsigned char *)(v15 + 16) = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))(a8 + *(int *)(v14 + 56), a4, a5);
}

uint64_t DisclosureGroup<>.init(configuration:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v32 = a5;
  uint64_t v33 = a6;
  uint64_t v34 = a2;
  uint64_t v35 = a3;
  uint64_t v36 = a4;
  uint64_t v37 = a5;
  uint64_t v10 = type metadata accessor for DisclosureGroupConfiguration();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  char v13 = (char *)&v28 - v12;
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(int *)(v18 + 56);
  uint64_t v20 = a1 + *(int *)(v18 + 52);
  uint64_t v21 = *(void *)(v20 + 8);
  uint64_t v28 = *(void *)v20;
  uint64_t v29 = v21;
  int v31 = *(unsigned __int8 *)(v20 + 16);
  uint64_t v30 = a1;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v17, a1 + v19, a2, v15);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
  unint64_t v23 = (*(unsigned __int8 *)(v11 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v24 = (char *)swift_allocObject();
  *((void *)v24 + 2) = a2;
  *((void *)v24 + 3) = a3;
  *((void *)v24 + 4) = a4;
  *((void *)v24 + 5) = v32;
  (*(void (**)(char *, char *, uint64_t))(v11 + 32))(&v24[v23], v13, v10);
  uint64_t v25 = v28;
  swift_retain();
  uint64_t v26 = v29;
  swift_retain();
  DisclosureGroup.init(isExpanded:label:content:)(v25, v26, v31, (uint64_t)v17, (void (*)(uint64_t))partial apply for closure #1 in DisclosureGroup<>.init(configuration:), a2, a3, v33);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v30, v10);
}

uint64_t DisclosureGroup.$isExpanded.getter(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  uint64_t v3 = *v2;
  if (*((unsigned char *)v2 + 17))
  {
    swift_retain();
    swift_retain();
  }
  else
  {
    type metadata accessor for State<Bool>();
    State.projectedValue.getter();
    return v5;
  }
  return v3;
}

uint64_t DisclosureGroup.init(isExpanded:label:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v29 = a5;
  uint64_t v30 = a2;
  HIDWORD(v27) = a3;
  uint64_t v28 = a1;
  uint64_t v12 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = v15;
  uint64_t v32 = v16;
  uint64_t v33 = v18;
  uint64_t v34 = v17;
  uint64_t v19 = type metadata accessor for DisclosureGroup();
  uint64_t v20 = a8 + *(int *)(v19 + 56);
  *(void *)uint64_t v20 = 0;
  *(void *)(v20 + 8) = 0;
  *(_WORD *)(v20 + 16) = 0;
  uint64_t v21 = *(void *)(a6 - 8);
  uint64_t v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v21 + 16))(a8, a4, a6);
  v29(v22);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(a4, a6);
  uint64_t v23 = *(int *)(v19 + 52);
  uint64_t v24 = v30;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v12 + 32))(a8 + v23, v14, a7);
  if (v24)
  {
    char v26 = BYTE4(v27) & 1;
    uint64_t result = outlined consume of StateOrBinding<Bool>(*(void *)v20, *(void *)(v20 + 8), *(unsigned __int8 *)(v20 + 16), *(unsigned char *)(v20 + 17));
    *(void *)uint64_t v20 = v28;
    *(void *)(v20 + 8) = v24;
    *(unsigned char *)(v20 + 16) = v26;
    *(unsigned char *)(v20 + 17) = 1;
  }
  return result;
}

uint64_t DisclosureGroup.init(content:label:)@<X0>(void (*a1)(uint64_t)@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v13 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11(v8);
  return DisclosureGroup.init(isExpanded:label:content:)(0, 0, 0, (uint64_t)v10, a1, a2, a3, a4);
}

uint64_t DisclosureGroup.init(isExpanded:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v21 = a4;
  uint64_t v22 = a5;
  uint64_t v20 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v19 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_retain();
  uint64_t v17 = swift_retain();
  a6(v17);
  DisclosureGroup.init(isExpanded:label:content:)(a1, a2, a3 & 1, (uint64_t)v16, v21, a7, v20, a8);
  swift_release();
  return swift_release();
}

uint64_t DisclosureGroup.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v35 = a2;
  uint64_t v24 = a1[2];
  uint64_t v4 = v24;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>();
  uint64_t v5 = type metadata accessor for ModifiedContent();
  unint64_t v30 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Label and conformance DisclosureGroupStyleConfiguration.Label();
  uint64_t v29 = a1[4];
  uint64_t v58 = v29;
  char v59 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v34 = MEMORY[0x1E4F3FBC0];
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v57 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v31 = v5;
  uint64_t v27 = swift_getWitnessTable();
  uint64_t v52 = &type metadata for DisclosureGroupStyleConfiguration.Label;
  uint64_t v53 = v5;
  unint64_t v54 = v30;
  uint64_t v55 = v27;
  type metadata accessor for StaticSourceWriter();
  uint64_t v6 = type metadata accessor for ModifiedContent();
  uint64_t v33 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  char v26 = (char *)&v24 - v7;
  uint64_t v8 = a1[3];
  unint64_t v28 = lazy protocol witness table accessor for type DisclosureGroupStyleConfiguration.Content and conformance DisclosureGroupStyleConfiguration.Content();
  uint64_t v9 = a1[5];
  uint64_t v52 = &type metadata for DisclosureGroupStyleConfiguration.Content;
  uint64_t v53 = v8;
  unint64_t v54 = v28;
  uint64_t v55 = v9;
  type metadata accessor for StaticSourceWriter();
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v32 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v24 - v14;
  uint64_t v25 = v2;
  uint64_t v52 = (ValueMetadata *)DisclosureGroup.$isExpanded.getter((uint64_t)a1);
  uint64_t v53 = v16;
  LOBYTE(v54) = v17 & 1;
  uint64_t v43 = v4;
  uint64_t v44 = v8;
  uint64_t v18 = v29;
  uint64_t v45 = v29;
  uint64_t v46 = v9;
  uint64_t v47 = v2;
  unint64_t v19 = lazy protocol witness table accessor for type ResolvedDisclosureGroupStyle and conformance ResolvedDisclosureGroupStyle();
  uint64_t v20 = v26;
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, (void (*)(double))partial apply for closure #1 in DisclosureGroup.body.getter, (uint64_t)v42, (uint64_t)&type metadata for ResolvedDisclosureGroupStyle, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Label, v31, v19);
  swift_release();
  swift_release();
  uint64_t v37 = v24;
  uint64_t v38 = v8;
  uint64_t v39 = v18;
  uint64_t v40 = v9;
  uint64_t v41 = v25;
  unint64_t v50 = v19;
  uint64_t v51 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v21 = swift_getWitnessTable();
  View.viewAlias<A, B>(_:_:)((uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, (void (*)(double))partial apply for closure #2 in DisclosureGroup.body.getter, (uint64_t)v36, v6, (uint64_t)&type metadata for DisclosureGroupStyleConfiguration.Content, v8, v21);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v20, v6);
  uint64_t v48 = v21;
  uint64_t v49 = &protocol witness table for StaticSourceWriter<A, B>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v32 + 8);
  v22(v12, v10);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v22)(v15, v10);
}

void type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>()
{
  if (!lazy cache variable for type metadata for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>)
  {
    lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
    unint64_t v0 = type metadata accessor for ViewInputFlagModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>);
    }
  }
}

uint64_t closure #1 in DisclosureGroup.body.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  v19[1] = a5;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ViewInputFlagModifier<HideNavigationLinkDisclosureIndicator>();
  uint64_t v9 = type metadata accessor for ModifiedContent();
  uint64_t v10 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)v19 - v14;
  v19[6] = a1;
  v19[7] = a2;
  v19[8] = a3;
  v19[9] = a4;
  uint64_t v16 = type metadata accessor for DisclosureGroup();
  DisclosureGroup.groupLabel.getter(v16);
  v19[4] = a3;
  v19[5] = &protocol witness table for AccessibilityAttachmentModifier;
  v19[2] = swift_getWitnessTable();
  v19[3] = &protocol witness table for ViewInputFlagModifier<A>;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v12);
  char v17 = *(void (**)(char *, uint64_t))(v10 + 8);
  v17(v12, v9);
  static ViewBuilder.buildExpression<A>(_:)(v15);
  return ((uint64_t (*)(char *, uint64_t))v17)(v15, v9);
}

uint64_t partial apply for closure #1 in DisclosureGroup.body.getter()
{
  return partial apply for closure #1 in DisclosureGroup.body.getter((uint64_t (*)(void, void, void, void, void))closure #1 in DisclosureGroup.body.getter);
}

uint64_t DisclosureGroup.groupLabel.getter(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = type metadata accessor for ModifiedContent();
  uint64_t v4 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)v13 - v5;
  DisclosureGroup.$isExpanded.getter(a1);
  uint64_t v7 = *(void *)(a1 + 32);
  char v14 = AccessibilityDisclosureModifier.init(_:)() & 1;
  uint64_t v8 = type metadata accessor for AccessibilityDisclosureModifier();
  uint64_t WitnessTable = swift_getWitnessTable();
  v13[1] = v7;
  void v13[2] = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v10 = swift_getWitnessTable();
  View.accessibilityConfiguration<A>(_:)((uint64_t)&v14, v2, v8, v7, WitnessTable);
  unint64_t v11 = lazy protocol witness table accessor for type HideNavigationLinkDisclosureIndicator and conformance HideNavigationLinkDisclosureIndicator();
  View.input<A>(_:)((uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, v3, (uint64_t)&type metadata for HideNavigationLinkDisclosureIndicator, v10, v11);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

uint64_t closure #2 in DisclosureGroup.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  uint64_t v12 = type metadata accessor for DisclosureGroup();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v12 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t partial apply for closure #2 in DisclosureGroup.body.getter()
{
  return partial apply for closure #1 in DisclosureGroup.body.getter((uint64_t (*)(void, void, void, void, void))closure #2 in DisclosureGroup.body.getter);
}

uint64_t partial apply for closure #1 in DisclosureGroup.body.getter(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[6], v1[2], v1[3], v1[4], v1[5]);
}

uint64_t DisclosureGroup<>.init(_:content:)@<X0>(void (*a1)(uint64_t)@<X4>, uint64_t a2@<X6>, uint64_t a3@<X8>)
{
  v10[0] = Text.init(_:tableName:bundle:comment:)();
  v10[1] = v6;
  char v11 = v7 & 1;
  uint64_t v12 = v8;
  return DisclosureGroup.init(isExpanded:label:content:)(0, 0, 0, (uint64_t)v10, a1, MEMORY[0x1E4F41420], a2, a3);
}

uint64_t DisclosureGroup<>.init(_:isExpanded:content:)@<X0>(uint64_t a1@<X4>, uint64_t a2@<X5>, char a3@<W6>, void (*a4)(uint64_t)@<X7>, uint64_t a5@<X8>, uint64_t a6, uint64_t a7)
{
  swift_retain();
  swift_retain();
  v16[0] = Text.init(_:tableName:bundle:comment:)();
  v16[1] = v11;
  char v17 = v12 & 1;
  uint64_t v18 = v13;
  DisclosureGroup.init(isExpanded:label:content:)(a1, a2, a3 & 1, (uint64_t)v16, a4, MEMORY[0x1E4F41420], a7, a5);
  swift_release();
  return swift_release();
}

uint64_t DisclosureGroup<>.init<A>(_:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10 = *(void *)(a4 - 8);
  double v11 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v10 + 16))((char *)v18 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v13, v11);
  v18[0] = Text.init<A>(_:)();
  v18[1] = v14;
  char v19 = v15 & 1;
  uint64_t v20 = v16;
  DisclosureGroup.init(isExpanded:label:content:)(0, 0, 0, (uint64_t)v18, a2, MEMORY[0x1E4F41420], a3, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, a4);
}

uint64_t DisclosureGroup<>.init<A>(_:isExpanded:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char a4@<W3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v25 = a6;
  uint64_t v26 = a7;
  uint64_t v24 = a5;
  uint64_t v15 = *(void *)(a8 - 8);
  double v16 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0), a1, v18, v16);
  swift_retain();
  swift_retain();
  v27[0] = Text.init<A>(_:)();
  v27[1] = v19;
  char v28 = v20 & 1;
  uint64_t v29 = v21;
  DisclosureGroup.init(isExpanded:label:content:)(a2, a3, a4 & 1, (uint64_t)v27, v24, MEMORY[0x1E4F41420], v26, a9);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a8);
}

uint64_t associated type witness table accessor for View.Body : View in DisclosureGroup<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for DisclosureGroup()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisclosureGroup(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  uint64_t v10 = v6 + v9;
  uint64_t v11 = *(void *)(v8 + 64) + 7;
  unint64_t v12 = ((v11 + ((v6 + v9) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 18;
  unsigned int v13 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (v13 > 7 || ((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0 || v12 > 0x18)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + (((v13 | 7) + 16) & ~(unint64_t)(v13 | 7)));
  }
  else
  {
    uint64_t v17 = ~v9;
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v18 = ((unint64_t)a2 + v10) & v17;
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))(((unint64_t)v4 + v10) & v17, v18, v7);
    unint64_t v19 = (v11 + v18) & 0xFFFFFFFFFFFFFFF8;
    unsigned int v20 = *(unsigned __int8 *)(v19 + 17);
    if (v20 >= 2) {
      unsigned int v20 = *(_DWORD *)v19 + 2;
    }
    unint64_t v21 = (v11 + (((unint64_t)v4 + v10) & v17)) & 0xFFFFFFFFFFFFFFF8;
    if (v20 == 1)
    {
      *(void *)unint64_t v21 = *(void *)v19;
      *(void *)(v21 + 8) = *(void *)(v19 + 8);
      *(unsigned char *)(v21 + 16) = *(unsigned char *)(v19 + 16);
      *(unsigned char *)(v21 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v21 = *(unsigned char *)v19;
      *(void *)(v21 + 8) = *(void *)(v19 + 8);
      *(unsigned char *)(v21 + 17) = 0;
    }
  }
  swift_retain();
  return v4;
}

uint64_t destroy for DisclosureGroup(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v4)();
  uint64_t v5 = *(void *)(v4 + 56) + a1;
  uint64_t v6 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v7 = v6 + 8;
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  (*(void (**)(unint64_t))(v6 + 8))(v8);
  unint64_t v9 = (*(void *)(v7 + 56) + v8 + 7) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v10 = *(unsigned __int8 *)(v9 + 17);
  if (v10 >= 2) {
    unsigned int v10 = *(_DWORD *)v9 + 2;
  }
  if (v10 == 1) {
    swift_release();
  }

  return swift_release();
}

uint64_t initializeWithCopy for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 16;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 16))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 48) + 7;
  uint64_t v15 = v14 + v12;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v17 = *(unsigned __int8 *)(v16 + 17);
  if (v17 >= 2) {
    unsigned int v17 = *(_DWORD *)v16 + 2;
  }
  unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v17 == 1)
  {
    *(void *)unint64_t v18 = *(void *)v16;
    *(void *)(v18 + 8) = *(void *)(v16 + 8);
    *(unsigned char *)(v18 + 16) = *(unsigned char *)(v16 + 16);
    swift_retain();
    char v19 = 1;
  }
  else
  {
    char v19 = 0;
    *(unsigned char *)unint64_t v18 = *(unsigned char *)v16;
    *(void *)(v18 + 8) = *(void *)(v16 + 8);
  }
  swift_retain();
  *(unsigned char *)(v18 + 17) = v19;
  return a1;
}

uint64_t assignWithCopy for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 24;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 24))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 40) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  if (v15 != v16)
  {
    unsigned int v17 = *(unsigned __int8 *)(v15 + 17);
    if (v17 >= 2) {
      unsigned int v17 = *(_DWORD *)v15 + 2;
    }
    if (v17 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v18 = *(unsigned __int8 *)(v16 + 17);
    if (v18 >= 2) {
      unsigned int v18 = *(_DWORD *)v16 + 2;
    }
    if (v18 == 1)
    {
      *(void *)unint64_t v15 = *(void *)v16;
      *(void *)(v15 + 8) = *(void *)(v16 + 8);
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      *(unsigned char *)(v15 + 17) = 1;
      swift_retain();
    }
    else
    {
      *(unsigned char *)unint64_t v15 = *(unsigned char *)v16;
      *(void *)(v15 + 8) = *(void *)(v16 + 8);
      *(unsigned char *)(v15 + 17) = 0;
    }
    swift_retain();
  }
  return a1;
}

uint64_t initializeWithTake for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 32) + 7;
  uint64_t v15 = v14 + v12;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  unsigned int v17 = *(unsigned __int8 *)(v16 + 17);
  if (v17 >= 2) {
    unsigned int v17 = *(_DWORD *)v16 + 2;
  }
  unint64_t v18 = v15 & 0xFFFFFFFFFFFFFFF8;
  if (v17 == 1)
  {
    long long v19 = *(_OWORD *)v16;
    *(unsigned char *)(v18 + 16) = *(unsigned char *)(v16 + 16);
  }
  else
  {
    LOBYTE(v17) = 0;
    long long v19 = *(_OWORD *)v16;
  }
  *(_OWORD *)unint64_t v18 = v19;
  *(unsigned char *)(v18 + 17) = v17;
  return a1;
}

uint64_t assignWithTake for DisclosureGroup(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24);
  uint64_t v8 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v9 = v8 + 40;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (v11 + a1) & ~v10;
  uint64_t v13 = (v11 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 40))(v12, v13);
  uint64_t v14 = *(void *)(v9 + 24) + 7;
  unint64_t v15 = (v14 + v12) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = (v14 + v13) & 0xFFFFFFFFFFFFFFF8;
  if (v15 != v16)
  {
    unsigned int v17 = *(unsigned __int8 *)(v15 + 17);
    if (v17 >= 2) {
      unsigned int v17 = *(_DWORD *)v15 + 2;
    }
    if (v17 == 1) {
      swift_release();
    }
    swift_release();
    unsigned int v18 = *(unsigned __int8 *)(v16 + 17);
    if (v18 >= 2) {
      unsigned int v18 = *(_DWORD *)v16 + 2;
    }
    if (v18 == 1)
    {
      long long v19 = *(_OWORD *)v16;
      *(unsigned char *)(v15 + 16) = *(unsigned char *)(v16 + 16);
      *(_OWORD *)unint64_t v15 = v19;
      char v20 = 1;
    }
    else
    {
      char v20 = 0;
      *(_OWORD *)unint64_t v15 = *(_OWORD *)v16;
    }
    *(unsigned char *)(v15 + 17) = v20;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DisclosureGroup(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned int *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v8 <= v6) {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  if (v10 <= 0xFE) {
    unsigned int v10 = 254;
  }
  if (!a2) {
    return 0;
  }
  uint64_t v11 = *(void *)(*(void *)(v4 - 8) + 64) + v9;
  uint64_t v12 = *(void *)(v7 + 64) + 7;
  if (v10 < a2)
  {
    unint64_t v13 = ((v12 + (v11 & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 18;
    unsigned int v14 = (a2 - v10 + 0xFFFF) >> (8 * v13);
    if (v13 <= 3) {
      unsigned int v15 = v14 + 1;
    }
    else {
      unsigned int v15 = 2;
    }
    if (v15 >= 0x10000) {
      LODWORD(v16) = 4;
    }
    else {
      LODWORD(v16) = 2;
    }
    if (v15 < 0x100) {
      LODWORD(v16) = 1;
    }
    if (v15 >= 2) {
      uint64_t v16 = v16;
    }
    else {
      uint64_t v16 = 0;
    }
    switch(v16)
    {
      case 1:
        int v17 = *((unsigned __int8 *)a1 + v13);
        if (!*((unsigned char *)a1 + v13)) {
          break;
        }
        goto LABEL_24;
      case 2:
        int v17 = *(unsigned __int16 *)((char *)a1 + v13);
        if (*(unsigned __int16 *)((char *)a1 + v13)) {
          goto LABEL_24;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D9D610);
      case 4:
        int v17 = *(_DWORD *)((char *)a1 + v13);
        if (!v17) {
          break;
        }
LABEL_24:
        int v19 = (v17 - 1) << (8 * v13);
        if (v13 <= 3)
        {
          int v20 = *a1;
        }
        else
        {
          int v19 = 0;
          int v20 = *(_DWORD *)a1;
        }
        return v10 + (v20 | v19) + 1;
      default:
        break;
    }
  }
  if (v6 == v10) {
    return (*(uint64_t (**)(unsigned __int16 *, uint64_t, uint64_t))(v5 + 48))(a1, v6, v4);
  }
  unint64_t v21 = ((unint64_t)a1 + v11) & ~v9;
  if (v8 == v10) {
    return (*(uint64_t (**)(unint64_t))(v7 + 48))(v21);
  }
  unsigned int v22 = *(unsigned __int8 *)(((v12 + v21) & 0xFFFFFFFFFFFFFFF8) + 17);
  if (v22 >= 2) {
    return (v22 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

void storeEnumTagSinglePayload for DisclosureGroup(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  uint64_t v10 = *(void *)(v6 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v12 = *(void *)(v8 + 64);
  if (v9 <= v7) {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v8 + 84);
  }
  if (v13 <= 0xFE) {
    unsigned int v13 = 254;
  }
  uint64_t v14 = v10 + v11;
  uint64_t v15 = (v10 + v11) & ~v11;
  uint64_t v16 = v12 + 7;
  size_t v17 = ((v12 + 7 + v15) & 0xFFFFFFFFFFFFFFF8) + 18;
  char v18 = 8 * v17;
  if (v13 >= a3)
  {
    int v22 = 0;
    if (v13 >= a2)
    {
LABEL_19:
      switch(v22)
      {
        case 1:
          a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v17] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_49;
        case 4:
          *(_DWORD *)&a1[v17] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if (v7 == v13)
            {
              uint64_t v26 = *(void (**)(void))(v6 + 56);
              v26();
            }
            else
            {
              unint64_t v27 = (unint64_t)&a1[v14] & ~v11;
              if (v9 == v13)
              {
                char v28 = *(void (**)(unint64_t))(v8 + 56);
                v28(v27);
              }
              else
              {
                unint64_t v29 = (v16 + v27) & 0xFFFFFFFFFFFFFFF8;
                if (a2 > 0xFE)
                {
                  *(void *)unint64_t v29 = 0;
                  *(void *)(v29 + 8) = 0;
                  *(_WORD *)(v29 + 16) = 0;
                  *(_DWORD *)unint64_t v29 = a2 - 255;
                }
                else
                {
                  *(unsigned char *)(v29 + 17) = -(char)a2;
                }
              }
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v19 = (a3 - v13 + 0xFFFF) >> v18;
    if (v17 <= 3) {
      unsigned int v20 = v19 + 1;
    }
    else {
      unsigned int v20 = 2;
    }
    if (v20 >= 0x10000) {
      int v21 = 4;
    }
    else {
      int v21 = 2;
    }
    if (v20 < 0x100) {
      int v21 = 1;
    }
    if (v20 >= 2) {
      int v22 = v21;
    }
    else {
      int v22 = 0;
    }
    if (v13 >= a2) {
      goto LABEL_19;
    }
  }
  unsigned int v23 = ~v13 + a2;
  unsigned int v24 = v23 >> v18;
  bzero(a1, v17);
  if (v17 <= 3) {
    int v25 = v24 + 1;
  }
  else {
    int v25 = 1;
  }
  if (v17 > 3) {
    *(_DWORD *)a1 = v23;
  }
  else {
    *(_WORD *)a1 = v23;
  }
  switch(v22)
  {
    case 1:
      a1[v17] = v25;
      break;
    case 2:
      *(_WORD *)&a1[v17] = v25;
      break;
    case 3:
LABEL_49:
      __break(1u);
      JUMPOUT(0x187D9D8E8);
    case 4:
      *(_DWORD *)&a1[v17] = v25;
      break;
    default:
      return;
  }
}

uint64_t type metadata accessor for DisclosureGroup()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187D9D928()
{
  return swift_getWitnessTable();
}

uint64_t type metadata accessor for DisclosureGroupConfiguration()
{
  return swift_getGenericMetadata();
}

uint64_t sub_187D9DA9C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  long long v5 = *(_OWORD *)(v0 + 24);
  unint64_t v2 = (int *)(type metadata accessor for DisclosureGroupConfiguration() - 8);
  uint64_t v3 = v0
     + ((*(unsigned __int8 *)(*(void *)v2 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v2 + 80));
  (*(void (**)(uint64_t))(*(void *)(v5 - 8) + 8))(v3);
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v3 + v2[16], v1);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in DisclosureGroup<>.init(configuration:)@<X0>(uint64_t a1@<X8>)
{
  long long v7 = *(_OWORD *)(v1 + 24);
  uint64_t v3 = *(void *)(type metadata accessor for DisclosureGroupConfiguration() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  long long v5 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 16);

  return v5(a1, v4);
}

uint64_t EnvironmentValues.shouldBuildExpandedContentLazily.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.shouldBuildExpandedContentLazily.setter()
{
  type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
  lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

void type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>()
{
  if (!lazy cache variable for type metadata for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>)
  {
    unint64_t v0 = type metadata accessor for EnvironmentPropertyKey();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<ShouldBuildExpandedContentLazilyEnvironmentKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

ValueMetadata *type metadata accessor for ShouldBuildExpandedContentLazilyEnvironmentKey()
{
  return &type metadata for ShouldBuildExpandedContentLazilyEnvironmentKey;
}

uint64_t type metadata completion function for DisclosureGroupConfiguration()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for DisclosureGroupConfiguration(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(_DWORD *)(v8 + 80);
  unsigned int v10 = v9 | *(_DWORD *)(v5 + 80) & 0xF8;
  if (((*(_DWORD *)(v5 + 80) | *(_DWORD *)(v8 + 80)) & 0x100000) != 0
    || (((v9 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v9) + *(void *)(v8 + 64) <= 0x18
      ? (BOOL v11 = v10 > 7)
      : (BOOL v11 = 1),
        v11))
  {
    uint64_t v17 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v17 + (((v10 | 7) + 16) & ~(unint64_t)(v10 | 7)));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    unint64_t v12 = ((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v13 = ((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)unint64_t v12 = *(void *)v13;
    *(void *)(v12 + 8) = *(void *)(v13 + 8);
    *(unsigned char *)(v12 + 16) = *(unsigned char *)(v13 + 16);
    uint64_t v14 = (v12 + v9 + 17) & ~v9;
    uint64_t v15 = (v13 + v9 + 17) & ~v9;
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
    swift_retain();
    swift_retain();
    v16(v14, v15, v7);
  }
  return v4;
}

uint64_t destroy for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8) + 8;
  (*(void (**)(void))v4)();
  unint64_t v5 = (a1 + *(void *)(v4 + 56) + 7) & 0xFFFFFFFFFFFFFFF8;
  swift_release();
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v7 = *(uint64_t (**)(unint64_t))(v6 + 8);
  unint64_t v8 = (v5 + *(unsigned __int8 *)(v6 + 80) + 17) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);

  return v7(v8);
}

uint64_t initializeWithCopy for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 16;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 48) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v10 = *(void *)(a3 + 16);
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16);
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 17 + v8) & ~v13;
  uint64_t v15 = (v13 + 17 + v9) & ~v13;
  swift_retain();
  swift_retain();
  v12(v14, v15, v10);
  return a1;
}

uint64_t assignWithCopy for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 24;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 40) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  swift_retain();
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_retain();
  swift_release();
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 24))((*(unsigned __int8 *)(v10 + 80) + 17 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 17 + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t initializeWithTake for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 32;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 32) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  char v10 = *(unsigned char *)(v9 + 16);
  *(_OWORD *)unint64_t v8 = *(_OWORD *)v9;
  *(unsigned char *)(v8 + 16) = v10;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v11 + 32))((*(unsigned __int8 *)(v11 + 80) + 17 + v8) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80), (*(unsigned __int8 *)(v11 + 80) + 17 + v9) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
  return a1;
}

uint64_t assignWithTake for DisclosureGroupConfiguration(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8) + 40;
  (*(void (**)(void))v6)();
  uint64_t v7 = *(void *)(v6 + 24) + 7;
  unint64_t v8 = (v7 + a1) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v9 = (v7 + a2) & 0xFFFFFFFFFFFFFFF8;
  *(void *)unint64_t v8 = *(void *)v9;
  swift_release();
  *(void *)(v8 + 8) = *(void *)(v9 + 8);
  swift_release();
  *(unsigned char *)(v8 + 16) = *(unsigned char *)(v9 + 16);
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v10 + 40))((*(unsigned __int8 *)(v10 + 80) + 17 + v8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80), (*(unsigned __int8 *)(v10 + 80) + 17 + v9) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
  return a1;
}

uint64_t getEnumTagSinglePayload for DisclosureGroupConfiguration(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v4 = *(_DWORD *)(v3 + 84);
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  if (v4 <= *(_DWORD *)(v5 + 84)) {
    unsigned int v8 = *(_DWORD *)(v5 + 84);
  }
  else {
    unsigned int v8 = *(_DWORD *)(v3 + 84);
  }
  if (v8 <= 0x7FFFFFFF) {
    unsigned int v9 = 0x7FFFFFFF;
  }
  else {
    unsigned int v9 = v8;
  }
  if (!a2) {
    return 0;
  }
  if (a2 <= v9) {
    goto LABEL_28;
  }
  unint64_t v10 = ((v7 + ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v7) + *(void *)(v5 + 64);
  char v11 = 8 * v10;
  if (v10 <= 3)
  {
    unsigned int v14 = ((a2 - v9 + ~(-1 << v11)) >> v11) + 1;
    if (HIWORD(v14))
    {
      int v12 = *(_DWORD *)((char *)a1 + v10);
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v14 > 0xFF)
    {
      int v12 = *(unsigned __int16 *)((char *)a1 + v10);
      if (!*(unsigned __int16 *)((char *)a1 + v10)) {
        goto LABEL_28;
      }
      goto LABEL_18;
    }
    if (v14 < 2)
    {
LABEL_28:
      if (v4 == v9) {
        return (*(uint64_t (**)(void))(v3 + 48))();
      }
      unint64_t v18 = ((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8;
      if ((v8 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v5 + 48))((v18 + v7 + 17) & ~v7);
      }
      unint64_t v19 = *(void *)(v18 + 8);
      if (v19 >= 0xFFFFFFFF) {
        LODWORD(v19) = -1;
      }
      return (v19 + 1);
    }
  }
  int v12 = *((unsigned __int8 *)a1 + v10);
  if (!*((unsigned char *)a1 + v10)) {
    goto LABEL_28;
  }
LABEL_18:
  int v15 = (v12 - 1) << v11;
  if (v10 > 3) {
    int v15 = 0;
  }
  if (v10)
  {
    if (v10 <= 3) {
      int v16 = ((v7 + ((v6 + 7) & 0xFFFFFFF8) + 17) & ~v7) + *(_DWORD *)(v5 + 64);
    }
    else {
      int v16 = 4;
    }
    switch(v16)
    {
      case 2:
        int v17 = *a1;
        break;
      case 3:
        int v17 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v17 = *(_DWORD *)a1;
        break;
      default:
        int v17 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v17 = 0;
  }
  return v9 + (v17 | v15) + 1;
}

void storeEnumTagSinglePayload for DisclosureGroupConfiguration(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v6 = *(_DWORD *)(v5 + 84);
  uint64_t v7 = *(void *)(*(void *)(a4 + 16) - 8);
  uint64_t v8 = *(void *)(v5 + 64);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  if (v6 <= *(_DWORD *)(v7 + 84)) {
    unsigned int v10 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v10 = *(_DWORD *)(v5 + 84);
  }
  if (v10 <= 0x7FFFFFFF) {
    unsigned int v11 = 0x7FFFFFFF;
  }
  else {
    unsigned int v11 = v10;
  }
  size_t v12 = ((v9 + ((v8 + 7) & 0xFFFFFFFFFFFFFFF8) + 17) & ~v9) + *(void *)(v7 + 64);
  if (a3 > v11)
  {
    if (v12 <= 3)
    {
      unsigned int v16 = ((a3 - v11 + ~(-1 << (8 * v12))) >> (8 * v12)) + 1;
      if (HIWORD(v16))
      {
        int v13 = 4;
      }
      else if (v16 >= 0x100)
      {
        int v13 = 2;
      }
      else
      {
        int v13 = v16 > 1;
      }
    }
    else
    {
      int v13 = 1;
    }
  }
  else
  {
    int v13 = 0;
  }
  if (v11 < a2)
  {
    unsigned int v14 = ~v11 + a2;
    if (v12 < 4)
    {
      int v15 = (v14 >> (8 * v12)) + 1;
      if (v12)
      {
        int v17 = v14 & ~(-1 << (8 * v12));
        bzero(a1, v12);
        if (v12 == 3)
        {
          *(_WORD *)a1 = v17;
          a1[2] = BYTE2(v17);
        }
        else if (v12 == 2)
        {
          *(_WORD *)a1 = v17;
        }
        else
        {
          *a1 = v17;
        }
      }
    }
    else
    {
      bzero(a1, v12);
      *(_DWORD *)a1 = v14;
      int v15 = 1;
    }
    switch(v13)
    {
      case 1:
        a1[v12] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v12] = v15;
        return;
      case 3:
        goto LABEL_48;
      case 4:
        *(_DWORD *)&a1[v12] = v15;
        return;
      default:
        return;
    }
  }
  switch(v13)
  {
    case 1:
      a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 2:
      *(_WORD *)&a1[v12] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_27;
    case 3:
LABEL_48:
      __break(1u);
      JUMPOUT(0x187D9EB44);
    case 4:
      *(_DWORD *)&a1[v12] = 0;
      goto LABEL_26;
    default:
LABEL_26:
      if (a2)
      {
LABEL_27:
        if (v6 == v11)
        {
          unint64_t v18 = *(void (**)(void))(v5 + 56);
          v18();
        }
        else
        {
          unint64_t v19 = (unint64_t)&a1[v8 + 7] & 0xFFFFFFFFFFFFFFF8;
          if ((v10 & 0x80000000) != 0)
          {
            unsigned int v20 = *(void (**)(unint64_t))(v7 + 56);
            v20((v19 + v9 + 17) & ~v9);
          }
          else if ((a2 & 0x80000000) != 0)
          {
            *(unsigned char *)(v19 + 16) = 0;
            *(void *)unint64_t v19 = a2 ^ 0x80000000;
            *(void *)(v19 + 8) = 0;
          }
          else
          {
            *(void *)(v19 + 8) = a2 - 1;
          }
        }
      }
      return;
  }
}

void View.textInputCompletion(_:)()
{
}

uint64_t sub_187D9EB80()
{
  type metadata accessor for TextInputSuggestionCompletion();

  return swift_getWitnessTable();
}

uint64_t type metadata accessor for TextInputSuggestionCompletion()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for TextInputSuggestionCompletion()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for TextInputSuggestionCompletion(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64) + 7;
  if (v7 > 7
    || (*(_DWORD *)(v6 + 80) & 0x100000) != 0
    || ((v8 + ((v7 + 73) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 33 > 0x18)
  {
    uint64_t v11 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v11 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16));
    swift_retain();
  }
  else
  {
    unsigned int v12 = *((unsigned __int8 *)a2 + 72);
    if (v12 >= 2) {
      unsigned int v12 = *(_DWORD *)a2 + 2;
    }
    uint64_t v13 = ~v7;
    if (v12 == 1)
    {
      uint64_t v14 = a2[3];
      *(void *)(a1 + 24) = v14;
      (**(void (***)(uint64_t, uint64_t *))(v14 - 8))(a1, a2);
      long long v15 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 56) = v15;
      (**(void (***)(uint64_t, uint64_t))(v15 - 8))(v4 + 32, (uint64_t)(a2 + 4));
      char v16 = 1;
    }
    else
    {
      uint64_t v17 = a2[1];
      *(void *)uint64_t v4 = *a2;
      *(void *)(v4 + 8) = v17;
      swift_bridgeObjectRetain();
      char v16 = 0;
    }
    *(unsigned char *)(v4 + 72) = v16;
    uint64_t v18 = (uint64_t)a2 + v7;
    uint64_t v19 = (v4 + v7 + 73) & v13;
    uint64_t v20 = (v18 + 73) & v13;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v19, v20, v5);
    unint64_t v21 = (v8 + v19) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v22 = (v8 + v20) & 0xFFFFFFFFFFFFFFF8;
    uint64_t v23 = *(void *)v22;
    uint64_t v24 = *(void *)(v22 + 8);
    uint64_t v25 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v22 + 24);
    char v27 = *(unsigned char *)(v22 + 32);
    outlined copy of Environment<Binding<String>?>.Content(*(void *)v22, v24, v25, v26, v27);
    *(void *)unint64_t v21 = v23;
    *(void *)(v21 + 8) = v24;
    *(void *)(v21 + 16) = v25;
    *(void *)(v21 + 24) = v26;
    *(unsigned char *)(v21 + 32) = v27;
  }
  return v4;
}

uint64_t outlined copy of Environment<Binding<String>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return outlined copy of Binding<String>?(a1, a2);
  }
  else {
    return swift_retain();
  }
}

uint64_t destroy for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  uint64_t v5 = *(void *)(*(void *)(a2 + 16) - 8);
  uint64_t v6 = v5 + 8;
  unint64_t v7 = (a1 + *(unsigned __int8 *)(v5 + 80) + 73) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  (*(void (**)(unint64_t))(v5 + 8))(v7);
  unint64_t v8 = (*(void *)(v6 + 56) + v7 + 7) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = *(void *)v8;
  uint64_t v10 = *(void *)(v8 + 8);
  uint64_t v11 = *(void *)(v8 + 16);
  uint64_t v12 = *(void *)(v8 + 24);
  char v13 = *(unsigned char *)(v8 + 32);

  return outlined consume of Environment<Binding<String>?>.Content(v9, v10, v11, v12, v13);
}

uint64_t outlined consume of Environment<Binding<String>?>.Content(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  if (a5) {
    return outlined consume of Binding<String>?(a1, a2);
  }
  else {
    return swift_release();
  }
}

uint64_t initializeWithCopy for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 >= 2) {
    unsigned int v6 = *(_DWORD *)a2 + 2;
  }
  if (v6 == 1)
  {
    uint64_t v7 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    long long v8 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1 + 32, a2 + 32);
    char v9 = 1;
  }
  else
  {
    uint64_t v10 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v10;
    swift_bridgeObjectRetain();
    char v9 = 0;
  }
  *(unsigned char *)(a1 + 72) = v9;
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 16;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 73 + a1) & ~v13;
  uint64_t v15 = (v13 + 73 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 16))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 48) + 7;
  unint64_t v17 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v18 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v19 = *(void *)v18;
  uint64_t v20 = *(void *)(v18 + 8);
  uint64_t v21 = *(void *)(v18 + 16);
  uint64_t v22 = *(void *)(v18 + 24);
  char v23 = *(unsigned char *)(v18 + 32);
  outlined copy of Environment<Binding<String>?>.Content(*(void *)v18, v20, v21, v22, v23);
  *(void *)unint64_t v17 = v19;
  *(void *)(v17 + 8) = v20;
  *(void *)(v17 + 16) = v21;
  *(void *)(v17 + 24) = v22;
  *(unsigned char *)(v17 + 32) = v23;
  return a1;
}

uint64_t assignWithCopy for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v8;
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      uint64_t v9 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v9;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 32, a2 + 32);
      *(unsigned char *)(a1 + 72) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  uint64_t v10 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v11 = v10 + 24;
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 73 + a1) & ~v12;
  uint64_t v14 = (v12 + 73 + a2) & ~v12;
  (*(void (**)(uint64_t, uint64_t))(v10 + 24))(v13, v14);
  uint64_t v15 = *(void *)(v11 + 40) + 7;
  unint64_t v16 = (v15 + v13) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v17 = (v15 + v14) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v18 = *(void *)v17;
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = *(void *)(v17 + 16);
  uint64_t v21 = *(void *)(v17 + 24);
  char v22 = *(unsigned char *)(v17 + 32);
  outlined copy of Environment<Binding<String>?>.Content(*(void *)v17, v19, v20, v21, v22);
  uint64_t v23 = *(void *)v16;
  uint64_t v24 = *(void *)(v16 + 8);
  uint64_t v25 = *(void *)(v16 + 16);
  uint64_t v26 = *(void *)(v16 + 24);
  char v27 = *(unsigned char *)(v16 + 32);
  *(void *)unint64_t v16 = v18;
  *(void *)(v16 + 8) = v19;
  *(void *)(v16 + 16) = v20;
  *(void *)(v16 + 24) = v21;
  *(unsigned char *)(v16 + 32) = v22;
  outlined consume of Environment<Binding<String>?>.Content(v23, v24, v25, v26, v27);
  return a1;
}

uint64_t initializeWithTake for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v5;
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    long long v6 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v6;
    char v7 = 1;
  }
  else
  {
    char v7 = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
  *(unsigned char *)(a1 + 72) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v11 = (v10 + 73 + a1) & ~v10;
  uint64_t v12 = (v10 + 73 + a2) & ~v10;
  (*(void (**)(uint64_t, uint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32) + 7;
  unint64_t v14 = (v13 + v11) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v15 = (v13 + v12) & 0xFFFFFFFFFFFFFFF8;
  char v16 = *(unsigned char *)(v15 + 32);
  long long v17 = *(_OWORD *)(v15 + 16);
  *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
  *(_OWORD *)(v14 + 16) = v17;
  *(unsigned char *)(v14 + 32) = v16;
  return a1;
}

uint64_t assignWithTake for TextInputSuggestionCompletion(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 72);
    if (v6 >= 2) {
      unsigned int v6 = *(_DWORD *)a1 + 2;
    }
    if (v6 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v7 = *(unsigned __int8 *)(a2 + 72);
    if (v7 >= 2) {
      unsigned int v7 = *(_DWORD *)a2 + 2;
    }
    if (v7 == 1)
    {
      long long v8 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v8;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 72) = v10;
  }
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 73 + a1) & ~v13;
  uint64_t v15 = (v13 + 73 + a2) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 24) + 7;
  unint64_t v17 = (v16 + v15) & 0xFFFFFFFFFFFFFFF8;
  char v18 = *(unsigned char *)(v17 + 32);
  unint64_t v19 = (v16 + v14) & 0xFFFFFFFFFFFFFFF8;
  uint64_t v20 = *(void *)v19;
  uint64_t v21 = *(void *)(v19 + 8);
  uint64_t v22 = *(void *)(v19 + 16);
  uint64_t v23 = *(void *)(v19 + 24);
  char v24 = *(unsigned char *)(v19 + 32);
  long long v25 = *(_OWORD *)(v17 + 16);
  *(_OWORD *)unint64_t v19 = *(_OWORD *)v17;
  *(_OWORD *)(v19 + 16) = v25;
  *(unsigned char *)(v19 + 32) = v18;
  outlined consume of Environment<Binding<String>?>.Content(v20, v21, v22, v23, v24);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestionCompletion(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0xFE) {
    unsigned int v7 = 254;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((*(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 73) & ~v6) + 7) & 0xFFFFFFFFFFFFFFF8)
       + 33;
    unsigned int v9 = (a2 - v7 + 255) >> (8 * v8);
    if (v8 < 4) {
      unsigned int v10 = v9 + 1;
    }
    else {
      unsigned int v10 = 2;
    }
    if (v10 >= 0x10000) {
      unsigned int v11 = 4;
    }
    else {
      unsigned int v11 = 2;
    }
    if (v10 < 0x100) {
      unsigned int v11 = 1;
    }
    if (v10 >= 2) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = 0;
    }
    switch(v12)
    {
      case 1:
        int v13 = a1[v8];
        if (!a1[v8]) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v13 = *(unsigned __int16 *)&a1[v8];
        if (*(_WORD *)&a1[v8]) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187D9F6ACLL);
      case 4:
        int v13 = *(_DWORD *)&a1[v8];
        if (!v13) {
          break;
        }
LABEL_22:
        int v15 = (v13 - 1) << (8 * v8);
        if (v8 >= 4) {
          int v15 = 0;
        }
        if (((*(_DWORD *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) + ((v6 + 73) & ~v6) + 7) & 0xFFFFFFF8) == 0xFFFFFFE0) {
          int v16 = *a1;
        }
        else {
          int v16 = *(_DWORD *)a1;
        }
        return v7 + (v16 | v15) + 1;
      default:
        break;
    }
  }
  if (v5 > 0xFE) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((unint64_t)&a1[v6 + 73] & ~v6);
  }
  unsigned int v17 = a1[72];
  if (v17 >= 2) {
    return (v17 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

double storeEnumTagSinglePayload for TextInputSuggestionCompletion(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0xFE) {
    unsigned int v8 = 254;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((*(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64) + ((v9 + 73) & ~v9) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 33;
  char v11 = 8 * v10;
  if (v8 >= a3)
  {
    int v15 = 0;
    if (v8 >= a2)
    {
LABEL_17:
      switch(v15)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return result;
          }
          goto LABEL_34;
        case 3:
          goto LABEL_46;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_33;
        default:
LABEL_33:
          if (a2)
          {
LABEL_34:
            if (v7 > 0xFE)
            {
              unint64_t v20 = (unint64_t)&a1[v9 + 73] & ~v9;
              uint64_t v21 = *(void (**)(unint64_t))(v6 + 56);
              v21(v20);
            }
            else if (a2 > 0xFE)
            {
              double result = 0.0;
              *(_OWORD *)(a1 + 57) = 0u;
              *((_OWORD *)a1 + 2) = 0u;
              *((_OWORD *)a1 + 3) = 0u;
              *(_OWORD *)a1 = 0u;
              *((_OWORD *)a1 + 1) = 0u;
              *(_DWORD *)a1 = a2 - 255;
            }
            else
            {
              a1[72] = -(char)a2;
            }
          }
          break;
      }
      return result;
    }
  }
  else
  {
    unsigned int v12 = (a3 - v8 + 255) >> v11;
    if (v10 <= 3) {
      unsigned int v13 = v12 + 1;
    }
    else {
      unsigned int v13 = 2;
    }
    if (v13 >= 0x10000) {
      int v14 = 4;
    }
    else {
      int v14 = 2;
    }
    if (v13 < 0x100) {
      int v14 = 1;
    }
    if (v13 >= 2) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v8 >= a2) {
      goto LABEL_17;
    }
  }
  unsigned int v16 = (~v8 + a2) >> v11;
  if (v10 < 4) {
    int v17 = v16 + 1;
  }
  else {
    int v17 = 1;
  }
  if (v10 >= 4) {
    unsigned int v18 = ~v8 + a2;
  }
  else {
    unsigned int v18 = (~(_BYTE)v8 + a2);
  }
  bzero(a1, v10);
  if (v10 == 1) {
    *a1 = v18;
  }
  else {
    *(_DWORD *)a1 = v18;
  }
  switch(v15)
  {
    case 1:
      a1[v10] = v17;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v17;
      break;
    case 3:
LABEL_46:
      __break(1u);
      JUMPOUT(0x187D9F8F4);
    case 4:
      *(_DWORD *)&a1[v10] = v17;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t destroy for TextInputSuggestionCompletionKind(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 72);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1)
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    return __swift_destroy_boxed_opaque_existential_1(a1 + 32);
  }
  else
  {
    return swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 72);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v5;
    (**(void (***)(uint64_t, uint64_t))(v5 - 8))(a1, a2);
    long long v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v6;
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 32, a2 + 32);
    char v7 = 1;
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v8;
    swift_bridgeObjectRetain();
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 72) = v7;
  return a1;
}

uint64_t assignWithCopy for TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      uint64_t v7 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v7;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1 + 32, a2 + 32);
      *(unsigned char *)(a1 + 72) = 1;
    }
    else
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = *(void *)(a2 + 8);
      *(unsigned char *)(a1 + 72) = 0;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 72);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 72);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      long long v6 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v6;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      long long v7 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v7;
      char v8 = 1;
    }
    else
    {
      char v8 = 0;
      *(_OWORD *)a1 = *(_OWORD *)a2;
    }
    *(unsigned char *)(a1 + 72) = v8;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputSuggestionCompletionKind(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 73)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 72);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TextInputSuggestionCompletionKind(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 57) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 73) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 72) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TextInputSuggestionCompletionKind(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 72);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for TextInputSuggestionCompletionKind(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 64) = 0;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 72) = a2;
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in TextInputSuggestionCompletion<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TextInputSuggestionCompletion.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v62 = a2;
  uint64_t v54 = type metadata accessor for TextInputCompletionButtonStyle();
  MEMORY[0x1F4188790](v54);
  long long v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = *(void *)(a1 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  MEMORY[0x1F4188790](v9);
  size_t v10 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a1;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = *(void *)(a1 + 24);
  uint64_t v53 = type metadata accessor for Button();
  uint64_t v55 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v52 = (_WORD *)((char *)&v51 - v13);
  type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>();
  uint64_t v14 = type metadata accessor for ModifiedContent();
  uint64_t v58 = *(void *)(v14 - 8);
  MEMORY[0x1F4188790](v14);
  unsigned int v16 = (char *)&v51 - v15;
  type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F41280]);
  uint64_t v60 = v14;
  uint64_t v61 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v61 - 8);
  MEMORY[0x1F4188790](v61);
  uint64_t v56 = (char *)&v51 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v19 = MEMORY[0x1F4188790](v18);
  uint64_t v57 = (char *)&v51 - v20;
  uint64_t v21 = v51;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v10, v3, v51, v19);
  unint64_t v22 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v23 = swift_allocObject();
  *(void *)(v23 + 16) = v11;
  *(void *)(v23 + 24) = v12;
  (*(void (**)(unint64_t, char *, uint64_t))(v7 + 32))(v23 + v22, v10, v21);
  uint64_t v63 = v11;
  uint64_t v64 = v12;
  uint64_t v65 = v3;
  char v24 = v52;
  long long v25 = v16;
  Button.init(action:label:)((uint64_t)partial apply for closure #1 in TextInputSuggestionCompletion.body.getter, v23, (void (*)(uint64_t))partial apply for closure #2 in TextInputSuggestionCompletion.body.getter, v52);
  outlined init with copy of TextInputSuggestionCompletionKind(v3, (uint64_t)v6);
  uint64_t v26 = v54;
  char v27 = (uint64_t *)&v6[*(int *)(v54 + 20)];
  *char v27 = swift_getKeyPath();
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  swift_storeEnumTagMultiPayload();
  char v28 = &v6[*(int *)(v26 + 24)];
  *(void *)char v28 = swift_getKeyPath();
  *((void *)v28 + 1) = 0;
  v28[16] = 0;
  uint64_t v29 = v53;
  uint64_t WitnessTable = swift_getWitnessTable();
  lazy protocol witness table accessor for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle(&lazy protocol witness table cache variable for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle, (void (*)(uint64_t))type metadata accessor for TextInputCompletionButtonStyle);
  View.buttonStyle<A>(_:)((uint64_t)v6, v29, v26, WitnessTable);
  outlined destroy of TextInputCompletionButtonStyle((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for TextInputCompletionButtonStyle);
  (*(void (**)(_WORD *, uint64_t))(v55 + 8))(v24, v29);
  uint64_t v31 = v3 + *(int *)(v21 + 40);
  long long v32 = *(_OWORD *)(v31 + 16);
  v72[0] = *(_OWORD *)v31;
  v72[1] = v32;
  char v73 = *(unsigned char *)(v31 + 32);
  outlined init with take of Environment<Binding<String>?>.Content((uint64_t)v72, (uint64_t)v74);
  outlined retain of Environment<Binding<String>?>.Content((uint64_t)v74, (void (*)(void, void, void, void, void))outlined copy of Environment<Binding<String>?>.Content);
  uint64_t v33 = specialized Environment.wrappedValue.getter();
  uint64_t v35 = v34;
  uint64_t v37 = v36;
  uint64_t v39 = v38;
  outlined retain of Environment<Binding<String>?>.Content((uint64_t)v72, (void (*)(void, void, void, void, void))outlined consume of Environment<Binding<String>?>.Content);
  if (v35)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
    *((void *)&v71 + 1) = v40;
    uint64_t v41 = (void *)swift_allocObject();
    *(void *)&long long v70 = v41;
    v41[2] = v33;
    v41[3] = v35;
    v41[4] = v37;
    v41[5] = v39;
  }
  else
  {
    long long v70 = 0u;
    long long v71 = 0u;
  }
  outlined destroy of Any?((uint64_t)&v70);
  uint64_t v42 = lazy protocol witness table accessor for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle(&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>);
  uint64_t v68 = WitnessTable;
  uint64_t v69 = v42;
  uint64_t v43 = v60;
  uint64_t v44 = swift_getWitnessTable();
  uint64_t v45 = v56;
  View.disabled(_:)();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v25, v43);
  unint64_t v46 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<Bool> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v66 = v44;
  unint64_t v67 = v46;
  uint64_t v47 = v61;
  swift_getWitnessTable();
  uint64_t v48 = v57;
  static ViewBuilder.buildExpression<A>(_:)(v45);
  uint64_t v49 = *(void (**)(char *, uint64_t))(v59 + 8);
  v49(v45, v47);
  static ViewBuilder.buildExpression<A>(_:)(v48);
  return ((uint64_t (*)(char *, uint64_t))v49)(v48, v47);
}

uint64_t closure #1 in TextInputSuggestionCompletion.body.getter(uint64_t a1)
{
  outlined init with copy of TextInputSuggestionCompletionKind(a1, (uint64_t)&v7);
  if (v8)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    uint64_t v2 = a1 + *(int *)(type metadata accessor for TextInputSuggestionCompletion() + 40);
    long long v3 = *(_OWORD *)(v2 + 16);
    v9[0] = *(_OWORD *)v2;
    v9[1] = v3;
    char v10 = *(unsigned char *)(v2 + 32);
    outlined init with take of Environment<Binding<String>?>.Content((uint64_t)v9, (uint64_t)v11);
    outlined retain of Environment<Binding<String>?>.Content((uint64_t)v11, (void (*)(void, void, void, void, void))outlined copy of Environment<Binding<String>?>.Content);
    specialized Environment.wrappedValue.getter();
    uint64_t v5 = v4;
    outlined retain of Environment<Binding<String>?>.Content((uint64_t)v9, (void (*)(void, void, void, void, void))outlined consume of Environment<Binding<String>?>.Content);
    if (v5)
    {
      dispatch thunk of AnyLocation.set(_:transaction:)();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t closure #2 in TextInputSuggestionCompletion.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  long long v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = type metadata accessor for TextInputSuggestionCompletion();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v7 + 36));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t type metadata accessor for TextInputCompletionButtonStyle()
{
  uint64_t result = type metadata singleton initialization cache for TextInputCompletionButtonStyle;
  if (!type metadata singleton initialization cache for TextInputCompletionButtonStyle) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>()
{
  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>)
  {
    type metadata accessor for TextInputCompletionButtonStyle();
    lazy protocol witness table accessor for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle(&lazy protocol witness table cache variable for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle, (void (*)(uint64_t))type metadata accessor for TextInputCompletionButtonStyle);
    unint64_t v0 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<TextInputCompletionButtonStyle>);
    }
  }
}

uint64_t sub_187DA07C4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for TextInputSuggestionCompletion();
  unint64_t v3 = (*(unsigned __int8 *)(*(void *)(v2 - 8) + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v2 - 8) + 80);
  uint64_t v4 = v0 + v3;
  if (*(unsigned char *)(v0 + v3 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + v3);
    __swift_destroy_boxed_opaque_existential_1(v4 + 32);
  }
  else
  {
    swift_bridgeObjectRelease();
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v4 + *(int *)(v2 + 36), v1);
  uint64_t v5 = v4 + *(int *)(v2 + 40);
  outlined consume of Environment<Binding<String>?>.Content(*(void *)v5, *(void *)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(unsigned char *)(v5 + 32));

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in TextInputSuggestionCompletion.body.getter()
{
  uint64_t v1 = *(void *)(type metadata accessor for TextInputSuggestionCompletion() - 8);
  uint64_t v2 = v0 + ((*(unsigned __int8 *)(v1 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80));

  return closure #1 in TextInputSuggestionCompletion.body.getter(v2);
}

uint64_t partial apply for closure #2 in TextInputSuggestionCompletion.body.getter()
{
  return closure #2 in TextInputSuggestionCompletion.body.getter(*(void *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t outlined init with copy of TextInputSuggestionCompletionKind(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for DismissSearchAccessoryAction(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  ButtonAction.callAsFunction()();
  uint64_t v6 = a2 + *(int *)(type metadata accessor for TextInputCompletionButtonStyle() + 24);
  uint64_t v7 = *(void *)v6;
  uint64_t v8 = *(void *)(v6 + 8);
  char v9 = *(unsigned char *)(v6 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v6, v8, v9);
  char v10 = (void (*)(uint64_t *))specialized Environment.wrappedValue.getter(v7, v8, v9);
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(v7, v8, v9, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  if (v10)
  {
    uint64_t v13 = 4;
    v10(&v13);
    outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?((uint64_t)v10);
  }
  specialized Environment.wrappedValue.getter((uint64_t)v5);
  DismissSearchAccessoryAction.callAsFunction()();
  return outlined destroy of TextInputCompletionButtonStyle((uint64_t)v5, type metadata accessor for DismissSearchAccessoryAction);
}

uint64_t outlined init with take of Environment<Binding<String>?>.Content(uint64_t a1, uint64_t a2)
{
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Environment<Binding<String>?>.Content, (uint64_t (*)(uint64_t))type metadata accessor for Binding<String>?, MEMORY[0x1E4F3F4D8]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for Binding<String>?()
{
  if (!lazy cache variable for type metadata for Binding<String>?)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(255, (unint64_t *)&lazy cache variable for type metadata for Binding<String>, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<String>?);
    }
  }
}

uint64_t outlined retain of Environment<Binding<String>?>.Content(uint64_t a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t lazy protocol witness table accessor for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_187DA0CBC()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject();
}

uint64_t protocol witness for PrimitiveButtonStyle.makeBody(configuration:) in conformance TextInputCompletionButtonStyle@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = v3;
  uint64_t v24 = a3;
  type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>();
  uint64_t v8 = v7 - 8;
  MEMORY[0x1F4188790](v7);
  char v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a2 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  MEMORY[0x1F4188790](v13);
  uint64_t v14 = type metadata accessor for PrimitiveButtonStyleConfiguration(0);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  MEMORY[0x1F4188790](v14 - 8);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_8((uint64_t)a1, (uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), type metadata accessor for PrimitiveButtonStyleConfiguration);
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_8(v5, (uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t (*)(void))type metadata accessor for TextInputCompletionButtonStyle);
  unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
  unint64_t v18 = (v16 + *(unsigned __int8 *)(v11 + 80) + v17) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = swift_allocObject();
  outlined init with take of TextInputCompletionButtonStyle((uint64_t)&v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v17, type metadata accessor for PrimitiveButtonStyleConfiguration);
  outlined init with take of TextInputCompletionButtonStyle((uint64_t)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0), v19 + v18, (uint64_t (*)(void))type metadata accessor for TextInputCompletionButtonStyle);
  char v20 = a1[1];
  *char v10 = *a1;
  v10[1] = v20;
  uint64_t v21 = (uint64_t (**)())&v10[*(int *)(v8 + 44)];
  *uint64_t v21 = partial apply for closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:);
  v21[1] = (uint64_t (*)())v19;
  type metadata accessor for ButtonAction();
  swift_storeEnumTagMultiPayload();
  _s7SwiftUI33PrimitiveButtonStyleConfigurationVWOcTm_8((uint64_t)v10, v24, (uint64_t (*)(void))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
  return outlined destroy of TextInputCompletionButtonStyle((uint64_t)v10, (uint64_t (*)(void))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
}

uint64_t specialized static TextInputSuggestionCompletionKind.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  outlined init with copy of TextInputSuggestionCompletionKind(a1, (uint64_t)v11);
  outlined init with copy of TextInputSuggestionCompletionKind(a2, (uint64_t)v12);
  if ((v11[72] & 1) == 0)
  {
    outlined init with copy of TextInputSuggestionCompletionKind((uint64_t)v11, (uint64_t)v9);
    if ((v14 & 1) == 0)
    {
      if (v9[0] == v12[0])
      {
        swift_bridgeObjectRelease_n();
      }
      else
      {
        char v4 = _stringCompareWithSmolCheck(_:_:expecting:)();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v4 & 1) == 0)
        {
          outlined destroy of TextInputSuggestionCompletionKind((uint64_t)v11);
          goto LABEL_8;
        }
      }
      outlined destroy of TextInputSuggestionCompletionKind((uint64_t)v11);
      char v3 = 1;
      return v3 & 1;
    }
    swift_bridgeObjectRelease();
LABEL_7:
    outlined destroy of TextInputCompletionButtonStyle((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind));
LABEL_8:
    char v3 = 0;
    return v3 & 1;
  }
  outlined init with copy of TextInputSuggestionCompletionKind((uint64_t)v11, (uint64_t)v9);
  if (v14 != 1)
  {
    outlined destroy of AnyToken((uint64_t)v9);
    goto LABEL_7;
  }
  v7[0] = v12[2];
  v7[1] = v12[3];
  uint64_t v8 = v13;
  v6[0] = v12[0];
  v6[1] = v12[1];
  char v3 = MEMORY[0x18C1174E0](&v10, v7);
  outlined destroy of AnyToken((uint64_t)v6);
  outlined destroy of AnyToken((uint64_t)v9);
  outlined destroy of TextInputSuggestionCompletionKind((uint64_t)v11);
  return v3 & 1;
}

void type metadata accessor for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind)()
{
  if (!lazy cache variable for type metadata for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (TextInputSuggestionCompletionKind, TextInputSuggestionCompletionKind));
    }
  }
}

uint64_t outlined destroy of TextInputSuggestionCompletionKind(uint64_t a1)
{
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for TextInputCompletionButtonStyle(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = v10 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    int v7 = *((unsigned __int8 *)a2 + 72);
    if (v7 == 255)
    {
      long long v8 = *((_OWORD *)a2 + 3);
      *(_OWORD *)(a1 + 32) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 48) = v8;
      *(_OWORD *)(a1 + 57) = *(_OWORD *)((char *)a2 + 57);
      long long v9 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v9;
    }
    else if (v7)
    {
      uint64_t v12 = a2[3];
      *(void *)(a1 + 24) = v12;
      (**(void (***)(uint64_t, uint64_t *))(v12 - 8))(a1, a2);
      long long v13 = *(_OWORD *)(a2 + 7);
      *(_OWORD *)(v4 + 56) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(v4 + 32, (uint64_t)(a2 + 4));
      *(unsigned char *)(v4 + 72) = 1;
    }
    else
    {
      uint64_t v11 = a2[1];
      *(void *)uint64_t v4 = *a2;
      *(void *)(v4 + 8) = v11;
      *(unsigned char *)(v4 + 72) = 0;
      swift_bridgeObjectRetain();
    }
    uint64_t v14 = *(int *)(a3 + 20);
    uint64_t v15 = (void *)(v4 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(v17 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v19 + 48))(v16, 1, v17))
      {
        type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
        memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      }
      else
      {
        uint64_t v40 = v16[1];
        void *v15 = *v16;
        v15[1] = v40;
        uint64_t v21 = *(int *)(v18 + 32);
        uint64_t v41 = v19;
        unint64_t v22 = (char *)v15 + v21;
        uint64_t v23 = (char *)v16 + v21;
        *unint64_t v22 = *((unsigned char *)v16 + v21);
        v22[1] = *((unsigned char *)v16 + v21 + 1);
        *((_WORD *)v22 + 1) = *(_WORD *)((char *)v16 + v21 + 2);
        v22[8] = *((unsigned char *)v16 + v21 + 8);
        *((_DWORD *)v22 + 1) = *(_DWORD *)((char *)v16 + v21 + 4);
        uint64_t v24 = (int *)type metadata accessor for SearchFieldState(0);
        uint64_t v25 = v24[9];
        uint64_t v38 = &v23[v25];
        uint64_t v39 = &v22[v25];
        uint64_t v26 = type metadata accessor for AttributedString();
        uint64_t v37 = *(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16);
        swift_retain();
        swift_retain();
        v37(v39, v38, v26);
        v22[v24[10]] = v23[v24[10]];
        uint64_t v27 = v24[11];
        char v28 = &v22[v27];
        uint64_t v29 = &v23[v27];
        v28[4] = v29[4];
        *(_DWORD *)char v28 = *(_DWORD *)v29;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v41 + 56))(v15, 0, 1, v18);
      }
    }
    else
    {
      void *v15 = *v16;
      swift_retain();
    }
    swift_storeEnumTagMultiPayload();
    uint64_t v30 = *(int *)(a3 + 24);
    uint64_t v31 = v4 + v30;
    uint64_t v32 = (uint64_t)a2 + v30;
    uint64_t v33 = *(void *)v32;
    uint64_t v34 = *(void *)(v32 + 8);
    char v35 = *(unsigned char *)(v32 + 16);
    outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v32, v34, v35);
    *(void *)uint64_t v31 = v33;
    *(void *)(v31 + 8) = v34;
    *(unsigned char *)(v31 + 16) = v35;
  }
  return v4;
}

uint64_t destroy for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 72);
  if (v4 != 255)
  {
    if (v4)
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      __swift_destroy_boxed_opaque_existential_1(a1 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v7 = v6;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6))
    {
      swift_release();
      swift_release();
      uint64_t v8 = v5 + *(int *)(v7 + 32);
      uint64_t v9 = v8 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
      uint64_t v10 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(v9, v10);
    }
  }
  else
  {
    swift_release();
  }
  return _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8), *(unsigned char *)(a1 + *(int *)(a2 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
}

uint64_t initializeWithCopy for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a2 + 72);
  if (v6 == 255)
  {
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  else if (v6)
  {
    uint64_t v10 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v10;
    (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1, a2);
    long long v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    *(unsigned char *)(a1 + 72) = 1;
  }
  else
  {
    uint64_t v9 = *(void *)(a2 + 8);
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v9;
    *(unsigned char *)(a1 + 72) = 0;
    swift_bridgeObjectRetain();
  }
  uint64_t v12 = *(int *)(a3 + 20);
  long long v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v16 = v15;
    uint64_t v17 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v17 + 48))(v14, 1, v15))
    {
      type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
      memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      uint64_t v38 = v14[1];
      *long long v13 = *v14;
      v13[1] = v38;
      uint64_t v19 = *(int *)(v16 + 32);
      uint64_t v39 = v17;
      uint64_t v20 = (char *)v13 + v19;
      uint64_t v21 = (char *)v14 + v19;
      *uint64_t v20 = *((unsigned char *)v14 + v19);
      v20[1] = *((unsigned char *)v14 + v19 + 1);
      *((_WORD *)v20 + 1) = *(_WORD *)((char *)v14 + v19 + 2);
      v20[8] = *((unsigned char *)v14 + v19 + 8);
      *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v14 + v19 + 4);
      unint64_t v22 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v23 = v22[9];
      uint64_t v36 = &v21[v23];
      uint64_t v37 = &v20[v23];
      uint64_t v24 = type metadata accessor for AttributedString();
      char v35 = *(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16);
      swift_retain();
      swift_retain();
      v35(v37, v36, v24);
      v20[v22[10]] = v21[v22[10]];
      uint64_t v25 = v22[11];
      uint64_t v26 = &v20[v25];
      uint64_t v27 = &v21[v25];
      v26[4] = v27[4];
      *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v13, 0, 1, v16);
    }
  }
  else
  {
    *long long v13 = *v14;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
  uint64_t v28 = *(int *)(a3 + 24);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  uint64_t v31 = *(void *)v30;
  uint64_t v32 = *(void *)(v30 + 8);
  char v33 = *(unsigned char *)(v30 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v30, v32, v33);
  *(void *)uint64_t v29 = v31;
  *(void *)(v29 + 8) = v32;
  *(unsigned char *)(v29 + 16) = v33;
  return a1;
}

uint64_t assignWithCopy for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6 = *(unsigned __int8 *)(a2 + 72);
  if (*(unsigned __int8 *)(a1 + 72) == 255)
  {
    if (v6 == 255)
    {
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v10 = *(_OWORD *)(a2 + 16);
      long long v11 = *(_OWORD *)(a2 + 32);
      long long v12 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v11;
      *(_OWORD *)(a1 + 48) = v12;
      *(_OWORD *)(a1 + 16) = v10;
      if (a1 == a2) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
    if (v6) {
      goto LABEL_10;
    }
  }
  else
  {
    if (v6 == 255)
    {
      outlined destroy of TextInputSuggestionCompletionKind(a1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      long long v8 = *(_OWORD *)(a2 + 32);
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v9 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
      *(_OWORD *)(a1 + 32) = v8;
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 16) = v9;
      if (a1 == a2) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
    if (a1 == a2)
    {
LABEL_11:
      if (a1 == a2) {
        goto LABEL_21;
      }
      goto LABEL_12;
    }
    outlined destroy of TextInputSuggestionCompletionKind(a1);
    if (*(unsigned char *)(a2 + 72))
    {
LABEL_10:
      uint64_t v13 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v13;
      (**(void (***)(uint64_t, uint64_t))(v13 - 8))(a1, a2);
      uint64_t v14 = *(void *)(a2 + 56);
      *(void *)(a1 + 56) = v14;
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1 + 32, a2 + 32);
      *(unsigned char *)(a1 + 72) = 1;
      goto LABEL_11;
    }
  }
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 72) = 0;
  swift_bridgeObjectRetain();
  if (a1 == a2) {
    goto LABEL_21;
  }
LABEL_12:
  uint64_t v15 = *(int *)(a3 + 20);
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  outlined destroy of TextInputCompletionButtonStyle(a1 + v15, (uint64_t (*)(void))type metadata accessor for Environment<DismissSearchAccessoryAction>.Content);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v19 = v18;
    uint64_t v20 = *(void *)(v18 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v20 + 48))(v17, 1, v18))
    {
      type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
      memcpy(v16, v17, *(void *)(*(void *)(v21 - 8) + 64));
    }
    else
    {
      *uint64_t v16 = *v17;
      uint64_t v45 = v20;
      v16[1] = v17[1];
      uint64_t v22 = *(int *)(v19 + 32);
      uint64_t v23 = (char *)v16 + v22;
      uint64_t v24 = (char *)v17 + v22;
      *uint64_t v23 = *((unsigned char *)v17 + v22);
      v23[1] = *((unsigned char *)v17 + v22 + 1);
      v23[2] = *((unsigned char *)v17 + v22 + 2);
      v23[3] = *((unsigned char *)v17 + v22 + 3);
      LODWORD(v22) = *(_DWORD *)((char *)v17 + v22 + 4);
      v23[8] = v24[8];
      *((_DWORD *)v23 + 1) = v22;
      uint64_t v25 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v26 = v25[9];
      uint64_t v43 = &v24[v26];
      uint64_t v44 = &v23[v26];
      uint64_t v27 = type metadata accessor for AttributedString();
      uint64_t v42 = *(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16);
      swift_retain();
      swift_retain();
      v42(v44, v43, v27);
      v23[v25[10]] = v24[v25[10]];
      uint64_t v28 = v25[11];
      uint64_t v29 = &v23[v28];
      uint64_t v30 = &v24[v28];
      char v31 = v30[4];
      *(_DWORD *)uint64_t v29 = *(_DWORD *)v30;
      v29[4] = v31;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(v16, 0, 1, v19);
    }
  }
  else
  {
    *uint64_t v16 = *v17;
    swift_retain();
  }
  swift_storeEnumTagMultiPayload();
LABEL_21:
  uint64_t v32 = *(int *)(a3 + 24);
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  uint64_t v35 = *(void *)v34;
  uint64_t v36 = *(void *)(v34 + 8);
  char v37 = *(unsigned char *)(v34 + 16);
  outlined copy of Environment<AppIntentExecutor?>.Content(*(void *)v34, v36, v37);
  uint64_t v38 = *(void *)v33;
  uint64_t v39 = *(void *)(v33 + 8);
  char v40 = *(unsigned char *)(v33 + 16);
  *(void *)uint64_t v33 = v35;
  *(void *)(v33 + 8) = v36;
  *(unsigned char *)(v33 + 16) = v37;
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(v38, v39, v40, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

_OWORD *initializeWithTake for TextInputCompletionButtonStyle(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  long long v6 = a2[3];
  a1[2] = a2[2];
  a1[3] = v6;
  *(_OWORD *)((char *)a1 + 57) = *(_OWORD *)((char *)a2 + 57);
  long long v7 = a2[1];
  *a1 = *a2;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  long long v9 = (void *)((char *)a1 + v8);
  long long v10 = (void *)((char *)a2 + v8);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  uint64_t v12 = v11;
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 - 8);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v15 + 48))(v10, 1, v13))
    {
      type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    }
    else
    {
      uint64_t v17 = v10[1];
      *long long v9 = *v10;
      v9[1] = v17;
      uint64_t v18 = *(int *)(v14 + 32);
      uint64_t v19 = (char *)v9 + v18;
      uint64_t v20 = (char *)v10 + v18;
      char *v19 = *((unsigned char *)v10 + v18);
      v19[1] = *((unsigned char *)v10 + v18 + 1);
      *((_WORD *)v19 + 1) = *(_WORD *)((char *)v10 + v18 + 2);
      v19[8] = *((unsigned char *)v10 + v18 + 8);
      *((_DWORD *)v19 + 1) = *(_DWORD *)((char *)v10 + v18 + 4);
      uint64_t v21 = (int *)type metadata accessor for SearchFieldState(0);
      uint64_t v22 = v21[9];
      char v31 = &v20[v22];
      uint64_t v32 = &v19[v22];
      uint64_t v23 = type metadata accessor for AttributedString();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v23 - 8) + 32))(v32, v31, v23);
      v19[v21[10]] = v20[v21[10]];
      uint64_t v24 = v21[11];
      uint64_t v25 = &v19[v24];
      uint64_t v26 = &v20[v24];
      v25[4] = v26[4];
      *(_DWORD *)uint64_t v25 = *(_DWORD *)v26;
      (*(void (**)(void *, void, uint64_t, uint64_t))(v15 + 56))(v9, 0, 1, v14);
    }
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(v9, v10, *(void *)(*(void *)(v12 - 8) + 64));
  }
  uint64_t v27 = *(int *)(a3 + 24);
  uint64_t v28 = (char *)a1 + v27;
  uint64_t v29 = (char *)a2 + v27;
  *(_OWORD *)uint64_t v28 = *(_OWORD *)v29;
  v28[16] = v29[16];
  return a1;
}

uint64_t assignWithTake for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned __int8 *)(a1 + 72) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 72) == 255 || a1 != a2)
  {
    outlined destroy of TextInputSuggestionCompletionKind(a1);
LABEL_7:
    long long v7 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v7;
    *(_OWORD *)(a1 + 57) = *(_OWORD *)(a2 + 57);
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
  }
  if (a1 != a2)
  {
    uint64_t v9 = *(int *)(a3 + 20);
    long long v10 = (void *)(a1 + v9);
    uint64_t v11 = (void *)(a2 + v9);
    outlined destroy of TextInputCompletionButtonStyle(a1 + v9, (uint64_t (*)(void))type metadata accessor for Environment<DismissSearchAccessoryAction>.Content);
    type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
    uint64_t v13 = v12;
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      type metadata accessor for Binding<SearchFieldState>(0);
      uint64_t v15 = v14;
      uint64_t v16 = *(void *)(v14 - 8);
      if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v16 + 48))(v11, 1, v14))
      {
        type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Binding<SearchFieldState>?, (uint64_t (*)(uint64_t))type metadata accessor for Binding<SearchFieldState>, MEMORY[0x1E4FBB718]);
        memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
      }
      else
      {
        uint64_t v18 = v11[1];
        *long long v10 = *v11;
        v10[1] = v18;
        uint64_t v19 = *(int *)(v15 + 32);
        uint64_t v20 = (char *)v10 + v19;
        uint64_t v21 = (char *)v11 + v19;
        *uint64_t v20 = *((unsigned char *)v11 + v19);
        v20[1] = *((unsigned char *)v11 + v19 + 1);
        *((_WORD *)v20 + 1) = *(_WORD *)((char *)v11 + v19 + 2);
        v20[8] = *((unsigned char *)v11 + v19 + 8);
        *((_DWORD *)v20 + 1) = *(_DWORD *)((char *)v11 + v19 + 4);
        uint64_t v22 = (int *)type metadata accessor for SearchFieldState(0);
        uint64_t v23 = v22[9];
        uint64_t v36 = &v21[v23];
        char v37 = &v20[v23];
        uint64_t v24 = type metadata accessor for AttributedString();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32))(v37, v36, v24);
        v20[v22[10]] = v21[v22[10]];
        uint64_t v25 = v22[11];
        uint64_t v26 = &v20[v25];
        uint64_t v27 = &v21[v25];
        v26[4] = v27[4];
        *(_DWORD *)uint64_t v26 = *(_DWORD *)v27;
        (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v10, 0, 1, v15);
      }
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v10, v11, *(void *)(*(void *)(v13 - 8) + 64));
    }
  }
  uint64_t v28 = *(int *)(a3 + 24);
  uint64_t v29 = a1 + v28;
  uint64_t v30 = a2 + v28;
  char v31 = *(unsigned char *)(v30 + 16);
  uint64_t v32 = *(void *)v29;
  uint64_t v33 = *(void *)(v29 + 8);
  char v34 = *(unsigned char *)(v29 + 16);
  *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  *(unsigned char *)(v29 + 16) = v31;
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(v32, v33, v34, (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);
  return a1;
}

uint64_t getEnumTagSinglePayload for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DA2418);
}

uint64_t sub_187DA2418(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4E0]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a1 + *(int *)(a3 + 20);
    long long v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v10(v9, a2, v8);
  }
  else
  {
    unsigned int v12 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 24) + 16);
    if (v12 > 1) {
      return (v12 ^ 0xFF) + 1;
    }
    else {
      return 0;
    }
  }
}

void type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

uint64_t storeEnumTagSinglePayload for TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DA2584);
}

void sub_187DA2584(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content(0, &lazy cache variable for type metadata for Environment<DismissSearchAccessoryAction>, type metadata accessor for DismissSearchAccessoryAction, MEMORY[0x1E4F3F4E0]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a4 + 20);
    unsigned int v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12(v11, a2, a2, v10);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 24) + 16) = -(char)a2;
  }
}

void type metadata completion function for TextInputCompletionButtonStyle()
{
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

uint64_t sub_187DA2718()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for PrimitiveButtonStyle.Body : View in TextInputCompletionButtonStyle()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t sub_187DA2864()
{
  uint64_t v1 = (int *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(*(void *)v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  uint64_t v4 = type metadata accessor for TextInputCompletionButtonStyle();
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(*(void *)(v4 - 8) + 80)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v4 - 8) + 80);
  unint64_t v6 = v0 + v1[8] + v2;
  type metadata accessor for ButtonAction();
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 2)
  {
    _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(*(void *)v6, *(void *)(v6 + 8), *(unsigned char *)(v6 + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

LABEL_6:
    swift_release();
    goto LABEL_8;
  }
  if (EnumCaseMultiPayload != 1)
  {
    if (EnumCaseMultiPayload) {
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  outlined consume of Environment<OpenURLAction>.Content(*(void *)v6, *(void *)(v6 + 8), *(void *)(v6 + 16), *(void *)(v6 + 24), *(_WORD *)(v6 + 32), *(unsigned char *)(v6 + 34));
  outlined consume of Environment<OpenURLAction>.Content(*(void *)(v6 + 40), *(void *)(v6 + 48), *(void *)(v6 + 56), *(void *)(v6 + 64), *(_WORD *)(v6 + 72), *(unsigned char *)(v6 + 74));
  unint64_t v8 = v6 + *(int *)(type metadata accessor for LinkDestination() + 24);
  uint64_t v9 = type metadata accessor for URL();
  (*(void (**)(unint64_t, uint64_t))(*(void *)(v9 - 8) + 8))(v8, v9);
LABEL_8:
  uint64_t v10 = v0 + v5;
  int v11 = *(unsigned __int8 *)(v0 + v5 + 72);
  if (v11 != 255)
  {
    if (v11)
    {
      __swift_destroy_boxed_opaque_existential_1(v0 + v5);
      __swift_destroy_boxed_opaque_existential_1(v10 + 32);
    }
    else
    {
      swift_bridgeObjectRelease();
    }
  }
  uint64_t v12 = v10 + *(int *)(v4 + 20);
  type metadata accessor for Environment<DismissSearchAccessoryAction>.Content();
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for Binding<SearchFieldState>(0);
    uint64_t v14 = v13;
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48))(v12, 1, v13))
    {
      swift_release();
      swift_release();
      uint64_t v15 = *(int *)(v14 + 32);
      uint64_t v16 = v12 + v15 + *(int *)(type metadata accessor for SearchFieldState(0) + 36);
      uint64_t v17 = type metadata accessor for AttributedString();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8))(v16, v17);
    }
  }
  else
  {
    swift_release();
  }
  _s7SwiftUI11EnvironmentV7ContentOyAA19TriggerSubmitActionVSg_GWOeTm_0(*(void *)(v10 + *(int *)(v4 + 24)), *(void *)(v10 + *(int *)(v4 + 24) + 8), *(unsigned char *)(v10 + *(int *)(v4 + 24) + 16), (uint64_t (*)(void))outlined consume of (@escaping @callee_guaranteed (@guaranteed NSFileWrapper?) -> (@owned NSFileWrapper, @error @owned Error))?);

  return swift_deallocObject();
}

uint64_t outlined init with take of TextInputCompletionButtonStyle(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t partial apply for closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:)()
{
  uint64_t v1 = *(void *)(type metadata accessor for PrimitiveButtonStyleConfiguration(0) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for TextInputCompletionButtonStyle() - 8);
  uint64_t v5 = v0 + ((v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in TextInputCompletionButtonStyle.makeBody(configuration:)(v0 + v2, v5);
}

uint64_t outlined destroy of TextInputCompletionButtonStyle(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

unint64_t lazy protocol witness table accessor for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>;
  if (!lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>)
  {
    type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>();
    lazy protocol witness table accessor for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle((unint64_t *)&lazy protocol witness table cache variable for type Button<PrimitiveButtonStyleConfiguration.Label> and conformance Button<A>, (void (*)(uint64_t))type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>);
    lazy protocol witness table accessor for type TextInputCompletionButtonStyle and conformance TextInputCompletionButtonStyle((unint64_t *)&lazy protocol witness table cache variable for type PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle> and conformance PrimitiveButtonStyleContainerModifier<A>, (void (*)(uint64_t))type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>> and conformance <> ModifiedContent<A, B>);
  }
  return result;
}

void type metadata accessor for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>()
{
  if (!lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>)
  {
    type metadata accessor for Button<PrimitiveButtonStyleConfiguration.Label>();
    type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>();
    unint64_t v0 = type metadata accessor for ModifiedContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifiedContent<Button<PrimitiveButtonStyleConfiguration.Label>, PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>>);
    }
  }
}

void type metadata accessor for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>()
{
  if (!lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>)
  {
    lazy protocol witness table accessor for type DefaultListButtonStyle and conformance DefaultListButtonStyle();
    unint64_t v0 = type metadata accessor for PrimitiveButtonStyleContainerModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for PrimitiveButtonStyleContainerModifier<DefaultListButtonStyle>);
    }
  }
}

id closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6 = a2 + 16;
  swift_beginAccess();
  uint64_t v7 = MEMORY[0x18C119DF0](v6);
  if (!v7)
  {
LABEL_7:
    if (!a4) {
      return 0;
    }
LABEL_8:
    id v17 = *(id *)&a4[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];
    id v18 = v17;
    return v17;
  }
  unint64_t v8 = (void *)v7;
  swift_beginAccess();
  uint64_t v9 = (void *)MEMORY[0x18C119DF0](a3 + 16);
  if (!v9)
  {

    goto LABEL_7;
  }
  uint64_t v10 = v9;
  int v11 = UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(v9, a4);
  if (!v11)
  {

    if (!a4) {
      return 0;
    }
    goto LABEL_8;
  }
  uint64_t v12 = v11;
  id v13 = objc_msgSend(v8, sel_transitionCoordinator);
  if (v13)
  {
    uint64_t v14 = v13;
    v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom] = 1;
    MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
    objc_msgSend(v12, sel_setNeedsLayout);
    uint64_t v15 = swift_allocObject();
    *(void *)(v15 + 16) = v12;
    v20[4] = _s7SwiftUI19UIHostingControllerC28configurePreferredTransition11pushingFrom16enablePreemptionySo06UIViewD0C_SbtFSo0L0CSgSo06UIZoomG25SourceViewProviderContextCcfU_ySo0ldg11CoordinatorQ0_pcfU_TA_0;
    v20[5] = v15;
    v20[0] = MEMORY[0x1E4F143A8];
    v20[1] = 1107296256;
    v20[2] = thunk for @escaping @callee_guaranteed (@guaranteed UIViewControllerTransitionCoordinatorContext) -> ();
    v20[3] = &block_descriptor_47;
    uint64_t v16 = _Block_copy(v20);
    uint64_t v12 = v12;
    swift_release();
    objc_msgSend(v14, sel_animateAlongsideTransitionInView_animation_completion_, 0, 0, v16);
    swift_unknownObjectRelease();

    _Block_release(v16);
  }
  else
  {
  }
  id v17 = *(id *)&v12[OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_contentView];

  return v17;
}

id UIHostingController.findSourceMarkingView(previousViewController:fallbackSource:)(void *a1, void *a2)
{
  UIHostingController.transitionContent.getter(&v13);
  if (!v16) {
    goto LABEL_6;
  }
  uint64_t v4 = v13;
  id result = objc_msgSend(a1, sel_view, v14, v15, v16, v17);
  if (result)
  {
    uint64_t v6 = result;
    MEMORY[0x1F4188790](result);
    void v11[2] = v4;
    char v11[3] = &v12;
    id v8 = _sSo6UIViewC7SwiftUIE20firstDescendantWhereyABSgSbABXEF05_sSo6a2C7B103UIE15firstDescendant6ofType9predicatexSgxm_SbxXEtlFSbABXEfU_AC34MatchedTransitionSourceMarkingViewC_Tg5xSbRi_zRi0_zlyAC0stuvW0CIsgnd_Tf1cn_nTf4ng_n(v7, (uint64_t (*)(uint64_t *))closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)specialized partial apply, (uint64_t)v11);
    type metadata accessor for MatchedTransitionSourceMarkingView();
    uint64_t v9 = swift_dynamicCastClass();

    if (v9)
    {
      outlined destroy of AnyHashable((uint64_t)&v12);
      return (id)v9;
    }

    outlined destroy of AnyHashable((uint64_t)&v12);
LABEL_6:
    id v10 = a2;
    return a2;
  }
  __break(1u);
  return result;
}

id closure #1 in closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom) = 0;
  return MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
}

uint64_t UIHostingController.configureBackgroundForZoom()()
{
  static Semantics.v6_2.getter();
  uint64_t result = isLinkedOnOrAfter(_:)();
  if (result)
  {
    id v1 = (id)specialized UIHostingController.host.getter();
    _UIHostingView.appliesContainerBackgroundFallbackColor.setter(1);

    MEMORY[0x1F4188790](v2);
    static Update.ensure<A>(_:)();
    if (v9 >> 62 == 1)
    {
      swift_retain();
      swift_retain();
      outlined copy of ContainerBackgroundValue.Content(v8, v9);
      swift_retain();
      swift_retain();
      swift_retain();
      swift_release();
      uint64_t v3 = ShapeStyle.fallbackColor(in:level:)();
      swift_release();
      outlined consume of ContainerBackgroundValue.Content(v8, v9);
      swift_release();
      swift_release();
      swift_release();
      if (v3)
      {
        uint64_t v4 = (void *)specialized UIHostingController.host.getter();
        type metadata accessor for NSObject(0, (unint64_t *)&lazy cache variable for type metadata for UIColor);
        id v5 = v4;
        uint64_t v6 = swift_retain();
        id v7 = UIColor.init(_:)(v6);
        specialized _UIHostingView.containerBackgroundFallbackColor.setter(v7);

        outlined consume of ContainerBackgroundValue.Content(v8, v9);
        swift_release();
      }
      else
      {
        outlined consume of ContainerBackgroundValue.Content(v8, v9);
      }
      swift_release();
      swift_release();
    }
    else
    {
      outlined consume of ContainerBackgroundValue.Content(v8, v9);
      swift_release();
      swift_release();
    }
    return swift_release();
  }
  return result;
}

double closure #1 in UIHostingController.configureBackgroundForZoom()@<D0>(uint64_t a1@<X8>)
{
  specialized UIHostingController.host.getter();
  specialized _UIHostingView.viewGraph.getter();
  swift_retain();
  GraphHost.preferenceValues()();
  swift_release();
  PreferenceValues.subscript.getter();
  swift_bridgeObjectRelease();
  *(_OWORD *)a1 = v3;
  *(unsigned char *)(a1 + 16) = v4;
  double result = *(double *)&v5;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 40) = v6;
  return result;
}

uint64_t specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v5 = (uint64_t *)(a1 + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_effect);
  swift_beginAccess();
  uint64_t v6 = *v5;
  outlined init with copy of AnyHashable(a3, (uint64_t)v12);
  if (v6 == a2)
  {
    outlined init with copy of AnyHashable((uint64_t)(v5 + 1), (uint64_t)v11);
    outlined init with copy of AnyHashable((uint64_t)v12, (uint64_t)v9);
    AnyHashable.init<A>(_:)();
    char v7 = MEMORY[0x18C1174E0](v11, v10);
    outlined destroy of AnyHashable((uint64_t)v10);
    outlined destroy of AnyHashable((uint64_t)v11);
    outlined destroy of AnyHashable((uint64_t)v12);
  }
  else
  {
    outlined destroy of AnyHashable((uint64_t)v12);
    char v7 = 0;
  }
  return v7 & 1;
}

uint64_t specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  return specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(*a1, a2, a3);
}

uint64_t _sSo6UIViewC7SwiftUIE28_findMatchedTransitionSource2id2inAC0efG11MarkingViewCSgx_AC9NamespaceV2IDVtSHRzlFSbAHXEfU_s11AnyHashableV_TG5TA_0(uint64_t *a1)
{
  return specialized closure #1 in UIView._findMatchedTransitionSource<A>(id:in:)(*a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_187DA3604()
{
  swift_unknownObjectWeakDestroy();

  return swift_deallocObject();
}

uint64_t sub_187DA363C()
{
  swift_release();
  swift_release();

  return swift_deallocObject();
}

id partial apply for closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(uint64_t a1)
{
  return closure #1 in UIHostingController.configurePreferredTransition(pushingFrom:enablePreemption:)(a1, *(void *)(v1 + 32), *(void *)(v1 + 40), *(char **)(v1 + 48));
}

double partial apply for closure #1 in UIHostingController.configureBackgroundForZoom()@<D0>(uint64_t a1@<X8>)
{
  return closure #1 in UIHostingController.configureBackgroundForZoom()(a1);
}

uint64_t sub_187DA36B0()
{
  return swift_deallocObject();
}

id _s7SwiftUI19UIHostingControllerC28configurePreferredTransition11pushingFrom16enablePreemptionySo06UIViewD0C_SbtFSo0L0CSgSo06UIZoomG25SourceViewProviderContextCcfU_ySo0ldg11CoordinatorQ0_pcfU_TA_0()
{
  *(unsigned char *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC7SwiftUI34MatchedTransitionSourceMarkingView_isPartOfActiveZoom) = 0;
  return MatchedTransitionSourceMarkingView.updateLayerStyle(isZooming:)(0);
}

uint64_t outlined destroy of _NavigationTransitionOutputs?(uint64_t a1)
{
  type metadata accessor for _NavigationTransitionOutputs?();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t initializeWithCopy for AlertStorage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  uint64_t v6 = (_OWORD *)(a1 + 104);
  uint64_t v7 = a2 + 104;
  uint64_t v8 = *(void *)(a2 + 144);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 128);
    if (v9)
    {
      uint64_t v10 = *(void *)(a2 + 104);
      uint64_t v11 = *(void *)(a2 + 112);
      char v12 = *(unsigned char *)(a2 + 120);
      outlined copy of Text.Storage(v10, v11, v12);
      *(void *)(a1 + 104) = v10;
      *(void *)(a1 + 112) = v11;
      *(unsigned char *)(a1 + 120) = v12;
      *(void *)(a1 + 128) = v9;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v14 = *(_OWORD *)(v7 + 16);
      *uint64_t v6 = *(_OWORD *)v7;
      *(_OWORD *)(a1 + 120) = v14;
    }
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = v8;
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v13 = *(_OWORD *)(v7 + 16);
    *uint64_t v6 = *(_OWORD *)v7;
    *(_OWORD *)(a1 + 120) = v13;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(v7 + 32);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(v7 + 48);
  }
  uint64_t v15 = *(void *)(a2 + 160);
  if (v15)
  {
    uint64_t v16 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v15;
    *(void *)(a1 + 168) = v16;
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    uint64_t v17 = *(void **)(a2 + 192);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(void *)(a1 + 192) = v17;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    id v18 = v17;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v19 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v19;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    long long v20 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v20;
  }
  return a1;
}

uint64_t assignWithCopy for AlertStorage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  uint64_t v5 = (_OWORD *)(a1 + 104);
  uint64_t v6 = (_OWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 128);
      if (*(void *)(a1 + 128))
      {
        if (v8)
        {
          uint64_t v9 = *(void *)(a2 + 104);
          uint64_t v10 = *(void *)(a2 + 112);
          char v11 = *(unsigned char *)(a2 + 120);
          outlined copy of Text.Storage(v9, v10, v11);
          uint64_t v12 = *(void *)(a1 + 104);
          uint64_t v13 = *(void *)(a1 + 112);
          char v14 = *(unsigned char *)(a1 + 120);
          *(void *)(a1 + 104) = v9;
          *(void *)(a1 + 112) = v10;
          *(unsigned char *)(a1 + 120) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 104);
          long long v27 = *(_OWORD *)(a2 + 120);
          *uint64_t v5 = *v6;
          *(_OWORD *)(a1 + 120) = v27;
        }
      }
      else if (v8)
      {
        uint64_t v21 = *(void *)(a2 + 104);
        uint64_t v22 = *(void *)(a2 + 112);
        char v23 = *(unsigned char *)(a2 + 120);
        outlined copy of Text.Storage(v21, v22, v23);
        *(void *)(a1 + 104) = v21;
        *(void *)(a1 + 112) = v22;
        *(unsigned char *)(a1 + 120) = v23;
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 120);
        *uint64_t v5 = *v6;
        *(_OWORD *)(a1 + 120) = v29;
      }
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_retain();
      swift_release();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 104);
      long long v19 = *(_OWORD *)(a2 + 120);
      long long v18 = *(_OWORD *)(a2 + 136);
      long long v20 = *v6;
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 120) = v19;
      *(_OWORD *)(a1 + 136) = v18;
      *uint64_t v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(void *)(a2 + 128))
    {
      uint64_t v15 = *(void *)(a2 + 104);
      uint64_t v16 = *(void *)(a2 + 112);
      char v17 = *(unsigned char *)(a2 + 120);
      outlined copy of Text.Storage(v15, v16, v17);
      *(void *)(a1 + 104) = v15;
      *(void *)(a1 + 112) = v16;
      *(unsigned char *)(a1 + 120) = v17;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v28 = *(_OWORD *)(a2 + 120);
      *uint64_t v5 = *v6;
      *(_OWORD *)(a1 + 120) = v28;
    }
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v24 = *v6;
    long long v25 = *(_OWORD *)(a2 + 120);
    long long v26 = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v25;
    *(_OWORD *)(a1 + 136) = v26;
    *uint64_t v5 = v24;
  }
  uint64_t v30 = (_OWORD *)(a1 + 160);
  uint64_t v32 = (_OWORD *)(a2 + 160);
  uint64_t v31 = *(void *)(a2 + 160);
  if (*(void *)(a1 + 160))
  {
    if (v31)
    {
      uint64_t v33 = *(void *)(a2 + 168);
      *(void *)(a1 + 160) = v31;
      *(void *)(a1 + 168) = v33;
      *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      char v34 = *(void **)(a2 + 192);
      uint64_t v35 = *(void **)(a1 + 192);
      *(void *)(a1 + 192) = v34;
      id v36 = v34;

      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      swift_retain();
      swift_release();
      *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
      *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
      *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      outlined destroy of BoundInputsView(a1 + 160);
      long long v40 = *(_OWORD *)(a2 + 176);
      *uint64_t v30 = *v32;
      *(_OWORD *)(a1 + 176) = v40;
      long long v42 = *(_OWORD *)(a2 + 208);
      long long v41 = *(_OWORD *)(a2 + 224);
      long long v43 = *(_OWORD *)(a2 + 192);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(_OWORD *)(a1 + 208) = v42;
      *(_OWORD *)(a1 + 224) = v41;
      *(_OWORD *)(a1 + 192) = v43;
    }
  }
  else if (v31)
  {
    uint64_t v37 = *(void *)(a2 + 168);
    *(void *)(a1 + 160) = v31;
    *(void *)(a1 + 168) = v37;
    *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    uint64_t v38 = *(void **)(a2 + 192);
    *(void *)(a1 + 192) = v38;
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_DWORD *)(a1 + 224) = *(_DWORD *)(a2 + 224);
    *(_DWORD *)(a1 + 228) = *(_DWORD *)(a2 + 228);
    *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
    *(_DWORD *)(a1 + 236) = *(_DWORD *)(a2 + 236);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    id v39 = v38;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v44 = *(_OWORD *)(a2 + 176);
    *uint64_t v30 = *v32;
    *(_OWORD *)(a1 + 176) = v44;
    long long v45 = *(_OWORD *)(a2 + 192);
    long long v46 = *(_OWORD *)(a2 + 208);
    long long v47 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v46;
    *(_OWORD *)(a1 + 224) = v47;
    *(_OWORD *)(a1 + 192) = v45;
  }
  return a1;
}

__n128 __swift_memcpy248_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  long long v8 = a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  __n128 result = (__n128)a2[12];
  long long v12 = a2[13];
  long long v13 = a2[14];
  *(void *)(a1 + 240) = *((void *)a2 + 30);
  *(_OWORD *)(a1 + 208) = v12;
  *(_OWORD *)(a1 + 224) = v13;
  *(__n128 *)(a1 + 192) = result;
  return result;
}

uint64_t assignWithTake for AlertStorage(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  long long v5 = (_OWORD *)(a1 + 104);
  long long v6 = (_OWORD *)(a2 + 104);
  if (!*(void *)(a1 + 144)) {
    goto LABEL_7;
  }
  uint64_t v7 = *(void *)(a2 + 144);
  if (!v7)
  {
    outlined destroy of DialogSuppressionConfiguration(a1 + 104);
LABEL_7:
    long long v13 = *(_OWORD *)(a2 + 120);
    *long long v5 = *v6;
    *(_OWORD *)(a1 + 120) = v13;
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    goto LABEL_11;
  }
  if (!*(void *)(a1 + 128))
  {
LABEL_9:
    long long v14 = *(_OWORD *)(a2 + 120);
    *long long v5 = *v6;
    *(_OWORD *)(a1 + 120) = v14;
    goto LABEL_10;
  }
  uint64_t v8 = *(void *)(a2 + 128);
  if (!v8)
  {
    outlined destroy of Text(a1 + 104);
    goto LABEL_9;
  }
  char v9 = *(unsigned char *)(a2 + 120);
  uint64_t v10 = *(void *)(a1 + 104);
  uint64_t v11 = *(void *)(a1 + 112);
  char v12 = *(unsigned char *)(a1 + 120);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(unsigned char *)(a1 + 120) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(a1 + 128) = v8;
  swift_bridgeObjectRelease();
LABEL_10:
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_release();
  *(void *)(a1 + 144) = v7;
  swift_release();
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
LABEL_11:
  uint64_t v15 = *(void *)(a2 + 160);
  if (!*(void *)(a1 + 160))
  {
LABEL_15:
    long long v19 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v19;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    long long v20 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v20;
    return a1;
  }
  if (!v15)
  {
    outlined destroy of BoundInputsView(a1 + 160);
    goto LABEL_15;
  }
  uint64_t v16 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v15;
  *(void *)(a1 + 168) = v16;
  *(_DWORD *)(a1 + 176) = *(_DWORD *)(a2 + 176);
  uint64_t v17 = *(void *)(a2 + 192);
  long long v18 = *(void **)(a1 + 192);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = v17;

  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  swift_release();
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  swift_release();
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertStorage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 248)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AlertStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 248) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 248) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

unint64_t initializeBufferWithCopyOfBuffer for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v4 - 8);
  unint64_t v7 = *(_DWORD *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = (v8 + v10 + ((v7 + 64) & ~v7)) & ~v10;
  uint64_t v13 = *(void *)(v9 + 64) + 7;
  unint64_t v14 = ((v13 + v12) & 0xFFFFFFFFFFFFFFF8) + 89;
  if ((v10 | v7) > 7 || ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v6 + 80)) & 0x100000) != 0 || v14 > 0x18)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    uint64_t v18 = v17 + (((v10 | v7) & 0xF8 ^ 0x1F8) & ((v10 | v7) + 16));
    swift_retain();
  }
  else
  {
    uint64_t v39 = v4;
    uint64_t v42 = ~v10;
    unint64_t v43 = a1;
    *(unsigned char *)a1 = *(unsigned char *)a2;
    unint64_t v19 = a1 & 0xFFFFFFFFFFFFFFF8;
    unint64_t v20 = a2 & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v19 + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
    *(void *)(v19 + 16) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 16);
    *(unsigned char *)(v19 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
    uint64_t v21 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
    uint64_t v22 = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 40);
    char v23 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
    uint64_t v40 = v5;
    uint64_t v41 = v13;
    swift_retain();
    swift_retain();
    outlined copy of Text.Storage(v21, v22, v23);
    *(void *)(v19 + 32) = v21;
    *(void *)(v19 + 40) = v22;
    *(unsigned char *)(v19 + 48) = v23;
    *(void *)(v19 + 56) = *(void *)(v20 + 56);
    uint64_t v24 = (v19 + v7 + 64) & ~v7;
    uint64_t v25 = (v20 + v7 + 64) & ~v7;
    long long v26 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    swift_bridgeObjectRetain();
    v26(v24, v25, v39);
    uint64_t v27 = (v24 + v11) & v42;
    uint64_t v28 = (v25 + v11) & v42;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v27, v28, v40);
    unint64_t v29 = (v41 + v27) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v30 = (v41 + v28) & 0xFFFFFFFFFFFFFFF8;
    if (*(void *)v30 < 0xFFFFFFFFuLL)
    {
      long long v34 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)unint64_t v29 = *(_OWORD *)v30;
      *(_OWORD *)(v29 + 16) = v34;
      long long v35 = *(_OWORD *)(v30 + 32);
      long long v36 = *(_OWORD *)(v30 + 48);
      long long v37 = *(_OWORD *)(v30 + 64);
      *(void *)(v29 + 80) = *(void *)(v30 + 80);
      *(_OWORD *)(v29 + 48) = v36;
      *(_OWORD *)(v29 + 64) = v37;
      *(_OWORD *)(v29 + 32) = v35;
    }
    else
    {
      uint64_t v31 = *(void *)(v30 + 8);
      *(void *)unint64_t v29 = *(void *)v30;
      *(void *)(v29 + 8) = v31;
      *(_DWORD *)(v29 + 16) = *(_DWORD *)(v30 + 16);
      *(void *)(v29 + 24) = *(void *)(v30 + 24);
      uint64_t v32 = *(void **)(v30 + 32);
      *(void *)(v29 + 32) = v32;
      *(void *)(v29 + 40) = *(void *)(v30 + 40);
      *(_DWORD *)(v29 + 48) = *(_DWORD *)(v30 + 48);
      *(void *)(v29 + 56) = *(void *)(v30 + 56);
      *(_DWORD *)(v29 + 64) = *(_DWORD *)(v30 + 64);
      *(_DWORD *)(v29 + 68) = *(_DWORD *)(v30 + 68);
      *(_DWORD *)(v29 + 72) = *(_DWORD *)(v30 + 72);
      *(_DWORD *)(v29 + 76) = *(_DWORD *)(v30 + 76);
      *(void *)(v29 + 80) = *(void *)(v30 + 80);
      id v33 = v32;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    *(unsigned char *)(v29 + 88) = *(unsigned char *)(v30 + 88);
    return v43;
  }
  return v18;
}

unint64_t assignWithCopy for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_retain();
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_retain();
  swift_release();
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(v6 + 24);
  uint64_t v7 = *(void *)(v6 + 32);
  uint64_t v8 = *(void *)(v6 + 40);
  char v9 = *(unsigned char *)(v6 + 48);
  outlined copy of Text.Storage(v7, v8, v9);
  uint64_t v10 = *(void *)(v5 + 32);
  uint64_t v11 = *(void *)(v5 + 40);
  char v12 = *(unsigned char *)(v5 + 48);
  *(void *)(v5 + 32) = v7;
  *(void *)(v5 + 40) = v8;
  *(unsigned char *)(v5 + 48) = v9;
  outlined consume of Text.Storage(v10, v11, v12);
  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v14 = v13 + 24;
  uint64_t v15 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v16 = (v15 + 64 + v5) & ~v15;
  uint64_t v17 = (v15 + 64 + v6) & ~v15;
  (*(void (**)(uint64_t, uint64_t))(v13 + 24))(v16, v17);
  uint64_t v18 = *(void *)(v14 + 40);
  uint64_t v19 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v20 = v19 + 24;
  uint64_t v21 = *(unsigned __int8 *)(v19 + 80);
  uint64_t v22 = v18 + v21;
  uint64_t v23 = (v22 + v16) & ~v21;
  uint64_t v24 = (v22 + v17) & ~v21;
  (*(void (**)(uint64_t, uint64_t))(v19 + 24))(v23, v24);
  uint64_t v25 = *(void *)(v20 + 40) + 7;
  unint64_t v26 = (v25 + v23) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v27 = (v25 + v24) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v28 = *(void *)v27;
  if (*(void *)v26 < 0xFFFFFFFFuLL)
  {
    if (v28 >= 0xFFFFFFFF)
    {
      uint64_t v33 = *(void *)(v27 + 8);
      *(void *)unint64_t v26 = v28;
      *(void *)(v26 + 8) = v33;
      *(_DWORD *)(v26 + 16) = *(_DWORD *)(v27 + 16);
      *(void *)(v26 + 24) = *(void *)(v27 + 24);
      long long v34 = *(void **)(v27 + 32);
      *(void *)(v26 + 32) = v34;
      *(void *)(v26 + 40) = *(void *)(v27 + 40);
      *(_DWORD *)(v26 + 48) = *(_DWORD *)(v27 + 48);
      *(void *)(v26 + 56) = *(void *)(v27 + 56);
      *(_DWORD *)(v26 + 64) = *(_DWORD *)(v27 + 64);
      *(_DWORD *)(v26 + 68) = *(_DWORD *)(v27 + 68);
      *(_DWORD *)(v26 + 72) = *(_DWORD *)(v27 + 72);
      *(_DWORD *)(v26 + 76) = *(_DWORD *)(v27 + 76);
      *(void *)(v26 + 80) = *(void *)(v27 + 80);
      id v35 = v34;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
      goto LABEL_8;
    }
LABEL_7:
    long long v36 = *(_OWORD *)(v27 + 16);
    *(_OWORD *)unint64_t v26 = *(_OWORD *)v27;
    *(_OWORD *)(v26 + 16) = v36;
    long long v37 = *(_OWORD *)(v27 + 32);
    long long v38 = *(_OWORD *)(v27 + 48);
    long long v39 = *(_OWORD *)(v27 + 64);
    *(void *)(v26 + 80) = *(void *)(v27 + 80);
    *(_OWORD *)(v26 + 48) = v38;
    *(_OWORD *)(v26 + 64) = v39;
    *(_OWORD *)(v26 + 32) = v37;
    goto LABEL_8;
  }
  if (v28 < 0xFFFFFFFF)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_7;
  }
  uint64_t v29 = *(void *)(v27 + 8);
  *(void *)unint64_t v26 = v28;
  *(void *)(v26 + 8) = v29;
  *(_DWORD *)(v26 + 16) = *(_DWORD *)(v27 + 16);
  *(void *)(v26 + 24) = *(void *)(v27 + 24);
  unint64_t v30 = *(void **)(v27 + 32);
  uint64_t v31 = *(void **)(v26 + 32);
  *(void *)(v26 + 32) = v30;
  id v32 = v30;

  *(void *)(v26 + 40) = *(void *)(v27 + 40);
  swift_retain();
  swift_release();
  *(_DWORD *)(v26 + 48) = *(_DWORD *)(v27 + 48);
  *(void *)(v26 + 56) = *(void *)(v27 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(v26 + 64) = *(_DWORD *)(v27 + 64);
  *(_DWORD *)(v26 + 68) = *(_DWORD *)(v27 + 68);
  *(_DWORD *)(v26 + 72) = *(_DWORD *)(v27 + 72);
  *(_DWORD *)(v26 + 76) = *(_DWORD *)(v27 + 76);
  *(void *)(v26 + 80) = *(void *)(v27 + 80);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
LABEL_8:
  *(unsigned char *)(v26 + 88) = *(unsigned char *)(v27 + 88);
  return a1;
}

unint64_t initializeWithTake for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  long long v6 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  *(unsigned char *)(v5 + 24) = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFF8) + 24);
  *(_OWORD *)(v5 + 8) = v6;
  long long v7 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFF8) + 32);
  *(_OWORD *)(v5 + 48) = v7;
  uint64_t v8 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v9 = v8 + 32;
  uint64_t v10 = *(unsigned __int8 *)(v8 + 80);
  unint64_t v11 = (v10 + 64 + (a1 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  unint64_t v12 = (v10 + 64 + (a2 & 0xFFFFFFFFFFFFFFF8)) & ~v10;
  (*(void (**)(unint64_t, unint64_t))(v8 + 32))(v11, v12);
  uint64_t v13 = *(void *)(v9 + 32);
  uint64_t v14 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v15 = v14 + 32;
  uint64_t v16 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v17 = v13 + v16;
  unint64_t v18 = (v17 + v11) & ~v16;
  unint64_t v19 = (v17 + v12) & ~v16;
  (*(void (**)(unint64_t, unint64_t))(v14 + 32))(v18, v19);
  uint64_t v20 = *(void *)(v15 + 32) + 7;
  unint64_t v21 = (v20 + v18) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v22 = (v20 + v19) & 0xFFFFFFFFFFFFFFF8;
  long long v23 = *(_OWORD *)(v22 + 16);
  *(_OWORD *)unint64_t v21 = *(_OWORD *)v22;
  *(_OWORD *)(v21 + 16) = v23;
  long long v25 = *(_OWORD *)(v22 + 48);
  long long v24 = *(_OWORD *)(v22 + 64);
  long long v26 = *(_OWORD *)(v22 + 32);
  *(void *)(v21 + 80) = *(void *)(v22 + 80);
  *(_OWORD *)(v21 + 48) = v25;
  *(_OWORD *)(v21 + 64) = v24;
  *(_OWORD *)(v21 + 32) = v26;
  *(unsigned char *)(v21 + 88) = *(unsigned char *)(v22 + 88);
  return a1;
}

unint64_t assignWithTake for AlertModifier(unint64_t a1, unint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((a1 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((a2 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(void *)(v5 + 16) = *(void *)(v6 + 16);
  swift_release();
  *(unsigned char *)(v5 + 24) = *(unsigned char *)(v6 + 24);
  char v7 = *(unsigned char *)(v6 + 48);
  uint64_t v8 = *(void *)(v5 + 32);
  uint64_t v9 = *(void *)(v5 + 40);
  char v10 = *(unsigned char *)(v5 + 48);
  *(_OWORD *)(v5 + 32) = *(_OWORD *)(v6 + 32);
  *(unsigned char *)(v5 + 48) = v7;
  outlined consume of Text.Storage(v8, v9, v10);
  *(void *)(v5 + 56) = *(void *)(v6 + 56);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v12 = v11 + 40;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = (v13 + 64 + v5) & ~v13;
  uint64_t v15 = (v13 + 64 + v6) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 40))(v14, v15);
  uint64_t v16 = *(void *)(v12 + 24);
  uint64_t v17 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v18 = v17 + 40;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = v16 + v19;
  uint64_t v21 = (v20 + v14) & ~v19;
  uint64_t v22 = (v20 + v15) & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v21, v22);
  uint64_t v23 = *(void *)(v18 + 24) + 7;
  unint64_t v24 = (v23 + v21) & 0xFFFFFFFFFFFFFFF8;
  unint64_t v25 = (v23 + v22) & 0xFFFFFFFFFFFFFFF8;
  if (*(void *)v24 < 0xFFFFFFFFuLL) {
    goto LABEL_5;
  }
  if (*(void *)v25 < 0xFFFFFFFFuLL)
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_5:
    long long v28 = *(_OWORD *)(v25 + 16);
    *(_OWORD *)unint64_t v24 = *(_OWORD *)v25;
    *(_OWORD *)(v24 + 16) = v28;
    long long v29 = *(_OWORD *)(v25 + 32);
    long long v30 = *(_OWORD *)(v25 + 48);
    long long v31 = *(_OWORD *)(v25 + 64);
    *(void *)(v24 + 80) = *(void *)(v25 + 80);
    *(_OWORD *)(v24 + 48) = v30;
    *(_OWORD *)(v24 + 64) = v31;
    *(_OWORD *)(v24 + 32) = v29;
    goto LABEL_6;
  }
  uint64_t v26 = *(void *)(v25 + 8);
  *(void *)unint64_t v24 = *(void *)v25;
  *(void *)(v24 + 8) = v26;
  *(_DWORD *)(v24 + 16) = *(_DWORD *)(v25 + 16);
  *(void *)(v24 + 24) = *(void *)(v25 + 24);
  unint64_t v27 = *(void **)(v24 + 32);
  *(void *)(v24 + 32) = *(void *)(v25 + 32);

  *(void *)(v24 + 40) = *(void *)(v25 + 40);
  swift_release();
  *(_DWORD *)(v24 + 48) = *(_DWORD *)(v25 + 48);
  *(void *)(v24 + 56) = *(void *)(v25 + 56);
  swift_release();
  *(_DWORD *)(v24 + 64) = *(_DWORD *)(v25 + 64);
  *(_DWORD *)(v24 + 68) = *(_DWORD *)(v25 + 68);
  *(_DWORD *)(v24 + 72) = *(_DWORD *)(v25 + 72);
  *(_DWORD *)(v24 + 76) = *(_DWORD *)(v25 + 76);
  *(void *)(v24 + 80) = *(void *)(v25 + 80);
  swift_bridgeObjectRelease();
LABEL_6:
  *(unsigned char *)(v24 + 88) = *(unsigned char *)(v25 + 88);
  return a1;
}

uint64_t getEnumTagSinglePayload for AlertModifier(unint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 24);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (v13 < a2)
  {
    unint64_t v14 = ((*(void *)(*(void *)(v6 - 8) + 64) + ((v10 + v11 + ((v9 + 64) & ~v9)) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 89;
    unsigned int v15 = (a2 - v13 + 255) >> (8 * v14);
    if (v14 < 4) {
      unsigned int v16 = v15 + 1;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v16 >= 0x10000) {
      LODWORD(v17) = 4;
    }
    else {
      LODWORD(v17) = 2;
    }
    if (v16 < 0x100) {
      LODWORD(v17) = 1;
    }
    if (v16 >= 2) {
      uint64_t v17 = v17;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *(unsigned __int8 *)(a1 + v14);
        if (!*(unsigned char *)(a1 + v14)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)(a1 + v14);
        if (*(_WORD *)(a1 + v14)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187DA4C08);
      case 4:
        int v18 = *(_DWORD *)(a1 + v14);
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = (v18 - 1) << (8 * v14);
        if (v14 >= 4) {
          int v20 = 0;
        }
        if (v14 == 1) {
          int v21 = *(unsigned __int8 *)a1;
        }
        else {
          int v21 = *(_DWORD *)a1;
        }
        return v13 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  unint64_t v22 = a1 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t v24 = (v22 + v9 + 64) & ~v9;
    if (v5 == v13) {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v24);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v24 + v10 + v11) & ~v11, v8, v6);
    }
  }
  else
  {
    unint64_t v23 = *(void *)(v22 + 16);
    if (v23 >= 0xFFFFFFFF) {
      LODWORD(v23) = -1;
    }
    return (v23 + 1);
  }
}

void storeEnumTagSinglePayload for AlertModifier(unint64_t a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 24);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((*(void *)(*(void *)(v8 - 8) + 64) + ((v11 + v12 + ((v10 + 64) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 89;
  char v16 = 8 * v15;
  if (v14 >= a3)
  {
    int v20 = 0;
    if (v14 >= a2)
    {
LABEL_20:
      switch(v20)
      {
        case 1:
          *(unsigned char *)(a1 + v15) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 2:
          *(_WORD *)(a1 + v15) = 0;
          if (!a2) {
            return;
          }
          goto LABEL_37;
        case 3:
          goto LABEL_53;
        case 4:
          *(_DWORD *)(a1 + v15) = 0;
          goto LABEL_36;
        default:
LABEL_36:
          if (a2)
          {
LABEL_37:
            unint64_t v23 = a1 & 0xFFFFFFFFFFFFFFF8;
            if ((v13 & 0x80000000) != 0)
            {
              uint64_t v24 = (v23 + v10 + 64) & ~v10;
              if (v7 == v14)
              {
                unint64_t v25 = *(void (**)(uint64_t))(v6 + 56);
                v25(v24);
              }
              else
              {
                uint64_t v26 = (v24 + v11 + v12) & ~v12;
                unint64_t v27 = *(void (**)(uint64_t))(v9 + 56);
                v27(v26);
              }
            }
            else if ((a2 & 0x80000000) != 0)
            {
              *(unsigned char *)(v23 + 24) = 0;
              *(void *)(v23 + 8) = a2 ^ 0x80000000;
              *(void *)(v23 + 16) = 0;
            }
            else
            {
              *(void *)(v23 + 16) = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v17 = (a3 - v14 + 255) >> v16;
    if (v15 <= 3) {
      unsigned int v18 = v17 + 1;
    }
    else {
      unsigned int v18 = 2;
    }
    if (v18 >= 0x10000) {
      int v19 = 4;
    }
    else {
      int v19 = 2;
    }
    if (v18 < 0x100) {
      int v19 = 1;
    }
    if (v18 >= 2) {
      int v20 = v19;
    }
    else {
      int v20 = 0;
    }
    if (v14 >= a2) {
      goto LABEL_20;
    }
  }
  if (v15 < 4) {
    unsigned int v21 = ((~v14 + a2) >> v16) + 1;
  }
  else {
    unsigned int v21 = 1;
  }
  if (v15 >= 4) {
    unsigned int v22 = ~v14 + a2;
  }
  else {
    unsigned int v22 = (~(_BYTE)v14 + a2);
  }
  bzero((void *)a1, v15);
  if (v15 == 1) {
    *(unsigned char *)a1 = v22;
  }
  else {
    *(_DWORD *)a1 = v22;
  }
  switch(v20)
  {
    case 1:
      *(unsigned char *)(a1 + v15) = v21;
      break;
    case 2:
      *(_WORD *)(a1 + v15) = v21;
      break;
    case 3:
LABEL_53:
      __break(1u);
      JUMPOUT(0x187DA4EF8);
    case 4:
      *(_DWORD *)(a1 + v15) = v21;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for ViewModifier in AlertModifier<A, B>()
{
  return &protocol witness table for AlertModifier<A, B>;
}

uint64_t protocol witness for static ViewModifier._makeViewList(modifier:inputs:body:) in conformance AlertModifier<A, B>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FF3A0](a1, a2, a3, a4, a5, WitnessTable);
}

unint64_t MakeAlertStorage.resolveTintColor()()
{
  long long v1 = v0[1];
  long long v18 = *v0;
  long long v19 = v1;
  long long v2 = v0[8];
  long long v16 = v0[7];
  v17[0] = v2;
  *(_OWORD *)((char *)v17 + 9) = *(long long *)((char *)v0 + 137);
  long long v3 = v0[4];
  long long v12 = v0[3];
  long long v13 = v3;
  long long v4 = v0[6];
  long long v14 = v0[5];
  long long v15 = v4;
  uint64_t v10 = v18;
  uint64_t v20 = *((void *)v0 + 4);
  MakeConfirmationDialog.environment.getter(v11);
  if (v11[1])
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<DialogTintColorKey>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DialogColorSchemeKey> and conformance EnvironmentPropertyKey<A>((unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DialogTintColorKey> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<DialogTintColorKey>);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  swift_release();
  swift_release();
  if (!v10) {
    return 0;
  }
  PropertyList.Tracker.reset()();
  MakeConfirmationDialog.environment.getter(v11);
  swift_release();
  swift_retain();
  EnvironmentValues.init(_:tracker:)();
  dispatch thunk of AnyColorBox.resolve(in:)();
  unsigned int v6 = v5;
  unsigned int v8 = v7;
  swift_release();
  swift_release();
  swift_release();
  return v6 | ((unint64_t)v8 << 32);
}

void *specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B)@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  int v2 = *a1;
  long long v3 = *(_OWORD *)(a1 + 54);
  v11[12] = *(_OWORD *)(a1 + 50);
  v11[13] = v3;
  long long v11[14] = *(_OWORD *)(a1 + 58);
  uint64_t v12 = *((void *)a1 + 31);
  long long v4 = *(_OWORD *)(a1 + 38);
  v11[8] = *(_OWORD *)(a1 + 34);
  v11[9] = v4;
  long long v5 = *(_OWORD *)(a1 + 46);
  v11[10] = *(_OWORD *)(a1 + 42);
  v11[11] = v5;
  long long v6 = *(_OWORD *)(a1 + 22);
  void v11[4] = *(_OWORD *)(a1 + 18);
  v11[5] = v6;
  long long v7 = *(_OWORD *)(a1 + 30);
  _OWORD v11[6] = *(_OWORD *)(a1 + 26);
  v11[7] = v7;
  long long v8 = *(_OWORD *)(a1 + 6);
  v11[0] = *(_OWORD *)(a1 + 2);
  v11[1] = v8;
  long long v9 = *(_OWORD *)(a1 + 14);
  void v11[2] = *(_OWORD *)(a1 + 10);
  char v11[3] = v9;
  *(_OWORD *)(a2 + 200) = *(_OWORD *)(a1 + 50);
  *(_OWORD *)(a2 + 216) = *(_OWORD *)(a1 + 54);
  *(_OWORD *)(a2 + 232) = *(_OWORD *)(a1 + 58);
  *(void *)(a2 + 248) = *((void *)a1 + 31);
  *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 34);
  *(_OWORD *)(a2 + 152) = *(_OWORD *)(a1 + 38);
  *(_OWORD *)(a2 + 168) = *(_OWORD *)(a1 + 42);
  *(_OWORD *)(a2 + 184) = *(_OWORD *)(a1 + 46);
  *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 18);
  *(_OWORD *)(a2 + 88) = *(_OWORD *)(a1 + 22);
  *(_OWORD *)(a2 + 104) = *(_OWORD *)(a1 + 26);
  *(_OWORD *)(a2 + 120) = *(_OWORD *)(a1 + 30);
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 2);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 6);
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a1 + 10);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 14);
  *(_DWORD *)a2 = v2;
  return outlined retain of AlertStorage(v11);
}

uint64_t destroy for MakeAlertStorage(uint64_t a1)
{
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_release();
  if (*(void *)(a1 + 144))
  {
    if (*(void *)(a1 + 128))
    {
      outlined consume of Text.Storage(*(void *)(a1 + 104), *(void *)(a1 + 112), *(unsigned char *)(a1 + 120));
      swift_bridgeObjectRelease();
    }
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t assignWithCopy for MakeAlertStorage(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_retain();
  swift_release();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  long long v4 = *(_OWORD *)(a2 + 80);
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v4;
  *(unsigned char *)(a1 + 97) = *(unsigned char *)(a2 + 97);
  long long v5 = (_OWORD *)(a1 + 104);
  long long v6 = (_OWORD *)(a2 + 104);
  uint64_t v7 = *(void *)(a2 + 144);
  if (*(void *)(a1 + 144))
  {
    if (v7)
    {
      uint64_t v8 = *(void *)(a2 + 128);
      if (*(void *)(a1 + 128))
      {
        if (v8)
        {
          uint64_t v9 = *(void *)(a2 + 104);
          uint64_t v10 = *(void *)(a2 + 112);
          char v11 = *(unsigned char *)(a2 + 120);
          outlined copy of Text.Storage(v9, v10, v11);
          uint64_t v12 = *(void *)(a1 + 104);
          uint64_t v13 = *(void *)(a1 + 112);
          char v14 = *(unsigned char *)(a1 + 120);
          *(void *)(a1 + 104) = v9;
          *(void *)(a1 + 112) = v10;
          *(unsigned char *)(a1 + 120) = v11;
          outlined consume of Text.Storage(v12, v13, v14);
          *(void *)(a1 + 128) = *(void *)(a2 + 128);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
        }
        else
        {
          outlined destroy of Text(a1 + 104);
          long long v27 = *(_OWORD *)(a2 + 120);
          *long long v5 = *v6;
          *(_OWORD *)(a1 + 120) = v27;
        }
      }
      else if (v8)
      {
        uint64_t v21 = *(void *)(a2 + 104);
        uint64_t v22 = *(void *)(a2 + 112);
        char v23 = *(unsigned char *)(a2 + 120);
        outlined copy of Text.Storage(v21, v22, v23);
        *(void *)(a1 + 104) = v21;
        *(void *)(a1 + 112) = v22;
        *(unsigned char *)(a1 + 120) = v23;
        *(void *)(a1 + 128) = *(void *)(a2 + 128);
        swift_bridgeObjectRetain();
      }
      else
      {
        long long v29 = *(_OWORD *)(a2 + 120);
        *long long v5 = *v6;
        *(_OWORD *)(a1 + 120) = v29;
      }
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      swift_retain();
      swift_release();
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    }
    else
    {
      outlined destroy of DialogSuppressionConfiguration(a1 + 104);
      long long v19 = *(_OWORD *)(a2 + 120);
      long long v18 = *(_OWORD *)(a2 + 136);
      long long v20 = *v6;
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 120) = v19;
      *(_OWORD *)(a1 + 136) = v18;
      *long long v5 = v20;
    }
  }
  else if (v7)
  {
    if (*(void *)(a2 + 128))
    {
      uint64_t v15 = *(void *)(a2 + 104);
      uint64_t v16 = *(void *)(a2 + 112);
      char v17 = *(unsigned char *)(a2 + 120);
      outlined copy of Text.Storage(v15, v16, v17);
      *(void *)(a1 + 104) = v15;
      *(void *)(a1 + 112) = v16;
      *(unsigned char *)(a1 + 120) = v17;
      *(void *)(a1 + 128) = *(void *)(a2 + 128);
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v28 = *(_OWORD *)(a2 + 120);
      *long long v5 = *v6;
      *(_OWORD *)(a1 + 120) = v28;
    }
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v24 = *v6;
    long long v25 = *(_OWORD *)(a2 + 120);
    long long v26 = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(_OWORD *)(a1 + 120) = v25;
    *(_OWORD *)(a1 + 136) = v26;
    *long long v5 = v24;
  }
  return a1;
}

uint64_t assignWithTake for MakeAlertStorage(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_release();
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_release();
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_WORD *)(a1 + 96) = *(_WORD *)(a2 + 96);
  long long v6 = (_OWORD *)(a1 + 104);
  uint64_t v7 = (_OWORD *)(a2 + 104);
  if (*(void *)(a1 + 144))
  {
    uint64_t v8 = *(void *)(a2 + 144);
    if (v8)
    {
      if (*(void *)(a1 + 128))
      {
        uint64_t v9 = *(void *)(a2 + 128);
        if (v9)
        {
          char v10 = *(unsigned char *)(a2 + 120);
          uint64_t v11 = *(void *)(a1 + 104);
          uint64_t v12 = *(void *)(a1 + 112);
          char v13 = *(unsigned char *)(a1 + 120);
          *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
          *(unsigned char *)(a1 + 120) = v10;
          outlined consume of Text.Storage(v11, v12, v13);
          *(void *)(a1 + 128) = v9;
          swift_bridgeObjectRelease();
LABEL_10:
          *(void *)(a1 + 136) = *(void *)(a2 + 136);
          swift_release();
          *(void *)(a1 + 144) = v8;
          swift_release();
          *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
          return a1;
        }
        outlined destroy of Text(a1 + 104);
      }
      long long v15 = *(_OWORD *)(a2 + 120);
      *long long v6 = *v7;
      *(_OWORD *)(a1 + 120) = v15;
      goto LABEL_10;
    }
    outlined destroy of DialogSuppressionConfiguration(a1 + 104);
  }
  long long v14 = *(_OWORD *)(a2 + 120);
  *long long v6 = *v7;
  *(_OWORD *)(a1 + 120) = v14;
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  return a1;
}

uint64_t getEnumTagSinglePayload for MakeAlertStorage(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 153)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MakeAlertStorage(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 152) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 153) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 153) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AlertStorage.PreferenceKey()
{
  return &type metadata for AlertStorage.PreferenceKey;
}

uint64_t specialized static AlertStorage.PreferenceKey.reduce(value:nextValue:)(uint64_t *a1, void (*a2)(uint64_t *__return_ptr))
{
  a2(&v6);
  uint64_t v3 = v6;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v6 = *a1;
  *a1 = 0x8000000000000000;
  specialized _NativeDictionary.merge<A>(_:isUnique:uniquingKeysWith:)(v3, (uint64_t)specialized thunk for @escaping @callee_guaranteed (@in_guaranteed A, @in_guaranteed B) -> (@out A, @out B), 0, isUniquelyReferenced_nonNull_native, &v6);
  *a1 = v6;

  return swift_bridgeObjectRelease();
}

void type metadata accessor for (ViewIdentity, AlertStorage)()
{
  if (!lazy cache variable for type metadata for (ViewIdentity, AlertStorage))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (ViewIdentity, AlertStorage));
    }
  }
}

uint64_t sub_187DA5E7C()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  if (*(void *)(v0 + 160))
  {
    if (*(void *)(v0 + 144))
    {
      outlined consume of Text.Storage(*(void *)(v0 + 120), *(void *)(v0 + 128), *(unsigned char *)(v0 + 136));
      swift_bridgeObjectRelease();
    }
    swift_release();
    swift_release();
  }
  if (*(void *)(v0 + 176))
  {

    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }

  return swift_deallocObject();
}

void __swiftcall PlainWindowStyle.init()()
{
}

void PlainWindowStyle.configureWindow(_:)()
{
}

ValueMetadata *type metadata accessor for PlainWindowStyle()
{
  return &type metadata for PlainWindowStyle;
}

uint64_t specialized OptionSet<>.remove(_:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v4 = *v2;
  if (v4 >= 0x10)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    int v5 = v4 & result;
    if ((v4 & result) != 0) {
      uint64_t result = specialized SetAlgebra.subtract(_:)(result);
    }
    *a2 = v5;
    a2[1] = v5 == 0;
  }
  return result;
}

uint64_t specialized OptionSet.union(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, unsigned char *a3@<X8>)
{
  if (a2 >= 0x10u || (a2 | result) >= 0x10)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = a2 | result;
  }
  return result;
}

uint64_t specialized OptionSet.intersection(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, unsigned char *a3@<X8>)
{
  if (a2 >= 0x10u)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = a2 & result;
  }
  return result;
}

uint64_t specialized OptionSet.symmetricDifference(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, unsigned char *a3@<X8>)
{
  if (a2 >= 0x10u || (a2 ^ result) >= 0x10)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = a2 ^ result;
  }
  return result;
}

uint64_t specialized OptionSet<>.update(with:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v3 = *v2;
  if (v3 >= 0x10 || (v3 | result) >= 0x10)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *unint64_t v2 = v3 | result;
    unsigned int v4 = v3 & result;
    *a2 = v4;
    a2[1] = v4 == 0;
  }
  return result;
}

uint64_t specialized SetAlgebra.subtracting(_:)@<X0>(uint64_t result@<X0>, unsigned __int8 a2@<W1>, unsigned char *a3@<X8>)
{
  if (a2 >= 0x10u || (a2 ^ result) >= 0x10)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = (a2 ^ result) & a2;
  }
  return result;
}

uint64_t specialized SetAlgebra.isSubset(of:)(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a2 < 0x10u) {
    return (a2 & ~a1) == 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.isDisjoint(with:)(char a1, unsigned __int8 a2)
{
  if (a2 < 0x10u) {
    return (a2 & a1) == 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized OptionSet<>.contains(_:)(unsigned __int8 a1, unsigned __int8 a2)
{
  if (a1 < 0x10u) {
    return (a1 & ~a2) == 0;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

uint64_t specialized SetAlgebra.subtract(_:)(uint64_t result)
{
  unsigned int v2 = *v1;
  if (v2 >= 0x10 || (v2 ^ result) >= 0x10)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *uint64_t v1 = (v2 ^ result) & v2;
  }
  return result;
}

uint64_t SwipeGesture.Direction.rawValue.getter()
{
  return *v0;
}

uint64_t SwipeGesture.Direction.rawValue.setter(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

uint64_t (*SwipeGesture.Direction.rawValue.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

uint64_t SwipeGesture.Direction.init(rawValue:)@<X0>(uint64_t result@<X0>, unsigned char *a2@<X8>)
{
  if (result > 0xFu)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = result;
  }
  return result;
}

void static SwipeGesture.Direction.left.getter(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

void static SwipeGesture.Direction.right.getter(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

void static SwipeGesture.Direction.up.getter(unsigned char *a1@<X8>)
{
  *a1 = 4;
}

void static SwipeGesture.Direction.down.getter(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t one-time initialization function for horizontal(uint64_t a1)
{
  return one-time initialization function for horizontal(a1, byte_1ED412DD0, &static SwipeGesture.Direction.horizontal, &byte_1ED412DD0[1]);
}

void *static SwipeGesture.Direction.horizontal.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for horizontal, &static SwipeGesture.Direction.horizontal, a1);
}

uint64_t one-time initialization function for vertical(uint64_t a1)
{
  return one-time initialization function for horizontal(a1, byte_1ED412EA8, &static SwipeGesture.Direction.vertical, &byte_1ED412EA8[1]);
}

uint64_t one-time initialization function for horizontal(uint64_t a1, unsigned __int8 *a2, unsigned char *a3, unsigned __int8 *a4)
{
  unsigned int v4 = *a2;
  if (v4 >= 0x10 || (int v5 = *a4, (v5 & ~v4) != 0) && (v4 |= v5, v4 >= 0x10))
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a3 = v4;
  }
  return result;
}

void *static SwipeGesture.Direction.vertical.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for vertical, &static SwipeGesture.Direction.vertical, a1);
}

void *static SwipeGesture.Direction.all.getter@<X0>(unsigned char *a1@<X8>)
{
  return static SwipeGesture.Direction.horizontal.getter(&one-time initialization token for all, &static SwipeGesture.Direction.all, a1);
}

void *static SwipeGesture.Direction.horizontal.getter@<X0>(void *result@<X0>, unsigned char *a2@<X1>, unsigned char *a3@<X8>)
{
  if (*result != -1) {
    uint64_t result = (void *)swift_once();
  }
  *a3 = *a2;
  return result;
}

unsigned __int8 *protocol witness for OptionSet.init(rawValue:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *result@<X0>, unsigned char *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 0x10)
  {
    uint64_t result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

uint64_t protocol witness for SetAlgebra.union(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized OptionSet.union(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.intersection(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized OptionSet.intersection(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.symmetricDifference(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized OptionSet.symmetricDifference(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.insert(_:) in conformance SwipeGesture.Direction(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return specialized OptionSet<>.insert(_:)(a1, *a2);
}

uint64_t protocol witness for SetAlgebra.remove(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized OptionSet<>.remove(_:)(*a1, a2);
}

uint64_t protocol witness for SetAlgebra.update(with:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized OptionSet<>.update(with:)(*a1, a2);
}

unsigned __int8 *protocol witness for SetAlgebra.formUnion(_:) in conformance SwipeGesture.Direction(unsigned __int8 *result)
{
  unsigned int v2 = *v1 | *result;
  if (v2 >= 0x10)
  {
    uint64_t result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *uint64_t v1 = v2;
  }
  return result;
}

unsigned char *protocol witness for SetAlgebra.formIntersection(_:) in conformance SwipeGesture.Direction(unsigned char *result)
{
  unsigned int v2 = (*v1 & *result);
  if (v2 >= 0x10)
  {
    uint64_t result = (unsigned char *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *uint64_t v1 = v2;
  }
  return result;
}

unsigned __int8 *protocol witness for SetAlgebra.formSymmetricDifference(_:) in conformance SwipeGesture.Direction(unsigned __int8 *result)
{
  unsigned int v2 = *v1 ^ *result;
  if (v2 >= 0x10)
  {
    uint64_t result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *uint64_t v1 = v2;
  }
  return result;
}

uint64_t protocol witness for SetAlgebra.subtracting(_:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *a1@<X0>, unsigned char *a2@<X8>)
{
  return specialized SetAlgebra.subtracting(_:)(*a1, *v2, a2);
}

uint64_t protocol witness for SetAlgebra.isSubset(of:) in conformance SwipeGesture.Direction(unsigned __int8 *a1)
{
  return specialized SetAlgebra.isSubset(of:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isDisjoint(with:) in conformance SwipeGesture.Direction(char *a1)
{
  return specialized SetAlgebra.isDisjoint(with:)(*a1, *v1);
}

uint64_t protocol witness for SetAlgebra.isSuperset(of:) in conformance SwipeGesture.Direction(unsigned __int8 *a1)
{
  return specialized OptionSet<>.contains(_:)(*a1, *v1) & 1;
}

uint64_t protocol witness for SetAlgebra.subtract(_:) in conformance SwipeGesture.Direction(unsigned __int8 *a1)
{
  return specialized SetAlgebra.subtract(_:)(*a1);
}

unsigned __int8 *protocol witness for RawRepresentable.init(rawValue:) in conformance SwipeGesture.Direction@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  unsigned int v2 = *result;
  if (v2 >= 0x10)
  {
    uint64_t result = (unsigned __int8 *)_assertionFailure(_:_:file:line:flags:)();
    __break(1u);
  }
  else
  {
    *a2 = v2;
  }
  return result;
}

uint64_t (*SwipeGesture.Value.direction.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void SwipeGesture.allowedDirections.getter(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

unsigned char *SwipeGesture.allowedDirections.setter(unsigned char *result)
{
  *uint64_t v1 = *result;
  return result;
}

uint64_t (*SwipeGesture.allowedDirections.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

unsigned char *SwipeGesture.init(direction:)@<X0>(unsigned char *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t static SwipeGesture._makeGesture(gesture:inputs:)()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

unint64_t lazy protocol witness table accessor for type SwipeGesture and conformance SwipeGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture;
  if (!lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture;
  if (!lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture and conformance SwipeGesture);
  }
  return result;
}

double SwipeGesture.internalBody.getter@<D0>(uint64_t a1@<X8>)
{
  char v2 = *v1;
  *(_OWORD *)a1 = xmmword_1883A1C00;
  *(_OWORD *)(a1 + 16) = xmmword_1883A1C10;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1883A1C20;
  *(_OWORD *)(a1 + 48) = xmmword_1883A1C30;
  *(unsigned char *)(a1 + 64) = v2;
  *(void *)(a1 + 72) = 4;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

double protocol witness for PubliclyPrimitiveGesture.internalBody.getter in conformance SwipeGesture@<D0>(uint64_t a1@<X8>)
{
  char v2 = *v1;
  *(_OWORD *)a1 = xmmword_1883A1C00;
  *(_OWORD *)(a1 + 16) = xmmword_1883A1C10;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = xmmword_1883A1C20;
  *(_OWORD *)(a1 + 48) = xmmword_1883A1C30;
  *(unsigned char *)(a1 + 64) = v2;
  *(void *)(a1 + 72) = 4;
  *(unsigned char *)(a1 + 80) = 0;
  return result;
}

uint64_t protocol witness for static Gesture._makeGesture(gesture:inputs:) in conformance SwipeGesture()
{
  return static PubliclyPrimitiveGesture.makeGesture(gesture:inputs:)();
}

void protocol witness for Gesture.body.getter in conformance SwipeGesture()
{
}

uint64_t SpatialSwipeGesture.body.getter()
{
  long long v5 = v0[2];
  long long v6 = v0[3];
  char v7 = *((unsigned char *)v0 + 64);
  long long v3 = *v0;
  long long v4 = v0[1];
  type metadata accessor for EventListener<SpatialEvent>();
  lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<SpatialEvent>);
  Gesture.eventFilter<A>(forType:_:)();
  uint64_t v1 = swift_allocObject();
  *(_OWORD *)(v1 + 48) = v5;
  *(_OWORD *)(v1 + 64) = v6;
  *(unsigned char *)(v1 + 80) = v7;
  *(_OWORD *)(v1 + 16) = v3;
  *(_OWORD *)(v1 + 32) = v4;
  type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>();
  lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>);
  Gesture.dependency(_:)();
  swift_release();
  return swift_release();
}

uint64_t closure #2 in SpatialSwipeGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)(a2 + 64);
  char v5 = *(unsigned char *)(a2 + 72);
  long long v6 = a3[3];
  long long v16 = a3[2];
  long long v17 = v6;
  char v18 = *((unsigned char *)a3 + 64);
  long long v7 = a3[1];
  long long v14 = *a3;
  long long v15 = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v8;
  long long v9 = *(_OWORD *)(a2 + 48);
  void v11[2] = *(_OWORD *)(a2 + 32);
  char v11[3] = v9;
  uint64_t v12 = v4;
  char v13 = v5;
  return SpatialSwipeGesture.phase(state:event:)(a1, (uint64_t)v11, a4);
}

uint64_t SpatialSwipeGesture.phase(state:event:)@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result;
  uint64_t v5 = *(void *)a2;
  double v6 = *(double *)(a2 + 8);
  uint64_t v8 = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 24);
  uint64_t v10 = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  uint64_t v11 = *(void *)(a2 + 48);
  uint64_t v12 = *(void *)(a2 + 56);
  uint64_t v13 = *(void *)(a2 + 64);
  int v14 = *(unsigned __int8 *)(a2 + 72);
  long long v15 = v3[1];
  long long v55 = *v3;
  long long v56 = v15;
  long long v16 = v3[3];
  long long v57 = v3[2];
  long long v58 = v16;
  if ((v14 - 1) >= 2)
  {
    if (v14)
    {
      __int16 v22 = 0;
      goto LABEL_20;
    }
    if (!*((unsigned char *)v3 + 64)) {
      goto LABEL_19;
    }
  }
  else
  {
    if (*(unsigned char *)(result + 57)) {
      goto LABEL_19;
    }
    uint64_t v41 = a3;
    uint64_t v43 = v11;
    uint64_t v44 = v9;
    unsigned __int8 v39 = *((unsigned char *)v3 + 64);
    if (*(unsigned char *)(result + 24))
    {
      LOBYTE(v46) = v5;
      double v47 = v6;
      uint64_t v48 = v8;
      char v49 = v7;
      uint64_t v50 = v10;
      uint64_t v51 = v9;
      uint64_t v52 = v11;
      uint64_t v53 = v12;
      uint64_t v54 = v13;
      outlined copy of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v9, v11, v12, v13, v14);
      SpatialEvent.globalLocation.getter();
      double v18 = v17;
      double v20 = v19;
      double v21 = v6;
    }
    else
    {
      double v20 = *(double *)(result + 8);
      double v21 = *(double *)(result + 16);
      double v18 = *(double *)result;
      outlined copy of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v9, v11, v12, v13, v14);
    }
    *(double *)uint64_t v4 = v18;
    *(double *)(v4 + 8) = v20;
    *(double *)(v4 + 16) = v21;
    *(unsigned char *)(v4 + 24) = 0;
    double v23 = v21;
    double v24 = v18;
    double v25 = v20;
    if ((*(unsigned char *)(v4 + 56) & 1) == 0)
    {
      double v25 = *(double *)(v4 + 40);
      double v23 = *(double *)(v4 + 48);
      double v24 = *(double *)(v4 + 32);
    }
    *(double *)(v4 + 32) = v24;
    *(double *)(v4 + 40) = v25;
    *(double *)(v4 + 48) = v23;
    *(unsigned char *)(v4 + 56) = 0;
    double v26 = v6 - v21;
    if (v26 > 0.5)
    {
      double result = outlined consume of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v44, v43, v12, v13, v14);
      __int16 v22 = 0;
LABEL_16:
      LOBYTE(v14) = 3;
      a3 = v41;
      goto LABEL_20;
    }
    uint64_t v42 = v12;
    SpatialEvent.globalLocation.getter();
    double v28 = v27 - v18;
    SpatialEvent.globalLocation.getter();
    double v30 = v29 - v20;
    SpatialEvent.globalLocation.getter();
    LOBYTE(v46) = v5;
    double v32 = v31 - v24;
    double v47 = v6;
    uint64_t v48 = v8;
    char v49 = v7;
    uint64_t v50 = v10;
    uint64_t v51 = v44;
    uint64_t v52 = v43;
    uint64_t v53 = v12;
    uint64_t v54 = v13;
    SpatialEvent.globalLocation.getter();
    unsigned __int8 v45 = v39;
    char v40 = SwipeDetector.checkForSwipe(with:time:currentDelta:currentTimeChange:allowedDirections:state:)(&v46, &v45, v28, v30, v26, v32, v33 - v25, v6 - v23);
    __int16 v22 = v46;
    LOBYTE(v46) = v5;
    double v47 = v6;
    uint64_t v48 = v8;
    char v49 = v7;
    uint64_t v50 = v10;
    uint64_t v51 = v44;
    uint64_t v52 = v43;
    uint64_t v53 = v42;
    uint64_t v54 = v13;
    SpatialEvent.globalLocation.getter();
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    double result = outlined consume of GesturePhase<SpatialEvent>(v5, *(uint64_t *)&v6, v8, v7, v10, v44, v43, v42, v13, v14);
    *(void *)(v4 + 32) = v35;
    *(void *)(v4 + 40) = v37;
    *(double *)(v4 + 48) = v6;
    *(unsigned char *)(v4 + 56) = 0;
    if (v40)
    {
      __int16 v22 = 0;
      *(unsigned char *)(v4 + 57) = 1;
      goto LABEL_16;
    }
    if ((v38 & 1) == 0)
    {
      *(unsigned char *)(v4 + 58) = v22;
      LOBYTE(v14) = 2;
      a3 = v41;
      goto LABEL_20;
    }
    a3 = v41;
    if (v14 == 2)
    {
LABEL_19:
      __int16 v22 = 0;
      LOBYTE(v14) = 3;
      goto LABEL_20;
    }
  }
  LOBYTE(v14) = 0;
  __int16 v22 = *(unsigned __int8 *)(v4 + 58);
LABEL_20:
  *(_WORD *)a3 = v22;
  *(unsigned char *)(a3 + 2) = v14;
  return result;
}

void protocol witness for GestureStateProtocol.init() in conformance SpatialSwipeGesture.StateType(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 1;
  *(_WORD *)(a1 + 57) = 0;
}

uint64_t SwipeDetector.checkForSwipe(with:time:currentDelta:currentTimeChange:allowedDirections:state:)(__int16 *a1, unsigned __int8 *a2, double a3, double a4, double a5, double a6, double a7, double a8)
{
  unsigned int v15 = *a2;
  double v16 = 0.5;
  if (a5 <= 0.5) {
    double v16 = a5;
  }
  double v18 = SwipeDetector.movementRates(for:)(v16);
  double v20 = v19;
  double v22 = v21;
  double v23 = *(double *)(v8 + 32);
  if (one-time initialization token for horizontal == -1)
  {
    if (v15 < 0x10) {
      goto LABEL_5;
    }
LABEL_83:
    _assertionFailure(_:_:file:line:flags:)();
    __break(1u);
LABEL_84:
    double v38 = v17;
    swift_once();
    double v17 = v38;
    goto LABEL_13;
  }
  double v37 = v17;
  swift_once();
  double v17 = v37;
  if (v15 >= 0x10) {
    goto LABEL_83;
  }
LABEL_5:
  uint64_t v9 = &unk_1E902C000;
  int v24 = (static SwipeGesture.Direction.horizontal & v15);
  if (v24 == 1)
  {
    if (v23 < a3) {
      goto LABEL_18;
    }
  }
  else if (v24 == 2 && -v23 > a3)
  {
    goto LABEL_18;
  }
  if (one-time initialization token for vertical != -1) {
    goto LABEL_84;
  }
LABEL_13:
  int v26 = (static SwipeGesture.Direction.vertical & v15);
  if (v26 == 8)
  {
    if (-v23 > a4) {
      goto LABEL_18;
    }
  }
  else if (v26 == 4 && v23 < a4)
  {
    goto LABEL_18;
  }
  double v28 = 0.01;
  if (a8 > 0.01)
  {
    if ((v9[976] & v15) != 0)
    {
      double v29 = fabs(a3);
      double v30 = fabs(a4);
      if (v20 >= v29 && v22 >= v30)
      {
        if (v18 > v29 || v17 > v30)
        {
          if ((static SwipeGesture.Direction.vertical & v15) == 0
            || v20 < v30
            || v22 < v29)
          {
            goto LABEL_68;
          }
LABEL_51:
          if (v18 > v30 || v17 > v29) {
            goto LABEL_68;
          }
          goto LABEL_67;
        }
        double v28 = a8;
LABEL_74:
        if (*(double *)(v8 + 56) <= fabs(a6 / v28))
        {
          uint64_t result = 0;
          if (a3 >= 0.0) {
            __int16 v36 = 2;
          }
          else {
            __int16 v36 = 1;
          }
          goto LABEL_69;
        }
        if ((static SwipeGesture.Direction.vertical & v15) == 0) {
          goto LABEL_68;
        }
        double v30 = fabs(a4);
        if (v20 < v30) {
          goto LABEL_68;
        }
        double v29 = fabs(a3);
        a8 = v28;
        if (v22 < v29) {
          goto LABEL_68;
        }
        goto LABEL_51;
      }
      if ((static SwipeGesture.Direction.vertical & v15) != 0
        && v20 >= v30
        && v22 >= v29)
      {
        goto LABEL_51;
      }
    }
    else
    {
      if ((static SwipeGesture.Direction.vertical & v15) == 0) {
        goto LABEL_68;
      }
      double v30 = fabs(a4);
      double v29 = fabs(a3);
      if (v20 >= v30 && v22 >= v29) {
        goto LABEL_51;
      }
    }
LABEL_18:
    *a1 = 256;
    return 1;
  }
  if ((v9[976] & v15) != 0)
  {
    double v32 = fabs(a3);
    if (v20 >= v32)
    {
      double v33 = fabs(a4);
      if (v22 >= v33)
      {
        if (v18 <= v32 && v17 <= v33) {
          goto LABEL_74;
        }
        if ((static SwipeGesture.Direction.vertical & v15) == 0
          || v20 < v33
          || v22 < v32)
        {
          goto LABEL_68;
        }
        goto LABEL_64;
      }
      if ((static SwipeGesture.Direction.vertical & v15) == 0) {
        goto LABEL_18;
      }
    }
    else
    {
      if ((static SwipeGesture.Direction.vertical & v15) == 0) {
        goto LABEL_18;
      }
      double v33 = fabs(a4);
    }
    if (v20 < v33 || v22 < v32) {
      goto LABEL_18;
    }
  }
  else
  {
    if ((static SwipeGesture.Direction.vertical & v15) == 0) {
      goto LABEL_68;
    }
    double v33 = fabs(a4);
    double v32 = fabs(a3);
    if (v20 < v33 || v22 < v32) {
      goto LABEL_18;
    }
  }
LABEL_64:
  if (v18 > v33 || v17 > v32) {
    goto LABEL_68;
  }
  a8 = 0.01;
LABEL_67:
  if (*(double *)(v8 + 56) <= fabs(a7 / a8))
  {
    uint64_t result = 0;
    if (a4 >= 0.0) {
      __int16 v36 = 8;
    }
    else {
      __int16 v36 = 4;
    }
    goto LABEL_69;
  }
LABEL_68:
  uint64_t result = 0;
  __int16 v36 = 256;
LABEL_69:
  *a1 = v36;
  return result;
}

double SwipeDetector.movementRates(for:)(double a1)
{
  double v2 = *v1 * (1.0 - (1.0 - v1[5]) * a1);
  if (*v1 == 1.79769313e308) {
    return 1.79769313e308;
  }
  return v2;
}

void *static SwipeGesture.Direction.allCases.getter()
{
  return &outlined read-only object #0 of static SwipeGesture.Direction.allCases.getter;
}

uint64_t SwipeGesture.Direction.description.getter()
{
  int v1 = *v0;
  if (one-time initialization token for all != -1) {
    swift_once();
  }
  if (static SwipeGesture.Direction.all == v1) {
    return 1819042094;
  }
  if (one-time initialization token for vertical != -1) {
    swift_once();
  }
  if (static SwipeGesture.Direction.vertical == v1) {
    return 0x616369747265762ELL;
  }
  if (one-time initialization token for horizontal != -1) {
    swift_once();
  }
  if (static SwipeGesture.Direction.horizontal == v1) {
    return 0x6E6F7A69726F682ELL;
  }
  if (byte_1ED412E58 < 0x10u)
  {
    long long v3 = (char *)MEMORY[0x1E4FBC860];
    if ((byte_1ED412E58 & ~v1) == 0)
    {
      uint64_t v4 = qword_1ED412E00;
      if (qword_1ED412E00)
      {
        uint64_t v5 = *(void *)aLeft_3;
        swift_bridgeObjectRetain();
        long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, 1, 1, MEMORY[0x1E4FBC860]);
        unint64_t v6 = *((void *)v3 + 2);
        unint64_t v7 = *((void *)v3 + 3);
        unint64_t v8 = v6 + 1;
        if (v6 >= v7 >> 1)
        {
          uint64_t v34 = v3;
          unint64_t v35 = *((void *)v3 + 2);
          __int16 v36 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v7 > 1), v6 + 1, 1, v34);
          unint64_t v6 = v35;
          long long v3 = v36;
        }
        *((void *)v3 + 2) = v8;
        uint64_t v9 = &v3[16 * v6];
        *((void *)v9 + 4) = v5;
        *((void *)v9 + 5) = v4;
      }
    }
    if (byte_1ED412E59 <= 0xFu)
    {
      if ((byte_1ED412E59 & ~v1) == 0)
      {
        uint64_t v10 = qword_1ED412E10;
        if (qword_1ED412E10)
        {
          uint64_t v11 = *(void *)aRight_3;
          swift_bridgeObjectRetain();
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
          }
          unint64_t v12 = *((void *)v3 + 2);
          unint64_t v13 = *((void *)v3 + 3);
          unint64_t v14 = v12 + 1;
          if (v12 >= v13 >> 1)
          {
            double v37 = v3;
            unint64_t v38 = *((void *)v3 + 2);
            unsigned __int8 v39 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v13 > 1), v12 + 1, 1, v37);
            unint64_t v12 = v38;
            long long v3 = v39;
          }
          *((void *)v3 + 2) = v14;
          unsigned int v15 = &v3[16 * v12];
          *((void *)v15 + 4) = v11;
          *((void *)v15 + 5) = v10;
        }
      }
      if (byte_1ED412E5A <= 0xFu)
      {
        if ((byte_1ED412E5A & ~v1) == 0)
        {
          uint64_t v16 = qword_1ED412E20;
          if (qword_1ED412E20)
          {
            uint64_t v17 = qword_1ED412E18;
            swift_bridgeObjectRetain();
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
            }
            unint64_t v18 = *((void *)v3 + 2);
            unint64_t v19 = *((void *)v3 + 3);
            unint64_t v20 = v18 + 1;
            if (v18 >= v19 >> 1)
            {
              char v40 = v3;
              unint64_t v41 = *((void *)v3 + 2);
              uint64_t v42 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v19 > 1), v18 + 1, 1, v40);
              unint64_t v18 = v41;
              long long v3 = v42;
            }
            *((void *)v3 + 2) = v20;
            double v21 = &v3[16 * v18];
            *((void *)v21 + 4) = v17;
            *((void *)v21 + 5) = v16;
          }
        }
        if (byte_1ED412E5B <= 0xFu)
        {
          if ((byte_1ED412E5B & ~v1) == 0)
          {
            uint64_t v22 = qword_1ED412E30;
            if (qword_1ED412E30)
            {
              uint64_t v23 = *(void *)aDown_0;
              swift_bridgeObjectRetain();
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v3 + 2) + 1, 1, v3);
              }
              unint64_t v25 = *((void *)v3 + 2);
              unint64_t v24 = *((void *)v3 + 3);
              if (v25 >= v24 >> 1) {
                long long v3 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v24 > 1), v25 + 1, 1, v3);
              }
              *((void *)v3 + 2) = v25 + 1;
              int v26 = &v3[16 * v25];
              *((void *)v26 + 4) = v23;
              *((void *)v26 + 5) = v22;
            }
          }
          _sSSSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for String?, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB718]);
          swift_arrayDestroy();
          uint64_t v27 = *((void *)v3 + 2);
          if (v27)
          {
            if (v27 == 1)
            {
              uint64_t v2 = *((void *)v3 + 4);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
            }
            else
            {
              _sSSSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for [String], MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
              lazy protocol witness table accessor for type [String] and conformance [A]();
              uint64_t v28 = BidirectionalCollection<>.joined(separator:)();
              double v30 = v29;
              swift_bridgeObjectRelease();
              v31._uint64_t countAndFlagsBits = v28;
              v31._object = v30;
              String.append(_:)(v31);
              swift_bridgeObjectRelease();
              v32._uint64_t countAndFlagsBits = 93;
              v32._object = (void *)0xE100000000000000;
              String.append(_:)(v32);
              return 91;
            }
          }
          else
          {
            swift_bridgeObjectRelease();
            return 23899;
          }
          return v2;
        }
      }
    }
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)();
  __break(1u);
  return result;
}

unint64_t lazy protocol witness table accessor for type SwipeGesture.Direction and conformance SwipeGesture.Direction()
{
  unint64_t result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction;
  if (!lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SwipeGesture.Direction and conformance SwipeGesture.Direction);
  }
  return result;
}

uint64_t associated type witness table accessor for PubliclyPrimitiveGesture.InternalBody : Gesture in SwipeGesture()
{
  return swift_getOpaqueTypeConformance2();
}

_UNKNOWN **base witness table accessor for Gesture in SwipeGesture()
{
  return &protocol witness table for SwipeGesture;
}

ValueMetadata *type metadata accessor for SwipeGesture()
{
  return &type metadata for SwipeGesture;
}

ValueMetadata *type metadata accessor for SwipeGesture.Direction()
{
  return &type metadata for SwipeGesture.Direction;
}

ValueMetadata *type metadata accessor for SwipeGesture.Value()
{
  return &type metadata for SwipeGesture.Value;
}

uint64_t sub_187DA7EA8()
{
  return lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>);
}

uint64_t lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>)
  {
    _sSSSgMaTm_2(255, &lazy cache variable for type metadata for CategoryGesture<SwipeGesture.Value>, (uint64_t)&type metadata for SwipeGesture.Value, MEMORY[0x1E4F3FAC8]);
    lazy protocol witness table accessor for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>();
    lazy protocol witness table accessor for type SpatialSwipeGesture and conformance SpatialSwipeGesture();
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<CategoryGesture<SwipeGesture.Value>, SpatialSwipeGesture>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>;
  if (!lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>)
  {
    _sSSSgMaTm_2(255, &lazy cache variable for type metadata for CategoryGesture<SwipeGesture.Value>, (uint64_t)&type metadata for SwipeGesture.Value, MEMORY[0x1E4F3FAC8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type CategoryGesture<SwipeGesture.Value> and conformance CategoryGesture<A>);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type SpatialSwipeGesture and conformance SpatialSwipeGesture()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialSwipeGesture and conformance SpatialSwipeGesture;
  if (!lazy protocol witness table cache variable for type SpatialSwipeGesture and conformance SpatialSwipeGesture)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialSwipeGesture and conformance SpatialSwipeGesture);
  }
  return result;
}

void *type metadata accessor for SpatialSwipeGesture()
{
  return &unk_1ED42E240;
}

uint64_t associated type witness table accessor for Gesture.Body : Gesture in SpatialSwipeGesture()
{
  return swift_getOpaqueTypeConformance2();
}

void type metadata accessor for EventListener<SpatialEvent>()
{
  if (!lazy cache variable for type metadata for EventListener<SpatialEvent>)
  {
    unint64_t v0 = type metadata accessor for EventListener();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for EventListener<SpatialEvent>);
    }
  }
}

uint64_t sub_187DA8140()
{
  return swift_deallocObject();
}

uint64_t partial apply for closure #2 in SpatialSwipeGesture.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return closure #2 in SpatialSwipeGesture.body.getter(a1, a2, (long long *)(v3 + 16), a3);
}

void type metadata accessor for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>)
  {
    type metadata accessor for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>();
    type metadata accessor for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>();
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value> and conformance StateContainerGesture<A, B, C>, (void (*)(uint64_t))type metadata accessor for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>);
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>(&lazy protocol witness table cache variable for type ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>> and conformance ModifierGesture<A, B>, (void (*)(uint64_t))type metadata accessor for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>>);
    }
  }
}

void type metadata accessor for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>()
{
  if (!lazy cache variable for type metadata for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>)
  {
    lazy protocol witness table accessor for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType();
    unint64_t v0 = type metadata accessor for StateContainerGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType()
{
  unint64_t result = lazy protocol witness table cache variable for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType;
  if (!lazy protocol witness table cache variable for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SpatialSwipeGesture.StateType and conformance SpatialSwipeGesture.StateType);
  }
  return result;
}

void type metadata accessor for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>()
{
  if (!lazy cache variable for type metadata for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>)
  {
    _sSSSgMaTm_2(255, &lazy cache variable for type metadata for EventFilter<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3F4E8]);
    type metadata accessor for EventListener<SpatialEvent>();
    lazy protocol witness table accessor for type EventFilter<SpatialEvent> and conformance EventFilter<A>();
    lazy protocol witness table accessor for type ModifierGesture<StateContainerGesture<SpatialSwipeGesture.StateType, SpatialEvent, SwipeGesture.Value>, ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>> and conformance ModifierGesture<A, B>((unint64_t *)&lazy protocol witness table cache variable for type EventListener<SpatialEvent> and conformance EventListener<A>, (void (*)(uint64_t))type metadata accessor for EventListener<SpatialEvent>);
    unint64_t v0 = type metadata accessor for ModifierGesture();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for ModifierGesture<EventFilter<SpatialEvent>, EventListener<SpatialEvent>>);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EventFilter<SpatialEvent> and conformance EventFilter<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EventFilter<SpatialEvent> and conformance EventFilter<A>;
  if (!lazy protocol witness table cache variable for type EventFilter<SpatialEvent> and conformance EventFilter<A>)
  {
    _sSSSgMaTm_2(255, &lazy cache variable for type metadata for EventFilter<SpatialEvent>, MEMORY[0x1E4F3F638], MEMORY[0x1E4F3F4E8]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EventFilter<SpatialEvent> and conformance EventFilter<A>);
  }
  return result;
}

uint64_t outlined copy of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1) {
    return swift_retain();
  }
  if (!a10) {
    return outlined copy of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

uint64_t outlined consume of GesturePhase<SpatialEvent>(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  if (a10 == 2 || a10 == 1) {
    return swift_release();
  }
  if (!a10) {
    return outlined consume of HitTestableEvent?(result, a2, a3);
  }
  return result;
}

__n128 __swift_memcpy59_8(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 43) = *(_OWORD *)(a2 + 43);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for SpatialSwipeGesture.StateType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 59)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 57);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for SpatialSwipeGesture.StateType(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 58) = 0;
    *(_WORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 59) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 59) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 57) = a2 + 1;
    }
  }
  return result;
}

void *type metadata accessor for SpatialSwipeGesture.StateType()
{
  return &unk_1ED42E1B8;
}

void *type metadata accessor for SwipeDetector()
{
  return &unk_1ED415980;
}

uint64_t sub_187DA85B8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t Picker.init(selection:content:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v25 = a3;
  uint64_t v26 = a6;
  double v21 = a4;
  uint64_t v22 = a7;
  uint64_t v23 = a2;
  uint64_t v24 = a8;
  MEMORY[0x1F4188790](a1);
  unint64_t v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for Binding();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  unint64_t v18 = (char *)&v21 - v17;
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))((char *)&v21 - v17, a1, v14, v16);
  v21(v19);
  Picker.init(selection:label:content:)((uint64_t)v18, (uint64_t)v13, v23, v25, a5, v26, v24, v22, a9, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, v14);
}

uint64_t Picker.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[6];
  uint64_t v6 = type metadata accessor for PickerStyleConfiguration();
  MEMORY[0x1F4188790](v6 - 8);
  uint64_t v63 = (uint64_t)&v45 - v7;
  uint64_t v57 = type metadata accessor for ResolvedPicker();
  uint64_t v66 = *(void *)(v57 - 8);
  MEMORY[0x1F4188790](v57);
  uint64_t v9 = (char *)&v45 - v8;
  uint64_t v10 = type metadata accessor for PickerStyleConfiguration.Label();
  uint64_t v61 = v10;
  uint64_t v70 = a1[2];
  uint64_t v11 = v70;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = a1[5];
  uint64_t v88 = v10;
  uint64_t v89 = v11;
  uint64_t v90 = WitnessTable;
  uint64_t v91 = v12;
  type metadata accessor for StaticSourceWriter();
  uint64_t v52 = type metadata accessor for ModifiedContent();
  uint64_t v65 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52);
  uint64_t v69 = (char *)&v45 - v13;
  uint64_t v14 = type metadata accessor for PickerStyleConfiguration.Content();
  uint64_t v58 = v14;
  uint64_t v15 = a1[4];
  uint64_t v59 = swift_getWitnessTable();
  uint64_t v47 = a1[7];
  uint64_t v88 = v14;
  uint64_t v89 = v15;
  uint64_t v90 = v59;
  uint64_t v91 = v47;
  type metadata accessor for StaticSourceWriter();
  uint64_t v50 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v50 - 8);
  MEMORY[0x1F4188790](v50);
  uint64_t v51 = (char *)&v45 - v16;
  uint64_t v17 = v5;
  uint64_t v18 = type metadata accessor for PickerStyleConfiguration.CurrentValueLabel();
  uint64_t v56 = v18;
  uint64_t v55 = swift_getWitnessTable();
  uint64_t v88 = v18;
  uint64_t v89 = MEMORY[0x1E4F41618];
  uint64_t v90 = v55;
  uint64_t v91 = MEMORY[0x1E4F41610];
  type metadata accessor for OptionalSourceWriter();
  uint64_t v48 = type metadata accessor for ModifiedContent();
  uint64_t v60 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48);
  char v49 = (char *)&v45 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v53 = (uint64_t)&v45 - v21;
  MEMORY[0x1F4188790](v22);
  uint64_t v54 = (char *)&v45 - v23;
  uint64_t v24 = v2;
  uint64_t v25 = swift_bridgeObjectRetain();
  uint64_t v26 = v63;
  uint64_t v68 = v4;
  PickerStyleConfiguration.init(selection:)(v25, v63);
  ResolvedPicker.init(configuration:)(v26, (uint64_t)v9);
  uint64_t v27 = v70;
  uint64_t v75 = v70;
  uint64_t v76 = v4;
  uint64_t v28 = v15;
  uint64_t v77 = v15;
  uint64_t v78 = v12;
  uint64_t v79 = v5;
  uint64_t v29 = v47;
  uint64_t v80 = v47;
  uint64_t v81 = v2;
  uint64_t v46 = v12;
  uint64_t v30 = v57;
  View.viewAlias<A, B>(_:_:)(v61, (void (*)(double))partial apply for closure #1 in Picker.body.getter, (uint64_t)v74, v57, v61, v70, (uint64_t)&protocol witness table for ResolvedPicker<A>);
  (*(void (**)(char *, uint64_t))(v66 + 8))(v9, v30);
  _OWORD v72[2] = v27;
  v72[3] = v68;
  v72[4] = v28;
  v72[5] = v12;
  v72[6] = v17;
  v72[7] = v29;
  uint64_t v73 = v2;
  char v86 = &protocol witness table for ResolvedPicker<A>;
  long long v87 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v31 = v52;
  uint64_t v32 = swift_getWitnessTable();
  double v33 = v51;
  uint64_t v34 = v31;
  uint64_t v35 = v31;
  __int16 v36 = v69;
  View.viewAlias<A, B>(_:_:)(v58, (void (*)(double))partial apply for closure #2 in Picker.body.getter, (uint64_t)v72, v34, v58, v28, v32);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v36, v35);
  v71[2] = v70;
  v71[3] = v68;
  v71[4] = v28;
  v71[5] = v46;
  v71[6] = v17;
  v71[7] = v29;
  v71[8] = v24;
  uint64_t v84 = v32;
  uint64_t v85 = &protocol witness table for StaticSourceWriter<A, B>;
  uint64_t v37 = v50;
  uint64_t v38 = swift_getWitnessTable();
  unsigned __int8 v39 = v49;
  View.optionalViewAlias<A, B>(_:_:)(v56, (void (*)(double))partial apply for closure #3 in Picker.body.getter, (uint64_t)v71, v37, v56, MEMORY[0x1E4F41618], v38, v55, MEMORY[0x1E4F41610]);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v33, v37);
  uint64_t v82 = v38;
  char v83 = &protocol witness table for OptionalSourceWriter<A, B>;
  uint64_t v40 = v48;
  swift_getWitnessTable();
  uint64_t v41 = v53;
  ModifiedContent<>.accessibility()(v40, v53);
  uint64_t v42 = *(void (**)(char *, uint64_t))(v60 + 8);
  v42(v39, v40);
  uint64_t v43 = v54;
  static ViewBuilder.buildExpression<A>(_:)(v41);
  v42((char *)v41, v40);
  static ViewBuilder.buildExpression<A>(_:)(v43);
  return ((uint64_t (*)(char *, uint64_t))v42)(v43, v40);
}

uint64_t closure #1 in Picker.body.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15[0] = v7;
  v15[1] = v8;
  v15[2] = v9;
  v15[3] = v10;
  float64x2_t v15[4] = v11;
  v15[5] = v12;
  uint64_t v13 = type metadata accessor for Picker();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v13 + 68));
  static ViewBuilder.buildExpression<A>(_:)(v6);
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, a2);
}

uint64_t partial apply for closure #1 in Picker.body.getter()
{
  return partial apply for closure #1 in Picker.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #1 in Picker.body.getter);
}

uint64_t closure #2 in Picker.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17[0] = v9;
  v17[1] = v10;
  _OWORD v17[2] = v11;
  v17[3] = v12;
  v17[4] = v13;
  v17[5] = v14;
  uint64_t v15 = type metadata accessor for Picker();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v15 + 72));
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
}

uint64_t partial apply for closure #2 in Picker.body.getter()
{
  return partial apply for closure #1 in Picker.body.getter((uint64_t (*)(void, void, void, void, void, void, void))closure #2 in Picker.body.getter);
}

uint64_t partial apply for closure #1 in Picker.body.getter(uint64_t (*a1)(void, void, void, void, void, void, void))
{
  return a1(v1[8], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

uint64_t partial apply for closure #3 in Picker.body.getter@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 64);
  *a1 = *(void *)(v2 + *(int *)(type metadata accessor for Picker() + 76));
  return swift_retain();
}

uint64_t Picker.init<A>(selection:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t *a7@<X8>)
{
  uint64_t v11 = (int *)type metadata accessor for Picker();
  *(uint64_t *)((char *)a7 + v11[19]) = 0;
  type metadata accessor for Binding();
  uint64_t v12 = Sequence.compactMap<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a6 - 8) + 8))(a1, a6);
  *a7 = v12;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32))((char *)a7 + v11[18], a2, a5);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))((char *)a7 + v11[17], a3, a4);
}

uint64_t Picker.init<A>(sources:selection:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v50 = a6;
  uint64_t v51 = a5;
  uint64_t v48 = a4;
  char v49 = a3;
  uint64_t v52 = a9;
  uint64_t v53 = a2;
  uint64_t v54 = a12;
  uint64_t v55 = a1;
  uint64_t v43 = a11;
  uint64_t v44 = a13;
  uint64_t v39 = a7;
  uint64_t v41 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v47 = (char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v17;
  MEMORY[0x1F4188790](v18);
  uint64_t v45 = (char *)&v38 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = *(void *)(*(void *)(v20 + 8) + 8);
  uint64_t v21 = *(void *)(v46 + 8);
  uint64_t v22 = type metadata accessor for LazySequence();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v38 - v24;
  uint64_t v42 = type metadata accessor for LazyMapSequence();
  double v26 = MEMORY[0x1F4188790](v42);
  uint64_t v28 = (char *)&v38 - v27;
  MEMORY[0x18C115A70](a10, v21, v26);
  uint64_t v29 = (void *)swift_allocObject();
  v29[2] = a7;
  v29[3] = a8;
  uint64_t v30 = v43;
  uint64_t v31 = v44;
  v29[4] = a10;
  v29[5] = v30;
  v29[6] = v54;
  v29[7] = v31;
  v29[8] = v41;
  v29[9] = v53;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  uint64_t v33 = (uint64_t)v45;
  uint64_t v34 = v49(v32);
  uint64_t v35 = (uint64_t)v47;
  v51(v34);
  uint64_t v56 = v46;
  uint64_t v36 = v42;
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v28, v33, v35, v39, v40, v36, v52);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(v55, a10);
}

uint64_t sub_187DA96A4()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in Picker.init<A>(sources:selection:content:label:)()
{
  return swift_getAtKeyPath();
}

uint64_t Picker.init(selection:label:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  uint64_t v30 = a8;
  uint64_t v31 = a7;
  v26[0] = a6;
  v26[2] = a4;
  uint64_t v27 = a3;
  uint64_t v28 = a2;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v29 = a9;
  v26[1] = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Binding();
  uint64_t v19 = *(void *)(v18 - 8);
  double v20 = MEMORY[0x1F4188790](v18);
  uint64_t v22 = (char *)v26 - v21;
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v19 + 16))((char *)v26 - v21, a1, v18, v20);
  v27(v23);
  uint64_t v24 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v28, a5);
  Picker.init(selection:content:label:)((uint64_t)v22, (uint64_t)v17, (uint64_t)v14, a5, v26[0], v30);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v24, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, v18);
}

uint64_t Picker<>.init(_:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  double v26 = a6;
  uint64_t v27 = a7;
  uint64_t v24 = a8;
  uint64_t v25 = a9;
  uint64_t v23 = a10;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  double v20 = (char *)&v22 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v22 - v19, a5, v16, v18);
  uint64_t v28 = a1;
  uint64_t v29 = a2;
  char v30 = a3;
  uint64_t v31 = a4;
  Picker.init(selection:content:label:)((uint64_t)v20, v26, v27, (void (*)(uint64_t))partial apply for closure #1 in Section<>.init<A>(_:isExpanded:content:), MEMORY[0x1E4F41420], v25, v24, MEMORY[0x1E4F41418], v23, a11);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(a5, v16);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t Picker<>.init<A>(_:selection:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X7>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9, long long a10, uint64_t a11)
{
  char v30 = a7;
  uint64_t v31 = a6;
  uint64_t v27 = a3;
  uint64_t v26[3] = a2;
  long long v29 = a10;
  uint64_t v28 = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = *(void *)(a9 - 8);
  double v17 = MEMORY[0x1F4188790](v16);
  uint64_t v19 = (char *)v26 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v15 + 16))(v19, v20, a9, v17);
  a5(v21);
  v32[0] = Text.init(_:tableName:bundle:comment:)();
  v32[1] = v22;
  char v33 = v23 & 1;
  uint64_t v34 = v24;
  Picker.init<A>(selection:content:label:)((uint64_t)v19, (uint64_t)v14, (uint64_t)v32, MEMORY[0x1E4F41420], a8, a9, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a4, a9);
}

uint64_t Picker<>.init<A>(_:sources:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v40 = a8;
  uint64_t v41 = a7;
  uint64_t v38 = a5;
  uint64_t v45 = a4;
  uint64_t v46 = a9;
  int v44 = a3;
  uint64_t v42 = a1;
  uint64_t v43 = a2;
  uint64_t v35 = a13;
  uint64_t v47 = a10;
  uint64_t v48 = a12;
  uint64_t v34 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v37 = (char *)&v34 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v39 = *(void *)(*(void *)(v16 + 8) + 8);
  uint64_t v17 = *(void *)(v39 + 8);
  uint64_t v18 = type metadata accessor for LazySequence();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v21 = (char *)&v34 - v20;
  uint64_t v36 = type metadata accessor for LazyMapSequence();
  double v22 = MEMORY[0x1F4188790](v36);
  uint64_t v24 = (char *)&v34 - v23;
  MEMORY[0x18C115A70](a11, v17, v22);
  uint64_t v25 = (void *)swift_allocObject();
  v25[2] = v47;
  _OWORD v25[3] = a11;
  uint64_t v26 = v35;
  v25[4] = v48;
  v25[5] = v26;
  v25[6] = v34;
  v25[7] = a6;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  uint64_t v28 = (uint64_t)v37;
  v41(v27);
  v50[0] = Text.init(_:tableName:bundle:comment:)();
  v50[1] = v29;
  char v51 = v30 & 1;
  uint64_t v52 = v31;
  uint64_t v49 = v39;
  uint64_t v32 = v36;
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v24, v28, (uint64_t)v50, MEMORY[0x1E4F41420], v47, v32, v46);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a11 - 8) + 8))(v38, a11);
}

uint64_t sub_187DAA044()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Picker<>.init<A>(_:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9)
{
  uint64_t v26 = a7;
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = a5;
  uint64_t v25 = a8;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v24 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = type metadata accessor for Binding();
  uint64_t v16 = *(void *)(v15 - 8);
  double v17 = MEMORY[0x1F4188790](v15);
  uint64_t v19 = (char *)&v24 - v18;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))((char *)&v24 - v18, a2, v15, v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a6);
  v30[0] = Text.init<A>(_:)();
  v30[1] = v20;
  char v31 = v21 & 1;
  uint64_t v32 = v22;
  Picker.init(selection:label:content:)((uint64_t)v19, (uint64_t)v30, v27, v28, MEMORY[0x1E4F41420], v29, MEMORY[0x1E4F41418], v25, v26, v24);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(a2, v15);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(a1, a6);
}

uint64_t Picker<>.init<A, B>(_:selection:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X7>, uint64_t *a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v38 = a7;
  uint64_t v39 = a3;
  uint64_t v32 = a2;
  uint64_t v33 = a1;
  uint64_t v37 = a8;
  uint64_t v35 = a4;
  uint64_t v36 = a9;
  uint64_t v12 = *(void *)(a6 - 8);
  uint64_t v34 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)&v32 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  double v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v32 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = v24;
  uint64_t v26 = (*(uint64_t (**)(char *, double))(v19 + 16))(v23, v21);
  v32(v26);
  uint64_t v27 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, v33, a6);
  v40[0] = Text.init<A>(_:)();
  v40[1] = v28;
  char v41 = v29 & 1;
  uint64_t v42 = v30;
  Picker.init<A>(selection:content:label:)((uint64_t)v23, (uint64_t)v17, (uint64_t)v40, MEMORY[0x1E4F41420], v35, a5, v38);
  (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v25, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 8))(v27, a6);
}

uint64_t Picker<>.init<A, B>(_:sources:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v48 = a8;
  uint64_t v49 = a7;
  uint64_t v55 = a5;
  uint64_t v56 = a4;
  uint64_t v57 = a1;
  uint64_t v58 = a9;
  uint64_t v59 = a11;
  uint64_t v60 = a10;
  uint64_t v61 = a2;
  uint64_t v54 = *(void *)(a8 - 8);
  uint64_t v47 = a13;
  uint64_t v45 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v52 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v46 = v17;
  MEMORY[0x1F4188790](v18);
  char v51 = (char *)&v44 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(*(void *)(v20 + 8) + 8);
  uint64_t v21 = *(void *)(v53 + 8);
  uint64_t v22 = type metadata accessor for LazySequence();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v44 - v24;
  uint64_t v50 = type metadata accessor for LazyMapSequence();
  double v26 = MEMORY[0x1F4188790](v50);
  uint64_t v28 = (char *)&v44 - v27;
  MEMORY[0x18C115A70](a7, v21, v26);
  char v29 = (void *)swift_allocObject();
  v29[2] = a6;
  v29[3] = a7;
  uint64_t v31 = v47;
  uint64_t v30 = v48;
  uint64_t v32 = v60;
  v29[4] = v48;
  v29[5] = v32;
  uint64_t v33 = v45;
  v29[6] = v59;
  v29[7] = v33;
  v29[8] = v31;
  v29[9] = a3;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  uint64_t v34 = (*(uint64_t (**)(char *, uint64_t))(v23 + 8))(v25, v22);
  uint64_t v35 = (uint64_t)v51;
  v56(v34);
  uint64_t v36 = v54;
  uint64_t v37 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v52, v57, v30);
  uint64_t v38 = v30;
  v63[0] = Text.init<A>(_:)();
  v63[1] = v39;
  char v64 = v40 & 1;
  uint64_t v65 = v41;
  uint64_t v62 = v53;
  uint64_t v42 = v50;
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v28, v35, (uint64_t)v63, MEMORY[0x1E4F41420], v46, v42, v58);
  swift_release();
  (*(void (**)(uint64_t))(*(void *)(v49 - 8) + 8))(v61);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 8))(v37, v38);
}

uint64_t Picker<>.init(_:image:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v32 = a9;
  uint64_t v29 = a13;
  uint64_t v30 = a12;
  uint64_t v31 = a11;
  uint64_t v19 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v29 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v29 - v22, a6, v19, v21);
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  char v37 = a3;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  type metadata accessor for Label<Text, Image>();
  uint64_t v25 = v24;
  unint64_t v26 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init(selection:content:label:)((uint64_t)v23, v33, v34, (void (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), v25, v31, v32, v26, v30, v29);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(a6, v19);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(a5, v27);
}

uint64_t Picker<>.init<A>(_:image:sources:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v35 = a8;
  uint64_t v38 = a6;
  uint64_t v37 = a5;
  uint64_t v36 = a4;
  int v34 = a3;
  uint64_t v33 = a2;
  uint64_t v32 = a1;
  uint64_t v39 = a9;
  uint64_t v30 = a15;
  uint64_t v17 = *a7;
  uint64_t v18 = *(void *)(a12 - 8);
  uint64_t v31 = a11;
  double v19 = MEMORY[0x1F4188790](a1);
  double v21 = (char *)&v30 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v18 + 16))(v21, v22, a12, v19);
  uint64_t v47 = *(void *)(*(void *)(v17 + *MEMORY[0x1E4FBC5F0]) + 16);
  uint64_t v48 = a11;
  uint64_t v49 = a12;
  uint64_t v50 = a13;
  uint64_t v23 = v30;
  uint64_t v51 = a14;
  uint64_t v52 = v30;
  uint64_t v53 = v35;
  uint64_t v54 = a10;
  uint64_t v41 = v32;
  uint64_t v42 = a2;
  char v43 = v34;
  uint64_t v24 = v37;
  uint64_t v44 = v36;
  uint64_t v45 = v37;
  type metadata accessor for Label<Text, Image>();
  uint64_t v26 = v25;
  unint64_t v27 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A>(sources:selection:content:label:)((uint64_t)v21, (uint64_t)a7, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A>(_:image:sources:selection:content:), (uint64_t)v46, (void (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), (uint64_t)v40, v26, v31, v39, a12, v27, a13, a14, v23);
  (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v38, a12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v28 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v24, v28);
}

uint64_t partial apply for closure #1 in Picker<>.init(_:image:selection:content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in Picker<>.init(_:image:selection:content:)(*(void *)(v1 + 16), *(unsigned __int8 *)(v1 + 32), *(void *)(v1 + 48), a1);
}

uint64_t Picker<>.init<A>(_:image:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v29 = a8;
  uint64_t v31 = a5;
  uint64_t v30 = a4;
  uint64_t v33 = a3;
  uint64_t v32 = a2;
  uint64_t v34 = a1;
  uint64_t v35 = a9;
  uint64_t v16 = type metadata accessor for Binding();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v28 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))((char *)&v28 - v19, a3, v16, v18);
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v21 = v29;
  uint64_t v47 = v29;
  uint64_t v48 = a10;
  uint64_t v49 = a11;
  uint64_t v50 = a12;
  uint64_t v51 = v30;
  uint64_t v52 = v31;
  uint64_t v36 = a6;
  uint64_t v37 = a7;
  uint64_t v38 = v29;
  uint64_t v39 = a10;
  uint64_t v40 = a11;
  uint64_t v41 = a12;
  uint64_t v42 = a1;
  uint64_t v22 = v32;
  uint64_t v43 = v32;
  type metadata accessor for Label<Text, Image>();
  uint64_t v24 = v23;
  unint64_t v25 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init(selection:content:label:)((uint64_t)v20, (void (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A>(_:image:sources:selection:content:), (uint64_t)v44, (void (*)(uint64_t))partial apply for closure #2 in Picker<>.init<A>(_:image:selection:content:), v24, a7, v35, v25, a10, a11);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v33, v16);
  uint64_t v26 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v26 - 8) + 8))(v22, v26);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8))(v34, v21);
}

uint64_t closure #1 in Picker<>.init<A>(_:image:sources:selection:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  v12(v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a4);
}

uint64_t partial apply for closure #1 in Picker<>.init<A>(_:image:sources:selection:content:)()
{
  return closure #1 in Picker<>.init<A>(_:image:sources:selection:content:)(v0[8], v0[9], v0[2], v0[3]);
}

__n128 closure #2 in Picker<>.init<A>(_:image:selection:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

double partial apply for closure #2 in Picker<>.init<A>(_:image:selection:content:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #2 in Picker<>.init<A>(_:image:selection:content:)(v1[8], v1[9], v1[4], a1).n128_u64[0];
  return result;
}

uint64_t Picker<>.init<A, B>(_:image:sources:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v35 = a7;
  uint64_t v31 = a6;
  uint64_t v30 = a5;
  uint64_t v33 = a3;
  uint64_t v32 = a2;
  uint64_t v36 = a1;
  uint64_t v34 = a9;
  uint64_t v16 = *a4;
  uint64_t v17 = *(void *)(a8 - 8);
  double v18 = MEMORY[0x1F4188790](a1);
  char v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v17 + 16))(v20, v21, v22, v18);
  uint64_t v49 = *(void *)(*(void *)(v16 + *MEMORY[0x1E4FBC5F0]) + 16);
  uint64_t v50 = v35;
  uint64_t v51 = a8;
  uint64_t v52 = a10;
  uint64_t v53 = a11;
  uint64_t v54 = a12;
  uint64_t v55 = a13;
  uint64_t v56 = a14;
  uint64_t v57 = v30;
  uint64_t v58 = v31;
  uint64_t v38 = v49;
  uint64_t v39 = v35;
  uint64_t v40 = a8;
  uint64_t v41 = a10;
  uint64_t v42 = a11;
  uint64_t v43 = a12;
  uint64_t v44 = a13;
  uint64_t v45 = a14;
  uint64_t v23 = v32;
  uint64_t v46 = v36;
  uint64_t v47 = v32;
  type metadata accessor for Label<Text, Image>();
  uint64_t v25 = v24;
  unint64_t v26 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A>(sources:selection:content:label:)((uint64_t)v20, (uint64_t)a4, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:), (uint64_t)v48, (void (*)(uint64_t))partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:), (uint64_t)v37, v25, v35, v34, a8, v26, a11, a12, a13);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v33, a8);
  uint64_t v27 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v27 - 8) + 8))(v23, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(v36, a10);
}

uint64_t closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  v12(v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  double v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a4);
}

uint64_t partial apply for closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:)()
{
  return closure #1 in Picker<>.init<A, B>(_:image:sources:selection:content:)(v0[10], v0[11], v0[2], v0[3]);
}

__n128 closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)()
{
  return partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:));
}

uint64_t Picker.init<A>(selection:content:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v36 = a4;
  uint64_t v37 = a6;
  uint64_t v34 = a2;
  uint64_t v35 = a5;
  v33[0] = a1;
  uint64_t v39 = a8;
  v33[2] = a11;
  v33[3] = a3;
  uint64_t v38 = a9;
  v33[1] = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  char v17 = (char *)v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = v18;
  uint64_t v41 = v19;
  uint64_t v42 = v20;
  uint64_t v43 = v21;
  uint64_t v22 = type metadata accessor for PickerBuilder.Content();
  MEMORY[0x1F4188790](v22);
  uint64_t v24 = (char *)v33 - v23;
  uint64_t v25 = type metadata accessor for Binding();
  uint64_t v26 = *(void *)(v25 - 8);
  double v27 = MEMORY[0x1F4188790](v25);
  uint64_t v29 = (char *)v33 - v28;
  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v26 + 16))((char *)v33 - v28, a1, v25, v27);
  v34(v30);
  uint64_t v31 = PickerBuilder.Content.init(_:)((uint64_t)v17, a7, (uint64_t)v24);
  v36(v31);
  swift_getWitnessTable();
  Picker.init(selection:content:label:)((uint64_t)v29, (uint64_t)v24, (uint64_t)v14, v37, v22, v39);
  return (*(uint64_t (**)(void, uint64_t))(v26 + 8))(v33[0], v25);
}

uint64_t Picker.init<A, B>(selection:content:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  v35[0] = a1;
  v35[1] = a7;
  uint64_t v40 = a6;
  uint64_t v41 = a9;
  uint64_t v37 = a5;
  uint64_t v38 = a4;
  v35[3] = a3;
  uint64_t v36 = a2;
  uint64_t v39 = a14;
  uint64_t v42 = a11;
  _OWORD v35[2] = a13;
  MEMORY[0x1F4188790](a1);
  char v17 = (char *)v35 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v35 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v43 = v21;
  uint64_t v44 = v22;
  uint64_t v45 = a12;
  uint64_t v46 = v23;
  uint64_t v24 = type metadata accessor for PickerBuilder.Content();
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v35 - v25;
  uint64_t v27 = *(void *)(a10 - 8);
  double v29 = MEMORY[0x1F4188790](v28);
  uint64_t v31 = (char *)v35 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v27 + 16))(v31, a1, a10, v29);
  v36(v32);
  uint64_t v33 = PickerBuilder.Content.init(_:)((uint64_t)v20, a8, (uint64_t)v26);
  v38(v33);
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v31, (uint64_t)v26, (uint64_t)v17, v40, v24, a10, v41);
  return (*(uint64_t (**)(void, uint64_t))(v27 + 8))(v35[0], a10);
}

uint64_t Picker.init<A, B>(selection:content:label:footer:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v51 = a4;
  uint64_t v52 = a8;
  uint64_t v48 = a7;
  uint64_t v49 = a6;
  uint64_t v50 = a5;
  uint64_t v46 = a3;
  uint64_t v47 = a2;
  uint64_t v54 = a9;
  uint64_t v43 = a15;
  uint64_t v44 = a16;
  v41[0] = a1;
  v41[1] = a14;
  uint64_t v42 = a11;
  uint64_t v53 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v45 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)v41 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v41 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = a10;
  uint64_t v56 = v24;
  uint64_t v57 = a12;
  uint64_t v58 = v25;
  uint64_t v59 = v27;
  uint64_t v60 = v26;
  uint64_t v28 = type metadata accessor for PickerBuilder.ContentWithFooter();
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)v41 - v29;
  uint64_t v31 = type metadata accessor for Binding();
  uint64_t v32 = *(void *)(v31 - 8);
  double v33 = MEMORY[0x1F4188790](v31);
  uint64_t v35 = (char *)v41 - v34;
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v32 + 16))((char *)v41 - v34, a1, v31, v33);
  uint64_t v37 = v47(v36);
  v49(v37);
  uint64_t v38 = PickerBuilder.ContentWithFooter.init(content:footer:)((uint64_t)v23, (uint64_t)v20, v42, a12, (uint64_t)v30);
  uint64_t v39 = (uint64_t)v45;
  v51(v38);
  swift_getWitnessTable();
  Picker.init(selection:content:label:)((uint64_t)v35, (uint64_t)v30, v39, v52, v28, v54);
  return (*(uint64_t (**)(void, uint64_t))(v32 + 8))(v41[0], v31);
}

uint64_t Picker.init<A, B, C>(selection:content:label:footer:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v57 = a8;
  uint64_t v52 = a7;
  uint64_t v53 = a6;
  uint64_t v54 = a5;
  uint64_t v55 = a4;
  uint64_t v50 = a3;
  uint64_t v51 = a2;
  uint64_t v44 = a1;
  uint64_t v58 = a9;
  uint64_t v56 = a18;
  uint64_t v47 = a16;
  uint64_t v48 = a17;
  uint64_t v59 = a14;
  uint64_t v45 = a10;
  uint64_t v46 = a15;
  MEMORY[0x1F4188790](a1);
  uint64_t v49 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v43 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v23);
  uint64_t v25 = (char *)&v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v60 = v26;
  uint64_t v61 = a11;
  uint64_t v62 = a12;
  uint64_t v63 = v27;
  uint64_t v64 = v29;
  uint64_t v65 = v28;
  uint64_t v30 = type metadata accessor for PickerBuilder.ContentWithFooter();
  MEMORY[0x1F4188790](v30);
  uint64_t v32 = (char *)&v43 - v31;
  uint64_t v33 = *(void *)(a13 - 8);
  double v35 = MEMORY[0x1F4188790](v34);
  uint64_t v37 = (char *)&v43 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v33 + 16))(v37, a1, a13, v35);
  uint64_t v39 = v51(v38);
  v53(v39);
  uint64_t v40 = PickerBuilder.ContentWithFooter.init(content:footer:)((uint64_t)v25, (uint64_t)v22, a11, a12, (uint64_t)v32);
  uint64_t v41 = (uint64_t)v49;
  v55(v40);
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v37, (uint64_t)v32, v41, v57, v30, a13, v58);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v33 + 8))(v44, a13);
}

uint64_t Picker<>.init<A, B>(_:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10)
{
  v38[0] = a7;
  uint64_t v41 = a4;
  uint64_t v39 = a2;
  uint64_t v45 = a1;
  uint64_t v46 = a8;
  uint64_t v42 = *(void *)(a6 - 8);
  uint64_t v43 = a6;
  uint64_t v44 = a10;
  v38[1] = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v14 = (char *)v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v47 = v18;
  uint64_t v48 = v19;
  uint64_t v49 = v20;
  uint64_t v50 = v21;
  uint64_t v40 = type metadata accessor for PickerBuilder.Content();
  MEMORY[0x1F4188790](v40);
  uint64_t v23 = (char *)v38 - v22;
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  double v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)v38 - v27;
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v25 + 16))((char *)v38 - v27, a2, v24, v26);
  a3(v29);
  PickerBuilder.Content.init(_:)((uint64_t)v17, a5, (uint64_t)v23);
  uint64_t v31 = v42;
  uint64_t v30 = v43;
  uint64_t v32 = v45;
  (*(void (**)(char *, uint64_t, uint64_t))(v42 + 16))(v14, v45, v43);
  uint64_t v47 = Text.init<A>(_:)();
  uint64_t v48 = v33;
  LOBYTE(v49) = v34 & 1;
  uint64_t v50 = v35;
  uint64_t v36 = v40;
  swift_getWitnessTable();
  Picker.init(selection:content:label:)((uint64_t)v28, (uint64_t)v23, (uint64_t)&v47, MEMORY[0x1E4F41420], v36, v46);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v39, v24);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v32, v30);
}

uint64_t Picker<>.init<A, B, C>(_:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v45 = a3;
  uint64_t v46 = a7;
  v41[1] = a5;
  uint64_t v43 = a2;
  uint64_t v44 = a4;
  uint64_t v50 = a9;
  uint64_t v49 = a13;
  uint64_t v47 = a1;
  uint64_t v48 = a12;
  uint64_t v16 = *(void *)(a7 - 8);
  void v41[2] = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v41 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = v22;
  uint64_t v52 = v23;
  uint64_t v53 = a10;
  uint64_t v54 = v24;
  uint64_t v25 = type metadata accessor for PickerBuilder.Content();
  MEMORY[0x1F4188790](v25);
  uint64_t v27 = (char *)v41 - v26;
  uint64_t v42 = a8;
  uint64_t v28 = *(void *)(a8 - 8);
  double v30 = MEMORY[0x1F4188790](v29);
  uint64_t v32 = (char *)v41 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, double))(v28 + 16))(v32, a2, v30);
  v45(v33);
  PickerBuilder.Content.init(_:)((uint64_t)v21, a6, (uint64_t)v27);
  uint64_t v34 = v46;
  uint64_t v35 = v47;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v47, v46);
  uint64_t v51 = Text.init<A>(_:)();
  uint64_t v52 = v36;
  LOBYTE(v53) = v37 & 1;
  uint64_t v54 = v38;
  swift_getWitnessTable();
  uint64_t v39 = v42;
  Picker.init<A>(selection:content:label:)((uint64_t)v32, (uint64_t)v27, (uint64_t)&v51, MEMORY[0x1E4F41420], v25, v42, v50);
  (*(void (**)(uint64_t, uint64_t))(v28 + 8))(v43, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v35, v34);
}

uint64_t Picker<>.init<A, B>(_:selection:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v31 = a8;
  uint64_t v32 = a5;
  uint64_t v33 = a7;
  uint64_t v34 = a6;
  int v37 = a3;
  uint64_t v35 = a1;
  uint64_t v36 = a2;
  uint64_t v40 = a9;
  uint64_t v38 = a4;
  uint64_t v39 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v41 = v17;
  uint64_t v42 = a10;
  uint64_t v43 = a12;
  uint64_t v44 = a13;
  uint64_t v18 = type metadata accessor for PickerBuilder.Content();
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = *(void *)(a11 - 8);
  double v23 = MEMORY[0x1F4188790](v22);
  uint64_t v25 = (char *)&v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v21 + 16))(v25, a5, a11, v23);
  v34(v26);
  PickerBuilder.Content.init(_:)((uint64_t)v16, a10, (uint64_t)v20);
  uint64_t v41 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v42 = v27;
  LOBYTE(v43) = v28 & 1;
  uint64_t v44 = v29;
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v25, (uint64_t)v20, (uint64_t)&v41, MEMORY[0x1E4F41420], v18, a11, v40);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(v32, a11);
}

uint64_t Picker<>.init<A, B, C>(_:selection:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  uint64_t v44 = a7;
  uint64_t v45 = a2;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  uint64_t v48 = a3;
  uint64_t v49 = a4;
  uint64_t v56 = a8;
  uint64_t v54 = a1;
  uint64_t v55 = a13;
  v43[1] = a14;
  uint64_t v53 = a9;
  uint64_t v50 = *(void *)(a9 - 8);
  v43[0] = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v47 = (char *)v43 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)v43 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v43 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v57 = v22;
  uint64_t v58 = v23;
  uint64_t v59 = a10;
  uint64_t v60 = v24;
  uint64_t v61 = a12;
  uint64_t v62 = v25;
  uint64_t v46 = type metadata accessor for PickerBuilder.ContentWithFooter();
  MEMORY[0x1F4188790](v46);
  uint64_t v27 = (char *)v43 - v26;
  uint64_t v28 = type metadata accessor for Binding();
  uint64_t v29 = *(void *)(v28 - 8);
  double v30 = MEMORY[0x1F4188790](v28);
  uint64_t v32 = (char *)v43 - v31;
  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v29 + 16))((char *)v43 - v31, a2, v28, v30);
  uint64_t v34 = v48(v33);
  v51(v34);
  PickerBuilder.ContentWithFooter.init(content:footer:)((uint64_t)v21, (uint64_t)v18, v44, a10, (uint64_t)v27);
  uint64_t v35 = v50;
  uint64_t v37 = v53;
  uint64_t v36 = v54;
  (*(void (**)(char *, uint64_t, uint64_t))(v50 + 16))(v47, v54, v53);
  uint64_t v57 = Text.init<A>(_:)();
  uint64_t v58 = v38;
  LOBYTE(v59) = v39 & 1;
  uint64_t v60 = v40;
  uint64_t v41 = v46;
  swift_getWitnessTable();
  Picker.init(selection:content:label:)((uint64_t)v32, (uint64_t)v27, (uint64_t)&v57, MEMORY[0x1E4F41420], v41, v56);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v45, v28);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v35 + 8))(v36, v37);
}

uint64_t Picker<>.init<A, B, C, D>(_:selection:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v56 = a6;
  uint64_t v57 = a5;
  uint64_t v53 = a4;
  uint64_t v54 = a3;
  uint64_t v52 = a2;
  uint64_t v62 = a9;
  uint64_t v61 = a17;
  v50[4] = a16;
  uint64_t v59 = a1;
  uint64_t v60 = a15;
  void v50[2] = a7;
  v50[3] = a14;
  uint64_t v58 = a10;
  uint64_t v55 = *(void *)(a10 - 8);
  v50[1] = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v24);
  uint64_t v26 = (char *)v50 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v63 = v27;
  uint64_t v64 = v28;
  uint64_t v65 = a11;
  uint64_t v66 = v29;
  uint64_t v67 = v31;
  uint64_t v68 = v30;
  uint64_t v32 = type metadata accessor for PickerBuilder.ContentWithFooter();
  MEMORY[0x1F4188790](v32);
  uint64_t v34 = (char *)v50 - v33;
  uint64_t v51 = a12;
  uint64_t v35 = *(void *)(a12 - 8);
  double v37 = MEMORY[0x1F4188790](v36);
  char v39 = (char *)v50 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, double))(v35 + 16))(v39, a2, v37);
  uint64_t v41 = v54(v40);
  v57(v41);
  PickerBuilder.ContentWithFooter.init(content:footer:)((uint64_t)v26, (uint64_t)v23, a8, a11, (uint64_t)v34);
  uint64_t v42 = v55;
  uint64_t v44 = v58;
  uint64_t v43 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v55 + 16))(v20, v59, v58);
  uint64_t v63 = Text.init<A>(_:)();
  uint64_t v64 = v45;
  LOBYTE(v65) = v46 & 1;
  uint64_t v66 = v47;
  swift_getWitnessTable();
  uint64_t v48 = v51;
  Picker.init<A>(selection:content:label:)((uint64_t)v39, (uint64_t)v34, (uint64_t)&v63, MEMORY[0x1E4F41420], v32, v51, v62);
  (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v52, v48);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
}

uint64_t Picker<>.init<A, B>(_:selection:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v44 = a6;
  uint64_t v45 = a8;
  uint64_t v43 = a7;
  uint64_t v49 = a4;
  uint64_t v50 = a9;
  int v48 = a3;
  uint64_t v46 = a1;
  uint64_t v47 = a2;
  v39[2] = a16;
  uint64_t v40 = a5;
  v39[0] = a14;
  v39[1] = a15;
  uint64_t v41 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v39 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v51 = a11;
  uint64_t v52 = a12;
  uint64_t v53 = a13;
  uint64_t v54 = v22;
  uint64_t v55 = v24;
  uint64_t v56 = v23;
  uint64_t v42 = type metadata accessor for PickerBuilder.ContentWithFooter();
  MEMORY[0x1F4188790](v42);
  uint64_t v26 = (char *)v39 - v25;
  uint64_t v27 = type metadata accessor for Binding();
  uint64_t v28 = *(void *)(v27 - 8);
  double v29 = MEMORY[0x1F4188790](v27);
  uint64_t v31 = (char *)v39 - v30;
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v28 + 16))((char *)v39 - v30, a5, v27, v29);
  uint64_t v33 = v44(v32);
  v45(v33);
  PickerBuilder.ContentWithFooter.init(content:footer:)((uint64_t)v21, (uint64_t)v18, a12, a13, (uint64_t)v26);
  uint64_t v51 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v52 = v34;
  LOBYTE(v53) = v35 & 1;
  uint64_t v54 = v36;
  uint64_t v37 = v42;
  swift_getWitnessTable();
  Picker.init(selection:content:label:)((uint64_t)v31, (uint64_t)v26, (uint64_t)&v51, MEMORY[0x1E4F41420], v37, v50);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v40, v27);
}

uint64_t Picker<>.init<A, B, C>(_:selection:content:footer:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, void (*a8)(uint64_t)@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v45 = a6;
  uint64_t v46 = a8;
  uint64_t v43 = a5;
  uint64_t v44 = a7;
  int v49 = a3;
  uint64_t v47 = a1;
  uint64_t v48 = a2;
  uint64_t v52 = a9;
  uint64_t v50 = a4;
  uint64_t v51 = a18;
  v42[3] = a16;
  v42[4] = a17;
  v42[1] = a15;
  v42[5] = a10;
  _DWORD v42[2] = a11;
  MEMORY[0x1F4188790](a1);
  uint64_t v20 = (char *)v42 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)v42 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = v24;
  uint64_t v54 = a12;
  uint64_t v55 = a13;
  uint64_t v56 = v25;
  uint64_t v57 = v27;
  uint64_t v58 = v26;
  uint64_t v28 = type metadata accessor for PickerBuilder.ContentWithFooter();
  MEMORY[0x1F4188790](v28);
  uint64_t v30 = (char *)v42 - v29;
  uint64_t v31 = *(void *)(a14 - 8);
  double v33 = MEMORY[0x1F4188790](v32);
  char v35 = (char *)v42 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v31 + 16))(v35, a5, a14, v33);
  uint64_t v37 = v45(v36);
  v46(v37);
  PickerBuilder.ContentWithFooter.init(content:footer:)((uint64_t)v23, (uint64_t)v20, a12, a13, (uint64_t)v30);
  uint64_t v53 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v54 = v38;
  LOBYTE(v55) = v39 & 1;
  uint64_t v56 = v40;
  swift_getWitnessTable();
  Picker.init<A>(selection:content:label:)((uint64_t)v35, (uint64_t)v30, (uint64_t)&v53, MEMORY[0x1E4F41420], v28, a14, v52);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 8))(v43, a14);
}

uint64_t Picker.init<A>(selection:content:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v63 = a4;
  uint64_t v53 = a2;
  uint64_t v65 = a1;
  uint64_t v66 = a9;
  uint64_t v60 = a10;
  uint64_t v61 = a8;
  uint64_t v59 = a11;
  uint64_t v17 = *(void *)(a8 - 8);
  uint64_t v57 = a3;
  uint64_t v58 = v17;
  uint64_t v62 = a13;
  uint64_t v64 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v56 = (char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = *(void *)(v19 - 8);
  uint64_t v20 = v52;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v50 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v54 = *(void *)(v24 - 8);
  uint64_t v25 = v54;
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v50 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v55 = type metadata accessor for Binding();
  uint64_t v29 = *(void *)(v55 - 8);
  double v30 = MEMORY[0x1F4188790](v55);
  uint64_t v32 = (char *)&v50 - v31;
  (*(void (**)(char *, uint64_t, double))(v29 + 16))((char *)&v50 - v31, v65, v30);
  double v33 = *(void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v51 = a7;
  v33(v28, a2, a7);
  uint64_t v34 = v57;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v57, a5);
  uint64_t v35 = (uint64_t)v32;
  uint64_t v36 = (uint64_t)v28;
  uint64_t v37 = (uint64_t)v23;
  uint64_t v38 = a5;
  uint64_t v39 = a6;
  uint64_t v40 = v59;
  uint64_t v41 = v60;
  Picker.init(selection:content:label:)(v35, v36, v37, a5, a7, v66);
  uint64_t v42 = v58;
  uint64_t v43 = v63;
  uint64_t v44 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 16))(v56, v63, v61);
  uint64_t v45 = AnyView.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v43, v44);
  (*(void (**)(uint64_t, uint64_t))(v52 + 8))(v34, v38);
  uint64_t v46 = v51;
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v51);
  (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v65, v55);
  uint64_t v67 = v38;
  uint64_t v68 = v39;
  uint64_t v69 = v46;
  uint64_t v70 = v41;
  uint64_t v71 = v40;
  uint64_t v72 = v64;
  uint64_t v47 = *(int *)(type metadata accessor for Picker() + 76);
  uint64_t v48 = v66;
  uint64_t result = swift_release();
  *(uint64_t *)((char *)v48 + v47) = v45;
  return result;
}

uint64_t Picker.init<A, B>(selection:content:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v63 = a6;
  uint64_t v64 = a4;
  uint64_t v55 = a5;
  uint64_t v52 = a3;
  uint64_t v66 = a2;
  uint64_t v67 = a9;
  uint64_t v56 = a1;
  uint64_t v65 = a12;
  uint64_t v54 = a13;
  uint64_t v60 = a11;
  uint64_t v61 = a10;
  uint64_t v59 = *(void *)(a10 - 8);
  uint64_t v62 = a15;
  uint64_t v57 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v58 = (char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(v19 - 8);
  uint64_t v20 = v53;
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v51 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = *(void *)(v24 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v28 = (char *)&v51 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v30 = *(void *)(v29 - 8);
  double v32 = MEMORY[0x1F4188790](v31);
  uint64_t v34 = (char *)&v51 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = *(void (**)(char *, double))(v30 + 16);
  uint64_t v51 = v36;
  v35(v34, v32);
  (*(void (**)(char *, uint64_t, uint64_t))(v25 + 16))(v28, v66, a7);
  uint64_t v37 = a3;
  uint64_t v38 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v20 + 16))(v23, v37, v55);
  uint64_t v39 = (uint64_t)v34;
  uint64_t v40 = (uint64_t)v28;
  uint64_t v41 = (uint64_t)v23;
  uint64_t v42 = v63;
  uint64_t v43 = a7;
  uint64_t v44 = v60;
  Picker.init<A>(selection:content:label:)(v39, v40, v41, v38, a7, a8, v67);
  uint64_t v45 = v59;
  uint64_t v46 = v64;
  uint64_t v47 = v61;
  (*(void (**)(char *, uint64_t, uint64_t))(v59 + 16))(v58, v64, v61);
  uint64_t v62 = AnyView.init<A>(_:)();
  (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v46, v47);
  (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v52, v38);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v66, v43);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v56, v51);
  uint64_t v68 = v38;
  uint64_t v69 = v42;
  uint64_t v70 = v43;
  uint64_t v71 = v44;
  uint64_t v72 = v65;
  uint64_t v73 = v54;
  uint64_t v48 = *(int *)(type metadata accessor for Picker() + 76);
  int v49 = v67;
  uint64_t result = swift_release();
  *(uint64_t *)((char *)v49 + v48) = v62;
  return result;
}

uint64_t Picker.init<A>(selection:content:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, long long a13, uint64_t a14, uint64_t a15)
{
  uint64_t v34 = a8;
  uint64_t v35 = a3;
  uint64_t v42 = a7;
  uint64_t v43 = a6;
  uint64_t v37 = a5;
  uint64_t v38 = a4;
  uint64_t v36 = a2;
  uint64_t v44 = a9;
  long long v41 = a13;
  uint64_t v39 = a15;
  uint64_t v40 = a14;
  uint64_t v45 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v33 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v21);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v24 = type metadata accessor for Binding();
  uint64_t v25 = *(void *)(v24 - 8);
  double v26 = MEMORY[0x1F4188790](v24);
  uint64_t v28 = (char *)&v33 - v27;
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v25 + 16))((char *)&v33 - v27, a1, v24, v26);
  uint64_t v30 = v36(v29);
  uint64_t v31 = v38(v30);
  v43(v31);
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v28, (uint64_t)v23, (uint64_t)v20, (uint64_t)v17, v34, a10, a11, v45, v44, v41, *((uint64_t *)&v41 + 1), v40, v39);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v25 + 8))(a1, v24);
}

uint64_t Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)@<X0>(uint64_t a1@<X0>, void *a2@<X1>, uint64_t (*a3)(uint64_t)@<X2>, uint64_t a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v67 = a8;
  uint64_t v68 = a7;
  uint64_t v65 = a6;
  uint64_t v66 = a5;
  uint64_t v63 = a4;
  uint64_t v64 = a3;
  uint64_t v69 = a9;
  uint64_t v70 = a2;
  uint64_t v60 = a18;
  uint64_t v58 = a15;
  uint64_t v72 = a14;
  uint64_t v73 = a1;
  uint64_t v54 = a12;
  uint64_t v71 = a13;
  uint64_t v18 = *a2;
  uint64_t v56 = a16;
  uint64_t v51 = a17;
  MEMORY[0x1F4188790](a1);
  uint64_t v62 = (char *)&v50 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = a10;
  MEMORY[0x1F4188790](v20);
  uint64_t v61 = (char *)&v50 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a11;
  MEMORY[0x1F4188790](v22);
  uint64_t v57 = (char *)&v50 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v59 = *(void *)(*(void *)(v24 + 8) + 8);
  uint64_t v25 = *(void *)(v59 + 8);
  uint64_t v26 = type metadata accessor for LazySequence();
  uint64_t v27 = *(void *)(v26 - 8);
  MEMORY[0x1F4188790](v26);
  uint64_t v29 = (char *)&v50 - v28;
  uint64_t v30 = *(void *)(*MEMORY[0x1E4FBC5F0] + v18 + 8);
  uint64_t v55 = type metadata accessor for LazyMapSequence();
  double v31 = MEMORY[0x1F4188790](v55);
  uint64_t v33 = (char *)&v50 - v32;
  MEMORY[0x18C115A70](a12, v25, v31);
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = a10;
  v34[3] = a11;
  uint64_t v35 = v71;
  v34[4] = a12;
  v34[5] = v35;
  uint64_t v36 = v58;
  v34[6] = v72;
  v34[7] = v36;
  uint64_t v37 = v56;
  uint64_t v38 = v51;
  v34[8] = v56;
  v34[9] = v38;
  uint64_t v39 = v60;
  _OWORD v34[10] = v60;
  v34[11] = v70;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v29, v26);
  uint64_t v41 = (uint64_t)v57;
  uint64_t v42 = v64(v40);
  uint64_t v43 = (uint64_t)v61;
  uint64_t v44 = v66(v42);
  uint64_t v45 = (uint64_t)v62;
  v68(v44);
  uint64_t v46 = *(void *)(v30 + 16);
  uint64_t v74 = v59;
  uint64_t v47 = v55;
  uint64_t WitnessTable = swift_getWitnessTable();
  Picker.init<A, B>(selection:content:label:currentValueLabel:)((uint64_t)v33, v41, v43, v45, v52, v46, v53, v47, v69, v71, v72, v36, v37, WitnessTable, v39);
  swift_release();
  return (*(uint64_t (**)(uint64_t))(*(void *)(v54 - 8) + 8))(v73);
}

uint64_t partial apply for closure #1 in Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)()
{
  return swift_getAtKeyPath();
}

uint64_t Picker<>.init<A>(_:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, void (*a8)(void)@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, long long a14, uint64_t a15)
{
  uint64_t v40 = a8;
  uint64_t v41 = a9;
  uint64_t v31 = a7;
  uint64_t v32 = a6;
  uint64_t v36 = a4;
  int v35 = a3;
  uint64_t v33 = a1;
  uint64_t v34 = a2;
  long long v39 = a14;
  uint64_t v38 = a15;
  uint64_t v37 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Binding();
  uint64_t v22 = *(void *)(v21 - 8);
  double v23 = MEMORY[0x1F4188790](v21);
  uint64_t v25 = (char *)&v31 - v24;
  uint64_t v26 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v22 + 16))((char *)&v31 - v24, a5, v21, v23);
  v32(v26);
  v42[0] = Text.init(_:tableName:bundle:comment:)();
  v42[1] = v27;
  char v43 = v28 & 1;
  uint64_t v44 = v29;
  v40(v42[0]);
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v25, (uint64_t)v20, (uint64_t)v42, (uint64_t)v17, MEMORY[0x1E4F41420], a11, a12, a13, v41, MEMORY[0x1E4F41418], v39, *((uint64_t *)&v39 + 1), v38);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(a5, v21);
}

uint64_t Picker<>.init<A, B>(_:sources:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, void (*a10)(void), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v55 = a8;
  uint64_t v56 = a7;
  uint64_t v67 = a5;
  int v59 = a3;
  uint64_t v57 = a1;
  uint64_t v58 = a2;
  uint64_t v63 = a9;
  uint64_t v62 = a11;
  uint64_t v60 = a4;
  uint64_t v61 = a10;
  uint64_t v50 = a18;
  uint64_t v65 = a14;
  uint64_t v66 = a15;
  uint64_t v19 = *a6;
  uint64_t v64 = a16;
  uint64_t v48 = a17;
  MEMORY[0x1F4188790](a1);
  uint64_t v54 = (char *)&v47 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v49 = a12;
  MEMORY[0x1F4188790](v21);
  uint64_t v51 = (char *)&v47 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = *(void *)(*(void *)(v23 + 8) + 8);
  uint64_t v24 = *(void *)(v53 + 8);
  uint64_t v25 = type metadata accessor for LazySequence();
  uint64_t v26 = *(void *)(v25 - 8);
  MEMORY[0x1F4188790](v25);
  char v28 = (char *)&v47 - v27;
  uint64_t v29 = *(void *)(*MEMORY[0x1E4FBC5F0] + v19 + 8);
  uint64_t v52 = type metadata accessor for LazyMapSequence();
  double v30 = MEMORY[0x1F4188790](v52);
  uint64_t v32 = (char *)&v47 - v31;
  MEMORY[0x18C115A70](a13, v24, v30);
  uint64_t v33 = (void *)swift_allocObject();
  v33[2] = a12;
  v33[3] = a13;
  uint64_t v34 = v66;
  void v33[4] = v65;
  v33[5] = v34;
  uint64_t v35 = v48;
  v33[6] = v64;
  v33[7] = v35;
  uint64_t v36 = v50;
  v33[8] = v50;
  v33[9] = a6;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t))(v26 + 8))(v28, v25);
  uint64_t v38 = (uint64_t)v51;
  v56(v37);
  v69[0] = Text.init(_:tableName:bundle:comment:)();
  v69[1] = v39;
  char v70 = v40 & 1;
  uint64_t v71 = v41;
  uint64_t v42 = (uint64_t)v54;
  v61();
  uint64_t v43 = *(void *)(v29 + 16);
  uint64_t v68 = v53;
  uint64_t v44 = v52;
  uint64_t WitnessTable = swift_getWitnessTable();
  Picker.init<A, B>(selection:content:label:currentValueLabel:)((uint64_t)v32, v38, (uint64_t)v69, v42, MEMORY[0x1E4F41420], v43, v49, v44, v63, v65, MEMORY[0x1E4F41418], v66, v64, WitnessTable, v36);
  swift_release();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(a13 - 8) + 8))(v67, a13);
}

uint64_t Picker<>.init<A, B>(_:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void (*a3)(uint64_t)@<X2>, void (*a4)(void)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t *a8@<X8>, uint64_t a9, uint64_t a10, long long a11, uint64_t a12, uint64_t a13)
{
  uint64_t v39 = a1;
  uint64_t v40 = a7;
  uint64_t v36 = a6;
  uint64_t v37 = a3;
  uint64_t v43 = a5;
  uint64_t v44 = a4;
  uint64_t v35 = a2;
  uint64_t v46 = a8;
  long long v42 = a11;
  uint64_t v45 = a10;
  uint64_t v41 = a13;
  uint64_t v38 = a12;
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = *(void *)(a9 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v19 = (char *)&v34 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v22 = (char *)&v34 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Binding();
  uint64_t v24 = *(void *)(v23 - 8);
  double v25 = MEMORY[0x1F4188790](v23);
  uint64_t v27 = (char *)&v34 - v26;
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v24 + 16))((char *)&v34 - v26, a2, v23, v25);
  v37(v28);
  uint64_t v29 = v39;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v19, v39, a9);
  v47[0] = Text.init<A>(_:)();
  v47[1] = v30;
  char v48 = v31 & 1;
  uint64_t v49 = v32;
  v44();
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v27, (uint64_t)v22, (uint64_t)v47, (uint64_t)v15, MEMORY[0x1E4F41420], v36, v40, v45, v46, MEMORY[0x1E4F41418], v42, *((uint64_t *)&v42 + 1), v41);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v35, v23);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v29, a9);
}

uint64_t Picker<>.init<A, B, C>(_:sources:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(void)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  uint64_t v69 = a7;
  char v70 = a6;
  uint64_t v66 = a5;
  uint64_t v67 = a4;
  uint64_t v68 = a1;
  uint64_t v71 = a9;
  uint64_t v60 = a17;
  uint64_t v61 = a2;
  uint64_t v59 = a16;
  uint64_t v74 = a14;
  uint64_t v75 = a13;
  uint64_t v72 = a3;
  uint64_t v73 = a12;
  uint64_t v18 = *a3;
  uint64_t v54 = a15;
  MEMORY[0x1F4188790](a1);
  uint64_t v65 = (char *)&v52 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v53 = a11;
  uint64_t v63 = *(void *)(a11 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v62 = (char *)&v52 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v56 = v22;
  MEMORY[0x1F4188790](v23);
  uint64_t v57 = (char *)&v52 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v64 = *(void *)(*(void *)(v25 + 8) + 8);
  uint64_t v26 = *(void *)(v64 + 8);
  uint64_t v27 = type metadata accessor for LazySequence();
  uint64_t v28 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27);
  uint64_t v30 = (char *)&v52 - v29;
  uint64_t v31 = *(void *)(*MEMORY[0x1E4FBC5F0] + v18 + 8);
  uint64_t v58 = type metadata accessor for LazyMapSequence();
  double v32 = MEMORY[0x1F4188790](v58);
  uint64_t v55 = (uint64_t)&v52 - v33;
  MEMORY[0x18C115A70](a10, v26, v32);
  uint64_t v34 = (void *)swift_allocObject();
  v34[2] = a8;
  v34[3] = a10;
  uint64_t v35 = v73;
  v34[4] = a11;
  v34[5] = v35;
  uint64_t v36 = v74;
  v34[6] = v75;
  v34[7] = v36;
  uint64_t v37 = v59;
  v34[8] = v54;
  v34[9] = v37;
  uint64_t v38 = v60;
  _OWORD v34[10] = v60;
  v34[11] = v72;
  swift_retain();
  swift_getWitnessTable();
  LazySequenceProtocol.map<A>(_:)();
  swift_release();
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v30, v27);
  uint64_t v40 = (uint64_t)v57;
  v67(v39);
  uint64_t v41 = v63;
  uint64_t v42 = v68;
  uint64_t v43 = v53;
  (*(void (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v68, v53);
  v77[0] = Text.init<A>(_:)();
  v77[1] = v44;
  char v78 = v45 & 1;
  uint64_t v79 = v46;
  uint64_t v47 = (uint64_t)v65;
  v70();
  uint64_t v48 = *(void *)(v31 + 16);
  uint64_t v76 = v64;
  uint64_t v49 = v58;
  uint64_t WitnessTable = swift_getWitnessTable();
  Picker.init<A, B>(selection:content:label:currentValueLabel:)(v55, v40, (uint64_t)v77, v47, MEMORY[0x1E4F41420], v48, v56, v49, v71, v73, MEMORY[0x1E4F41418], v75, v74, WitnessTable, v38);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(a10 - 8) + 8))(v61, a10);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 8))(v42, v43);
}

uint64_t sub_187DAF6A8()
{
  swift_release();

  return swift_deallocObject();
}

uint64_t Picker<>.init<A>(_:image:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, void (*a10)(uint64_t), uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, long long a15, uint64_t a16)
{
  uint64_t v41 = a7;
  uint64_t v42 = a8;
  uint64_t v38 = a9;
  uint64_t v39 = a11;
  uint64_t v40 = a10;
  long long v35 = a15;
  uint64_t v34 = a16;
  uint64_t v36 = a13;
  uint64_t v37 = a14;
  uint64_t v22 = type metadata accessor for Binding();
  uint64_t v23 = *(void *)(v22 - 8);
  double v24 = MEMORY[0x1F4188790](v22);
  uint64_t v26 = (char *)&v33 - v25;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))((char *)&v33 - v25, a6, v22, v24);
  uint64_t v44 = a1;
  uint64_t v45 = a2;
  char v46 = a3;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  type metadata accessor for Label<Text, Image>();
  uint64_t v28 = v27;
  unint64_t v29 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  *((void *)&v32 + 1) = v35;
  *(void *)&long long v32 = v29;
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v26, v41, v42, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), (uint64_t)v43, v40, v39, v28, v38, a12, v36, v37, v32, *((uint64_t *)&v35 + 1), v34);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a6, v22);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v30 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v30 - 8) + 8))(a5, v30);
}

uint64_t Picker<>.init<A, B>(_:image:sources:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, void *a7@<X6>, uint64_t (*a8)(uint64_t)@<X7>, uint64_t *a9@<X8>, uint64_t a10, void (*a11)(uint64_t), uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, long long a16, uint64_t a17, uint64_t a18)
{
  uint64_t v42 = a7;
  uint64_t v43 = a8;
  uint64_t v34 = a6;
  uint64_t v38 = a9;
  uint64_t v40 = a11;
  uint64_t v41 = a10;
  uint64_t v39 = a12;
  long long v35 = a16;
  uint64_t v36 = a15;
  uint64_t v37 = a13;
  uint64_t v23 = *(void *)(a14 - 8);
  double v24 = MEMORY[0x1F4188790](a1);
  uint64_t v26 = (char *)&v33 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v26, v27, a14, v24);
  uint64_t v45 = a1;
  uint64_t v46 = a2;
  char v47 = a3;
  uint64_t v48 = a4;
  uint64_t v49 = a5;
  type metadata accessor for Label<Text, Image>();
  uint64_t v29 = v28;
  unint64_t v30 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)((uint64_t)v26, v42, v43, v41, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init(_:image:selection:content:), (uint64_t)v44, v40, v39, v38, v29, v37, a14, v36, v30, v35, *((uint64_t *)&v35 + 1), a17, a18);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v34, a14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v31 = type metadata accessor for ImageResource();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(a5, v31);
}

uint64_t closure #1 in Picker<>.init(_:image:selection:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  LODWORD(v25) = a2;
  uint64_t v24 = a1;
  uint64_t v6 = type metadata accessor for ImageResource();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v24 - v12;
  uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16);
  v14((char *)&v24 - v12, a3, v6, v11);
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  uint64_t v15 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v24 = v16;
  uint64_t v25 = v15;
  uint64_t v18 = v17;
  char v26 = v19 & 1;
  ((void (*)(char *, char *, uint64_t))v14)(v9, v13, v6);
  uint64_t v20 = Image.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v13, v6);
  char v22 = v26;
  uint64_t v23 = v24;
  *(void *)a4 = v25;
  *(void *)(a4 + 8) = v23;
  *(unsigned char *)(a4 + 16) = v22;
  *(void *)(a4 + 24) = v18;
  *(void *)(a4 + 32) = v20;
  return result;
}

uint64_t Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v40 = a6;
  uint64_t v41 = a7;
  uint64_t v38 = a4;
  uint64_t v39 = a5;
  uint64_t v34 = a3;
  uint64_t v42 = a2;
  uint64_t v35 = a1;
  uint64_t v37 = a9;
  uint64_t v33 = a16;
  uint64_t v32 = a15;
  uint64_t v31 = a12;
  uint64_t v36 = a11;
  uint64_t v19 = type metadata accessor for Binding();
  uint64_t v20 = *(void *)(v19 - 8);
  double v21 = MEMORY[0x1F4188790](v19);
  uint64_t v23 = (char *)&v31 - v22;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))((char *)&v31 - v22, a3, v19, v21);
  uint64_t v44 = a8;
  uint64_t v45 = a10;
  uint64_t v24 = v31;
  uint64_t v46 = a11;
  uint64_t v47 = v31;
  uint64_t v48 = a13;
  uint64_t v49 = a14;
  uint64_t v25 = v33;
  uint64_t v50 = v32;
  uint64_t v51 = v33;
  uint64_t v52 = a1;
  uint64_t v53 = v42;
  type metadata accessor for Label<Text, Image>();
  uint64_t v27 = v26;
  *(void *)&long long v30 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  *((void *)&v30 + 1) = a13;
  Picker.init<A>(selection:content:label:currentValueLabel:)((uint64_t)v23, v38, v39, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:), (uint64_t)v43, v40, v41, v27, v37, a8, a10, v24, v30, a14, v25);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v34, v19);
  uint64_t v28 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v28 - 8) + 8))(v42, v28);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v36 - 8) + 8))(v35);
}

__n128 closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

uint64_t partial apply for closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:)()
{
  return partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)((uint64_t (*)(void, void, void, void, void, void, void, void, void, void))closure #1 in Picker<>.init<A, B>(_:image:selection:content:currentValueLabel:));
}

uint64_t partial apply for closure #2 in Picker<>.init<A, B>(_:image:sources:selection:content:)(uint64_t (*a1)(void, void, void, void, void, void, void, void, void, void))
{
  return a1(v1[10], v1[11], v1[2], v1[3], v1[4], v1[5], v1[6], v1[7], v1[8], v1[9]);
}

uint64_t Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t (*a5)(uint64_t)@<X4>, uint64_t a6@<X5>, void (*a7)(uint64_t)@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  uint64_t v45 = a7;
  uint64_t v46 = a8;
  uint64_t v43 = a5;
  uint64_t v44 = a6;
  uint64_t v38 = a3;
  uint64_t v37 = a2;
  uint64_t v40 = a1;
  uint64_t v42 = a9;
  uint64_t v36 = a18;
  uint64_t v35 = a17;
  uint64_t v34 = a16;
  uint64_t v33 = a10;
  uint64_t v39 = a4;
  uint64_t v19 = *a4;
  uint64_t v20 = *(void *)(a11 - 8);
  uint64_t v41 = a12;
  double v21 = MEMORY[0x1F4188790](a1);
  uint64_t v23 = (char *)&v33 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v20 + 16))(v23, v24, a11, v21);
  uint64_t v48 = *(void *)(*(void *)(v19 + *MEMORY[0x1E4FBC5F0]) + 16);
  uint64_t v49 = a10;
  uint64_t v50 = a11;
  uint64_t v51 = a12;
  uint64_t v52 = a13;
  uint64_t v53 = a14;
  uint64_t v25 = v34;
  uint64_t v54 = a15;
  uint64_t v55 = v34;
  uint64_t v26 = v36;
  uint64_t v56 = v35;
  uint64_t v57 = v36;
  uint64_t v27 = v37;
  uint64_t v58 = a1;
  uint64_t v59 = v37;
  type metadata accessor for Label<Text, Image>();
  uint64_t v29 = v28;
  unint64_t v30 = lazy protocol witness table accessor for type Label<Text, Image> and conformance Label<A, B>();
  Picker.init<A, B>(sources:selection:content:label:currentValueLabel:)((uint64_t)v23, v39, v43, v44, (uint64_t (*)(uint64_t))partial apply for closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:), (uint64_t)v47, v45, v46, v42, v29, v33, a11, a13, v30, a14, a15, v25, v26);
  (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v38, a11);
  uint64_t v31 = type metadata accessor for ImageResource();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8))(v27, v31);
  return (*(uint64_t (**)(uint64_t))(*(void *)(v41 - 8) + 8))(v40);
}

__n128 closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for ImageResource();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8);
  double v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v19 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *, uint64_t, uint64_t, double))(v16 + 16))(v15, a1, a3, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a2, v8);
  Label<>.init<A>(_:image:)((uint64_t)v15, (uint64_t)v11, a3, (uint64_t)&v19);
  char v17 = v20;
  __n128 result = v21;
  *(_OWORD *)a4 = v19;
  *(unsigned char *)(a4 + 16) = v17;
  *(__n128 *)(a4 + 24) = result;
  return result;
}

double partial apply for closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = closure #1 in Picker<>.init<A, B, C>(_:image:sources:selection:content:currentValueLabel:)(v1[12], v1[13], v1[5], a1).n128_u64[0];
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in Picker<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t *initializeBufferWithCopyOfBuffer for Picker(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  uint64_t v5 = *(void *)(v4 - 8);
  unint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(a3 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = *(void *)(v9 + 64) + 7;
  int v13 = (*(_DWORD *)(v9 + 80) | *(_DWORD *)(v5 + 80)) & 0x100000;
  uint64_t v14 = *a2;
  *a1 = *a2;
  if ((v10 | v6) > 7 || v13 != 0 || ((v12 + ((v7 + v10 + ((v6 + 8) & ~v6)) & ~v10)) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    a1 = (uint64_t *)(v14 + (((v10 | v6) & 0xF8 ^ 0x1F8) & ((v10 | v6) + 16)));
  }
  else
  {
    uint64_t v17 = ~v10;
    uint64_t v18 = ((unint64_t)a1 + v6 + 8) & ~v6;
    uint64_t v19 = ((unint64_t)a2 + v6 + 8) & ~v6;
    char v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    uint64_t v22 = v8;
    swift_bridgeObjectRetain();
    v20(v18, v19, v4);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))((v18 + v11) & v17, (v19 + v11) & v17, v22);
    *(void *)((v12 + ((v18 + v11) & v17)) & 0xFFFFFFFFFFFFFFF8) = *(void *)((v12 + ((v19 + v11) & v17)) & 0xFFFFFFFFFFFFFFF8);
  }
  swift_retain();
  return a1;
}

void *assignWithCopy for Picker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 24;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 24))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 40);
  uint64_t v12 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v13 = v12 + 24;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (v15 + v9) & ~v14;
  uint64_t v17 = (v15 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 24))(v16, v17);
  *(void *)((*(void *)(v13 + 40) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v13 + 40)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for Picker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = v5 + 32;
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = ((unint64_t)a1 + v7 + 8) & ~v7;
  uint64_t v9 = ((unint64_t)a2 + v7 + 8) & ~v7;
  (*(void (**)(uint64_t, uint64_t))(v5 + 32))(v8, v9);
  uint64_t v10 = *(void *)(v6 + 32);
  uint64_t v11 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v12 = v11 + 32;
  uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v14 = v10 + v13;
  uint64_t v15 = (v14 + v8) & ~v13;
  uint64_t v16 = (v14 + v9) & ~v13;
  (*(void (**)(uint64_t, uint64_t))(v11 + 32))(v15, v16);
  *(void *)((*(void *)(v12 + 32) + 7 + v15) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v12 + 32)
                                                                                       + 7
                                                                                       + v16) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

void *assignWithTake for Picker(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v7 = v6 + 40;
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = ((unint64_t)a1 + v8 + 8) & ~v8;
  uint64_t v10 = ((unint64_t)a2 + v8 + 8) & ~v8;
  (*(void (**)(uint64_t, uint64_t))(v6 + 40))(v9, v10);
  uint64_t v11 = *(void *)(v7 + 24);
  uint64_t v12 = *(void *)(*(void *)(a3 + 32) - 8);
  uint64_t v13 = v12 + 40;
  uint64_t v14 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v15 = v11 + v14;
  uint64_t v16 = (v15 + v9) & ~v14;
  uint64_t v17 = (v15 + v10) & ~v14;
  (*(void (**)(uint64_t, uint64_t))(v12 + 40))(v16, v17);
  *(void *)((*(void *)(v13 + 24) + 7 + v16) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v13 + 24)
                                                                                       + 7
                                                                                       + v17) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Picker(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(a3 + 32);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int *)(v7 + 84);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = *(void *)(v4 + 64);
  uint64_t v11 = *(unsigned __int8 *)(v7 + 80);
  if (v5 <= v8) {
    unsigned int v12 = *(_DWORD *)(v7 + 84);
  }
  else {
    unsigned int v12 = *(_DWORD *)(v4 + 84);
  }
  if (v12 <= 0x7FFFFFFF) {
    unsigned int v13 = 0x7FFFFFFF;
  }
  else {
    unsigned int v13 = v12;
  }
  if (!a2) {
    return 0;
  }
  if (v13 < a2)
  {
    unint64_t v14 = ((*(void *)(*(void *)(v6 - 8) + 64) + ((v10 + v11 + ((v9 + 8) & ~v9)) & ~v11) + 7) & 0xFFFFFFFFFFFFFFF8)
        + 8;
    if ((v14 & 0xFFFFFFF8) != 0) {
      unsigned int v15 = 2;
    }
    else {
      unsigned int v15 = a2 - v13 + 1;
    }
    if (v15 >= 0x10000) {
      unsigned int v16 = 4;
    }
    else {
      unsigned int v16 = 2;
    }
    if (v15 < 0x100) {
      unsigned int v16 = 1;
    }
    if (v15 >= 2) {
      uint64_t v17 = v16;
    }
    else {
      uint64_t v17 = 0;
    }
    switch(v17)
    {
      case 1:
        int v18 = *((unsigned __int8 *)a1 + v14);
        if (!*((unsigned char *)a1 + v14)) {
          break;
        }
        goto LABEL_25;
      case 2:
        int v18 = *(unsigned __int16 *)((char *)a1 + v14);
        if (*(_WORD *)((char *)a1 + v14)) {
          goto LABEL_25;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187DB0CACLL);
      case 4:
        int v18 = *(_DWORD *)((char *)a1 + v14);
        if (!v18) {
          break;
        }
LABEL_25:
        int v20 = v18 - 1;
        if ((v14 & 0xFFFFFFF8) != 0)
        {
          int v20 = 0;
          int v21 = *a1;
        }
        else
        {
          int v21 = 0;
        }
        return v13 + (v21 | v20) + 1;
      default:
        break;
    }
  }
  if ((v12 & 0x80000000) != 0)
  {
    uint64_t v23 = ((unint64_t)a1 + v9 + 8) & ~v9;
    if (v5 == v13) {
      return (*(uint64_t (**)(uint64_t))(v4 + 48))(v23);
    }
    else {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))((v23 + v10 + v11) & ~v11, v8, v6);
    }
  }
  else
  {
    uint64_t v22 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v22) = -1;
    }
    return (v22 + 1);
  }
}

void storeEnumTagSinglePayload for Picker(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(void *)(a4 + 32);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v11 = *(void *)(v6 + 64);
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  if (v7 <= *(_DWORD *)(v9 + 84)) {
    unsigned int v13 = *(_DWORD *)(v9 + 84);
  }
  else {
    unsigned int v13 = *(_DWORD *)(v6 + 84);
  }
  if (v13 <= 0x7FFFFFFF) {
    unsigned int v14 = 0x7FFFFFFF;
  }
  else {
    unsigned int v14 = v13;
  }
  size_t v15 = ((*(void *)(*(void *)(v8 - 8) + 64) + ((v11 + v12 + ((v10 + 8) & ~v10)) & ~v12) + 7) & 0xFFFFFFFFFFFFFFF8)
      + 8;
  if (v14 >= a3)
  {
    int v19 = 0;
    int v20 = a2 - v14;
    if (a2 <= v14)
    {
LABEL_20:
      switch(v19)
      {
        case 1:
          a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 2:
          *(_WORD *)&a1[v15] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_33;
        case 3:
          goto LABEL_50;
        case 4:
          *(_DWORD *)&a1[v15] = 0;
          goto LABEL_32;
        default:
LABEL_32:
          if (a2)
          {
LABEL_33:
            if ((v13 & 0x80000000) != 0)
            {
              unint64_t v24 = (unint64_t)&a1[v10 + 8] & ~v10;
              if (v7 == v14)
              {
                uint64_t v25 = *(void (**)(unint64_t))(v6 + 56);
                v25(v24);
              }
              else
              {
                unint64_t v26 = (v24 + v11 + v12) & ~v12;
                uint64_t v27 = *(void (**)(unint64_t))(v9 + 56);
                v27(v26);
              }
            }
            else
            {
              if ((a2 & 0x80000000) != 0) {
                uint64_t v23 = a2 ^ 0x80000000;
              }
              else {
                uint64_t v23 = a2 - 1;
              }
              *(void *)a1 = v23;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v16 = a3 - v14;
    if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
         + ((v11 + v12 + ((v10 + 8) & ~v10)) & ~v12)
         + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
      unsigned int v17 = v16 + 1;
    else {
      unsigned int v17 = 2;
    }
    if (v17 >= 0x10000) {
      int v18 = 4;
    }
    else {
      int v18 = 2;
    }
    if (v17 < 0x100) {
      int v18 = 1;
    }
    if (v17 >= 2) {
      int v19 = v18;
    }
    else {
      int v19 = 0;
    }
    int v20 = a2 - v14;
    if (a2 <= v14) {
      goto LABEL_20;
    }
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
       + ((v11 + v12 + ((v10 + 8) & ~v10)) & ~v12)
       + 7) & 0xFFFFFFF8) == 0xFFFFFFF8)
    int v21 = v20;
  else {
    int v21 = 1;
  }
  if (((*(_DWORD *)(*(void *)(v8 - 8) + 64)
       + ((v11 + v12 + ((v10 + 8) & ~v10)) & ~v12)
       + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
  {
    int v22 = ~v14 + a2;
    bzero(a1, v15);
    *(_DWORD *)a1 = v22;
  }
  switch(v19)
  {
    case 1:
      a1[v15] = v21;
      break;
    case 2:
      *(_WORD *)&a1[v15] = v21;
      break;
    case 3:
LABEL_50:
      __break(1u);
      JUMPOUT(0x187DB0F68);
    case 4:
      *(_DWORD *)&a1[v15] = v21;
      break;
    default:
      return;
  }
}

uint64_t sub_187DB0F90()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in Picker.init<A>(selection:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for Binding();
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(a2, a1, v4);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0, 1, v4);
}

ValueMetadata *type metadata accessor for TabItem()
{
  return &type metadata for TabItem;
}

void destroy for TabItem.RootView(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    uint64_t v2 = *(void **)a1;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for TabItem.RootView(uint64_t a1, uint64_t a2)
{
  char v4 = *(unsigned char *)(a2 + 104);
  if (v4)
  {
    uint64_t v5 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    id v6 = v5;
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v7;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    uint64_t v9 = *(void **)(a2 + 80);
    uint64_t v8 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v9;
    *(void *)(a1 + 88) = v8;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_retain();
    swift_bridgeObjectRetain();
    id v10 = v9;
    swift_bridgeObjectRetain();
  }
  *(unsigned char *)(a1 + 104) = v4;
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  return a1;
}

uint64_t assignWithCopy for TabItem.RootView(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of TabItem.RootView.WrappedView(a1);
    if (*(unsigned char *)(a2 + 104))
    {
      char v4 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 104) = 1;
      id v5 = v4;
    }
    else
    {
      uint64_t v6 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1, a2);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      long long v7 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v7;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      id v8 = v7;
      swift_bridgeObjectRetain();
    }
  }
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  return a1;
}

uint64_t outlined destroy of TabItem.RootView.WrappedView(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for TabItem.RootView(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of TabItem.RootView.WrappedView(a1);
    long long v4 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v4;
    *(_OWORD *)(a1 + 89) = *(_OWORD *)(a2 + 89);
    long long v5 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v5;
    long long v6 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v6;
  }
  *(unsigned char *)(a1 + 105) = *(unsigned char *)(a2 + 105);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabItem.RootView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 106)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 <= 1) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for TabItem.RootView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 104) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 106) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 106) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabItem.RootView()
{
  return &type metadata for TabItem.RootView;
}

void destroy for TabItem.RootView.WrappedView(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 104);
  if (v2 >= 2) {
    unsigned int v2 = *(_DWORD *)a1 + 2;
  }
  if (v2 == 1)
  {
    unsigned int v3 = *(void **)a1;
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    swift_bridgeObjectRelease();
  }
}

uint64_t initializeWithCopy for TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 104);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a2 + 2;
  }
  if (v4 == 1)
  {
    long long v5 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    id v6 = v5;
    char v7 = 1;
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v8;
    (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    id v10 = *(void **)(a2 + 80);
    uint64_t v9 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v10;
    *(void *)(a1 + 88) = v9;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    swift_retain();
    swift_bridgeObjectRetain();
    id v11 = v10;
    swift_bridgeObjectRetain();
    char v7 = 0;
  }
  *(unsigned char *)(a1 + 104) = v7;
  return a1;
}

uint64_t assignWithCopy for TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 104);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 104);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      id v6 = *(void **)a2;
      *(void *)a1 = *(void *)a2;
      *(unsigned char *)(a1 + 104) = 1;
      id v7 = v6;
    }
    else
    {
      uint64_t v8 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v8;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))(a1, a2);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      uint64_t v9 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v9;
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      *(unsigned char *)(a1 + 104) = 0;
      swift_retain();
      swift_bridgeObjectRetain();
      id v10 = v9;
      swift_bridgeObjectRetain();
    }
  }
  return a1;
}

uint64_t assignWithTake for TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    unsigned int v4 = *(unsigned __int8 *)(a1 + 104);
    if (v4 >= 2) {
      unsigned int v4 = *(_DWORD *)a1 + 2;
    }
    if (v4 == 1)
    {
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1(a1);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    unsigned int v5 = *(unsigned __int8 *)(a2 + 104);
    if (v5 >= 2) {
      unsigned int v5 = *(_DWORD *)a2 + 2;
    }
    if (v5 == 1)
    {
      *(void *)a1 = *(void *)a2;
      char v6 = 1;
    }
    else
    {
      char v6 = 0;
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      long long v7 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v7;
      long long v8 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 16) = v8;
      long long v9 = *(_OWORD *)(a2 + 48);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 48) = v9;
    }
    *(unsigned char *)(a1 + 104) = v6;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for TabItem.RootView.WrappedView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 105)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 104);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TabItem.RootView.WrappedView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 89) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)double result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 105) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 105) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 104) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TabItem.RootView.WrappedView(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 104);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for TabItem.RootView.WrappedView(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    unsigned int v2 = a2 - 2;
    *(void *)(result + 96) = 0;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    LOBYTE(a2) = 2;
    *(_DWORD *)uint64_t result = v2;
  }
  *(unsigned char *)(result + 104) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TabItem.RootView.WrappedView()
{
  return &type metadata for TabItem.RootView.WrappedView;
}

uint64_t destroy for TabEntry(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 264);
  if (v2 < 2)
  {
    if (v2 == 1) {
      goto LABEL_3;
    }
LABEL_8:
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();

    goto LABEL_9;
  }
  if (*(_DWORD *)a1 != -1) {
    goto LABEL_8;
  }
LABEL_3:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t result = outlined consume of TabCustomizationID.Base();
  if (*(void *)(a1 + 72))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
    swift_release();
    swift_bridgeObjectRelease();

    uint64_t result = swift_bridgeObjectRelease();
  }
  if (*(void *)(a1 + 176))
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();

LABEL_9:
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t initializeWithCopy for TabEntry(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a2 + 264);
  if (v4 >= 2)
  {
    if (*(_DWORD *)a2 == -1) {
      goto LABEL_3;
    }
LABEL_6:
    long long v16 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v16;
    (**(void (***)(uint64_t, uint64_t))(v16 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    int v18 = *(void **)(a2 + 80);
    uint64_t v17 = *(void *)(a2 + 88);
    *(void *)(a1 + 80) = v18;
    *(void *)(a1 + 88) = v17;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 264) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    id v19 = v18;
    swift_bridgeObjectRetain();
    return a1;
  }
  if (v4 != 1) {
    goto LABEL_6;
  }
LABEL_3:
  uint64_t v5 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  uint64_t v7 = *(void *)(a2 + 32);
  char v8 = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  outlined copy of TabCustomizationID.Base();
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  long long v9 = (_OWORD *)(a1 + 48);
  id v10 = (_OWORD *)(a2 + 48);
  uint64_t v11 = *(void *)(a2 + 72);
  if (v11)
  {
    uint64_t v12 = *(void *)(a2 + 80);
    *(void *)(a1 + 72) = v11;
    *(void *)(a1 + 80) = v12;
    (**(void (***)(_OWORD *, _OWORD *))(v11 - 8))(v9, v10);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    unsigned int v14 = *(void **)(a2 + 128);
    uint64_t v13 = *(void *)(a2 + 136);
    *(void *)(a1 + 128) = v14;
    *(void *)(a1 + 136) = v13;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    swift_retain();
    swift_bridgeObjectRetain();
    id v15 = v14;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v20 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v20;
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    long long v21 = *(_OWORD *)(a2 + 64);
    *long long v9 = *v10;
    *(_OWORD *)(a1 + 64) = v21;
    long long v22 = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = v22;
  }
  uint64_t v23 = (_OWORD *)(a1 + 152);
  unint64_t v24 = (_OWORD *)(a2 + 152);
  uint64_t v25 = *(void *)(a2 + 176);
  if (v25)
  {
    uint64_t v26 = *(void *)(a2 + 184);
    *(void *)(a1 + 176) = v25;
    *(void *)(a1 + 184) = v26;
    (**(void (***)(_OWORD *, _OWORD *))(v25 - 8))(v23, v24);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = *(void *)(a2 + 208);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    uint64_t v28 = *(void **)(a2 + 232);
    uint64_t v27 = *(void *)(a2 + 240);
    *(void *)(a1 + 232) = v28;
    *(void *)(a1 + 240) = v27;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    swift_retain();
    swift_bridgeObjectRetain();
    id v29 = v28;
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v30 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v30;
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    long long v31 = *(_OWORD *)(a2 + 168);
    *uint64_t v23 = *v24;
    *(_OWORD *)(a1 + 168) = v31;
    long long v32 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v32;
  }
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  *(unsigned char *)(a1 + 264) = 1;
  return a1;
}

uint64_t assignWithCopy for TabEntry(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 264);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
    if (*(void *)(a1 + 72))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    if (!*(void *)(a1 + 176)) {
      goto LABEL_11;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_11:
  unsigned int v5 = *(unsigned __int8 *)(a2 + 264);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)a2 + 2;
  }
  if (v5 == 1)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = *(void *)(a2 + 8);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    uint64_t v6 = *(void *)(a2 + 24);
    uint64_t v7 = *(void *)(a2 + 32);
    char v8 = *(unsigned char *)(a2 + 40);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    outlined copy of TabCustomizationID.Base();
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v7;
    *(unsigned char *)(a1 + 40) = v8;
    long long v9 = (_OWORD *)(a1 + 48);
    id v10 = (long long *)(a2 + 48);
    uint64_t v11 = *(void *)(a2 + 72);
    if (v11)
    {
      *(void *)(a1 + 72) = v11;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      (**(void (***)(_OWORD *, long long *))(v11 - 8))(v9, v10);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      *(void *)(a1 + 120) = *(void *)(a2 + 120);
      uint64_t v12 = *(void **)(a2 + 128);
      *(void *)(a1 + 128) = v12;
      *(void *)(a1 + 136) = *(void *)(a2 + 136);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      swift_retain();
      swift_bridgeObjectRetain();
      id v13 = v12;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v17 = *v10;
      long long v18 = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = v18;
      *long long v9 = v17;
      long long v19 = *(_OWORD *)(a2 + 96);
      long long v20 = *(_OWORD *)(a2 + 112);
      long long v21 = *(_OWORD *)(a2 + 128);
      *(void *)(a1 + 144) = *(void *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v20;
      *(_OWORD *)(a1 + 128) = v21;
      *(_OWORD *)(a1 + 96) = v19;
    }
    long long v22 = (_OWORD *)(a1 + 152);
    uint64_t v23 = (long long *)(a2 + 152);
    uint64_t v24 = *(void *)(a2 + 176);
    if (v24)
    {
      *(void *)(a1 + 176) = v24;
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      (**(void (***)(_OWORD *, long long *))(v24 - 8))(v22, v23);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(_DWORD *)(a1 + 200) = *(_DWORD *)(a2 + 200);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(void *)(a1 + 216) = *(void *)(a2 + 216);
      *(void *)(a1 + 224) = *(void *)(a2 + 224);
      uint64_t v25 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v25;
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      swift_retain();
      swift_bridgeObjectRetain();
      id v26 = v25;
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v27 = *v23;
      long long v28 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v28;
      *long long v22 = v27;
      long long v29 = *(_OWORD *)(a2 + 200);
      long long v30 = *(_OWORD *)(a2 + 216);
      long long v31 = *(_OWORD *)(a2 + 232);
      *(void *)(a1 + 248) = *(void *)(a2 + 248);
      *(_OWORD *)(a1 + 216) = v30;
      *(_OWORD *)(a1 + 232) = v31;
      *(_OWORD *)(a1 + 200) = v29;
    }
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(unsigned char *)(a1 + 264) = 1;
  }
  else
  {
    uint64_t v14 = *(void *)(a2 + 24);
    *(void *)(a1 + 24) = v14;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
    *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    id v15 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v15;
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(unsigned char *)(a1 + 264) = 0;
    swift_retain();
    swift_bridgeObjectRetain();
    id v16 = v15;
    swift_bridgeObjectRetain();
  }
  return a1;
}

void *__swift_memcpy265_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x109uLL);
}

uint64_t assignWithTake for TabEntry(uint64_t a1, uint64_t a2)
{
  if (a1 == a2) {
    return a1;
  }
  unsigned int v4 = *(unsigned __int8 *)(a1 + 264);
  if (v4 >= 2) {
    unsigned int v4 = *(_DWORD *)a1 + 2;
  }
  if (v4 == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    outlined consume of TabCustomizationID.Base();
    if (*(void *)(a1 + 72))
    {
      __swift_destroy_boxed_opaque_existential_1(a1 + 48);
      swift_release();
      swift_bridgeObjectRelease();

      swift_bridgeObjectRelease();
    }
    if (!*(void *)(a1 + 176)) {
      goto LABEL_11;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 152);
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    __swift_destroy_boxed_opaque_existential_1(a1);
    swift_release();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
LABEL_11:
  unsigned int v5 = *(unsigned __int8 *)(a2 + 264);
  if (v5 >= 2) {
    unsigned int v5 = *(_DWORD *)a2 + 2;
  }
  if (v5 == 1)
  {
    memcpy((void *)a1, (const void *)a2, 0x108uLL);
    char v6 = 1;
  }
  else
  {
    char v6 = 0;
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    long long v7 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v7;
    long long v8 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v8;
    long long v9 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v9;
  }
  *(unsigned char *)(a1 + 264) = v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for TabEntry(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 265)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 264);
  if (v3 >= 2) {
    return (v3 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for TabEntry(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_OWORD *)(result + 249) = 0u;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 265) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 265) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 264) = -(char)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for TabEntry(uint64_t a1)
{
  uint64_t result = *(unsigned __int8 *)(a1 + 264);
  if (result >= 2) {
    return (*(_DWORD *)a1 + 2);
  }
  return result;
}

uint64_t destructiveInjectEnumTag for TabEntry(uint64_t result, unsigned int a2)
{
  if (a2 > 1)
  {
    *(void *)(result + 256) = 0;
    *(_OWORD *)(result + 224) = 0u;
    *(_OWORD *)(result + 240) = 0u;
    *(_OWORD *)(result + 192) = 0u;
    *(_OWORD *)(result + 208) = 0u;
    *(_OWORD *)(result + 160) = 0u;
    *(_OWORD *)(result + 176) = 0u;
    *(_OWORD *)(result + 128) = 0u;
    *(_OWORD *)(result + 144) = 0u;
    *(_OWORD *)(result + 96) = 0u;
    *(_OWORD *)(result + 112) = 0u;
    *(_OWORD *)(result + 64) = 0u;
    *(_OWORD *)(result + 80) = 0u;
    *(_OWORD *)uint64_t result = 0u;
    *(_OWORD *)(result + 16) = 0u;
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
    *(_OWORD *)(result + 32) = 0u;
    *(_OWORD *)(result + 48) = 0u;
  }
  *(unsigned char *)(result + 264) = a2;
  return result;
}

ValueMetadata *type metadata accessor for TabEntry()
{
  return &type metadata for TabEntry;
}

ValueMetadata *type metadata accessor for TabItem.TraitKey()
{
  return &type metadata for TabItem.TraitKey;
}

uint64_t associated type witness table accessor for View.Body : View in TabItem.RootView()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t TabEntry.presentationCount.getter()
{
  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if ((v18 & 1) == 0)
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(void *)&__dst[6] = *(void *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    uint64_t v8 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v8 == -1)
    {
LABEL_8:
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      uint64_t v9 = *(void *)(v14[0] + 16);
      swift_bridgeObjectRelease();
      outlined destroy of TabItem((uint64_t)__dst);
      return v9;
    }
LABEL_18:
    swift_once();
    goto LABEL_8;
  }
  memcpy(__dst, __src, 0x108uLL);
  uint64_t v1 = swift_bridgeObjectRetain();
  uint64_t v2 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lFSay7SwiftUI8TabEntryOG_Sis5NeverOTg503_s7d4UI24f61ViewCoordinator_PhoneC27dismissPresentationIfNeededyyFSiAA0C5G54Ocfu_33_88b05e132e72830fd289708f1134f08dAFSiTf3nnnpk_nTf1cn_n(v1, v15);
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    unsigned int v5 = (uint64_t *)(v2 + 32);
    while (1)
    {
      uint64_t v6 = *v5++;
      BOOL v7 = __OFADD__(v4, v6);
      v4 += v6;
      if (v7) {
        goto LABEL_17;
      }
      if (!--v3) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v4 = 0;
LABEL_10:
  swift_bridgeObjectRelease();
  outlined init with copy of TabItem?((uint64_t)&__dst[3], (uint64_t)v14);
  if (!v14[3])
  {
    outlined destroy of TabItemGroup((uint64_t)__dst);
    outlined destroy of TabItem?((uint64_t)v14);
    return v4;
  }
  uint64_t v10 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v10 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined destroy of TabItem((uint64_t)v14);
  uint64_t v11 = *(void *)(v13 + 16);
  swift_bridgeObjectRelease();
  outlined destroy of TabItemGroup((uint64_t)__dst);
  uint64_t v9 = v4 + v11;
  if (__OFADD__(v4, v11))
  {
    __break(1u);
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }
  return v9;
}

uint64_t TabEntry.description.getter()
{
  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if (v14)
  {
    memcpy(__dst, __src, 0x108uLL);
    strcpy((char *)v11, "TabItemGroup ");
    HIWORD(v11[1]) = -4864;
    v1._uint64_t countAndFlagsBits = TabItemGroup.description.getter();
    String.append(_:)(v1);
    swift_bridgeObjectRelease();
    uint64_t v2 = v11[0];
    outlined destroy of TabItemGroup((uint64_t)__dst);
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(void *)&__dst[6] = *(void *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    _StringGuts.grow(_:)(20);
    swift_bridgeObjectRelease();
    strcpy((char *)v11, "TabItem ");
    BYTE1(v11[1]) = 0;
    WORD1(v11[1]) = 0;
    HIDWORD(v11[1]) = -402653184;
    v3._uint64_t countAndFlagsBits = TabItem.platformIdentifier.getter();
    String.append(_:)(v3);
    swift_bridgeObjectRelease();
    v4._uint64_t countAndFlagsBits = 0x3D6E656464696820;
    v4._object = (void *)0xE800000000000000;
    String.append(_:)(v4);
    char v5 = TabEntry.hidden.getter();
    BOOL v6 = (v5 & 1) == 0;
    if (v5) {
      uint64_t v7 = 1702195828;
    }
    else {
      uint64_t v7 = 0x65736C6166;
    }
    if (v6) {
      unint64_t v8 = 0xE500000000000000;
    }
    else {
      unint64_t v8 = 0xE400000000000000;
    }
    unint64_t v9 = v8;
    String.append(_:)(*(Swift::String *)&v7);
    swift_bridgeObjectRelease();
    uint64_t v2 = v11[0];
    outlined destroy of TabItem((uint64_t)__dst);
  }
  return v2;
}

uint64_t TabItem.platformIdentifier.getter()
{
  uint64_t v0 = dispatch thunk of CustomStringConvertible.description.getter();
  uint64_t v1 = one-time initialization token for defaultValue;
  swift_bridgeObjectRetain();
  if (v1 != -1) {
    swift_once();
  }
  ViewTraitCollection.value<A>(for:defaultValue:)();
  swift_bridgeObjectRelease();
  outlined consume of TabCustomizationID?(v3, v4, v5);
  swift_bridgeObjectRelease();
  if (v6)
  {
    if ((ViewTraitCollection.isAuxiliaryContent.getter() & 1) == 0
      && (TabItem.needsCustomizationIDForEnablement.getter() & 1) != 0)
    {
      ViewTraitCollection.value<A>(for:defaultValue:)();
      outlined copy of TabCustomizationID?(v3, v4, v5);
      outlined consume of TabCustomizationID?(v3, v4, v5);
      swift_bridgeObjectRelease();
      if (v5 != 255)
      {
        swift_bridgeObjectRelease();
        return v3;
      }
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    if (one-time initialization token for searchPlatformIdentifier != -1) {
      swift_once();
    }
    uint64_t v0 = static TabItem.searchPlatformIdentifier;
    swift_bridgeObjectRetain();
  }
  return v0;
}

uint64_t TabEntry.hidden.getter()
{
  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if (v15)
  {
    memcpy(__dst, __src, 0x108uLL);
    outlined init with copy of TabItem?((uint64_t)&__dst[3], (uint64_t)v9);
    if (v12)
    {
      uint64_t v1 = one-time initialization token for defaultValue;
      swift_bridgeObjectRetain();
      if (v1 != -1) {
        swift_once();
      }
      ViewTraitCollection.value<A>(for:defaultValue:)();
      swift_bridgeObjectRelease();
      uint64_t v2 = v5;
      outlined consume of TabCustomizationID?(v6, v7, v8);
      swift_bridgeObjectRelease();
      outlined destroy of TabItemGroup((uint64_t)__dst);
      outlined destroy of TabItem((uint64_t)v9);
    }
    else
    {
      outlined destroy of TabItemGroup((uint64_t)__dst);
      outlined destroy of TabItem?((uint64_t)v9);
      return 0;
    }
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(void *)&__dst[6] = *(void *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    uint64_t v3 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v3 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    uint64_t v2 = v9[1];
    outlined consume of TabCustomizationID?(v10, v11, v12);
    swift_bridgeObjectRelease();
    outlined destroy of TabItem((uint64_t)__dst);
  }
  return v2;
}

uint64_t TabEntry.platformIdentifier.getter()
{
  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if (v5)
  {
    memcpy(v3, __src, 0x108uLL);
    uint64_t v1 = *((void *)&v3[1] + 1);
    outlined copy of TabCustomizationID.Base();
    outlined destroy of TabItemGroup((uint64_t)v3);
  }
  else
  {
    v3[4] = *(_OWORD *)&__src[64];
    v3[5] = *(_OWORD *)&__src[80];
    *(void *)&v3[6] = *(void *)&__src[96];
    v3[0] = *(_OWORD *)__src;
    v3[1] = *(_OWORD *)&__src[16];
    uint64_t v3[2] = *(_OWORD *)&__src[32];
    v3[3] = *(_OWORD *)&__src[48];
    uint64_t v1 = TabItem.platformIdentifier.getter();
    outlined destroy of TabItem((uint64_t)v3);
  }
  return v1;
}

uint64_t TabEntry.resolvedCustomizationID.getter()
{
  outlined init with copy of TabEntry(v0, (uint64_t)__src);
  if (v9)
  {
    memcpy(__dst, __src, 0x108uLL);
    uint64_t v1 = *((void *)&__dst[1] + 1);
    outlined copy of TabCustomizationID.Base();
    outlined destroy of TabItemGroup((uint64_t)__dst);
  }
  else
  {
    __dst[4] = *(_OWORD *)&__src[64];
    __dst[5] = *(_OWORD *)&__src[80];
    *(void *)&__dst[6] = *(void *)&__src[96];
    __dst[0] = *(_OWORD *)__src;
    __dst[1] = *(_OWORD *)&__src[16];
    __dst[2] = *(_OWORD *)&__src[32];
    __dst[3] = *(_OWORD *)&__src[48];
    if ((TabItem.needsCustomizationIDForEnablement.getter() & 1) == 0) {
      goto LABEL_7;
    }
    uint64_t v2 = one-time initialization token for defaultValue;
    swift_bridgeObjectRetain();
    if (v2 != -1) {
      swift_once();
    }
    ViewTraitCollection.value<A>(for:defaultValue:)();
    swift_bridgeObjectRelease();
    uint64_t v1 = v4;
    outlined copy of TabCustomizationID?(v4, v5, v6);
    outlined consume of TabCustomizationID?(v4, v5, v6);
    swift_bridgeObjectRelease();
    if (v6 == 255) {
LABEL_7:
    }
      uint64_t v1 = TabItem.platformIdentifier.getter();
    outlined destroy of TabItem((uint64_t)__dst);
  }
  return v1;
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabItem.TraitKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }

  return outlined init with copy of PlatformItem((uint64_t)&static TabItem.TraitKey.defaultValue, a1);
}

uint64_t TabItem.RootView.WrappedView.wrappedValue.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = outlined init with copy of TabItem.RootView.WrappedView(v1, (uint64_t)v6);
  if (v8)
  {
    *(void *)a1 = *(void *)&v6[0];
    *(unsigned char *)(a1 + 88) = 1;
  }
  else
  {
    void v4[4] = v6[4];
    v4[5] = v6[5];
    uint64_t v5 = v7;
    v4[0] = v6[0];
    v4[1] = v6[1];
    _OWORD v4[2] = v6[2];
    v4[3] = v6[3];
    outlined init with copy of _ViewList_View((uint64_t)v4, a1);
    *(unsigned char *)(a1 + 88) = 0;
    return outlined destroy of TabItem((uint64_t)v4);
  }
  return result;
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance TabItem.RootView()
{
  return static ModifiedContent<>._viewListCount(inputs:)();
}

uint64_t protocol witness for View.body.getter in conformance TabItem.RootView@<X0>(uint64_t a1@<X8>)
{
  TabItem.RootView.WrappedView.wrappedValue.getter((uint64_t)v5);
  outlined init with copy of ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>((uint64_t)v5, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
  outlined destroy of ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
  char v3 = *(unsigned char *)(v1 + 105);
  outlined init with copy of ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>((uint64_t)v6, a1, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>);
  *(unsigned char *)(a1 + 89) = v3;
  return outlined destroy of ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>((uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>);
}

uint64_t outlined destroy of TabItem?(uint64_t a1)
{
  type metadata accessor for AccessibilityValueStorage?(0, (unint64_t *)&lazy cache variable for type metadata for TabItem?);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t outlined init with copy of ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>()
{
  if (!lazy cache variable for type metadata for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>)
  {
    unint64_t v0 = type metadata accessor for _ConditionalContent();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>);
    }
  }
}

uint64_t outlined destroy of ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1)
{
}

uint64_t outlined init with copy of TabItem.RootView.WrappedView(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>()
{
  return lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, (void (*)(void))lazy protocol witness table accessor for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>);
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<_ViewList_View, TabItemGroup.HostView>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<_ViewList_View, TabItemGroup.HostView> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

uint64_t sub_187DB3534()
{
  return lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>(&lazy protocol witness table cache variable for type ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier> and conformance <> ModifiedContent<A, B>, type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier>, (void (*)(void))lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>);
}

uint64_t lazy protocol witness table accessor for type ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors> and conformance <> ModifiedContent<A, B>(unint64_t *a1, void (*a2)(uint64_t), void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    a3();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for ModifiedContent<ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>, SearchAdjustmentModifier>(uint64_t a1)
{
}

void type metadata accessor for ModifiedContent<_ConditionalContent<_ViewList_View, TabItemGroup.HostView>, UpdateEnvironmentToAllowedBehaviors>(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ModifiedContent();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t EnvironmentValues.displayMenuAsPalette.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for PickerStyleWriter<MenuPickerStyle>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1ED43E750, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for PickerStyleWriter<MenuPickerStyle>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1ED43E750, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t EnvironmentValues.displayMenuAsPalette.setter()
{
  type metadata accessor for PickerStyleWriter<MenuPickerStyle>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1ED43E750, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t static PalettePickerStyle._makeView<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeView(view:inputs:)();
}

void type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>()
{
  if (!lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>)
  {
    _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextAcceptsPredicate<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F410E8]);
    type metadata accessor for PickerStyleWriter<MenuPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<MenuPickerStyle>, (uint64_t)&type metadata for MenuPickerStyle, (uint64_t)&protocol witness table for MenuPickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
    lazy protocol witness table accessor for type StyleContextAcceptsPredicate<MenuStyleContext> and conformance StyleContextAcceptsPredicate<A>();
    unint64_t v0 = type metadata accessor for StaticIf();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>);
    }
  }
}

uint64_t type metadata accessor for PalettePickerStyle.Body()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>()
{
  unint64_t result = lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>;
  if (!lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>)
  {
    type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>);
  }
  return result;
}

uint64_t static PalettePickerStyle._makeViewList<A>(value:inputs:)()
{
  return static ModifiedContent<>._makeViewList(view:inputs:)();
}

uint64_t PalettePickerStyle.Body.base.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for _PickerValue();
  uint64_t Value = AGGraphGetValue();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16))(a1, Value, v2);
}

uint64_t PalettePickerStyle.Body.value.getter@<X0>(unint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v72 = a2;
  unint64_t v71 = a1;
  uint64_t v70 = a5;
  unint64_t v69 = HIDWORD(a1);
  uint64_t v63 = type metadata accessor for PickerStyleConfiguration();
  uint64_t v61 = *(void *)(v63 - 8);
  MEMORY[0x1F4188790](v63);
  uint64_t v55 = (char *)&v49 - v7;
  uint64_t v79 = &type metadata for PalettePickerStyle;
  *(void *)&long long v80 = a3;
  *((void *)&v80 + 1) = &protocol witness table for PalettePickerStyle;
  *(void *)&long long v81 = a4;
  uint64_t v8 = type metadata accessor for _PickerValue();
  MEMORY[0x1F4188790](v8 - 8);
  uint64_t v10 = (char *)&v49 - v9;
  uint64_t v53 = type metadata accessor for ResolvedPicker();
  uint64_t v56 = *(void *)(v53 - 8);
  MEMORY[0x1F4188790](v53);
  uint64_t v12 = (char *)&v49 - v11;
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  uint64_t v13 = type metadata accessor for ModifiedContent();
  uint64_t v60 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v51 = (uint64_t)&v49 - v14;
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  uint64_t v15 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v15 - 8);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v49 - v16;
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>();
  uint64_t v18 = type metadata accessor for ModifiedContent();
  uint64_t v64 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18);
  uint64_t v52 = (char *)&v49 - v19;
  type metadata accessor for PickerStyleWriter<MenuPickerStyle>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  uint64_t v20 = type metadata accessor for ModifiedContent();
  uint64_t v65 = *(void *)(v20 - 8);
  MEMORY[0x1F4188790](v20);
  uint64_t v54 = (char *)&v49 - v21;
  uint64_t v62 = type metadata accessor for ModifiedContent();
  uint64_t v68 = *(void *)(v62 - 8);
  MEMORY[0x1F4188790](v62);
  uint64_t v58 = (char *)&v49 - v22;
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, MEMORY[0x1E4F41280]);
  uint64_t v66 = type metadata accessor for ModifiedContent();
  uint64_t v67 = *(void *)(v66 - 8);
  MEMORY[0x1F4188790](v66);
  uint64_t v57 = (char *)&v49 - v23;
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  PalettePickerStyle.Body.base.getter((uint64_t)v10);
  uint64_t v24 = (uint64_t)v55;
  (*(void (**)(char *, char *, uint64_t))(v61 + 32))(v55, v10, v63);
  uint64_t v25 = ResolvedPicker.init(configuration:)(v24, (uint64_t)v12);
  uint64_t v26 = v51;
  uint64_t v27 = v53;
  View.pickerStyle<A, B>(_:in:)(v25, v28, v53, (uint64_t)&type metadata for MenuPickerStyle, MEMORY[0x1E4F3FCF0], (uint64_t)&protocol witness table for ResolvedPicker<A>, MEMORY[0x1E4F3FCE8], v51);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v12, v27);
  swift_getKeyPath();
  LOBYTE(v79) = 1;
  unint64_t v29 = lazy protocol witness table accessor for type StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier> and conformance <> StaticIf<A, B, C>();
  uint64_t v90 = &protocol witness table for ResolvedPicker<A>;
  unint64_t v91 = v29;
  uint64_t WitnessTable = swift_getWitnessTable();
  View.environment<A>(_:_:)();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v26, v13);
  unint64_t v31 = lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Bool> and conformance _EnvironmentKeyWritingModifier<A>();
  uint64_t v88 = WitnessTable;
  unint64_t v89 = v31;
  uint64_t v32 = swift_getWitnessTable();
  unint64_t v33 = lazy protocol witness table accessor for type TitleAndIconLabelStyle and conformance TitleAndIconLabelStyle();
  uint64_t v34 = v52;
  View.labelStyle<A>(_:)(v33, v15, (uint64_t)&type metadata for TitleAndIconLabelStyle, v32);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v17, v15);
  uint64_t v35 = swift_allocObject();
  uint64_t v36 = v50;
  *(void *)(v35 + 16) = v49;
  *(void *)(v35 + 24) = v36;
  LODWORD(v36) = v69;
  *(_DWORD *)(v35 + 32) = v71;
  *(_DWORD *)(v35 + 36) = v36;
  *(_DWORD *)(v35 + 40) = v72;
  unint64_t v37 = lazy protocol witness table accessor for type LabelStyleWritingModifier<TitleAndIconLabelStyle> and conformance LabelStyleWritingModifier<A>();
  uint64_t v86 = v32;
  unint64_t v87 = v37;
  uint64_t v38 = swift_getWitnessTable();
  uint64_t v39 = v54;
  View.transformPlatformItemList<A>(_:_:)((uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)partial apply for closure #1 in PalettePickerStyle.Body.value.getter, v35, v18, (uint64_t)&type metadata for LayoutPlatformItemListFlags, v38);
  swift_release();
  (*(void (**)(char *, uint64_t))(v64 + 8))(v34, v18);
  uint64_t v79 = (ValueMetadata *)*(unsigned __int16 *)AGGraphGetValue();
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  long long v85 = 0u;
  uint64_t v77 = v38;
  char v78 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t v40 = swift_getWitnessTable();
  uint64_t v41 = v58;
  View.platformItemSystemType(_:)((uint64_t)&v79, v20, v40);
  (*(void (**)(char *, uint64_t))(v65 + 8))(v39, v20);
  swift_getKeyPath();
  uint64_t v75 = v40;
  uint64_t v76 = &protocol witness table for PlatformItemListTransformModifier<A>;
  uint64_t v42 = v62;
  uint64_t v43 = swift_getWitnessTable();
  uint64_t v44 = v57;
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  (*(void (**)(char *, uint64_t))(v68 + 8))(v41, v42);
  unint64_t v45 = lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<MenuActionDismissBehavior> and conformance _EnvironmentKeyTransformModifier<A>();
  uint64_t v73 = v43;
  unint64_t v74 = v45;
  uint64_t v46 = v66;
  uint64_t v47 = swift_getWitnessTable();
  View.pickerStyle<A>(_:)(v47, v46, (uint64_t)&type metadata for SegmentedPickerStyle, v47);
  return (*(uint64_t (**)(char *, uint64_t))(v67 + 8))(v44, v46);
}

void closure #1 in PalettePickerStyle.Body.value.getter(uint64_t a1)
{
  if (*(unsigned char *)AGGraphGetValue() == 2)
  {
    uint64_t v2 = *(void **)a1;
    uint64_t v3 = *(void *)(*(void *)a1 + 16);
    if (v3)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_10:
      }
        uint64_t v2 = (void *)specialized _ArrayBuffer._consumeAndCreateNew()(v2);
      for (unint64_t i = 0; i != v3; ++i)
      {
        if (i >= v2[2])
        {
          __break(1u);
          goto LABEL_10;
        }
        uint64_t v5 = *(void *)(type metadata accessor for PlatformItemList.Item() - 8);
        unsigned __int8 v6 = (char *)v2 + ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
        uint64_t v7 = *(void *)(v5 + 72) * i;
        uint64_t v8 = *(void **)&v6[v7];
        *(void *)&v6[v7] = 0;
      }
      *(void *)a1 = v2;
    }
  }
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance PalettePickerStyle.Body<A>@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ResolvedPicker();
  type metadata accessor for StaticIf<StyleContextAcceptsPredicate<MenuStyleContext>, PickerStyleWriter<MenuPickerStyle>, EmptyModifier>();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Bool>, MEMORY[0x1E4FBB390], MEMORY[0x1E4F411E8]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for LabelStyleWritingModifier<TitleAndIconLabelStyle>();
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<MenuPickerStyle>(255, &lazy cache variable for type metadata for PlatformItemListTransformModifier<LayoutPlatformItemListFlags>, (uint64_t)&type metadata for LayoutPlatformItemListFlags, (uint64_t)&protocol witness table for LayoutPlatformItemListFlags, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PlatformItemListTransformModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  _s7SwiftUI28StyleContextAcceptsPredicateVyAA04MenucD0VGMaTm_0(255, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<MenuActionDismissBehavior>, (uint64_t)&type metadata for MenuActionDismissBehavior, MEMORY[0x1E4F41280]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PickerStyleWriter<MenuPickerStyle>(255, &lazy cache variable for type metadata for PickerStyleWriter<SegmentedPickerStyle>, (uint64_t)&type metadata for SegmentedPickerStyle, (uint64_t)&protocol witness table for SegmentedPickerStyle, (uint64_t (*)(void, uint64_t, uint64_t))type metadata accessor for PickerStyleWriter);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance PalettePickerStyle.Body<A>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return PalettePickerStyle.Body.value.getter(*(void *)v2, *(_DWORD *)(v2 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

ValueMetadata *type metadata accessor for PalettePickerStyle()
{
  return &type metadata for PalettePickerStyle;
}

uint64_t base witness table accessor for _AttributeBody in PalettePickerStyle.Body<A>()
{
  return swift_getWitnessTable();
}

uint64_t sub_187DB519C()
{
  return swift_deallocObject();
}

void partial apply for closure #1 in PalettePickerStyle.Body.value.getter(uint64_t a1)
{
}

void type metadata accessor for PickerStyleWriter<MenuPickerStyle>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>;
  if (!lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>)
  {
    type metadata accessor for PickerStyleWriter<MenuPickerStyle>(255, &lazy cache variable for type metadata for EnvironmentPropertyKey<DisplayMenuAsPaletteKey>, (uint64_t)&unk_1ED43E750, (uint64_t)&protocol witness table for DisplayMenuAsPaletteKey, MEMORY[0x1E4F40930]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type EnvironmentPropertyKey<DisplayMenuAsPaletteKey> and conformance EnvironmentPropertyKey<A>);
  }
  return result;
}

void *type metadata accessor for DisplayMenuAsPaletteKey()
{
  return &unk_1ED43E750;
}

uint64_t Tab.init<>(value:content:systemItem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v25 = a1;
  uint64_t v26 = a2;
  uint64_t v27 = a5;
  uint64_t v8 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char *)&v25 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = type metadata accessor for Tab();
  uint64_t v17 = *(void *)(v16 - 8);
  double v18 = MEMORY[0x1F4188790](v16);
  uint64_t v20 = (char *)&v25 - v19;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v12 + 16))(v15, a1, a3, v18);
  char v28 = 1;
  uint64_t v21 = v26;
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v26, a4);
  Tab.init(value:role:content:tabItem:)((uint64_t)v15, &v28, (uint64_t)v10, v22, a3, a4, MEMORY[0x1E4F417F8], (uint64_t)v20);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, a4);
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v25, a3);
  uint64_t v23 = v27;
  uint64_t result = (*(uint64_t (**)(uint64_t, char *, uint64_t))(v17 + 32))(v27, v20, v16);
  *(unsigned char *)(v23 + *(int *)(v16 + 56)) = 0;
  return result;
}

uint64_t Tab.init<>(content:systemItem:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = 1;
  (*(void (**)(char *, double))(v8 + 32))(v7, v5);
  Tab.init<>(role:content:tabItem:)(&v12, (uint64_t)v7, v9, a2, MEMORY[0x1E4F417F8], a3);
  uint64_t result = type metadata accessor for Tab();
  a3[*(int *)(result + 56)] = 0;
  return result;
}

uint64_t Tab.init<>(role:content:tabItem:)@<X0>(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, unsigned char *a6@<X8>)
{
  char v11 = *a1;
  char v12 = (int *)type metadata accessor for Tab();
  a6[v12[14]] = 1;
  *a6 = 1;
  a6[1] = v11;
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32))(&a6[v12[12]], a2, a4);
  uint64_t v13 = &a6[v12[13]];
  uint64_t v14 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 32);

  return v14(v13, a3, a5);
}

uint64_t Tab.init(value:role:content:tabItem:)@<X0>(uint64_t a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  char v21 = *a2;
  uint64_t v12 = *(void *)(a5 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56);
  v13(a8, 1, 1, a5);
  uint64_t v14 = (int *)type metadata accessor for Tab();
  uint64_t v15 = v14[11];
  *(unsigned char *)(a8 + v15) = 1;
  *(unsigned char *)(a8 + v14[14]) = 1;
  uint64_t v16 = type metadata accessor for Optional();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8))(a8, v16);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(a8, a1, a5);
  v13(a8, 0, 1, a5);
  *(unsigned char *)(a8 + v15) = v21;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a6 - 8) + 32))(a8 + v14[12], a3, a6);
  uint64_t v17 = a8 + v14[13];
  double v18 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a7 - 8) + 32);

  return v18(v17, a4, a7);
}

uint64_t Tab<>.init<A>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Tab<>.init<A>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, void))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A, B>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A, B>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A, B>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return Tab<>.init<A, B>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, uint64_t a4@<X6>, void (*a5)(uint64_t)@<X7>, uint64_t a6@<X8>, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v28 = a4;
  uint64_t v29 = a2;
  uint64_t v32 = a6;
  uint64_t v30 = a3;
  uint64_t v31 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = (uint64_t)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a8 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v27 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v15, v16, a8, v13);
  char v35 = 1;
  a5(v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23 & 1;
  uint64_t v25 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v33[0] = v18;
  v33[1] = v20;
  v33[2] = v24;
  v33[3] = v22;
  void v33[4] = v25;
  char v34 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v15, &v35, v27, (uint64_t)v33, a8, v31, (uint64_t)&type metadata for DefaultTabLabel, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v28, a8);
}

uint64_t Tab<>.init<>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, void (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v32 = a5;
  uint64_t v33 = a3;
  int v31 = a2;
  uint64_t v36 = a6;
  uint64_t v34 = a4;
  uint64_t v35 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v30 = (uint64_t)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = *(void *)(a9 - 8);
  double v13 = MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v17 = *v16;
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v11 + 16))(v15, v18, a9, v13);
  char v39 = v17;
  a7(v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v22 = v21;
  uint64_t v24 = v23;
  uint64_t v26 = v25 & 1;
  uint64_t v27 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37[0] = v20;
  v37[1] = v22;
  v37[2] = v26;
  v37[3] = v24;
  v37[4] = v27;
  char v38 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v15, &v39, v30, (uint64_t)v37, a9, v35, (uint64_t)&type metadata for DefaultTabLabel, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v32, a9);
}

uint64_t Tab<>.init<A>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(uint64_t)@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v29 = a5;
  uint64_t v30 = a3;
  int v28 = a2;
  uint64_t v34 = a7;
  uint64_t v32 = a4;
  uint64_t v33 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v27 = (uint64_t)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v31 = type metadata accessor for Optional();
  v13.n128_f64[0] = MEMORY[0x1F4188790](v31);
  uint64_t v15 = (char *)&v27 - v14;
  uint64_t v16 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v16 + 16))((char *)&v27 - v14, a5, a10, v13);
  uint64_t v17 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v15, 0, 1, a10);
  char v37 = 1;
  a6(v17);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v18 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  uint64_t v24 = v23 & 1;
  uint64_t v25 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v35[0] = v18;
  v35[1] = v20;
  _OWORD v35[2] = v24;
  v35[3] = v22;
  void v35[4] = v25;
  char v36 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v15, &v37, v27, (uint64_t)v35, v31, v33, (uint64_t)&type metadata for DefaultTabLabel, v34);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v29, a10);
}

uint64_t Tab<>.init<A>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unsigned char *a6@<X7>, uint64_t a7@<X8>, void (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v30 = a5;
  uint64_t v31 = a3;
  int v29 = a2;
  v28[1] = a1;
  uint64_t v35 = a7;
  uint64_t v33 = a4;
  uint64_t v34 = a10;
  MEMORY[0x1F4188790](a1);
  v28[0] = (uint64_t)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v32 = type metadata accessor for Optional();
  v14.n128_f64[0] = MEMORY[0x1F4188790](v32);
  uint64_t v16 = (char *)v28 - v15;
  LOBYTE(a6) = *a6;
  uint64_t v17 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)v28 - v15, a5, a11, v14);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a11);
  v38[0] = (char)a6;
  a8(v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24 & 1;
  uint64_t v26 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v36[0] = v19;
  v36[1] = v21;
  v36[2] = v25;
  v36[3] = v23;
  v36[4] = v26;
  char v37 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v16, v38, v28[0], (uint64_t)v36, v32, v34, (uint64_t)&type metadata for DefaultTabLabel, v35);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v30, a11);
}

uint64_t Tab<>.init<A>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void (*v35)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  uint64_t v41;
  char v42;
  char v43;

  char v37 = a7;
  char v38 = a3;
  uint64_t v32 = a5;
  uint64_t v33 = a1;
  char v36 = a2;
  char v39 = a8;
  uint64_t v15 = *(void *)(a9 - 8);
  uint64_t v34 = a12;
  uint64_t v35 = a13;
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = *(void *)(v21 - 8);
  double v24 = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)&v32 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v29 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v22 + 16))(v26, v27, v28, v24);
  uint64_t v43 = 1;
  v32(v29);
  uint64_t v30 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v33, a9);
  v35(&v40, v17, v36, v38, a9, v34);
  uint64_t v41 = v41;
  uint64_t v42 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v26, &v43, (uint64_t)v20, (uint64_t)&v40, a6, v37, (uint64_t)&type metadata for DefaultTabLabel, v39);
  (*(void (**)(uint64_t, uint64_t))(v22 + 8))(a4, a6);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v30, a9);
}

uint64_t Tab<>.init<A>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  return Tab<>.init<A>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, void))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void (*a14)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, void))
{
  void (*v38)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, void);
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  long long v42;
  uint64_t v43;
  char v44;
  char v45;

  v35[1] = a6;
  char v36 = a5;
  char v39 = a2;
  uint64_t v40 = a3;
  uint64_t v37 = a1;
  uint64_t v41 = a8;
  uint64_t v16 = *(void *)(a10 - 8);
  v35[0] = a13;
  char v38 = a14;
  MEMORY[0x1F4188790](a1);
  uint64_t v18 = (char *)v35 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v19);
  uint64_t v21 = (char *)v35 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = *(void *)(v22 - 8);
  double v25 = MEMORY[0x1F4188790](v24);
  uint64_t v27 = (char *)v35 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v29 = *v28;
  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v23 + 16))(v27, v30, v31, v25);
  unint64_t v45 = v29;
  v36(v32);
  uint64_t v33 = v37;
  (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v18, v37, a10);
  v38(&v42, v18, v39, v40, a10, v35[0]);
  uint64_t v43 = v43;
  uint64_t v44 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v27, &v45, (uint64_t)v21, (uint64_t)&v42, a7, a9, (uint64_t)&type metadata for DefaultTabLabel, v41);
  (*(void (**)(uint64_t, uint64_t))(v23 + 8))(a4, a7);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v33, a10);
}

uint64_t Tab<>.init<A, B>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  return Tab<>.init<A, B>(_:image:value:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A, B>(_:image:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void (*a5)(uint64_t)@<X4>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void (*v33)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  long long v39;
  uint64_t v40;
  char v41;
  char v42[9];

  char v36 = a6;
  uint64_t v37 = a3;
  uint64_t v30 = a4;
  uint64_t v31 = a5;
  char v38 = a8;
  uint64_t v34 = a11;
  uint64_t v35 = a2;
  uint64_t v32 = a1;
  uint64_t v33 = a13;
  uint64_t v15 = *(void *)(a7 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v18);
  uint64_t v20 = (char *)&v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v21 = type metadata accessor for Optional();
  v22.n128_f64[0] = MEMORY[0x1F4188790](v21);
  uint64_t v24 = (char *)&v29 - v23;
  uint64_t v25 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v25 + 16))((char *)&v29 - v23, a4, a9, v22);
  uint64_t v26 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v24, 0, 1, a9);
  v42[0] = 1;
  v31(v26);
  uint64_t v27 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, v32, a7);
  v33(&v39, v17, v35, v37, a7, v34);
  uint64_t v40 = v40;
  uint64_t v41 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v24, v42, (uint64_t)v20, (uint64_t)&v39, v21, v36, (uint64_t)&type metadata for DefaultTabLabel, v38);
  (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v30, a9);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(v27, a7);
}

uint64_t Tab<>.init<A, B>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  return Tab<>.init<A, B>(_:image:value:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, (void (*)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A, B>(_:image:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, void (*a6)(uint64_t)@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void (*a15)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  void (*v34)(long long *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  long long v40;
  uint64_t v41;
  char v42;
  char v43[9];

  uint64_t v37 = a8;
  char v38 = a3;
  v31[1] = a7;
  uint64_t v32 = a6;
  uint64_t v33 = a1;
  char v39 = a9;
  uint64_t v35 = a13;
  char v36 = a2;
  uint64_t v17 = *(void *)(a10 - 8);
  uint64_t v34 = a15;
  MEMORY[0x1F4188790](a1);
  uint64_t v19 = (char *)v31 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  __n128 v22 = (char *)v31 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v23 = type metadata accessor for Optional();
  v24.n128_f64[0] = MEMORY[0x1F4188790](v23);
  uint64_t v26 = (char *)v31 - v25;
  LOBYTE(a5) = *a5;
  uint64_t v27 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v27 + 16))((char *)v31 - v25, a4, a11, v24);
  uint64_t v28 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v26, 0, 1, a11);
  v43[0] = (char)a5;
  v32(v28);
  uint64_t v29 = v33;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v33, a10);
  v34(&v40, v19, v36, v38, a10, v35);
  uint64_t v41 = v41;
  uint64_t v42 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v26, v43, (uint64_t)v22, (uint64_t)&v40, v23, v37, (uint64_t)&type metadata for DefaultTabLabel, v39);
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(a4, a11);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v29, a10);
}

uint64_t Tab<>.init<>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(uint64_t)@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v33 = a3;
  uint64_t v34 = a5;
  LODWORD(v32) = a2;
  uint64_t v36 = a7;
  uint64_t v35 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = *(void *)(a9 - 8);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v14 + 16))(v18, v19, a9, v16);
  char v39 = 1;
  a6(v20);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v21 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v31 = v22;
  uint64_t v32 = v21;
  uint64_t v30 = v23;
  uint64_t v25 = v24 & 1;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v33;
  *(void *)(v26 + 16) = v33;
  *(void *)(v26 + 24) = a4;
  *(_DWORD *)(v26 + 32) = 0;
  *(unsigned char *)(v26 + 36) = 1;
  *(_OWORD *)(v26 + 40) = xmmword_18834C6B0;
  *(void *)(v26 + 56) = v27;
  *(void *)(v26 + 64) = a4;
  *(_OWORD *)(v26 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v26 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v37[0] = v32;
  v37[1] = v31;
  v37[2] = v25;
  v37[3] = v30;
  v37[4] = v26;
  char v38 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v18, &v39, (uint64_t)v13, (uint64_t)v37, a9, v35, (uint64_t)&type metadata for DefaultTabLabel, v36);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v14 + 8))(v34, a9);
}

uint64_t Tab<>.init<>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, uint64_t a6@<X8>, void (*a7)(uint64_t), uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v34 = a3;
  uint64_t v35 = a5;
  LODWORD(v33) = a2;
  uint64_t v32 = a1;
  uint64_t v37 = a6;
  uint64_t v36 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v30 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(a9 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)&v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *v18;
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, v20, a9, v15);
  char v40 = v19;
  a7(v21);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v32 = v23;
  uint64_t v33 = v22;
  uint64_t v31 = v24;
  uint64_t v26 = v25 & 1;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v27 = swift_allocObject();
  uint64_t v28 = v34;
  *(void *)(v27 + 16) = v34;
  *(void *)(v27 + 24) = a4;
  *(_DWORD *)(v27 + 32) = 0;
  *(unsigned char *)(v27 + 36) = 1;
  *(_OWORD *)(v27 + 40) = xmmword_18834C6B0;
  *(void *)(v27 + 56) = v28;
  *(void *)(v27 + 64) = a4;
  *(_OWORD *)(v27 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v27 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38[0] = v33;
  v38[1] = v32;
  void v38[2] = v26;
  v38[3] = v31;
  v38[4] = v27;
  char v39 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v40, (uint64_t)v12, (uint64_t)v38, a9, v36, (uint64_t)&type metadata for DefaultTabLabel, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(v35, a9);
}

uint64_t Tab<>.init<A>(_:systemImage:value:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, void (*a6)(uint64_t)@<X7>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v33 = a5;
  uint64_t v34 = a3;
  v30[1] = a1;
  uint64_t v31 = a4;
  uint64_t v37 = a7;
  uint64_t v36 = a9;
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (uint64_t)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Optional();
  v14.n128_f64[0] = MEMORY[0x1F4188790](v35);
  uint64_t v16 = (char *)v30 - v15;
  uint64_t v17 = *(void *)(a10 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)v30 - v15, a5, a10, v14);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a10);
  v40[0] = 1;
  a6(v18);
  v30[0] = a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24 & 1;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v34;
  *(void *)(v26 + 16) = v34;
  uint64_t v28 = v31;
  *(void *)(v26 + 24) = v31;
  *(_DWORD *)(v26 + 32) = 0;
  *(unsigned char *)(v26 + 36) = 1;
  *(_OWORD *)(v26 + 40) = xmmword_18834C6B0;
  *(void *)(v26 + 56) = v27;
  *(void *)(v26 + 64) = v28;
  *(_OWORD *)(v26 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v26 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v38[0] = v19;
  v38[1] = v21;
  void v38[2] = v25;
  v38[3] = v23;
  v38[4] = v26;
  char v39 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v16, v40, v32, (uint64_t)v38, v35, v36, (uint64_t)&type metadata for DefaultTabLabel, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v33, a10);
}

uint64_t Tab<>.init<A>(_:systemImage:value:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X6>, unsigned char *a6@<X7>, uint64_t a7@<X8>, void (*a8)(uint64_t), uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v33 = a5;
  uint64_t v34 = a3;
  uint64_t v30 = a1;
  uint64_t v31 = a4;
  uint64_t v37 = a7;
  uint64_t v38 = a2;
  uint64_t v36 = a10;
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (uint64_t)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v35 = type metadata accessor for Optional();
  v14.n128_f64[0] = MEMORY[0x1F4188790](v35);
  uint64_t v16 = (char *)&v30 - v15;
  LOBYTE(a6) = *a6;
  uint64_t v17 = *(void *)(a11 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)&v30 - v15, a5, a11, v14);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a11);
  v41[0] = (char)a6;
  a8(v18);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v19 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v21 = v20;
  uint64_t v23 = v22;
  uint64_t v25 = v24 & 1;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v26 = swift_allocObject();
  uint64_t v27 = v34;
  *(void *)(v26 + 16) = v34;
  uint64_t v28 = v31;
  *(void *)(v26 + 24) = v31;
  *(_DWORD *)(v26 + 32) = 0;
  *(unsigned char *)(v26 + 36) = 1;
  *(_OWORD *)(v26 + 40) = xmmword_18834C6B0;
  *(void *)(v26 + 56) = v27;
  *(void *)(v26 + 64) = v28;
  *(_OWORD *)(v26 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v26 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v39[0] = v19;
  v39[1] = v21;
  v39[2] = v25;
  void v39[3] = v23;
  v39[4] = v26;
  char v40 = 1;
  Tab.init(value:role:content:tabItem:)((uint64_t)v16, v41, v32, (uint64_t)v39, v35, v36, (uint64_t)&type metadata for DefaultTabLabel, v37);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(v33, a11);
}

uint64_t Tab<>.init<>(value:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = &v22[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = &v22[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v19 = (*(uint64_t (**)(unsigned char *, uint64_t, uint64_t, double))(v13 + 16))(v17, a1, v18, v15);
  char v23 = 1;
  a2(v19);
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v23, (uint64_t)v11, v20, a3, a4, MEMORY[0x1E4F417F8], a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
}

uint64_t Tab<>.init<A>(value:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v19 = a5;
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v19 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for Optional();
  v12.n128_f64[0] = MEMORY[0x1F4188790](v11);
  uint64_t v14 = (char *)&v19 - v13;
  uint64_t v15 = *(void *)(a4 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v15 + 16))((char *)&v19 - v13, a1, a4, v12);
  uint64_t v16 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, a4);
  char v20 = 1;
  a2(v16);
  Tab.init(value:role:content:tabItem:)((uint64_t)v14, &v20, (uint64_t)v10, v17, v11, a3, MEMORY[0x1E4F417F8], v19);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 8))(a1, a4);
}

uint64_t Tab<>.init<>(value:role:content:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, uint64_t a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v11 = (char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v23 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v19 = *v18;
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v17, a1, v20, v15);
  char v26 = v19;
  a2(v21);
  uint64_t v24 = 0;
  memset(v23, 0, sizeof(v23));
  char v25 = v19;
  Tab.init(value:role:content:tabItem:)((uint64_t)v17, &v26, (uint64_t)v11, (uint64_t)v23, a3, a4, (uint64_t)&type metadata for DefaultTabLabel, a5);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 8))(a1, a3);
}

uint64_t Tab<>.init<A>(value:role:content:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, void (*a3)(uint64_t)@<X2>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v21 = a6;
  MEMORY[0x1F4188790](a1);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for Optional();
  v14.n128_f64[0] = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)&v20 - v15;
  LOBYTE(a2) = *a2;
  uint64_t v17 = *(void *)(a5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v17 + 16))((char *)&v20 - v15, a1, a5, v14);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v16, 0, 1, a5);
  char v25 = (char)a2;
  a3(v18);
  uint64_t v23 = 0;
  memset(v22, 0, sizeof(v22));
  char v24 = (char)a2;
  Tab.init(value:role:content:tabItem:)((uint64_t)v16, &v25, (uint64_t)v12, (uint64_t)v22, v13, a4, (uint64_t)&type metadata for DefaultTabLabel, v21);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v17 + 8))(a1, a5);
}

uint64_t Tab<>.init(value:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, void (*a3)(uint64_t)@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v28 = a4;
  uint64_t v29 = a3;
  uint64_t v30 = a8;
  MEMORY[0x1F4188790](a1);
  __n128 v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v28 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)&v28 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v25 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v23, a1, v24, v21);
  char v31 = 1;
  uint64_t v26 = a2(v25);
  v29(v26);
  Tab.init(value:role:content:tabItem:)((uint64_t)v23, &v31, (uint64_t)v17, (uint64_t)v14, a5, a6, a7, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a5);
}

uint64_t Tab<>.init(value:role:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X2>, uint64_t a3@<X3>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  void v30[2] = a5;
  char v31 = a4;
  v30[1] = a3;
  uint64_t v32 = a8;
  MEMORY[0x1F4188790](a1);
  __n128 v14 = (char *)v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)v30 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = *(void *)(v18 - 8);
  double v21 = MEMORY[0x1F4188790](v20);
  uint64_t v23 = (char *)v30 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = *v24;
  uint64_t v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t, double))(v19 + 16))(v23, a1, v26, v21);
  char v33 = v25;
  uint64_t v28 = a2(v27);
  v31(v28);
  Tab.init(value:role:content:tabItem:)((uint64_t)v23, &v33, (uint64_t)v17, (uint64_t)v14, a6, a7, a9, v32);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 8))(a1, a6);
}

uint64_t Tab<>.init<A>(value:content:label:)@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(uint64_t)@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>)
{
  uint64_t v28 = a5;
  uint64_t v29 = a4;
  uint64_t v26 = a3;
  uint64_t v27 = a2;
  uint64_t v30 = a9;
  MEMORY[0x1F4188790](a1);
  __n128 v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15);
  uint64_t v17 = (char *)&v26 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v18 = type metadata accessor for Optional();
  v19.n128_f64[0] = MEMORY[0x1F4188790](v18);
  double v21 = (char *)&v26 - v20;
  uint64_t v22 = *(void *)(a8 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v22 + 16))((char *)&v26 - v20, a1, a8, v19);
  uint64_t v23 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v21, 0, 1, a8);
  char v31 = 1;
  uint64_t v24 = v27(v23);
  v29(v24);
  Tab.init(value:role:content:tabItem:)((uint64_t)v21, &v31, (uint64_t)v17, (uint64_t)v14, v18, a6, a7, v30);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 8))(a1, a8);
}

uint64_t Tab<>.init<A>(value:role:content:label:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X1>, uint64_t a3@<X2>, void (*a4)(uint64_t)@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, uint64_t a9)
{
  uint64_t v27 = a8;
  uint64_t v28 = a7;
  v25[1] = a5;
  uint64_t v26 = a4;
  v25[0] = a3;
  MEMORY[0x1F4188790](a1);
  uint64_t v13 = (char *)v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14);
  uint64_t v16 = (char *)v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for Optional();
  v18.n128_f64[0] = MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)v25 - v19;
  LOBYTE(a2) = *a2;
  uint64_t v21 = *(void *)(a9 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, __n128))(v21 + 16))((char *)v25 - v19, a1, a9, v18);
  uint64_t v22 = (*(uint64_t (**)(char *, void, uint64_t, uint64_t))(v21 + 56))(v20, 0, 1, a9);
  char v29 = (char)a2;
  uint64_t v23 = ((uint64_t (*)(uint64_t))v25[0])(v22);
  v26(v23);
  Tab.init(value:role:content:tabItem:)((uint64_t)v20, &v29, (uint64_t)v16, (uint64_t)v13, v17, a6, v28, v27);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v21 + 8))(a1, a9);
}

uint64_t Tab<>._identifiedView.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v22 = a3;
  uint64_t v23 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = v8[3];
  uint64_t v11 = v8[4];
  uint64_t v24 = v8[2];
  uint64_t v9 = v24;
  uint64_t v25 = v10;
  uint64_t v26 = v11;
  uint64_t v27 = v12;
  uint64_t v28 = v13;
  uint64_t v14 = type metadata accessor for Tab<>.TabIdentifiedView();
  uint64_t v15 = *(void *)(v14 - 8);
  double v16 = MEMORY[0x1F4188790](v14);
  __n128 v18 = (char *)&v21 - v17;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v7, v3, a1, v16);
  uint64_t v19 = type metadata accessor for Tab();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v19 - 8) + 32))(v18, v7, v19);
  swift_getWitnessTable();
  View.tabViewTag<A>(_:)(v3, v14, v9, v22);
  return (*(uint64_t (**)(char *, uint64_t))(v15 + 8))(v18, v14);
}

uint64_t type metadata accessor for Tab<>.TabIdentifiedView()
{
  return swift_getGenericMetadata();
}

uint64_t View.tabViewTag<A>(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  _OWORD v17[2] = a2;
  v17[1] = a4;
  uint64_t v6 = type metadata accessor for Optional();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)v17 - v8;
  uint64_t v10 = type metadata accessor for TagValueTraitKey.Value();
  uint64_t v11 = *(void *)(v10 - 8);
  double v12 = MEMORY[0x1F4188790](v10);
  uint64_t v14 = (char *)v17 - v13;
  if (a3 == MEMORY[0x1E4FBC248])
  {
    (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(MEMORY[0x1E4FBC248] - 8) + 56))(v14, 1, 1, v12);
    goto LABEL_5;
  }
  (*(void (**)(char *, uint64_t, uint64_t, double))(v7 + 16))(v9, a1, v6, v12);
  uint64_t v15 = *(void *)(a3 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48))(v9, 1, a3);
  if (result != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v14, v9, a3);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v14, 0, 1, a3);
LABEL_5:
    type metadata accessor for TagValueTraitKey();
    swift_getWitnessTable();
    View._trait<A>(_:_:)();
    return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  }
  __break(1u);
  return result;
}

void Tab<>.body.getter()
{
}

uint64_t sub_187DB8C0C()
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16))(v2, v1, v0);
}

uint64_t protocol witness for TabContent._identifiedView.getter in conformance <> Tab<A, B, C>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return Tab<>._identifiedView.getter(a1, *(void *)(a2 - 8), a3);
}

void protocol witness for TabContent.body.getter in conformance <> Tab<A, B, C>()
{
}

uint64_t Tab<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, unsigned char *a6@<X8>, uint64_t a7)
{
  return Tab<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<A>(_:image:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, unsigned char *a6@<X8>, uint64_t a7, uint64_t a8)
{
  return Tab<>.init<A>(_:image:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:image:));
}

uint64_t Tab<>.init<>(_:image:content:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, uint64_t a3)
{
  uint64_t v17 = a2;
  double v3 = MEMORY[0x1F4188790](a1);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v20 = 1;
  v6(v3);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  uint64_t v13 = v12 & 1;
  uint64_t v14 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18[0] = v7;
  v18[1] = v9;
  void v18[2] = v13;
  v18[3] = v11;
  void v18[4] = v14;
  char v19 = 1;
  return Tab.init<>(role:content:tabItem:)(&v20, (uint64_t)v5, (uint64_t)v18, a3, (uint64_t)&type metadata for DefaultTabLabel, v17);
}

uint64_t Tab<>.init<>(_:image:role:content:)@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>, uint64_t a3, uint64_t a4)
{
  char v19 = a2;
  double v4 = MEMORY[0x1F4188790](a1);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v22 = *v7;
  v8(v4);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t v15 = v14 & 1;
  uint64_t v16 = Image.init(_:bundle:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v20[0] = v9;
  v20[1] = v11;
  v20[2] = v15;
  v20[3] = v13;
  v20[4] = v16;
  char v21 = 1;
  return Tab.init<>(role:content:tabItem:)(&v22, (uint64_t)v6, (uint64_t)v20, a4, (uint64_t)&type metadata for DefaultTabLabel, v19);
}

uint64_t Tab<>.init<A>(_:systemImage:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, unsigned char *a6@<X8>, uint64_t a7)
{
  return Tab<>.init<A>(_:image:content:)(a1, a2, a3, a4, a5, a6, a7, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X5>, uint64_t a5@<X6>, unsigned char *a6@<X8>, uint64_t a7, void (*a8)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v26 = a3;
  uint64_t v27 = a6;
  uint64_t v12 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  char v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v16 = MEMORY[0x1F4188790](v15);
  uint64_t v18 = (char *)&v26 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v34 = 1;
  v19(v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a1, a5);
  a8(&v28, v14, a2, v26, a5, a7);
  uint64_t v20 = v28;
  uint64_t v21 = v29;
  uint64_t v22 = v30;
  uint64_t v23 = v31;
  uint64_t v24 = v32;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(a1, a5);
  uint64_t v28 = v20;
  uint64_t v29 = v21;
  uint64_t v30 = v22;
  uint64_t v31 = v23;
  uint64_t v32 = v24;
  char v33 = 1;
  return Tab.init<>(role:content:tabItem:)(&v34, (uint64_t)v18, (uint64_t)&v28, a4, (uint64_t)&type metadata for DefaultTabLabel, v27);
}

uint64_t Tab<>.init<A>(_:systemImage:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, unsigned char *a6@<X8>, uint64_t a7, uint64_t a8)
{
  return Tab<>.init<A>(_:image:role:content:)(a1, a2, a3, a4, a5, a6, a7, a8, (void (*)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))Label<>.init<A>(_:systemImage:));
}

uint64_t Tab<>.init<A>(_:image:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X6>, uint64_t a5@<X7>, unsigned char *a6@<X8>, uint64_t a7, uint64_t a8, void (*a9)(uint64_t *__return_ptr, char *, uint64_t, uint64_t, uint64_t, uint64_t))
{
  uint64_t v28 = a3;
  uint64_t v29 = a6;
  uint64_t v13 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  char v19 = (char *)&v28 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v36 = *v20;
  v21(v17);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a1, a5);
  a9(&v30, v15, a2, v28, a5, a8);
  uint64_t v22 = v30;
  uint64_t v23 = v31;
  uint64_t v24 = v32;
  uint64_t v25 = v33;
  uint64_t v26 = v34;
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(a1, a5);
  uint64_t v30 = v22;
  uint64_t v31 = v23;
  uint64_t v32 = v24;
  uint64_t v33 = v25;
  uint64_t v34 = v26;
  char v35 = 1;
  return Tab.init<>(role:content:tabItem:)(&v36, (uint64_t)v19, (uint64_t)&v30, a4, (uint64_t)&type metadata for DefaultTabLabel, v29);
}

uint64_t Tab<>.init<>(_:systemImage:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, unsigned char *a4@<X8>, uint64_t a5)
{
  uint64_t v22 = a4;
  uint64_t v21 = a5;
  double v7 = MEMORY[0x1F4188790](a1);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v25 = 1;
  v10(v7);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v20 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  uint64_t v16 = v15 & 1;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  *(_DWORD *)(v17 + 32) = 0;
  *(unsigned char *)(v17 + 36) = 1;
  *(_OWORD *)(v17 + 40) = xmmword_18834C6B0;
  *(void *)(v17 + 56) = a2;
  *(void *)(v17 + 64) = a3;
  *(_OWORD *)(v17 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v17 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23[0] = v20;
  v23[1] = v12;
  _OWORD v23[2] = v16;
  v23[3] = v14;
  unsigned char v23[4] = v17;
  char v24 = 1;
  return Tab.init<>(role:content:tabItem:)(&v25, (uint64_t)v9, (uint64_t)v23, v21, (uint64_t)&type metadata for DefaultTabLabel, v22);
}

uint64_t Tab<>.init<>(_:systemImage:role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X4>, uint64_t a3@<X5>, unsigned char *a4@<X8>, uint64_t a5, uint64_t a6)
{
  char v24 = a4;
  uint64_t v23 = a6;
  double v8 = MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v27 = *v11;
  v12(v8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v22 = Text.init(_:tableName:bundle:comment:)();
  uint64_t v14 = v13;
  uint64_t v16 = v15;
  uint64_t v18 = v17 & 1;
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(0, (unint64_t *)&lazy cache variable for type metadata for ImageProviderBox<Image.NamedImageProvider>, (uint64_t (*)(void))lazy protocol witness table accessor for type Image.NamedImageProvider and conformance Image.NamedImageProvider, MEMORY[0x1E4F41508], MEMORY[0x1E4F3FCE0]);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = a2;
  *(void *)(v19 + 24) = a3;
  *(_DWORD *)(v19 + 32) = 0;
  *(unsigned char *)(v19 + 36) = 1;
  *(_OWORD *)(v19 + 40) = xmmword_18834C6B0;
  *(void *)(v19 + 56) = a2;
  *(void *)(v19 + 64) = a3;
  *(_OWORD *)(v19 + 72) = xmmword_18834C6D0;
  *(unsigned char *)(v19 + 88) = 0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v25[0] = v22;
  v25[1] = v14;
  void v25[2] = v18;
  _OWORD v25[3] = v16;
  v25[4] = v19;
  char v26 = 1;
  return Tab.init<>(role:content:tabItem:)(&v27, (uint64_t)v10, (uint64_t)v25, v23, (uint64_t)&type metadata for DefaultTabLabel, v24);
}

uint64_t Tab<>.init<>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, unsigned char *a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  double v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v12 = 1;
  v8(v5);
  return Tab.init<>(role:content:tabItem:)(&v12, (uint64_t)v7, v9, a2, MEMORY[0x1E4F417F8], a3);
}

uint64_t Tab<>.init<>(role:content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, unsigned char *a3@<X8>)
{
  double v5 = MEMORY[0x1F4188790](a1);
  double v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  char v15 = *v9;
  char v8 = v15;
  v10(v5);
  uint64_t v13 = 0;
  memset(v12, 0, sizeof(v12));
  char v14 = v8;
  return Tab.init<>(role:content:tabItem:)(&v15, (uint64_t)v7, (uint64_t)v12, a2, (uint64_t)&type metadata for DefaultTabLabel, a3);
}

uint64_t Tab<>.init(content:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X2>, uint64_t a3@<X4>, uint64_t a4@<X5>, unsigned char *a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = &v18[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v12 = MEMORY[0x1F4188790](v11);
  char v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v19 = 1;
  uint64_t v16 = v15(v12);
  a2(v16);
  return Tab.init<>(role:content:tabItem:)(&v19, (uint64_t)v14, (uint64_t)v10, a3, a4, a5);
}

uint64_t Tab<>.init(role:content:label:)@<X0>(uint64_t a1@<X0>, void (*a2)(uint64_t)@<X3>, uint64_t a3@<X5>, uint64_t a4@<X6>, unsigned char *a5@<X8>)
{
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = &v19[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  double v12 = MEMORY[0x1F4188790](v11);
  char v14 = &v19[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  char v20 = *v15;
  uint64_t v17 = v16(v12);
  a2(v17);
  return Tab.init<>(role:content:tabItem:)(&v20, (uint64_t)v14, (uint64_t)v10, a3, a4, a5);
}

uint64_t Tab<>.TabIdentifiedView.body.getter@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v65 = *(a1 - 1);
  uint64_t v66 = *(void *)(v65 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v64 = (char *)&v47 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v5 = *(void *)(v4 + 24);
  uint64_t v68 = *(void *)(v4 + 40);
  uint64_t v6 = type metadata accessor for VStack();
  uint64_t v63 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v62 = (char *)&v47 - v7;
  uint64_t v60 = a1[4];
  type metadata accessor for ModifiedContent();
  type metadata accessor for ImageProviderBox<Image.NamedImageProvider>(255, (unint64_t *)&lazy cache variable for type metadata for ViewInputFlagModifier<AccessibilityShowsLabelIcon>, (uint64_t (*)(void))lazy protocol witness table accessor for type AccessibilityShowsLabelIcon and conformance AccessibilityShowsLabelIcon, (uint64_t)&type metadata for AccessibilityShowsLabelIcon, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ViewInputFlagModifier);
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  uint64_t v8 = type metadata accessor for ModifiedContent();
  uint64_t v94 = a1[6];
  uint64_t v9 = v94;
  uint64_t v95 = &protocol witness table for UpdateDefaultTabFill;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v93 = &protocol witness table for ViewInputFlagModifier<A>;
  uint64_t v90 = swift_getWitnessTable();
  unint64_t v91 = &protocol witness table for AccessibilityAttachmentModifier;
  uint64_t v88 = swift_getWitnessTable();
  unint64_t v89 = &protocol witness table for AccessibilityDetachedPropertyWriterModifier;
  uint64_t v10 = swift_getWitnessTable();
  long long v82 = &type metadata for LabelPlatformItemsStrategy;
  long long v83 = (ValueMetadata *)v8;
  long long v84 = &type metadata for TabItem.TraitKey;
  long long v85 = &protocol witness table for LabelPlatformItemsStrategy;
  uint64_t v86 = v10;
  unint64_t v87 = &protocol witness table for TabItem.TraitKey;
  type metadata accessor for PlatformItemTraitWriter();
  uint64_t v51 = v6;
  type metadata accessor for ModifiedContent();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>();
  uint64_t v11 = type metadata accessor for ModifiedContent();
  uint64_t v59 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11);
  uint64_t v52 = (uint64_t)&v47 - v12;
  uint64_t v50 = swift_getWitnessTable();
  uint64_t v80 = v50;
  long long v81 = &protocol witness table for PlatformItemTraitWriter<A, B, C>;
  uint64_t v13 = swift_getWitnessTable();
  unint64_t v14 = lazy protocol witness table accessor for type TabPlatformIdentified and conformance TabPlatformIdentified();
  uint64_t v78 = v13;
  unint64_t v79 = v14;
  uint64_t v15 = swift_getWitnessTable();
  unint64_t v16 = lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>();
  uint64_t v76 = v15;
  unint64_t v77 = v16;
  uint64_t v55 = v11;
  uint64_t v54 = swift_getWitnessTable();
  long long v82 = (ValueMetadata *)v11;
  long long v83 = &type metadata for TabOptions.TraitKey;
  long long v84 = (ValueMetadata *)v54;
  long long v85 = &protocol witness table for TabOptions.TraitKey;
  uint64_t v56 = MEMORY[0x1E4F41450];
  OpaqueTypeMetadata2 = swift_getOpaqueTypeMetadata2();
  uint64_t v18 = *(void *)(OpaqueTypeMetadata2 - 8);
  uint64_t v57 = OpaqueTypeMetadata2;
  uint64_t v58 = v18;
  MEMORY[0x1F4188790](OpaqueTypeMetadata2);
  uint64_t v49 = (char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v20);
  uint64_t v53 = (char *)&v47 - v21;
  uint64_t v70 = a1[2];
  uint64_t v22 = v70;
  uint64_t v71 = v5;
  uint64_t v48 = v5;
  uint64_t v23 = v60;
  uint64_t v24 = v68;
  uint64_t v72 = v60;
  uint64_t v73 = v68;
  uint64_t v25 = v9;
  uint64_t v74 = v9;
  uint64_t v26 = v61;
  uint64_t v75 = v61;
  static HorizontalAlignment.center.getter();
  char v27 = v62;
  VStack.init(alignment:spacing:content:)();
  void v69[2] = v22;
  v69[3] = v5;
  uint64_t v28 = v23;
  v69[4] = v23;
  v69[5] = v24;
  uint64_t v29 = v25;
  v69[6] = v25;
  v69[7] = v26;
  uint64_t v30 = v26;
  uint64_t v31 = v51;
  uint64_t v32 = v52;
  uint64_t v33 = v28;
  View.tabItem<A>(_:)((void (*)(void))partial apply for closure #2 in Tab<>.TabIdentifiedView.body.getter, (uint64_t)v69, v51, v50, v29, v52);
  (*(void (**)(char *, uint64_t))(v63 + 8))(v27, v31);
  char v35 = v64;
  uint64_t v34 = v65;
  (*(void (**)(char *, uint64_t, void *))(v65 + 16))(v64, v30, a1);
  unint64_t v36 = (*(unsigned __int8 *)(v34 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80);
  uint64_t v37 = (char *)swift_allocObject();
  uint64_t v38 = v48;
  *((void *)v37 + 2) = v22;
  *((void *)v37 + 3) = v38;
  uint64_t v39 = v68;
  *((void *)v37 + 4) = v33;
  *((void *)v37 + 5) = v39;
  *((void *)v37 + 6) = v29;
  (*(void (**)(char *, char *, void *))(v34 + 32))(&v37[v36], v35, a1);
  char v40 = v49;
  uint64_t v41 = (ValueMetadata *)v54;
  uint64_t v42 = (ValueMetadata *)v55;
  View.transformTrait<A>(_:transform:)();
  swift_release();
  (*(void (**)(uint64_t, ValueMetadata *))(v59 + 8))(v32, v42);
  long long v82 = v42;
  long long v83 = &type metadata for TabOptions.TraitKey;
  long long v84 = v41;
  long long v85 = &protocol witness table for TabOptions.TraitKey;
  swift_getOpaqueTypeConformance2();
  uint64_t v43 = v53;
  uint64_t v44 = v57;
  static ViewBuilder.buildExpression<A>(_:)(v40);
  unint64_t v45 = *(void (**)(char *, uint64_t))(v58 + 8);
  v45(v40, v44);
  static ViewBuilder.buildExpression<A>(_:)(v43);
  return ((uint64_t (*)(char *, uint64_t))v45)(v43, v44);
}

uint64_t closure #1 in Tab<>.TabIdentifiedView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for Tab();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v8 + 48));
  static ViewBuilder.buildExpression<A>(_:)(v7);
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, a3);
}

uint64_t closure #2 in Tab<>.TabIdentifiedView.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v8 = (char *)&v11 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = type metadata accessor for Tab();
  static ViewBuilder.buildExpression<A>(_:)(a1 + *(int *)(v9 + 52));
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, a4);
}

uint64_t protocol witness for static _ViewTraitKey.defaultValue.getter in conformance TabOptions.TraitKey@<X0>(uint64_t a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  char v2 = HIBYTE(static TabOptions.TraitKey.defaultValue);
  char v3 = byte_1E90FC582;
  uint64_t v4 = qword_1E90FC588;
  uint64_t v5 = unk_1E90FC590;
  __int16 v6 = *(__int16 *)((char *)&word_1E90FC598 + 1);
  uint64_t v7 = qword_1E90FC5A0;
  char v8 = word_1E90FC5A8;
  char v9 = HIBYTE(word_1E90FC5A8);
  *(unsigned char *)a1 = static TabOptions.TraitKey.defaultValue;
  *(unsigned char *)(a1 + 1) = v2;
  *(unsigned char *)(a1 + 2) = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  unsigned __int8 v10 = word_1E90FC598;
  *(unsigned char *)(a1 + 24) = word_1E90FC598;
  *(_WORD *)(a1 + 25) = v6;
  *(void *)(a1 + 32) = v7;
  *(unsigned char *)(a1 + 40) = v8;
  *(unsigned char *)(a1 + 41) = v9;
  outlined copy of TabCustomizationID?(v4, v5, v10);

  return swift_bridgeObjectRetain();
}

uint64_t associated type witness table accessor for TabContent.Body : TabContent in <> Tab<A, B, C>()
{
  return swift_getWitnessTable();
}

uint64_t associated type witness table accessor for TabContent._IdentifiedView : View in <> Tab<A, B, C>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t type metadata completion function for Tab()
{
  uint64_t result = type metadata accessor for Optional();
  if (v1 <= 0x3F)
  {
    uint64_t result = swift_checkMetadataState();
    if (v2 <= 0x3F)
    {
      uint64_t result = swift_checkMetadataState();
      if (v3 <= 0x3F)
      {
        swift_initStructMetadata();
        return 0;
      }
    }
  }
  return result;
}

uint64_t type metadata accessor for Tab()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187DBA6DC()
{
  return swift_getWitnessTable();
}

uint64_t type metadata completion function for Tab<>.TabIdentifiedView()
{
  uint64_t result = type metadata accessor for Tab();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for Tab(uint64_t *a1, uint64_t *a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v5 = a3[3];
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84)) {
    size_t v8 = *(void *)(v7 + 64);
  }
  else {
    size_t v8 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v9 = *(void *)(v5 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = *(void *)(a3[4] - 8);
  uint64_t v12 = *(_DWORD *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = (*(unsigned char *)(v9 + 80) | *(unsigned char *)(v7 + 80) | *(unsigned char *)(v11 + 80));
  if (v14 <= 7
    && v13 + ((*(void *)(*(void *)(v5 - 8) + 64) + v12 + ((v10 + v8 + 1) & ~v10)) & ~v12) + 1 <= 0x18
    && ((*(_DWORD *)(v9 + 80) | *(_DWORD *)(v7 + 80) | *(_DWORD *)(v11 + 80)) & 0x100000) == 0)
  {
    uint64_t v25 = *(void *)(*(void *)(v5 - 8) + 64);
    uint64_t v26 = a3[4];
    uint64_t v27 = a3[3];
    uint64_t v23 = ~v10;
    uint64_t v24 = ~v12;
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
    {
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
    }
    *((unsigned char *)a1 + v8) = *((unsigned char *)a2 + v8);
    uint64_t v18 = (char *)a2 + v8 + v10;
    uint64_t v19 = ((unint64_t)a1 + v8 + v10 + 1) & v23;
    uint64_t v20 = (unint64_t)(v18 + 1) & v23;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v19, v20, v27);
    uint64_t v21 = (v19 + v25 + v12) & v24;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v21, (v20 + v25 + v12) & v24, v26);
    *(unsigned char *)(v21 + v13) = *(unsigned char *)(((v20 + v25 + v12) & v24) + v13);
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t destroy for Tab(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[2];
  uint64_t v5 = *(void *)(v4 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4)) {
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  }
  uint64_t v6 = *(void *)(v5 + 64);
  BOOL v7 = *(_DWORD *)(v5 + 84) == 0;
  uint64_t v8 = *(void *)(a2[3] - 8) + 8;
  uint64_t v9 = v8;
  uint64_t v10 = a1 + v6;
  if (v7) {
    ++v10;
  }
  unint64_t v11 = (v10 + *(unsigned __int8 *)(v8 + 72) + 1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 72);
  (*(void (**)(unint64_t))v8)(v11);
  uint64_t v12 = *(void *)(a2[4] - 8);
  uint64_t v13 = *(uint64_t (**)(unint64_t))(v12 + 8);
  unint64_t v14 = (v11 + *(void *)(v9 + 56) + *(unsigned __int8 *)(v12 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);

  return v13(v14);
}

char *initializeWithCopy for Tab(char *a1, char *a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    uint64_t v12 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v11 = v7 + 56;
    v12(a1, 0, 1, v6);
    int v8 = *(_DWORD *)(v11 + 28);
    size_t v9 = *(void *)(v11 + 8);
  }
  if (v8) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v9 + 1;
  }
  unint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *unint64_t v14 = *v15;
  uint64_t v16 = *(void *)(a3[3] - 8);
  uint64_t v17 = v16 + 16;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (unint64_t)&v14[v18 + 1] & ~v18;
  uint64_t v20 = (unint64_t)&v15[v18 + 1] & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 16))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 48);
  uint64_t v22 = *(void *)(a3[4] - 8);
  uint64_t v23 = v22 + 16;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = v21 + v24;
  uint64_t v26 = (v25 + v19) & ~v24;
  uint64_t v27 = (v25 + v20) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 16))(v26, v27);
  *(unsigned char *)(*(void *)(v23 + 48) + v26) = *(unsigned char *)(*(void *)(v23 + 48) + v27);
  return a1;
}

char *assignWithCopy for Tab(char *a1, char *a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy(a1, a2, v13);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  char *v15 = *v16;
  uint64_t v17 = *(void *)(a3[3] - 8);
  uint64_t v18 = v17 + 24;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (unint64_t)&v15[v19 + 1] & ~v19;
  uint64_t v21 = (unint64_t)&v16[v19 + 1] & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 24))(v20, v21);
  uint64_t v22 = *(void *)(v18 + 40);
  uint64_t v23 = *(void *)(a3[4] - 8);
  uint64_t v24 = v23 + 24;
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = v22 + v25;
  uint64_t v27 = (v26 + v20) & ~v25;
  uint64_t v28 = (v26 + v21) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v23 + 24))(v27, v28);
  *(unsigned char *)(*(void *)(v24 + 40) + v27) = *(unsigned char *)(*(void *)(v24 + 40) + v28);
  return a1;
}

char *initializeWithTake for Tab(char *a1, char *a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    int v8 = *(_DWORD *)(v7 + 84);
    size_t v9 = *(void *)(v7 + 64);
    if (v8) {
      size_t v10 = v9;
    }
    else {
      size_t v10 = v9 + 1;
    }
    memcpy(a1, a2, v10);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    size_t v12 = *(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56);
    uint64_t v11 = v7 + 56;
    v12(a1, 0, 1, v6);
    int v8 = *(_DWORD *)(v11 + 28);
    size_t v9 = *(void *)(v11 + 8);
  }
  if (v8) {
    size_t v13 = v9;
  }
  else {
    size_t v13 = v9 + 1;
  }
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *uint64_t v14 = *v15;
  uint64_t v16 = *(void *)(a3[3] - 8);
  uint64_t v17 = v16 + 32;
  uint64_t v18 = *(unsigned __int8 *)(v16 + 80);
  uint64_t v19 = (unint64_t)&v14[v18 + 1] & ~v18;
  uint64_t v20 = (unint64_t)&v15[v18 + 1] & ~v18;
  (*(void (**)(uint64_t, uint64_t))(v16 + 32))(v19, v20);
  uint64_t v21 = *(void *)(v17 + 32);
  uint64_t v22 = *(void *)(a3[4] - 8);
  uint64_t v23 = v22 + 32;
  uint64_t v24 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v25 = v21 + v24;
  uint64_t v26 = (v25 + v19) & ~v24;
  uint64_t v27 = (v25 + v20) & ~v24;
  (*(void (**)(uint64_t, uint64_t))(v22 + 32))(v26, v27);
  *(unsigned char *)(*(void *)(v23 + 32) + v26) = *(unsigned char *)(*(void *)(v23 + 32) + v27);
  return a1;
}

char *assignWithTake for Tab(char *a1, char *a2, void *a3)
{
  uint64_t v6 = a3[2];
  uint64_t v7 = *(void *)(v6 - 8);
  int v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_12;
    }
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  else
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_12;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    int v11 = *(_DWORD *)(v7 + 84);
    size_t v12 = *(void *)(v7 + 64);
  }
  if (v11) {
    size_t v13 = v12;
  }
  else {
    size_t v13 = v12 + 1;
  }
  memcpy(a1, a2, v13);
LABEL_12:
  if (*(_DWORD *)(v7 + 84)) {
    uint64_t v14 = *(void *)(v7 + 64);
  }
  else {
    uint64_t v14 = *(void *)(v7 + 64) + 1;
  }
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  char *v15 = *v16;
  uint64_t v17 = *(void *)(a3[3] - 8);
  uint64_t v18 = v17 + 40;
  uint64_t v19 = *(unsigned __int8 *)(v17 + 80);
  uint64_t v20 = (unint64_t)&v15[v19 + 1] & ~v19;
  uint64_t v21 = (unint64_t)&v16[v19 + 1] & ~v19;
  (*(void (**)(uint64_t, uint64_t))(v17 + 40))(v20, v21);
  uint64_t v22 = *(void *)(v18 + 24);
  uint64_t v23 = *(void *)(a3[4] - 8);
  uint64_t v24 = v23 + 40;
  uint64_t v25 = *(unsigned __int8 *)(v23 + 80);
  uint64_t v26 = v22 + v25;
  uint64_t v27 = (v26 + v20) & ~v25;
  uint64_t v28 = (v26 + v21) & ~v25;
  (*(void (**)(uint64_t, uint64_t))(v23 + 40))(v27, v28);
  *(unsigned char *)(*(void *)(v24 + 24) + v27) = *(unsigned char *)(*(void *)(v24 + 24) + v28);
  return a1;
}

uint64_t getEnumTagSinglePayload for Tab(unsigned __int16 *a1, unsigned int a2, void *a3)
{
  uint64_t v4 = *(void *)(a3[2] - 8);
  int v5 = *(_DWORD *)(v4 + 84);
  if (v5) {
    unsigned int v6 = v5 - 1;
  }
  else {
    unsigned int v6 = 0;
  }
  uint64_t v7 = a3[4];
  uint64_t v8 = *(void *)(a3[3] - 8);
  unsigned int v9 = *(_DWORD *)(v8 + 84);
  if (v9 <= v6) {
    unsigned int v10 = v6;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v8 + 84);
  }
  uint64_t v11 = *(void *)(v7 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v13 = *(void *)(*(void *)(a3[3] - 8) + 64);
  uint64_t v14 = *(unsigned __int8 *)(v11 + 80);
  if (*(_DWORD *)(v11 + 84) <= v10) {
    unsigned int v15 = v10;
  }
  else {
    unsigned int v15 = *(_DWORD *)(v11 + 84);
  }
  if (v5) {
    uint64_t v16 = *(void *)(*(void *)(a3[2] - 8) + 64);
  }
  else {
    uint64_t v16 = *(void *)(*(void *)(a3[2] - 8) + 64) + 1;
  }
  if (!a2) {
    return 0;
  }
  unsigned int v17 = a2 - v15;
  if (a2 <= v15) {
    goto LABEL_33;
  }
  uint64_t v18 = *(void *)(*(void *)(v7 - 8) + 64) + ((v13 + v14 + ((v16 + v12 + 1) & ~v12)) & ~v14) + 1;
  char v19 = 8 * v18;
  if (v18 <= 3)
  {
    unsigned int v21 = ((v17 + ~(-1 << v19)) >> v19) + 1;
    if (HIWORD(v21))
    {
      int v20 = *(_DWORD *)((char *)a1 + v18);
      if (!v20) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v21 > 0xFF)
    {
      int v20 = *(unsigned __int16 *)((char *)a1 + v18);
      if (!*(unsigned __int16 *)((char *)a1 + v18)) {
        goto LABEL_33;
      }
      goto LABEL_23;
    }
    if (v21 < 2)
    {
LABEL_33:
      if (v15)
      {
        if (v6 == v15)
        {
          unsigned int v25 = (*(uint64_t (**)(void))(v4 + 48))();
          if (v25 >= 2) {
            return v25 - 1;
          }
          else {
            return 0;
          }
        }
        else
        {
          uint64_t v27 = ((unint64_t)a1 + v16 + v12 + 1) & ~v12;
          if (v9 == v15)
          {
            uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
            uint64_t v29 = *(unsigned int *)(v8 + 84);
            uint64_t v30 = a3[3];
          }
          else
          {
            uint64_t v27 = (v27 + v13 + v14) & ~v14;
            uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
            uint64_t v29 = *(unsigned int *)(v11 + 84);
            uint64_t v30 = a3[4];
          }
          return v28(v27, v29, v30);
        }
      }
      return 0;
    }
  }
  int v20 = *((unsigned __int8 *)a1 + v18);
  if (!*((unsigned char *)a1 + v18)) {
    goto LABEL_33;
  }
LABEL_23:
  int v22 = (v20 - 1) << v19;
  if (v18 > 3) {
    int v22 = 0;
  }
  if (*(_DWORD *)(*(void *)(v7 - 8) + 64)
     + ((v13 + v14 + ((v16 + v12 + 1) & ~v12)) & ~v14) == -1)
  {
    int v24 = 0;
  }
  else
  {
    if (v18 <= 3) {
      int v23 = *(_DWORD *)(*(void *)(v7 - 8) + 64)
    }
          + ((v13 + v14 + ((v16 + v12 + 1) & ~v12)) & ~v14)
          + 1;
    else {
      int v23 = 4;
    }
    switch(v23)
    {
      case 2:
        int v24 = *a1;
        break;
      case 3:
        int v24 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v24 = *(_DWORD *)a1;
        break;
      default:
        int v24 = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v15 + (v24 | v22) + 1;
}

void storeEnumTagSinglePayload for Tab(char *a1, unsigned int a2, unsigned int a3, void *a4)
{
  int v6 = 0;
  uint64_t v7 = *(void *)(a4[2] - 8);
  int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = a4[4];
  uint64_t v10 = *(void *)(a4[3] - 8);
  if (v8) {
    unsigned int v11 = v8 - 1;
  }
  else {
    unsigned int v11 = 0;
  }
  uint64_t v12 = *(void *)(a4[3] - 8);
  unsigned int v13 = *(_DWORD *)(v10 + 84);
  if (v13 <= v11) {
    unsigned int v14 = v11;
  }
  else {
    unsigned int v14 = *(_DWORD *)(v10 + 84);
  }
  uint64_t v15 = *(void *)(v9 - 8);
  uint64_t v16 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v17 = *(void *)(v10 + 64);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  if (*(_DWORD *)(v15 + 84) <= v14) {
    unsigned int v19 = v14;
  }
  else {
    unsigned int v19 = *(_DWORD *)(v15 + 84);
  }
  if (v8) {
    uint64_t v20 = *(void *)(*(void *)(a4[2] - 8) + 64);
  }
  else {
    uint64_t v20 = *(void *)(*(void *)(a4[2] - 8) + 64) + 1;
  }
  size_t v21 = *(void *)(*(void *)(v9 - 8) + 64) + ((v17 + v18 + ((v20 + v16 + 1) & ~v16)) & ~v18) + 1;
  BOOL v22 = a3 >= v19;
  unsigned int v23 = a3 - v19;
  if (v23 == 0 || !v22)
  {
LABEL_22:
    if (v19 < a2) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  if (v21 > 3)
  {
    int v6 = 1;
    if (v19 < a2) {
      goto LABEL_23;
    }
    goto LABEL_30;
  }
  unsigned int v24 = ((v23 + ~(-1 << (8 * v21))) >> (8 * v21)) + 1;
  if (!HIWORD(v24))
  {
    if (v24 >= 0x100) {
      int v6 = 2;
    }
    else {
      int v6 = v24 > 1;
    }
    goto LABEL_22;
  }
  int v6 = 4;
  if (v19 < a2)
  {
LABEL_23:
    unsigned int v25 = ~v19 + a2;
    if (v21 < 4)
    {
      int v26 = (v25 >> (8 * v21)) + 1;
      if (v21)
      {
        int v27 = v25 & ~(-1 << (8 * v21));
        bzero(a1, v21);
        if (v21 == 3)
        {
          *(_WORD *)a1 = v27;
          a1[2] = BYTE2(v27);
        }
        else if (v21 == 2)
        {
          *(_WORD *)a1 = v27;
        }
        else
        {
          *a1 = v27;
        }
      }
    }
    else
    {
      bzero(a1, v21);
      *(_DWORD *)a1 = v25;
      int v26 = 1;
    }
    switch(v6)
    {
      case 1:
        a1[v21] = v26;
        return;
      case 2:
        *(_WORD *)&a1[v21] = v26;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v21] = v26;
        return;
      default:
        return;
    }
  }
LABEL_30:
  switch(v6)
  {
    case 1:
      a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 2:
      *(_WORD *)&a1[v21] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_35;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x187DBBB6CLL);
    case 4:
      *(_DWORD *)&a1[v21] = 0;
      goto LABEL_34;
    default:
LABEL_34:
      if (a2)
      {
LABEL_35:
        if (v11 == v19)
        {
          uint64_t v28 = a2 + 1;
          uint64_t v29 = *(void (**)(char *, uint64_t))(v7 + 56);
          v29(a1, v28);
        }
        else
        {
          unint64_t v30 = (unint64_t)&a1[v20 + 1 + v16] & ~v16;
          if (v13 == v19)
          {
            uint64_t v31 = *(void (**)(unint64_t))(v12 + 56);
          }
          else
          {
            unint64_t v30 = (v30 + v17 + v18) & ~v18;
            uint64_t v31 = *(void (**)(unint64_t))(v15 + 56);
          }
          v31(v30);
        }
      }
      return;
  }
}

uint64_t associated type witness table accessor for View.Body : View in Tab<A, B, C><>.TabIdentifiedView()
{
  return swift_getOpaqueTypeConformance2();
}

unint64_t lazy protocol witness table accessor for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>)
  {
    type metadata accessor for _ContainerValueWritingModifier<TabItemLabel_v0?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ContainerValueWritingModifier<TabItemLabel_v0?> and conformance _ContainerValueWritingModifier<A>);
  }
  return result;
}

uint64_t partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter()
{
  return partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter((uint64_t (*)(void, void, void, void, void, void))closure #1 in Tab<>.TabIdentifiedView.body.getter);
}

uint64_t partial apply for closure #2 in Tab<>.TabIdentifiedView.body.getter()
{
  return partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter((uint64_t (*)(void, void, void, void, void, void))closure #2 in Tab<>.TabIdentifiedView.body.getter);
}

uint64_t partial apply for closure #1 in Tab<>.TabIdentifiedView.body.getter(uint64_t (*a1)(void, void, void, void, void, void))
{
  return a1(v1[7], v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_187DBBC80()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  long long v9 = *(_OWORD *)(v0 + 32);
  uint64_t v3 = *(void *)(type metadata accessor for Tab<>.TabIdentifiedView() - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v0 + v4;
  uint64_t v6 = *(void *)(v2 - 8);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v6 + 48))(v0 + v4, 1, v2)) {
    (*(void (**)(unint64_t, uint64_t))(v6 + 8))(v0 + v4, v2);
  }
  uint64_t v7 = type metadata accessor for Tab();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v1 - 8) + 8))(v5 + *(int *)(v7 + 48), v1);
  (*(void (**)(uint64_t, void))(*(void *)(v9 - 8) + 8))(v5 + *(int *)(v7 + 52), v9);
  return swift_deallocObject();
}

uint64_t partial apply for closure #3 in Tab<>.TabIdentifiedView.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for Tab<>.TabIdentifiedView() - 8);
  uint64_t v4 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 56) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
  uint64_t result = type metadata accessor for Tab();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(v4 + *(int *)(result + 56));
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(v4 + *(int *)(result + 44));
  return result;
}

uint64_t destroy for TabOptions(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 24) != 255) {
    outlined consume of TabCustomizationID.Base();
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for TabOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(_WORD *)(a1 + 1) = *(_WORD *)(a2 + 1);
  int v4 = *(unsigned __int8 *)(a2 + 24);
  if (v4 == 255)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
    *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  }
  else
  {
    char v5 = v4 & 1;
    uint64_t v6 = *(void *)(a2 + 8);
    uint64_t v7 = *(void *)(a2 + 16);
    outlined copy of TabCustomizationID.Base();
    *(void *)(a1 + 8) = v6;
    *(void *)(a1 + 16) = v7;
    *(unsigned char *)(a1 + 24) = v5;
  }
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TabOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = a1 + 8;
  char v5 = (long long *)(a2 + 8);
  int v6 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 24) == 255)
  {
    if (v6 == 255)
    {
      long long v8 = *v5;
      *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
      *(_OWORD *)uint64_t v4 = v8;
    }
    else
    {
      char v12 = v6 & 1;
      uint64_t v13 = *(void *)(a2 + 8);
      uint64_t v14 = *(void *)(a2 + 16);
      outlined copy of TabCustomizationID.Base();
      *(void *)(a1 + 8) = v13;
      *(void *)(a1 + 16) = v14;
      *(unsigned char *)(a1 + 24) = v12;
    }
  }
  else if (v6 == 255)
  {
    outlined destroy of TabCustomizationID(a1 + 8);
    char v7 = *((unsigned char *)v5 + 16);
    *(_OWORD *)uint64_t v4 = *v5;
    *(unsigned char *)(v4 + 16) = v7;
  }
  else
  {
    char v9 = v6 & 1;
    uint64_t v10 = *(void *)(a2 + 8);
    uint64_t v11 = *(void *)(a2 + 16);
    outlined copy of TabCustomizationID.Base();
    *(void *)(a1 + 8) = v10;
    *(void *)(a1 + 16) = v11;
    *(unsigned char *)(a1 + 24) = v9;
    outlined consume of TabCustomizationID.Base();
  }
  *(unsigned char *)(a1 + 25) = *(unsigned char *)(a2 + 25);
  *(unsigned char *)(a1 + 26) = *(unsigned char *)(a2 + 26);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(unsigned char *)(a1 + 41) = *(unsigned char *)(a2 + 41);
  return a1;
}

uint64_t outlined destroy of TabCustomizationID(uint64_t a1)
{
  return a1;
}

uint64_t assignWithTake for TabOptions(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 2) = *(unsigned char *)(a2 + 2);
  uint64_t v4 = a1 + 8;
  uint64_t v5 = a2 + 8;
  if (*(unsigned __int8 *)(a1 + 24) != 255)
  {
    int v6 = *(unsigned __int8 *)(a2 + 24);
    if (v6 != 255)
    {
      *(_OWORD *)(a1 + 8) = *(_OWORD *)v5;
      *(unsigned char *)(a1 + 24) = v6 & 1;
      outlined consume of TabCustomizationID.Base();
      goto LABEL_6;
    }
    outlined destroy of TabCustomizationID(a1 + 8);
  }
  *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(v5 + 16);
LABEL_6:
  *(_WORD *)(a1 + 25) = *(_WORD *)(a2 + 25);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for TabOptions(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 42)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TabOptions(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_WORD *)(result + 40) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 42) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 32) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 42) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TabOptions()
{
  return &type metadata for TabOptions;
}

ValueMetadata *type metadata accessor for TabOptions.TraitKey()
{
  return &type metadata for TabOptions.TraitKey;
}

uint64_t sub_187DBC2E8()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t DropCoordinator.init(operation:items:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for DropCoordinator.Operation();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a3, a1, v6);
  uint64_t result = type metadata accessor for DropCoordinator();
  *(void *)(a3 + *(int *)(result + 28)) = a2;
  return result;
}

uint64_t type metadata accessor for DropCoordinator.Operation()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata accessor for DropCoordinator()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t type metadata completion function for DropCoordinator.Operation()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataMultiPayload();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DropCoordinator.Operation(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(void *)(v4 + 64);
  uint64_t v6 = *(_DWORD *)(v4 + 80);
  if (v6 <= 7 && (unint64_t)(v5 + 1) <= 0x18 && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    unsigned int v10 = a2[v5];
    if (v10 >= 2)
    {
      if (v5 <= 3) {
        uint64_t v11 = v5;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_18;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_18;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_18;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_18:
          int v13 = (v12 | ((v10 - 2) << (8 * v5))) + 2;
          unsigned int v14 = v12 + 2;
          if (v5 >= 4) {
            unsigned int v10 = v14;
          }
          else {
            unsigned int v10 = v13;
          }
          break;
        default:
          break;
      }
    }
    (*(void (**)(void *))(v4 + 16))(a1);
    *((unsigned char *)v3 + v5) = v10 == 1;
  }
  else
  {
    uint64_t v9 = *(void *)a2;
    *uint64_t v3 = *(void *)a2;
    uint64_t v3 = (void *)(v9 + ((v6 + 16) & ~v6));
    swift_retain();
  }
  return v3;
}

uint64_t initializeWithCopy for DropCoordinator.Operation(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithCopy for DropCoordinator.Operation(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 16))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t initializeWithTake for DropCoordinator.Operation(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v5 = a2[v4];
  unsigned int v6 = v5 - 2;
  if (v5 >= 2)
  {
    if (v4 <= 3) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = 4;
    }
    switch(v7)
    {
      case 1:
        int v8 = *a2;
        goto LABEL_10;
      case 2:
        int v8 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v8 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v8 = *(_DWORD *)a2;
LABEL_10:
        int v9 = (v8 | (v6 << (8 * v4))) + 2;
        unsigned int v5 = v8 + 2;
        if (v4 < 4) {
          unsigned int v5 = v9;
        }
        break;
      default:
        break;
    }
  }
  BOOL v10 = v5 == 1;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1);
  *(unsigned char *)(a1 + v4) = v10;
  return a1;
}

unsigned __int8 *assignWithTake for DropCoordinator.Operation(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = *(void *)(a3 + 16);
    uint64_t v6 = *(void *)(v5 - 8);
    uint64_t v7 = v6;
    uint64_t v8 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v9 = a2[v8];
    unsigned int v10 = v9 - 2;
    if (v9 >= 2)
    {
      if (v8 <= 3) {
        uint64_t v11 = v8;
      }
      else {
        uint64_t v11 = 4;
      }
      switch(v11)
      {
        case 1:
          int v12 = *a2;
          goto LABEL_11;
        case 2:
          int v12 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v12 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v12 = *(_DWORD *)a2;
LABEL_11:
          int v13 = (v12 | (v10 << (8 * v8))) + 2;
          unsigned int v9 = v12 + 2;
          if (v8 < 4) {
            unsigned int v9 = v13;
          }
          break;
        default:
          break;
      }
    }
    BOOL v14 = v9 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v7 + 32))(a1, a2, v5);
    a1[v8] = v14;
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for DropCoordinator.Operation(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if (a2 < 0xFF) {
    goto LABEL_20;
  }
  uint64_t v4 = v3 + 1;
  char v5 = 8 * (v3 + 1);
  if ((v3 + 1) <= 3)
  {
    unsigned int v8 = ((a2 + ~(-1 << v5) - 254) >> v5) + 1;
    if (HIWORD(v8))
    {
      int v6 = *(_DWORD *)((char *)a1 + v4);
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 > 0xFF)
    {
      int v6 = *(unsigned __int16 *)((char *)a1 + v4);
      if (!*(unsigned __int16 *)((char *)a1 + v4)) {
        goto LABEL_20;
      }
      goto LABEL_12;
    }
    if (v8 < 2)
    {
LABEL_20:
      unsigned int v10 = *((unsigned __int8 *)a1 + v3);
      if (v10 >= 2) {
        return (v10 ^ 0xFF) + 1;
      }
      else {
        return 0;
      }
    }
  }
  int v6 = *((unsigned __int8 *)a1 + v4);
  if (!*((unsigned char *)a1 + v4)) {
    goto LABEL_20;
  }
LABEL_12:
  int v9 = (v6 - 1) << v5;
  if (v4 > 3) {
    int v9 = 0;
  }
  if (v4)
  {
    if (v4 > 3) {
      LODWORD(v4) = 4;
    }
    switch((int)v4)
    {
      case 2:
        LODWORD(v4) = *a1;
        break;
      case 3:
        LODWORD(v4) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v4) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v4) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return (v4 | v9) + 255;
}

void storeEnumTagSinglePayload for DropCoordinator.Operation(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = v5 + 1;
  if (a3 < 0xFF)
  {
    int v7 = 0;
  }
  else if (v6 <= 3)
  {
    unsigned int v10 = ((a3 + ~(-1 << (8 * v6)) - 254) >> (8 * v6)) + 1;
    if (HIWORD(v10))
    {
      int v7 = 4;
    }
    else if (v10 >= 0x100)
    {
      int v7 = 2;
    }
    else
    {
      int v7 = v10 > 1;
    }
  }
  else
  {
    int v7 = 1;
  }
  if (a2 > 0xFE)
  {
    unsigned int v8 = a2 - 255;
    if (v6 < 4)
    {
      int v9 = (v8 >> (8 * v6)) + 1;
      if (v5 != -1)
      {
        int v11 = v8 & ~(-1 << (8 * v6));
        bzero(a1, v6);
        if (v6 == 3)
        {
          *(_WORD *)a1 = v11;
          a1[2] = BYTE2(v11);
        }
        else if (v6 == 2)
        {
          *(_WORD *)a1 = v11;
        }
        else
        {
          *a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v5 + 1);
      *(_DWORD *)a1 = v8;
      int v9 = 1;
    }
    switch(v7)
    {
      case 1:
        a1[v6] = v9;
        break;
      case 2:
        *(_WORD *)&a1[v6] = v9;
        break;
      case 3:
LABEL_32:
        __break(1u);
        JUMPOUT(0x187DBD020);
      case 4:
        *(_DWORD *)&a1[v6] = v9;
        break;
      default:
        return;
    }
  }
  else
  {
    switch(v7)
    {
      case 1:
        a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      case 2:
        *(_WORD *)&a1[v6] = 0;
        goto LABEL_20;
      case 3:
        goto LABEL_32;
      case 4:
        *(_DWORD *)&a1[v6] = 0;
        if (!a2) {
          return;
        }
        goto LABEL_21;
      default:
LABEL_20:
        if (a2) {
LABEL_21:
        }
          a1[v5] = -(char)a2;
        break;
    }
  }
}

uint64_t getEnumTag for DropCoordinator.Operation(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(*(void *)(a2 + 16) - 8) + 64);
  uint64_t v3 = a1[v2];
  int v4 = v3 - 2;
  if (v3 >= 2)
  {
    if (v2 <= 3) {
      uint64_t v5 = v2;
    }
    else {
      uint64_t v5 = 4;
    }
    switch(v5)
    {
      case 1:
        int v6 = *a1;
        goto LABEL_10;
      case 2:
        int v6 = *(unsigned __int16 *)a1;
        goto LABEL_10;
      case 3:
        int v6 = *(unsigned __int16 *)a1 | (a1[2] << 16);
        goto LABEL_10;
      case 4:
        int v6 = *(_DWORD *)a1;
LABEL_10:
        unsigned int v7 = (v6 | (v4 << (8 * v2))) + 2;
        LODWORD(v3) = v6 + 2;
        if (v2 >= 4) {
          uint64_t v3 = v3;
        }
        else {
          uint64_t v3 = v7;
        }
        break;
      default:
        return v3;
    }
  }
  return v3;
}

void destructiveInjectEnumTag for DropCoordinator.Operation(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  size_t v4 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (a2 > 1)
  {
    unsigned int v5 = a2 - 2;
    if (v4 < 4)
    {
      unsigned int v6 = v5 >> (8 * v4);
      int v7 = v5 & ~(-1 << (8 * v4));
      a1[v4] = v6 + 2;
      bzero(a1, v4);
      if (v4 == 3)
      {
        *(_WORD *)a1 = v7;
        a1[2] = BYTE2(v7);
      }
      else if (v4 == 2)
      {
        *(_WORD *)a1 = v7;
      }
      else
      {
        *a1 = v7;
      }
    }
    else
    {
      a1[v4] = 2;
      bzero(a1, v4);
      *(_DWORD *)a1 = v5;
    }
  }
  else
  {
    a1[v4] = a2;
  }
}

uint64_t type metadata completion function for DropCoordinator()
{
  uint64_t result = type metadata accessor for DropCoordinator.Operation();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for DropCoordinator(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  size_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || (v6 & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v9 = *(void *)a2;
    *size_t v4 = *(void *)a2;
    size_t v4 = (void *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    unsigned int v10 = a2[v6];
    unsigned int v11 = v10 - 2;
    if (v10 >= 2)
    {
      if (v6 <= 3) {
        uint64_t v12 = v6;
      }
      else {
        uint64_t v12 = 4;
      }
      switch(v12)
      {
        case 1:
          int v13 = *a2;
          goto LABEL_16;
        case 2:
          int v13 = *(unsigned __int16 *)a2;
          goto LABEL_16;
        case 3:
          int v13 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_16;
        case 4:
          int v13 = *(_DWORD *)a2;
LABEL_16:
          int v14 = (v13 | (v11 << (8 * v6))) + 2;
          unsigned int v10 = v13 + 2;
          if (v6 < 4) {
            unsigned int v10 = v14;
          }
          break;
        default:
          break;
      }
    }
    BOOL v15 = v10 == 1;
    (*(void (**)(void *, unsigned __int8 *))(v5 + 16))(a1, a2);
    *((unsigned char *)v4 + v6) = v15;
    *(void *)(((unint64_t)v4 + v6 + 8) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v6 + 8] & 0xFFFFFFFFFFFFFFF8);
    swift_bridgeObjectRetain();
  }
  return v4;
}

uint64_t destroy for DropCoordinator(uint64_t a1, uint64_t a2)
{
  (*(void (**)(void))(*(void *)(*(void *)(a2 + 16) - 8) + 8))();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for DropCoordinator(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  BOOL v11 = v6 == 1;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 16))(a1, a2);
  *(unsigned char *)(a1 + v5) = v11;
  *(void *)((v5 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  return a1;
}

unsigned __int8 *assignWithCopy for DropCoordinator(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v8 = a2[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a2;
          goto LABEL_11;
        case 2:
          int v11 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v11 = *(_DWORD *)a2;
LABEL_11:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    BOOL v13 = v8 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 16))(a1, a2, v5);
    a1[v7] = v13;
  }
  *(void *)((unint64_t)&a1[*(void *)(v6 + 64) + 8] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[*(void *)(v6 + 64) + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t initializeWithTake for DropCoordinator(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  unsigned int v6 = a2[v5];
  unsigned int v7 = v6 - 2;
  if (v6 >= 2)
  {
    if (v5 <= 3) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = 4;
    }
    switch(v8)
    {
      case 1:
        int v9 = *a2;
        goto LABEL_10;
      case 2:
        int v9 = *(unsigned __int16 *)a2;
        goto LABEL_10;
      case 3:
        int v9 = *(unsigned __int16 *)a2 | (a2[2] << 16);
        goto LABEL_10;
      case 4:
        int v9 = *(_DWORD *)a2;
LABEL_10:
        int v10 = (v9 | (v7 << (8 * v5))) + 2;
        unsigned int v6 = v9 + 2;
        if (v5 < 4) {
          unsigned int v6 = v10;
        }
        break;
      default:
        break;
    }
  }
  BOOL v11 = v6 == 1;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)(*(void *)(a3 + 16) - 8) + 32))(a1, a2);
  *(unsigned char *)(a1 + v5) = v11;
  *(void *)((v5 + 8 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[v5 + 8] & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

unsigned __int8 *assignWithTake for DropCoordinator(unsigned __int8 *a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (a1 != a2)
  {
    uint64_t v7 = *(void *)(v6 + 64);
    (*(void (**)(unsigned __int8 *, uint64_t))(v6 + 8))(a1, v5);
    unsigned int v8 = a2[v7];
    unsigned int v9 = v8 - 2;
    if (v8 >= 2)
    {
      if (v7 <= 3) {
        uint64_t v10 = v7;
      }
      else {
        uint64_t v10 = 4;
      }
      switch(v10)
      {
        case 1:
          int v11 = *a2;
          goto LABEL_11;
        case 2:
          int v11 = *(unsigned __int16 *)a2;
          goto LABEL_11;
        case 3:
          int v11 = *(unsigned __int16 *)a2 | (a2[2] << 16);
          goto LABEL_11;
        case 4:
          int v11 = *(_DWORD *)a2;
LABEL_11:
          int v12 = (v11 | (v9 << (8 * v7))) + 2;
          unsigned int v8 = v11 + 2;
          if (v7 < 4) {
            unsigned int v8 = v12;
          }
          break;
        default:
          break;
      }
    }
    BOOL v13 = v8 == 1;
    (*(void (**)(unsigned __int8 *, unsigned __int8 *, uint64_t))(v6 + 32))(a1, a2, v5);
    a1[v7] = v13;
  }
  *(void *)((unint64_t)&a1[*(void *)(v6 + 64) + 8] & 0xFFFFFFFFFFFFFFF8) = *(void *)((unint64_t)&a2[*(void *)(v6 + 64) + 8] & 0xFFFFFFFFFFFFFFF8);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for DropCoordinator(_DWORD *a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  if (!a2) {
    return 0;
  }
  if ((a2 & 0x80000000) == 0) {
    goto LABEL_3;
  }
  unint64_t v6 = (v3 & 0xFFFFFFFFFFFFFFF8) + 16;
  uint64_t v7 = v6 & 0xFFFFFFF8;
  unsigned int v8 = a2 - 2147483646;
  if ((v6 & 0xFFFFFFF8) != 0) {
    unsigned int v8 = 2;
  }
  if (v8 >= 0x10000) {
    int v9 = 4;
  }
  else {
    int v9 = 2;
  }
  if (v8 < 0x100) {
    int v10 = 1;
  }
  else {
    int v10 = v9;
  }
  if (v10 == 4)
  {
    int v11 = *(_DWORD *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_3;
    }
  }
  else if (v10 == 2)
  {
    int v11 = *(unsigned __int16 *)((char *)a1 + v6);
    if (!v11) {
      goto LABEL_3;
    }
  }
  else
  {
    int v11 = *((unsigned __int8 *)a1 + v6);
    if (!v11)
    {
LABEL_3:
      unint64_t v4 = *(void *)(((unint64_t)a1 + v3 + 8) & 0xFFFFFFFFFFFFFFF8);
      if (v4 >= 0xFFFFFFFF) {
        LODWORD(v4) = -1;
      }
      return (v4 + 1);
    }
  }
  int v12 = v11 - 1;
  if (v7)
  {
    int v12 = 0;
    LODWORD(v7) = *a1;
  }
  return (v7 | v12) ^ 0x80000000;
}

void storeEnumTagSinglePayload for DropCoordinator(unsigned char *a1, int a2, int a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  size_t v6 = (v5 & 0xFFFFFFFFFFFFFFF8) + 16;
  if (a3 < 0)
  {
    unsigned int v8 = a3 - 2147483646;
    if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0) {
      unsigned int v8 = 2;
    }
    if (v8 >= 0x10000) {
      int v9 = 4;
    }
    else {
      int v9 = 2;
    }
    if (v8 < 0x100) {
      int v7 = 1;
    }
    else {
      int v7 = v9;
    }
    if ((a2 & 0x80000000) == 0) {
      goto LABEL_3;
    }
  }
  else
  {
    int v7 = 0;
    if ((a2 & 0x80000000) == 0)
    {
LABEL_3:
      switch(v7)
      {
        case 1:
          a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_24;
        case 2:
          *(_WORD *)&a1[v6] = 0;
          goto LABEL_23;
        case 3:
          goto LABEL_30;
        case 4:
          *(_DWORD *)&a1[v6] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_24;
        default:
LABEL_23:
          if (a2) {
LABEL_24:
          }
            *(void *)((unint64_t)&a1[v5 + 8] & 0xFFFFFFFFFFFFFFF8) = (a2 - 1);
          break;
      }
      return;
    }
  }
  if ((v5 & 0xFFFFFFF8) == 0xFFFFFFF0) {
    int v10 = a2 - 0x7FFFFFFF;
  }
  else {
    int v10 = 1;
  }
  if ((v5 & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    unsigned int v11 = a2 ^ 0x80000000;
    bzero(a1, v6);
    *(_DWORD *)a1 = v11;
  }
  switch(v7)
  {
    case 1:
      a1[v6] = v10;
      break;
    case 2:
      *(_WORD *)&a1[v6] = v10;
      break;
    case 3:
LABEL_30:
      __break(1u);
      JUMPOUT(0x187DBDC68);
    case 4:
      *(_DWORD *)&a1[v6] = v10;
      break;
    default:
      return;
  }
}

uint64_t View.tabViewSidebarHeader<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return View.tabViewSidebarHeader<A>(content:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:), a6);
}

uint64_t EnvironmentValues.tabSidebarAccessoryViewConfiguration.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for StyleContextWriter<MenuStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration.Key, (uint64_t)&protocol witness table for TabSidebarAccessoryViewConfiguration.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration.Key, (uint64_t)&protocol witness table for TabSidebarAccessoryViewConfiguration.Key);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<MenuStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration.Key, (uint64_t)&protocol witness table for TabSidebarAccessoryViewConfiguration.Key, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration.Key, (uint64_t)&protocol witness table for TabSidebarAccessoryViewConfiguration.Key);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.tabSidebarAccessoryViewConfiguration : EnvironmentValues@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tabSidebarAccessoryViewConfiguration.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t sub_187DBDE64@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = EnvironmentValues.tabSidebarAccessoryViewConfiguration.getter();
  *a1 = result;
  a1[1] = v3;
  a1[2] = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.tabSidebarAccessoryViewConfiguration : EnvironmentValues()
{
  swift_retain();
  swift_retain();
  swift_retain();
  specialized EnvironmentValues._set<A>(_:for:)();
  swift_release();
  swift_release();

  return swift_release();
}

uint64_t closure #1 in View.tabViewSidebarHeader<A>(content:)(uint64_t *a1)
{
  double v2 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  uint64_t v5 = AnyView.init<A>(_:)();
  uint64_t result = swift_release();
  *a1 = v5;
  return result;
}

uint64_t partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(uint64_t a1)
{
  return partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(a1, (uint64_t (*)(uint64_t, unint64_t, void))closure #1 in View.tabViewSidebarHeader<A>(content:));
}

uint64_t View.tabViewSidebarFooter<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return View.tabViewSidebarHeader<A>(content:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in View.tabViewSidebarFooter<A>(content:), a6);
}

uint64_t closure #1 in View.tabViewSidebarFooter<A>(content:)(uint64_t a1)
{
  double v2 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  uint64_t v5 = AnyView.init<A>(_:)();
  uint64_t result = swift_release();
  *(void *)(a1 + 8) = v5;
  return result;
}

uint64_t partial apply for closure #1 in View.tabViewSidebarFooter<A>(content:)(uint64_t a1)
{
  return partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(a1, (uint64_t (*)(uint64_t, unint64_t, void))closure #1 in View.tabViewSidebarFooter<A>(content:));
}

uint64_t View.tabViewSidebarBottomBar<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  return View.tabViewSidebarHeader<A>(content:)(a1, a2, a3, a4, a5, (uint64_t)partial apply for closure #1 in View.tabViewSidebarBottomBar<A>(content:), a6);
}

uint64_t View.tabViewSidebarHeader<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  _OWORD v22[2] = a6;
  v22[0] = a5;
  v22[1] = a7;
  uint64_t v10 = *(void *)(a3 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  MEMORY[0x1F4188790](a1);
  int v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v14 = MEMORY[0x1F4188790](v13);
  uint64_t v16 = (char *)v22 - v15;
  v17(v14);
  swift_getKeyPath();
  (*(void (**)(char *, char *, uint64_t))(v10 + 16))(v12, v16, a3);
  unint64_t v18 = (*(unsigned __int8 *)(v10 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  unsigned int v19 = (char *)swift_allocObject();
  *((void *)v19 + 2) = a2;
  *((void *)v19 + 3) = a3;
  uint64_t v20 = v22[0];
  *((void *)v19 + 4) = a4;
  *((void *)v19 + 5) = v20;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v19[v18], v12, a3);
  View.transformEnvironment<A>(_:transform:)();
  swift_release();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v16, a3);
}

uint64_t closure #1 in View.tabViewSidebarBottomBar<A>(content:)(uint64_t a1)
{
  double v2 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v4 + 16))((char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0), v2);
  uint64_t v5 = AnyView.init<A>(_:)();
  uint64_t result = swift_release();
  *(void *)(a1 + 16) = v5;
  return result;
}

uint64_t partial apply for closure #1 in View.tabViewSidebarBottomBar<A>(content:)(uint64_t a1)
{
  return partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(a1, (uint64_t (*)(uint64_t, unint64_t, void))closure #1 in View.tabViewSidebarBottomBar<A>(content:));
}

uint64_t partial apply for closure #1 in View.tabViewSidebarHeader<A>(content:)(uint64_t a1, uint64_t (*a2)(uint64_t, unint64_t, void))
{
  return a2(a1, v2+ ((*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(v2 + 24) - 8) + 80)), *(void *)(v2 + 16));
}

uint64_t View.tabViewSidebarVisibility(_:)()
{
  return swift_release();
}

uint64_t EnvironmentValues.tabViewSidebarVisibility.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for StyleContextWriter<MenuStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>, (uint64_t)&type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility, (uint64_t)&protocol witness table for EnvironmentValues.__Key_tabViewSidebarVisibility, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>, (uint64_t)&type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility, (uint64_t)&protocol witness table for EnvironmentValues.__Key_tabViewSidebarVisibility);
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for StyleContextWriter<MenuStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>, (uint64_t)&type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility, (uint64_t)&protocol witness table for EnvironmentValues.__Key_tabViewSidebarVisibility, MEMORY[0x1E4F40930]);
    lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility>, (uint64_t)&type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility, (uint64_t)&protocol witness table for EnvironmentValues.__Key_tabViewSidebarVisibility);
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  return v2;
}

uint64_t key path getter for EnvironmentValues.tabViewSidebarVisibility : EnvironmentValues@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.tabViewSidebarVisibility.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_187DBE6A4@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = EnvironmentValues.tabViewSidebarVisibility.getter();
  *(void *)a1 = result;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = v4;
  return result;
}

uint64_t key path setter for EnvironmentValues.tabViewSidebarVisibility : EnvironmentValues(uint64_t a1)
{
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  outlined copy of Binding<NavigationSplitViewColumn>?(*(void *)a1, v2);
  specialized EnvironmentValues.subscript.setter(v1, v2, v3);

  return outlined consume of Binding<NavigationSplitViewColumn>?(v1, v2);
}

uint64_t View.tabViewSidebarOverflowMenu<A>(content:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v22 = a7;
  uint64_t v20 = a5;
  uint64_t v21 = a2;
  uint64_t v19 = a1;
  type metadata accessor for StyleContextWriter<MenuStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  unint64_t v11 = lazy protocol witness table accessor for type TabViewSidebarOverflowMenuInput and conformance TabViewSidebarOverflowMenuInput();
  uint64_t v33 = a6;
  unint64_t v34 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  uint64_t v29 = &type metadata for TabViewSidebarOverflowMenuInput;
  uint64_t v30 = v10;
  unint64_t v31 = v11;
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = type metadata accessor for LazyPlatformItemInputWriter();
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12);
  uint64_t v15 = (char *)&v18 - v14;
  uint64_t v23 = a3;
  uint64_t v24 = a4;
  uint64_t v16 = v20;
  uint64_t v25 = v20;
  uint64_t v26 = a6;
  uint64_t v27 = v19;
  uint64_t v28 = v21;
  LazyPlatformItemInputWriter.init(isWriting:input:source:)(1, (uint64_t)&type metadata for TabViewSidebarOverflowMenuInput, (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))partial apply for closure #1 in View.tabViewSidebarOverflowMenu<A>(content:), (uint64_t)&v18 - v14);
  MEMORY[0x18C113660](v15, a3, v12, v16);
  return (*(uint64_t (**)(char *, uint64_t))(v13 + 8))(v15, v12);
}

uint64_t closure #1 in View.tabViewSidebarOverflowMenu<A>(content:)@<X0>(void (*a1)(double)@<X0>, uint64_t a2@<X3>, uint64_t a3@<X5>, uint64_t a4@<X8>)
{
  v21[1] = a4;
  uint64_t v7 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  int v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for StyleContextWriter<MenuStyleContext>(255, (unint64_t *)&lazy cache variable for type metadata for StyleContextWriter<MenuStyleContext>, MEMORY[0x1E4F3FCF0], MEMORY[0x1E4F3FCE8], MEMORY[0x1E4F40318]);
  uint64_t v10 = type metadata accessor for ModifiedContent();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v15 = MEMORY[0x1F4188790](v14);
  uint64_t v17 = (char *)v21 - v16;
  a1(v15);
  View.styleContext<A>(_:)();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a2);
  unint64_t v18 = lazy protocol witness table accessor for type StyleContextWriter<MenuStyleContext> and conformance StyleContextWriter<A>();
  void v21[2] = a3;
  v21[3] = v18;
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v13);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
  v19(v13, v10);
  static ViewBuilder.buildExpression<A>(_:)(v17);
  return ((uint64_t (*)(char *, uint64_t))v19)(v17, v10);
}

uint64_t partial apply for closure #1 in View.tabViewSidebarOverflowMenu<A>(content:)@<X0>(uint64_t a1@<X8>)
{
  return closure #1 in View.tabViewSidebarOverflowMenu<A>(content:)(*(void (**)(double))(v1 + 48), *(void *)(v1 + 24), *(void *)(v1 + 40), a1);
}

uint64_t sub_187DBEBF4()
{
  return swift_getWitnessTable();
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(255, &lazy cache variable for type metadata for _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration, MEMORY[0x1E4F41280]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyTransformModifier<TabSidebarAccessoryViewConfiguration> and conformance _EnvironmentKeyTransformModifier<A>);
  }
  return result;
}

uint64_t sub_187DBED04()
{
  return swift_getWitnessTable();
}

void type metadata accessor for _EnvironmentKeyWritingModifier<Binding<Visibility>?>()
{
  if (!lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<Visibility>?>)
  {
    type metadata accessor for Binding<Visibility>?();
    unint64_t v0 = type metadata accessor for _EnvironmentKeyWritingModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for _EnvironmentKeyWritingModifier<Binding<Visibility>?>);
    }
  }
}

void type metadata accessor for Binding<Visibility>?()
{
  if (!lazy cache variable for type metadata for Binding<Visibility>?)
  {
    type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(255, &lazy cache variable for type metadata for Binding<Visibility>, MEMORY[0x1E4F3F3F0], MEMORY[0x1E4F41638]);
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for Binding<Visibility>?);
    }
  }
}

unint64_t lazy protocol witness table accessor for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>;
  if (!lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>)
  {
    type metadata accessor for _EnvironmentKeyWritingModifier<Binding<Visibility>?>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _EnvironmentKeyWritingModifier<Binding<Visibility>?> and conformance _EnvironmentKeyWritingModifier<A>);
  }
  return result;
}

uint64_t sub_187DBEE9C()
{
  return swift_getWitnessTable();
}

void *initializeBufferWithCopyOfBuffer for TabSidebarAccessoryViewConfiguration(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  a1[2] = a2[2];
  swift_retain();
  swift_retain();
  swift_retain();
  return a1;
}

void *assignWithCopy for TabSidebarAccessoryViewConfiguration(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for TabSidebarAccessoryViewConfiguration(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_release();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for TabSidebarAccessoryViewConfiguration()
{
  return &type metadata for TabSidebarAccessoryViewConfiguration;
}

ValueMetadata *type metadata accessor for TabViewSidebarOverflowMenuInput()
{
  return &type metadata for TabViewSidebarOverflowMenuInput;
}

double protocol witness for static PropertyKey.defaultValue.getter in conformance TabViewSidebarOverflowMenuInput@<D0>(void *a1@<X8>)
{
  if (one-time initialization token for defaultValue != -1) {
    swift_once();
  }
  double result = *(double *)&static TabViewSidebarOverflowMenuInput.defaultValue;
  *a1 = static TabViewSidebarOverflowMenuInput.defaultValue;
  return result;
}

uint64_t protocol witness for static PropertyKey.valuesEqual(_:_:) in conformance TabViewSidebarOverflowMenuInput()
{
  type metadata accessor for _EnvironmentKeyTransformModifier<NavigationEventHandlers>(0, &lazy cache variable for type metadata for PlatformItemCollection?, (uint64_t)&type metadata for PlatformItemCollection, MEMORY[0x1E4FBB718]);

  return static WeakAttribute.== infix(_:_:)();
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  type metadata accessor for StyleContextWriter<MenuStyleContext>(0, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>, (uint64_t)&type metadata for NavigationEventHandlersKey, (uint64_t)&protocol witness table for NavigationEventHandlersKey, MEMORY[0x1E4F40930]);
  outlined copy of AppIntentExecutor?(a1);
  outlined copy of AppIntentExecutor?(a3);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<NavigationEventHandlersKey> and conformance EnvironmentPropertyKey<A>, (unint64_t *)&lazy cache variable for type metadata for EnvironmentPropertyKey<NavigationEventHandlersKey>, (uint64_t)&type metadata for NavigationEventHandlersKey, (uint64_t)&protocol witness table for NavigationEventHandlersKey);
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v3 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t specialized EnvironmentValues._set<A>(_:for:)()
{
  type metadata accessor for StyleContextWriter<MenuStyleContext>(0, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration.Key, (uint64_t)&protocol witness table for TabSidebarAccessoryViewConfiguration.Key, MEMORY[0x1E4F40930]);
  lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(&lazy protocol witness table cache variable for type EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key> and conformance EnvironmentPropertyKey<A>, &lazy cache variable for type metadata for EnvironmentPropertyKey<TabSidebarAccessoryViewConfiguration.Key>, (uint64_t)&type metadata for TabSidebarAccessoryViewConfiguration.Key, (uint64_t)&protocol witness table for TabSidebarAccessoryViewConfiguration.Key);
  swift_retain();
  swift_retain();
  swift_retain();
  swift_retain();
  PropertyList.subscript.setter();
  if (*(void *)(v0 + 8))
  {
    swift_retain();
    swift_retain();
    PropertyList.Tracker.invalidateValue<A>(for:from:to:)();
    swift_release();
    swift_release();
  }
  return swift_release();
}

uint64_t lazy protocol witness table accessor for type EnvironmentPropertyKey<EnvironmentValues.__Key_tabViewSidebarVisibility> and conformance EnvironmentPropertyKey<A>(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for StyleContextWriter<MenuStyleContext>(255, a2, a3, a4, MEMORY[0x1E4F40930]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void type metadata accessor for StyleContextWriter<MenuStyleContext>(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void, uint64_t, uint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = a5(0, a3, a4);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

ValueMetadata *type metadata accessor for TabSidebarAccessoryViewConfiguration.Key()
{
  return &type metadata for TabSidebarAccessoryViewConfiguration.Key;
}

ValueMetadata *type metadata accessor for EnvironmentValues.__Key_tabViewSidebarVisibility()
{
  return &type metadata for EnvironmentValues.__Key_tabViewSidebarVisibility;
}

id MapKitPlatformItem.text.getter()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg((uint64_t *)v5) == 1) {
    return 0;
  }
  id v1 = v5[0];
  id v2 = v5[0];
  return v1;
}

id MapKitPlatformItem.secondaryText.getter()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)&v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(&v5) == 1) {
    return 0;
  }
  id v1 = v6;
  id v2 = v6;
  return v1;
}

id MapKitPlatformItem.iconText.getter()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v4, (uint64_t)v5, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v5) == 1) {
    return 0;
  }
  id v1 = v6;
  id v2 = v6;
  return v1;
}

uint64_t MapKitPlatformItem.prioritizeImage.getter()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v3, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v3, (uint64_t)v4, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  BOOL v1 = _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v4) == 1;
  return (v1 | v5) & 1;
}

UIImage_optional __swiftcall MapKitPlatformItem.makeUIImage()()
{
  outlined init with take of PlatformItem.PrimaryContent?(v0 + 24, (uint64_t)v12, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v13, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  if (_s7SwiftUI12PlatformItemV14PrimaryContentVSgWOg(v13) == 1
    || (outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v14, (uint64_t)&v9, (unint64_t *)&lazy cache variable for type metadata for Image.Resolved?), _s7SwiftUI5ImageVAAE8ResolvedVSgWOg((uint64_t)&v9) == 1))
  {
    uint64_t v2 = 0;
  }
  else if (v11)
  {
    swift_unknownObjectRetain();
    self;
    uint64_t v2 = swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    char v4 = v9;
    char v5 = v10;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)v12, (uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    uint64_t v6 = v8;
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined copy of Image.Resolved?);
    outlined copy of GraphicsImage.Contents?(v4, v5);
    swift_retain();
    uint64_t v2 = (uint64_t)GraphicsImage.makePlatformImage(fixedSymbolConfiguration:flattenMaskColor:colorResolver:)(0, 0, v6);
    swift_release();
    outlined retain of Image.Resolved?((uint64_t)v14, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, int))outlined consume of Image.Resolved?);
    outlined consume of GraphicsImage.Contents?(v4, v5);
  }
  uint64_t v3 = (objc_class *)v2;
  result.value.super.Class isa = v3;
  result.is_nil = v1;
  return result;
}

uint64_t MapKitPlatformItemReader.init(content:source:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = a1;
  a3[1] = a2;
  swift_retain();
  static Alignment.center.getter();
  type metadata accessor for MapKitPlatformItemReader();
  ZStack.init(alignment:content:)();
  return swift_release();
}

uint64_t closure #1 in MapKitPlatformItemReader.init(content:source:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v9 = MEMORY[0x1F4188790](v8);
  uint64_t v11 = (char *)&v15 - v10;
  v12(v9);
  static ViewBuilder.buildExpression<A>(_:)(v7);
  uint64_t v13 = *(void (**)(char *, uint64_t))(v5 + 8);
  v13(v7, a4);
  static ViewBuilder.buildExpression<A>(_:)(v11);
  return ((uint64_t (*)(char *, uint64_t))v13)(v11, a4);
}

uint64_t partial apply for closure #1 in MapKitPlatformItemReader.init(content:source:)()
{
  return closure #1 in MapKitPlatformItemReader.init(content:source:)(v0[6], v0[7], v0[2], v0[3]);
}

uint64_t type metadata accessor for MapKitPlatformItemReader()
{
  return swift_getGenericMetadata();
}

uint64_t MapKitPlatformItemReader.body.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v38 = a2;
  uint64_t v5 = *(void *)(a1 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = v7[2];
  uint64_t v8 = v7[3];
  uint64_t v35 = v7[5];
  uint64_t v10 = v8;
  uint64_t v11 = type metadata accessor for ZStack();
  uint64_t v37 = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t WitnessTable = swift_getWitnessTable();
  unint64_t v45 = &type metadata for LabelPlatformItemsStrategy;
  uint64_t v46 = v9;
  uint64_t v13 = v9;
  uint64_t v47 = v11;
  uint64_t v48 = &protocol witness table for LabelPlatformItemsStrategy;
  uint64_t v49 = v12;
  uint64_t v50 = WitnessTable;
  uint64_t v33 = type metadata accessor for PlatformItemsReader();
  uint64_t v36 = *(void *)(v33 - 8);
  MEMORY[0x1F4188790](v33);
  uint64_t v15 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  double v17 = MEMORY[0x1F4188790](v16);
  unint64_t v31 = (char *)v30 - v18;
  uint64_t v19 = v32;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v5 + 16))(v32, v3, a1, v17);
  unint64_t v20 = (*(unsigned __int8 *)(v5 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = (char *)swift_allocObject();
  *((void *)v21 + 2) = v13;
  *((void *)v21 + 3) = v10;
  uint64_t v22 = v13;
  uint64_t v23 = v10;
  uint64_t v24 = v35;
  *((void *)v21 + 4) = v12;
  *((void *)v21 + 5) = v24;
  uint64_t v25 = (*(uint64_t (**)(char *, char *, uint64_t))(v5 + 32))(&v21[v20], v19, a1);
  uint64_t v40 = v22;
  uint64_t v41 = v23;
  uint64_t v42 = v12;
  uint64_t v43 = v24;
  uint64_t v44 = v30[1];
  PlatformItemsReader.init(for:content:source:)(v25, (uint64_t)partial apply for closure #1 in MapKitPlatformItemReader.body.getter, (uint64_t)v21, (uint64_t)partial apply for closure #2 in MapKitPlatformItemReader.body.getter, (uint64_t)v39, (uint64_t)&type metadata for LabelPlatformItemsStrategy, v22, v37, v15, (uint64_t)&protocol witness table for LabelPlatformItemsStrategy, v12, WitnessTable);
  uint64_t v26 = v31;
  uint64_t v27 = v33;
  static ViewBuilder.buildExpression<A>(_:)(v15);
  uint64_t v28 = *(void (**)(char *, uint64_t))(v36 + 8);
  v28(v15, v27);
  static ViewBuilder.buildExpression<A>(_:)(v26);
  return ((uint64_t (*)(char *, uint64_t))v28)(v26, v27);
}

uint64_t closure #1 in MapKitPlatformItemReader.body.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v6 = &v15[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = &v15[-v8];
  uint64_t v11 = *v10;
  outlined init with copy of PlatformItem(v12, (uint64_t)v15);
  v11(v15);
  outlined destroy of MapKitPlatformItem((uint64_t)v15);
  static ViewBuilder.buildExpression<A>(_:)(v6);
  uint64_t v13 = *(void (**)(unsigned char *, uint64_t))(v4 + 8);
  v13(v6, a3);
  static ViewBuilder.buildExpression<A>(_:)(v9);
  return ((uint64_t (*)(unsigned char *, uint64_t))v13)(v9, a3);
}

uint64_t sub_187DC001C()
{
  long long v6 = *(_OWORD *)(v0 + 24);
  Swift::Bool v1 = (int *)(type metadata accessor for MapKitPlatformItemReader() - 8);
  uint64_t v2 = v0
     + ((*(unsigned __int8 *)(*(void *)v1 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(*(void *)v1 + 80));
  swift_release();
  uint64_t v3 = v1[15];
  uint64_t v4 = type metadata accessor for _VariadicView.Tree();
  (*(void (**)(uint64_t, void))(*(void *)(v6 - 8) + 8))(v2 + v3 + *(int *)(v4 + 44), v6);
  return swift_deallocObject();
}

uint64_t partial apply for closure #1 in MapKitPlatformItemReader.body.getter(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(type metadata accessor for MapKitPlatformItemReader() - 8);
  uint64_t v5 = v1 + ((*(unsigned __int8 *)(v4 + 80) + 48) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));

  return closure #1 in MapKitPlatformItemReader.body.getter(a1, v5, v3);
}

uint64_t closure #2 in MapKitPlatformItemReader.body.getter(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for ZStack();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)v16 - v12;
  v16[0] = a2;
  v16[1] = a3;
  void v16[2] = a4;
  v16[3] = a5;
  uint64_t v14 = a1 + *(int *)(type metadata accessor for MapKitPlatformItemReader() + 52);
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)(v14);
  static ViewBuilder.buildExpression<A>(_:)(v13);
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t partial apply for closure #2 in MapKitPlatformItemReader.body.getter()
{
  return closure #2 in MapKitPlatformItemReader.body.getter(v0[6], v0[2], v0[3], v0[4], v0[5]);
}

uint64_t static MapKitPlatformItem.makePlatformItem<A>(inputs:source:)(uint64_t *a1)
{
  uint64_t v56 = *MEMORY[0x1E4F143B8];
  uint64_t v1 = *a1;
  uint64_t v14 = *a1;
  int v2 = *((_DWORD *)a1 + 2);
  uint64_t v3 = a1[2];
  unsigned int v4 = *((_DWORD *)a1 + 6);
  unsigned int v18 = *((_DWORD *)a1 + 7);
  unsigned int v5 = *((_DWORD *)a1 + 8);
  unsigned int v6 = *((_DWORD *)a1 + 9);
  uint64_t v16 = a1[6];
  uint64_t v17 = a1[5];
  unsigned int v15 = *((_DWORD *)a1 + 14);
  unsigned int v23 = *((_DWORD *)a1 + 16);
  unsigned int v24 = *((_DWORD *)a1 + 15);
  unsigned int v21 = *((_DWORD *)a1 + 18);
  unsigned int v22 = *((_DWORD *)a1 + 17);
  int v19 = *((_DWORD *)a1 + 20);
  unsigned int v20 = *((_DWORD *)a1 + 19);
  type metadata accessor for _GraphValue();
  LODWORD(v29) = _GraphValue.value.getter();
  uint64_t v26 = type metadata accessor for ZStack();
  uint64_t Source = type metadata accessor for MapKitPlatformItem.MakeSource();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v29, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA4RuleRd__lufcADSPyqd__GXEfU_TA_4, (uint64_t)v25, Source, MEMORY[0x1E4FBC248], v7, MEMORY[0x1E4FBC278], v8);
  uint64_t v29 = v1;
  LODWORD(v30) = v2;
  uint64_t v31 = v3;
  *(void *)&long long v32 = __PAIR64__(v18, v4);
  *((void *)&v32 + 1) = __PAIR64__(v6, v5);
  *(void *)&long long v33 = v17;
  *((void *)&v33 + 1) = v16;
  *(void *)&long long v34 = __PAIR64__(v24, v15);
  *((void *)&v34 + 1) = __PAIR64__(v22, v23);
  unint64_t v35 = __PAIR64__(v20, v21);
  int v36 = v19;
  PreferenceKeys.init()();
  uint64_t v48 = v46;
  _ViewInputs.intern<A>(_:id:)();
  swift_bridgeObjectRelease();
  uint64_t v29 = v14;
  LODWORD(v30) = v2;
  uint64_t v31 = v3;
  *(void *)&long long v32 = __PAIR64__(v18, v4);
  *((void *)&v32 + 1) = __PAIR64__(v6, v5);
  *(void *)&long long v33 = v17;
  *((void *)&v33 + 1) = v16;
  *(void *)&long long v34 = __PAIR64__(v24, v15);
  *((void *)&v34 + 1) = __PAIR64__(v22, v23);
  unint64_t v35 = __PAIR64__(v20, v21);
  int v36 = v19;
  _ViewInputs.withoutGeometryDependencies.getter();
  PreferencesInputs.init(hostKeys:)();
  uint64_t v9 = v29;
  int v10 = (int)v30;
  swift_bridgeObjectRelease();
  *((void *)&v52 + 1) = v9;
  LODWORD(v53) = v10;
  PreferenceKeys.add(_:)();
  lazy protocol witness table accessor for type PlatformItemsTextRepresentable and conformance PlatformItemsTextRepresentable();
  _ViewInputs.requestedTextRepresentation.setter();
  lazy protocol witness table accessor for type PlatformItemsImageRepresentable and conformance PlatformItemsImageRepresentable();
  _ViewInputs.requestedImageRepresentation.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  PropertyList.subscript.setter();
  lazy protocol witness table accessor for type _ViewInputs.PlatformItemFeaturesKey and conformance _ViewInputs.PlatformItemFeaturesKey();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  PropertyList.subscript.getter();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  v29 |= 0xB3uLL;
  PropertyList.subscript.setter();
  LOBYTE(v29) = 1;
  lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey();
  PropertyList.subscript.setter();
  PreferenceKeys.add(_:)();
  _GraphValue.init(_:)();
  uint64_t v29 = v48;
  LODWORD(v30) = v49;
  uint64_t v31 = v50;
  long long v32 = v51;
  long long v33 = v52;
  long long v34 = v53;
  unint64_t v35 = v54;
  int v36 = v55;
  swift_getWitnessTable();
  static View.makeDebuggableView(view:inputs:)();
  uint64_t v29 = v46;
  LODWORD(v30) = v47;
  swift_bridgeObjectRetain();
  uint64_t v11 = PreferencesOutputs.subscript.getter();
  if ((v11 & 0x100000000) != 0)
  {
    int v12 = *MEMORY[0x1E4F4E7A0];
  }
  else
  {
    LODWORD(v29) = v11;
    protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
    lazy protocol witness table accessor for type _ViewOutputs.FirstItem and conformance _ViewOutputs.FirstItem();
    int v12 = Attribute.init<A>(body:value:flags:update:)();
  }
  swift_bridgeObjectRelease_n();
  _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)&v46);
  long long v38 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  uint64_t v40 = 1;
  uint64_t v41 = 0;
  uint64_t v30 = &outlined read-only object #0 of static MapKitPlatformItem.makePlatformItem<A>(inputs:source:);
  uint64_t v31 = 0;
  LODWORD(v32) = 0;
  outlined init with take of PlatformItem.PrimaryContent?((uint64_t)&v46, (uint64_t)&v32 + 8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
  uint64_t v42 = 0;
  char v43 = 1;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  LODWORD(v29) = v12;
  protocol witness for static PreferenceKey._includesRemovedValues.getter in conformance AccessibilityLargeContentViewTree.Key();
  lazy protocol witness table accessor for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child();
  Attribute.init<A>(body:value:flags:update:)();
  outlined destroy of MapKitPlatformItem.Child((uint64_t)&v29);
  _GraphValue.init(_:)();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t MapKitPlatformItem.MakeSource.value.getter()
{
  return ZStack.init(alignment:content:)();
}

uint64_t closure #1 in MapKitPlatformItem.MakeSource.value.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1);
  unsigned int v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v12 - v7;
  uint64_t Value = AGGraphGetValue();
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v5, Value, a2);
  static ViewBuilder.buildExpression<A>(_:)(v5);
  int v10 = *(void (**)(char *, uint64_t))(v3 + 8);
  v10(v5, a2);
  static ViewBuilder.buildExpression<A>(_:)(v8);
  return ((uint64_t (*)(char *, uint64_t))v10)(v8, a2);
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance MapKitPlatformItem.MakeSource<A>@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for ZStack();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance MapKitPlatformItem.MakeSource<A>()
{
  return MapKitPlatformItem.MakeSource.value.getter();
}

uint64_t MapKitPlatformItem.Child.updateValue()()
{
  uint64_t v10 = *MEMORY[0x1E4F143B8];
  if (*v0 == *MEMORY[0x1E4F4E7A0])
  {
    _s7SwiftUI12PlatformItemV14PrimaryContentVSgWOi0_((uint64_t)__src);
    memset(&__dst[15], 0, 48);
    __dst[18] = xmmword_18834FC50;
    *(void *)&__dst[0] = &outlined read-only object #0 of MapKitPlatformItem.Child.updateValue();
    *((void *)&__dst[0] + 1) = 0;
    LODWORD(__dst[1]) = 0;
    outlined init with take of PlatformItem.PrimaryContent?((uint64_t)__src, (uint64_t)&__dst[1] + 8, (unint64_t *)&lazy cache variable for type metadata for PlatformItem.PrimaryContent?);
    int v1 = 0;
    *(void *)&__dst[19] = 0;
    BYTE8(__dst[19]) = 1;
    __dst[20] = 0uLL;
  }
  else
  {
    uint64_t Value = AGGraphGetValue();
    char v4 = v3;
    outlined init with copy of PlatformItem(Value, (uint64_t)__src);
    int v1 = v4 & 1;
    __src[336] = v4 & 1;
    memcpy(__dst, __src, sizeof(__dst));
  }
  memcpy(__src, __dst, 0x150uLL);
  uint64_t v5 = (uint64_t)(v0 + 2);
  int v6 = specialized static UnaryPlatformItemsStrategy.hasChanges(from:to:)(v0 + 2, __src);
  if (!AGGraphGetOutputValue() || (v1 & v6) != 0)
  {
    outlined init with copy of PlatformItem((uint64_t)__src, (uint64_t)__dst);
    AGGraphSetOutputValue();
    outlined destroy of MapKitPlatformItem((uint64_t)__dst);
  }
  return outlined assign with take of PlatformItem((uint64_t)__src, v5);
}

double protocol witness for static StatefulRule.initialValue.getter in conformance MapKitPlatformItem.Child@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  a1[19] = 0u;
  a1[20] = 0u;
  a1[17] = 0u;
  a1[18] = 0u;
  a1[15] = 0u;
  a1[16] = 0u;
  a1[13] = 0u;
  a1[14] = 0u;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t type metadata accessor for MapKitPlatformItem.MakeSource()
{
  return __swift_instantiateGenericMetadata();
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.PlatformItemsFeaturesKey and conformance _ViewInputs.PlatformItemsFeaturesKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey()
{
  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey;
  if (!lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ViewInputs.RequestsPlatformItemsKey and conformance _ViewInputs.RequestsPlatformItemsKey);
  }
  return result;
}

unint64_t lazy protocol witness table accessor for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child()
{
  unint64_t result = lazy protocol witness table cache variable for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child;
  if (!lazy protocol witness table cache variable for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type MapKitPlatformItem.Child and conformance MapKitPlatformItem.Child);
  }
  return result;
}

uint64_t outlined destroy of MapKitPlatformItem.Child(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for View.Body : View in MapKitPlatformItemReader<A, B>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t destroy for MapKitPlatformItem(uint64_t a1)
{
  swift_bridgeObjectRelease();
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2 != (void *)1)
  {

    uint64_t v3 = *(void *)(a1 + 168);
    if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v4 = *(unsigned __int8 *)(a1 + 56);
      if (v4 != 255) {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 48), v4);
      }
      if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(a1 + 152), *(void *)(a1 + 160), v3);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    swift_release();
  }
  if (*(void *)(a1 + 288) >= 2uLL) {
    __swift_destroy_boxed_opaque_existential_1(a1 + 264);
  }

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for MapKitPlatformItem(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  uint64_t v5 = a2 + 24;
  int v6 = *(void **)(a2 + 24);
  swift_bridgeObjectRetain();
  if (v6 == (void *)1)
  {
    long long v7 = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a1 + 200) = v7;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(v5 + 192);
    *(void *)(a1 + 232) = *(void *)(v5 + 208);
    long long v8 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a1 + 136) = v8;
    long long v9 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a1 + 168) = v9;
    long long v10 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a1 + 72) = v10;
    long long v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 104) = v11;
    long long v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 40) = v12;
  }
  else
  {
    uint64_t v13 = *(void **)(a2 + 32);
    uint64_t v14 = *(void **)(a2 + 40);
    *(void *)(a1 + 24) = v6;
    *(void *)(a1 + 32) = v13;
    *(void *)(a1 + 40) = v14;
    unsigned int v15 = (_OWORD *)(a1 + 48);
    uint64_t v16 = (id *)(a2 + 48);
    uint64_t v17 = *(void *)(a2 + 168);
    id v18 = v6;
    id v19 = v13;
    id v20 = v14;
    if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
    {
      long long v21 = *(_OWORD *)(a2 + 192);
      *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 192) = v21;
      *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      long long v22 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 128) = v22;
      long long v23 = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v23;
      long long v24 = *(_OWORD *)(a2 + 64);
      _OWORD *v15 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 64) = v24;
      long long v25 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v25;
    }
    else
    {
      int v26 = *(unsigned __int8 *)(a2 + 56);
      if (v26 == 255)
      {
        *(void *)unsigned int v15 = *v16;
        *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
      }
      else
      {
        id v27 = *v16;
        outlined copy of GraphicsImage.Contents(*v16, *(unsigned char *)(a2 + 56));
        *(void *)(a1 + 48) = v27;
        *(unsigned char *)(a1 + 56) = v26;
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
      *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
      long long v28 = *(_OWORD *)(a2 + 112);
      long long v29 = *(_OWORD *)(a2 + 128);
      *(_WORD *)(a1 + 144) = *(_WORD *)(a2 + 144);
      *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
      *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
      *(_OWORD *)(a1 + 112) = v28;
      *(_OWORD *)(a1 + 128) = v29;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
      {
        long long v30 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v30;
      }
      else
      {
        uint64_t v31 = *(void *)(a2 + 152);
        uint64_t v32 = *(void *)(a2 + 160);
        uint64_t v33 = *(void *)(a2 + 176);
        outlined copy of AccessibilityImageLabel(v31, v32, v17);
        *(void *)(a1 + 152) = v31;
        *(void *)(a1 + 160) = v32;
        *(void *)(a1 + 168) = v17;
        *(void *)(a1 + 176) = v33;
      }
      uint64_t v34 = *(void *)(a2 + 192);
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      *(void *)(a1 + 192) = v34;
      *(_WORD *)(a1 + 200) = *(_WORD *)(a2 + 200);
      *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      unint64_t v35 = *(void **)(a2 + 216);
      *(void *)(a1 + 216) = v35;
      *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
      *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
      swift_unknownObjectRetain();
      swift_retain();
      id v36 = v35;
    }
    *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    swift_retain();
  }
  uint64_t v37 = *(void *)(a2 + 288);
  if (v37 == 1)
  {
    long long v38 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v38;
    long long v39 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v39;
  }
  else
  {
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    uint64_t v40 = (_OWORD *)(a1 + 264);
    uint64_t v41 = (_OWORD *)(a2 + 264);
    if (v37)
    {
      uint64_t v42 = *(void *)(a2 + 296);
      *(void *)(a1 + 288) = v37;
      *(void *)(a1 + 296) = v42;
      (**(void (***)(_OWORD *, _OWORD *))(v37 - 8))(v40, v41);
    }
    else
    {
      long long v43 = *(_OWORD *)(a2 + 280);
      *uint64_t v40 = *v41;
      *(_OWORD *)(a1 + 280) = v43;
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
    }
  }
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  uint64_t v44 = *(void *)(a2 + 328);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  *(void *)(a1 + 328) = v44;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapKitPlatformItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 24);
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  long long v7 = (_OWORD *)(a2 + 24);
  int v6 = *(void **)(a2 + 24);
  if (v5 == (void *)1)
  {
    if (v6 == (void *)1)
    {
      long long v8 = *(_OWORD *)(a2 + 40);
      *uint64_t v4 = *v7;
      *(_OWORD *)(a1 + 40) = v8;
      long long v9 = *(_OWORD *)(a2 + 56);
      long long v10 = *(_OWORD *)(a2 + 72);
      long long v11 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v11;
      *(_OWORD *)(a1 + 56) = v9;
      *(_OWORD *)(a1 + 72) = v10;
      long long v12 = *(_OWORD *)(a2 + 120);
      long long v13 = *(_OWORD *)(a2 + 136);
      long long v14 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v14;
      *(_OWORD *)(a1 + 120) = v12;
      *(_OWORD *)(a1 + 136) = v13;
      long long v15 = *(_OWORD *)(a2 + 184);
      long long v16 = *(_OWORD *)(a2 + 200);
      long long v17 = *(_OWORD *)(a2 + 216);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      *(_OWORD *)(a1 + 200) = v16;
      *(_OWORD *)(a1 + 216) = v17;
      *(_OWORD *)(a1 + 184) = v15;
    }
    else
    {
      *(void *)(a1 + 24) = v6;
      long long v28 = *(void **)(a2 + 32);
      *(void *)(a1 + 32) = v28;
      long long v29 = *(void **)(a2 + 40);
      *(void *)(a1 + 40) = v29;
      long long v30 = (_OWORD *)(a1 + 48);
      uint64_t v31 = (id *)(a2 + 48);
      unint64_t v32 = *(void *)(a2 + 168);
      id v33 = v6;
      id v34 = v28;
      id v35 = v29;
      if (v32 >> 1 == 4294967294)
      {
        long long v36 = *(_OWORD *)v31;
        long long v37 = *(_OWORD *)(a2 + 64);
        long long v38 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v38;
        *long long v30 = v36;
        *(_OWORD *)(a1 + 64) = v37;
        long long v39 = *(_OWORD *)(a2 + 112);
        long long v40 = *(_OWORD *)(a2 + 128);
        long long v41 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 160) = v41;
        *(_OWORD *)(a1 + 112) = v39;
        *(_OWORD *)(a1 + 128) = v40;
        long long v42 = *(_OWORD *)(a2 + 176);
        long long v43 = *(_OWORD *)(a2 + 192);
        long long v44 = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        *(_OWORD *)(a1 + 192) = v43;
        *(_OWORD *)(a1 + 208) = v44;
        *(_OWORD *)(a1 + 176) = v42;
      }
      else
      {
        int v64 = *(unsigned __int8 *)(a2 + 56);
        if (v64 == 255)
        {
          id v81 = *v31;
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
          *(void *)long long v30 = v81;
        }
        else
        {
          id v65 = *v31;
          outlined copy of GraphicsImage.Contents(*v31, *(unsigned char *)(a2 + 56));
          *(void *)(a1 + 48) = v65;
          *(unsigned char *)(a1 + 56) = v64;
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        long long v82 = *(_OWORD *)(a2 + 92);
        *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
        *(_OWORD *)(a1 + 92) = v82;
        long long v83 = *(_OWORD *)(a2 + 112);
        long long v84 = *(_OWORD *)(a2 + 128);
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
        *(_OWORD *)(a1 + 112) = v83;
        *(_OWORD *)(a1 + 128) = v84;
        *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
        *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
        *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
        unint64_t v85 = *(void *)(a2 + 168);
        if (v85 >> 1 == 0xFFFFFFFF)
        {
          long long v86 = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
          *(_OWORD *)(a1 + 168) = v86;
        }
        else
        {
          uint64_t v87 = *(void *)(a2 + 152);
          uint64_t v88 = *(void *)(a2 + 160);
          uint64_t v89 = *(void *)(a2 + 176);
          outlined copy of AccessibilityImageLabel(v87, v88, *(void *)(a2 + 168));
          *(void *)(a1 + 152) = v87;
          *(void *)(a1 + 160) = v88;
          *(void *)(a1 + 168) = v85;
          *(void *)(a1 + 176) = v89;
        }
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
        *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
        int v90 = *(_DWORD *)(a2 + 204);
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
        *(_DWORD *)(a1 + 204) = v90;
        unint64_t v91 = *(void **)(a2 + 216);
        *(void *)(a1 + 216) = v91;
        *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
        *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v92 = v91;
      }
      *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
      *(void *)(a1 + 232) = *(void *)(a2 + 232);
      swift_retain();
    }
  }
  else if (v6 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 24);
    long long v18 = *(_OWORD *)(a2 + 40);
    *uint64_t v4 = *v7;
    *(_OWORD *)(a1 + 40) = v18;
    long long v19 = *(_OWORD *)(a2 + 104);
    long long v21 = *(_OWORD *)(a2 + 56);
    long long v20 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v19;
    *(_OWORD *)(a1 + 56) = v21;
    *(_OWORD *)(a1 + 72) = v20;
    long long v22 = *(_OWORD *)(a2 + 168);
    long long v24 = *(_OWORD *)(a2 + 120);
    long long v23 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v22;
    *(_OWORD *)(a1 + 120) = v24;
    *(_OWORD *)(a1 + 136) = v23;
    long long v26 = *(_OWORD *)(a2 + 200);
    long long v25 = *(_OWORD *)(a2 + 216);
    long long v27 = *(_OWORD *)(a2 + 184);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    *(_OWORD *)(a1 + 200) = v26;
    *(_OWORD *)(a1 + 216) = v25;
    *(_OWORD *)(a1 + 184) = v27;
  }
  else
  {
    *(void *)(a1 + 24) = v6;
    id v45 = v6;

    uint64_t v46 = *(void **)(a1 + 32);
    int v47 = *(void **)(a2 + 32);
    *(void *)(a1 + 32) = v47;
    id v48 = v47;

    int v49 = *(void **)(a1 + 40);
    uint64_t v50 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v50;
    id v51 = v50;

    long long v52 = (_OWORD *)(a1 + 48);
    long long v53 = (id *)(a2 + 48);
    unint64_t v54 = *(void *)(a2 + 168) & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 168) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        long long v55 = *(_OWORD *)v53;
        long long v56 = *(_OWORD *)(a2 + 64);
        long long v57 = *(_OWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(_OWORD *)(a1 + 96) = v57;
        _OWORD *v52 = v55;
        *(_OWORD *)(a1 + 64) = v56;
        long long v58 = *(_OWORD *)(a2 + 112);
        long long v59 = *(_OWORD *)(a2 + 128);
        long long v60 = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 160) = v60;
        *(_OWORD *)(a1 + 112) = v58;
        *(_OWORD *)(a1 + 128) = v59;
        long long v61 = *(_OWORD *)(a2 + 176);
        long long v62 = *(_OWORD *)(a2 + 192);
        long long v63 = *(_OWORD *)(a2 + 208);
        *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
        *(_OWORD *)(a1 + 192) = v62;
        *(_OWORD *)(a1 + 208) = v63;
        *(_OWORD *)(a1 + 176) = v61;
      }
      else
      {
        int v75 = *(unsigned __int8 *)(a2 + 56);
        if (v75 == 255)
        {
          id v93 = *v53;
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
          *(void *)long long v52 = v93;
        }
        else
        {
          id v76 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 56));
          *(void *)(a1 + 48) = v76;
          *(unsigned char *)(a1 + 56) = v75;
        }
        *(void *)(a1 + 64) = *(void *)(a2 + 64);
        *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
        *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
        long long v94 = *(_OWORD *)(a2 + 92);
        *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
        *(_OWORD *)(a1 + 92) = v94;
        long long v95 = *(_OWORD *)(a2 + 112);
        long long v96 = *(_OWORD *)(a2 + 128);
        *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
        *(_OWORD *)(a1 + 112) = v95;
        *(_OWORD *)(a1 + 128) = v96;
        *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
        *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
        *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
        unint64_t v97 = *(void *)(a2 + 168);
        if (v97 >> 1 == 0xFFFFFFFF)
        {
          long long v98 = *(_OWORD *)(a2 + 168);
          *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
          *(_OWORD *)(a1 + 168) = v98;
        }
        else
        {
          uint64_t v99 = *(void *)(a2 + 152);
          uint64_t v100 = *(void *)(a2 + 160);
          uint64_t v101 = *(void *)(a2 + 176);
          outlined copy of AccessibilityImageLabel(v99, v100, *(void *)(a2 + 168));
          *(void *)(a1 + 152) = v99;
          *(void *)(a1 + 160) = v100;
          *(void *)(a1 + 168) = v97;
          *(void *)(a1 + 176) = v101;
        }
        *(void *)(a1 + 184) = *(void *)(a2 + 184);
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
        *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
        int v102 = *(_DWORD *)(a2 + 204);
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
        *(_DWORD *)(a1 + 204) = v102;
        uint64_t v103 = *(void **)(a2 + 216);
        *(void *)(a1 + 216) = v103;
        *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
        *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
        swift_unknownObjectRetain();
        swift_retain();
        id v104 = v103;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(a1 + 48);
      long long v66 = *(_OWORD *)(a2 + 96);
      long long v68 = *(_OWORD *)v53;
      long long v67 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v66;
      _OWORD *v52 = v68;
      *(_OWORD *)(a1 + 64) = v67;
      long long v69 = *(_OWORD *)(a2 + 160);
      long long v71 = *(_OWORD *)(a2 + 112);
      long long v70 = *(_OWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
      *(_OWORD *)(a1 + 160) = v69;
      *(_OWORD *)(a1 + 112) = v71;
      *(_OWORD *)(a1 + 128) = v70;
      long long v73 = *(_OWORD *)(a2 + 192);
      long long v72 = *(_OWORD *)(a2 + 208);
      long long v74 = *(_OWORD *)(a2 + 176);
      *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
      *(_OWORD *)(a1 + 192) = v73;
      *(_OWORD *)(a1 + 208) = v72;
      *(_OWORD *)(a1 + 176) = v74;
    }
    else
    {
      int v77 = *(unsigned __int8 *)(a2 + 56);
      if (*(unsigned __int8 *)(a1 + 56) == 255)
      {
        if (v77 == 255)
        {
          id v107 = *v53;
          *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
          *(void *)long long v52 = v107;
        }
        else
        {
          id v105 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 56));
          *(void *)(a1 + 48) = v105;
          *(unsigned char *)(a1 + 56) = v77;
        }
      }
      else if (v77 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1 + 48);
        char v106 = *(unsigned char *)(a2 + 56);
        *(void *)long long v52 = *v53;
        *(unsigned char *)(a1 + 56) = v106;
      }
      else
      {
        id v78 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 56));
        unint64_t v79 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = v78;
        char v80 = *(unsigned char *)(a1 + 56);
        *(unsigned char *)(a1 + 56) = v77;
        outlined consume of GraphicsImage.Contents(v79, v80);
      }
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
      long long v108 = *(_OWORD *)(a2 + 92);
      *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
      *(_OWORD *)(a1 + 92) = v108;
      long long v109 = *(_OWORD *)(a2 + 112);
      long long v110 = *(_OWORD *)(a2 + 128);
      *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
      *(_OWORD *)(a1 + 112) = v109;
      *(_OWORD *)(a1 + 128) = v110;
      *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
      *(unsigned char *)(a1 + 146) = *(unsigned char *)(a2 + 146);
      *(unsigned char *)(a1 + 147) = *(unsigned char *)(a2 + 147);
      uint64_t v111 = (_OWORD *)(a1 + 152);
      v112 = (_OWORD *)(a2 + 152);
      uint64_t v113 = *(void *)(a2 + 168);
      unint64_t v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
      if (*(void *)(a1 + 168) >> 1 == 0xFFFFFFFFLL)
      {
        if (v114 == 0x1FFFFFFFELL)
        {
          long long v115 = *(_OWORD *)(a2 + 168);
          _OWORD *v111 = *v112;
          *(_OWORD *)(a1 + 168) = v115;
        }
        else
        {
          uint64_t v117 = *(void *)(a2 + 152);
          uint64_t v118 = *(void *)(a2 + 160);
          uint64_t v119 = *(void *)(a2 + 176);
          outlined copy of AccessibilityImageLabel(v117, v118, *(void *)(a2 + 168));
          *(void *)(a1 + 152) = v117;
          *(void *)(a1 + 160) = v118;
          *(void *)(a1 + 168) = v113;
          *(void *)(a1 + 176) = v119;
        }
      }
      else if (v114 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(a1 + 152);
        long long v116 = *(_OWORD *)(a2 + 168);
        _OWORD *v111 = *v112;
        *(_OWORD *)(a1 + 168) = v116;
      }
      else
      {
        uint64_t v120 = *(void *)(a2 + 152);
        uint64_t v121 = *(void *)(a2 + 160);
        uint64_t v122 = *(void *)(a2 + 176);
        outlined copy of AccessibilityImageLabel(v120, v121, *(void *)(a2 + 168));
        uint64_t v123 = *(void *)(a1 + 152);
        uint64_t v124 = *(void *)(a1 + 160);
        uint64_t v125 = *(void *)(a1 + 168);
        *(void *)(a1 + 152) = v120;
        *(void *)(a1 + 160) = v121;
        *(void *)(a1 + 168) = v113;
        *(void *)(a1 + 176) = v122;
        outlined consume of AccessibilityImageLabel(v123, v124, v125);
      }
      *(void *)(a1 + 184) = *(void *)(a2 + 184);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
      *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
      int v126 = *(_DWORD *)(a2 + 204);
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      *(_DWORD *)(a1 + 204) = v126;
      v127 = *(void **)(a1 + 216);
      v128 = *(void **)(a2 + 216);
      *(void *)(a1 + 216) = v128;
      id v129 = v128;

      *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
      *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
    }
    *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    swift_retain();
    swift_release();
  }
  v130 = (long long *)(a1 + 240);
  v131 = (long long *)(a2 + 240);
  uint64_t v132 = *(void *)(a1 + 288);
  uint64_t v133 = *(void *)(a2 + 288);
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      long long v134 = *v131;
      long long v135 = *(_OWORD *)(a2 + 256);
      long long v136 = *(_OWORD *)(a2 + 288);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v136;
LABEL_47:
      long long *v130 = v134;
      v130[1] = v135;
      goto LABEL_59;
    }
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    v140 = (_OWORD *)(a1 + 264);
    v141 = (long long *)(a2 + 264);
    uint64_t v142 = *(void *)(a2 + 288);
    if (v142)
    {
      *(void *)(a1 + 288) = v142;
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      (**(void (***)(_OWORD *, long long *))(v142 - 8))(v140, v141);
    }
    else
    {
      long long v145 = *v141;
      long long v146 = *(_OWORD *)(a2 + 280);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      _OWORD *v140 = v145;
      *(_OWORD *)(a1 + 280) = v146;
    }
  }
  else
  {
    if (v133 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent(a1 + 240);
      long long v137 = *(_OWORD *)(a2 + 288);
      long long v139 = *v131;
      long long v138 = *(_OWORD *)(a2 + 256);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
      *(_OWORD *)(a1 + 288) = v137;
      long long *v130 = v139;
      *(_OWORD *)(a1 + 256) = v138;
      goto LABEL_59;
    }
    *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
    *(_DWORD *)(a1 + 244) = *(_DWORD *)(a2 + 244);
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    v130 = (long long *)(a1 + 264);
    v143 = (long long *)(a2 + 264);
    uint64_t v144 = *(void *)(a2 + 288);
    if (!v132)
    {
      if (v144)
      {
        *(void *)(a1 + 288) = v144;
        *(void *)(a1 + 296) = *(void *)(a2 + 296);
        (**(void (***)(uint64_t, uint64_t))(v144 - 8))(a1 + 264, a2 + 264);
        goto LABEL_59;
      }
      long long v134 = *v143;
      long long v135 = *(_OWORD *)(a2 + 280);
      *(void *)(a1 + 296) = *(void *)(a2 + 296);
      goto LABEL_47;
    }
    if (v144)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 264), (uint64_t *)(a2 + 264));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 264);
      uint64_t v147 = *(void *)(a2 + 296);
      long long v148 = *(_OWORD *)(a2 + 280);
      long long *v130 = *v143;
      *(_OWORD *)(a1 + 280) = v148;
      *(void *)(a1 + 296) = v147;
    }
  }
LABEL_59:
  uint64_t v149 = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 304) = v149;
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 328) = *(_DWORD *)(a2 + 328);
  *(_DWORD *)(a1 + 332) = *(_DWORD *)(a2 + 332);
  return a1;
}

void *__swift_memcpy336_8(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x150uLL);
}

uint64_t assignWithTake for MapKitPlatformItem(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  if (v5 == (void *)1) {
    goto LABEL_4;
  }
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 24);
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 200);
    *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
    *(_OWORD *)(a1 + 200) = v6;
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(void *)(a1 + 232) = *(void *)(a2 + 232);
    long long v7 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v7;
    long long v8 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v8;
    long long v9 = *(_OWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 72) = v9;
    long long v10 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(_OWORD *)(a1 + 104) = v10;
    long long v11 = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 40) = v11;
    goto LABEL_21;
  }
  *(void *)(a1 + 24) = v4;

  long long v12 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);

  long long v13 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  long long v14 = (void *)(a1 + 48);
  long long v15 = (void *)(a2 + 48);
  if (*(void *)(a1 + 168) >> 1 == 4294967294) {
    goto LABEL_8;
  }
  if (*(void *)(a2 + 168) >> 1 != 4294967294)
  {
    int v21 = *(unsigned __int8 *)(a1 + 56);
    if (v21 != 255)
    {
      int v22 = *(unsigned __int8 *)(a2 + 56);
      if (v22 != 255)
      {
        long long v23 = *(void **)(a1 + 48);
        *(void *)(a1 + 48) = *v15;
        *(unsigned char *)(a1 + 56) = v22;
        outlined consume of GraphicsImage.Contents(v23, v21);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 48);
    }
    *long long v14 = *v15;
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
LABEL_14:
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(unsigned char *)(a1 + 88) = *(unsigned char *)(a2 + 88);
    *(_OWORD *)(a1 + 92) = *(_OWORD *)(a2 + 92);
    *(unsigned char *)(a1 + 108) = *(unsigned char *)(a2 + 108);
    long long v24 = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 128) = v24;
    *(unsigned char *)(a1 + 144) = *(unsigned char *)(a2 + 144);
    *(unsigned char *)(a1 + 145) = *(unsigned char *)(a2 + 145);
    unint64_t v25 = *(void *)(a1 + 168);
    *(_WORD *)(a1 + 146) = *(_WORD *)(a2 + 146);
    if (v25 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v26 = *(void *)(a2 + 168);
      if (v26 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v28 = *(void *)(a2 + 176);
        uint64_t v29 = *(void *)(a1 + 152);
        uint64_t v30 = *(void *)(a1 + 160);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(void *)(a1 + 168) = v26;
        *(void *)(a1 + 176) = v28;
        outlined consume of AccessibilityImageLabel(v29, v30, v25);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 152);
    }
    long long v27 = *(_OWORD *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
    *(_OWORD *)(a1 + 168) = v27;
LABEL_19:
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    swift_unknownObjectRelease();
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_release();
    *(unsigned char *)(a1 + 200) = *(unsigned char *)(a2 + 200);
    *(unsigned char *)(a1 + 201) = *(unsigned char *)(a2 + 201);
    *(_DWORD *)(a1 + 204) = *(_DWORD *)(a2 + 204);
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    uint64_t v31 = *(void **)(a1 + 216);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);

    *(_WORD *)(a1 + 224) = *(_WORD *)(a2 + 224);
    *(unsigned char *)(a1 + 226) = *(unsigned char *)(a2 + 226);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 48);
LABEL_8:
  long long v16 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v16;
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(_DWORD *)(a1 + 223) = *(_DWORD *)(a2 + 223);
  long long v17 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v17;
  long long v18 = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 144) = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 160) = v18;
  long long v19 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)long long v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 64) = v19;
  long long v20 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v20;
LABEL_20:
  *(unsigned char *)(a1 + 227) = *(unsigned char *)(a2 + 227);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  swift_release();
LABEL_21:
  uint64_t v32 = *(void *)(a1 + 288);
  if (v32 == 1)
  {
LABEL_24:
    long long v34 = *(_OWORD *)(a2 + 256);
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_OWORD *)(a1 + 256) = v34;
    long long v35 = *(_OWORD *)(a2 + 288);
    *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
    *(_OWORD *)(a1 + 288) = v35;
    goto LABEL_30;
  }
  uint64_t v33 = *(void *)(a2 + 288);
  if (v33 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 240);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
  *(void *)(a1 + 256) = *(void *)(a2 + 256);
  if (v32)
  {
    uint64_t v36 = a1 + 264;
    if (v33) {
      __swift_destroy_boxed_opaque_existential_1(v36);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v36);
    }
  }
  long long v37 = *(_OWORD *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 280) = v37;
  *(void *)(a1 + 296) = *(void *)(a2 + 296);
LABEL_30:
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  *(void *)(a1 + 320) = *(void *)(a2 + 320);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapKitPlatformItem(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 336)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MapKitPlatformItem(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 328) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 336) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 336) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MapKitPlatformItem()
{
  return &type metadata for MapKitPlatformItem;
}

uint64_t type metadata completion function for MapKitPlatformItemReader()
{
  uint64_t result = type metadata accessor for _VariadicView.Tree();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for MapKitPlatformItemReader(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = v6;
  unint64_t v8 = v6 & 0xF8 ^ 0xFFFFFFFFFFFFFFF8;
  uint64_t v9 = v6 + 16;
  unint64_t v10 = v8 & v9;
  int v11 = v6 & 0x100000;
  uint64_t v12 = *a2;
  if (v7 > 7 || v11 != 0 || ((v7 + 16) & ~v7) + *(void *)(v5 + 64) + v10 > 0x18)
  {
    *a1 = v12;
    a1 = (void *)(v12 + v10);
    swift_retain();
  }
  else
  {
    uint64_t v15 = ~v7;
    uint64_t v16 = a2[1];
    *a1 = v12;
    a1[1] = v16;
    long long v17 = (_OWORD *)(v8 & ((unint64_t)a1 + 23));
    long long v18 = (_OWORD *)(v8 & ((unint64_t)a2 + 23));
    *long long v17 = *v18;
    unint64_t v19 = ((unint64_t)v17 + v9) & v15;
    unint64_t v20 = ((unint64_t)v18 + v9) & v15;
    int v21 = *(void (**)(unint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    v21(v19, v20, v4);
  }
  return a1;
}

uint64_t destroy for MapKitPlatformItemReader(uint64_t a1, uint64_t a2)
{
  swift_release();
  uint64_t v4 = *(void *)(*(void *)(a2 + 24) - 8);
  uint64_t v5 = *(uint64_t (**)(unint64_t))(v4 + 8);
  unint64_t v6 = (*(unsigned __int8 *)(v4 + 80)
      + ((a1 + (*(unsigned __int8 *)(v4 + 80) | 7) + 16) & ~(*(unsigned __int8 *)(v4 + 80) | 7))
      + 16) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);

  return v5(v6);
}

void *initializeWithCopy for MapKitPlatformItemReader(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(void *)(a3 + 24);
  unint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(v5 - 8) + 80);
  uint64_t v8 = (v7 | 7) + 16;
  uint64_t v9 = (_OWORD *)(((unint64_t)a1 + v8) & ~(v7 | 7));
  unint64_t v10 = (_OWORD *)(((unint64_t)a2 + v8) & ~(v7 | 7));
  *uint64_t v9 = *v10;
  uint64_t v11 = ((unint64_t)v9 + v7 + 16) & ~v7;
  uint64_t v12 = ((unint64_t)v10 + v7 + 16) & ~v7;
  swift_retain();
  v6(v11, v12, v5);
  return a1;
}

void *assignWithCopy for MapKitPlatformItemReader(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_retain();
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = *(void (**)(unint64_t, unint64_t))(v7 + 24);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 | 7) + 16;
  uint64_t v11 = (void *)(((unint64_t)a1 + v10) & ~(v9 | 7));
  uint64_t v12 = (void *)(((unint64_t)a2 + v10) & ~(v9 | 7));
  *uint64_t v11 = *v12;
  v11[1] = v12[1];
  v8(((unint64_t)v11 + v9 + 16) & ~v9, ((unint64_t)v12 + v9 + 16) & ~v9);
  return a1;
}

_OWORD *initializeWithTake for MapKitPlatformItemReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v5 = *(void (**)(unint64_t, unint64_t))(v4 + 32);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 | 7) + 16;
  uint64_t v8 = (_OWORD *)(((unint64_t)a1 + v7) & ~(v6 | 7));
  uint64_t v9 = (_OWORD *)(((unint64_t)a2 + v7) & ~(v6 | 7));
  *uint64_t v8 = *v9;
  v5(((unint64_t)v8 + v6 + 16) & ~v6, ((unint64_t)v9 + v6 + 16) & ~v6);
  return a1;
}

_OWORD *assignWithTake for MapKitPlatformItemReader(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  uint64_t v6 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v7 = *(void (**)(unint64_t, unint64_t))(v6 + 40);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 | 7) + 16;
  uint64_t v10 = (void *)(((unint64_t)a1 + v9) & ~(v8 | 7));
  uint64_t v11 = (void *)(((unint64_t)a2 + v9) & ~(v8 | 7));
  *uint64_t v10 = *v11;
  v10[1] = v11[1];
  v7(((unint64_t)v10 + v8 + 16) & ~v8, ((unint64_t)v11 + v8 + 16) & ~v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for MapKitPlatformItemReader(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  uint64_t v8 = v6 | 7;
  uint64_t v9 = v6 + 16;
  int v10 = a2 - v7;
  if (a2 <= v7) {
    goto LABEL_23;
  }
  uint64_t v11 = (v9 & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64) + (v9 & ~v8);
  char v12 = 8 * v11;
  if (v11 <= 3)
  {
    unsigned int v15 = ((v10 + ~(-1 << v12)) >> v12) + 1;
    if (HIWORD(v15))
    {
      int v13 = *(_DWORD *)((char *)a1 + v11);
      if (!v13) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 > 0xFF)
    {
      int v13 = *(unsigned __int16 *)((char *)a1 + v11);
      if (!*(unsigned __int16 *)((char *)a1 + v11)) {
        goto LABEL_23;
      }
      goto LABEL_15;
    }
    if (v15 < 2)
    {
LABEL_23:
      if ((v5 & 0x80000000) != 0) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((v9 + (((unint64_t)a1 + v8 + 16) & ~v8)) & ~v6);
      }
      uint64_t v17 = *(void *)a1;
      if (*(void *)a1 >= 0xFFFFFFFFuLL) {
        LODWORD(v17) = -1;
      }
      return (v17 + 1);
    }
  }
  int v13 = *((unsigned __int8 *)a1 + v11);
  if (!*((unsigned char *)a1 + v11)) {
    goto LABEL_23;
  }
LABEL_15:
  int v16 = (v13 - 1) << v12;
  if (v11 > 3) {
    int v16 = 0;
  }
  if (v11)
  {
    if (v11 > 3) {
      LODWORD(v11) = 4;
    }
    switch((int)v11)
    {
      case 2:
        LODWORD(v11) = *a1;
        break;
      case 3:
        LODWORD(v11) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v11) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v11) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v7 + (v11 | v16) + 1;
}

void storeEnumTagSinglePayload for MapKitPlatformItemReader(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((v9 + 16) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64);
  size_t v11 = v10 + ((v9 + 16) & ~(v9 | 7));
  BOOL v12 = a3 >= v8;
  unsigned int v13 = a3 - v8;
  if (v13 != 0 && v12)
  {
    if (v11 <= 3)
    {
      unsigned int v17 = ((v13 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
      if (HIWORD(v17))
      {
        int v14 = 4;
      }
      else if (v17 >= 0x100)
      {
        int v14 = 2;
      }
      else
      {
        int v14 = v17 > 1;
      }
    }
    else
    {
      int v14 = 1;
    }
  }
  else
  {
    int v14 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v15 = ~v8 + a2;
    if (v11 < 4)
    {
      int v16 = (v15 >> (8 * v11)) + 1;
      if (v11)
      {
        int v18 = v15 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if (v11 == 3)
        {
          *(_WORD *)a1 = v18;
          a1[2] = BYTE2(v18);
        }
        else if (v11 == 2)
        {
          *(_WORD *)a1 = v18;
        }
        else
        {
          *a1 = v18;
        }
      }
    }
    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v15;
      int v16 = 1;
    }
    switch(v14)
    {
      case 1:
        a1[v11] = v16;
        return;
      case 2:
        *(_WORD *)&a1[v11] = v16;
        return;
      case 3:
        goto LABEL_55;
      case 4:
        *(_DWORD *)&a1[v11] = v16;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 2:
      *(_WORD *)&a1[v11] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_24;
    case 3:
LABEL_55:
      __break(1u);
      JUMPOUT(0x187DC2A14);
    case 4:
      *(_DWORD *)&a1[v11] = 0;
      goto LABEL_23;
    default:
LABEL_23:
      if (a2)
      {
LABEL_24:
        if ((v7 & 0x80000000) != 0)
        {
          unint64_t v20 = (unsigned char *)((unint64_t)&a1[(v9 | 7) + 16] & ~(v9 | 7));
          if (v7 >= a2)
          {
            long long v24 = *(void (**)(unint64_t))(v6 + 56);
            v24((unint64_t)&v20[v9 + 16] & ~v9);
          }
          else
          {
            if (v10 <= 3) {
              int v21 = ~(-1 << (8 * v10));
            }
            else {
              int v21 = -1;
            }
            if (v10)
            {
              int v22 = v21 & (~v7 + a2);
              if (v10 <= 3) {
                int v23 = v10;
              }
              else {
                int v23 = 4;
              }
              bzero(v20, v10);
              switch(v23)
              {
                case 2:
                  *(_WORD *)unint64_t v20 = v22;
                  break;
                case 3:
                  *(_WORD *)unint64_t v20 = v22;
                  v20[2] = BYTE2(v22);
                  break;
                case 4:
                  *(_DWORD *)unint64_t v20 = v22;
                  break;
                default:
                  *unint64_t v20 = v22;
                  break;
              }
            }
          }
        }
        else
        {
          if ((a2 & 0x80000000) != 0)
          {
            uint64_t v19 = a2 ^ 0x80000000;
            *((void *)a1 + 1) = 0;
          }
          else
          {
            uint64_t v19 = a2 - 1;
          }
          *(void *)a1 = v19;
        }
      }
      return;
  }
}

_UNKNOWN **sub_187DC2A4C()
{
  return &protocol witness table for PlatformItemsReader<A, B, C>;
}

uint64_t initializeWithCopy for MapKitPlatformItem.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  uint64_t v5 = a2 + 32;
  uint64_t v6 = *(void **)(a2 + 32);
  swift_bridgeObjectRetain();
  if (v6 == (void *)1)
  {
    long long v7 = *(_OWORD *)(v5 + 176);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(v5 + 160);
    *(_OWORD *)(a1 + 208) = v7;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(v5 + 192);
    *(void *)(a1 + 240) = *(void *)(v5 + 208);
    long long v8 = *(_OWORD *)(v5 + 112);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(v5 + 96);
    *(_OWORD *)(a1 + 144) = v8;
    long long v9 = *(_OWORD *)(v5 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(v5 + 128);
    *(_OWORD *)(a1 + 176) = v9;
    long long v10 = *(_OWORD *)(v5 + 48);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(v5 + 32);
    *(_OWORD *)(a1 + 80) = v10;
    long long v11 = *(_OWORD *)(v5 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(v5 + 64);
    *(_OWORD *)(a1 + 112) = v11;
    long long v12 = *(_OWORD *)(v5 + 16);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)v5;
    *(_OWORD *)(a1 + 48) = v12;
  }
  else
  {
    unsigned int v13 = *(void **)(a2 + 40);
    int v14 = *(void **)(a2 + 48);
    *(void *)(a1 + 32) = v6;
    *(void *)(a1 + 40) = v13;
    *(void *)(a1 + 48) = v14;
    unsigned int v15 = (_OWORD *)(a1 + 56);
    int v16 = (id *)(a2 + 56);
    uint64_t v17 = *(void *)(a2 + 176);
    id v18 = v6;
    id v19 = v13;
    id v20 = v14;
    if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFCLL)
    {
      long long v21 = *(_OWORD *)(a2 + 200);
      *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 200) = v21;
      *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      long long v22 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v22;
      long long v23 = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v23;
      long long v24 = *(_OWORD *)(a2 + 72);
      _OWORD *v15 = *(_OWORD *)v16;
      *(_OWORD *)(a1 + 72) = v24;
      long long v25 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v25;
    }
    else
    {
      int v26 = *(unsigned __int8 *)(a2 + 64);
      if (v26 == 255)
      {
        *(void *)unsigned int v15 = *v16;
        *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
      }
      else
      {
        id v27 = *v16;
        outlined copy of GraphicsImage.Contents(*v16, *(unsigned char *)(a2 + 64));
        *(void *)(a1 + 56) = v27;
        *(unsigned char *)(a1 + 64) = v26;
      }
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
      *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      long long v28 = *(_OWORD *)(a2 + 136);
      *(_WORD *)(a1 + 152) = *(_WORD *)(a2 + 152);
      *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
      *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
      *(_OWORD *)(a1 + 136) = v28;
      if ((v17 & 0xFFFFFFFFFFFFFFFELL) == 0x1FFFFFFFELL)
      {
        long long v29 = *(_OWORD *)(a2 + 176);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(_OWORD *)(a1 + 176) = v29;
      }
      else
      {
        uint64_t v30 = *(void *)(a2 + 160);
        uint64_t v31 = *(void *)(a2 + 168);
        uint64_t v32 = *(void *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v30, v31, v17);
        *(void *)(a1 + 160) = v30;
        *(void *)(a1 + 168) = v31;
        *(void *)(a1 + 176) = v17;
        *(void *)(a1 + 184) = v32;
      }
      uint64_t v33 = *(void *)(a2 + 200);
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      *(void *)(a1 + 200) = v33;
      *(_WORD *)(a1 + 208) = *(_WORD *)(a2 + 208);
      *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      long long v34 = *(void **)(a2 + 224);
      *(void *)(a1 + 224) = v34;
      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
      swift_unknownObjectRetain();
      swift_retain();
      id v35 = v34;
    }
    *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    swift_retain();
  }
  uint64_t v36 = *(void *)(a2 + 296);
  if (v36 == 1)
  {
    long long v37 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v37;
    long long v38 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v38;
  }
  else
  {
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    long long v39 = (_OWORD *)(a1 + 272);
    long long v40 = (_OWORD *)(a2 + 272);
    if (v36)
    {
      uint64_t v41 = *(void *)(a2 + 304);
      *(void *)(a1 + 296) = v36;
      *(void *)(a1 + 304) = v41;
      (**(void (***)(_OWORD *, _OWORD *))(v36 - 8))(v39, v40);
    }
    else
    {
      long long v42 = *(_OWORD *)(a2 + 288);
      *long long v39 = *v40;
      *(_OWORD *)(a1 + 288) = v42;
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
    }
  }
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  uint64_t v43 = *(void *)(a2 + 336);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  *(void *)(a1 + 336) = v43;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for MapKitPlatformItem.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v4 = (_OWORD *)(a1 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  long long v7 = (_OWORD *)(a2 + 32);
  uint64_t v6 = *(void **)(a2 + 32);
  if (v5 == (void *)1)
  {
    if (v6 == (void *)1)
    {
      long long v8 = *(_OWORD *)(a2 + 48);
      *uint64_t v4 = *v7;
      *(_OWORD *)(a1 + 48) = v8;
      long long v9 = *(_OWORD *)(a2 + 64);
      long long v10 = *(_OWORD *)(a2 + 80);
      long long v11 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v11;
      *(_OWORD *)(a1 + 64) = v9;
      *(_OWORD *)(a1 + 80) = v10;
      long long v12 = *(_OWORD *)(a2 + 128);
      long long v13 = *(_OWORD *)(a2 + 144);
      long long v14 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v14;
      *(_OWORD *)(a1 + 128) = v12;
      *(_OWORD *)(a1 + 144) = v13;
      long long v15 = *(_OWORD *)(a2 + 192);
      long long v16 = *(_OWORD *)(a2 + 208);
      long long v17 = *(_OWORD *)(a2 + 224);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      *(_OWORD *)(a1 + 208) = v16;
      *(_OWORD *)(a1 + 224) = v17;
      *(_OWORD *)(a1 + 192) = v15;
    }
    else
    {
      *(void *)(a1 + 32) = v6;
      long long v28 = *(void **)(a2 + 40);
      *(void *)(a1 + 40) = v28;
      long long v29 = *(void **)(a2 + 48);
      *(void *)(a1 + 48) = v29;
      uint64_t v30 = (_OWORD *)(a1 + 56);
      uint64_t v31 = (id *)(a2 + 56);
      unint64_t v32 = *(void *)(a2 + 176);
      id v33 = v6;
      id v34 = v28;
      id v35 = v29;
      if (v32 >> 1 == 4294967294)
      {
        long long v36 = *(_OWORD *)v31;
        long long v37 = *(_OWORD *)(a2 + 72);
        long long v38 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v38;
        *uint64_t v30 = v36;
        *(_OWORD *)(a1 + 72) = v37;
        long long v39 = *(_OWORD *)(a2 + 120);
        long long v40 = *(_OWORD *)(a2 + 136);
        long long v41 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v41;
        *(_OWORD *)(a1 + 120) = v39;
        *(_OWORD *)(a1 + 136) = v40;
        long long v42 = *(_OWORD *)(a2 + 184);
        long long v43 = *(_OWORD *)(a2 + 200);
        long long v44 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v43;
        *(_OWORD *)(a1 + 216) = v44;
        *(_OWORD *)(a1 + 184) = v42;
      }
      else
      {
        int v64 = *(unsigned __int8 *)(a2 + 64);
        if (v64 == 255)
        {
          id v81 = *v31;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)uint64_t v30 = v81;
        }
        else
        {
          id v65 = *v31;
          outlined copy of GraphicsImage.Contents(*v31, *(unsigned char *)(a2 + 64));
          *(void *)(a1 + 56) = v65;
          *(unsigned char *)(a1 + 64) = v64;
        }
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
        long long v82 = *(_OWORD *)(a2 + 100);
        *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v82;
        long long v83 = *(_OWORD *)(a2 + 120);
        long long v84 = *(_OWORD *)(a2 + 136);
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v84;
        *(_OWORD *)(a1 + 120) = v83;
        *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
        *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
        *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
        unint64_t v85 = *(void *)(a2 + 176);
        if (v85 >> 1 == 0xFFFFFFFF)
        {
          long long v86 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v86;
        }
        else
        {
          uint64_t v87 = *(void *)(a2 + 160);
          uint64_t v88 = *(void *)(a2 + 168);
          uint64_t v89 = *(void *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v87, v88, *(void *)(a2 + 176));
          *(void *)(a1 + 160) = v87;
          *(void *)(a1 + 168) = v88;
          *(void *)(a1 + 176) = v85;
          *(void *)(a1 + 184) = v89;
        }
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
        *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
        int v90 = *(_DWORD *)(a2 + 212);
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v90;
        unint64_t v91 = *(void **)(a2 + 224);
        *(void *)(a1 + 224) = v91;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        id v92 = v91;
      }
      *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
      *(void *)(a1 + 240) = *(void *)(a2 + 240);
      swift_retain();
    }
  }
  else if (v6 == (void *)1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
    long long v18 = *(_OWORD *)(a2 + 48);
    *uint64_t v4 = *v7;
    *(_OWORD *)(a1 + 48) = v18;
    long long v19 = *(_OWORD *)(a2 + 112);
    long long v21 = *(_OWORD *)(a2 + 64);
    long long v20 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v19;
    *(_OWORD *)(a1 + 64) = v21;
    *(_OWORD *)(a1 + 80) = v20;
    long long v22 = *(_OWORD *)(a2 + 176);
    long long v24 = *(_OWORD *)(a2 + 128);
    long long v23 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v22;
    *(_OWORD *)(a1 + 128) = v24;
    *(_OWORD *)(a1 + 144) = v23;
    long long v26 = *(_OWORD *)(a2 + 208);
    long long v25 = *(_OWORD *)(a2 + 224);
    long long v27 = *(_OWORD *)(a2 + 192);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)(a1 + 208) = v26;
    *(_OWORD *)(a1 + 224) = v25;
    *(_OWORD *)(a1 + 192) = v27;
  }
  else
  {
    *(void *)(a1 + 32) = v6;
    id v45 = v6;

    uint64_t v46 = *(void **)(a1 + 40);
    int v47 = *(void **)(a2 + 40);
    *(void *)(a1 + 40) = v47;
    id v48 = v47;

    int v49 = *(void **)(a1 + 48);
    uint64_t v50 = *(void **)(a2 + 48);
    *(void *)(a1 + 48) = v50;
    id v51 = v50;

    long long v52 = (_OWORD *)(a1 + 56);
    long long v53 = (id *)(a2 + 56);
    unint64_t v54 = *(void *)(a2 + 176) & 0xFFFFFFFFFFFFFFFELL;
    if (*(void *)(a1 + 176) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        long long v55 = *(_OWORD *)v53;
        long long v56 = *(_OWORD *)(a2 + 72);
        long long v57 = *(_OWORD *)(a2 + 104);
        *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
        *(_OWORD *)(a1 + 104) = v57;
        _OWORD *v52 = v55;
        *(_OWORD *)(a1 + 72) = v56;
        long long v58 = *(_OWORD *)(a2 + 120);
        long long v59 = *(_OWORD *)(a2 + 136);
        long long v60 = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
        *(_OWORD *)(a1 + 168) = v60;
        *(_OWORD *)(a1 + 120) = v58;
        *(_OWORD *)(a1 + 136) = v59;
        long long v61 = *(_OWORD *)(a2 + 184);
        long long v62 = *(_OWORD *)(a2 + 200);
        long long v63 = *(_OWORD *)(a2 + 216);
        *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
        *(_OWORD *)(a1 + 200) = v62;
        *(_OWORD *)(a1 + 216) = v63;
        *(_OWORD *)(a1 + 184) = v61;
      }
      else
      {
        int v75 = *(unsigned __int8 *)(a2 + 64);
        if (v75 == 255)
        {
          id v93 = *v53;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)long long v52 = v93;
        }
        else
        {
          id v76 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 64));
          *(void *)(a1 + 56) = v76;
          *(unsigned char *)(a1 + 64) = v75;
        }
        *(void *)(a1 + 72) = *(void *)(a2 + 72);
        *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
        *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
        long long v94 = *(_OWORD *)(a2 + 100);
        *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
        *(_OWORD *)(a1 + 100) = v94;
        long long v95 = *(_OWORD *)(a2 + 120);
        long long v96 = *(_OWORD *)(a2 + 136);
        *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
        *(_OWORD *)(a1 + 136) = v96;
        *(_OWORD *)(a1 + 120) = v95;
        *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
        *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
        *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
        unint64_t v97 = *(void *)(a2 + 176);
        if (v97 >> 1 == 0xFFFFFFFF)
        {
          long long v98 = *(_OWORD *)(a2 + 176);
          *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
          *(_OWORD *)(a1 + 176) = v98;
        }
        else
        {
          uint64_t v99 = *(void *)(a2 + 160);
          uint64_t v100 = *(void *)(a2 + 168);
          uint64_t v101 = *(void *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v99, v100, *(void *)(a2 + 176));
          *(void *)(a1 + 160) = v99;
          *(void *)(a1 + 168) = v100;
          *(void *)(a1 + 176) = v97;
          *(void *)(a1 + 184) = v101;
        }
        *(void *)(a1 + 192) = *(void *)(a2 + 192);
        *(void *)(a1 + 200) = *(void *)(a2 + 200);
        *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
        *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
        int v102 = *(_DWORD *)(a2 + 212);
        *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
        *(_DWORD *)(a1 + 212) = v102;
        uint64_t v103 = *(void **)(a2 + 224);
        *(void *)(a1 + 224) = v103;
        *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
        *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
        swift_unknownObjectRetain();
        swift_retain();
        id v104 = v103;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(a1 + 56);
      long long v66 = *(_OWORD *)(a2 + 104);
      long long v68 = *(_OWORD *)v53;
      long long v67 = *(_OWORD *)(a2 + 72);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 104) = v66;
      _OWORD *v52 = v68;
      *(_OWORD *)(a1 + 72) = v67;
      long long v69 = *(_OWORD *)(a2 + 168);
      long long v71 = *(_OWORD *)(a2 + 120);
      long long v70 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
      *(_OWORD *)(a1 + 168) = v69;
      *(_OWORD *)(a1 + 120) = v71;
      *(_OWORD *)(a1 + 136) = v70;
      long long v73 = *(_OWORD *)(a2 + 200);
      long long v72 = *(_OWORD *)(a2 + 216);
      long long v74 = *(_OWORD *)(a2 + 184);
      *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
      *(_OWORD *)(a1 + 200) = v73;
      *(_OWORD *)(a1 + 216) = v72;
      *(_OWORD *)(a1 + 184) = v74;
    }
    else
    {
      int v77 = *(unsigned __int8 *)(a2 + 64);
      if (*(unsigned __int8 *)(a1 + 64) == 255)
      {
        if (v77 == 255)
        {
          id v107 = *v53;
          *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
          *(void *)long long v52 = v107;
        }
        else
        {
          id v105 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 64));
          *(void *)(a1 + 56) = v105;
          *(unsigned char *)(a1 + 64) = v77;
        }
      }
      else if (v77 == 255)
      {
        outlined destroy of GraphicsImage.Contents(a1 + 56);
        char v106 = *(unsigned char *)(a2 + 64);
        *(void *)long long v52 = *v53;
        *(unsigned char *)(a1 + 64) = v106;
      }
      else
      {
        id v78 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(a2 + 64));
        unint64_t v79 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = v78;
        char v80 = *(unsigned char *)(a1 + 64);
        *(unsigned char *)(a1 + 64) = v77;
        outlined consume of GraphicsImage.Contents(v79, v80);
      }
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = *(void *)(a2 + 88);
      *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
      long long v108 = *(_OWORD *)(a2 + 100);
      *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
      *(_OWORD *)(a1 + 100) = v108;
      long long v109 = *(_OWORD *)(a2 + 120);
      long long v110 = *(_OWORD *)(a2 + 136);
      *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
      *(_OWORD *)(a1 + 136) = v110;
      *(_OWORD *)(a1 + 120) = v109;
      *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
      *(unsigned char *)(a1 + 154) = *(unsigned char *)(a2 + 154);
      *(unsigned char *)(a1 + 155) = *(unsigned char *)(a2 + 155);
      uint64_t v111 = (_OWORD *)(a1 + 160);
      v112 = (_OWORD *)(a2 + 160);
      uint64_t v113 = *(void *)(a2 + 176);
      unint64_t v114 = v113 & 0xFFFFFFFFFFFFFFFELL;
      if (*(void *)(a1 + 176) >> 1 == 0xFFFFFFFFLL)
      {
        if (v114 == 0x1FFFFFFFELL)
        {
          long long v115 = *(_OWORD *)(a2 + 176);
          _OWORD *v111 = *v112;
          *(_OWORD *)(a1 + 176) = v115;
        }
        else
        {
          uint64_t v117 = *(void *)(a2 + 160);
          uint64_t v118 = *(void *)(a2 + 168);
          uint64_t v119 = *(void *)(a2 + 184);
          outlined copy of AccessibilityImageLabel(v117, v118, *(void *)(a2 + 176));
          *(void *)(a1 + 160) = v117;
          *(void *)(a1 + 168) = v118;
          *(void *)(a1 + 176) = v113;
          *(void *)(a1 + 184) = v119;
        }
      }
      else if (v114 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(a1 + 160);
        long long v116 = *(_OWORD *)(a2 + 176);
        _OWORD *v111 = *v112;
        *(_OWORD *)(a1 + 176) = v116;
      }
      else
      {
        uint64_t v120 = *(void *)(a2 + 160);
        uint64_t v121 = *(void *)(a2 + 168);
        uint64_t v122 = *(void *)(a2 + 184);
        outlined copy of AccessibilityImageLabel(v120, v121, *(void *)(a2 + 176));
        uint64_t v123 = *(void *)(a1 + 160);
        uint64_t v124 = *(void *)(a1 + 168);
        uint64_t v125 = *(void *)(a1 + 176);
        *(void *)(a1 + 160) = v120;
        *(void *)(a1 + 168) = v121;
        *(void *)(a1 + 176) = v113;
        *(void *)(a1 + 184) = v122;
        outlined consume of AccessibilityImageLabel(v123, v124, v125);
      }
      *(void *)(a1 + 192) = *(void *)(a2 + 192);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      swift_retain();
      swift_release();
      *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
      *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
      int v126 = *(_DWORD *)(a2 + 212);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(_DWORD *)(a1 + 212) = v126;
      v127 = *(void **)(a1 + 224);
      v128 = *(void **)(a2 + 224);
      *(void *)(a1 + 224) = v128;
      id v129 = v128;

      *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
      *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
    }
    *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    swift_retain();
    swift_release();
  }
  v130 = (long long *)(a1 + 248);
  v131 = (long long *)(a2 + 248);
  uint64_t v132 = *(void *)(a1 + 296);
  uint64_t v133 = *(void *)(a2 + 296);
  if (v132 == 1)
  {
    if (v133 == 1)
    {
      long long v134 = *v131;
      long long v135 = *(_OWORD *)(a2 + 264);
      long long v136 = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v136;
LABEL_47:
      long long *v130 = v134;
      v130[1] = v135;
      goto LABEL_59;
    }
    *(void *)(a1 + 248) = *(void *)(a2 + 248);
    *(void *)(a1 + 256) = *(void *)(a2 + 256);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    v140 = (_OWORD *)(a1 + 272);
    v141 = (long long *)(a2 + 272);
    uint64_t v142 = *(void *)(a2 + 296);
    if (v142)
    {
      *(void *)(a1 + 296) = v142;
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      (**(void (***)(_OWORD *, long long *))(v142 - 8))(v140, v141);
    }
    else
    {
      long long v145 = *v141;
      long long v146 = *(_OWORD *)(a2 + 288);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      _OWORD *v140 = v145;
      *(_OWORD *)(a1 + 288) = v146;
    }
  }
  else
  {
    if (v133 == 1)
    {
      outlined destroy of PlatformItem.SelectionContent(a1 + 248);
      long long v137 = *(_OWORD *)(a2 + 296);
      long long v139 = *v131;
      long long v138 = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 296) = v137;
      long long *v130 = v139;
      *(_OWORD *)(a1 + 264) = v138;
      goto LABEL_59;
    }
    *(_DWORD *)(a1 + 248) = *(_DWORD *)(a2 + 248);
    *(_DWORD *)(a1 + 252) = *(_DWORD *)(a2 + 252);
    *(_DWORD *)(a1 + 256) = *(_DWORD *)(a2 + 256);
    *(_DWORD *)(a1 + 260) = *(_DWORD *)(a2 + 260);
    *(void *)(a1 + 264) = *(void *)(a2 + 264);
    v130 = (long long *)(a1 + 272);
    v143 = (long long *)(a2 + 272);
    uint64_t v144 = *(void *)(a2 + 296);
    if (!v132)
    {
      if (v144)
      {
        *(void *)(a1 + 296) = v144;
        *(void *)(a1 + 304) = *(void *)(a2 + 304);
        (**(void (***)(uint64_t, uint64_t))(v144 - 8))(a1 + 272, a2 + 272);
        goto LABEL_59;
      }
      long long v134 = *v143;
      long long v135 = *(_OWORD *)(a2 + 288);
      *(void *)(a1 + 304) = *(void *)(a2 + 304);
      goto LABEL_47;
    }
    if (v144)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 272), (uint64_t *)(a2 + 272));
    }
    else
    {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(a1 + 272);
      uint64_t v147 = *(void *)(a2 + 304);
      long long v148 = *(_OWORD *)(a2 + 288);
      long long *v130 = *v143;
      *(_OWORD *)(a1 + 288) = v148;
      *(void *)(a1 + 304) = v147;
    }
  }
LABEL_59:
  uint64_t v149 = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 312) = v149;
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 336) = *(_DWORD *)(a2 + 336);
  *(_DWORD *)(a1 + 340) = *(_DWORD *)(a2 + 340);
  return a1;
}

uint64_t assignWithTake for MapKitPlatformItem.Child(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 32);
  uint64_t v5 = *(void **)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  if (v5 == (void *)1) {
    goto LABEL_4;
  }
  if (v4 == 1)
  {
    outlined destroy of PlatformItem.PrimaryContent(a1 + 32);
LABEL_4:
    long long v6 = *(_OWORD *)(a2 + 208);
    *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
    *(_OWORD *)(a1 + 208) = v6;
    *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    long long v7 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v7;
    long long v8 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v8;
    long long v9 = *(_OWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 80) = v9;
    long long v10 = *(_OWORD *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 112) = v10;
    long long v11 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 48) = v11;
    goto LABEL_21;
  }
  *(void *)(a1 + 32) = v4;

  long long v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);

  long long v13 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  long long v14 = (void *)(a1 + 56);
  long long v15 = (void *)(a2 + 56);
  if (*(void *)(a1 + 176) >> 1 == 4294967294) {
    goto LABEL_8;
  }
  if (*(void *)(a2 + 176) >> 1 != 4294967294)
  {
    int v21 = *(unsigned __int8 *)(a1 + 64);
    if (v21 != 255)
    {
      int v22 = *(unsigned __int8 *)(a2 + 64);
      if (v22 != 255)
      {
        long long v23 = *(void **)(a1 + 56);
        *(void *)(a1 + 56) = *v15;
        *(unsigned char *)(a1 + 64) = v22;
        outlined consume of GraphicsImage.Contents(v23, v21);
        goto LABEL_14;
      }
      outlined destroy of GraphicsImage.Contents(a1 + 56);
    }
    *long long v14 = *v15;
    *(unsigned char *)(a1 + 64) = *(unsigned char *)(a2 + 64);
LABEL_14:
    *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(unsigned char *)(a1 + 96) = *(unsigned char *)(a2 + 96);
    *(_OWORD *)(a1 + 100) = *(_OWORD *)(a2 + 100);
    *(unsigned char *)(a1 + 116) = *(unsigned char *)(a2 + 116);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
    *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
    *(unsigned char *)(a1 + 153) = *(unsigned char *)(a2 + 153);
    unint64_t v24 = *(void *)(a1 + 176);
    *(_WORD *)(a1 + 154) = *(_WORD *)(a2 + 154);
    if (v24 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v25 = *(void *)(a2 + 176);
      if (v25 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v27 = *(void *)(a2 + 184);
        uint64_t v28 = *(void *)(a1 + 160);
        uint64_t v29 = *(void *)(a1 + 168);
        *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
        *(void *)(a1 + 176) = v25;
        *(void *)(a1 + 184) = v27;
        outlined consume of AccessibilityImageLabel(v28, v29, v24);
        goto LABEL_19;
      }
      outlined destroy of AccessibilityImageLabel(a1 + 160);
    }
    long long v26 = *(_OWORD *)(a2 + 176);
    *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
    *(_OWORD *)(a1 + 176) = v26;
LABEL_19:
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    swift_unknownObjectRelease();
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    swift_release();
    *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
    *(unsigned char *)(a1 + 209) = *(unsigned char *)(a2 + 209);
    *(_DWORD *)(a1 + 212) = *(_DWORD *)(a2 + 212);
    *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
    uint64_t v30 = *(void **)(a1 + 224);
    *(void *)(a1 + 224) = *(void *)(a2 + 224);

    *(_WORD *)(a1 + 232) = *(_WORD *)(a2 + 232);
    *(unsigned char *)(a1 + 234) = *(unsigned char *)(a2 + 234);
    goto LABEL_20;
  }
  outlined destroy of Image.Resolved(a1 + 56);
LABEL_8:
  long long v16 = *(_OWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 200) = v16;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_DWORD *)(a1 + 231) = *(_DWORD *)(a2 + 231);
  long long v17 = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = v17;
  long long v18 = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = v18;
  long long v19 = *(_OWORD *)(a2 + 72);
  *(_OWORD *)long long v14 = *(_OWORD *)v15;
  *(_OWORD *)(a1 + 72) = v19;
  long long v20 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v20;
LABEL_20:
  *(unsigned char *)(a1 + 235) = *(unsigned char *)(a2 + 235);
  *(void *)(a1 + 240) = *(void *)(a2 + 240);
  swift_release();
LABEL_21:
  uint64_t v31 = *(void *)(a1 + 296);
  if (v31 == 1)
  {
LABEL_24:
    long long v33 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v33;
    long long v34 = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 296) = v34;
    goto LABEL_30;
  }
  uint64_t v32 = *(void *)(a2 + 296);
  if (v32 == 1)
  {
    outlined destroy of PlatformItem.SelectionContent(a1 + 248);
    goto LABEL_24;
  }
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
  *(void *)(a1 + 264) = *(void *)(a2 + 264);
  if (v31)
  {
    uint64_t v35 = a1 + 272;
    if (v32) {
      __swift_destroy_boxed_opaque_existential_1(v35);
    }
    else {
      outlined destroy of PlatformItem.SelectionContent.AuxiliaryContent(v35);
    }
  }
  long long v36 = *(_OWORD *)(a2 + 288);
  *(_OWORD *)(a1 + 272) = *(_OWORD *)(a2 + 272);
  *(_OWORD *)(a1 + 288) = v36;
  *(void *)(a1 + 304) = *(void *)(a2 + 304);
LABEL_30:
  *(void *)(a1 + 312) = *(void *)(a2 + 312);
  *(unsigned char *)(a1 + 320) = *(unsigned char *)(a2 + 320);
  *(void *)(a1 + 328) = *(void *)(a2 + 328);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 336) = *(void *)(a2 + 336);
  return a1;
}

void *type metadata accessor for MapKitPlatformItem.Child()
{
  return &unk_1ED4285D0;
}

uint64_t base witness table accessor for _AttributeBody in MapKitPlatformItem.MakeSource<A>()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in MapKitPlatformItem.MakeSource.value.getter()
{
  return closure #1 in MapKitPlatformItem.MakeSource.value.getter(*(unsigned int *)(v0 + 32), *(void *)(v0 + 16));
}

uint64_t outlined destroy of MapKitPlatformItem(uint64_t a1)
{
  return a1;
}

uint64_t ClarityUIScene.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ClarityUIScene.body.getter@<X0>(uint64_t a1@<X8>)
{
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(0x5579746972616C43, 0xE900000000000049, 0, 0, 1, (uint64_t)&v15);
  v19[0] = v16;
  v19[1] = v17;
  long long v18 = v15;
  uint64_t v22 = *((void *)&v17 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)v19 + 8, (uint64_t)v21);
  outlined init with take of SceneID((uint64_t)&v18, (uint64_t)v20);
  long long v8 = v15;
  long long v9 = v16;
  long long v10 = v17;
  uint64_t v2 = type metadata accessor for ResolvedUISceneAdaptor();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)((uint64_t)&v8, v2, (uint64_t)&v11);
  outlined release of SceneID((uint64_t)v20);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)v21);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v22);
  long long v3 = v11;
  char v4 = v12;
  uint64_t v5 = v13;
  unint64_t v6 = v14;
  long long v8 = v11;
  LOBYTE(v9) = v12;
  *((void *)&v9 + 1) = v13;
  long long v10 = v14;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v8, v2, a1);
  outlined consume of SceneID(v3, *((uint64_t *)&v3 + 1), v4);
  outlined consume of UISceneAdaptorConfiguration.Kind(v5, v6);
  return swift_release();
}

uint64_t outlined init with take of UISceneAdaptorConfiguration.Kind(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined init with take of SceneID(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t outlined release of SceneID(uint64_t a1)
{
  return a1;
}

uint64_t outlined release of UISceneAdaptorConfiguration.Kind(uint64_t a1)
{
  return a1;
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ClarityUIScene<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ClarityUIScene(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ClarityUIScene(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187DC4094);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ClarityUIScene()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t sub_187DC40D4()
{
  type metadata accessor for ResolvedUISceneAdaptor();

  return swift_getWitnessTable();
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.GroupItem(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v7;
    size_t v8 = a2 + 2;
    int v9 = *((unsigned __int8 *)a2 + 56);
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      long long v10 = *(_OWORD *)(a2 + 5);
      *(_OWORD *)(a1 + 40) = v10;
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 16, (uint64_t)(a2 + 2));
      *(unsigned char *)(a1 + 56) = 1;
    }
    else
    {
      long long v12 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 16) = *v8;
      *(_OWORD *)(a1 + 32) = v12;
      *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)a2 + 41);
    }
    *(unsigned char *)(a1 + 57) = *((unsigned char *)a2 + 57);
    *(_WORD *)(a1 + 58) = *((_WORD *)a2 + 29);
    uint64_t v13 = a2[9];
    *(void *)(a1 + 64) = a2[8];
    *(void *)(a1 + 72) = v13;
    uint64_t v14 = *(int *)(a3 + 44);
    int v15 = (void **)(a1 + v14);
    long long v16 = (void **)((char *)a2 + v14);
    uint64_t v17 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v18 = *(void *)(v17 - 8);
    long long v19 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v18 + 48);
    swift_bridgeObjectRetain();
    if (v19(v16, 1, v17))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64));
      return a1;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v39 = *(_OWORD *)(v16 + 3);
      *(_OWORD *)(v15 + 3) = v39;
      (**(void (***)(void **, void **))(v39 - 8))(v15, v16);
      v15[5] = v16[5];
      void v15[6] = v16[6];
      v15[7] = v16[7];
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      long long v40 = v16[10];
      v15[10] = v40;
      swift_retain();
      swift_bridgeObjectRetain();
      id v41 = v40;
LABEL_54:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      return a1;
    }
    uint64_t v104 = v18;
    int v21 = *v16;
    uint64_t v22 = v16[1];
    void *v15 = *v16;
    v15[1] = v22;
    long long v23 = v16[3];
    v15[2] = v16[2];
    v15[3] = v23;
    *((unsigned char *)v15 + 32) = *((unsigned char *)v16 + 32);
    unint64_t v24 = v16[6];
    v15[5] = v16[5];
    void v15[6] = v24;
    *((unsigned char *)v15 + 56) = *((unsigned char *)v16 + 56);
    unint64_t v25 = v15 + 8;
    long long v26 = v16 + 8;
    unint64_t v27 = (unint64_t)v16[23];
    id v28 = v21;
    id v29 = v22;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v27 >> 1 == 4294967294)
    {
      long long v30 = *((_OWORD *)v16 + 13);
      *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 13) = v30;
      *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
      *(_DWORD *)((char *)v15 + 239) = *(_DWORD *)((char *)v16 + 239);
      long long v31 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v31;
      long long v32 = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 11) = v32;
      long long v33 = *((_OWORD *)v16 + 5);
      *unint64_t v25 = *v26;
      *((_OWORD *)v15 + 5) = v33;
      long long v34 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 7) = v34;
      uint64_t v35 = v16[32];
      if (v35)
      {
LABEL_11:
        v15[31] = v16[31];
        v15[32] = v35;
        long long v36 = v16[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v36 >= 2) {
          id v37 = v36;
        }
        v15[33] = v36;
        *((_DWORD *)v15 + 68) = *((_DWORD *)v16 + 68);
        *((unsigned char *)v15 + 276) = *((unsigned char *)v16 + 276);
        *(_WORD *)((char *)v15 + 277) = *(_WORD *)((char *)v16 + 277);
        long long v38 = v16[36];
        v15[35] = v16[35];
        v15[36] = v38;
        swift_retain();
        swift_retain();
LABEL_23:
        unint64_t v53 = (unint64_t)v16[41];
        if (v53 >> 2 == 0xFFFFFFFF)
        {
          long long v54 = *(_OWORD *)(v16 + 47);
          *(_OWORD *)(v15 + 45) = *(_OWORD *)(v16 + 45);
          *(_OWORD *)(v15 + 47) = v54;
          v15[49] = v16[49];
          long long v55 = *(_OWORD *)(v16 + 39);
          *(_OWORD *)(v15 + 37) = *(_OWORD *)(v16 + 37);
          *(_OWORD *)(v15 + 39) = v55;
          long long v56 = *(_OWORD *)(v16 + 43);
          *(_OWORD *)(v15 + 41) = *(_OWORD *)(v16 + 41);
          *(_OWORD *)(v15 + 43) = v56;
        }
        else
        {
          long long v57 = v16[37];
          uint64_t v58 = (uint64_t)v16[38];
          uint64_t v100 = (uint64_t)v16[40];
          uint64_t v101 = (uint64_t)v16[39];
          uint64_t v59 = (uint64_t)v16[42];
          uint64_t v60 = (uint64_t)v16[43];
          long long v61 = v16[44];
          uint64_t v102 = (uint64_t)v16[45];
          uint64_t v106 = (uint64_t)v16[46];
          uint64_t v108 = (uint64_t)v16[47];
          long long v110 = v16[48];
          uint64_t v112 = (uint64_t)v16[49];
          outlined copy of PlatformItemList.Item.SystemItem(v57, v58, v101, v100, v53, v59, v60, (char)v61, v102, v106, v108, (char)v110, v112);
          v15[37] = v57;
          v15[38] = (void *)v58;
          v15[39] = (void *)v101;
          v15[40] = (void *)v100;
          v15[41] = (void *)v53;
          v15[42] = (void *)v59;
          v15[43] = (void *)v60;
          v15[44] = v61;
          v15[45] = (void *)v102;
          v15[46] = (void *)v106;
          v15[47] = (void *)v108;
          v15[48] = v110;
          v15[49] = (void *)v112;
        }
        long long v62 = v16[51];
        if (v62 == (void *)1)
        {
          long long v63 = *((_OWORD *)v16 + 28);
          *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
          *((_OWORD *)v15 + 28) = v63;
          *((unsigned char *)v15 + 464) = *((unsigned char *)v16 + 464);
          long long v64 = *((_OWORD *)v16 + 26);
          *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
          *((_OWORD *)v15 + 26) = v64;
LABEL_36:
          long long v70 = v16[60];
          v15[59] = v16[59];
          v15[60] = v70;
          v15[61] = v16[61];
          *((unsigned char *)v15 + 496) = *((unsigned char *)v16 + 496);
          long long v71 = v16[63];
          swift_bridgeObjectRetain();
          if (v71)
          {
            long long v72 = v16[64];
            v15[63] = v71;
            v15[64] = v72;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v15 + 63) = *(_OWORD *)(v16 + 63);
          }
          *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
          long long v73 = v16[66];
          if (v73)
          {
            v15[66] = v73;
            v15[67] = v16[67];
            v15[68] = v16[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
            v15[68] = v16[68];
          }
          long long v74 = v16[69];
          uint64_t v105 = v17;
          if (v74 == (void *)1)
          {
            *(_OWORD *)(v15 + 69) = *(_OWORD *)(v16 + 69);
            v15[71] = v16[71];
          }
          else
          {
            v15[69] = v74;
            int v75 = v16[70];
            swift_retain();
            if (v75)
            {
              id v76 = v16[71];
              v15[70] = v75;
              v15[71] = v76;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v15 + 35) = *((_OWORD *)v16 + 35);
            }
          }
          int v77 = v16[72];
          v15[72] = v77;
          v15[73] = v16[73];
          v15[74] = v16[74];
          v15[75] = v16[75];
          v15[76] = v16[76];
          v15[77] = v16[77];
          v15[78] = v16[78];
          *((_WORD *)v15 + 316) = *((_WORD *)v16 + 316);
          *((unsigned char *)v15 + 634) = *((unsigned char *)v16 + 634);
          uint64_t v111 = (int *)type metadata accessor for PlatformItemList.Item();
          uint64_t v78 = v111[28];
          uint64_t v113 = (char *)v15 + v78;
          unint64_t v79 = (char *)v16 + v78;
          uint64_t v80 = type metadata accessor for CommandOperation();
          uint64_t v103 = *(void *)(v80 - 8);
          id v107 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v103 + 48);
          id v81 = v77;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v107(v79, 1, v80))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(v113, v79, *(void *)(*(void *)(v82 - 8) + 64));
            uint64_t v18 = v104;
            uint64_t v17 = v105;
          }
          else
          {
            *uint64_t v113 = *v79;
            uint64_t v83 = *(int *)(v80 + 20);
            long long v84 = v79;
            unint64_t v85 = &v113[v83];
            long long v86 = &v84[v83];
            uint64_t v109 = v80;
            uint64_t v87 = *(void *)&v84[v83];
            uint64_t v88 = *(void *)&v84[v83 + 8];
            char v89 = v84[v83 + 16];
            outlined copy of Text.Storage(v87, v88, v89);
            *(void *)unint64_t v85 = v87;
            *((void *)v85 + 1) = v88;
            v85[16] = v89;
            *((void *)v85 + 3) = *((void *)v86 + 3);
            uint64_t v90 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            unint64_t v91 = &v85[v90];
            id v92 = &v86[v90];
            uint64_t v93 = type metadata accessor for UUID();
            long long v94 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v93 - 8) + 16);
            swift_bridgeObjectRetain();
            v94(v91, v92, v93);
            uint64_t v95 = *(int *)(v109 + 24);
            long long v96 = &v113[v95];
            unint64_t v97 = &v84[v95];
            uint64_t v18 = v104;
            if (*v97)
            {
              uint64_t v98 = v97[1];
              *long long v96 = *v97;
              v96[1] = v98;
              swift_retain();
            }
            else
            {
              *(_OWORD *)long long v96 = *(_OWORD *)v97;
            }
            uint64_t v17 = v105;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v103 + 56))(v113, 0, 1, v109);
          }
          *((unsigned char *)v15 + v111[29]) = *((unsigned char *)v16 + v111[29]);
          *((unsigned char *)v15 + v111[30]) = *((unsigned char *)v16 + v111[30]);
          *((unsigned char *)v15 + v111[31]) = *((unsigned char *)v16 + v111[31]);
          *((unsigned char *)v15 + v111[32]) = *((unsigned char *)v16 + v111[32]);
          *(void **)((char *)v15 + v111[33]) = *(void **)((char *)v16 + v111[33]);
          swift_retain();
          goto LABEL_54;
        }
        *((_DWORD *)v15 + 100) = *((_DWORD *)v16 + 100);
        *((unsigned char *)v15 + 404) = *((unsigned char *)v16 + 404);
        if (v62)
        {
          id v65 = v16[52];
          v15[51] = v62;
          v15[52] = v65;
          swift_retain();
          long long v66 = v16[53];
          if (v66) {
            goto LABEL_30;
          }
        }
        else
        {
          *(_OWORD *)(v15 + 51) = *(_OWORD *)(v16 + 51);
          long long v66 = v16[53];
          if (v66)
          {
LABEL_30:
            long long v67 = v16[54];
            v15[53] = v66;
            v15[54] = v67;
            swift_retain();
            long long v68 = v16[55];
            if (v68)
            {
LABEL_31:
              long long v69 = v16[56];
              v15[55] = v68;
              v15[56] = v69;
              swift_retain();
LABEL_35:
              v15[57] = v16[57];
              *((unsigned char *)v15 + 464) = *((unsigned char *)v16 + 464);
              goto LABEL_36;
            }
LABEL_34:
            *(_OWORD *)(v15 + 55) = *(_OWORD *)(v16 + 55);
            goto LABEL_35;
          }
        }
        *(_OWORD *)(v15 + 53) = *(_OWORD *)(v16 + 53);
        long long v68 = v16[55];
        if (v68) {
          goto LABEL_31;
        }
        goto LABEL_34;
      }
    }
    else
    {
      int v42 = *((unsigned __int8 *)v16 + 72);
      if (v42 == 255)
      {
        *(void *)unint64_t v25 = *(void *)v26;
        *((unsigned char *)v15 + 72) = *((unsigned char *)v16 + 72);
      }
      else
      {
        long long v43 = v16[8];
        outlined copy of GraphicsImage.Contents(v43, *((unsigned char *)v16 + 72));
        v15[8] = v43;
        *((unsigned char *)v15 + 72) = v42;
        unint64_t v27 = (unint64_t)v16[23];
      }
      v15[10] = v16[10];
      *(_OWORD *)(v15 + 11) = *(_OWORD *)(v16 + 11);
      *((unsigned char *)v15 + 104) = *((unsigned char *)v16 + 104);
      *(_OWORD *)((char *)v15 + 108) = *(_OWORD *)((char *)v16 + 108);
      *((unsigned char *)v15 + 124) = *((unsigned char *)v16 + 124);
      long long v44 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v44;
      *((_WORD *)v15 + 80) = *((_WORD *)v16 + 80);
      *((unsigned char *)v15 + 162) = *((unsigned char *)v16 + 162);
      *((unsigned char *)v15 + 163) = *((unsigned char *)v16 + 163);
      if (v27 >> 1 == 0xFFFFFFFF)
      {
        long long v45 = *(_OWORD *)(v16 + 23);
        *(_OWORD *)(v15 + 21) = *(_OWORD *)(v16 + 21);
        *(_OWORD *)(v15 + 23) = v45;
      }
      else
      {
        uint64_t v46 = (uint64_t)v16[21];
        uint64_t v47 = (uint64_t)v16[22];
        id v48 = v16[24];
        outlined copy of AccessibilityImageLabel(v46, v47, v27);
        v15[21] = (void *)v46;
        v15[22] = (void *)v47;
        v15[23] = (void *)v27;
        v15[24] = v48;
      }
      int v49 = v16[26];
      v15[25] = v16[25];
      v15[26] = v49;
      *((_WORD *)v15 + 108) = *((_WORD *)v16 + 108);
      *((_DWORD *)v15 + 55) = *((_DWORD *)v16 + 55);
      *((unsigned char *)v15 + 224) = *((unsigned char *)v16 + 224);
      uint64_t v50 = v16[29];
      v15[29] = v50;
      *((_WORD *)v15 + 120) = *((_WORD *)v16 + 120);
      *((unsigned char *)v15 + 242) = *((unsigned char *)v16 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v51 = v50;
      uint64_t v35 = v16[32];
      if (v35) {
        goto LABEL_11;
      }
    }
    long long v52 = *(_OWORD *)(v16 + 33);
    *(_OWORD *)(v15 + 31) = *(_OWORD *)(v16 + 31);
    *(_OWORD *)(v15 + 33) = v52;
    *(_OWORD *)(v15 + 35) = *(_OWORD *)(v16 + 35);
    goto LABEL_23;
  }
  uint64_t v11 = *a2;
  *(void *)a1 = *a2;
  a1 = v11 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 16);
    if (*(unsigned char *)(a2 + 56) == 1)
    {
      uint64_t v6 = *(void *)(a2 + 40);
      *(void *)(a1 + 40) = v6;
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 16, a2 + 16);
      *(unsigned char *)(a1 + 56) = 1;
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 16);
      long long v8 = *(_OWORD *)(a2 + 32);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      *(_OWORD *)(a1 + 16) = v7;
      *(_OWORD *)(a1 + 32) = v8;
    }
  }
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(unsigned char *)(a1 + 58) = *(unsigned char *)(a2 + 58);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (v15)
  {
    if (!v16)
    {
      if (swift_getEnumCaseMultiPayload() != 1)
      {
        uint64_t v53 = *(void *)(v11 + 24);
        *(void *)(v10 + 24) = v53;
        *(void *)(v10 + 32) = *(void *)(v11 + 32);
        (**(void (***)(uint64_t, uint64_t))(v53 - 8))(v10, v11);
        *(void *)(v10 + 40) = *(void *)(v11 + 40);
        *(_DWORD *)(v10 + 48) = *(_DWORD *)(v11 + 48);
        *(_DWORD *)(v10 + 52) = *(_DWORD *)(v11 + 52);
        *(void *)(v10 + 56) = *(void *)(v11 + 56);
        *(void *)(v10 + 64) = *(void *)(v11 + 64);
        *(void *)(v10 + 72) = *(void *)(v11 + 72);
        long long v54 = *(void **)(v11 + 80);
        *(void *)(v10 + 80) = v54;
        swift_retain();
        swift_bridgeObjectRetain();
        id v55 = v54;
LABEL_64:
        swift_storeEnumTagMultiPayload();
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
        return a1;
      }
      uint64_t v213 = v13;
      uint64_t v17 = *(void **)v11;
      *(void *)uint64_t v10 = *(void *)v11;
      uint64_t v18 = *(void **)(v11 + 8);
      *(void *)(v10 + 8) = v18;
      *(void *)(v10 + 16) = *(void *)(v11 + 16);
      *(void *)(v10 + 24) = *(void *)(v11 + 24);
      *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
      *(void *)(v10 + 40) = *(void *)(v11 + 40);
      *(void *)(v10 + 48) = *(void *)(v11 + 48);
      *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
      long long v19 = (_OWORD *)(v10 + 64);
      uint64_t v20 = (id *)(v11 + 64);
      unint64_t v21 = *(void *)(v11 + 184);
      id v22 = v17;
      id v23 = v18;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v21 >> 1 == 4294967294)
      {
        long long v24 = *(_OWORD *)v20;
        long long v25 = *(_OWORD *)(v11 + 80);
        long long v26 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v10 + 112) = v26;
        _OWORD *v19 = v24;
        *(_OWORD *)(v10 + 80) = v25;
        long long v27 = *(_OWORD *)(v11 + 128);
        long long v28 = *(_OWORD *)(v11 + 144);
        long long v29 = *(_OWORD *)(v11 + 176);
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v10 + 176) = v29;
        *(_OWORD *)(v10 + 128) = v27;
        *(_OWORD *)(v10 + 144) = v28;
        long long v30 = *(_OWORD *)(v11 + 192);
        long long v31 = *(_OWORD *)(v11 + 208);
        long long v32 = *(_OWORD *)(v11 + 224);
        *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
        *(_OWORD *)(v10 + 208) = v31;
        *(_OWORD *)(v10 + 224) = v32;
        *(_OWORD *)(v10 + 192) = v30;
        if (*(void *)(v11 + 256))
        {
LABEL_10:
          *(void *)(v10 + 248) = *(void *)(v11 + 248);
          *(void *)(v10 + 256) = *(void *)(v11 + 256);
          long long v33 = *(void **)(v11 + 264);
          swift_bridgeObjectRetain();
          if ((unint64_t)v33 >= 2) {
            id v34 = v33;
          }
          *(void *)(v10 + 264) = v33;
          int v35 = *(_DWORD *)(v11 + 272);
          *(unsigned char *)(v10 + 276) = *(unsigned char *)(v11 + 276);
          *(_DWORD *)(v10 + 272) = v35;
          *(unsigned char *)(v10 + 277) = *(unsigned char *)(v11 + 277);
          *(unsigned char *)(v10 + 278) = *(unsigned char *)(v11 + 278);
          *(void *)(v10 + 280) = *(void *)(v11 + 280);
          *(void *)(v10 + 288) = *(void *)(v11 + 288);
          swift_retain();
          swift_retain();
LABEL_32:
          unint64_t v77 = *(void *)(v11 + 328);
          if (v77 >> 2 == 0xFFFFFFFF)
          {
            long long v78 = *(_OWORD *)(v11 + 296);
            long long v79 = *(_OWORD *)(v11 + 328);
            *(_OWORD *)(v10 + 312) = *(_OWORD *)(v11 + 312);
            *(_OWORD *)(v10 + 328) = v79;
            *(_OWORD *)(v10 + 296) = v78;
            long long v80 = *(_OWORD *)(v11 + 344);
            long long v81 = *(_OWORD *)(v11 + 360);
            long long v82 = *(_OWORD *)(v11 + 376);
            *(void *)(v10 + 392) = *(void *)(v11 + 392);
            *(_OWORD *)(v10 + 360) = v81;
            *(_OWORD *)(v10 + 376) = v82;
            *(_OWORD *)(v10 + 344) = v80;
          }
          else
          {
            uint64_t v83 = *(void **)(v11 + 296);
            uint64_t v84 = *(void *)(v11 + 304);
            uint64_t v199 = *(void *)(v11 + 320);
            uint64_t v200 = *(void *)(v11 + 312);
            uint64_t v85 = *(void *)(v11 + 336);
            uint64_t v86 = *(void *)(v11 + 344);
            uint64_t v87 = *(void *)(v11 + 352);
            uint64_t v201 = *(void *)(v11 + 360);
            __dstb = *(void **)(v11 + 368);
            uint64_t v209 = *(void *)(v11 + 376);
            uint64_t v216 = *(void *)(v11 + 384);
            v221 = *(void **)(v11 + 392);
            outlined copy of PlatformItemList.Item.SystemItem(v83, v84, v200, v199, v77, v85, v86, v87, v201, (uint64_t)__dstb, v209, v216, (uint64_t)v221);
            *(void *)(v10 + 296) = v83;
            *(void *)(v10 + 304) = v84;
            *(void *)(v10 + 312) = v200;
            *(void *)(v10 + 320) = v199;
            *(void *)(v10 + 328) = v77;
            *(void *)(v10 + 336) = v85;
            *(void *)(v10 + 344) = v86;
            *(void *)(v10 + 352) = v87;
            *(void *)(v10 + 360) = v201;
            *(void *)(v10 + 368) = __dstb;
            *(void *)(v10 + 376) = v209;
            *(void *)(v10 + 384) = v216;
            *(void *)(v10 + 392) = v221;
          }
          if (*(void *)(v11 + 408) == 1)
          {
            *(_OWORD *)(v10 + 400) = *(_OWORD *)(v11 + 400);
            long long v88 = *(_OWORD *)(v11 + 416);
            long long v89 = *(_OWORD *)(v11 + 432);
            long long v90 = *(_OWORD *)(v11 + 448);
            *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
            *(_OWORD *)(v10 + 432) = v89;
            *(_OWORD *)(v10 + 448) = v90;
            *(_OWORD *)(v10 + 416) = v88;
            goto LABEL_45;
          }
          *(unsigned char *)(v10 + 400) = *(unsigned char *)(v11 + 400);
          *(unsigned char *)(v10 + 401) = *(unsigned char *)(v11 + 401);
          *(unsigned char *)(v10 + 402) = *(unsigned char *)(v11 + 402);
          *(unsigned char *)(v10 + 403) = *(unsigned char *)(v11 + 403);
          *(unsigned char *)(v10 + 404) = *(unsigned char *)(v11 + 404);
          uint64_t v91 = *(void *)(v11 + 408);
          if (v91)
          {
            uint64_t v92 = *(void *)(v11 + 416);
            *(void *)(v10 + 408) = v91;
            *(void *)(v10 + 416) = v92;
            swift_retain();
            uint64_t v93 = *(void *)(v11 + 424);
            if (v93) {
              goto LABEL_39;
            }
          }
          else
          {
            *(_OWORD *)(v10 + 408) = *(_OWORD *)(v11 + 408);
            uint64_t v93 = *(void *)(v11 + 424);
            if (v93)
            {
LABEL_39:
              uint64_t v94 = *(void *)(v11 + 432);
              *(void *)(v10 + 424) = v93;
              *(void *)(v10 + 432) = v94;
              swift_retain();
              uint64_t v95 = *(void *)(v11 + 440);
              if (v95)
              {
LABEL_40:
                uint64_t v96 = *(void *)(v11 + 448);
                *(void *)(v10 + 440) = v95;
                *(void *)(v10 + 448) = v96;
                swift_retain();
LABEL_44:
                *(void *)(v10 + 456) = *(void *)(v11 + 456);
                *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
LABEL_45:
                *(void *)(v10 + 472) = *(void *)(v11 + 472);
                *(void *)(v10 + 480) = *(void *)(v11 + 480);
                *(void *)(v10 + 488) = *(void *)(v11 + 488);
                *(unsigned char *)(v10 + 496) = *(unsigned char *)(v11 + 496);
                uint64_t v97 = *(void *)(v11 + 504);
                swift_bridgeObjectRetain();
                if (v97)
                {
                  uint64_t v98 = *(void *)(v11 + 512);
                  *(void *)(v10 + 504) = v97;
                  *(void *)(v10 + 512) = v98;
                  swift_retain();
                }
                else
                {
                  *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
                }
                *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
                uint64_t v99 = *(void *)(v11 + 528);
                if (v99)
                {
                  *(void *)(v10 + 528) = v99;
                  *(void *)(v10 + 536) = *(void *)(v11 + 536);
                  *(void *)(v10 + 544) = *(void *)(v11 + 544);
                  swift_bridgeObjectRetain();
                  swift_retain();
                  swift_retain();
                }
                else
                {
                  long long v100 = *(_OWORD *)(v11 + 528);
                  *(void *)(v10 + 544) = *(void *)(v11 + 544);
                  *(_OWORD *)(v10 + 528) = v100;
                }
                uint64_t v101 = *(void *)(v11 + 552);
                uint64_t v225 = v12;
                if (v101 == 1)
                {
                  uint64_t v102 = (_OWORD *)(v10 + 552);
                  long long v103 = *(_OWORD *)(v11 + 552);
                  *(void *)(v10 + 568) = *(void *)(v11 + 568);
                }
                else
                {
                  *(void *)(v10 + 552) = v101;
                  uint64_t v104 = *(void *)(v11 + 560);
                  swift_retain();
                  if (v104)
                  {
                    uint64_t v105 = *(void *)(v11 + 568);
                    *(void *)(v10 + 560) = v104;
                    *(void *)(v10 + 568) = v105;
                    swift_retain();
LABEL_57:
                    uint64_t v106 = *(void **)(v11 + 576);
                    *(void *)(v10 + 576) = v106;
                    *(void *)(v10 + 584) = *(void *)(v11 + 584);
                    *(void *)(v10 + 592) = *(void *)(v11 + 592);
                    *(void *)(v10 + 600) = *(void *)(v11 + 600);
                    *(void *)(v10 + 608) = *(void *)(v11 + 608);
                    *(void *)(v10 + 616) = *(void *)(v11 + 616);
                    *(void *)(v10 + 624) = *(void *)(v11 + 624);
                    *(unsigned char *)(v10 + 632) = *(unsigned char *)(v11 + 632);
                    *(unsigned char *)(v10 + 633) = *(unsigned char *)(v11 + 633);
                    *(unsigned char *)(v10 + 634) = *(unsigned char *)(v11 + 634);
                    uint64_t v107 = type metadata accessor for PlatformItemList.Item();
                    uint64_t v108 = *(int *)(v107 + 112);
                    __dst = (unsigned char *)(v10 + v108);
                    v210 = (int *)v107;
                    uint64_t v109 = (unsigned char *)(v11 + v108);
                    uint64_t v110 = type metadata accessor for CommandOperation();
                    uint64_t v202 = *(void *)(v110 - 8);
                    v217 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v202 + 48);
                    id v111 = v106;
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    swift_bridgeObjectRetain();
                    if (v217(v109, 1, v110))
                    {
                      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                      memcpy(__dst, v109, *(void *)(*(void *)(v112 - 8) + 64));
                      uint64_t v12 = v225;
                      uint64_t v13 = v213;
                    }
                    else
                    {
                      unsigned char *__dst = *v109;
                      uint64_t v113 = *(int *)(v110 + 20);
                      v218 = v109;
                      v222 = (int *)v110;
                      unint64_t v114 = &__dst[v113];
                      long long v115 = &v109[v113];
                      uint64_t v116 = *(void *)&v109[v113];
                      uint64_t v117 = *((void *)v115 + 1);
                      char v118 = v115[16];
                      outlined copy of Text.Storage(v116, v117, v118);
                      *(void *)unint64_t v114 = v116;
                      *((void *)v114 + 1) = v117;
                      v114[16] = v118;
                      *((void *)v114 + 3) = *((void *)v115 + 3);
                      uint64_t v119 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                      uint64_t v120 = &v114[v119];
                      uint64_t v121 = &v115[v119];
                      uint64_t v122 = type metadata accessor for UUID();
                      uint64_t v123 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v122 - 8) + 16);
                      swift_bridgeObjectRetain();
                      v123(v120, v121, v122);
                      uint64_t v124 = v222[6];
                      uint64_t v125 = &__dst[v124];
                      int v126 = &v218[v124];
                      if (*v126)
                      {
                        uint64_t v127 = v126[1];
                        *uint64_t v125 = *v126;
                        v125[1] = v127;
                        swift_retain();
                      }
                      else
                      {
                        *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
                      }
                      uint64_t v12 = v225;
                      uint64_t v13 = v213;
                      (*(void (**)(unsigned char *, void, uint64_t, int *))(v202 + 56))(__dst, 0, 1, v222);
                    }
                    *(unsigned char *)(v10 + v210[29]) = *(unsigned char *)(v11 + v210[29]);
                    *(unsigned char *)(v10 + v210[30]) = *(unsigned char *)(v11 + v210[30]);
                    *(unsigned char *)(v10 + v210[31]) = *(unsigned char *)(v11 + v210[31]);
                    *(unsigned char *)(v10 + v210[32]) = *(unsigned char *)(v11 + v210[32]);
                    *(void *)(v10 + v210[33]) = *(void *)(v11 + v210[33]);
                    swift_retain();
                    goto LABEL_64;
                  }
                  uint64_t v102 = (_OWORD *)(v10 + 560);
                  long long v103 = *(_OWORD *)(v11 + 560);
                }
                *uint64_t v102 = v103;
                goto LABEL_57;
              }
LABEL_43:
              *(_OWORD *)(v10 + 440) = *(_OWORD *)(v11 + 440);
              goto LABEL_44;
            }
          }
          *(_OWORD *)(v10 + 424) = *(_OWORD *)(v11 + 424);
          uint64_t v95 = *(void *)(v11 + 440);
          if (v95) {
            goto LABEL_40;
          }
          goto LABEL_43;
        }
      }
      else
      {
        int v56 = *(unsigned __int8 *)(v11 + 72);
        if (v56 == 255)
        {
          id v63 = *v20;
          *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
          *(void *)long long v19 = v63;
        }
        else
        {
          id v57 = *v20;
          outlined copy of GraphicsImage.Contents(*v20, *(unsigned char *)(v11 + 72));
          *(void *)(v10 + 64) = v57;
          *(unsigned char *)(v10 + 72) = v56;
        }
        *(void *)(v10 + 80) = *(void *)(v11 + 80);
        *(_OWORD *)(v10 + 88) = *(_OWORD *)(v11 + 88);
        *(unsigned char *)(v10 + 104) = *(unsigned char *)(v11 + 104);
        long long v64 = *(_OWORD *)(v11 + 108);
        *(unsigned char *)(v10 + 124) = *(unsigned char *)(v11 + 124);
        *(_OWORD *)(v10 + 108) = v64;
        long long v65 = *(_OWORD *)(v11 + 128);
        long long v66 = *(_OWORD *)(v11 + 144);
        *(unsigned char *)(v10 + 160) = *(unsigned char *)(v11 + 160);
        *(_OWORD *)(v10 + 128) = v65;
        *(_OWORD *)(v10 + 144) = v66;
        *(unsigned char *)(v10 + 161) = *(unsigned char *)(v11 + 161);
        *(unsigned char *)(v10 + 162) = *(unsigned char *)(v11 + 162);
        *(unsigned char *)(v10 + 163) = *(unsigned char *)(v11 + 163);
        unint64_t v67 = *(void *)(v11 + 184);
        if (v67 >> 1 == 0xFFFFFFFF)
        {
          long long v68 = *(_OWORD *)(v11 + 184);
          *(_OWORD *)(v10 + 168) = *(_OWORD *)(v11 + 168);
          *(_OWORD *)(v10 + 184) = v68;
        }
        else
        {
          uint64_t v70 = *(void *)(v11 + 168);
          uint64_t v69 = *(void *)(v11 + 176);
          uint64_t v71 = *(void *)(v11 + 192);
          outlined copy of AccessibilityImageLabel(v70, v69, *(void *)(v11 + 184));
          *(void *)(v10 + 168) = v70;
          *(void *)(v10 + 176) = v69;
          *(void *)(v10 + 184) = v67;
          *(void *)(v10 + 192) = v71;
        }
        *(void *)(v10 + 200) = *(void *)(v11 + 200);
        *(void *)(v10 + 208) = *(void *)(v11 + 208);
        *(unsigned char *)(v10 + 216) = *(unsigned char *)(v11 + 216);
        *(unsigned char *)(v10 + 217) = *(unsigned char *)(v11 + 217);
        int v72 = *(_DWORD *)(v11 + 220);
        *(unsigned char *)(v10 + 224) = *(unsigned char *)(v11 + 224);
        *(_DWORD *)(v10 + 220) = v72;
        long long v73 = *(void **)(v11 + 232);
        *(void *)(v10 + 232) = v73;
        *(_WORD *)(v10 + 240) = *(_WORD *)(v11 + 240);
        *(unsigned char *)(v10 + 242) = *(unsigned char *)(v11 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        id v74 = v73;
        if (*(void *)(v11 + 256)) {
          goto LABEL_10;
        }
      }
      long long v75 = *(_OWORD *)(v11 + 248);
      long long v76 = *(_OWORD *)(v11 + 280);
      *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
      *(_OWORD *)(v10 + 280) = v76;
      *(_OWORD *)(v10 + 248) = v75;
      goto LABEL_32;
    }
    goto LABEL_15;
  }
  if (v16)
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
LABEL_15:
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v36 - 8) + 64));
    return a1;
  }
  if (a1 == a2) {
    return a1;
  }
  outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v58 = *(void *)(v11 + 24);
    *(void *)(v10 + 24) = v58;
    *(void *)(v10 + 32) = *(void *)(v11 + 32);
    (**(void (***)(uint64_t, uint64_t))(v58 - 8))(v10, v11);
    *(void *)(v10 + 40) = *(void *)(v11 + 40);
    *(_DWORD *)(v10 + 48) = *(_DWORD *)(v11 + 48);
    *(_DWORD *)(v10 + 52) = *(_DWORD *)(v11 + 52);
    *(void *)(v10 + 56) = *(void *)(v11 + 56);
    *(void *)(v10 + 64) = *(void *)(v11 + 64);
    *(void *)(v10 + 72) = *(void *)(v11 + 72);
    uint64_t v59 = *(void **)(v11 + 80);
    *(void *)(v10 + 80) = v59;
    swift_retain();
    swift_bridgeObjectRetain();
    id v60 = v59;
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  id v37 = *(void **)v11;
  *(void *)uint64_t v10 = *(void *)v11;
  long long v38 = *(void **)(v11 + 8);
  *(void *)(v10 + 8) = v38;
  *(void *)(v10 + 16) = *(void *)(v11 + 16);
  *(void *)(v10 + 24) = *(void *)(v11 + 24);
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  *(void *)(v10 + 48) = *(void *)(v11 + 48);
  *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
  long long v39 = (_OWORD *)(v10 + 64);
  long long v40 = (id *)(v11 + 64);
  unint64_t v41 = *(void *)(v11 + 184);
  id v42 = v37;
  id v43 = v38;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v41 >> 1 == 4294967294)
  {
    long long v44 = *(_OWORD *)v40;
    long long v45 = *(_OWORD *)(v11 + 80);
    long long v46 = *(_OWORD *)(v11 + 112);
    *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
    *(_OWORD *)(v10 + 112) = v46;
    *long long v39 = v44;
    *(_OWORD *)(v10 + 80) = v45;
    long long v47 = *(_OWORD *)(v11 + 128);
    long long v48 = *(_OWORD *)(v11 + 144);
    long long v49 = *(_OWORD *)(v11 + 176);
    *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
    *(_OWORD *)(v10 + 176) = v49;
    *(_OWORD *)(v10 + 128) = v47;
    *(_OWORD *)(v10 + 144) = v48;
    long long v50 = *(_OWORD *)(v11 + 192);
    long long v51 = *(_OWORD *)(v11 + 208);
    long long v52 = *(_OWORD *)(v11 + 224);
    *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
    *(_OWORD *)(v10 + 208) = v51;
    *(_OWORD *)(v10 + 224) = v52;
    *(_OWORD *)(v10 + 192) = v50;
  }
  else
  {
    int v61 = *(unsigned __int8 *)(v11 + 72);
    if (v61 == 255)
    {
      id v129 = *v40;
      *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
      *(void *)long long v39 = v129;
    }
    else
    {
      id v62 = *v40;
      outlined copy of GraphicsImage.Contents(*v40, *(unsigned char *)(v11 + 72));
      *(void *)(v10 + 64) = v62;
      *(unsigned char *)(v10 + 72) = v61;
    }
    *(void *)(v10 + 80) = *(void *)(v11 + 80);
    *(_OWORD *)(v10 + 88) = *(_OWORD *)(v11 + 88);
    *(unsigned char *)(v10 + 104) = *(unsigned char *)(v11 + 104);
    long long v130 = *(_OWORD *)(v11 + 108);
    *(unsigned char *)(v10 + 124) = *(unsigned char *)(v11 + 124);
    *(_OWORD *)(v10 + 108) = v130;
    long long v131 = *(_OWORD *)(v11 + 128);
    long long v132 = *(_OWORD *)(v11 + 144);
    *(unsigned char *)(v10 + 160) = *(unsigned char *)(v11 + 160);
    *(_OWORD *)(v10 + 128) = v131;
    *(_OWORD *)(v10 + 144) = v132;
    *(unsigned char *)(v10 + 161) = *(unsigned char *)(v11 + 161);
    *(unsigned char *)(v10 + 162) = *(unsigned char *)(v11 + 162);
    *(unsigned char *)(v10 + 163) = *(unsigned char *)(v11 + 163);
    unint64_t v133 = *(void *)(v11 + 184);
    if (v133 >> 1 == 0xFFFFFFFF)
    {
      long long v134 = *(_OWORD *)(v11 + 184);
      *(_OWORD *)(v10 + 168) = *(_OWORD *)(v11 + 168);
      *(_OWORD *)(v10 + 184) = v134;
    }
    else
    {
      uint64_t v135 = *(void *)(v11 + 168);
      uint64_t v136 = *(void *)(v11 + 176);
      uint64_t v137 = *(void *)(v11 + 192);
      outlined copy of AccessibilityImageLabel(v135, v136, *(void *)(v11 + 184));
      *(void *)(v10 + 168) = v135;
      *(void *)(v10 + 176) = v136;
      *(void *)(v10 + 184) = v133;
      *(void *)(v10 + 192) = v137;
    }
    *(void *)(v10 + 200) = *(void *)(v11 + 200);
    *(void *)(v10 + 208) = *(void *)(v11 + 208);
    *(unsigned char *)(v10 + 216) = *(unsigned char *)(v11 + 216);
    *(unsigned char *)(v10 + 217) = *(unsigned char *)(v11 + 217);
    int v138 = *(_DWORD *)(v11 + 220);
    *(unsigned char *)(v10 + 224) = *(unsigned char *)(v11 + 224);
    *(_DWORD *)(v10 + 220) = v138;
    long long v139 = *(void **)(v11 + 232);
    *(void *)(v10 + 232) = v139;
    *(_WORD *)(v10 + 240) = *(_WORD *)(v11 + 240);
    *(unsigned char *)(v10 + 242) = *(unsigned char *)(v11 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v140 = v139;
  }
  if (*(void *)(v11 + 256))
  {
    *(void *)(v10 + 248) = *(void *)(v11 + 248);
    *(void *)(v10 + 256) = *(void *)(v11 + 256);
    v141 = *(void **)(v11 + 264);
    swift_bridgeObjectRetain();
    if ((unint64_t)v141 >= 2) {
      id v142 = v141;
    }
    *(void *)(v10 + 264) = v141;
    int v143 = *(_DWORD *)(v11 + 272);
    *(unsigned char *)(v10 + 276) = *(unsigned char *)(v11 + 276);
    *(_DWORD *)(v10 + 272) = v143;
    *(unsigned char *)(v10 + 277) = *(unsigned char *)(v11 + 277);
    *(unsigned char *)(v10 + 278) = *(unsigned char *)(v11 + 278);
    *(void *)(v10 + 280) = *(void *)(v11 + 280);
    *(void *)(v10 + 288) = *(void *)(v11 + 288);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v144 = *(_OWORD *)(v11 + 248);
    long long v145 = *(_OWORD *)(v11 + 280);
    *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
    *(_OWORD *)(v10 + 280) = v145;
    *(_OWORD *)(v10 + 248) = v144;
  }
  unint64_t v146 = *(void *)(v11 + 328);
  if (v146 >> 2 == 0xFFFFFFFF)
  {
    long long v147 = *(_OWORD *)(v11 + 296);
    long long v148 = *(_OWORD *)(v11 + 328);
    *(_OWORD *)(v10 + 312) = *(_OWORD *)(v11 + 312);
    *(_OWORD *)(v10 + 328) = v148;
    *(_OWORD *)(v10 + 296) = v147;
    long long v149 = *(_OWORD *)(v11 + 344);
    long long v150 = *(_OWORD *)(v11 + 360);
    long long v151 = *(_OWORD *)(v11 + 376);
    *(void *)(v10 + 392) = *(void *)(v11 + 392);
    *(_OWORD *)(v10 + 360) = v150;
    *(_OWORD *)(v10 + 376) = v151;
    *(_OWORD *)(v10 + 344) = v149;
  }
  else
  {
    v152 = *(void **)(v11 + 296);
    uint64_t v153 = *(void *)(v11 + 304);
    uint64_t v154 = *(void *)(v11 + 312);
    uint64_t v156 = *(void *)(v11 + 336);
    uint64_t v155 = *(void *)(v11 + 344);
    uint64_t v157 = *(void *)(v11 + 352);
    uint64_t v203 = *(void *)(v11 + 320);
    __dstc = *(void **)(v11 + 360);
    uint64_t v211 = *(void *)(v11 + 368);
    uint64_t v214 = *(void *)(v11 + 376);
    uint64_t v219 = *(void *)(v11 + 384);
    v223 = *(void **)(v11 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v152, v153, v154, v203, v146, v156, v155, v157, (uint64_t)__dstc, v211, v214, v219, (uint64_t)v223);
    *(void *)(v10 + 296) = v152;
    *(void *)(v10 + 304) = v153;
    *(void *)(v10 + 312) = v154;
    *(void *)(v10 + 320) = v203;
    *(void *)(v10 + 328) = v146;
    *(void *)(v10 + 336) = v156;
    *(void *)(v10 + 344) = v155;
    *(void *)(v10 + 352) = v157;
    *(void *)(v10 + 360) = __dstc;
    *(void *)(v10 + 368) = v211;
    *(void *)(v10 + 376) = v214;
    *(void *)(v10 + 384) = v219;
    *(void *)(v10 + 392) = v223;
  }
  if (*(void *)(v11 + 408) == 1)
  {
    *(_OWORD *)(v10 + 400) = *(_OWORD *)(v11 + 400);
    long long v158 = *(_OWORD *)(v11 + 416);
    long long v159 = *(_OWORD *)(v11 + 432);
    long long v160 = *(_OWORD *)(v11 + 448);
    *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
    *(_OWORD *)(v10 + 432) = v159;
    *(_OWORD *)(v10 + 448) = v160;
    *(_OWORD *)(v10 + 416) = v158;
  }
  else
  {
    *(unsigned char *)(v10 + 400) = *(unsigned char *)(v11 + 400);
    *(unsigned char *)(v10 + 401) = *(unsigned char *)(v11 + 401);
    *(unsigned char *)(v10 + 402) = *(unsigned char *)(v11 + 402);
    *(unsigned char *)(v10 + 403) = *(unsigned char *)(v11 + 403);
    *(unsigned char *)(v10 + 404) = *(unsigned char *)(v11 + 404);
    uint64_t v161 = *(void *)(v11 + 408);
    if (v161)
    {
      uint64_t v162 = *(void *)(v11 + 416);
      *(void *)(v10 + 408) = v161;
      *(void *)(v10 + 416) = v162;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 408) = *(_OWORD *)(v11 + 408);
    }
    uint64_t v163 = *(void *)(v11 + 424);
    if (v163)
    {
      uint64_t v164 = *(void *)(v11 + 432);
      *(void *)(v10 + 424) = v163;
      *(void *)(v10 + 432) = v164;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 424) = *(_OWORD *)(v11 + 424);
    }
    uint64_t v165 = *(void *)(v11 + 440);
    if (v165)
    {
      uint64_t v166 = *(void *)(v11 + 448);
      *(void *)(v10 + 440) = v165;
      *(void *)(v10 + 448) = v166;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v10 + 440) = *(_OWORD *)(v11 + 440);
    }
    *(void *)(v10 + 456) = *(void *)(v11 + 456);
    *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
  }
  *(void *)(v10 + 472) = *(void *)(v11 + 472);
  *(void *)(v10 + 480) = *(void *)(v11 + 480);
  *(void *)(v10 + 488) = *(void *)(v11 + 488);
  *(unsigned char *)(v10 + 496) = *(unsigned char *)(v11 + 496);
  uint64_t v167 = *(void *)(v11 + 504);
  swift_bridgeObjectRetain();
  if (v167)
  {
    uint64_t v168 = *(void *)(v11 + 512);
    *(void *)(v10 + 504) = v167;
    *(void *)(v10 + 512) = v168;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
  }
  *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
  uint64_t v169 = *(void *)(v11 + 528);
  if (v169)
  {
    *(void *)(v10 + 528) = v169;
    *(void *)(v10 + 536) = *(void *)(v11 + 536);
    *(void *)(v10 + 544) = *(void *)(v11 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v170 = *(_OWORD *)(v11 + 528);
    *(void *)(v10 + 544) = *(void *)(v11 + 544);
    *(_OWORD *)(v10 + 528) = v170;
  }
  uint64_t v171 = *(void *)(v11 + 552);
  if (v171 == 1)
  {
    v172 = (_OWORD *)(v10 + 552);
    long long v173 = *(_OWORD *)(v11 + 552);
    *(void *)(v10 + 568) = *(void *)(v11 + 568);
LABEL_102:
    _OWORD *v172 = v173;
    goto LABEL_103;
  }
  *(void *)(v10 + 552) = v171;
  uint64_t v174 = *(void *)(v11 + 560);
  swift_retain();
  if (!v174)
  {
    v172 = (_OWORD *)(v10 + 560);
    long long v173 = *(_OWORD *)(v11 + 560);
    goto LABEL_102;
  }
  uint64_t v175 = *(void *)(v11 + 568);
  *(void *)(v10 + 560) = v174;
  *(void *)(v10 + 568) = v175;
  swift_retain();
LABEL_103:
  v176 = *(void **)(v11 + 576);
  *(void *)(v10 + 576) = v176;
  *(void *)(v10 + 584) = *(void *)(v11 + 584);
  *(void *)(v10 + 592) = *(void *)(v11 + 592);
  *(void *)(v10 + 600) = *(void *)(v11 + 600);
  *(void *)(v10 + 608) = *(void *)(v11 + 608);
  *(void *)(v10 + 616) = *(void *)(v11 + 616);
  *(void *)(v10 + 624) = *(void *)(v11 + 624);
  *(unsigned char *)(v10 + 632) = *(unsigned char *)(v11 + 632);
  *(unsigned char *)(v10 + 633) = *(unsigned char *)(v11 + 633);
  *(unsigned char *)(v10 + 634) = *(unsigned char *)(v11 + 634);
  uint64_t v212 = type metadata accessor for PlatformItemList.Item();
  uint64_t v177 = *(int *)(v212 + 112);
  v224 = (unsigned char *)(v10 + v177);
  v178 = (unsigned char *)(v11 + v177);
  uint64_t v179 = type metadata accessor for CommandOperation();
  __dsta = *(void **)(v179 - 8);
  v215 = (unsigned int (*)(unsigned char *, uint64_t, uint64_t))__dsta[6];
  id v180 = v176;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v215(v178, 1, v179))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v224, v178, *(void *)(*(void *)(v181 - 8) + 64));
    v182 = (int *)v212;
  }
  else
  {
    unsigned char *v224 = *v178;
    uint64_t v183 = *(int *)(v179 + 20);
    v184 = v178;
    v204 = v178;
    v185 = &v224[v183];
    v186 = &v184[v183];
    uint64_t v220 = v179;
    uint64_t v187 = *(void *)&v184[v183];
    uint64_t v188 = *(void *)&v184[v183 + 8];
    char v189 = v184[v183 + 16];
    outlined copy of Text.Storage(v187, v188, v189);
    *(void *)v185 = v187;
    *((void *)v185 + 1) = v188;
    v185[16] = v189;
    *((void *)v185 + 3) = *((void *)v186 + 3);
    uint64_t v190 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v191 = &v185[v190];
    v192 = &v186[v190];
    uint64_t v193 = type metadata accessor for UUID();
    v194 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v193 - 8) + 16);
    swift_bridgeObjectRetain();
    v194(v191, v192, v193);
    uint64_t v195 = *(int *)(v220 + 24);
    v196 = &v224[v195];
    v197 = &v204[v195];
    if (*v197)
    {
      uint64_t v198 = v197[1];
      void *v196 = *v197;
      v196[1] = v198;
      swift_retain();
    }
    else
    {
      *(_OWORD *)v196 = *(_OWORD *)v197;
    }
    v182 = (int *)v212;
    ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7])(v224, 0, 1, v220);
  }
  *(unsigned char *)(v10 + v182[29]) = *(unsigned char *)(v11 + v182[29]);
  *(unsigned char *)(v10 + v182[30]) = *(unsigned char *)(v11 + v182[30]);
  *(unsigned char *)(v10 + v182[31]) = *(unsigned char *)(v11 + v182[31]);
  *(unsigned char *)(v10 + v182[32]) = *(unsigned char *)(v11 + v182[32]);
  *(void *)(v10 + v182[33]) = *(void *)(v11 + v182[33]);
  swift_retain();
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t initializeWithTake for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  *(unsigned char *)(a1 + 57) = *(unsigned char *)(a2 + 57);
  *(_WORD *)(a1 + 58) = *(_WORD *)(a2 + 58);
  uint64_t v5 = *(int *)(a3 + 44);
  uint64_t v6 = (_OWORD *)(a1 + v5);
  long long v7 = (_OWORD *)(a2 + v5);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  uint64_t v8 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v9 = *(void *)(v8 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v11 = v7[1];
      *uint64_t v6 = *v7;
      v6[1] = v11;
      *((unsigned char *)v6 + 32) = *((unsigned char *)v7 + 32);
      uint64_t v12 = *((void *)v7 + 6);
      *((void *)v6 + 5) = *((void *)v7 + 5);
      *((void *)v6 + 6) = v12;
      *((unsigned char *)v6 + 56) = *((unsigned char *)v7 + 56);
      long long v13 = v7[13];
      v6[12] = v7[12];
      v6[13] = v13;
      v6[14] = v7[14];
      *(_DWORD *)((char *)v6 + 239) = *(_DWORD *)((char *)v7 + 239);
      long long v14 = v7[9];
      unsigned char v6[8] = v7[8];
      v6[9] = v14;
      long long v15 = v7[11];
      v6[10] = v7[10];
      v6[11] = v15;
      long long v16 = v7[5];
      v6[4] = v7[4];
      v6[5] = v16;
      long long v17 = v7[7];
      _OWORD v6[6] = v7[6];
      v6[7] = v17;
      *(_OWORD *)((char *)v6 + 248) = *(_OWORD *)((char *)v7 + 248);
      long long v18 = *(_OWORD *)((char *)v7 + 280);
      *(_OWORD *)((char *)v6 + 264) = *(_OWORD *)((char *)v7 + 264);
      *(_OWORD *)((char *)v6 + 280) = v18;
      long long v19 = *(_OWORD *)((char *)v7 + 376);
      *(_OWORD *)((char *)v6 + 360) = *(_OWORD *)((char *)v7 + 360);
      *(_OWORD *)((char *)v6 + 376) = v19;
      *((void *)v6 + 49) = *((void *)v7 + 49);
      long long v20 = *(_OWORD *)((char *)v7 + 312);
      *(_OWORD *)((char *)v6 + 296) = *(_OWORD *)((char *)v7 + 296);
      *(_OWORD *)((char *)v6 + 312) = v20;
      long long v21 = *(_OWORD *)((char *)v7 + 344);
      *(_OWORD *)((char *)v6 + 328) = *(_OWORD *)((char *)v7 + 328);
      *(_OWORD *)((char *)v6 + 344) = v21;
      long long v22 = v7[28];
      v6[27] = v7[27];
      v6[28] = v22;
      *((unsigned char *)v6 + 464) = *((unsigned char *)v7 + 464);
      long long v23 = v7[26];
      v6[25] = v7[25];
      v6[26] = v23;
      *(_OWORD *)((char *)v6 + 472) = *(_OWORD *)((char *)v7 + 472);
      *(_OWORD *)((char *)v6 + 481) = *(_OWORD *)((char *)v7 + 481);
      uint64_t v24 = *((void *)v7 + 63);
      if (v24)
      {
        uint64_t v25 = *((void *)v7 + 64);
        *((void *)v6 + 63) = v24;
        *((void *)v6 + 64) = v25;
      }
      else
      {
        *(_OWORD *)((char *)v6 + 504) = *(_OWORD *)((char *)v7 + 504);
      }
      *((_WORD *)v6 + 260) = *((_WORD *)v7 + 260);
      v6[33] = v7[33];
      *((void *)v6 + 68) = *((void *)v7 + 68);
      *((void *)v6 + 71) = *((void *)v7 + 71);
      *(_OWORD *)((char *)v6 + 552) = *(_OWORD *)((char *)v7 + 552);
      *((void *)v6 + 72) = *((void *)v7 + 72);
      *(_OWORD *)((char *)v6 + 584) = *(_OWORD *)((char *)v7 + 584);
      *(_OWORD *)((char *)v6 + 600) = *(_OWORD *)((char *)v7 + 600);
      *((void *)v6 + 77) = *((void *)v7 + 77);
      *((void *)v6 + 78) = *((void *)v7 + 78);
      *((unsigned char *)v6 + 632) = *((unsigned char *)v7 + 632);
      *(_WORD *)((char *)v6 + 633) = *(_WORD *)((char *)v7 + 633);
      long long v26 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v27 = v26[28];
      long long v28 = (char *)v6 + v27;
      long long v29 = (char *)v7 + v27;
      uint64_t v30 = type metadata accessor for CommandOperation();
      uint64_t v31 = *(void *)(v30 - 8);
      if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
        memcpy(v28, v29, *(void *)(*(void *)(v32 - 8) + 64));
      }
      else
      {
        uint64_t v46 = v31;
        *long long v28 = *v29;
        uint64_t v33 = *(int *)(v30 + 20);
        long long v48 = v28;
        id v34 = &v28[v33];
        int v35 = &v29[v33];
        long long v36 = *(_OWORD *)&v29[v33 + 16];
        *id v34 = *(_OWORD *)&v29[v33];
        v34[1] = v36;
        uint64_t v37 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        long long v47 = (char *)v34 + v37;
        long long v38 = &v35[v37];
        uint64_t v39 = type metadata accessor for UUID();
        (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v39 - 8) + 32))(v47, v38, v39);
        uint64_t v40 = *(int *)(v30 + 24);
        unint64_t v41 = &v48[v40];
        id v42 = (uint64_t *)&v29[v40];
        uint64_t v43 = *v42;
        if (*v42)
        {
          uint64_t v44 = v42[1];
          *unint64_t v41 = v43;
          v41[1] = v44;
        }
        else
        {
          *(_OWORD *)unint64_t v41 = *(_OWORD *)v42;
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v46 + 56))(v48, 0, 1, v30);
      }
      *((unsigned char *)v6 + v26[29]) = *((unsigned char *)v7 + v26[29]);
      *((unsigned char *)v6 + v26[30]) = *((unsigned char *)v7 + v26[30]);
      *((unsigned char *)v6 + v26[31]) = *((unsigned char *)v7 + v26[31]);
      *((unsigned char *)v6 + v26[32]) = *((unsigned char *)v7 + v26[32]);
      *(void *)((char *)v6 + v26[33]) = *(void *)((char *)v7 + v26[33]);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v6, v7, *(void *)(v9 + 64));
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.GroupItem(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 16);
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(_OWORD *)(a1 + 32) = v7;
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
  }
  *(_WORD *)(a1 + 57) = *(_WORD *)(a2 + 57);
  *(unsigned char *)(a1 + 59) = *(unsigned char *)(a2 + 59);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a1 + 72) = v8;
  swift_bridgeObjectRelease();
  uint64_t v9 = *(int *)(a3 + 44);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
  uint64_t v13 = *(void *)(v12 - 8);
  long long v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      if (a1 == a2) {
        return a1;
      }
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v34 = *(_OWORD *)(v11 + 16);
        *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
        *(_OWORD *)(v10 + 16) = v34;
        *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
        uint64_t v35 = *(void *)(v11 + 48);
        *(void *)(v10 + 40) = *(void *)(v11 + 40);
        *(void *)(v10 + 48) = v35;
        *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
        long long v36 = *(_OWORD *)(v11 + 208);
        *(_OWORD *)(v10 + 192) = *(_OWORD *)(v11 + 192);
        *(_OWORD *)(v10 + 208) = v36;
        *(_OWORD *)(v10 + 224) = *(_OWORD *)(v11 + 224);
        *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
        long long v37 = *(_OWORD *)(v11 + 144);
        *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
        *(_OWORD *)(v10 + 144) = v37;
        long long v38 = *(_OWORD *)(v11 + 176);
        *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
        *(_OWORD *)(v10 + 176) = v38;
        long long v39 = *(_OWORD *)(v11 + 80);
        *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
        *(_OWORD *)(v10 + 80) = v39;
        long long v40 = *(_OWORD *)(v11 + 112);
        *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
        *(_OWORD *)(v10 + 112) = v40;
        *(_OWORD *)(v10 + 248) = *(_OWORD *)(v11 + 248);
        long long v41 = *(_OWORD *)(v11 + 280);
        *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
        *(_OWORD *)(v10 + 280) = v41;
        long long v42 = *(_OWORD *)(v11 + 376);
        *(_OWORD *)(v10 + 360) = *(_OWORD *)(v11 + 360);
        *(_OWORD *)(v10 + 376) = v42;
        *(void *)(v10 + 392) = *(void *)(v11 + 392);
        long long v43 = *(_OWORD *)(v11 + 312);
        *(_OWORD *)(v10 + 296) = *(_OWORD *)(v11 + 296);
        *(_OWORD *)(v10 + 312) = v43;
        long long v44 = *(_OWORD *)(v11 + 344);
        *(_OWORD *)(v10 + 328) = *(_OWORD *)(v11 + 328);
        *(_OWORD *)(v10 + 344) = v44;
        long long v45 = *(_OWORD *)(v11 + 448);
        *(_OWORD *)(v10 + 432) = *(_OWORD *)(v11 + 432);
        *(_OWORD *)(v10 + 448) = v45;
        *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
        long long v46 = *(_OWORD *)(v11 + 416);
        *(_OWORD *)(v10 + 400) = *(_OWORD *)(v11 + 400);
        *(_OWORD *)(v10 + 416) = v46;
        *(_OWORD *)(v10 + 472) = *(_OWORD *)(v11 + 472);
        *(_OWORD *)(v10 + 481) = *(_OWORD *)(v11 + 481);
        uint64_t v47 = *(void *)(v11 + 504);
        if (v47)
        {
          uint64_t v48 = *(void *)(v11 + 512);
          *(void *)(v10 + 504) = v47;
          *(void *)(v10 + 512) = v48;
        }
        else
        {
          *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
        }
        *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
        *(_OWORD *)(v10 + 528) = *(_OWORD *)(v11 + 528);
        *(void *)(v10 + 544) = *(void *)(v11 + 544);
        *(void *)(v10 + 568) = *(void *)(v11 + 568);
        *(_OWORD *)(v10 + 552) = *(_OWORD *)(v11 + 552);
        *(void *)(v10 + 576) = *(void *)(v11 + 576);
        *(_OWORD *)(v10 + 584) = *(_OWORD *)(v11 + 584);
        *(_OWORD *)(v10 + 600) = *(_OWORD *)(v11 + 600);
        *(void *)(v10 + 616) = *(void *)(v11 + 616);
        *(void *)(v10 + 624) = *(void *)(v11 + 624);
        *(unsigned char *)(v10 + 632) = *(unsigned char *)(v11 + 632);
        *(_WORD *)(v10 + 633) = *(_WORD *)(v11 + 633);
        long long v68 = (int *)type metadata accessor for PlatformItemList.Item();
        uint64_t v69 = v68[28];
        uint64_t v70 = (unsigned char *)(v10 + v69);
        uint64_t v71 = (unsigned char *)(v11 + v69);
        uint64_t v72 = type metadata accessor for CommandOperation();
        uint64_t v73 = *(void *)(v72 - 8);
        if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v73 + 48))(v71, 1, v72))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v70, v71, *(void *)(*(void *)(v74 - 8) + 64));
        }
        else
        {
          *uint64_t v70 = *v71;
          uint64_t v76 = *(int *)(v72 + 20);
          unint64_t v77 = &v70[v76];
          uint64_t v92 = v70;
          long long v78 = &v71[v76];
          long long v79 = *(_OWORD *)&v71[v76 + 16];
          *unint64_t v77 = *(_OWORD *)&v71[v76];
          v77[1] = v79;
          uint64_t v80 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          long long v90 = (char *)v77 + v80;
          long long v81 = &v78[v80];
          uint64_t v82 = type metadata accessor for UUID();
          (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v82 - 8) + 32))(v90, v81, v82);
          uint64_t v83 = *(int *)(v72 + 24);
          uint64_t v84 = &v92[v83];
          uint64_t v85 = (uint64_t *)&v71[v83];
          uint64_t v86 = *v85;
          if (*v85)
          {
            uint64_t v87 = v85[1];
            *uint64_t v84 = v86;
            v84[1] = v87;
          }
          else
          {
            *(_OWORD *)uint64_t v84 = *(_OWORD *)v85;
          }
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v73 + 56))(v92, 0, 1, v72);
        }
        *(unsigned char *)(v10 + v68[29]) = *(unsigned char *)(v11 + v68[29]);
        *(unsigned char *)(v10 + v68[30]) = *(unsigned char *)(v11 + v68[30]);
        *(unsigned char *)(v10 + v68[31]) = *(unsigned char *)(v11 + v68[31]);
        *(unsigned char *)(v10 + v68[32]) = *(unsigned char *)(v11 + v68[32]);
        *(void *)(v10 + v68[33]) = *(void *)(v11 + v68[33]);
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      size_t v33 = *(void *)(v13 + 64);
LABEL_11:
      memcpy((void *)v10, (const void *)v11, v33);
      return a1;
    }
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v10, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
LABEL_10:
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    size_t v33 = *(void *)(*(void *)(v32 - 8) + 64);
    goto LABEL_11;
  }
  if (v16) {
    goto LABEL_10;
  }
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v17 = *(_OWORD *)(v11 + 16);
    *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
    *(_OWORD *)(v10 + 16) = v17;
    *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
    uint64_t v18 = *(void *)(v11 + 48);
    *(void *)(v10 + 40) = *(void *)(v11 + 40);
    *(void *)(v10 + 48) = v18;
    *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
    long long v19 = *(_OWORD *)(v11 + 208);
    *(_OWORD *)(v10 + 192) = *(_OWORD *)(v11 + 192);
    *(_OWORD *)(v10 + 208) = v19;
    *(_OWORD *)(v10 + 224) = *(_OWORD *)(v11 + 224);
    *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
    long long v20 = *(_OWORD *)(v11 + 144);
    *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
    *(_OWORD *)(v10 + 144) = v20;
    long long v21 = *(_OWORD *)(v11 + 176);
    *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
    *(_OWORD *)(v10 + 176) = v21;
    long long v22 = *(_OWORD *)(v11 + 80);
    *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
    *(_OWORD *)(v10 + 80) = v22;
    long long v23 = *(_OWORD *)(v11 + 112);
    *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
    *(_OWORD *)(v10 + 112) = v23;
    *(_OWORD *)(v10 + 248) = *(_OWORD *)(v11 + 248);
    long long v24 = *(_OWORD *)(v11 + 280);
    *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
    *(_OWORD *)(v10 + 280) = v24;
    long long v25 = *(_OWORD *)(v11 + 376);
    *(_OWORD *)(v10 + 360) = *(_OWORD *)(v11 + 360);
    *(_OWORD *)(v10 + 376) = v25;
    *(void *)(v10 + 392) = *(void *)(v11 + 392);
    long long v26 = *(_OWORD *)(v11 + 312);
    *(_OWORD *)(v10 + 296) = *(_OWORD *)(v11 + 296);
    *(_OWORD *)(v10 + 312) = v26;
    long long v27 = *(_OWORD *)(v11 + 344);
    *(_OWORD *)(v10 + 328) = *(_OWORD *)(v11 + 328);
    *(_OWORD *)(v10 + 344) = v27;
    long long v28 = *(_OWORD *)(v11 + 448);
    *(_OWORD *)(v10 + 432) = *(_OWORD *)(v11 + 432);
    *(_OWORD *)(v10 + 448) = v28;
    *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
    long long v29 = *(_OWORD *)(v11 + 416);
    *(_OWORD *)(v10 + 400) = *(_OWORD *)(v11 + 400);
    *(_OWORD *)(v10 + 416) = v29;
    *(_OWORD *)(v10 + 472) = *(_OWORD *)(v11 + 472);
    *(_OWORD *)(v10 + 481) = *(_OWORD *)(v11 + 481);
    uint64_t v30 = *(void *)(v11 + 504);
    if (v30)
    {
      uint64_t v31 = *(void *)(v11 + 512);
      *(void *)(v10 + 504) = v30;
      *(void *)(v10 + 512) = v31;
    }
    else
    {
      *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
    }
    *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
    *(_OWORD *)(v10 + 528) = *(_OWORD *)(v11 + 528);
    *(void *)(v10 + 544) = *(void *)(v11 + 544);
    *(void *)(v10 + 568) = *(void *)(v11 + 568);
    *(_OWORD *)(v10 + 552) = *(_OWORD *)(v11 + 552);
    *(void *)(v10 + 576) = *(void *)(v11 + 576);
    *(_OWORD *)(v10 + 584) = *(_OWORD *)(v11 + 584);
    *(_OWORD *)(v10 + 600) = *(_OWORD *)(v11 + 600);
    *(void *)(v10 + 616) = *(void *)(v11 + 616);
    *(void *)(v10 + 624) = *(void *)(v11 + 624);
    *(unsigned char *)(v10 + 632) = *(unsigned char *)(v11 + 632);
    *(_WORD *)(v10 + 633) = *(_WORD *)(v11 + 633);
    long long v49 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v50 = v49[28];
    long long v51 = (unsigned char *)(v10 + v50);
    long long v52 = (unsigned char *)(v11 + v50);
    uint64_t v53 = type metadata accessor for CommandOperation();
    uint64_t v54 = *(void *)(v53 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v54 + 48))(v52, 1, v53))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(v51, v52, *(void *)(*(void *)(v55 - 8) + 64));
    }
    else
    {
      uint64_t v89 = v54;
      uint64_t v91 = v51;
      unsigned char *v51 = *v52;
      uint64_t v56 = *(int *)(v53 + 20);
      id v57 = &v51[v56];
      uint64_t v58 = &v52[v56];
      long long v59 = *(_OWORD *)&v52[v56 + 16];
      *id v57 = *(_OWORD *)&v52[v56];
      v57[1] = v59;
      uint64_t v60 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v88 = (char *)v57 + v60;
      int v61 = &v58[v60];
      uint64_t v62 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v62 - 8) + 32))(v88, v61, v62);
      uint64_t v63 = *(int *)(v53 + 24);
      long long v64 = &v91[v63];
      long long v65 = (uint64_t *)&v52[v63];
      uint64_t v66 = *v65;
      if (*v65)
      {
        uint64_t v67 = v65[1];
        *long long v64 = v66;
        v64[1] = v67;
      }
      else
      {
        *(_OWORD *)long long v64 = *(_OWORD *)v65;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v89 + 56))(v91, 0, 1, v53);
    }
    *(unsigned char *)(v10 + v49[29]) = *(unsigned char *)(v11 + v49[29]);
    *(unsigned char *)(v10 + v49[30]) = *(unsigned char *)(v11 + v49[30]);
    *(unsigned char *)(v10 + v49[31]) = *(unsigned char *)(v11 + v49[31]);
    *(unsigned char *)(v10 + v49[32]) = *(unsigned char *)(v11 + v49[32]);
    *(void *)(v10 + v49[33]) = *(void *)(v11 + v49[33]);
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy((void *)v10, (const void *)v11, *(void *)(v13 + 64));
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
  return a1;
}

uint64_t sub_187DC6C34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 44);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_187DC6D14(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 72) = (a2 - 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 44);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ToolbarStorage.GroupItem.CollapsedContent(char *a1, char **a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      long long v25 = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(a1 + 24) = v25;
      (**(void (***)(char *, char **))(v25 - 8))(a1, a2);
      *((void *)a1 + 5) = a2[5];
      *((void *)a1 + 6) = a2[6];
      *((void *)a1 + 7) = a2[7];
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      long long v26 = a2[10];
      *((void *)a1 + 10) = v26;
      swift_retain();
      swift_bridgeObjectRetain();
      long long v27 = v26;
LABEL_49:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    uint64_t v6 = *a2;
    uint64_t v7 = a2[1];
    *(void *)a1 = *a2;
    *((void *)a1 + 1) = v7;
    uint64_t v8 = a2[3];
    *((void *)a1 + 2) = a2[2];
    *((void *)a1 + 3) = v8;
    a1[32] = *((unsigned char *)a2 + 32);
    uint64_t v9 = a2[6];
    *((void *)a1 + 5) = a2[5];
    *((void *)a1 + 6) = v9;
    a1[56] = *((unsigned char *)a2 + 56);
    uint64_t v10 = a1 + 64;
    uint64_t v11 = a2 + 8;
    unint64_t v12 = (unint64_t)a2[23];
    uint64_t v13 = v6;
    long long v14 = v7;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v12 >> 1 == 4294967294)
    {
      long long v15 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v15;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)((char *)a2 + 239);
      long long v16 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v16;
      long long v17 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v17;
      long long v18 = *((_OWORD *)a2 + 5);
      *uint64_t v10 = *v11;
      *((_OWORD *)a1 + 5) = v18;
      long long v19 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v19;
      long long v20 = a2[32];
      if (v20)
      {
LABEL_5:
        *((void *)a1 + 31) = a2[31];
        *((void *)a1 + 32) = v20;
        long long v21 = a2[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v21 >= 2) {
          long long v22 = v21;
        }
        *((void *)a1 + 33) = v21;
        *((_DWORD *)a1 + 68) = *((_DWORD *)a2 + 68);
        a1[276] = *((unsigned char *)a2 + 276);
        *(_WORD *)(a1 + 277) = *(_WORD *)((char *)a2 + 277);
        long long v23 = a2[36];
        *((void *)a1 + 35) = a2[35];
        *((void *)a1 + 36) = v23;
        swift_retain();
        swift_retain();
LABEL_18:
        unint64_t v39 = (unint64_t)a2[41];
        if (v39 >> 2 == 0xFFFFFFFF)
        {
          long long v40 = *(_OWORD *)(a2 + 47);
          *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 45);
          *(_OWORD *)(a1 + 376) = v40;
          *((void *)a1 + 49) = a2[49];
          long long v41 = *(_OWORD *)(a2 + 39);
          *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 37);
          *(_OWORD *)(a1 + 312) = v41;
          long long v42 = *(_OWORD *)(a2 + 43);
          *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 41);
          *(_OWORD *)(a1 + 344) = v42;
        }
        else
        {
          long long v43 = a2[37];
          uint64_t v44 = (uint64_t)a2[38];
          uint64_t v45 = (uint64_t)a2[39];
          uint64_t v46 = (uint64_t)a2[40];
          uint64_t v47 = (uint64_t)a2[42];
          uint64_t v48 = (uint64_t)a2[43];
          long long v49 = a2[44];
          uint64_t v89 = (uint64_t)a2[45];
          uint64_t v90 = (uint64_t)a2[46];
          uint64_t v92 = (uint64_t)a2[47];
          uint64_t v95 = a2[48];
          __dsta = a2[49];
          outlined copy of PlatformItemList.Item.SystemItem(v43, v44, v45, v46, v39, v47, v48, (char)v49, v89, v90, v92, (char)v95, (uint64_t)__dsta);
          *((void *)a1 + 37) = v43;
          *((void *)a1 + 38) = v44;
          *((void *)a1 + 39) = v45;
          *((void *)a1 + 40) = v46;
          *((void *)a1 + 41) = v39;
          *((void *)a1 + 42) = v47;
          *((void *)a1 + 43) = v48;
          *((void *)a1 + 44) = v49;
          *((void *)a1 + 45) = v89;
          *((void *)a1 + 46) = v90;
          *((void *)a1 + 47) = v92;
          *((void *)a1 + 48) = v95;
          *((void *)a1 + 49) = __dsta;
        }
        uint64_t v50 = a2[51];
        if (v50 == (char *)1)
        {
          long long v51 = *((_OWORD *)a2 + 28);
          *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
          *((_OWORD *)a1 + 28) = v51;
          a1[464] = *((unsigned char *)a2 + 464);
          long long v52 = *((_OWORD *)a2 + 26);
          *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
          *((_OWORD *)a1 + 26) = v52;
LABEL_31:
          uint64_t v58 = a2[60];
          *((void *)a1 + 59) = a2[59];
          *((void *)a1 + 60) = v58;
          *((void *)a1 + 61) = a2[61];
          a1[496] = *((unsigned char *)a2 + 496);
          long long v59 = a2[63];
          swift_bridgeObjectRetain();
          if (v59)
          {
            uint64_t v60 = a2[64];
            *((void *)a1 + 63) = v59;
            *((void *)a1 + 64) = v60;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 63);
          }
          *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
          int v61 = a2[66];
          if (v61)
          {
            *((void *)a1 + 66) = v61;
            *((void *)a1 + 67) = a2[67];
            *((void *)a1 + 68) = a2[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
            *((void *)a1 + 68) = a2[68];
          }
          uint64_t v62 = a2[69];
          if (v62 == (char *)1)
          {
            *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 69);
            *((void *)a1 + 71) = a2[71];
          }
          else
          {
            *((void *)a1 + 69) = v62;
            uint64_t v63 = a2[70];
            swift_retain();
            if (v63)
            {
              long long v64 = a2[71];
              *((void *)a1 + 70) = v63;
              *((void *)a1 + 71) = v64;
              swift_retain();
            }
            else
            {
              *((_OWORD *)a1 + 35) = *((_OWORD *)a2 + 35);
            }
          }
          long long v65 = a2[72];
          *((void *)a1 + 72) = v65;
          *((void *)a1 + 73) = a2[73];
          *((void *)a1 + 74) = a2[74];
          *((void *)a1 + 75) = a2[75];
          *((void *)a1 + 76) = a2[76];
          *((void *)a1 + 77) = a2[77];
          *((void *)a1 + 78) = a2[78];
          *((_WORD *)a1 + 316) = *((_WORD *)a2 + 316);
          a1[634] = *((unsigned char *)a2 + 634);
          uint64_t v66 = type metadata accessor for PlatformItemList.Item();
          uint64_t v67 = *(int *)(v66 + 112);
          uint64_t v96 = (int *)v66;
          __dst = &a1[v67];
          long long v68 = (char *)a2 + v67;
          uint64_t v69 = type metadata accessor for CommandOperation();
          uint64_t v91 = *(void *)(v69 - 8);
          uint64_t v93 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v91 + 48);
          uint64_t v70 = v65;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v93(v68, 1, v69))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(__dst, v68, *(void *)(*(void *)(v71 - 8) + 64));
          }
          else
          {
            char *__dst = *v68;
            uint64_t v72 = *(int *)(v69 + 20);
            uint64_t v73 = &__dst[v72];
            uint64_t v74 = &v68[v72];
            uint64_t v94 = v68;
            uint64_t v75 = v69;
            uint64_t v76 = *(void *)&v68[v72];
            uint64_t v77 = *((void *)v74 + 1);
            char v78 = v74[16];
            outlined copy of Text.Storage(v76, v77, v78);
            *(void *)uint64_t v73 = v76;
            *((void *)v73 + 1) = v77;
            v73[16] = v78;
            *((void *)v73 + 3) = *((void *)v74 + 3);
            uint64_t v79 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v80 = &v73[v79];
            long long v81 = &v74[v79];
            uint64_t v82 = type metadata accessor for UUID();
            uint64_t v83 = *(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v82 - 8) + 16);
            swift_bridgeObjectRetain();
            v83(v80, v81, v82);
            uint64_t v84 = *(int *)(v75 + 24);
            uint64_t v85 = &__dst[v84];
            uint64_t v86 = &v94[v84];
            if (*v86)
            {
              uint64_t v87 = v86[1];
              *(void *)uint64_t v85 = *v86;
              *((void *)v85 + 1) = v87;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v85 = *(_OWORD *)v86;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v91 + 56))(__dst, 0, 1, v75);
          }
          a1[v96[29]] = *((unsigned char *)a2 + v96[29]);
          a1[v96[30]] = *((unsigned char *)a2 + v96[30]);
          a1[v96[31]] = *((unsigned char *)a2 + v96[31]);
          a1[v96[32]] = *((unsigned char *)a2 + v96[32]);
          *(void *)&a1[v96[33]] = *(char **)((char *)a2 + v96[33]);
          swift_retain();
          goto LABEL_49;
        }
        *((_DWORD *)a1 + 100) = *((_DWORD *)a2 + 100);
        a1[404] = *((unsigned char *)a2 + 404);
        if (v50)
        {
          uint64_t v53 = a2[52];
          *((void *)a1 + 51) = v50;
          *((void *)a1 + 52) = v53;
          swift_retain();
          uint64_t v54 = a2[53];
          if (v54) {
            goto LABEL_25;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 51);
          uint64_t v54 = a2[53];
          if (v54)
          {
LABEL_25:
            uint64_t v55 = a2[54];
            *((void *)a1 + 53) = v54;
            *((void *)a1 + 54) = v55;
            swift_retain();
            uint64_t v56 = a2[55];
            if (v56)
            {
LABEL_26:
              id v57 = a2[56];
              *((void *)a1 + 55) = v56;
              *((void *)a1 + 56) = v57;
              swift_retain();
LABEL_30:
              *((void *)a1 + 57) = a2[57];
              a1[464] = *((unsigned char *)a2 + 464);
              goto LABEL_31;
            }
LABEL_29:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 55);
            goto LABEL_30;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 53);
        uint64_t v56 = a2[55];
        if (v56) {
          goto LABEL_26;
        }
        goto LABEL_29;
      }
    }
    else
    {
      int v28 = *((unsigned __int8 *)a2 + 72);
      if (v28 == 255)
      {
        *(void *)uint64_t v10 = *(void *)v11;
        a1[72] = *((unsigned char *)a2 + 72);
      }
      else
      {
        long long v29 = a2[8];
        outlined copy of GraphicsImage.Contents(v29, *((unsigned char *)a2 + 72));
        *((void *)a1 + 8) = v29;
        a1[72] = v28;
        unint64_t v12 = (unint64_t)a2[23];
      }
      *((void *)a1 + 10) = a2[10];
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 11);
      a1[104] = *((unsigned char *)a2 + 104);
      *(_OWORD *)(a1 + 108) = *(_OWORD *)((char *)a2 + 108);
      a1[124] = *((unsigned char *)a2 + 124);
      long long v30 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v30;
      *((_WORD *)a1 + 80) = *((_WORD *)a2 + 80);
      a1[162] = *((unsigned char *)a2 + 162);
      a1[163] = *((unsigned char *)a2 + 163);
      if (v12 >> 1 == 0xFFFFFFFF)
      {
        long long v31 = *(_OWORD *)(a2 + 23);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
        *(_OWORD *)(a1 + 184) = v31;
      }
      else
      {
        uint64_t v32 = (uint64_t)a2[21];
        uint64_t v33 = (uint64_t)a2[22];
        long long v34 = a2[24];
        outlined copy of AccessibilityImageLabel(v32, v33, v12);
        *((void *)a1 + 21) = v32;
        *((void *)a1 + 22) = v33;
        *((void *)a1 + 23) = v12;
        *((void *)a1 + 24) = v34;
      }
      uint64_t v35 = a2[26];
      *((void *)a1 + 25) = a2[25];
      *((void *)a1 + 26) = v35;
      *((_WORD *)a1 + 108) = *((_WORD *)a2 + 108);
      *((_DWORD *)a1 + 55) = *((_DWORD *)a2 + 55);
      a1[224] = *((unsigned char *)a2 + 224);
      long long v36 = a2[29];
      *((void *)a1 + 29) = v36;
      *((_WORD *)a1 + 120) = *((_WORD *)a2 + 120);
      a1[242] = *((unsigned char *)a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      long long v37 = v36;
      long long v20 = a2[32];
      if (v20) {
        goto LABEL_5;
      }
    }
    long long v38 = *(_OWORD *)(a2 + 33);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 31);
    *(_OWORD *)(a1 + 264) = v38;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 35);
    goto LABEL_18;
  }
  long long v24 = *a2;
  *(void *)a1 = *a2;
  a1 = &v24[(v5 + 16) & ~(unint64_t)v5];
  swift_retain();
  return a1;
}

void destroy for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v2 = *(void *)(a1 + 184);
    unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
    if ((v2 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v4 = *(unsigned __int8 *)(a1 + 72);
      if (v4 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(a1 + 64), v4);
        uint64_t v2 = *(void *)(a1 + 184);
        unint64_t v3 = v2 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v3 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(a1 + 168), *(void *)(a1 + 176), v2);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(a1 + 256))
    {
      swift_bridgeObjectRelease();
      int v5 = *(void **)(a1 + 264);
      if ((unint64_t)v5 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v6 = *(void *)(a1 + 328);
    if (v6 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(a1 + 296), *(void *)(a1 + 304), *(void *)(a1 + 312), *(void *)(a1 + 320), v6, *(void *)(a1 + 336), *(void *)(a1 + 344), *(void *)(a1 + 352), *(void *)(a1 + 360), *(void *)(a1 + 368), *(void *)(a1 + 376), *(void *)(a1 + 384), *(void *)(a1 + 392));
    }
    uint64_t v7 = *(void *)(a1 + 408);
    if (v7)
    {
      if (v7 == 1)
      {
LABEL_21:
        swift_bridgeObjectRelease();
        if (*(void *)(a1 + 504)) {
          swift_release();
        }
        if (*(void *)(a1 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(a1 + 552) != 1)
        {
          swift_release();
          if (*(void *)(a1 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v8 = a1 + *(int *)(type metadata accessor for PlatformItemList.Item() + 112);
        uint64_t v9 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48))(v8, 1, v9))
        {
          uint64_t v10 = v8 + *(int *)(v9 + 20);
          outlined consume of Text.Storage(*(void *)v10, *(void *)(v10 + 8), *(unsigned char *)(v10 + 16));
          swift_bridgeObjectRelease();
          uint64_t v11 = v10 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v12 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(v11, v12);
          if (*(void *)(v8 + *(int *)(v9 + 24))) {
            swift_release();
          }
        }
        swift_release();
        return;
      }
      swift_release();
    }
    if (*(void *)(a1 + 424)) {
      swift_release();
    }
    if (*(void *)(a1 + 440)) {
      swift_release();
    }
    goto LABEL_21;
  }
  __swift_destroy_boxed_opaque_existential_1(a1);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v13 = *(void **)(a1 + 80);
}

uint64_t initializeWithCopy for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1, uint64_t a2)
{
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    long long v22 = *(_OWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 24) = v22;
    (**(void (***)(uint64_t, uint64_t))(v22 - 8))(a1, a2);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
    long long v23 = *(void **)(a2 + 80);
    *(void *)(a1 + 80) = v23;
    swift_retain();
    swift_bridgeObjectRetain();
    id v24 = v23;
    goto LABEL_47;
  }
  int v4 = *(void **)a2;
  int v5 = *(void **)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  uint64_t v8 = (void *)(a1 + 64);
  uint64_t v9 = (void *)(a2 + 64);
  unint64_t v10 = *(void *)(a2 + 184);
  id v11 = v4;
  id v12 = v5;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v10 >> 1 != 4294967294)
  {
    int v25 = *(unsigned __int8 *)(a2 + 72);
    if (v25 == 255)
    {
      *uint64_t v8 = *v9;
      *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
    }
    else
    {
      long long v26 = *(void **)(a2 + 64);
      outlined copy of GraphicsImage.Contents(v26, *(unsigned char *)(a2 + 72));
      *(void *)(a1 + 64) = v26;
      *(unsigned char *)(a1 + 72) = v25;
      unint64_t v10 = *(void *)(a2 + 184);
    }
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
    *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
    *(_OWORD *)(a1 + 108) = *(_OWORD *)(a2 + 108);
    *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
    long long v27 = *(_OWORD *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
    *(_OWORD *)(a1 + 144) = v27;
    *(_WORD *)(a1 + 160) = *(_WORD *)(a2 + 160);
    *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
    *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
    if (v10 >> 1 == 0xFFFFFFFF)
    {
      long long v28 = *(_OWORD *)(a2 + 184);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      *(_OWORD *)(a1 + 184) = v28;
    }
    else
    {
      uint64_t v29 = *(void *)(a2 + 168);
      uint64_t v30 = *(void *)(a2 + 176);
      uint64_t v31 = *(void *)(a2 + 192);
      outlined copy of AccessibilityImageLabel(v29, v30, v10);
      *(void *)(a1 + 168) = v29;
      *(void *)(a1 + 176) = v30;
      *(void *)(a1 + 184) = v10;
      *(void *)(a1 + 192) = v31;
    }
    uint64_t v32 = *(void *)(a2 + 208);
    *(void *)(a1 + 200) = *(void *)(a2 + 200);
    *(void *)(a1 + 208) = v32;
    *(_WORD *)(a1 + 216) = *(_WORD *)(a2 + 216);
    *(_DWORD *)(a1 + 220) = *(_DWORD *)(a2 + 220);
    *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
    uint64_t v33 = *(void **)(a2 + 232);
    *(void *)(a1 + 232) = v33;
    *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
    *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v34 = v33;
    uint64_t v18 = *(void *)(a2 + 256);
    if (v18) {
      goto LABEL_4;
    }
LABEL_15:
    long long v35 = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 264) = v35;
    *(_OWORD *)(a1 + 280) = *(_OWORD *)(a2 + 280);
    goto LABEL_16;
  }
  long long v13 = *(_OWORD *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 208) = v13;
  *(_OWORD *)(a1 + 224) = *(_OWORD *)(a2 + 224);
  *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
  long long v14 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v14;
  long long v15 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v15;
  long long v16 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(a1 + 80) = v16;
  long long v17 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v17;
  uint64_t v18 = *(void *)(a2 + 256);
  if (!v18) {
    goto LABEL_15;
  }
LABEL_4:
  *(void *)(a1 + 248) = *(void *)(a2 + 248);
  *(void *)(a1 + 256) = v18;
  long long v19 = *(void **)(a2 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v19 >= 2) {
    id v20 = v19;
  }
  *(void *)(a1 + 264) = v19;
  *(_DWORD *)(a1 + 272) = *(_DWORD *)(a2 + 272);
  *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
  *(_WORD *)(a1 + 277) = *(_WORD *)(a2 + 277);
  uint64_t v21 = *(void *)(a2 + 288);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(void *)(a1 + 288) = v21;
  swift_retain();
  swift_retain();
LABEL_16:
  unint64_t v36 = *(void *)(a2 + 328);
  if (v36 >> 2 == 0xFFFFFFFF)
  {
    long long v37 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v37;
    *(void *)(a1 + 392) = *(void *)(a2 + 392);
    long long v38 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v38;
    long long v39 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v39;
  }
  else
  {
    long long v40 = *(void **)(a2 + 296);
    uint64_t v41 = *(void *)(a2 + 304);
    uint64_t v42 = *(void *)(a2 + 312);
    uint64_t v43 = *(void *)(a2 + 320);
    uint64_t v44 = *(void *)(a2 + 336);
    uint64_t v45 = *(void *)(a2 + 344);
    uint64_t v46 = *(void *)(a2 + 352);
    uint64_t v86 = *(void *)(a2 + 360);
    uint64_t v87 = *(void *)(a2 + 368);
    uint64_t v89 = *(void *)(a2 + 376);
    uint64_t v92 = *(void *)(a2 + 384);
    __dsta = *(void **)(a2 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v40, v41, v42, v43, v36, v44, v45, v46, v86, v87, v89, v92, (uint64_t)__dsta);
    *(void *)(a1 + 296) = v40;
    *(void *)(a1 + 304) = v41;
    *(void *)(a1 + 312) = v42;
    *(void *)(a1 + 320) = v43;
    *(void *)(a1 + 328) = v36;
    *(void *)(a1 + 336) = v44;
    *(void *)(a1 + 344) = v45;
    *(void *)(a1 + 352) = v46;
    *(void *)(a1 + 360) = v86;
    *(void *)(a1 + 368) = v87;
    *(void *)(a1 + 376) = v89;
    *(void *)(a1 + 384) = v92;
    *(void *)(a1 + 392) = __dsta;
  }
  uint64_t v47 = *(void *)(a2 + 408);
  if (v47 != 1)
  {
    *(_DWORD *)(a1 + 400) = *(_DWORD *)(a2 + 400);
    *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
    if (v47)
    {
      uint64_t v50 = *(void *)(a2 + 416);
      *(void *)(a1 + 408) = v47;
      *(void *)(a1 + 416) = v50;
      swift_retain();
      uint64_t v51 = *(void *)(a2 + 424);
      if (v51) {
        goto LABEL_23;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
      uint64_t v51 = *(void *)(a2 + 424);
      if (v51)
      {
LABEL_23:
        uint64_t v52 = *(void *)(a2 + 432);
        *(void *)(a1 + 424) = v51;
        *(void *)(a1 + 432) = v52;
        swift_retain();
        uint64_t v53 = *(void *)(a2 + 440);
        if (v53)
        {
LABEL_24:
          uint64_t v54 = *(void *)(a2 + 448);
          *(void *)(a1 + 440) = v53;
          *(void *)(a1 + 448) = v54;
          swift_retain();
LABEL_28:
          *(void *)(a1 + 456) = *(void *)(a2 + 456);
          *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
          goto LABEL_29;
        }
LABEL_27:
        *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
        goto LABEL_28;
      }
    }
    *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
    uint64_t v53 = *(void *)(a2 + 440);
    if (v53) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  long long v48 = *(_OWORD *)(a2 + 448);
  *(_OWORD *)(a1 + 432) = *(_OWORD *)(a2 + 432);
  *(_OWORD *)(a1 + 448) = v48;
  *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
  long long v49 = *(_OWORD *)(a2 + 416);
  *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
  *(_OWORD *)(a1 + 416) = v49;
LABEL_29:
  uint64_t v55 = *(void *)(a2 + 480);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a1 + 480) = v55;
  *(void *)(a1 + 488) = *(void *)(a2 + 488);
  *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
  uint64_t v56 = *(void *)(a2 + 504);
  swift_bridgeObjectRetain();
  if (v56)
  {
    uint64_t v57 = *(void *)(a2 + 512);
    *(void *)(a1 + 504) = v56;
    *(void *)(a1 + 512) = v57;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
  }
  *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
  uint64_t v58 = *(void *)(a2 + 528);
  if (v58)
  {
    *(void *)(a1 + 528) = v58;
    *(void *)(a1 + 536) = *(void *)(a2 + 536);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
    *(void *)(a1 + 544) = *(void *)(a2 + 544);
  }
  uint64_t v59 = *(void *)(a2 + 552);
  if (v59 == 1)
  {
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *(void *)(a1 + 568) = *(void *)(a2 + 568);
  }
  else
  {
    *(void *)(a1 + 552) = v59;
    uint64_t v60 = *(void *)(a2 + 560);
    swift_retain();
    if (v60)
    {
      uint64_t v61 = *(void *)(a2 + 568);
      *(void *)(a1 + 560) = v60;
      *(void *)(a1 + 568) = v61;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(a1 + 560) = *(_OWORD *)(a2 + 560);
    }
  }
  uint64_t v62 = *(void **)(a2 + 576);
  *(void *)(a1 + 576) = v62;
  *(void *)(a1 + 584) = *(void *)(a2 + 584);
  *(void *)(a1 + 592) = *(void *)(a2 + 592);
  *(void *)(a1 + 600) = *(void *)(a2 + 600);
  *(void *)(a1 + 608) = *(void *)(a2 + 608);
  *(void *)(a1 + 616) = *(void *)(a2 + 616);
  *(void *)(a1 + 624) = *(void *)(a2 + 624);
  *(_WORD *)(a1 + 632) = *(_WORD *)(a2 + 632);
  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
  uint64_t v63 = type metadata accessor for PlatformItemList.Item();
  uint64_t v64 = *(int *)(v63 + 112);
  uint64_t v93 = (int *)v63;
  __dst = (unsigned char *)(a1 + v64);
  long long v65 = (unsigned char *)(a2 + v64);
  uint64_t v66 = type metadata accessor for CommandOperation();
  uint64_t v88 = *(void *)(v66 - 8);
  uint64_t v90 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v88 + 48);
  id v67 = v62;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v90(v65, 1, v66))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v65, *(void *)(*(void *)(v68 - 8) + 64));
  }
  else
  {
    unsigned char *__dst = *v65;
    uint64_t v69 = *(int *)(v66 + 20);
    uint64_t v70 = &__dst[v69];
    uint64_t v71 = &v65[v69];
    uint64_t v91 = v65;
    uint64_t v72 = v66;
    uint64_t v73 = *(void *)&v65[v69];
    uint64_t v74 = *((void *)v71 + 1);
    char v75 = v71[16];
    outlined copy of Text.Storage(v73, v74, v75);
    *(void *)uint64_t v70 = v73;
    *((void *)v70 + 1) = v74;
    v70[16] = v75;
    *((void *)v70 + 3) = *((void *)v71 + 3);
    uint64_t v76 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v77 = &v70[v76];
    char v78 = &v71[v76];
    uint64_t v79 = type metadata accessor for UUID();
    uint64_t v80 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v79 - 8) + 16);
    swift_bridgeObjectRetain();
    v80(v77, v78, v79);
    uint64_t v81 = *(int *)(v72 + 24);
    uint64_t v82 = &__dst[v81];
    uint64_t v83 = &v91[v81];
    if (*v83)
    {
      uint64_t v84 = v83[1];
      *uint64_t v82 = *v83;
      v82[1] = v84;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v82 = *(_OWORD *)v83;
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v88 + 56))(__dst, 0, 1, v72);
  }
  *(unsigned char *)(a1 + v93[29]) = *(unsigned char *)(a2 + v93[29]);
  *(unsigned char *)(a1 + v93[30]) = *(unsigned char *)(a2 + v93[30]);
  *(unsigned char *)(a1 + v93[31]) = *(unsigned char *)(a2 + v93[31]);
  *(unsigned char *)(a1 + v93[32]) = *(unsigned char *)(a2 + v93[32]);
  *(void *)(a1 + v93[33]) = *(void *)(a2 + v93[33]);
  swift_retain();
LABEL_47:
  swift_storeEnumTagMultiPayload();
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.GroupItem.CollapsedContent(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(a1, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      uint64_t v23 = *(void *)(a2 + 24);
      *(void *)(a1 + 24) = v23;
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      (**(void (***)(uint64_t, uint64_t))(v23 - 8))(a1, a2);
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 48);
      *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 52);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      id v24 = *(void **)(a2 + 80);
      *(void *)(a1 + 80) = v24;
      swift_retain();
      swift_bridgeObjectRetain();
      id v25 = v24;
LABEL_49:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    int v4 = *(void **)a2;
    *(void *)a1 = *(void *)a2;
    int v5 = *(void **)(a2 + 8);
    *(void *)(a1 + 8) = v5;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
    uint64_t v6 = (_OWORD *)(a1 + 64);
    uint64_t v7 = (id *)(a2 + 64);
    unint64_t v8 = *(void *)(a2 + 184);
    id v9 = v4;
    id v10 = v5;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v8 >> 1 == 4294967294)
    {
      long long v11 = *(_OWORD *)v7;
      long long v12 = *(_OWORD *)(a2 + 80);
      long long v13 = *(_OWORD *)(a2 + 112);
      *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 112) = v13;
      *uint64_t v6 = v11;
      *(_OWORD *)(a1 + 80) = v12;
      long long v14 = *(_OWORD *)(a2 + 128);
      long long v15 = *(_OWORD *)(a2 + 144);
      long long v16 = *(_OWORD *)(a2 + 176);
      *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
      *(_OWORD *)(a1 + 176) = v16;
      *(_OWORD *)(a1 + 128) = v14;
      *(_OWORD *)(a1 + 144) = v15;
      long long v17 = *(_OWORD *)(a2 + 192);
      long long v18 = *(_OWORD *)(a2 + 208);
      long long v19 = *(_OWORD *)(a2 + 224);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      *(_OWORD *)(a1 + 208) = v18;
      *(_OWORD *)(a1 + 224) = v19;
      *(_OWORD *)(a1 + 192) = v17;
      if (*(void *)(a2 + 256))
      {
LABEL_5:
        *(void *)(a1 + 248) = *(void *)(a2 + 248);
        *(void *)(a1 + 256) = *(void *)(a2 + 256);
        id v20 = *(void **)(a2 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v20 >= 2) {
          id v21 = v20;
        }
        *(void *)(a1 + 264) = v20;
        int v22 = *(_DWORD *)(a2 + 272);
        *(unsigned char *)(a1 + 276) = *(unsigned char *)(a2 + 276);
        *(_DWORD *)(a1 + 272) = v22;
        *(unsigned char *)(a1 + 277) = *(unsigned char *)(a2 + 277);
        *(unsigned char *)(a1 + 278) = *(unsigned char *)(a2 + 278);
        *(void *)(a1 + 280) = *(void *)(a2 + 280);
        *(void *)(a1 + 288) = *(void *)(a2 + 288);
        swift_retain();
        swift_retain();
LABEL_17:
        unint64_t v42 = *(void *)(a2 + 328);
        if (v42 >> 2 == 0xFFFFFFFF)
        {
          long long v43 = *(_OWORD *)(a2 + 296);
          long long v44 = *(_OWORD *)(a2 + 328);
          *(_OWORD *)(a1 + 312) = *(_OWORD *)(a2 + 312);
          *(_OWORD *)(a1 + 328) = v44;
          *(_OWORD *)(a1 + 296) = v43;
          long long v45 = *(_OWORD *)(a2 + 344);
          long long v46 = *(_OWORD *)(a2 + 360);
          long long v47 = *(_OWORD *)(a2 + 376);
          *(void *)(a1 + 392) = *(void *)(a2 + 392);
          *(_OWORD *)(a1 + 360) = v46;
          *(_OWORD *)(a1 + 376) = v47;
          *(_OWORD *)(a1 + 344) = v45;
        }
        else
        {
          long long v48 = *(void **)(a2 + 296);
          uint64_t v49 = *(void *)(a2 + 304);
          uint64_t v50 = *(void *)(a2 + 312);
          uint64_t v51 = *(void *)(a2 + 320);
          uint64_t v52 = *(void *)(a2 + 336);
          uint64_t v53 = *(void *)(a2 + 344);
          uint64_t v54 = *(void *)(a2 + 352);
          uint64_t v97 = *(void *)(a2 + 360);
          uint64_t v98 = *(void *)(a2 + 368);
          uint64_t v100 = *(void *)(a2 + 376);
          uint64_t v103 = *(void *)(a2 + 384);
          __dsta = *(void **)(a2 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v48, v49, v50, v51, v42, v52, v53, v54, v97, v98, v100, v103, (uint64_t)__dsta);
          *(void *)(a1 + 296) = v48;
          *(void *)(a1 + 304) = v49;
          *(void *)(a1 + 312) = v50;
          *(void *)(a1 + 320) = v51;
          *(void *)(a1 + 328) = v42;
          *(void *)(a1 + 336) = v52;
          *(void *)(a1 + 344) = v53;
          *(void *)(a1 + 352) = v54;
          *(void *)(a1 + 360) = v97;
          *(void *)(a1 + 368) = v98;
          *(void *)(a1 + 376) = v100;
          *(void *)(a1 + 384) = v103;
          *(void *)(a1 + 392) = __dsta;
        }
        if (*(void *)(a2 + 408) == 1)
        {
          *(_OWORD *)(a1 + 400) = *(_OWORD *)(a2 + 400);
          long long v55 = *(_OWORD *)(a2 + 416);
          long long v56 = *(_OWORD *)(a2 + 432);
          long long v57 = *(_OWORD *)(a2 + 448);
          *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
          *(_OWORD *)(a1 + 432) = v56;
          *(_OWORD *)(a1 + 448) = v57;
          *(_OWORD *)(a1 + 416) = v55;
          goto LABEL_30;
        }
        *(unsigned char *)(a1 + 400) = *(unsigned char *)(a2 + 400);
        *(unsigned char *)(a1 + 401) = *(unsigned char *)(a2 + 401);
        *(unsigned char *)(a1 + 402) = *(unsigned char *)(a2 + 402);
        *(unsigned char *)(a1 + 403) = *(unsigned char *)(a2 + 403);
        *(unsigned char *)(a1 + 404) = *(unsigned char *)(a2 + 404);
        uint64_t v58 = *(void *)(a2 + 408);
        if (v58)
        {
          uint64_t v59 = *(void *)(a2 + 416);
          *(void *)(a1 + 408) = v58;
          *(void *)(a1 + 416) = v59;
          swift_retain();
          uint64_t v60 = *(void *)(a2 + 424);
          if (v60) {
            goto LABEL_24;
          }
        }
        else
        {
          *(_OWORD *)(a1 + 408) = *(_OWORD *)(a2 + 408);
          uint64_t v60 = *(void *)(a2 + 424);
          if (v60)
          {
LABEL_24:
            uint64_t v61 = *(void *)(a2 + 432);
            *(void *)(a1 + 424) = v60;
            *(void *)(a1 + 432) = v61;
            swift_retain();
            uint64_t v62 = *(void *)(a2 + 440);
            if (v62)
            {
LABEL_25:
              uint64_t v63 = *(void *)(a2 + 448);
              *(void *)(a1 + 440) = v62;
              *(void *)(a1 + 448) = v63;
              swift_retain();
LABEL_29:
              *(void *)(a1 + 456) = *(void *)(a2 + 456);
              *(unsigned char *)(a1 + 464) = *(unsigned char *)(a2 + 464);
LABEL_30:
              *(void *)(a1 + 472) = *(void *)(a2 + 472);
              *(void *)(a1 + 480) = *(void *)(a2 + 480);
              *(void *)(a1 + 488) = *(void *)(a2 + 488);
              *(unsigned char *)(a1 + 496) = *(unsigned char *)(a2 + 496);
              uint64_t v64 = *(void *)(a2 + 504);
              swift_bridgeObjectRetain();
              if (v64)
              {
                uint64_t v65 = *(void *)(a2 + 512);
                *(void *)(a1 + 504) = v64;
                *(void *)(a1 + 512) = v65;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
              }
              *(_WORD *)(a1 + 520) = *(_WORD *)(a2 + 520);
              uint64_t v66 = *(void *)(a2 + 528);
              if (v66)
              {
                *(void *)(a1 + 528) = v66;
                *(void *)(a1 + 536) = *(void *)(a2 + 536);
                *(void *)(a1 + 544) = *(void *)(a2 + 544);
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                long long v67 = *(_OWORD *)(a2 + 528);
                *(void *)(a1 + 544) = *(void *)(a2 + 544);
                *(_OWORD *)(a1 + 528) = v67;
              }
              uint64_t v68 = *(void *)(a2 + 552);
              if (v68 == 1)
              {
                uint64_t v69 = (_OWORD *)(a1 + 552);
                long long v70 = *(_OWORD *)(a2 + 552);
                *(void *)(a1 + 568) = *(void *)(a2 + 568);
              }
              else
              {
                *(void *)(a1 + 552) = v68;
                uint64_t v71 = *(void *)(a2 + 560);
                swift_retain();
                if (v71)
                {
                  uint64_t v72 = *(void *)(a2 + 568);
                  *(void *)(a1 + 560) = v71;
                  *(void *)(a1 + 568) = v72;
                  swift_retain();
LABEL_42:
                  uint64_t v73 = *(void **)(a2 + 576);
                  *(void *)(a1 + 576) = v73;
                  *(void *)(a1 + 584) = *(void *)(a2 + 584);
                  *(void *)(a1 + 592) = *(void *)(a2 + 592);
                  *(void *)(a1 + 600) = *(void *)(a2 + 600);
                  *(void *)(a1 + 608) = *(void *)(a2 + 608);
                  *(void *)(a1 + 616) = *(void *)(a2 + 616);
                  *(void *)(a1 + 624) = *(void *)(a2 + 624);
                  *(unsigned char *)(a1 + 632) = *(unsigned char *)(a2 + 632);
                  *(unsigned char *)(a1 + 633) = *(unsigned char *)(a2 + 633);
                  *(unsigned char *)(a1 + 634) = *(unsigned char *)(a2 + 634);
                  uint64_t v74 = type metadata accessor for PlatformItemList.Item();
                  uint64_t v75 = *(int *)(v74 + 112);
                  uint64_t v104 = (int *)v74;
                  __dst = (unsigned char *)(a1 + v75);
                  uint64_t v76 = (unsigned char *)(a2 + v75);
                  uint64_t v77 = type metadata accessor for CommandOperation();
                  uint64_t v99 = *(void *)(v77 - 8);
                  uint64_t v101 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v99 + 48);
                  id v78 = v73;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v101(v76, 1, v77))
                  {
                    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                    memcpy(__dst, v76, *(void *)(*(void *)(v79 - 8) + 64));
                  }
                  else
                  {
                    unsigned char *__dst = *v76;
                    uint64_t v80 = *(int *)(v77 + 20);
                    uint64_t v81 = &__dst[v80];
                    uint64_t v82 = &v76[v80];
                    uint64_t v102 = v76;
                    uint64_t v83 = v77;
                    uint64_t v84 = *(void *)&v76[v80];
                    uint64_t v85 = *((void *)v82 + 1);
                    char v86 = v82[16];
                    outlined copy of Text.Storage(v84, v85, v86);
                    *(void *)uint64_t v81 = v84;
                    *((void *)v81 + 1) = v85;
                    v81[16] = v86;
                    *((void *)v81 + 3) = *((void *)v82 + 3);
                    uint64_t v87 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v88 = &v81[v87];
                    uint64_t v89 = &v82[v87];
                    uint64_t v90 = type metadata accessor for UUID();
                    uint64_t v91 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v90 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v91(v88, v89, v90);
                    uint64_t v92 = *(int *)(v83 + 24);
                    uint64_t v93 = &__dst[v92];
                    uint64_t v94 = &v102[v92];
                    if (*v94)
                    {
                      uint64_t v95 = v94[1];
                      *uint64_t v93 = *v94;
                      v93[1] = v95;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
                    }
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v99 + 56))(__dst, 0, 1, v83);
                  }
                  *(unsigned char *)(a1 + v104[29]) = *(unsigned char *)(a2 + v104[29]);
                  *(unsigned char *)(a1 + v104[30]) = *(unsigned char *)(a2 + v104[30]);
                  *(unsigned char *)(a1 + v104[31]) = *(unsigned char *)(a2 + v104[31]);
                  *(unsigned char *)(a1 + v104[32]) = *(unsigned char *)(a2 + v104[32]);
                  *(void *)(a1 + v104[33]) = *(void *)(a2 + v104[33]);
                  swift_retain();
                  goto LABEL_49;
                }
                uint64_t v69 = (_OWORD *)(a1 + 560);
                long long v70 = *(_OWORD *)(a2 + 560);
              }
              *uint64_t v69 = v70;
              goto LABEL_42;
            }
LABEL_28:
            *(_OWORD *)(a1 + 440) = *(_OWORD *)(a2 + 440);
            goto LABEL_29;
          }
        }
        *(_OWORD *)(a1 + 424) = *(_OWORD *)(a2 + 424);
        uint64_t v62 = *(void *)(a2 + 440);
        if (v62) {
          goto LABEL_25;
        }
        goto LABEL_28;
      }
    }
    else
    {
      int v26 = *(unsigned __int8 *)(a2 + 72);
      if (v26 == 255)
      {
        id v28 = *v7;
        *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
        *(void *)uint64_t v6 = v28;
      }
      else
      {
        id v27 = *v7;
        outlined copy of GraphicsImage.Contents(*v7, *(unsigned char *)(a2 + 72));
        *(void *)(a1 + 64) = v27;
        *(unsigned char *)(a1 + 72) = v26;
      }
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
      *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
      long long v29 = *(_OWORD *)(a2 + 108);
      *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
      *(_OWORD *)(a1 + 108) = v29;
      long long v30 = *(_OWORD *)(a2 + 128);
      long long v31 = *(_OWORD *)(a2 + 144);
      *(unsigned char *)(a1 + 160) = *(unsigned char *)(a2 + 160);
      *(_OWORD *)(a1 + 128) = v30;
      *(_OWORD *)(a1 + 144) = v31;
      *(unsigned char *)(a1 + 161) = *(unsigned char *)(a2 + 161);
      *(unsigned char *)(a1 + 162) = *(unsigned char *)(a2 + 162);
      *(unsigned char *)(a1 + 163) = *(unsigned char *)(a2 + 163);
      unint64_t v32 = *(void *)(a2 + 184);
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        long long v33 = *(_OWORD *)(a2 + 184);
        *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 184) = v33;
      }
      else
      {
        uint64_t v34 = *(void *)(a2 + 168);
        uint64_t v35 = *(void *)(a2 + 176);
        uint64_t v36 = *(void *)(a2 + 192);
        outlined copy of AccessibilityImageLabel(v34, v35, *(void *)(a2 + 184));
        *(void *)(a1 + 168) = v34;
        *(void *)(a1 + 176) = v35;
        *(void *)(a1 + 184) = v32;
        *(void *)(a1 + 192) = v36;
      }
      *(void *)(a1 + 200) = *(void *)(a2 + 200);
      *(void *)(a1 + 208) = *(void *)(a2 + 208);
      *(unsigned char *)(a1 + 216) = *(unsigned char *)(a2 + 216);
      *(unsigned char *)(a1 + 217) = *(unsigned char *)(a2 + 217);
      int v37 = *(_DWORD *)(a2 + 220);
      *(unsigned char *)(a1 + 224) = *(unsigned char *)(a2 + 224);
      *(_DWORD *)(a1 + 220) = v37;
      long long v38 = *(void **)(a2 + 232);
      *(void *)(a1 + 232) = v38;
      *(_WORD *)(a1 + 240) = *(_WORD *)(a2 + 240);
      *(unsigned char *)(a1 + 242) = *(unsigned char *)(a2 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v39 = v38;
      if (*(void *)(a2 + 256)) {
        goto LABEL_5;
      }
    }
    long long v40 = *(_OWORD *)(a2 + 248);
    long long v41 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v41;
    *(_OWORD *)(a1 + 248) = v40;
    goto LABEL_17;
  }
  return a1;
}

char *initializeWithTake for ToolbarStorage.GroupItem.CollapsedContent(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    long long v6 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v6;
    a1[32] = a2[32];
    uint64_t v7 = *((void *)a2 + 6);
    *((void *)a1 + 5) = *((void *)a2 + 5);
    *((void *)a1 + 6) = v7;
    a1[56] = a2[56];
    long long v8 = *((_OWORD *)a2 + 13);
    *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
    *((_OWORD *)a1 + 13) = v8;
    *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
    *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
    long long v9 = *((_OWORD *)a2 + 9);
    *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
    *((_OWORD *)a1 + 9) = v9;
    long long v10 = *((_OWORD *)a2 + 11);
    *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
    *((_OWORD *)a1 + 11) = v10;
    long long v11 = *((_OWORD *)a2 + 5);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *((_OWORD *)a1 + 5) = v11;
    long long v12 = *((_OWORD *)a2 + 7);
    *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
    *((_OWORD *)a1 + 7) = v12;
    *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
    long long v13 = *(_OWORD *)(a2 + 280);
    *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
    *(_OWORD *)(a1 + 280) = v13;
    long long v14 = *(_OWORD *)(a2 + 376);
    *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
    *(_OWORD *)(a1 + 376) = v14;
    *((void *)a1 + 49) = *((void *)a2 + 49);
    long long v15 = *(_OWORD *)(a2 + 312);
    *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
    *(_OWORD *)(a1 + 312) = v15;
    long long v16 = *(_OWORD *)(a2 + 344);
    *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
    *(_OWORD *)(a1 + 344) = v16;
    long long v17 = *((_OWORD *)a2 + 28);
    *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
    *((_OWORD *)a1 + 28) = v17;
    a1[464] = a2[464];
    long long v18 = *((_OWORD *)a2 + 26);
    *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
    *((_OWORD *)a1 + 26) = v18;
    *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
    *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
    uint64_t v19 = *((void *)a2 + 63);
    if (v19)
    {
      uint64_t v20 = *((void *)a2 + 64);
      *((void *)a1 + 63) = v19;
      *((void *)a1 + 64) = v20;
    }
    else
    {
      *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
    }
    *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
    *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
    *((void *)a1 + 68) = *((void *)a2 + 68);
    *((void *)a1 + 71) = *((void *)a2 + 71);
    *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
    *((void *)a1 + 72) = *((void *)a2 + 72);
    *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
    *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
    *((void *)a1 + 77) = *((void *)a2 + 77);
    *((void *)a1 + 78) = *((void *)a2 + 78);
    a1[632] = a2[632];
    *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
    id v21 = (int *)type metadata accessor for PlatformItemList.Item();
    uint64_t v22 = v21[28];
    uint64_t v23 = &a1[v22];
    id v24 = &a2[v22];
    uint64_t v25 = type metadata accessor for CommandOperation();
    uint64_t v26 = *(void *)(v25 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
    }
    else
    {
      *uint64_t v23 = *v24;
      uint64_t v28 = *(int *)(v25 + 20);
      long long v29 = &v23[v28];
      long long v30 = &v24[v28];
      long long v31 = *(_OWORD *)&v24[v28 + 16];
      *(_OWORD *)long long v29 = *(_OWORD *)&v24[v28];
      *((_OWORD *)v29 + 1) = v31;
      uint64_t v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      long long v33 = &v29[v32];
      uint64_t v34 = &v30[v32];
      uint64_t v35 = type metadata accessor for UUID();
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
      uint64_t v36 = *(int *)(v25 + 24);
      int v37 = &v23[v36];
      long long v38 = &v24[v36];
      uint64_t v39 = *(void *)v38;
      if (*(void *)v38)
      {
        uint64_t v40 = *((void *)v38 + 1);
        *(void *)int v37 = v39;
        *((void *)v37 + 1) = v40;
      }
      else
      {
        *(_OWORD *)int v37 = *(_OWORD *)v38;
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    a1[v21[29]] = a2[v21[29]];
    a1[v21[30]] = a2[v21[30]];
    a1[v21[31]] = a2[v21[31]];
    a1[v21[32]] = a2[v21[32]];
    *(void *)&a1[v21[33]] = *(void *)&a2[v21[33]];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

char *assignWithTake for ToolbarStorage.GroupItem.CollapsedContent(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)a1, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      a1[32] = a2[32];
      uint64_t v7 = *((void *)a2 + 6);
      *((void *)a1 + 5) = *((void *)a2 + 5);
      *((void *)a1 + 6) = v7;
      a1[56] = a2[56];
      long long v8 = *((_OWORD *)a2 + 13);
      *((_OWORD *)a1 + 12) = *((_OWORD *)a2 + 12);
      *((_OWORD *)a1 + 13) = v8;
      *((_OWORD *)a1 + 14) = *((_OWORD *)a2 + 14);
      *(_DWORD *)(a1 + 239) = *(_DWORD *)(a2 + 239);
      long long v9 = *((_OWORD *)a2 + 9);
      *((_OWORD *)a1 + 8) = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 9) = v9;
      long long v10 = *((_OWORD *)a2 + 11);
      *((_OWORD *)a1 + 10) = *((_OWORD *)a2 + 10);
      *((_OWORD *)a1 + 11) = v10;
      long long v11 = *((_OWORD *)a2 + 5);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *((_OWORD *)a1 + 5) = v11;
      long long v12 = *((_OWORD *)a2 + 7);
      *((_OWORD *)a1 + 6) = *((_OWORD *)a2 + 6);
      *((_OWORD *)a1 + 7) = v12;
      *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 248);
      long long v13 = *(_OWORD *)(a2 + 280);
      *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
      *(_OWORD *)(a1 + 280) = v13;
      long long v14 = *(_OWORD *)(a2 + 376);
      *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
      *(_OWORD *)(a1 + 376) = v14;
      *((void *)a1 + 49) = *((void *)a2 + 49);
      long long v15 = *(_OWORD *)(a2 + 312);
      *(_OWORD *)(a1 + 296) = *(_OWORD *)(a2 + 296);
      *(_OWORD *)(a1 + 312) = v15;
      long long v16 = *(_OWORD *)(a2 + 344);
      *(_OWORD *)(a1 + 328) = *(_OWORD *)(a2 + 328);
      *(_OWORD *)(a1 + 344) = v16;
      long long v17 = *((_OWORD *)a2 + 28);
      *((_OWORD *)a1 + 27) = *((_OWORD *)a2 + 27);
      *((_OWORD *)a1 + 28) = v17;
      a1[464] = a2[464];
      long long v18 = *((_OWORD *)a2 + 26);
      *((_OWORD *)a1 + 25) = *((_OWORD *)a2 + 25);
      *((_OWORD *)a1 + 26) = v18;
      *(_OWORD *)(a1 + 472) = *(_OWORD *)(a2 + 472);
      *(_OWORD *)(a1 + 481) = *(_OWORD *)(a2 + 481);
      uint64_t v19 = *((void *)a2 + 63);
      if (v19)
      {
        uint64_t v20 = *((void *)a2 + 64);
        *((void *)a1 + 63) = v19;
        *((void *)a1 + 64) = v20;
      }
      else
      {
        *(_OWORD *)(a1 + 504) = *(_OWORD *)(a2 + 504);
      }
      *((_WORD *)a1 + 260) = *((_WORD *)a2 + 260);
      *((_OWORD *)a1 + 33) = *((_OWORD *)a2 + 33);
      *((void *)a1 + 68) = *((void *)a2 + 68);
      *((void *)a1 + 71) = *((void *)a2 + 71);
      *(_OWORD *)(a1 + 552) = *(_OWORD *)(a2 + 552);
      *((void *)a1 + 72) = *((void *)a2 + 72);
      *(_OWORD *)(a1 + 584) = *(_OWORD *)(a2 + 584);
      *(_OWORD *)(a1 + 600) = *(_OWORD *)(a2 + 600);
      *((void *)a1 + 77) = *((void *)a2 + 77);
      *((void *)a1 + 78) = *((void *)a2 + 78);
      a1[632] = a2[632];
      *(_WORD *)(a1 + 633) = *(_WORD *)(a2 + 633);
      id v21 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v22 = v21[28];
      uint64_t v23 = &a1[v22];
      id v24 = &a2[v22];
      uint64_t v25 = type metadata accessor for CommandOperation();
      uint64_t v26 = *(void *)(v25 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
        memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64));
      }
      else
      {
        *uint64_t v23 = *v24;
        uint64_t v28 = *(int *)(v25 + 20);
        long long v29 = &v23[v28];
        long long v30 = &v24[v28];
        long long v31 = *(_OWORD *)&v24[v28 + 16];
        *(_OWORD *)long long v29 = *(_OWORD *)&v24[v28];
        *((_OWORD *)v29 + 1) = v31;
        uint64_t v32 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        long long v33 = &v29[v32];
        uint64_t v34 = &v30[v32];
        uint64_t v35 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v35 - 8) + 32))(v33, v34, v35);
        uint64_t v36 = *(int *)(v25 + 24);
        int v37 = &v23[v36];
        long long v38 = &v24[v36];
        uint64_t v39 = *(void *)v38;
        if (*(void *)v38)
        {
          uint64_t v40 = *((void *)v38 + 1);
          *(void *)int v37 = v39;
          *((void *)v37 + 1) = v40;
        }
        else
        {
          *(_OWORD *)int v37 = *(_OWORD *)v38;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      }
      a1[v21[29]] = a2[v21[29]];
      a1[v21[30]] = a2[v21[30]];
      a1[v21[31]] = a2[v21[31]];
      a1[v21[32]] = a2[v21[32]];
      *(void *)&a1[v21[33]] = *(void *)&a2[v21[33]];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
    }
  }
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.Item(uint64_t a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) == 0)
  {
    long long v6 = a3;
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = a2[1];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v7 = a2[5];
    *(void *)(a1 + 32) = a2[4];
    *(void *)(a1 + 40) = v7;
    long long v8 = (_OWORD *)(a1 + 48);
    long long v9 = a2 + 6;
    int v10 = *((unsigned __int8 *)a2 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v10 == 1)
    {
      long long v11 = *(_OWORD *)(a2 + 9);
      *(_OWORD *)(a1 + 72) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, (uint64_t)(a2 + 6));
      *(unsigned char *)(a1 + 88) = 1;
    }
    else
    {
      long long v14 = *((_OWORD *)a2 + 4);
      *long long v8 = *v9;
      *(_OWORD *)(a1 + 64) = v14;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)a2 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)a2 + 89);
    *(void *)(a1 + 96) = a2[12];
    long long v15 = *((_OWORD *)a2 + 8);
    *(_OWORD *)(a1 + 128) = v15;
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 104, (uint64_t)(a2 + 13));
    *(void *)(a1 + 144) = a2[18];
    *(void *)(a1 + 152) = a2[19];
    *(void *)(a1 + 160) = a2[20];
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 21);
    long long v16 = (void *)a2[23];
    uint64_t v17 = v6[12];
    long long v18 = (void **)(a1 + v17);
    uint64_t v122 = a1;
    uint64_t v123 = a2;
    uint64_t v19 = (void **)((char *)a2 + v17);
    *(void *)(a1 + 184) = v16;
    uint64_t v20 = type metadata accessor for PlatformItemList.Item();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    id v23 = v16;
    if (v22(v19, 1, v20))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v13 = v122;
      uint64_t v25 = v123;
LABEL_52:
      swift_weakCopyInit();
      uint64_t v108 = v6[15];
      *(unsigned char *)(v13 + v6[14]) = *((unsigned char *)v25 + v6[14]);
      *(unsigned char *)(v13 + v108) = *((unsigned char *)v25 + v108);
      return v13;
    }
    uint64_t v114 = v21;
    long long v115 = v6;
    uint64_t v121 = (int *)v20;
    uint64_t v26 = *v19;
    uint64_t v27 = v19[1];
    *long long v18 = *v19;
    v18[1] = v27;
    uint64_t v28 = v19[3];
    void v18[2] = v19[2];
    v18[3] = v28;
    *((unsigned char *)v18 + 32) = *((unsigned char *)v19 + 32);
    long long v29 = v19[6];
    void v18[5] = v19[5];
    v18[6] = v29;
    *((unsigned char *)v18 + 56) = *((unsigned char *)v19 + 56);
    long long v30 = v18 + 8;
    long long v31 = v19 + 8;
    unint64_t v32 = (unint64_t)v19[23];
    id v33 = v26;
    id v34 = v27;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v32 >> 1 == 4294967294)
    {
      long long v35 = *((_OWORD *)v19 + 13);
      *((_OWORD *)v18 + 12) = *((_OWORD *)v19 + 12);
      *((_OWORD *)v18 + 13) = v35;
      *((_OWORD *)v18 + 14) = *((_OWORD *)v19 + 14);
      *(_DWORD *)((char *)v18 + 239) = *(_DWORD *)((char *)v19 + 239);
      long long v36 = *((_OWORD *)v19 + 9);
      *((_OWORD *)v18 + 8) = *((_OWORD *)v19 + 8);
      *((_OWORD *)v18 + 9) = v36;
      long long v37 = *((_OWORD *)v19 + 11);
      *((_OWORD *)v18 + 10) = *((_OWORD *)v19 + 10);
      *((_OWORD *)v18 + 11) = v37;
      long long v38 = *((_OWORD *)v19 + 5);
      *long long v30 = *v31;
      *((_OWORD *)v18 + 5) = v38;
      long long v39 = *((_OWORD *)v19 + 7);
      *((_OWORD *)v18 + 6) = *((_OWORD *)v19 + 6);
      *((_OWORD *)v18 + 7) = v39;
      uint64_t v40 = v19[32];
      if (v40)
      {
LABEL_10:
        v18[31] = v19[31];
        v18[32] = v40;
        long long v41 = v19[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v41 >= 2) {
          id v42 = v41;
        }
        v18[33] = v41;
        *((_DWORD *)v18 + 68) = *((_DWORD *)v19 + 68);
        *((unsigned char *)v18 + 276) = *((unsigned char *)v19 + 276);
        *(_WORD *)((char *)v18 + 277) = *(_WORD *)((char *)v19 + 277);
        long long v43 = v19[36];
        v18[35] = v19[35];
        v18[36] = v43;
        swift_retain();
        swift_retain();
LABEL_21:
        unint64_t v55 = (unint64_t)v19[41];
        if (v55 >> 2 == 0xFFFFFFFF)
        {
          long long v56 = *(_OWORD *)(v19 + 47);
          *(_OWORD *)(v18 + 45) = *(_OWORD *)(v19 + 45);
          *(_OWORD *)(v18 + 47) = v56;
          v18[49] = v19[49];
          long long v57 = *(_OWORD *)(v19 + 39);
          *(_OWORD *)(v18 + 37) = *(_OWORD *)(v19 + 37);
          *(_OWORD *)(v18 + 39) = v57;
          long long v58 = *(_OWORD *)(v19 + 43);
          *(_OWORD *)(v18 + 41) = *(_OWORD *)(v19 + 41);
          *(_OWORD *)(v18 + 43) = v58;
        }
        else
        {
          uint64_t v59 = v19[37];
          uint64_t v60 = (uint64_t)v19[38];
          uint64_t v62 = (uint64_t)v19[39];
          uint64_t v61 = (uint64_t)v19[40];
          uint64_t v64 = (uint64_t)v19[42];
          uint64_t v63 = (uint64_t)v19[43];
          uint64_t v65 = v19[44];
          uint64_t v110 = (uint64_t)v19[45];
          uint64_t v111 = (uint64_t)v19[46];
          uint64_t v112 = (uint64_t)v19[47];
          __dsta = v19[48];
          uint64_t v118 = (uint64_t)v19[49];
          outlined copy of PlatformItemList.Item.SystemItem(v59, v60, v62, v61, v55, v64, v63, (char)v65, v110, v111, v112, (char)__dsta, v118);
          v18[37] = v59;
          v18[38] = (void *)v60;
          v18[39] = (void *)v62;
          v18[40] = (void *)v61;
          v18[41] = (void *)v55;
          v18[42] = (void *)v64;
          v18[43] = (void *)v63;
          v18[44] = v65;
          v18[45] = (void *)v110;
          v18[46] = (void *)v111;
          v18[47] = (void *)v112;
          v18[48] = __dsta;
          v18[49] = (void *)v118;
        }
        uint64_t v66 = v19[51];
        if (v66 == (void *)1)
        {
          long long v67 = *((_OWORD *)v19 + 28);
          *((_OWORD *)v18 + 27) = *((_OWORD *)v19 + 27);
          *((_OWORD *)v18 + 28) = v67;
          *((unsigned char *)v18 + 464) = *((unsigned char *)v19 + 464);
          long long v68 = *((_OWORD *)v19 + 26);
          *((_OWORD *)v18 + 25) = *((_OWORD *)v19 + 25);
          *((_OWORD *)v18 + 26) = v68;
LABEL_34:
          uint64_t v74 = v19[60];
          v18[59] = v19[59];
          v18[60] = v74;
          v18[61] = v19[61];
          *((unsigned char *)v18 + 496) = *((unsigned char *)v19 + 496);
          uint64_t v75 = v19[63];
          swift_bridgeObjectRetain();
          if (v75)
          {
            uint64_t v76 = v19[64];
            v18[63] = v75;
            v18[64] = v76;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v18 + 63) = *(_OWORD *)(v19 + 63);
          }
          *((_WORD *)v18 + 260) = *((_WORD *)v19 + 260);
          uint64_t v77 = v19[66];
          if (v77)
          {
            v18[66] = v77;
            v18[67] = v19[67];
            v18[68] = v19[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v18 + 33) = *((_OWORD *)v19 + 33);
            v18[68] = v19[68];
          }
          id v78 = v19[69];
          if (v78 == (void *)1)
          {
            *(_OWORD *)(v18 + 69) = *(_OWORD *)(v19 + 69);
            v18[71] = v19[71];
          }
          else
          {
            v18[69] = v78;
            uint64_t v79 = v19[70];
            swift_retain();
            if (v79)
            {
              uint64_t v80 = v19[71];
              v18[70] = v79;
              v18[71] = v80;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v18 + 35) = *((_OWORD *)v19 + 35);
            }
          }
          uint64_t v81 = v19[72];
          v18[72] = v81;
          v18[73] = v19[73];
          v18[74] = v19[74];
          v18[75] = v19[75];
          v18[76] = v19[76];
          v18[77] = v19[77];
          v18[78] = v19[78];
          *((_WORD *)v18 + 316) = *((_WORD *)v19 + 316);
          *((unsigned char *)v18 + 634) = *((unsigned char *)v19 + 634);
          uint64_t v82 = v121[28];
          __dst = (char *)v18 + v82;
          uint64_t v83 = (char *)v19 + v82;
          uint64_t v84 = type metadata accessor for CommandOperation();
          uint64_t v113 = *(void *)(v84 - 8);
          uint64_t v119 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v113 + 48);
          id v85 = v81;
          char v86 = v83;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v119(v83, 1, v84))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(__dst, v83, *(void *)(*(void *)(v87 - 8) + 64));
            uint64_t v88 = v114;
            long long v6 = v115;
            uint64_t v89 = v121;
            uint64_t v13 = v122;
            uint64_t v25 = v123;
          }
          else
          {
            unsigned char *__dst = *v83;
            uint64_t v90 = *(int *)(v84 + 20);
            uint64_t v91 = v84;
            uint64_t v92 = &__dst[v90];
            uint64_t v93 = &v86[v90];
            uint64_t v120 = v86;
            uint64_t v94 = *(void *)&v86[v90];
            uint64_t v95 = *((void *)v93 + 1);
            char v96 = v93[16];
            outlined copy of Text.Storage(v94, v95, v96);
            *(void *)uint64_t v92 = v94;
            *((void *)v92 + 1) = v95;
            v92[16] = v96;
            *((void *)v92 + 3) = *((void *)v93 + 3);
            uint64_t v97 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v98 = &v92[v97];
            uint64_t v99 = &v93[v97];
            uint64_t v100 = type metadata accessor for UUID();
            uint64_t v101 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v100 - 8) + 16);
            swift_bridgeObjectRetain();
            v101(v98, v99, v100);
            uint64_t v102 = v91;
            uint64_t v103 = *(int *)(v91 + 24);
            uint64_t v104 = &__dst[v103];
            uint64_t v105 = &v120[v103];
            if (*v105)
            {
              uint64_t v106 = v105[1];
              *uint64_t v104 = *v105;
              v104[1] = v106;
              swift_retain();
            }
            else
            {
              *(_OWORD *)uint64_t v104 = *(_OWORD *)v105;
            }
            uint64_t v88 = v114;
            long long v6 = v115;
            uint64_t v89 = v121;
            uint64_t v13 = v122;
            uint64_t v25 = v123;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v113 + 56))(__dst, 0, 1, v102);
          }
          *((unsigned char *)v18 + v89[29]) = *((unsigned char *)v19 + v89[29]);
          *((unsigned char *)v18 + v89[30]) = *((unsigned char *)v19 + v89[30]);
          *((unsigned char *)v18 + v89[31]) = *((unsigned char *)v19 + v89[31]);
          *((unsigned char *)v18 + v89[32]) = *((unsigned char *)v19 + v89[32]);
          *(void **)((char *)v18 + v89[33]) = *(void **)((char *)v19 + v89[33]);
          uint64_t v107 = *(void (**)(void **, void, uint64_t, int *))(v88 + 56);
          swift_retain();
          v107(v18, 0, 1, v89);
          goto LABEL_52;
        }
        *((_DWORD *)v18 + 100) = *((_DWORD *)v19 + 100);
        *((unsigned char *)v18 + 404) = *((unsigned char *)v19 + 404);
        if (v66)
        {
          uint64_t v69 = v19[52];
          v18[51] = v66;
          v18[52] = v69;
          swift_retain();
          long long v70 = v19[53];
          if (v70) {
            goto LABEL_28;
          }
        }
        else
        {
          *(_OWORD *)(v18 + 51) = *(_OWORD *)(v19 + 51);
          long long v70 = v19[53];
          if (v70)
          {
LABEL_28:
            uint64_t v71 = v19[54];
            v18[53] = v70;
            v18[54] = v71;
            swift_retain();
            uint64_t v72 = v19[55];
            if (v72)
            {
LABEL_29:
              uint64_t v73 = v19[56];
              v18[55] = v72;
              v18[56] = v73;
              swift_retain();
LABEL_33:
              v18[57] = v19[57];
              *((unsigned char *)v18 + 464) = *((unsigned char *)v19 + 464);
              goto LABEL_34;
            }
LABEL_32:
            *(_OWORD *)(v18 + 55) = *(_OWORD *)(v19 + 55);
            goto LABEL_33;
          }
        }
        *(_OWORD *)(v18 + 53) = *(_OWORD *)(v19 + 53);
        uint64_t v72 = v19[55];
        if (v72) {
          goto LABEL_29;
        }
        goto LABEL_32;
      }
    }
    else
    {
      int v44 = *((unsigned __int8 *)v19 + 72);
      if (v44 == 255)
      {
        *(void *)long long v30 = *(void *)v31;
        *((unsigned char *)v18 + 72) = *((unsigned char *)v19 + 72);
      }
      else
      {
        long long v45 = v19[8];
        outlined copy of GraphicsImage.Contents(v45, *((unsigned char *)v19 + 72));
        v18[8] = v45;
        *((unsigned char *)v18 + 72) = v44;
        unint64_t v32 = (unint64_t)v19[23];
      }
      v18[10] = v19[10];
      *(_OWORD *)(v18 + 11) = *(_OWORD *)(v19 + 11);
      *((unsigned char *)v18 + 104) = *((unsigned char *)v19 + 104);
      *(_OWORD *)((char *)v18 + 108) = *(_OWORD *)((char *)v19 + 108);
      *((unsigned char *)v18 + 124) = *((unsigned char *)v19 + 124);
      long long v46 = *((_OWORD *)v19 + 9);
      *((_OWORD *)v18 + 8) = *((_OWORD *)v19 + 8);
      *((_OWORD *)v18 + 9) = v46;
      *((_WORD *)v18 + 80) = *((_WORD *)v19 + 80);
      *((unsigned char *)v18 + 162) = *((unsigned char *)v19 + 162);
      *((unsigned char *)v18 + 163) = *((unsigned char *)v19 + 163);
      if (v32 >> 1 == 0xFFFFFFFF)
      {
        long long v47 = *(_OWORD *)(v19 + 23);
        *(_OWORD *)(v18 + 21) = *(_OWORD *)(v19 + 21);
        *(_OWORD *)(v18 + 23) = v47;
      }
      else
      {
        uint64_t v48 = (uint64_t)v19[21];
        uint64_t v49 = (uint64_t)v19[22];
        uint64_t v50 = v19[24];
        outlined copy of AccessibilityImageLabel(v48, v49, v32);
        v18[21] = (void *)v48;
        v18[22] = (void *)v49;
        v18[23] = (void *)v32;
        v18[24] = v50;
      }
      uint64_t v51 = v19[26];
      v18[25] = v19[25];
      v18[26] = v51;
      *((_WORD *)v18 + 108) = *((_WORD *)v19 + 108);
      *((_DWORD *)v18 + 55) = *((_DWORD *)v19 + 55);
      *((unsigned char *)v18 + 224) = *((unsigned char *)v19 + 224);
      uint64_t v52 = v19[29];
      v18[29] = v52;
      *((_WORD *)v18 + 120) = *((_WORD *)v19 + 120);
      *((unsigned char *)v18 + 242) = *((unsigned char *)v19 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v53 = v52;
      uint64_t v40 = v19[32];
      if (v40) {
        goto LABEL_10;
      }
    }
    long long v54 = *(_OWORD *)(v19 + 33);
    *(_OWORD *)(v18 + 31) = *(_OWORD *)(v19 + 31);
    *(_OWORD *)(v18 + 33) = v54;
    *(_OWORD *)(v18 + 35) = *(_OWORD *)(v19 + 35);
    goto LABEL_21;
  }
  uint64_t v12 = *a2;
  *(void *)a1 = *a2;
  uint64_t v13 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return v13;
}

uint64_t assignWithCopy for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 48);
    if (*(unsigned char *)(a2 + 88) == 1)
    {
      uint64_t v6 = *(void *)(a2 + 72);
      *(void *)(a1 + 72) = v6;
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 48, a2 + 48);
      *(unsigned char *)(a1 + 88) = 1;
    }
    else
    {
      long long v7 = *(_OWORD *)(a2 + 48);
      long long v8 = *(_OWORD *)(a2 + 64);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_OWORD *)(a1 + 48) = v7;
      *(_OWORD *)(a1 + 64) = v8;
    }
  }
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(unsigned char *)(a1 + 90) = *(unsigned char *)(a2 + 90);
  *(unsigned char *)(a1 + 91) = *(unsigned char *)(a2 + 91);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 104), (uint64_t *)(a2 + 104));
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 156);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  long long v9 = *(void **)(a1 + 184);
  int v10 = *(void **)(a2 + 184);
  *(void *)(a1 + 184) = v10;
  id v11 = v10;

  uint64_t v12 = a3[12];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for PlatformItemList.Item();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (v19)
    {
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v13, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      goto LABEL_14;
    }
    uint64_t v40 = *(void **)v13;
    long long v41 = *(void **)v14;
    *(void *)uint64_t v13 = *(void *)v14;
    id v42 = v41;

    long long v43 = *(void **)(v13 + 8);
    int v44 = *(void **)(v14 + 8);
    *(void *)(v13 + 8) = v44;
    id v45 = v44;

    *(void *)(v13 + 16) = *(void *)(v14 + 16);
    *(void *)(v13 + 24) = *(void *)(v14 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
    *(void *)(v13 + 40) = *(void *)(v14 + 40);
    *(void *)(v13 + 48) = *(void *)(v14 + 48);
    swift_retain();
    swift_release();
    *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
    long long v46 = (_OWORD *)(v13 + 64);
    long long v47 = (id *)(v14 + 64);
    unint64_t v48 = *(void *)(v14 + 184) & 0xFFFFFFFFFFFFFFFELL;
    v355 = a3;
    if (*(void *)(v13 + 184) >> 1 == 4294967294)
    {
      if (v48 == 0x1FFFFFFFCLL)
      {
        long long v49 = *(_OWORD *)v47;
        long long v50 = *(_OWORD *)(v14 + 80);
        long long v51 = *(_OWORD *)(v14 + 112);
        *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
        *(_OWORD *)(v13 + 112) = v51;
        *long long v46 = v49;
        *(_OWORD *)(v13 + 80) = v50;
        long long v52 = *(_OWORD *)(v14 + 128);
        long long v53 = *(_OWORD *)(v14 + 144);
        long long v54 = *(_OWORD *)(v14 + 176);
        *(_OWORD *)(v13 + 160) = *(_OWORD *)(v14 + 160);
        *(_OWORD *)(v13 + 176) = v54;
        *(_OWORD *)(v13 + 128) = v52;
        *(_OWORD *)(v13 + 144) = v53;
        long long v55 = *(_OWORD *)(v14 + 192);
        long long v56 = *(_OWORD *)(v14 + 208);
        long long v57 = *(_OWORD *)(v14 + 224);
        *(_DWORD *)(v13 + 239) = *(_DWORD *)(v14 + 239);
        *(_OWORD *)(v13 + 208) = v56;
        *(_OWORD *)(v13 + 224) = v57;
        *(_OWORD *)(v13 + 192) = v55;
      }
      else
      {
        int v136 = *(unsigned __int8 *)(v14 + 72);
        if (v136 == 255)
        {
          id v143 = *v47;
          *(unsigned char *)(v13 + 72) = *(unsigned char *)(v14 + 72);
          *(void *)long long v46 = v143;
        }
        else
        {
          id v137 = *v47;
          outlined copy of GraphicsImage.Contents(*v47, *(unsigned char *)(v14 + 72));
          *(void *)(v13 + 64) = v137;
          *(unsigned char *)(v13 + 72) = v136;
        }
        *(void *)(v13 + 80) = *(void *)(v14 + 80);
        *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
        *(unsigned char *)(v13 + 104) = *(unsigned char *)(v14 + 104);
        long long v144 = *(_OWORD *)(v14 + 108);
        *(unsigned char *)(v13 + 124) = *(unsigned char *)(v14 + 124);
        *(_OWORD *)(v13 + 108) = v144;
        long long v145 = *(_OWORD *)(v14 + 128);
        long long v146 = *(_OWORD *)(v14 + 144);
        *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
        *(_OWORD *)(v13 + 128) = v145;
        *(_OWORD *)(v13 + 144) = v146;
        *(unsigned char *)(v13 + 161) = *(unsigned char *)(v14 + 161);
        *(unsigned char *)(v13 + 162) = *(unsigned char *)(v14 + 162);
        *(unsigned char *)(v13 + 163) = *(unsigned char *)(v14 + 163);
        unint64_t v147 = *(void *)(v14 + 184);
        if (v147 >> 1 == 0xFFFFFFFF)
        {
          long long v148 = *(_OWORD *)(v14 + 184);
          *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 168);
          *(_OWORD *)(v13 + 184) = v148;
        }
        else
        {
          uint64_t v149 = v15;
          uint64_t v150 = *(void *)(v14 + 168);
          uint64_t v151 = *(void *)(v14 + 176);
          uint64_t v152 = *(void *)(v14 + 192);
          outlined copy of AccessibilityImageLabel(v150, v151, *(void *)(v14 + 184));
          *(void *)(v13 + 168) = v150;
          *(void *)(v13 + 176) = v151;
          uint64_t v15 = v149;
          *(void *)(v13 + 184) = v147;
          *(void *)(v13 + 192) = v152;
        }
        *(void *)(v13 + 200) = *(void *)(v14 + 200);
        *(void *)(v13 + 208) = *(void *)(v14 + 208);
        *(unsigned char *)(v13 + 216) = *(unsigned char *)(v14 + 216);
        *(unsigned char *)(v13 + 217) = *(unsigned char *)(v14 + 217);
        int v153 = *(_DWORD *)(v14 + 220);
        *(unsigned char *)(v13 + 224) = *(unsigned char *)(v14 + 224);
        *(_DWORD *)(v13 + 220) = v153;
        uint64_t v154 = *(void **)(v14 + 232);
        *(void *)(v13 + 232) = v154;
        *(_WORD *)(v13 + 240) = *(_WORD *)(v14 + 240);
        *(unsigned char *)(v13 + 242) = *(unsigned char *)(v14 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        id v155 = v154;
      }
    }
    else if (v48 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(v13 + 64);
      long long v60 = *(_OWORD *)(v14 + 112);
      long long v62 = *(_OWORD *)v47;
      long long v61 = *(_OWORD *)(v14 + 80);
      *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
      *(_OWORD *)(v13 + 112) = v60;
      *long long v46 = v62;
      *(_OWORD *)(v13 + 80) = v61;
      long long v63 = *(_OWORD *)(v14 + 176);
      long long v65 = *(_OWORD *)(v14 + 128);
      long long v64 = *(_OWORD *)(v14 + 144);
      *(_OWORD *)(v13 + 160) = *(_OWORD *)(v14 + 160);
      *(_OWORD *)(v13 + 176) = v63;
      *(_OWORD *)(v13 + 128) = v65;
      *(_OWORD *)(v13 + 144) = v64;
      long long v67 = *(_OWORD *)(v14 + 208);
      long long v66 = *(_OWORD *)(v14 + 224);
      long long v68 = *(_OWORD *)(v14 + 192);
      *(_DWORD *)(v13 + 239) = *(_DWORD *)(v14 + 239);
      *(_OWORD *)(v13 + 208) = v67;
      *(_OWORD *)(v13 + 224) = v66;
      *(_OWORD *)(v13 + 192) = v68;
    }
    else
    {
      int v138 = *(unsigned __int8 *)(v14 + 72);
      if (*(unsigned __int8 *)(v13 + 72) == 255)
      {
        if (v138 == 255)
        {
          id v158 = *v47;
          *(unsigned char *)(v13 + 72) = *(unsigned char *)(v14 + 72);
          *(void *)long long v46 = v158;
        }
        else
        {
          id v156 = *v47;
          outlined copy of GraphicsImage.Contents(*v47, *(unsigned char *)(v14 + 72));
          *(void *)(v13 + 64) = v156;
          *(unsigned char *)(v13 + 72) = v138;
        }
      }
      else if (v138 == 255)
      {
        outlined destroy of GraphicsImage.Contents(v13 + 64);
        char v157 = *(unsigned char *)(v14 + 72);
        *(void *)long long v46 = *v47;
        *(unsigned char *)(v13 + 72) = v157;
      }
      else
      {
        id v139 = *v47;
        outlined copy of GraphicsImage.Contents(*v47, *(unsigned char *)(v14 + 72));
        id v140 = *(void **)(v13 + 64);
        *(void *)(v13 + 64) = v139;
        char v141 = *(unsigned char *)(v13 + 72);
        *(unsigned char *)(v13 + 72) = v138;
        outlined consume of GraphicsImage.Contents(v140, v141);
      }
      *(void *)(v13 + 80) = *(void *)(v14 + 80);
      *(void *)(v13 + 88) = *(void *)(v14 + 88);
      *(void *)(v13 + 96) = *(void *)(v14 + 96);
      *(unsigned char *)(v13 + 104) = *(unsigned char *)(v14 + 104);
      long long v159 = *(_OWORD *)(v14 + 108);
      *(unsigned char *)(v13 + 124) = *(unsigned char *)(v14 + 124);
      *(_OWORD *)(v13 + 108) = v159;
      long long v160 = *(_OWORD *)(v14 + 128);
      long long v161 = *(_OWORD *)(v14 + 144);
      *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
      *(_OWORD *)(v13 + 128) = v160;
      *(_OWORD *)(v13 + 144) = v161;
      *(unsigned char *)(v13 + 161) = *(unsigned char *)(v14 + 161);
      *(unsigned char *)(v13 + 162) = *(unsigned char *)(v14 + 162);
      *(unsigned char *)(v13 + 163) = *(unsigned char *)(v14 + 163);
      uint64_t v162 = (_OWORD *)(v13 + 168);
      uint64_t v163 = (_OWORD *)(v14 + 168);
      uint64_t v164 = *(void *)(v14 + 184);
      unint64_t v165 = v164 & 0xFFFFFFFFFFFFFFFELL;
      if (*(void *)(v13 + 184) >> 1 == 0xFFFFFFFFLL)
      {
        if (v165 == 0x1FFFFFFFELL)
        {
          long long v166 = *(_OWORD *)(v14 + 184);
          *uint64_t v162 = *v163;
          *(_OWORD *)(v13 + 184) = v166;
        }
        else
        {
          uint64_t v168 = v15;
          uint64_t v169 = *(void *)(v14 + 168);
          uint64_t v170 = *(void *)(v14 + 176);
          uint64_t v171 = *(void *)(v14 + 192);
          outlined copy of AccessibilityImageLabel(v169, v170, *(void *)(v14 + 184));
          *(void *)(v13 + 168) = v169;
          *(void *)(v13 + 176) = v170;
          uint64_t v15 = v168;
          *(void *)(v13 + 184) = v164;
          *(void *)(v13 + 192) = v171;
        }
      }
      else if (v165 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(v13 + 168);
        long long v167 = *(_OWORD *)(v14 + 184);
        *uint64_t v162 = *v163;
        *(_OWORD *)(v13 + 184) = v167;
      }
      else
      {
        uint64_t v172 = v15;
        uint64_t v173 = *(void *)(v14 + 168);
        uint64_t v174 = *(void *)(v14 + 176);
        uint64_t v175 = *(void *)(v14 + 192);
        outlined copy of AccessibilityImageLabel(v173, v174, *(void *)(v14 + 184));
        uint64_t v176 = *(void *)(v13 + 168);
        uint64_t v177 = *(void *)(v13 + 176);
        uint64_t v178 = *(void *)(v13 + 184);
        *(void *)(v13 + 168) = v173;
        *(void *)(v13 + 176) = v174;
        uint64_t v15 = v172;
        *(void *)(v13 + 184) = v164;
        *(void *)(v13 + 192) = v175;
        outlined consume of AccessibilityImageLabel(v176, v177, v178);
      }
      *(void *)(v13 + 200) = *(void *)(v14 + 200);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(v13 + 208) = *(void *)(v14 + 208);
      swift_retain();
      swift_release();
      *(unsigned char *)(v13 + 216) = *(unsigned char *)(v14 + 216);
      *(unsigned char *)(v13 + 217) = *(unsigned char *)(v14 + 217);
      int v179 = *(_DWORD *)(v14 + 220);
      *(unsigned char *)(v13 + 224) = *(unsigned char *)(v14 + 224);
      *(_DWORD *)(v13 + 220) = v179;
      id v180 = *(void **)(v13 + 232);
      uint64_t v181 = *(void **)(v14 + 232);
      *(void *)(v13 + 232) = v181;
      id v182 = v181;

      *(_WORD *)(v13 + 240) = *(_WORD *)(v14 + 240);
      *(unsigned char *)(v13 + 242) = *(unsigned char *)(v14 + 242);
    }
    uint64_t v183 = (long long *)(v13 + 248);
    v184 = (long long *)(v14 + 248);
    uint64_t v185 = *(void *)(v14 + 256);
    if (!*(void *)(v13 + 256))
    {
      if (v185)
      {
        *(void *)(v13 + 248) = *(void *)(v14 + 248);
        *(void *)(v13 + 256) = *(void *)(v14 + 256);
        char v189 = *(void **)(v14 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v189 >= 2) {
          id v190 = v189;
        }
        *(void *)(v13 + 264) = v189;
        int v191 = *(_DWORD *)(v14 + 272);
        *(unsigned char *)(v13 + 276) = *(unsigned char *)(v14 + 276);
        *(_DWORD *)(v13 + 272) = v191;
        *(unsigned char *)(v13 + 277) = *(unsigned char *)(v14 + 277);
        *(unsigned char *)(v13 + 278) = *(unsigned char *)(v14 + 278);
        *(void *)(v13 + 280) = *(void *)(v14 + 280);
        *(void *)(v13 + 288) = *(void *)(v14 + 288);
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v194 = *v184;
        long long v195 = *(_OWORD *)(v14 + 280);
        *(_OWORD *)(v13 + 264) = *(_OWORD *)(v14 + 264);
        *(_OWORD *)(v13 + 280) = v195;
        *uint64_t v183 = v194;
      }
LABEL_98:
      uint64_t v198 = (long long *)(v13 + 296);
      uint64_t v199 = (long long *)(v14 + 296);
      unint64_t v200 = *(void *)(v14 + 328);
      unint64_t v201 = v200 & 0xFFFFFFFFFFFFFFFCLL;
      v357 = (int *)v15;
      if (*(void *)(v13 + 328) >> 2 == 0xFFFFFFFFLL)
      {
        if (v201 == 0x3FFFFFFFCLL)
        {
          long long v202 = *v199;
          long long v203 = *(_OWORD *)(v14 + 328);
          *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
          *(_OWORD *)(v13 + 328) = v203;
          *uint64_t v198 = v202;
          long long v204 = *(_OWORD *)(v14 + 344);
          long long v205 = *(_OWORD *)(v14 + 360);
          long long v206 = *(_OWORD *)(v14 + 376);
          *(void *)(v13 + 392) = *(void *)(v14 + 392);
          *(_OWORD *)(v13 + 360) = v205;
          *(_OWORD *)(v13 + 376) = v206;
          *(_OWORD *)(v13 + 344) = v204;
        }
        else
        {
          uint64_t v212 = *(void *)(v14 + 304);
          uint64_t v323 = *(void *)(v14 + 320);
          uint64_t v327 = *(void *)(v14 + 312);
          uint64_t v214 = *(void *)(v14 + 336);
          uint64_t v213 = *(void *)(v14 + 344);
          uint64_t v215 = *(void *)(v14 + 352);
          uint64_t v330 = *(void *)(v14 + 360);
          uint64_t v335 = *(void *)(v14 + 368);
          uint64_t v340 = *(void *)(v14 + 376);
          __dstc = *(void **)(v14 + 384);
          __srcc = *(void **)(v14 + 392);
          uint64_t v216 = *(void **)(v14 + 296);
          outlined copy of PlatformItemList.Item.SystemItem(v216, v212, v327, v323, v200, v214, v213, v215, v330, v335, v340, (char)__dstc, (uint64_t)__srcc);
          *(void *)(v13 + 296) = v216;
          *(void *)(v13 + 304) = v212;
          uint64_t v15 = (uint64_t)v357;
          *(void *)(v13 + 312) = v327;
          *(void *)(v13 + 320) = v323;
          *(void *)(v13 + 328) = v200;
          *(void *)(v13 + 336) = v214;
          *(void *)(v13 + 344) = v213;
          *(void *)(v13 + 352) = v215;
          *(void *)(v13 + 360) = v330;
          *(void *)(v13 + 368) = v335;
          *(void *)(v13 + 376) = v340;
          *(void *)(v13 + 384) = __dstc;
          *(void *)(v13 + 392) = __srcc;
        }
      }
      else if (v201 == 0x3FFFFFFFCLL)
      {
        outlined destroy of PlatformItemList.Item.SystemItem(v13 + 296);
        long long v208 = *(_OWORD *)(v14 + 312);
        long long v207 = *(_OWORD *)(v14 + 328);
        *uint64_t v198 = *v199;
        *(_OWORD *)(v13 + 312) = v208;
        *(_OWORD *)(v13 + 328) = v207;
        long long v210 = *(_OWORD *)(v14 + 360);
        long long v209 = *(_OWORD *)(v14 + 376);
        long long v211 = *(_OWORD *)(v14 + 344);
        *(void *)(v13 + 392) = *(void *)(v14 + 392);
        *(_OWORD *)(v13 + 360) = v210;
        *(_OWORD *)(v13 + 376) = v209;
        *(_OWORD *)(v13 + 344) = v211;
      }
      else
      {
        v217 = *(void **)(v14 + 296);
        uint64_t v218 = *(void *)(v14 + 304);
        uint64_t v219 = *(void *)(v14 + 312);
        uint64_t v331 = *(void *)(v14 + 344);
        uint64_t v336 = *(void *)(v14 + 336);
        uint64_t v220 = *(void *)(v14 + 360);
        uint64_t v324 = *(void *)(v14 + 320);
        uint64_t v328 = *(void *)(v14 + 352);
        uint64_t v221 = *(void *)(v14 + 368);
        uint64_t v341 = *(void *)(v14 + 376);
        __dstd = *(void **)(v14 + 384);
        __srcd = *(void **)(v14 + 392);
        outlined copy of PlatformItemList.Item.SystemItem(v217, v218, v219, v324, v200, v336, v331, v328, v220, v221, v341, (char)__dstd, (uint64_t)__srcd);
        v222 = *(void **)(v13 + 296);
        uint64_t v223 = *(void *)(v13 + 304);
        uint64_t v224 = *(void *)(v13 + 312);
        uint64_t v225 = *(void *)(v13 + 320);
        unint64_t v226 = *(void *)(v13 + 328);
        uint64_t v227 = *(void *)(v13 + 336);
        uint64_t v228 = *(void *)(v13 + 344);
        uint64_t v229 = *(void *)(v13 + 352);
        long long v230 = *(_OWORD *)(v13 + 360);
        long long v231 = *(_OWORD *)(v13 + 376);
        uint64_t v232 = *(void *)(v13 + 392);
        *(void *)(v13 + 296) = v217;
        *(void *)(v13 + 304) = v218;
        uint64_t v15 = (uint64_t)v357;
        *(void *)(v13 + 312) = v219;
        *(void *)(v13 + 320) = v324;
        *(void *)(v13 + 328) = v200;
        *(void *)(v13 + 336) = v336;
        *(void *)(v13 + 344) = v331;
        *(void *)(v13 + 352) = v328;
        *(void *)(v13 + 360) = v220;
        *(void *)(v13 + 368) = v221;
        *(void *)(v13 + 376) = v341;
        *(void *)(v13 + 384) = __dstd;
        *(void *)(v13 + 392) = __srcd;
        outlined consume of PlatformItemList.Item.SystemItem(v222, v223, v224, v225, v226, v227, v228, v229, v230, *((uint64_t *)&v230 + 1), v231, SBYTE8(v231), v232);
      }
      v233 = (_OWORD *)(v13 + 400);
      v234 = (_OWORD *)(v14 + 400);
      v235 = (_OWORD *)(v13 + 408);
      uint64_t v236 = *(void *)(v13 + 408);
      v237 = (_OWORD *)(v14 + 408);
      uint64_t v238 = *(void *)(v14 + 408);
      if (v236 == 1)
      {
        if (v238 == 1)
        {
          _OWORD *v233 = *v234;
          long long v239 = *(_OWORD *)(v14 + 416);
          long long v240 = *(_OWORD *)(v14 + 432);
          long long v241 = *(_OWORD *)(v14 + 448);
          *(unsigned char *)(v13 + 464) = *(unsigned char *)(v14 + 464);
          *(_OWORD *)(v13 + 432) = v240;
          *(_OWORD *)(v13 + 448) = v241;
          *(_OWORD *)(v13 + 416) = v239;
          goto LABEL_140;
        }
        *(unsigned char *)(v13 + 400) = *(unsigned char *)(v14 + 400);
        *(unsigned char *)(v13 + 401) = *(unsigned char *)(v14 + 401);
        *(unsigned char *)(v13 + 402) = *(unsigned char *)(v14 + 402);
        *(unsigned char *)(v13 + 403) = *(unsigned char *)(v14 + 403);
        *(unsigned char *)(v13 + 404) = *(unsigned char *)(v14 + 404);
        uint64_t v245 = *(void *)(v14 + 408);
        if (v245)
        {
          uint64_t v246 = *(void *)(v14 + 416);
          *(void *)(v13 + 408) = v245;
          *(void *)(v13 + 416) = v246;
          swift_retain();
        }
        else
        {
          _OWORD *v235 = *v237;
        }
        uint64_t v249 = *(void *)(v14 + 424);
        if (v249)
        {
          uint64_t v250 = *(void *)(v14 + 432);
          *(void *)(v13 + 424) = v249;
          *(void *)(v13 + 432) = v250;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 424);
        }
        uint64_t v252 = *(void *)(v14 + 440);
        if (!v252)
        {
          *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 440);
LABEL_139:
          *(void *)(v13 + 456) = *(void *)(v14 + 456);
          *(unsigned char *)(v13 + 464) = *(unsigned char *)(v14 + 464);
LABEL_140:
          *(void *)(v13 + 472) = *(void *)(v14 + 472);
          *(void *)(v13 + 480) = *(void *)(v14 + 480);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v13 + 488) = *(void *)(v14 + 488);
          *(unsigned char *)(v13 + 496) = *(unsigned char *)(v14 + 496);
          uint64_t v258 = *(void *)(v14 + 504);
          if (*(void *)(v13 + 504))
          {
            if (v258)
            {
              uint64_t v259 = *(void *)(v14 + 512);
              *(void *)(v13 + 504) = v258;
              *(void *)(v13 + 512) = v259;
              swift_retain();
              swift_release();
              goto LABEL_147;
            }
            swift_release();
          }
          else if (v258)
          {
            uint64_t v260 = *(void *)(v14 + 512);
            *(void *)(v13 + 504) = v258;
            *(void *)(v13 + 512) = v260;
            swift_retain();
            goto LABEL_147;
          }
          *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 504);
LABEL_147:
          *(_WORD *)(v13 + 520) = *(_WORD *)(v14 + 520);
          v261 = (_OWORD *)(v13 + 528);
          v262 = (_OWORD *)(v14 + 528);
          uint64_t v263 = *(void *)(v14 + 528);
          if (*(void *)(v13 + 528))
          {
            if (v263)
            {
              *(void *)(v13 + 528) = v263;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(void *)(v13 + 536) = *(void *)(v14 + 536);
              swift_retain();
              swift_release();
              *(void *)(v13 + 544) = *(void *)(v14 + 544);
              swift_retain();
              swift_release();
            }
            else
            {
              outlined destroy of PlatformItemList.Item.Accessibility(v13 + 528);
              uint64_t v264 = *(void *)(v14 + 544);
              _OWORD *v261 = *v262;
              *(void *)(v13 + 544) = v264;
            }
          }
          else if (v263)
          {
            *(void *)(v13 + 528) = v263;
            *(void *)(v13 + 536) = *(void *)(v14 + 536);
            *(void *)(v13 + 544) = *(void *)(v14 + 544);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            long long v265 = *v262;
            *(void *)(v13 + 544) = *(void *)(v14 + 544);
            _OWORD *v261 = v265;
          }
          v266 = (long long *)(v13 + 552);
          v267 = (long long *)(v14 + 552);
          uint64_t v268 = *(void *)(v14 + 552);
          if (*(void *)(v13 + 552) == 1)
          {
            if (v268 == 1)
            {
              long long v269 = *v267;
              *(void *)(v13 + 568) = *(void *)(v14 + 568);
              long long *v266 = v269;
              goto LABEL_170;
            }
            *(void *)(v13 + 552) = v268;
            uint64_t v271 = *(void *)(v14 + 560);
            swift_retain();
            if (!v271)
            {
              *(_OWORD *)(v13 + 560) = *(_OWORD *)(v14 + 560);
              goto LABEL_170;
            }
            uint64_t v272 = *(void *)(v14 + 568);
            *(void *)(v13 + 560) = v271;
            goto LABEL_167;
          }
          if (v268 == 1)
          {
            outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v13 + 552);
            uint64_t v270 = *(void *)(v14 + 568);
            long long *v266 = *v267;
            *(void *)(v13 + 568) = v270;
            goto LABEL_170;
          }
          *(void *)(v13 + 552) = v268;
          swift_retain();
          swift_release();
          uint64_t v273 = *(void *)(v14 + 560);
          if (*(void *)(v13 + 560))
          {
            if (v273)
            {
              uint64_t v274 = *(void *)(v14 + 568);
              *(void *)(v13 + 560) = v273;
              *(void *)(v13 + 568) = v274;
              swift_retain();
              swift_release();
              goto LABEL_170;
            }
            swift_release();
          }
          else if (v273)
          {
            uint64_t v272 = *(void *)(v14 + 568);
            *(void *)(v13 + 560) = v273;
LABEL_167:
            *(void *)(v13 + 568) = v272;
            swift_retain();
            goto LABEL_170;
          }
          *(_OWORD *)(v13 + 560) = *(_OWORD *)(v14 + 560);
LABEL_170:
          v275 = *(void **)(v13 + 576);
          v276 = *(void **)(v14 + 576);
          *(void *)(v13 + 576) = v276;
          id v277 = v276;

          *(void *)(v13 + 584) = *(void *)(v14 + 584);
          *(void *)(v13 + 592) = *(void *)(v14 + 592);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v13 + 600) = *(void *)(v14 + 600);
          *(void *)(v13 + 608) = *(void *)(v14 + 608);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v13 + 616) = *(void *)(v14 + 616);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v13 + 624) = *(void *)(v14 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(unsigned char *)(v13 + 632) = *(unsigned char *)(v14 + 632);
          *(unsigned char *)(v13 + 633) = *(unsigned char *)(v14 + 633);
          *(unsigned char *)(v13 + 634) = *(unsigned char *)(v14 + 634);
          uint64_t v278 = *(int *)(v15 + 112);
          v279 = (unsigned char *)(v13 + v278);
          v280 = (unsigned char *)(v14 + v278);
          uint64_t v281 = type metadata accessor for CommandOperation();
          __dsta = *(void **)(v281 - 8);
          v282 = (uint64_t (*)(unsigned char *, uint64_t, uint64_t))__dsta[6];
          v283 = v279;
          LODWORD(v279) = v282(v279, 1, v281);
          __srca = v280;
          int v284 = v282(v280, 1, v281);
          if (v279)
          {
            if (!v284)
            {
              unsigned char *v283 = *v280;
              uint64_t v285 = *(int *)(v281 + 20);
              v342 = v283;
              v286 = &v283[v285];
              v287 = &__srca[v285];
              uint64_t v288 = *(void *)&__srca[v285];
              uint64_t v289 = *(void *)&__srca[v285 + 8];
              char v290 = __srca[v285 + 16];
              outlined copy of Text.Storage(v288, v289, v290);
              *(void *)v286 = v288;
              *((void *)v286 + 1) = v289;
              v286[16] = v290;
              *((void *)v286 + 3) = *((void *)v287 + 3);
              uint64_t v291 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v332 = &v287[v291];
              v337 = &v286[v291];
              uint64_t v292 = type metadata accessor for UUID();
              v293 = *(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v292 - 8) + 16);
              swift_bridgeObjectRetain();
              v293(v337, v332, v292);
              uint64_t v294 = *(int *)(v281 + 24);
              v295 = &v342[v294];
              v296 = &__srca[v294];
              if (*v296)
              {
                uint64_t v297 = v296[1];
                void *v295 = *v296;
                v295[1] = v297;
                swift_retain();
              }
              else
              {
                *(_OWORD *)v295 = *(_OWORD *)v296;
              }
              a3 = v355;
              ((void (*)(unsigned char *, void, uint64_t, uint64_t))__dsta[7])(v342, 0, 1, v281);
              goto LABEL_182;
            }
          }
          else
          {
            if (!v284)
            {
              v343 = v283;
              unsigned char *v283 = *v280;
              uint64_t v299 = *(int *)(v281 + 20);
              v300 = &v283[v299];
              v301 = &__srca[v299];
              uint64_t v302 = *(void *)&__srca[v299];
              uint64_t v303 = *(void *)&__srca[v299 + 8];
              char v304 = __srca[v299 + 16];
              outlined copy of Text.Storage(v302, v303, v304);
              uint64_t v305 = *(void *)v300;
              uint64_t v306 = *((void *)v300 + 1);
              char v307 = v300[16];
              *(void *)v300 = v302;
              *((void *)v300 + 1) = v303;
              v300[16] = v304;
              outlined consume of Text.Storage(v305, v306, v307);
              *((void *)v300 + 3) = *((void *)v301 + 3);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v308 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              v309 = &v300[v308];
              v310 = &v301[v308];
              uint64_t v311 = type metadata accessor for UUID();
              (*(void (**)(unsigned char *, char *, uint64_t))(*(void *)(v311 - 8) + 24))(v309, v310, v311);
              uint64_t v312 = *(int *)(v281 + 24);
              v313 = &v343[v312];
              v314 = &__srca[v312];
              uint64_t v315 = *(void *)&v343[v312];
              uint64_t v316 = *(void *)&__srca[v312];
              if (v315)
              {
                a3 = v355;
                v317 = v357;
                if (v316)
                {
                  uint64_t v318 = *((void *)v314 + 1);
                  void *v313 = v316;
                  v313[1] = v318;
                  swift_retain();
                  swift_release();
LABEL_183:
                  *(unsigned char *)(v13 + v317[29]) = *(unsigned char *)(v14 + v317[29]);
                  *(unsigned char *)(v13 + v317[30]) = *(unsigned char *)(v14 + v317[30]);
                  *(unsigned char *)(v13 + v317[31]) = *(unsigned char *)(v14 + v317[31]);
                  *(unsigned char *)(v13 + v317[32]) = *(unsigned char *)(v14 + v317[32]);
                  *(void *)(v13 + v317[33]) = *(void *)(v14 + v317[33]);
                  swift_retain();
                  swift_release();
                  goto LABEL_184;
                }
                swift_release();
              }
              else
              {
                a3 = v355;
                v317 = v357;
                if (v316)
                {
                  uint64_t v320 = *((void *)v314 + 1);
                  void *v313 = v316;
                  v313[1] = v320;
                  swift_retain();
                  goto LABEL_183;
                }
              }
              *(_OWORD *)v313 = *(_OWORD *)v314;
              goto LABEL_183;
            }
            outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v283, (uint64_t (*)(void))type metadata accessor for CommandOperation);
          }
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v283, v280, *(void *)(*(void *)(v298 - 8) + 64));
          a3 = v355;
LABEL_182:
          v317 = v357;
          goto LABEL_183;
        }
LABEL_136:
        uint64_t v257 = *(void *)(v14 + 448);
        *(void *)(v13 + 440) = v252;
        *(void *)(v13 + 448) = v257;
        swift_retain();
        goto LABEL_139;
      }
      if (v238 == 1)
      {
        outlined destroy of PlatformItemList.Item.SelectionBehavior(v13 + 400);
        _OWORD *v233 = *v234;
        long long v243 = *(_OWORD *)(v14 + 432);
        long long v242 = *(_OWORD *)(v14 + 448);
        long long v244 = *(_OWORD *)(v14 + 416);
        *(unsigned char *)(v13 + 464) = *(unsigned char *)(v14 + 464);
        *(_OWORD *)(v13 + 432) = v243;
        *(_OWORD *)(v13 + 448) = v242;
        *(_OWORD *)(v13 + 416) = v244;
        goto LABEL_140;
      }
      *(unsigned char *)(v13 + 400) = *(unsigned char *)v234;
      *(unsigned char *)(v13 + 401) = *(unsigned char *)(v14 + 401);
      *(unsigned char *)(v13 + 402) = *(unsigned char *)(v14 + 402);
      *(unsigned char *)(v13 + 403) = *(unsigned char *)(v14 + 403);
      *(unsigned char *)(v13 + 404) = *(unsigned char *)(v14 + 404);
      uint64_t v247 = *(void *)(v14 + 408);
      if (v236)
      {
        if (v247)
        {
          uint64_t v248 = *(void *)(v14 + 416);
          *(void *)(v13 + 408) = v247;
          *(void *)(v13 + 416) = v248;
          swift_retain();
          swift_release();
          goto LABEL_125;
        }
        swift_release();
      }
      else if (v247)
      {
        uint64_t v251 = *(void *)(v14 + 416);
        *(void *)(v13 + 408) = v247;
        *(void *)(v13 + 416) = v251;
        swift_retain();
        goto LABEL_125;
      }
      _OWORD *v235 = *v237;
LABEL_125:
      uint64_t v253 = *(void *)(v14 + 424);
      if (*(void *)(v13 + 424))
      {
        if (v253)
        {
          uint64_t v254 = *(void *)(v14 + 432);
          *(void *)(v13 + 424) = v253;
          *(void *)(v13 + 432) = v254;
          swift_retain();
          swift_release();
          goto LABEL_132;
        }
        swift_release();
      }
      else if (v253)
      {
        uint64_t v255 = *(void *)(v14 + 432);
        *(void *)(v13 + 424) = v253;
        *(void *)(v13 + 432) = v255;
        swift_retain();
        goto LABEL_132;
      }
      *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 424);
LABEL_132:
      uint64_t v252 = *(void *)(v14 + 440);
      if (*(void *)(v13 + 440))
      {
        if (v252)
        {
          uint64_t v256 = *(void *)(v14 + 448);
          *(void *)(v13 + 440) = v252;
          *(void *)(v13 + 448) = v256;
          swift_retain();
          swift_release();
          goto LABEL_139;
        }
        swift_release();
      }
      else if (v252)
      {
        goto LABEL_136;
      }
      *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 440);
      goto LABEL_139;
    }
    if (!v185)
    {
      outlined destroy of Image.NamedResolved(v13 + 248);
      long long v193 = *(_OWORD *)(v14 + 264);
      long long v192 = *(_OWORD *)(v14 + 280);
      *uint64_t v183 = *v184;
      *(_OWORD *)(v13 + 264) = v193;
      *(_OWORD *)(v13 + 280) = v192;
      goto LABEL_98;
    }
    *(void *)(v13 + 248) = *(void *)(v14 + 248);
    *(void *)(v13 + 256) = *(void *)(v14 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v186 = *(void **)(v13 + 264);
    uint64_t v187 = *(void **)(v14 + 264);
    if ((unint64_t)v186 >= 2)
    {
      if ((unint64_t)v187 >= 2)
      {
        *(void *)(v13 + 264) = v187;
        id v196 = v187;

        goto LABEL_97;
      }

      uint64_t v187 = *(void **)(v14 + 264);
    }
    else if ((unint64_t)v187 >= 2)
    {
      *(void *)(v13 + 264) = v187;
      id v188 = v187;
LABEL_97:
      int v197 = *(_DWORD *)(v14 + 272);
      *(unsigned char *)(v13 + 276) = *(unsigned char *)(v14 + 276);
      *(_DWORD *)(v13 + 272) = v197;
      *(unsigned char *)(v13 + 277) = *(unsigned char *)(v14 + 277);
      *(unsigned char *)(v13 + 278) = *(unsigned char *)(v14 + 278);
      *(void *)(v13 + 280) = *(void *)(v14 + 280);
      swift_retain();
      swift_release();
      *(void *)(v13 + 288) = *(void *)(v14 + 288);
      swift_retain();
      swift_release();
      goto LABEL_98;
    }
    *(void *)(v13 + 264) = v187;
    goto LABEL_97;
  }
  if (v19)
  {
LABEL_14:
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy((void *)v13, (const void *)v14, *(void *)(*(void *)(v39 - 8) + 64));
    goto LABEL_184;
  }
  uint64_t v329 = v16;
  v354 = a3;
  v356 = (int *)v15;
  uint64_t v20 = *(void **)v14;
  *(void *)uint64_t v13 = *(void *)v14;
  uint64_t v21 = *(void **)(v14 + 8);
  *(void *)(v13 + 8) = v21;
  *(void *)(v13 + 16) = *(void *)(v14 + 16);
  *(void *)(v13 + 24) = *(void *)(v14 + 24);
  *(unsigned char *)(v13 + 32) = *(unsigned char *)(v14 + 32);
  *(void *)(v13 + 40) = *(void *)(v14 + 40);
  *(void *)(v13 + 48) = *(void *)(v14 + 48);
  *(unsigned char *)(v13 + 56) = *(unsigned char *)(v14 + 56);
  uint64_t v22 = (void *)(v13 + 64);
  id v23 = (id *)(v14 + 64);
  unint64_t v24 = *(void *)(v14 + 184);
  id v25 = v20;
  id v26 = v21;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v24 >> 1 != 4294967294)
  {
    int v58 = *(unsigned __int8 *)(v14 + 72);
    if (v58 == 255)
    {
      id v69 = *v23;
      *(unsigned char *)(v13 + 72) = *(unsigned char *)(v14 + 72);
      *uint64_t v22 = v69;
    }
    else
    {
      id v59 = *v23;
      outlined copy of GraphicsImage.Contents(*v23, *(unsigned char *)(v14 + 72));
      *(void *)(v13 + 64) = v59;
      *(unsigned char *)(v13 + 72) = v58;
    }
    *(void *)(v13 + 80) = *(void *)(v14 + 80);
    *(_OWORD *)(v13 + 88) = *(_OWORD *)(v14 + 88);
    *(unsigned char *)(v13 + 104) = *(unsigned char *)(v14 + 104);
    long long v70 = *(_OWORD *)(v14 + 108);
    *(unsigned char *)(v13 + 124) = *(unsigned char *)(v14 + 124);
    *(_OWORD *)(v13 + 108) = v70;
    long long v71 = *(_OWORD *)(v14 + 128);
    long long v72 = *(_OWORD *)(v14 + 144);
    *(unsigned char *)(v13 + 160) = *(unsigned char *)(v14 + 160);
    *(_OWORD *)(v13 + 128) = v71;
    *(_OWORD *)(v13 + 144) = v72;
    *(unsigned char *)(v13 + 161) = *(unsigned char *)(v14 + 161);
    *(unsigned char *)(v13 + 162) = *(unsigned char *)(v14 + 162);
    *(unsigned char *)(v13 + 163) = *(unsigned char *)(v14 + 163);
    unint64_t v73 = *(void *)(v14 + 184);
    if (v73 >> 1 == 0xFFFFFFFF)
    {
      long long v74 = *(_OWORD *)(v14 + 184);
      *(_OWORD *)(v13 + 168) = *(_OWORD *)(v14 + 168);
      *(_OWORD *)(v13 + 184) = v74;
    }
    else
    {
      uint64_t v75 = *(void *)(v14 + 168);
      uint64_t v76 = *(void *)(v14 + 176);
      uint64_t v77 = *(void *)(v14 + 192);
      outlined copy of AccessibilityImageLabel(v75, v76, *(void *)(v14 + 184));
      *(void *)(v13 + 168) = v75;
      *(void *)(v13 + 176) = v76;
      *(void *)(v13 + 184) = v73;
      *(void *)(v13 + 192) = v77;
    }
    *(void *)(v13 + 200) = *(void *)(v14 + 200);
    *(void *)(v13 + 208) = *(void *)(v14 + 208);
    *(unsigned char *)(v13 + 216) = *(unsigned char *)(v14 + 216);
    *(unsigned char *)(v13 + 217) = *(unsigned char *)(v14 + 217);
    int v78 = *(_DWORD *)(v14 + 220);
    *(unsigned char *)(v13 + 224) = *(unsigned char *)(v14 + 224);
    *(_DWORD *)(v13 + 220) = v78;
    uint64_t v79 = *(void **)(v14 + 232);
    *(void *)(v13 + 232) = v79;
    *(_WORD *)(v13 + 240) = *(_WORD *)(v14 + 240);
    *(unsigned char *)(v13 + 242) = *(unsigned char *)(v14 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v80 = v79;
    if (*(void *)(v14 + 256)) {
      goto LABEL_9;
    }
LABEL_27:
    long long v81 = *(_OWORD *)(v14 + 248);
    long long v82 = *(_OWORD *)(v14 + 280);
    *(_OWORD *)(v13 + 264) = *(_OWORD *)(v14 + 264);
    *(_OWORD *)(v13 + 280) = v82;
    *(_OWORD *)(v13 + 248) = v81;
    goto LABEL_28;
  }
  long long v27 = *(_OWORD *)v23;
  long long v28 = *(_OWORD *)(v14 + 80);
  long long v29 = *(_OWORD *)(v14 + 112);
  *(_OWORD *)(v13 + 96) = *(_OWORD *)(v14 + 96);
  *(_OWORD *)(v13 + 112) = v29;
  *(_OWORD *)uint64_t v22 = v27;
  *(_OWORD *)(v13 + 80) = v28;
  long long v30 = *(_OWORD *)(v14 + 128);
  long long v31 = *(_OWORD *)(v14 + 144);
  long long v32 = *(_OWORD *)(v14 + 176);
  *(_OWORD *)(v13 + 160) = *(_OWORD *)(v14 + 160);
  *(_OWORD *)(v13 + 176) = v32;
  *(_OWORD *)(v13 + 128) = v30;
  *(_OWORD *)(v13 + 144) = v31;
  long long v33 = *(_OWORD *)(v14 + 192);
  long long v34 = *(_OWORD *)(v14 + 208);
  long long v35 = *(_OWORD *)(v14 + 224);
  *(_DWORD *)(v13 + 239) = *(_DWORD *)(v14 + 239);
  *(_OWORD *)(v13 + 208) = v34;
  *(_OWORD *)(v13 + 224) = v35;
  *(_OWORD *)(v13 + 192) = v33;
  if (!*(void *)(v14 + 256)) {
    goto LABEL_27;
  }
LABEL_9:
  *(void *)(v13 + 248) = *(void *)(v14 + 248);
  *(void *)(v13 + 256) = *(void *)(v14 + 256);
  long long v36 = *(void **)(v14 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v36 >= 2) {
    id v37 = v36;
  }
  *(void *)(v13 + 264) = v36;
  int v38 = *(_DWORD *)(v14 + 272);
  *(unsigned char *)(v13 + 276) = *(unsigned char *)(v14 + 276);
  *(_DWORD *)(v13 + 272) = v38;
  *(unsigned char *)(v13 + 277) = *(unsigned char *)(v14 + 277);
  *(unsigned char *)(v13 + 278) = *(unsigned char *)(v14 + 278);
  *(void *)(v13 + 280) = *(void *)(v14 + 280);
  *(void *)(v13 + 288) = *(void *)(v14 + 288);
  swift_retain();
  swift_retain();
LABEL_28:
  unint64_t v83 = *(void *)(v14 + 328);
  if (v83 >> 2 == 0xFFFFFFFF)
  {
    long long v84 = *(_OWORD *)(v14 + 296);
    long long v85 = *(_OWORD *)(v14 + 328);
    *(_OWORD *)(v13 + 312) = *(_OWORD *)(v14 + 312);
    *(_OWORD *)(v13 + 328) = v85;
    *(_OWORD *)(v13 + 296) = v84;
    long long v86 = *(_OWORD *)(v14 + 344);
    long long v87 = *(_OWORD *)(v14 + 360);
    long long v88 = *(_OWORD *)(v14 + 376);
    *(void *)(v13 + 392) = *(void *)(v14 + 392);
    *(_OWORD *)(v13 + 360) = v87;
    *(_OWORD *)(v13 + 376) = v88;
    *(_OWORD *)(v13 + 344) = v86;
  }
  else
  {
    uint64_t v89 = *(void **)(v14 + 296);
    uint64_t v90 = *(void *)(v14 + 304);
    uint64_t v321 = *(void *)(v14 + 320);
    uint64_t v322 = *(void *)(v14 + 312);
    uint64_t v91 = *(void *)(v14 + 336);
    uint64_t v92 = *(void *)(v14 + 344);
    uint64_t v93 = *(void *)(v14 + 352);
    uint64_t v325 = *(void *)(v14 + 360);
    uint64_t v333 = *(void *)(v14 + 368);
    uint64_t v338 = *(void *)(v14 + 376);
    __dstb = *(void **)(v14 + 384);
    __srcb = *(void **)(v14 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v89, v90, v322, v321, v83, v91, v92, v93, v325, v333, v338, (char)__dstb, (uint64_t)__srcb);
    *(void *)(v13 + 296) = v89;
    *(void *)(v13 + 304) = v90;
    *(void *)(v13 + 312) = v322;
    *(void *)(v13 + 320) = v321;
    *(void *)(v13 + 328) = v83;
    *(void *)(v13 + 336) = v91;
    *(void *)(v13 + 344) = v92;
    *(void *)(v13 + 352) = v93;
    *(void *)(v13 + 360) = v325;
    *(void *)(v13 + 368) = v333;
    *(void *)(v13 + 376) = v338;
    *(void *)(v13 + 384) = __dstb;
    *(void *)(v13 + 392) = __srcb;
  }
  if (*(void *)(v14 + 408) == 1)
  {
    *(_OWORD *)(v13 + 400) = *(_OWORD *)(v14 + 400);
    long long v94 = *(_OWORD *)(v14 + 416);
    long long v95 = *(_OWORD *)(v14 + 432);
    long long v96 = *(_OWORD *)(v14 + 448);
    *(unsigned char *)(v13 + 464) = *(unsigned char *)(v14 + 464);
    *(_OWORD *)(v13 + 432) = v95;
    *(_OWORD *)(v13 + 448) = v96;
    *(_OWORD *)(v13 + 416) = v94;
    goto LABEL_41;
  }
  *(unsigned char *)(v13 + 400) = *(unsigned char *)(v14 + 400);
  *(unsigned char *)(v13 + 401) = *(unsigned char *)(v14 + 401);
  *(unsigned char *)(v13 + 402) = *(unsigned char *)(v14 + 402);
  *(unsigned char *)(v13 + 403) = *(unsigned char *)(v14 + 403);
  *(unsigned char *)(v13 + 404) = *(unsigned char *)(v14 + 404);
  uint64_t v97 = *(void *)(v14 + 408);
  if (v97)
  {
    uint64_t v98 = *(void *)(v14 + 416);
    *(void *)(v13 + 408) = v97;
    *(void *)(v13 + 416) = v98;
    swift_retain();
    uint64_t v99 = *(void *)(v14 + 424);
    if (v99) {
      goto LABEL_35;
    }
LABEL_38:
    *(_OWORD *)(v13 + 424) = *(_OWORD *)(v14 + 424);
    uint64_t v101 = *(void *)(v14 + 440);
    if (v101) {
      goto LABEL_36;
    }
LABEL_39:
    *(_OWORD *)(v13 + 440) = *(_OWORD *)(v14 + 440);
    goto LABEL_40;
  }
  *(_OWORD *)(v13 + 408) = *(_OWORD *)(v14 + 408);
  uint64_t v99 = *(void *)(v14 + 424);
  if (!v99) {
    goto LABEL_38;
  }
LABEL_35:
  uint64_t v100 = *(void *)(v14 + 432);
  *(void *)(v13 + 424) = v99;
  *(void *)(v13 + 432) = v100;
  swift_retain();
  uint64_t v101 = *(void *)(v14 + 440);
  if (!v101) {
    goto LABEL_39;
  }
LABEL_36:
  uint64_t v102 = *(void *)(v14 + 448);
  *(void *)(v13 + 440) = v101;
  *(void *)(v13 + 448) = v102;
  swift_retain();
LABEL_40:
  *(void *)(v13 + 456) = *(void *)(v14 + 456);
  *(unsigned char *)(v13 + 464) = *(unsigned char *)(v14 + 464);
LABEL_41:
  *(void *)(v13 + 472) = *(void *)(v14 + 472);
  *(void *)(v13 + 480) = *(void *)(v14 + 480);
  *(void *)(v13 + 488) = *(void *)(v14 + 488);
  *(unsigned char *)(v13 + 496) = *(unsigned char *)(v14 + 496);
  uint64_t v103 = *(void *)(v14 + 504);
  swift_bridgeObjectRetain();
  if (v103)
  {
    uint64_t v104 = *(void *)(v14 + 512);
    *(void *)(v13 + 504) = v103;
    *(void *)(v13 + 512) = v104;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v13 + 504) = *(_OWORD *)(v14 + 504);
  }
  *(_WORD *)(v13 + 520) = *(_WORD *)(v14 + 520);
  uint64_t v105 = *(void *)(v14 + 528);
  if (v105)
  {
    *(void *)(v13 + 528) = v105;
    *(void *)(v13 + 536) = *(void *)(v14 + 536);
    *(void *)(v13 + 544) = *(void *)(v14 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v106 = *(_OWORD *)(v14 + 528);
    *(void *)(v13 + 544) = *(void *)(v14 + 544);
    *(_OWORD *)(v13 + 528) = v106;
  }
  uint64_t v107 = *(void *)(v14 + 552);
  if (v107 == 1)
  {
    uint64_t v108 = (_OWORD *)(v13 + 552);
    long long v109 = *(_OWORD *)(v14 + 552);
    *(void *)(v13 + 568) = *(void *)(v14 + 568);
LABEL_52:
    *uint64_t v108 = v109;
    goto LABEL_53;
  }
  *(void *)(v13 + 552) = v107;
  uint64_t v110 = *(void *)(v14 + 560);
  swift_retain();
  if (!v110)
  {
    uint64_t v108 = (_OWORD *)(v13 + 560);
    long long v109 = *(_OWORD *)(v14 + 560);
    goto LABEL_52;
  }
  uint64_t v111 = *(void *)(v14 + 568);
  *(void *)(v13 + 560) = v110;
  *(void *)(v13 + 568) = v111;
  swift_retain();
LABEL_53:
  uint64_t v112 = *(void **)(v14 + 576);
  *(void *)(v13 + 576) = v112;
  *(void *)(v13 + 584) = *(void *)(v14 + 584);
  *(void *)(v13 + 592) = *(void *)(v14 + 592);
  *(void *)(v13 + 600) = *(void *)(v14 + 600);
  *(void *)(v13 + 608) = *(void *)(v14 + 608);
  *(void *)(v13 + 616) = *(void *)(v14 + 616);
  *(void *)(v13 + 624) = *(void *)(v14 + 624);
  *(unsigned char *)(v13 + 632) = *(unsigned char *)(v14 + 632);
  *(unsigned char *)(v13 + 633) = *(unsigned char *)(v14 + 633);
  *(unsigned char *)(v13 + 634) = *(unsigned char *)(v14 + 634);
  uint64_t v113 = v356[28];
  __dst = (unsigned char *)(v13 + v113);
  __src = (unsigned char *)(v14 + v113);
  uint64_t v114 = type metadata accessor for CommandOperation();
  uint64_t v326 = *(void *)(v114 - 8);
  v334 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v326 + 48);
  id v115 = v112;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v334(__src, 1, v114))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, __src, *(void *)(*(void *)(v116 - 8) + 64));
    a3 = v354;
    uint64_t v117 = v356;
    uint64_t v118 = v329;
  }
  else
  {
    unsigned char *__dst = *__src;
    uint64_t v119 = *(int *)(v114 + 20);
    uint64_t v120 = &__dst[v119];
    uint64_t v121 = &__src[v119];
    uint64_t v122 = *(void *)&__src[v119];
    uint64_t v123 = *(void *)&__src[v119 + 8];
    char v124 = __src[v119 + 16];
    outlined copy of Text.Storage(v122, *((void *)v121 + 1), v121[16]);
    *(void *)uint64_t v120 = v122;
    *((void *)v120 + 1) = v123;
    v120[16] = v124;
    *((void *)v120 + 3) = *((void *)v121 + 3);
    uint64_t v125 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    v339 = &v120[v125];
    int v126 = &v121[v125];
    uint64_t v127 = v114;
    uint64_t v128 = type metadata accessor for UUID();
    id v129 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v128 - 8) + 16);
    swift_bridgeObjectRetain();
    uint64_t v130 = v128;
    uint64_t v131 = v127;
    v129(v339, v126, v130);
    uint64_t v132 = *(int *)(v127 + 24);
    unint64_t v133 = &__dst[v132];
    long long v134 = &__src[v132];
    if (*v134)
    {
      uint64_t v135 = v134[1];
      *unint64_t v133 = *v134;
      v133[1] = v135;
      swift_retain();
    }
    else
    {
      *(_OWORD *)unint64_t v133 = *(_OWORD *)v134;
    }
    a3 = v354;
    uint64_t v117 = v356;
    uint64_t v118 = v329;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v326 + 56))(__dst, 0, 1, v131);
  }
  *(unsigned char *)(v13 + v117[29]) = *(unsigned char *)(v14 + v117[29]);
  *(unsigned char *)(v13 + v117[30]) = *(unsigned char *)(v14 + v117[30]);
  *(unsigned char *)(v13 + v117[31]) = *(unsigned char *)(v14 + v117[31]);
  *(unsigned char *)(v13 + v117[32]) = *(unsigned char *)(v14 + v117[32]);
  *(void *)(v13 + v117[33]) = *(void *)(v14 + v117[33]);
  id v142 = *(void (**)(uint64_t, void, uint64_t, int *))(v118 + 56);
  swift_retain();
  v142(v13, 0, 1, v117);
LABEL_184:
  swift_weakCopyAssign();
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + a3[15]) = *(unsigned char *)(a2 + a3[15]);
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.Item(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRelease();
  if (a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 48);
    long long v7 = *(_OWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 64) = v7;
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
  }
  *(unsigned char *)(a1 + 89) = *(unsigned char *)(a2 + 89);
  *(_WORD *)(a1 + 90) = *(_WORD *)(a2 + 90);
  *(unsigned char *)(a1 + 92) = *(unsigned char *)(a2 + 92);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  __swift_destroy_boxed_opaque_existential_1(a1 + 104);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v8;
  swift_release();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  long long v9 = *(void **)(a1 + 184);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);

  uint64_t v10 = a3[12];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for PlatformItemList.Item();
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  int v16 = v15(v11, 1, v13);
  int v17 = v15(v12, 1, v13);
  if (!v16)
  {
    if (v17)
    {
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v11, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      goto LABEL_9;
    }
    long long v34 = *(void **)v11;
    *(void *)uint64_t v11 = *(void *)v12;

    long long v35 = *(void **)(v11 + 8);
    *(void *)(v11 + 8) = *(void *)(v12 + 8);

    uint64_t v36 = *(void *)(v12 + 24);
    *(void *)(v11 + 16) = *(void *)(v12 + 16);
    *(void *)(v11 + 24) = v36;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
    uint64_t v37 = *(void *)(v12 + 48);
    *(void *)(v11 + 40) = *(void *)(v12 + 40);
    *(void *)(v11 + 48) = v37;
    swift_release();
    *(unsigned char *)(v11 + 56) = *(unsigned char *)(v12 + 56);
    int v38 = (_OWORD *)(v11 + 64);
    uint64_t v39 = (_OWORD *)(v12 + 64);
    if (*(void *)(v11 + 184) >> 1 == 4294967294) {
      goto LABEL_13;
    }
    if (*(void *)(v12 + 184) >> 1 == 4294967294)
    {
      outlined destroy of Image.Resolved(v11 + 64);
LABEL_13:
      long long v40 = *(_OWORD *)(v12 + 208);
      *(_OWORD *)(v11 + 192) = *(_OWORD *)(v12 + 192);
      *(_OWORD *)(v11 + 208) = v40;
      *(_OWORD *)(v11 + 224) = *(_OWORD *)(v12 + 224);
      *(_DWORD *)(v11 + 239) = *(_DWORD *)(v12 + 239);
      long long v41 = *(_OWORD *)(v12 + 144);
      *(_OWORD *)(v11 + 128) = *(_OWORD *)(v12 + 128);
      *(_OWORD *)(v11 + 144) = v41;
      long long v42 = *(_OWORD *)(v12 + 176);
      *(_OWORD *)(v11 + 160) = *(_OWORD *)(v12 + 160);
      *(_OWORD *)(v11 + 176) = v42;
      long long v43 = *(_OWORD *)(v12 + 80);
      *int v38 = *v39;
      *(_OWORD *)(v11 + 80) = v43;
      long long v44 = *(_OWORD *)(v12 + 112);
      *(_OWORD *)(v11 + 96) = *(_OWORD *)(v12 + 96);
      *(_OWORD *)(v11 + 112) = v44;
      goto LABEL_33;
    }
    int v63 = *(unsigned __int8 *)(v11 + 72);
    if (v63 != 255)
    {
      int v64 = *(unsigned __int8 *)(v12 + 72);
      if (v64 != 255)
      {
        long long v65 = *(void **)(v11 + 64);
        *(void *)(v11 + 64) = *(void *)v39;
        *(unsigned char *)(v11 + 72) = v64;
        outlined consume of GraphicsImage.Contents(v65, v63);
        goto LABEL_27;
      }
      outlined destroy of GraphicsImage.Contents(v11 + 64);
    }
    *(void *)int v38 = *(void *)v39;
    *(unsigned char *)(v11 + 72) = *(unsigned char *)(v12 + 72);
LABEL_27:
    *(_OWORD *)(v11 + 80) = *(_OWORD *)(v12 + 80);
    *(void *)(v11 + 96) = *(void *)(v12 + 96);
    *(unsigned char *)(v11 + 104) = *(unsigned char *)(v12 + 104);
    *(_OWORD *)(v11 + 108) = *(_OWORD *)(v12 + 108);
    *(unsigned char *)(v11 + 124) = *(unsigned char *)(v12 + 124);
    long long v66 = *(_OWORD *)(v12 + 144);
    *(_OWORD *)(v11 + 128) = *(_OWORD *)(v12 + 128);
    *(_OWORD *)(v11 + 144) = v66;
    *(unsigned char *)(v11 + 160) = *(unsigned char *)(v12 + 160);
    *(unsigned char *)(v11 + 161) = *(unsigned char *)(v12 + 161);
    unint64_t v67 = *(void *)(v11 + 184);
    *(_WORD *)(v11 + 162) = *(_WORD *)(v12 + 162);
    if (v67 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v68 = *(void *)(v12 + 184);
      if (v68 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v70 = *(void *)(v12 + 192);
        uint64_t v71 = *(void *)(v11 + 168);
        uint64_t v72 = *(void *)(v11 + 176);
        *(_OWORD *)(v11 + 168) = *(_OWORD *)(v12 + 168);
        *(void *)(v11 + 184) = v68;
        *(void *)(v11 + 192) = v70;
        outlined consume of AccessibilityImageLabel(v71, v72, v67);
        goto LABEL_32;
      }
      outlined destroy of AccessibilityImageLabel(v11 + 168);
    }
    long long v69 = *(_OWORD *)(v12 + 184);
    *(_OWORD *)(v11 + 168) = *(_OWORD *)(v12 + 168);
    *(_OWORD *)(v11 + 184) = v69;
LABEL_32:
    *(void *)(v11 + 200) = *(void *)(v12 + 200);
    swift_unknownObjectRelease();
    *(void *)(v11 + 208) = *(void *)(v12 + 208);
    swift_release();
    *(unsigned char *)(v11 + 216) = *(unsigned char *)(v12 + 216);
    *(unsigned char *)(v11 + 217) = *(unsigned char *)(v12 + 217);
    *(_DWORD *)(v11 + 220) = *(_DWORD *)(v12 + 220);
    *(unsigned char *)(v11 + 224) = *(unsigned char *)(v12 + 224);
    unint64_t v73 = *(void **)(v11 + 232);
    *(void *)(v11 + 232) = *(void *)(v12 + 232);

    *(_WORD *)(v11 + 240) = *(_WORD *)(v12 + 240);
    *(unsigned char *)(v11 + 242) = *(unsigned char *)(v12 + 242);
LABEL_33:
    if (*(void *)(v11 + 256))
    {
      uint64_t v74 = *(void *)(v12 + 256);
      if (v74)
      {
        *(void *)(v11 + 248) = *(void *)(v12 + 248);
        *(void *)(v11 + 256) = v74;
        swift_bridgeObjectRelease();
        uint64_t v75 = *(void **)(v11 + 264);
        unint64_t v76 = *(void *)(v12 + 264);
        if ((unint64_t)v75 >= 2)
        {
          if (v76 >= 2)
          {
            *(void *)(v11 + 264) = v76;
          }
          else
          {

            *(void *)(v11 + 264) = *(void *)(v12 + 264);
          }
        }
        else
        {
          *(void *)(v11 + 264) = v76;
        }
        *(_DWORD *)(v11 + 272) = *(_DWORD *)(v12 + 272);
        *(_WORD *)(v11 + 276) = *(_WORD *)(v12 + 276);
        *(unsigned char *)(v11 + 278) = *(unsigned char *)(v12 + 278);
        *(void *)(v11 + 280) = *(void *)(v12 + 280);
        swift_release();
        *(void *)(v11 + 288) = *(void *)(v12 + 288);
        swift_release();
LABEL_43:
        int v78 = (_OWORD *)(v11 + 296);
        uint64_t v79 = (_OWORD *)(v12 + 296);
        unint64_t v80 = *(void *)(v11 + 328);
        if (v80 >> 2 != 0xFFFFFFFF)
        {
          unint64_t v81 = *(void *)(v12 + 328);
          if (v81 >> 2 != 0xFFFFFFFF)
          {
            long long v85 = *(void **)(v11 + 296);
            uint64_t v86 = *(void *)(v11 + 304);
            uint64_t v87 = *(void *)(v11 + 312);
            uint64_t v88 = *(void *)(v11 + 320);
            uint64_t v89 = *(void *)(v11 + 336);
            uint64_t v90 = *(void *)(v11 + 344);
            uint64_t v91 = *(void *)(v11 + 352);
            long long v92 = *(_OWORD *)(v11 + 360);
            long long v93 = *(_OWORD *)(v11 + 376);
            uint64_t v94 = *(void *)(v11 + 392);
            *int v78 = *v79;
            *(_OWORD *)(v11 + 312) = *(_OWORD *)(v12 + 312);
            *(void *)(v11 + 328) = v81;
            long long v95 = *(_OWORD *)(v12 + 352);
            *(_OWORD *)(v11 + 336) = *(_OWORD *)(v12 + 336);
            *(_OWORD *)(v11 + 352) = v95;
            long long v96 = *(_OWORD *)(v12 + 384);
            *(_OWORD *)(v11 + 368) = *(_OWORD *)(v12 + 368);
            *(_OWORD *)(v11 + 384) = v96;
            outlined consume of PlatformItemList.Item.SystemItem(v85, v86, v87, v88, v80, v89, v90, v91, v92, *((uint64_t *)&v92 + 1), v93, SBYTE8(v93), v94);
LABEL_48:
            uint64_t v97 = (_OWORD *)(v12 + 400);
            uint64_t v98 = *(void *)(v11 + 408);
            if (v98 == 1)
            {
LABEL_51:
              long long v100 = *(_OWORD *)(v12 + 448);
              *(_OWORD *)(v11 + 432) = *(_OWORD *)(v12 + 432);
              *(_OWORD *)(v11 + 448) = v100;
              *(unsigned char *)(v11 + 464) = *(unsigned char *)(v12 + 464);
              long long v101 = *(_OWORD *)(v12 + 416);
              *(_OWORD *)(v11 + 400) = *v97;
              *(_OWORD *)(v11 + 416) = v101;
              goto LABEL_74;
            }
            uint64_t v99 = *(void *)(v12 + 408);
            if (v99 == 1)
            {
              outlined destroy of PlatformItemList.Item.SelectionBehavior(v11 + 400);
              goto LABEL_51;
            }
            *(unsigned char *)(v11 + 400) = *(unsigned char *)v97;
            *(unsigned char *)(v11 + 401) = *(unsigned char *)(v12 + 401);
            *(unsigned char *)(v11 + 402) = *(unsigned char *)(v12 + 402);
            *(unsigned char *)(v11 + 403) = *(unsigned char *)(v12 + 403);
            *(unsigned char *)(v11 + 404) = *(unsigned char *)(v12 + 404);
            if (v98)
            {
              if (v99)
              {
                uint64_t v102 = *(void *)(v12 + 416);
                *(void *)(v11 + 408) = v99;
                *(void *)(v11 + 416) = v102;
                swift_release();
                goto LABEL_59;
              }
              swift_release();
            }
            else if (v99)
            {
              uint64_t v103 = *(void *)(v12 + 416);
              *(void *)(v11 + 408) = v99;
              *(void *)(v11 + 416) = v103;
              goto LABEL_59;
            }
            *(_OWORD *)(v11 + 408) = *(_OWORD *)(v12 + 408);
LABEL_59:
            uint64_t v104 = *(void *)(v12 + 424);
            if (*(void *)(v11 + 424))
            {
              if (v104)
              {
                uint64_t v105 = *(void *)(v12 + 432);
                *(void *)(v11 + 424) = v104;
                *(void *)(v11 + 432) = v105;
                swift_release();
                goto LABEL_66;
              }
              swift_release();
            }
            else if (v104)
            {
              uint64_t v106 = *(void *)(v12 + 432);
              *(void *)(v11 + 424) = v104;
              *(void *)(v11 + 432) = v106;
              goto LABEL_66;
            }
            *(_OWORD *)(v11 + 424) = *(_OWORD *)(v12 + 424);
LABEL_66:
            uint64_t v107 = *(void *)(v12 + 440);
            if (*(void *)(v11 + 440))
            {
              if (v107)
              {
                uint64_t v108 = *(void *)(v12 + 448);
                *(void *)(v11 + 440) = v107;
                *(void *)(v11 + 448) = v108;
                swift_release();
LABEL_73:
                *(void *)(v11 + 456) = *(void *)(v12 + 456);
                *(unsigned char *)(v11 + 464) = *(unsigned char *)(v12 + 464);
LABEL_74:
                uint64_t v110 = *(void *)(v12 + 480);
                *(void *)(v11 + 472) = *(void *)(v12 + 472);
                *(void *)(v11 + 480) = v110;
                swift_bridgeObjectRelease();
                *(void *)(v11 + 488) = *(void *)(v12 + 488);
                *(unsigned char *)(v11 + 496) = *(unsigned char *)(v12 + 496);
                uint64_t v111 = *(void *)(v12 + 504);
                if (*(void *)(v11 + 504))
                {
                  if (v111)
                  {
                    uint64_t v112 = *(void *)(v12 + 512);
                    *(void *)(v11 + 504) = v111;
                    *(void *)(v11 + 512) = v112;
                    swift_release();
                    goto LABEL_81;
                  }
                  swift_release();
                }
                else if (v111)
                {
                  uint64_t v113 = *(void *)(v12 + 512);
                  *(void *)(v11 + 504) = v111;
                  *(void *)(v11 + 512) = v113;
                  goto LABEL_81;
                }
                *(_OWORD *)(v11 + 504) = *(_OWORD *)(v12 + 504);
LABEL_81:
                *(_WORD *)(v11 + 520) = *(_WORD *)(v12 + 520);
                if (*(void *)(v11 + 528))
                {
                  uint64_t v114 = *(void *)(v12 + 528);
                  if (v114)
                  {
                    *(void *)(v11 + 528) = v114;
                    swift_bridgeObjectRelease();
                    *(void *)(v11 + 536) = *(void *)(v12 + 536);
                    swift_release();
                    *(void *)(v11 + 544) = *(void *)(v12 + 544);
                    swift_release();
                    goto LABEL_86;
                  }
                  outlined destroy of PlatformItemList.Item.Accessibility(v11 + 528);
                }
                *(_OWORD *)(v11 + 528) = *(_OWORD *)(v12 + 528);
                *(void *)(v11 + 544) = *(void *)(v12 + 544);
LABEL_86:
                uint64_t v168 = a3;
                if (*(void *)(v11 + 552) == 1)
                {
LABEL_89:
                  *(_OWORD *)(v11 + 552) = *(_OWORD *)(v12 + 552);
                  *(void *)(v11 + 568) = *(void *)(v12 + 568);
                  goto LABEL_90;
                }
                uint64_t v115 = *(void *)(v12 + 552);
                if (v115 == 1)
                {
                  outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v11 + 552);
                  goto LABEL_89;
                }
                *(void *)(v11 + 552) = v115;
                swift_release();
                uint64_t v128 = *(void *)(v12 + 560);
                if (*(void *)(v11 + 560))
                {
                  if (v128)
                  {
                    uint64_t v129 = *(void *)(v12 + 568);
                    *(void *)(v11 + 560) = v128;
                    *(void *)(v11 + 568) = v129;
                    swift_release();
                    goto LABEL_90;
                  }
                  swift_release();
                }
                else if (v128)
                {
                  uint64_t v160 = *(void *)(v12 + 568);
                  *(void *)(v11 + 560) = v128;
                  *(void *)(v11 + 568) = v160;
                  goto LABEL_90;
                }
                *(_OWORD *)(v11 + 560) = *(_OWORD *)(v12 + 560);
LABEL_90:
                uint64_t v116 = *(void **)(v11 + 576);
                *(void *)(v11 + 576) = *(void *)(v12 + 576);

                *(void *)(v11 + 584) = *(void *)(v12 + 584);
                *(void *)(v11 + 592) = *(void *)(v12 + 592);
                swift_bridgeObjectRelease();
                *(void *)(v11 + 600) = *(void *)(v12 + 600);
                *(void *)(v11 + 608) = *(void *)(v12 + 608);
                swift_bridgeObjectRelease();
                *(void *)(v11 + 616) = *(void *)(v12 + 616);
                swift_bridgeObjectRelease();
                *(void *)(v11 + 624) = *(void *)(v12 + 624);
                swift_bridgeObjectRelease();
                *(unsigned char *)(v11 + 632) = *(unsigned char *)(v12 + 632);
                *(_WORD *)(v11 + 633) = *(_WORD *)(v12 + 633);
                uint64_t v170 = (int *)v13;
                uint64_t v117 = *(int *)(v13 + 112);
                uint64_t v118 = (unsigned char *)(v11 + v117);
                uint64_t v119 = (unsigned char *)(v12 + v117);
                uint64_t v120 = type metadata accessor for CommandOperation();
                uint64_t v121 = *(void *)(v120 - 8);
                uint64_t v122 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v121 + 48);
                long long v166 = v118;
                LODWORD(v118) = v122(v118, 1, v120);
                int v123 = v122(v119, 1, v120);
                if (v118)
                {
                  if (!v123)
                  {
                    *long long v166 = *v119;
                    uint64_t v130 = *(int *)(v120 + 20);
                    uint64_t v131 = &v166[v130];
                    uint64_t v132 = &v119[v130];
                    long long v133 = *(_OWORD *)&v119[v130 + 16];
                    _OWORD *v131 = *(_OWORD *)&v119[v130];
                    v131[1] = v133;
                    uint64_t v134 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v135 = (char *)v131 + v134;
                    int v136 = &v132[v134];
                    uint64_t v137 = type metadata accessor for UUID();
                    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v137 - 8) + 32))(v135, v136, v137);
                    uint64_t v138 = *(int *)(v120 + 24);
                    id v139 = &v166[v138];
                    id v140 = (uint64_t *)&v119[v138];
                    uint64_t v141 = *v140;
                    if (*v140)
                    {
                      uint64_t v142 = v140[1];
                      *id v139 = v141;
                      v139[1] = v142;
                    }
                    else
                    {
                      *(_OWORD *)id v139 = *(_OWORD *)v140;
                    }
                    a3 = v168;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v121 + 56))(v166, 0, 1, v120);
                    goto LABEL_108;
                  }
                  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                  size_t v125 = *(void *)(*(void *)(v124 - 8) + 64);
                  int v126 = v166;
                }
                else
                {
                  if (!v123)
                  {
                    *long long v166 = *v119;
                    uint64_t v143 = *(int *)(v120 + 20);
                    long long v144 = &v166[v143];
                    long long v145 = &v119[v143];
                    LOBYTE(v143) = v119[v143 + 16];
                    uint64_t v146 = *(void *)v144;
                    uint64_t v147 = *((void *)v144 + 1);
                    char v148 = v144[16];
                    *(_OWORD *)long long v144 = *(_OWORD *)v145;
                    v144[16] = v143;
                    outlined consume of Text.Storage(v146, v147, v148);
                    *((void *)v144 + 3) = *((void *)v145 + 3);
                    swift_bridgeObjectRelease();
                    uint64_t v149 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v150 = &v144[v149];
                    uint64_t v151 = &v145[v149];
                    uint64_t v152 = type metadata accessor for UUID();
                    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v152 - 8) + 40))(v150, v151, v152);
                    uint64_t v153 = *(int *)(v120 + 24);
                    uint64_t v154 = &v166[v153];
                    id v155 = &v119[v153];
                    uint64_t v156 = *(void *)&v166[v153];
                    uint64_t v157 = *(void *)&v119[v153];
                    if (v156)
                    {
                      a3 = v168;
                      id v158 = v170;
                      if (v157)
                      {
                        uint64_t v159 = *((void *)v155 + 1);
                        *uint64_t v154 = v157;
                        v154[1] = v159;
                        swift_release();
LABEL_109:
                        *(unsigned char *)(v11 + v158[29]) = *(unsigned char *)(v12 + v158[29]);
                        *(unsigned char *)(v11 + v158[30]) = *(unsigned char *)(v12 + v158[30]);
                        *(unsigned char *)(v11 + v158[31]) = *(unsigned char *)(v12 + v158[31]);
                        *(unsigned char *)(v11 + v158[32]) = *(unsigned char *)(v12 + v158[32]);
                        *(void *)(v11 + v158[33]) = *(void *)(v12 + v158[33]);
                        swift_release();
                        goto LABEL_110;
                      }
                      swift_release();
                    }
                    else
                    {
                      a3 = v168;
                      id v158 = v170;
                      if (v157)
                      {
                        uint64_t v163 = *((void *)v155 + 1);
                        *uint64_t v154 = v157;
                        v154[1] = v163;
                        goto LABEL_109;
                      }
                    }
                    *(_OWORD *)uint64_t v154 = *(_OWORD *)v155;
                    goto LABEL_109;
                  }
                  outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v166, (uint64_t (*)(void))type metadata accessor for CommandOperation);
                  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                  size_t v125 = *(void *)(*(void *)(v127 - 8) + 64);
                  int v126 = v166;
                }
                memcpy(v126, v119, v125);
                a3 = v168;
LABEL_108:
                id v158 = v170;
                goto LABEL_109;
              }
              swift_release();
            }
            else if (v107)
            {
              uint64_t v109 = *(void *)(v12 + 448);
              *(void *)(v11 + 440) = v107;
              *(void *)(v11 + 448) = v109;
              goto LABEL_73;
            }
            *(_OWORD *)(v11 + 440) = *(_OWORD *)(v12 + 440);
            goto LABEL_73;
          }
          outlined destroy of PlatformItemList.Item.SystemItem(v11 + 296);
        }
        long long v82 = *(_OWORD *)(v12 + 376);
        *(_OWORD *)(v11 + 360) = *(_OWORD *)(v12 + 360);
        *(_OWORD *)(v11 + 376) = v82;
        *(void *)(v11 + 392) = *(void *)(v12 + 392);
        long long v83 = *(_OWORD *)(v12 + 312);
        *int v78 = *v79;
        *(_OWORD *)(v11 + 312) = v83;
        long long v84 = *(_OWORD *)(v12 + 344);
        *(_OWORD *)(v11 + 328) = *(_OWORD *)(v12 + 328);
        *(_OWORD *)(v11 + 344) = v84;
        goto LABEL_48;
      }
      outlined destroy of Image.NamedResolved(v11 + 248);
    }
    long long v77 = *(_OWORD *)(v12 + 264);
    *(_OWORD *)(v11 + 248) = *(_OWORD *)(v12 + 248);
    *(_OWORD *)(v11 + 264) = v77;
    *(_OWORD *)(v11 + 280) = *(_OWORD *)(v12 + 280);
    goto LABEL_43;
  }
  if (v17)
  {
LABEL_9:
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy((void *)v11, (const void *)v12, *(void *)(*(void *)(v33 - 8) + 64));
    goto LABEL_110;
  }
  long long v18 = *(_OWORD *)(v12 + 16);
  *(_OWORD *)uint64_t v11 = *(_OWORD *)v12;
  *(_OWORD *)(v11 + 16) = v18;
  *(unsigned char *)(v11 + 32) = *(unsigned char *)(v12 + 32);
  uint64_t v19 = *(void *)(v12 + 48);
  *(void *)(v11 + 40) = *(void *)(v12 + 40);
  *(void *)(v11 + 48) = v19;
  *(unsigned char *)(v11 + 56) = *(unsigned char *)(v12 + 56);
  long long v20 = *(_OWORD *)(v12 + 208);
  *(_OWORD *)(v11 + 192) = *(_OWORD *)(v12 + 192);
  *(_OWORD *)(v11 + 208) = v20;
  *(_OWORD *)(v11 + 224) = *(_OWORD *)(v12 + 224);
  *(_DWORD *)(v11 + 239) = *(_DWORD *)(v12 + 239);
  long long v21 = *(_OWORD *)(v12 + 144);
  *(_OWORD *)(v11 + 128) = *(_OWORD *)(v12 + 128);
  *(_OWORD *)(v11 + 144) = v21;
  long long v22 = *(_OWORD *)(v12 + 176);
  *(_OWORD *)(v11 + 160) = *(_OWORD *)(v12 + 160);
  *(_OWORD *)(v11 + 176) = v22;
  long long v23 = *(_OWORD *)(v12 + 80);
  *(_OWORD *)(v11 + 64) = *(_OWORD *)(v12 + 64);
  *(_OWORD *)(v11 + 80) = v23;
  long long v24 = *(_OWORD *)(v12 + 112);
  *(_OWORD *)(v11 + 96) = *(_OWORD *)(v12 + 96);
  *(_OWORD *)(v11 + 112) = v24;
  *(_OWORD *)(v11 + 248) = *(_OWORD *)(v12 + 248);
  long long v25 = *(_OWORD *)(v12 + 280);
  *(_OWORD *)(v11 + 264) = *(_OWORD *)(v12 + 264);
  *(_OWORD *)(v11 + 280) = v25;
  long long v26 = *(_OWORD *)(v12 + 376);
  *(_OWORD *)(v11 + 360) = *(_OWORD *)(v12 + 360);
  *(_OWORD *)(v11 + 376) = v26;
  *(void *)(v11 + 392) = *(void *)(v12 + 392);
  long long v27 = *(_OWORD *)(v12 + 312);
  *(_OWORD *)(v11 + 296) = *(_OWORD *)(v12 + 296);
  *(_OWORD *)(v11 + 312) = v27;
  long long v28 = *(_OWORD *)(v12 + 344);
  *(_OWORD *)(v11 + 328) = *(_OWORD *)(v12 + 328);
  *(_OWORD *)(v11 + 344) = v28;
  long long v29 = *(_OWORD *)(v12 + 448);
  *(_OWORD *)(v11 + 432) = *(_OWORD *)(v12 + 432);
  *(_OWORD *)(v11 + 448) = v29;
  *(unsigned char *)(v11 + 464) = *(unsigned char *)(v12 + 464);
  long long v30 = *(_OWORD *)(v12 + 416);
  *(_OWORD *)(v11 + 400) = *(_OWORD *)(v12 + 400);
  *(_OWORD *)(v11 + 416) = v30;
  *(_OWORD *)(v11 + 472) = *(_OWORD *)(v12 + 472);
  *(_OWORD *)(v11 + 481) = *(_OWORD *)(v12 + 481);
  uint64_t v31 = *(void *)(v12 + 504);
  if (v31)
  {
    uint64_t v32 = *(void *)(v12 + 512);
    *(void *)(v11 + 504) = v31;
    *(void *)(v11 + 512) = v32;
  }
  else
  {
    *(_OWORD *)(v11 + 504) = *(_OWORD *)(v12 + 504);
  }
  *(_WORD *)(v11 + 520) = *(_WORD *)(v12 + 520);
  *(_OWORD *)(v11 + 528) = *(_OWORD *)(v12 + 528);
  *(void *)(v11 + 544) = *(void *)(v12 + 544);
  *(void *)(v11 + 568) = *(void *)(v12 + 568);
  *(_OWORD *)(v11 + 552) = *(_OWORD *)(v12 + 552);
  *(void *)(v11 + 576) = *(void *)(v12 + 576);
  *(_OWORD *)(v11 + 584) = *(_OWORD *)(v12 + 584);
  *(_OWORD *)(v11 + 600) = *(_OWORD *)(v12 + 600);
  *(void *)(v11 + 616) = *(void *)(v12 + 616);
  *(void *)(v11 + 624) = *(void *)(v12 + 624);
  *(unsigned char *)(v11 + 632) = *(unsigned char *)(v12 + 632);
  *(_WORD *)(v11 + 633) = *(_WORD *)(v12 + 633);
  uint64_t v169 = (int *)v13;
  uint64_t v45 = *(int *)(v13 + 112);
  long long v46 = (unsigned char *)(v11 + v45);
  long long v47 = (unsigned char *)(v12 + v45);
  uint64_t v48 = type metadata accessor for CommandOperation();
  uint64_t v49 = *(void *)(v48 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v49 + 48))(v47, 1, v48))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v46, v47, *(void *)(*(void *)(v50 - 8) + 64));
  }
  else
  {
    unint64_t v165 = v46;
    long long v167 = a3;
    *long long v46 = *v47;
    uint64_t v51 = *(int *)(v48 + 20);
    long long v52 = &v46[v51];
    long long v53 = &v47[v51];
    long long v54 = *(_OWORD *)&v47[v51 + 16];
    _OWORD *v52 = *(_OWORD *)&v47[v51];
    v52[1] = v54;
    uint64_t v55 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    long long v56 = (char *)v52 + v55;
    __src = &v53[v55];
    uint64_t v57 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v57 - 8) + 32))(v56, __src, v57);
    uint64_t v58 = *(int *)(v48 + 24);
    id v59 = &v165[v58];
    long long v60 = (uint64_t *)&v47[v58];
    uint64_t v61 = *v60;
    if (*v60)
    {
      uint64_t v62 = v60[1];
      *id v59 = v61;
      v59[1] = v62;
    }
    else
    {
      *(_OWORD *)id v59 = *(_OWORD *)v60;
    }
    a3 = v167;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v49 + 56))(v165, 0, 1, v48);
  }
  *(unsigned char *)(v11 + v169[29]) = *(unsigned char *)(v12 + v169[29]);
  *(unsigned char *)(v11 + v169[30]) = *(unsigned char *)(v12 + v169[30]);
  *(unsigned char *)(v11 + v169[31]) = *(unsigned char *)(v12 + v169[31]);
  *(unsigned char *)(v11 + v169[32]) = *(unsigned char *)(v12 + v169[32]);
  *(void *)(v11 + v169[33]) = *(void *)(v12 + v169[33]);
  (*(void (**)(uint64_t, void, uint64_t))(v14 + 56))(v11, 0, 1);
LABEL_110:
  swift_weakTakeAssign();
  uint64_t v161 = a3[15];
  *(unsigned char *)(a1 + a3[14]) = *(unsigned char *)(a2 + a3[14]);
  *(unsigned char *)(a1 + v161) = *(unsigned char *)(a2 + v161);
  return a1;
}

uint64_t sub_187DCC728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    long long v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48);
    uint64_t v10 = v8;
    uint64_t v11 = a1 + *(int *)(a3 + 48);
    return v9(v11, a2, v10);
  }
}

uint64_t sub_187DCC808(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = v5 + *(int *)(a4 + 48);
    return v8(v10, a2, a2, v9);
  }
  return result;
}

ValueMetadata *type metadata accessor for SearchKey()
{
  return &type metadata for SearchKey;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v5 = *a2;
  *(void *)a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = v5 + ((v4 + 16) & ~(unint64_t)v4);
    swift_retain();
    return a1;
  }
  uint64_t v8 = a2 + 1;
  int v9 = *((unsigned __int8 *)a2 + 16);
  swift_retain();
  if (v9 == 254 || v9 == 255)
  {
    *(void *)(a1 + 8) = *v8;
    *(unsigned char *)(a1 + 16) = *((unsigned char *)v8 + 8);
  }
  else
  {
    uint64_t v10 = *v8;
    outlined copy of PlatformItemCollection.Storage(v10, v9 & 1);
    *(void *)(a1 + 8) = v10;
    *(unsigned char *)(a1 + 16) = v9 & 1;
  }
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (void **)(a1 + v11);
  uint64_t v13 = (void **)((char *)a2 + v11);
  uint64_t v14 = type metadata accessor for PlatformItemList.Item();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  uint64_t v105 = v15;
  uint64_t v111 = (int *)v14;
  int v17 = *v13;
  long long v18 = v13[1];
  void *v12 = *v13;
  v12[1] = v18;
  uint64_t v19 = v13[3];
  _OWORD v12[2] = v13[2];
  v12[3] = v19;
  *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
  long long v20 = v13[6];
  v12[5] = v13[5];
  v12[6] = v20;
  *((unsigned char *)v12 + 56) = *((unsigned char *)v13 + 56);
  long long v21 = v12 + 8;
  long long v22 = v13 + 8;
  unint64_t v23 = (unint64_t)v13[23];
  id v24 = v17;
  id v25 = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v23 >> 1 != 4294967294)
  {
    int v35 = *((unsigned __int8 *)v13 + 72);
    if (v35 == 255)
    {
      *long long v21 = *v22;
      *((unsigned char *)v12 + 72) = *((unsigned char *)v13 + 72);
    }
    else
    {
      uint64_t v36 = v13[8];
      outlined copy of GraphicsImage.Contents(v36, *((unsigned char *)v13 + 72));
      v12[8] = v36;
      *((unsigned char *)v12 + 72) = v35;
      unint64_t v23 = (unint64_t)v13[23];
    }
    _OWORD v12[10] = v13[10];
    *(_OWORD *)(v12 + 11) = *(_OWORD *)(v13 + 11);
    *((unsigned char *)v12 + 104) = *((unsigned char *)v13 + 104);
    *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v13 + 108);
    *((unsigned char *)v12 + 124) = *((unsigned char *)v13 + 124);
    long long v37 = *((_OWORD *)v13 + 9);
    *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
    *((_OWORD *)v12 + 9) = v37;
    *((_WORD *)v12 + 80) = *((_WORD *)v13 + 80);
    *((unsigned char *)v12 + 162) = *((unsigned char *)v13 + 162);
    *((unsigned char *)v12 + 163) = *((unsigned char *)v13 + 163);
    if (v23 >> 1 == 0xFFFFFFFF)
    {
      long long v38 = *(_OWORD *)(v13 + 23);
      *(_OWORD *)(v12 + 21) = *(_OWORD *)(v13 + 21);
      *(_OWORD *)(v12 + 23) = v38;
    }
    else
    {
      uint64_t v39 = (uint64_t)v13[21];
      uint64_t v40 = (uint64_t)v13[22];
      long long v41 = v13[24];
      outlined copy of AccessibilityImageLabel(v39, v40, v23);
      v12[21] = (void *)v39;
      v12[22] = (void *)v40;
      v12[23] = (void *)v23;
      v12[24] = v41;
    }
    long long v42 = v13[26];
    v12[25] = v13[25];
    v12[26] = v42;
    *((_WORD *)v12 + 108) = *((_WORD *)v13 + 108);
    *((_DWORD *)v12 + 55) = *((_DWORD *)v13 + 55);
    *((unsigned char *)v12 + 224) = *((unsigned char *)v13 + 224);
    long long v43 = v13[29];
    v12[29] = v43;
    *((_WORD *)v12 + 120) = *((_WORD *)v13 + 120);
    *((unsigned char *)v12 + 242) = *((unsigned char *)v13 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v44 = v43;
    uint64_t v31 = v13[32];
    if (v31) {
      goto LABEL_11;
    }
LABEL_21:
    long long v45 = *(_OWORD *)(v13 + 33);
    *(_OWORD *)(v12 + 31) = *(_OWORD *)(v13 + 31);
    *(_OWORD *)(v12 + 33) = v45;
    *(_OWORD *)(v12 + 35) = *(_OWORD *)(v13 + 35);
    goto LABEL_22;
  }
  long long v26 = *((_OWORD *)v13 + 13);
  *((_OWORD *)v12 + 12) = *((_OWORD *)v13 + 12);
  *((_OWORD *)v12 + 13) = v26;
  *((_OWORD *)v12 + 14) = *((_OWORD *)v13 + 14);
  *(_DWORD *)((char *)v12 + 239) = *(_DWORD *)((char *)v13 + 239);
  long long v27 = *((_OWORD *)v13 + 9);
  *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
  *((_OWORD *)v12 + 9) = v27;
  long long v28 = *((_OWORD *)v13 + 11);
  *((_OWORD *)v12 + 10) = *((_OWORD *)v13 + 10);
  *((_OWORD *)v12 + 11) = v28;
  long long v29 = *((_OWORD *)v13 + 5);
  *(_OWORD *)long long v21 = *(_OWORD *)v22;
  *((_OWORD *)v12 + 5) = v29;
  long long v30 = *((_OWORD *)v13 + 7);
  *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
  *((_OWORD *)v12 + 7) = v30;
  uint64_t v31 = v13[32];
  if (!v31) {
    goto LABEL_21;
  }
LABEL_11:
  v12[31] = v13[31];
  v12[32] = v31;
  uint64_t v32 = v13[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v32 >= 2) {
    id v33 = v32;
  }
  v12[33] = v32;
  *((_DWORD *)v12 + 68) = *((_DWORD *)v13 + 68);
  *((unsigned char *)v12 + 276) = *((unsigned char *)v13 + 276);
  *(_WORD *)((char *)v12 + 277) = *(_WORD *)((char *)v13 + 277);
  long long v34 = v13[36];
  v12[35] = v13[35];
  v12[36] = v34;
  swift_retain();
  swift_retain();
LABEL_22:
  unint64_t v46 = (unint64_t)v13[41];
  if (v46 >> 2 == 0xFFFFFFFF)
  {
    long long v47 = *(_OWORD *)(v13 + 47);
    *(_OWORD *)(v12 + 45) = *(_OWORD *)(v13 + 45);
    *(_OWORD *)(v12 + 47) = v47;
    v12[49] = v13[49];
    long long v48 = *(_OWORD *)(v13 + 39);
    *(_OWORD *)(v12 + 37) = *(_OWORD *)(v13 + 37);
    *(_OWORD *)(v12 + 39) = v48;
    long long v49 = *(_OWORD *)(v13 + 43);
    *(_OWORD *)(v12 + 41) = *(_OWORD *)(v13 + 41);
    *(_OWORD *)(v12 + 43) = v49;
  }
  else
  {
    uint64_t v50 = v13[37];
    uint64_t v51 = (uint64_t)v13[38];
    uint64_t v52 = (uint64_t)v13[39];
    uint64_t v53 = (uint64_t)v13[42];
    uint64_t v54 = (uint64_t)v13[43];
    uint64_t v55 = v13[44];
    uint64_t v99 = (uint64_t)v13[40];
    uint64_t v100 = (uint64_t)v13[45];
    uint64_t v101 = (uint64_t)v13[46];
    uint64_t v102 = (uint64_t)v13[47];
    __dsta = v13[48];
    uint64_t v108 = (uint64_t)v13[49];
    outlined copy of PlatformItemList.Item.SystemItem(v50, v51, v52, v99, v46, v53, v54, (char)v55, v100, v101, v102, (char)__dsta, v108);
    v12[37] = v50;
    v12[38] = (void *)v51;
    v12[39] = (void *)v52;
    unsigned char v12[40] = (void *)v99;
    v12[41] = (void *)v46;
    v12[42] = (void *)v53;
    v12[43] = (void *)v54;
    v12[44] = v55;
    v12[45] = (void *)v100;
    v12[46] = (void *)v101;
    v12[47] = (void *)v102;
    v12[48] = __dsta;
    v12[49] = (void *)v108;
  }
  long long v56 = v13[51];
  if (v56 != (void *)1)
  {
    *((_DWORD *)v12 + 100) = *((_DWORD *)v13 + 100);
    *((unsigned char *)v12 + 404) = *((unsigned char *)v13 + 404);
    if (v56)
    {
      id v59 = v13[52];
      v12[51] = v56;
      v12[52] = v59;
      swift_retain();
      long long v60 = v13[53];
      if (v60) {
        goto LABEL_29;
      }
    }
    else
    {
      *(_OWORD *)(v12 + 51) = *(_OWORD *)(v13 + 51);
      long long v60 = v13[53];
      if (v60)
      {
LABEL_29:
        uint64_t v61 = v13[54];
        v12[53] = v60;
        v12[54] = v61;
        swift_retain();
        uint64_t v62 = v13[55];
        if (v62)
        {
LABEL_30:
          int v63 = v13[56];
          v12[55] = v62;
          v12[56] = v63;
          swift_retain();
LABEL_34:
          v12[57] = v13[57];
          *((unsigned char *)v12 + 464) = *((unsigned char *)v13 + 464);
          goto LABEL_35;
        }
LABEL_33:
        *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 55);
        goto LABEL_34;
      }
    }
    *(_OWORD *)(v12 + 53) = *(_OWORD *)(v13 + 53);
    uint64_t v62 = v13[55];
    if (v62) {
      goto LABEL_30;
    }
    goto LABEL_33;
  }
  long long v57 = *((_OWORD *)v13 + 28);
  *((_OWORD *)v12 + 27) = *((_OWORD *)v13 + 27);
  *((_OWORD *)v12 + 28) = v57;
  *((unsigned char *)v12 + 464) = *((unsigned char *)v13 + 464);
  long long v58 = *((_OWORD *)v13 + 26);
  *((_OWORD *)v12 + 25) = *((_OWORD *)v13 + 25);
  *((_OWORD *)v12 + 26) = v58;
LABEL_35:
  int v64 = v13[60];
  v12[59] = v13[59];
  v12[60] = v64;
  v12[61] = v13[61];
  *((unsigned char *)v12 + 496) = *((unsigned char *)v13 + 496);
  long long v65 = v13[63];
  swift_bridgeObjectRetain();
  if (v65)
  {
    long long v66 = v13[64];
    v12[63] = v65;
    v12[64] = v66;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v12 + 63) = *(_OWORD *)(v13 + 63);
  }
  *((_WORD *)v12 + 260) = *((_WORD *)v13 + 260);
  unint64_t v67 = v13[66];
  if (v67)
  {
    v12[66] = v67;
    v12[67] = v13[67];
    v12[68] = v13[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v12 + 33) = *((_OWORD *)v13 + 33);
    v12[68] = v13[68];
  }
  unint64_t v68 = v13[69];
  uint64_t v104 = a1;
  if (v68 == (void *)1)
  {
    *(_OWORD *)(v12 + 69) = *(_OWORD *)(v13 + 69);
    v12[71] = v13[71];
  }
  else
  {
    v12[69] = v68;
    long long v69 = v13[70];
    swift_retain();
    if (v69)
    {
      uint64_t v70 = v13[71];
      v12[70] = v69;
      v12[71] = v70;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v12 + 35) = *((_OWORD *)v13 + 35);
    }
  }
  uint64_t v71 = v13[72];
  v12[72] = v71;
  v12[73] = v13[73];
  v12[74] = v13[74];
  v12[75] = v13[75];
  v12[76] = v13[76];
  v12[77] = v13[77];
  v12[78] = v13[78];
  *((_WORD *)v12 + 316) = *((_WORD *)v13 + 316);
  *((unsigned char *)v12 + 634) = *((unsigned char *)v13 + 634);
  uint64_t v72 = v111[28];
  __dst = (char *)v12 + v72;
  unint64_t v73 = (char *)v13 + v72;
  uint64_t v74 = type metadata accessor for CommandOperation();
  uint64_t v103 = *(void *)(v74 - 8);
  uint64_t v109 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v103 + 48);
  id v75 = v71;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v109(v73, 1, v74))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v73, *(void *)(*(void *)(v76 - 8) + 64));
    long long v77 = v111;
    a1 = v104;
    uint64_t v78 = v105;
  }
  else
  {
    unsigned char *__dst = *v73;
    uint64_t v79 = *(int *)(v74 + 20);
    unint64_t v80 = &__dst[v79];
    unint64_t v81 = &v73[v79];
    uint64_t v110 = v73;
    uint64_t v82 = v74;
    uint64_t v83 = *(void *)v81;
    uint64_t v84 = *((void *)v81 + 1);
    char v85 = v81[16];
    outlined copy of Text.Storage(*(void *)v81, v84, v85);
    *(void *)unint64_t v80 = v83;
    *((void *)v80 + 1) = v84;
    v80[16] = v85;
    *((void *)v80 + 3) = *((void *)v81 + 3);
    uint64_t v86 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v87 = &v80[v86];
    uint64_t v88 = &v81[v86];
    uint64_t v89 = type metadata accessor for UUID();
    uint64_t v90 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v89 - 8) + 16);
    swift_bridgeObjectRetain();
    uint64_t v91 = v87;
    uint64_t v92 = v82;
    v90(v91, v88, v89);
    uint64_t v93 = *(int *)(v82 + 24);
    uint64_t v94 = &__dst[v93];
    long long v95 = &v110[v93];
    if (*v95)
    {
      uint64_t v96 = v95[1];
      *uint64_t v94 = *v95;
      v94[1] = v96;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
    }
    long long v77 = v111;
    a1 = v104;
    uint64_t v78 = v105;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v103 + 56))(__dst, 0, 1, v92);
  }
  *((unsigned char *)v12 + v77[29]) = *((unsigned char *)v13 + v77[29]);
  *((unsigned char *)v12 + v77[30]) = *((unsigned char *)v13 + v77[30]);
  *((unsigned char *)v12 + v77[31]) = *((unsigned char *)v13 + v77[31]);
  *((unsigned char *)v12 + v77[32]) = *((unsigned char *)v13 + v77[32]);
  *(void **)((char *)v12 + v77[33]) = *(void **)((char *)v13 + v77[33]);
  uint64_t v97 = *(void (**)(void **, void, uint64_t, int *))(v78 + 56);
  swift_retain();
  v97(v12, 0, 1, v77);
  return a1;
}

uint64_t destroy for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2)
{
  swift_release();
  unsigned int v4 = *(unsigned __int8 *)(a1 + 16);
  if (v4 <= 0xFD) {
    outlined consume of PlatformItemCollection.Storage(*(void *)(a1 + 8), v4 & 1);
  }
  uint64_t v5 = a1 + *(int *)(a2 + 24);
  uint64_t v6 = type metadata accessor for PlatformItemList.Item();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 48))(v5, 1, v6);
  if (!result)
  {

    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v8 = *(void *)(v5 + 184);
    unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if ((v8 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFCLL)
    {
      int v10 = *(unsigned __int8 *)(v5 + 72);
      if (v10 != 255)
      {
        outlined consume of GraphicsImage.Contents(*(void **)(v5 + 64), v10);
        uint64_t v8 = *(void *)(v5 + 184);
        unint64_t v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
      }
      if (v9 != 0x1FFFFFFFELL) {
        outlined consume of AccessibilityImageLabel(*(void *)(v5 + 168), *(void *)(v5 + 176), v8);
      }
      swift_unknownObjectRelease();
      swift_release();
    }
    if (*(void *)(v5 + 256))
    {
      swift_bridgeObjectRelease();
      uint64_t v11 = *(void **)(v5 + 264);
      if ((unint64_t)v11 >= 2) {

      }
      swift_release();
      swift_release();
    }
    unint64_t v12 = *(void *)(v5 + 328);
    if (v12 >> 2 != 0xFFFFFFFF) {
      outlined consume of PlatformItemList.Item.SystemItem(*(void **)(v5 + 296), *(void *)(v5 + 304), *(void *)(v5 + 312), *(void *)(v5 + 320), v12, *(void *)(v5 + 336), *(void *)(v5 + 344), *(void *)(v5 + 352), *(void *)(v5 + 360), *(void *)(v5 + 368), *(void *)(v5 + 376), *(void *)(v5 + 384), *(void *)(v5 + 392));
    }
    uint64_t v13 = *(void *)(v5 + 408);
    if (v13)
    {
      if (v13 == 1)
      {
LABEL_23:
        swift_bridgeObjectRelease();
        if (*(void *)(v5 + 504)) {
          swift_release();
        }
        if (*(void *)(v5 + 528))
        {
          swift_bridgeObjectRelease();
          swift_release();
          swift_release();
        }
        if (*(void *)(v5 + 552) != 1)
        {
          swift_release();
          if (*(void *)(v5 + 560)) {
            swift_release();
          }
        }

        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v14 = v5 + *(int *)(v6 + 112);
        uint64_t v15 = type metadata accessor for CommandOperation();
        if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48))(v14, 1, v15))
        {
          uint64_t v16 = v14 + *(int *)(v15 + 20);
          outlined consume of Text.Storage(*(void *)v16, *(void *)(v16 + 8), *(unsigned char *)(v16 + 16));
          swift_bridgeObjectRelease();
          uint64_t v17 = v16 + *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v18 = type metadata accessor for UUID();
          (*(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8))(v17, v18);
          if (*(void *)(v14 + *(int *)(v15 + 24))) {
            swift_release();
          }
        }
        return swift_release();
      }
      swift_release();
    }
    if (*(void *)(v5 + 424)) {
      swift_release();
    }
    if (*(void *)(v5 + 440)) {
      swift_release();
    }
    goto LABEL_23;
  }
  return result;
}

void *initializeWithCopy for ToolbarStorage.NavigationProperties(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *(void *)a2;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a2 + 8;
  int v8 = *(unsigned __int8 *)(a2 + 16);
  swift_retain();
  if (v8 == 254 || v8 == 255)
  {
    *uint64_t v6 = *(void *)v7;
    *((unsigned char *)v5 + 16) = *(unsigned char *)(v7 + 8);
  }
  else
  {
    char v9 = v8 & 1;
    uint64_t v10 = *(void *)v7;
    outlined copy of PlatformItemCollection.Storage(v10, v9);
    v5[1] = v10;
    *((unsigned char *)v5 + 16) = v9;
  }
  uint64_t v11 = *(int *)(a3 + 24);
  unint64_t v12 = (void **)((char *)v5 + v11);
  uint64_t v13 = (void **)(a2 + v11);
  uint64_t v14 = type metadata accessor for PlatformItemList.Item();
  uint64_t v15 = *(void *)(v14 - 8);
  if ((*(unsigned int (**)(void **, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy(v12, v13, *(void *)(*(void *)(v16 - 8) + 64));
    return v5;
  }
  uint64_t v107 = v15;
  uint64_t v108 = v5;
  uint64_t v17 = *v13;
  uint64_t v18 = v13[1];
  void *v12 = *v13;
  v12[1] = v18;
  uint64_t v19 = v13[3];
  _OWORD v12[2] = v13[2];
  v12[3] = v19;
  *((unsigned char *)v12 + 32) = *((unsigned char *)v13 + 32);
  long long v20 = v13[6];
  v12[5] = v13[5];
  v12[6] = v20;
  *((unsigned char *)v12 + 56) = *((unsigned char *)v13 + 56);
  long long v21 = v12 + 8;
  long long v22 = v13 + 8;
  unint64_t v23 = (unint64_t)v13[23];
  id v24 = v17;
  id v25 = v18;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v23 >> 1 != 4294967294)
  {
    int v35 = *((unsigned __int8 *)v13 + 72);
    if (v35 == 255)
    {
      *long long v21 = *v22;
      *((unsigned char *)v12 + 72) = *((unsigned char *)v13 + 72);
    }
    else
    {
      uint64_t v36 = v13[8];
      outlined copy of GraphicsImage.Contents(v36, *((unsigned char *)v13 + 72));
      v12[8] = v36;
      *((unsigned char *)v12 + 72) = v35;
      unint64_t v23 = (unint64_t)v13[23];
    }
    _OWORD v12[10] = v13[10];
    *(_OWORD *)(v12 + 11) = *(_OWORD *)(v13 + 11);
    *((unsigned char *)v12 + 104) = *((unsigned char *)v13 + 104);
    *(_OWORD *)((char *)v12 + 108) = *(_OWORD *)((char *)v13 + 108);
    *((unsigned char *)v12 + 124) = *((unsigned char *)v13 + 124);
    long long v37 = *((_OWORD *)v13 + 9);
    *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
    *((_OWORD *)v12 + 9) = v37;
    *((_WORD *)v12 + 80) = *((_WORD *)v13 + 80);
    *((unsigned char *)v12 + 162) = *((unsigned char *)v13 + 162);
    *((unsigned char *)v12 + 163) = *((unsigned char *)v13 + 163);
    if (v23 >> 1 == 0xFFFFFFFF)
    {
      long long v38 = *(_OWORD *)(v13 + 23);
      *(_OWORD *)(v12 + 21) = *(_OWORD *)(v13 + 21);
      *(_OWORD *)(v12 + 23) = v38;
    }
    else
    {
      uint64_t v39 = (uint64_t)v13[21];
      uint64_t v40 = (uint64_t)v13[22];
      long long v41 = v13[24];
      outlined copy of AccessibilityImageLabel(v39, v40, v23);
      v12[21] = (void *)v39;
      v12[22] = (void *)v40;
      v12[23] = (void *)v23;
      v12[24] = v41;
    }
    long long v42 = v13[26];
    v12[25] = v13[25];
    v12[26] = v42;
    *((_WORD *)v12 + 108) = *((_WORD *)v13 + 108);
    *((_DWORD *)v12 + 55) = *((_DWORD *)v13 + 55);
    *((unsigned char *)v12 + 224) = *((unsigned char *)v13 + 224);
    long long v43 = v13[29];
    v12[29] = v43;
    *((_WORD *)v12 + 120) = *((_WORD *)v13 + 120);
    *((unsigned char *)v12 + 242) = *((unsigned char *)v13 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v44 = v43;
    uint64_t v31 = v13[32];
    if (v31) {
      goto LABEL_9;
    }
LABEL_19:
    long long v45 = *(_OWORD *)(v13 + 33);
    *(_OWORD *)(v12 + 31) = *(_OWORD *)(v13 + 31);
    *(_OWORD *)(v12 + 33) = v45;
    *(_OWORD *)(v12 + 35) = *(_OWORD *)(v13 + 35);
    goto LABEL_20;
  }
  long long v26 = *((_OWORD *)v13 + 13);
  *((_OWORD *)v12 + 12) = *((_OWORD *)v13 + 12);
  *((_OWORD *)v12 + 13) = v26;
  *((_OWORD *)v12 + 14) = *((_OWORD *)v13 + 14);
  *(_DWORD *)((char *)v12 + 239) = *(_DWORD *)((char *)v13 + 239);
  long long v27 = *((_OWORD *)v13 + 9);
  *((_OWORD *)v12 + 8) = *((_OWORD *)v13 + 8);
  *((_OWORD *)v12 + 9) = v27;
  long long v28 = *((_OWORD *)v13 + 11);
  *((_OWORD *)v12 + 10) = *((_OWORD *)v13 + 10);
  *((_OWORD *)v12 + 11) = v28;
  long long v29 = *((_OWORD *)v13 + 5);
  *(_OWORD *)long long v21 = *(_OWORD *)v22;
  *((_OWORD *)v12 + 5) = v29;
  long long v30 = *((_OWORD *)v13 + 7);
  *((_OWORD *)v12 + 6) = *((_OWORD *)v13 + 6);
  *((_OWORD *)v12 + 7) = v30;
  uint64_t v31 = v13[32];
  if (!v31) {
    goto LABEL_19;
  }
LABEL_9:
  v12[31] = v13[31];
  v12[32] = v31;
  uint64_t v32 = v13[33];
  swift_bridgeObjectRetain();
  if ((unint64_t)v32 >= 2) {
    id v33 = v32;
  }
  v12[33] = v32;
  *((_DWORD *)v12 + 68) = *((_DWORD *)v13 + 68);
  *((unsigned char *)v12 + 276) = *((unsigned char *)v13 + 276);
  *(_WORD *)((char *)v12 + 277) = *(_WORD *)((char *)v13 + 277);
  long long v34 = v13[36];
  v12[35] = v13[35];
  v12[36] = v34;
  swift_retain();
  swift_retain();
LABEL_20:
  unint64_t v46 = (unint64_t)v13[41];
  uint64_t v109 = (int *)v14;
  if (v46 >> 2 == 0xFFFFFFFF)
  {
    long long v47 = *(_OWORD *)(v13 + 47);
    *(_OWORD *)(v12 + 45) = *(_OWORD *)(v13 + 45);
    *(_OWORD *)(v12 + 47) = v47;
    v12[49] = v13[49];
    long long v48 = *(_OWORD *)(v13 + 39);
    *(_OWORD *)(v12 + 37) = *(_OWORD *)(v13 + 37);
    *(_OWORD *)(v12 + 39) = v48;
    long long v49 = *(_OWORD *)(v13 + 43);
    *(_OWORD *)(v12 + 41) = *(_OWORD *)(v13 + 41);
    *(_OWORD *)(v12 + 43) = v49;
  }
  else
  {
    uint64_t v50 = v13[37];
    uint64_t v51 = (uint64_t)v13[38];
    uint64_t v52 = (uint64_t)v13[39];
    uint64_t v53 = (uint64_t)v13[40];
    uint64_t v55 = (uint64_t)v13[42];
    uint64_t v54 = (uint64_t)v13[43];
    long long v56 = v13[44];
    uint64_t v98 = (uint64_t)v13[45];
    uint64_t v99 = (uint64_t)v13[46];
    uint64_t v100 = (uint64_t)v13[47];
    uint64_t v102 = v13[48];
    __dsta = v13[49];
    outlined copy of PlatformItemList.Item.SystemItem(v50, v51, v52, v53, v46, v55, v54, (char)v56, v98, v99, v100, (char)v102, (uint64_t)__dsta);
    v12[37] = v50;
    v12[38] = (void *)v51;
    v12[39] = (void *)v52;
    unsigned char v12[40] = (void *)v53;
    v12[41] = (void *)v46;
    v12[42] = (void *)v55;
    uint64_t v14 = (uint64_t)v109;
    v12[43] = (void *)v54;
    v12[44] = v56;
    v12[45] = (void *)v98;
    v12[46] = (void *)v99;
    v12[47] = (void *)v100;
    v12[48] = v102;
    v12[49] = __dsta;
  }
  long long v57 = v13[51];
  if (v57 != (void *)1)
  {
    *((_DWORD *)v12 + 100) = *((_DWORD *)v13 + 100);
    *((unsigned char *)v12 + 404) = *((unsigned char *)v13 + 404);
    if (v57)
    {
      long long v60 = v13[52];
      v12[51] = v57;
      v12[52] = v60;
      swift_retain();
      uint64_t v61 = v13[53];
      if (v61) {
        goto LABEL_27;
      }
    }
    else
    {
      *(_OWORD *)(v12 + 51) = *(_OWORD *)(v13 + 51);
      uint64_t v61 = v13[53];
      if (v61)
      {
LABEL_27:
        uint64_t v62 = v13[54];
        v12[53] = v61;
        v12[54] = v62;
        swift_retain();
        int v63 = v13[55];
        if (v63)
        {
LABEL_28:
          int v64 = v13[56];
          v12[55] = v63;
          v12[56] = v64;
          swift_retain();
LABEL_32:
          v12[57] = v13[57];
          *((unsigned char *)v12 + 464) = *((unsigned char *)v13 + 464);
          goto LABEL_33;
        }
LABEL_31:
        *(_OWORD *)(v12 + 55) = *(_OWORD *)(v13 + 55);
        goto LABEL_32;
      }
    }
    *(_OWORD *)(v12 + 53) = *(_OWORD *)(v13 + 53);
    int v63 = v13[55];
    if (v63) {
      goto LABEL_28;
    }
    goto LABEL_31;
  }
  long long v58 = *((_OWORD *)v13 + 28);
  *((_OWORD *)v12 + 27) = *((_OWORD *)v13 + 27);
  *((_OWORD *)v12 + 28) = v58;
  *((unsigned char *)v12 + 464) = *((unsigned char *)v13 + 464);
  long long v59 = *((_OWORD *)v13 + 26);
  *((_OWORD *)v12 + 25) = *((_OWORD *)v13 + 25);
  *((_OWORD *)v12 + 26) = v59;
LABEL_33:
  long long v65 = v13[60];
  v12[59] = v13[59];
  v12[60] = v65;
  v12[61] = v13[61];
  *((unsigned char *)v12 + 496) = *((unsigned char *)v13 + 496);
  long long v66 = v13[63];
  swift_bridgeObjectRetain();
  if (v66)
  {
    unint64_t v67 = v13[64];
    v12[63] = v66;
    v12[64] = v67;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v12 + 63) = *(_OWORD *)(v13 + 63);
  }
  *((_WORD *)v12 + 260) = *((_WORD *)v13 + 260);
  unint64_t v68 = v13[66];
  if (v68)
  {
    v12[66] = v68;
    v12[67] = v13[67];
    v12[68] = v13[68];
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    *((_OWORD *)v12 + 33) = *((_OWORD *)v13 + 33);
    v12[68] = v13[68];
  }
  long long v69 = v13[69];
  if (v69 == (void *)1)
  {
    *(_OWORD *)(v12 + 69) = *(_OWORD *)(v13 + 69);
    v12[71] = v13[71];
  }
  else
  {
    v12[69] = v69;
    uint64_t v70 = v13[70];
    swift_retain();
    if (v70)
    {
      uint64_t v71 = v13[71];
      v12[70] = v70;
      v12[71] = v71;
      swift_retain();
    }
    else
    {
      *((_OWORD *)v12 + 35) = *((_OWORD *)v13 + 35);
    }
  }
  uint64_t v72 = v13[72];
  v12[72] = v72;
  v12[73] = v13[73];
  v12[74] = v13[74];
  v12[75] = v13[75];
  v12[76] = v13[76];
  v12[77] = v13[77];
  v12[78] = v13[78];
  *((_WORD *)v12 + 316) = *((_WORD *)v13 + 316);
  *((unsigned char *)v12 + 634) = *((unsigned char *)v13 + 634);
  uint64_t v73 = *(int *)(v14 + 112);
  __dst = (char *)v12 + v73;
  uint64_t v74 = (char *)v13 + v73;
  uint64_t v75 = type metadata accessor for CommandOperation();
  uint64_t v101 = *(void *)(v75 - 8);
  uint64_t v103 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v101 + 48);
  id v76 = v72;
  long long v77 = v74;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v103(v74, 1, v75))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v74, *(void *)(*(void *)(v78 - 8) + 64));
    uint64_t v5 = v108;
    uint64_t v79 = v109;
  }
  else
  {
    unsigned char *__dst = *v74;
    uint64_t v80 = *(int *)(v75 + 20);
    uint64_t v81 = v75;
    uint64_t v82 = &__dst[v80];
    uint64_t v83 = &v77[v80];
    uint64_t v104 = v77;
    uint64_t v84 = *(void *)&v77[v80];
    uint64_t v85 = *((void *)v83 + 1);
    char v86 = v83[16];
    outlined copy of Text.Storage(v84, v85, v86);
    *(void *)uint64_t v82 = v84;
    *((void *)v82 + 1) = v85;
    v82[16] = v86;
    *((void *)v82 + 3) = *((void *)v83 + 3);
    uint64_t v87 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    uint64_t v88 = &v82[v87];
    uint64_t v89 = &v83[v87];
    uint64_t v90 = type metadata accessor for UUID();
    uint64_t v91 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v90 - 8) + 16);
    swift_bridgeObjectRetain();
    v91(v88, v89, v90);
    uint64_t v92 = *(int *)(v81 + 24);
    uint64_t v93 = &__dst[v92];
    uint64_t v94 = &v104[v92];
    if (*v94)
    {
      uint64_t v95 = v94[1];
      *uint64_t v93 = *v94;
      v93[1] = v95;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
    }
    uint64_t v5 = v108;
    uint64_t v79 = v109;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v101 + 56))(__dst, 0, 1, v81);
  }
  *((unsigned char *)v12 + v79[29]) = *((unsigned char *)v13 + v79[29]);
  *((unsigned char *)v12 + v79[30]) = *((unsigned char *)v13 + v79[30]);
  *((unsigned char *)v12 + v79[31]) = *((unsigned char *)v13 + v79[31]);
  *((unsigned char *)v12 + v79[32]) = *((unsigned char *)v13 + v79[32]);
  *(void **)((char *)v12 + v79[33]) = *(void **)((char *)v13 + v79[33]);
  uint64_t v96 = *(void (**)(void **, void, uint64_t, int *))(v107 + 56);
  swift_retain();
  v96(v12, 0, 1, v79);
  return v5;
}

void *assignWithCopy for ToolbarStorage.NavigationProperties(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *(void *)a2;
  swift_retain();
  swift_release();
  uint64_t v6 = v5 + 1;
  uint64_t v7 = (uint64_t *)(a2 + 8);
  int v8 = *((unsigned __int8 *)v5 + 16);
  int v9 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 254)
  {
    if (v9 == 254) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (v9 == 254)
  {
    outlined destroy of ToolbarStorage.NavigationProperties.Actions((uint64_t)(v5 + 1));
    goto LABEL_6;
  }
  if (v8 != 255)
  {
    if (v9 != 255)
    {
      char v14 = v9 & 1;
      uint64_t v15 = *v7;
      outlined copy of PlatformItemCollection.Storage(*v7, v9 & 1);
      uint64_t v16 = v5[1];
      char v17 = *((unsigned char *)v5 + 16);
      v5[1] = v15;
      *((unsigned char *)v5 + 16) = v14;
      outlined consume of PlatformItemCollection.Storage(v16, v17);
      goto LABEL_14;
    }
    outlined destroy of PlatformItemCollection((uint64_t)(v5 + 1));
LABEL_6:
    char v10 = *(unsigned char *)(a2 + 16);
    *uint64_t v6 = *v7;
    *((unsigned char *)v5 + 16) = v10;
    goto LABEL_14;
  }
LABEL_8:
  if (v9 == 255)
  {
LABEL_9:
    uint64_t v11 = *v7;
    *((unsigned char *)v5 + 16) = *(unsigned char *)(a2 + 16);
    *uint64_t v6 = v11;
    goto LABEL_14;
  }
  char v12 = v9 & 1;
  uint64_t v13 = *v7;
  outlined copy of PlatformItemCollection.Storage(*v7, v9 & 1);
  v5[1] = v13;
  *((unsigned char *)v5 + 16) = v12;
LABEL_14:
  uint64_t v18 = *(int *)(a3 + 24);
  uint64_t v19 = (uint64_t)v5 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for PlatformItemList.Item();
  uint64_t v22 = *(void *)(v21 - 8);
  unint64_t v23 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  int v24 = v23(v19, 1, v21);
  int v25 = v23(v20, 1, v21);
  if (!v24)
  {
    if (v25)
    {
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v19, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      goto LABEL_23;
    }
    unint64_t v46 = *(void **)v19;
    long long v47 = *(void **)v20;
    *(void *)uint64_t v19 = *(void *)v20;
    id v48 = v47;

    long long v49 = *(void **)(v19 + 8);
    uint64_t v50 = *(void **)(v20 + 8);
    *(void *)(v19 + 8) = v50;
    id v51 = v50;

    *(void *)(v19 + 16) = *(void *)(v20 + 16);
    *(void *)(v19 + 24) = *(void *)(v20 + 24);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
    *(void *)(v19 + 40) = *(void *)(v20 + 40);
    *(void *)(v19 + 48) = *(void *)(v20 + 48);
    swift_retain();
    swift_release();
    *(unsigned char *)(v19 + 56) = *(unsigned char *)(v20 + 56);
    uint64_t v52 = (_OWORD *)(v19 + 64);
    uint64_t v53 = (id *)(v20 + 64);
    unint64_t v54 = *(void *)(v20 + 184) & 0xFFFFFFFFFFFFFFFELL;
    v359 = (int *)v21;
    if (*(void *)(v19 + 184) >> 1 == 4294967294)
    {
      if (v54 == 0x1FFFFFFFCLL)
      {
        long long v55 = *(_OWORD *)v53;
        long long v56 = *(_OWORD *)(v20 + 80);
        long long v57 = *(_OWORD *)(v20 + 112);
        *(_OWORD *)(v19 + 96) = *(_OWORD *)(v20 + 96);
        *(_OWORD *)(v19 + 112) = v57;
        _OWORD *v52 = v55;
        *(_OWORD *)(v19 + 80) = v56;
        long long v58 = *(_OWORD *)(v20 + 128);
        long long v59 = *(_OWORD *)(v20 + 144);
        long long v60 = *(_OWORD *)(v20 + 176);
        *(_OWORD *)(v19 + 160) = *(_OWORD *)(v20 + 160);
        *(_OWORD *)(v19 + 176) = v60;
        *(_OWORD *)(v19 + 128) = v58;
        *(_OWORD *)(v19 + 144) = v59;
        long long v61 = *(_OWORD *)(v20 + 192);
        long long v62 = *(_OWORD *)(v20 + 208);
        long long v63 = *(_OWORD *)(v20 + 224);
        *(_DWORD *)(v19 + 239) = *(_DWORD *)(v20 + 239);
        *(_OWORD *)(v19 + 208) = v62;
        *(_OWORD *)(v19 + 224) = v63;
        *(_OWORD *)(v19 + 192) = v61;
      }
      else
      {
        int v144 = *(unsigned __int8 *)(v20 + 72);
        if (v144 == 255)
        {
          id v151 = *v53;
          *(unsigned char *)(v19 + 72) = *(unsigned char *)(v20 + 72);
          *(void *)uint64_t v52 = v151;
        }
        else
        {
          id v145 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(v20 + 72));
          *(void *)(v19 + 64) = v145;
          *(unsigned char *)(v19 + 72) = v144;
        }
        *(void *)(v19 + 80) = *(void *)(v20 + 80);
        *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 88);
        *(unsigned char *)(v19 + 104) = *(unsigned char *)(v20 + 104);
        long long v152 = *(_OWORD *)(v20 + 108);
        *(unsigned char *)(v19 + 124) = *(unsigned char *)(v20 + 124);
        *(_OWORD *)(v19 + 108) = v152;
        long long v153 = *(_OWORD *)(v20 + 128);
        long long v154 = *(_OWORD *)(v20 + 144);
        *(unsigned char *)(v19 + 160) = *(unsigned char *)(v20 + 160);
        *(_OWORD *)(v19 + 128) = v153;
        *(_OWORD *)(v19 + 144) = v154;
        *(unsigned char *)(v19 + 161) = *(unsigned char *)(v20 + 161);
        *(unsigned char *)(v19 + 162) = *(unsigned char *)(v20 + 162);
        *(unsigned char *)(v19 + 163) = *(unsigned char *)(v20 + 163);
        unint64_t v155 = *(void *)(v20 + 184);
        if (v155 >> 1 == 0xFFFFFFFF)
        {
          long long v156 = *(_OWORD *)(v20 + 184);
          *(_OWORD *)(v19 + 168) = *(_OWORD *)(v20 + 168);
          *(_OWORD *)(v19 + 184) = v156;
        }
        else
        {
          uint64_t v157 = *(void *)(v20 + 168);
          uint64_t v158 = *(void *)(v20 + 176);
          uint64_t v159 = *(void *)(v20 + 192);
          outlined copy of AccessibilityImageLabel(v157, v158, *(void *)(v20 + 184));
          *(void *)(v19 + 168) = v157;
          *(void *)(v19 + 176) = v158;
          *(void *)(v19 + 184) = v155;
          *(void *)(v19 + 192) = v159;
        }
        *(void *)(v19 + 200) = *(void *)(v20 + 200);
        *(void *)(v19 + 208) = *(void *)(v20 + 208);
        *(unsigned char *)(v19 + 216) = *(unsigned char *)(v20 + 216);
        *(unsigned char *)(v19 + 217) = *(unsigned char *)(v20 + 217);
        int v160 = *(_DWORD *)(v20 + 220);
        *(unsigned char *)(v19 + 224) = *(unsigned char *)(v20 + 224);
        *(_DWORD *)(v19 + 220) = v160;
        uint64_t v161 = *(void **)(v20 + 232);
        *(void *)(v19 + 232) = v161;
        *(_WORD *)(v19 + 240) = *(_WORD *)(v20 + 240);
        *(unsigned char *)(v19 + 242) = *(unsigned char *)(v20 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        id v162 = v161;
      }
    }
    else if (v54 == 0x1FFFFFFFCLL)
    {
      outlined destroy of Image.Resolved(v19 + 64);
      long long v66 = *(_OWORD *)(v20 + 112);
      long long v68 = *(_OWORD *)v53;
      long long v67 = *(_OWORD *)(v20 + 80);
      *(_OWORD *)(v19 + 96) = *(_OWORD *)(v20 + 96);
      *(_OWORD *)(v19 + 112) = v66;
      _OWORD *v52 = v68;
      *(_OWORD *)(v19 + 80) = v67;
      long long v69 = *(_OWORD *)(v20 + 176);
      long long v71 = *(_OWORD *)(v20 + 128);
      long long v70 = *(_OWORD *)(v20 + 144);
      *(_OWORD *)(v19 + 160) = *(_OWORD *)(v20 + 160);
      *(_OWORD *)(v19 + 176) = v69;
      *(_OWORD *)(v19 + 128) = v71;
      *(_OWORD *)(v19 + 144) = v70;
      long long v73 = *(_OWORD *)(v20 + 208);
      long long v72 = *(_OWORD *)(v20 + 224);
      long long v74 = *(_OWORD *)(v20 + 192);
      *(_DWORD *)(v19 + 239) = *(_DWORD *)(v20 + 239);
      *(_OWORD *)(v19 + 208) = v73;
      *(_OWORD *)(v19 + 224) = v72;
      *(_OWORD *)(v19 + 192) = v74;
    }
    else
    {
      int v146 = *(unsigned __int8 *)(v20 + 72);
      if (*(unsigned __int8 *)(v19 + 72) == 255)
      {
        if (v146 == 255)
        {
          id v165 = *v53;
          *(unsigned char *)(v19 + 72) = *(unsigned char *)(v20 + 72);
          *(void *)uint64_t v52 = v165;
        }
        else
        {
          id v163 = *v53;
          outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(v20 + 72));
          *(void *)(v19 + 64) = v163;
          *(unsigned char *)(v19 + 72) = v146;
        }
      }
      else if (v146 == 255)
      {
        outlined destroy of GraphicsImage.Contents(v19 + 64);
        char v164 = *(unsigned char *)(v20 + 72);
        *(void *)uint64_t v52 = *v53;
        *(unsigned char *)(v19 + 72) = v164;
      }
      else
      {
        id v147 = *v53;
        outlined copy of GraphicsImage.Contents(*v53, *(unsigned char *)(v20 + 72));
        char v148 = *(void **)(v19 + 64);
        *(void *)(v19 + 64) = v147;
        char v149 = *(unsigned char *)(v19 + 72);
        *(unsigned char *)(v19 + 72) = v146;
        outlined consume of GraphicsImage.Contents(v148, v149);
      }
      *(void *)(v19 + 80) = *(void *)(v20 + 80);
      *(void *)(v19 + 88) = *(void *)(v20 + 88);
      *(void *)(v19 + 96) = *(void *)(v20 + 96);
      *(unsigned char *)(v19 + 104) = *(unsigned char *)(v20 + 104);
      long long v166 = *(_OWORD *)(v20 + 108);
      *(unsigned char *)(v19 + 124) = *(unsigned char *)(v20 + 124);
      *(_OWORD *)(v19 + 108) = v166;
      long long v167 = *(_OWORD *)(v20 + 128);
      long long v168 = *(_OWORD *)(v20 + 144);
      *(unsigned char *)(v19 + 160) = *(unsigned char *)(v20 + 160);
      *(_OWORD *)(v19 + 128) = v167;
      *(_OWORD *)(v19 + 144) = v168;
      *(unsigned char *)(v19 + 161) = *(unsigned char *)(v20 + 161);
      *(unsigned char *)(v19 + 162) = *(unsigned char *)(v20 + 162);
      *(unsigned char *)(v19 + 163) = *(unsigned char *)(v20 + 163);
      uint64_t v169 = (_OWORD *)(v19 + 168);
      uint64_t v170 = (_OWORD *)(v20 + 168);
      uint64_t v171 = *(void *)(v20 + 184);
      unint64_t v172 = v171 & 0xFFFFFFFFFFFFFFFELL;
      if (*(void *)(v19 + 184) >> 1 == 0xFFFFFFFFLL)
      {
        if (v172 == 0x1FFFFFFFELL)
        {
          long long v173 = *(_OWORD *)(v20 + 184);
          *uint64_t v169 = *v170;
          *(_OWORD *)(v19 + 184) = v173;
        }
        else
        {
          uint64_t v175 = *(void *)(v20 + 168);
          uint64_t v176 = *(void *)(v20 + 176);
          uint64_t v177 = *(void *)(v20 + 192);
          outlined copy of AccessibilityImageLabel(v175, v176, *(void *)(v20 + 184));
          *(void *)(v19 + 168) = v175;
          *(void *)(v19 + 176) = v176;
          *(void *)(v19 + 184) = v171;
          *(void *)(v19 + 192) = v177;
        }
      }
      else if (v172 == 0x1FFFFFFFELL)
      {
        outlined destroy of AccessibilityImageLabel(v19 + 168);
        long long v174 = *(_OWORD *)(v20 + 184);
        *uint64_t v169 = *v170;
        *(_OWORD *)(v19 + 184) = v174;
      }
      else
      {
        uint64_t v178 = *(void *)(v20 + 168);
        uint64_t v179 = *(void *)(v20 + 176);
        uint64_t v180 = *(void *)(v20 + 192);
        outlined copy of AccessibilityImageLabel(v178, v179, *(void *)(v20 + 184));
        uint64_t v181 = *(void *)(v19 + 168);
        uint64_t v182 = *(void *)(v19 + 176);
        uint64_t v183 = *(void *)(v19 + 184);
        *(void *)(v19 + 168) = v178;
        *(void *)(v19 + 176) = v179;
        *(void *)(v19 + 184) = v171;
        *(void *)(v19 + 192) = v180;
        outlined consume of AccessibilityImageLabel(v181, v182, v183);
      }
      *(void *)(v19 + 200) = *(void *)(v20 + 200);
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      *(void *)(v19 + 208) = *(void *)(v20 + 208);
      swift_retain();
      swift_release();
      *(unsigned char *)(v19 + 216) = *(unsigned char *)(v20 + 216);
      *(unsigned char *)(v19 + 217) = *(unsigned char *)(v20 + 217);
      int v184 = *(_DWORD *)(v20 + 220);
      *(unsigned char *)(v19 + 224) = *(unsigned char *)(v20 + 224);
      *(_DWORD *)(v19 + 220) = v184;
      uint64_t v185 = *(void **)(v19 + 232);
      v186 = *(void **)(v20 + 232);
      *(void *)(v19 + 232) = v186;
      id v187 = v186;

      *(_WORD *)(v19 + 240) = *(_WORD *)(v20 + 240);
      *(unsigned char *)(v19 + 242) = *(unsigned char *)(v20 + 242);
    }
    id v188 = (long long *)(v19 + 248);
    char v189 = (long long *)(v20 + 248);
    uint64_t v190 = *(void *)(v20 + 256);
    if (!*(void *)(v19 + 256))
    {
      if (v190)
      {
        *(void *)(v19 + 248) = *(void *)(v20 + 248);
        *(void *)(v19 + 256) = *(void *)(v20 + 256);
        long long v194 = *(void **)(v20 + 264);
        swift_bridgeObjectRetain();
        if ((unint64_t)v194 >= 2) {
          id v195 = v194;
        }
        *(void *)(v19 + 264) = v194;
        int v196 = *(_DWORD *)(v20 + 272);
        *(unsigned char *)(v19 + 276) = *(unsigned char *)(v20 + 276);
        *(_DWORD *)(v19 + 272) = v196;
        *(unsigned char *)(v19 + 277) = *(unsigned char *)(v20 + 277);
        *(unsigned char *)(v19 + 278) = *(unsigned char *)(v20 + 278);
        *(void *)(v19 + 280) = *(void *)(v20 + 280);
        *(void *)(v19 + 288) = *(void *)(v20 + 288);
        swift_retain();
        swift_retain();
      }
      else
      {
        long long v199 = *v189;
        long long v200 = *(_OWORD *)(v20 + 280);
        *(_OWORD *)(v19 + 264) = *(_OWORD *)(v20 + 264);
        *(_OWORD *)(v19 + 280) = v200;
        *id v188 = v199;
      }
LABEL_107:
      long long v203 = (long long *)(v19 + 296);
      long long v204 = (long long *)(v20 + 296);
      unint64_t v205 = *(void *)(v20 + 328);
      unint64_t v206 = v205 & 0xFFFFFFFFFFFFFFFCLL;
      if (*(void *)(v19 + 328) >> 2 == 0xFFFFFFFFLL)
      {
        if (v206 == 0x3FFFFFFFCLL)
        {
          long long v207 = *v204;
          long long v208 = *(_OWORD *)(v20 + 328);
          *(_OWORD *)(v19 + 312) = *(_OWORD *)(v20 + 312);
          *(_OWORD *)(v19 + 328) = v208;
          *long long v203 = v207;
          long long v209 = *(_OWORD *)(v20 + 344);
          long long v210 = *(_OWORD *)(v20 + 360);
          long long v211 = *(_OWORD *)(v20 + 376);
          *(void *)(v19 + 392) = *(void *)(v20 + 392);
          *(_OWORD *)(v19 + 360) = v210;
          *(_OWORD *)(v19 + 376) = v211;
          *(_OWORD *)(v19 + 344) = v209;
        }
        else
        {
          v217 = *(void **)(v20 + 296);
          uint64_t v218 = *(void *)(v20 + 304);
          uint64_t v219 = *(void *)(v20 + 312);
          uint64_t v220 = *(void *)(v20 + 320);
          v354 = v5;
          uint64_t v222 = *(void *)(v20 + 336);
          uint64_t v221 = *(void *)(v20 + 344);
          uint64_t v223 = *(void *)(v20 + 352);
          uint64_t v333 = *(void *)(v20 + 360);
          uint64_t v337 = *(void *)(v20 + 368);
          __dstb = *(void **)(v20 + 376);
          uint64_t v345 = *(void *)(v20 + 384);
          __srcc = *(void **)(v20 + 392);
          outlined copy of PlatformItemList.Item.SystemItem(v217, v218, v219, v220, v205, v222, v221, v223, v333, v337, (uint64_t)__dstb, v345, (uint64_t)__srcc);
          *(void *)(v19 + 296) = v217;
          *(void *)(v19 + 304) = v218;
          *(void *)(v19 + 312) = v219;
          *(void *)(v19 + 320) = v220;
          *(void *)(v19 + 328) = v205;
          *(void *)(v19 + 336) = v222;
          *(void *)(v19 + 344) = v221;
          *(void *)(v19 + 352) = v223;
          *(void *)(v19 + 360) = v333;
          *(void *)(v19 + 368) = v337;
          *(void *)(v19 + 376) = __dstb;
          *(void *)(v19 + 384) = v345;
          uint64_t v5 = v354;
          *(void *)(v19 + 392) = __srcc;
        }
      }
      else if (v206 == 0x3FFFFFFFCLL)
      {
        outlined destroy of PlatformItemList.Item.SystemItem(v19 + 296);
        long long v213 = *(_OWORD *)(v20 + 312);
        long long v212 = *(_OWORD *)(v20 + 328);
        *long long v203 = *v204;
        *(_OWORD *)(v19 + 312) = v213;
        *(_OWORD *)(v19 + 328) = v212;
        long long v215 = *(_OWORD *)(v20 + 360);
        long long v214 = *(_OWORD *)(v20 + 376);
        long long v216 = *(_OWORD *)(v20 + 344);
        *(void *)(v19 + 392) = *(void *)(v20 + 392);
        *(_OWORD *)(v19 + 360) = v215;
        *(_OWORD *)(v19 + 376) = v214;
        *(_OWORD *)(v19 + 344) = v216;
      }
      else
      {
        uint64_t v224 = *(void **)(v20 + 296);
        uint64_t v225 = *(void *)(v20 + 304);
        uint64_t v226 = *(void *)(v20 + 312);
        uint64_t v227 = *(void *)(v20 + 320);
        v355 = v5;
        uint64_t v228 = *(void *)(v20 + 336);
        uint64_t v229 = *(void *)(v20 + 360);
        uint64_t v334 = *(void *)(v20 + 352);
        uint64_t v338 = *(void *)(v20 + 344);
        uint64_t v230 = *(void *)(v20 + 368);
        __dstc = *(void **)(v20 + 376);
        uint64_t v346 = *(void *)(v20 + 384);
        __srcd = *(void **)(v20 + 392);
        outlined copy of PlatformItemList.Item.SystemItem(v224, v225, v226, v227, v205, v228, v338, v334, v229, v230, (uint64_t)__dstc, v346, (uint64_t)__srcd);
        long long v231 = *(void **)(v19 + 296);
        uint64_t v232 = *(void *)(v19 + 304);
        uint64_t v233 = *(void *)(v19 + 312);
        uint64_t v234 = *(void *)(v19 + 320);
        unint64_t v235 = *(void *)(v19 + 328);
        uint64_t v236 = *(void *)(v19 + 336);
        uint64_t v237 = *(void *)(v19 + 344);
        uint64_t v238 = *(void *)(v19 + 352);
        long long v239 = *(_OWORD *)(v19 + 360);
        long long v240 = *(_OWORD *)(v19 + 376);
        uint64_t v241 = *(void *)(v19 + 392);
        *(void *)(v19 + 296) = v224;
        *(void *)(v19 + 304) = v225;
        *(void *)(v19 + 312) = v226;
        *(void *)(v19 + 320) = v227;
        *(void *)(v19 + 328) = v205;
        *(void *)(v19 + 336) = v228;
        *(void *)(v19 + 344) = v338;
        *(void *)(v19 + 352) = v334;
        *(void *)(v19 + 360) = v229;
        *(void *)(v19 + 368) = v230;
        *(void *)(v19 + 376) = __dstc;
        *(void *)(v19 + 384) = v346;
        uint64_t v5 = v355;
        *(void *)(v19 + 392) = __srcd;
        outlined consume of PlatformItemList.Item.SystemItem(v231, v232, v233, v234, v235, v236, v237, v238, v239, *((uint64_t *)&v239 + 1), v240, SBYTE8(v240), v241);
      }
      long long v242 = (_OWORD *)(v19 + 400);
      long long v243 = (_OWORD *)(v20 + 400);
      long long v244 = (_OWORD *)(v19 + 408);
      uint64_t v245 = *(void *)(v19 + 408);
      uint64_t v246 = (_OWORD *)(v20 + 408);
      uint64_t v247 = *(void *)(v20 + 408);
      if (v245 == 1)
      {
        if (v247 == 1)
        {
          *long long v242 = *v243;
          long long v248 = *(_OWORD *)(v20 + 416);
          long long v249 = *(_OWORD *)(v20 + 432);
          long long v250 = *(_OWORD *)(v20 + 448);
          *(unsigned char *)(v19 + 464) = *(unsigned char *)(v20 + 464);
          *(_OWORD *)(v19 + 432) = v249;
          *(_OWORD *)(v19 + 448) = v250;
          *(_OWORD *)(v19 + 416) = v248;
          goto LABEL_149;
        }
        *(unsigned char *)(v19 + 400) = *(unsigned char *)(v20 + 400);
        *(unsigned char *)(v19 + 401) = *(unsigned char *)(v20 + 401);
        *(unsigned char *)(v19 + 402) = *(unsigned char *)(v20 + 402);
        *(unsigned char *)(v19 + 403) = *(unsigned char *)(v20 + 403);
        *(unsigned char *)(v19 + 404) = *(unsigned char *)(v20 + 404);
        uint64_t v254 = *(void *)(v20 + 408);
        if (v254)
        {
          uint64_t v255 = *(void *)(v20 + 416);
          *(void *)(v19 + 408) = v254;
          *(void *)(v19 + 416) = v255;
          swift_retain();
        }
        else
        {
          *long long v244 = *v246;
        }
        uint64_t v258 = *(void *)(v20 + 424);
        if (v258)
        {
          uint64_t v259 = *(void *)(v20 + 432);
          *(void *)(v19 + 424) = v258;
          *(void *)(v19 + 432) = v259;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v19 + 424) = *(_OWORD *)(v20 + 424);
        }
        uint64_t v261 = *(void *)(v20 + 440);
        if (!v261)
        {
          *(_OWORD *)(v19 + 440) = *(_OWORD *)(v20 + 440);
LABEL_148:
          *(void *)(v19 + 456) = *(void *)(v20 + 456);
          *(unsigned char *)(v19 + 464) = *(unsigned char *)(v20 + 464);
LABEL_149:
          *(void *)(v19 + 472) = *(void *)(v20 + 472);
          *(void *)(v19 + 480) = *(void *)(v20 + 480);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v19 + 488) = *(void *)(v20 + 488);
          *(unsigned char *)(v19 + 496) = *(unsigned char *)(v20 + 496);
          uint64_t v267 = *(void *)(v20 + 504);
          if (*(void *)(v19 + 504))
          {
            if (v267)
            {
              uint64_t v268 = *(void *)(v20 + 512);
              *(void *)(v19 + 504) = v267;
              *(void *)(v19 + 512) = v268;
              swift_retain();
              swift_release();
              goto LABEL_156;
            }
            swift_release();
          }
          else if (v267)
          {
            uint64_t v269 = *(void *)(v20 + 512);
            *(void *)(v19 + 504) = v267;
            *(void *)(v19 + 512) = v269;
            swift_retain();
            goto LABEL_156;
          }
          *(_OWORD *)(v19 + 504) = *(_OWORD *)(v20 + 504);
LABEL_156:
          *(_WORD *)(v19 + 520) = *(_WORD *)(v20 + 520);
          uint64_t v270 = (_OWORD *)(v19 + 528);
          uint64_t v271 = (_OWORD *)(v20 + 528);
          uint64_t v272 = *(void *)(v20 + 528);
          if (*(void *)(v19 + 528))
          {
            if (v272)
            {
              *(void *)(v19 + 528) = v272;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              *(void *)(v19 + 536) = *(void *)(v20 + 536);
              swift_retain();
              swift_release();
              *(void *)(v19 + 544) = *(void *)(v20 + 544);
              swift_retain();
              swift_release();
            }
            else
            {
              outlined destroy of PlatformItemList.Item.Accessibility(v19 + 528);
              uint64_t v273 = *(void *)(v20 + 544);
              *uint64_t v270 = *v271;
              *(void *)(v19 + 544) = v273;
            }
          }
          else if (v272)
          {
            *(void *)(v19 + 528) = v272;
            *(void *)(v19 + 536) = *(void *)(v20 + 536);
            *(void *)(v19 + 544) = *(void *)(v20 + 544);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            long long v274 = *v271;
            *(void *)(v19 + 544) = *(void *)(v20 + 544);
            *uint64_t v270 = v274;
          }
          v275 = (long long *)(v19 + 552);
          v276 = (long long *)(v20 + 552);
          uint64_t v277 = *(void *)(v20 + 552);
          if (*(void *)(v19 + 552) == 1)
          {
            uint64_t v278 = v359;
            if (v277 == 1)
            {
              long long v279 = *v276;
              *(void *)(v19 + 568) = *(void *)(v20 + 568);
              long long *v275 = v279;
              goto LABEL_179;
            }
            *(void *)(v19 + 552) = v277;
            uint64_t v281 = *(void *)(v20 + 560);
            swift_retain();
            if (!v281)
            {
              *(_OWORD *)(v19 + 560) = *(_OWORD *)(v20 + 560);
              goto LABEL_179;
            }
            uint64_t v282 = *(void *)(v20 + 568);
            *(void *)(v19 + 560) = v281;
            goto LABEL_176;
          }
          if (v277 == 1)
          {
            outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v19 + 552);
            uint64_t v280 = *(void *)(v20 + 568);
            long long *v275 = *v276;
            *(void *)(v19 + 568) = v280;
            uint64_t v278 = v359;
            goto LABEL_179;
          }
          *(void *)(v19 + 552) = v277;
          swift_retain();
          swift_release();
          uint64_t v283 = *(void *)(v20 + 560);
          if (*(void *)(v19 + 560))
          {
            uint64_t v278 = v359;
            if (v283)
            {
              uint64_t v284 = *(void *)(v20 + 568);
              *(void *)(v19 + 560) = v283;
              *(void *)(v19 + 568) = v284;
              swift_retain();
              swift_release();
              goto LABEL_179;
            }
            swift_release();
          }
          else
          {
            uint64_t v278 = v359;
            if (v283)
            {
              uint64_t v282 = *(void *)(v20 + 568);
              *(void *)(v19 + 560) = v283;
LABEL_176:
              *(void *)(v19 + 568) = v282;
              swift_retain();
              goto LABEL_179;
            }
          }
          *(_OWORD *)(v19 + 560) = *(_OWORD *)(v20 + 560);
LABEL_179:
          uint64_t v285 = *(void **)(v19 + 576);
          v286 = *(void **)(v20 + 576);
          *(void *)(v19 + 576) = v286;
          id v287 = v286;

          *(void *)(v19 + 584) = *(void *)(v20 + 584);
          *(void *)(v19 + 592) = *(void *)(v20 + 592);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v19 + 600) = *(void *)(v20 + 600);
          *(void *)(v19 + 608) = *(void *)(v20 + 608);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v19 + 616) = *(void *)(v20 + 616);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(void *)(v19 + 624) = *(void *)(v20 + 624);
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          *(unsigned char *)(v19 + 632) = *(unsigned char *)(v20 + 632);
          *(unsigned char *)(v19 + 633) = *(unsigned char *)(v20 + 633);
          *(unsigned char *)(v19 + 634) = *(unsigned char *)(v20 + 634);
          uint64_t v288 = v278[28];
          uint64_t v289 = (unsigned char *)(v19 + v288);
          char v290 = (unsigned char *)(v20 + v288);
          uint64_t v291 = type metadata accessor for CommandOperation();
          uint64_t v347 = *(void *)(v291 - 8);
          uint64_t v292 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v347 + 48);
          v293 = v289;
          LODWORD(v289) = v292(v289, 1, v291);
          int v294 = v292(v290, 1, v291);
          if (v289)
          {
            if (!v294)
            {
              v356 = v5;
              unsigned char *v293 = *v290;
              uint64_t v295 = *(int *)(v291 + 20);
              v296 = &v293[v295];
              uint64_t v297 = &v290[v295];
              uint64_t v298 = *(void *)&v290[v295];
              uint64_t v299 = *(void *)&v290[v295 + 8];
              char v300 = v290[v295 + 16];
              outlined copy of Text.Storage(v298, v299, v300);
              *(void *)v296 = v298;
              *((void *)v296 + 1) = v299;
              v296[16] = v300;
              *((void *)v296 + 3) = *((void *)v297 + 3);
              uint64_t v301 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              __dstd = &v296[v301];
              uint64_t v302 = &v297[v301];
              uint64_t v303 = type metadata accessor for UUID();
              char v304 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v303 - 8) + 16);
              swift_bridgeObjectRetain();
              v304(__dstd, v302, v303);
              uint64_t v305 = *(int *)(v291 + 24);
              uint64_t v306 = &v293[v305];
              char v307 = &v290[v305];
              if (*v307)
              {
                uint64_t v308 = v307[1];
                *uint64_t v306 = *v307;
                v306[1] = v308;
                swift_retain();
              }
              else
              {
                *(_OWORD *)uint64_t v306 = *(_OWORD *)v307;
              }
              uint64_t v5 = v356;
              uint64_t v278 = v359;
              (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v347 + 56))(v293, 0, 1, v291);
              goto LABEL_191;
            }
          }
          else
          {
            if (!v294)
            {
              v357 = v5;
              unsigned char *v293 = *v290;
              uint64_t v310 = *(int *)(v291 + 20);
              uint64_t v311 = &v293[v310];
              uint64_t v312 = &v290[v310];
              uint64_t v313 = *(void *)&v290[v310];
              uint64_t v314 = *(void *)&v290[v310 + 8];
              char v315 = v290[v310 + 16];
              outlined copy of Text.Storage(v313, v314, v315);
              uint64_t v316 = *(void *)v311;
              uint64_t v317 = *((void *)v311 + 1);
              char v318 = v311[16];
              *(void *)uint64_t v311 = v313;
              *((void *)v311 + 1) = v314;
              v311[16] = v315;
              outlined consume of Text.Storage(v316, v317, v318);
              *((void *)v311 + 3) = *((void *)v312 + 3);
              swift_bridgeObjectRetain();
              swift_bridgeObjectRelease();
              uint64_t v319 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
              uint64_t v320 = &v311[v319];
              uint64_t v321 = &v312[v319];
              uint64_t v322 = type metadata accessor for UUID();
              (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v322 - 8) + 24))(v320, v321, v322);
              uint64_t v323 = *(int *)(v291 + 24);
              uint64_t v324 = &v293[v323];
              uint64_t v325 = &v290[v323];
              uint64_t v326 = *(void *)&v293[v323];
              uint64_t v327 = *(void *)&v290[v323];
              if (v326)
              {
                uint64_t v5 = v357;
                if (v327)
                {
                  uint64_t v328 = *((void *)v325 + 1);
                  *uint64_t v324 = v327;
                  v324[1] = v328;
                  swift_retain();
                  swift_release();
                  uint64_t v278 = v359;
                  goto LABEL_191;
                }
                swift_release();
              }
              else
              {
                uint64_t v5 = v357;
                if (v327)
                {
                  uint64_t v330 = *((void *)v325 + 1);
                  *uint64_t v324 = v327;
                  v324[1] = v330;
                  swift_retain();
                  uint64_t v278 = v359;
                  goto LABEL_191;
                }
              }
              *(_OWORD *)uint64_t v324 = *(_OWORD *)v325;
              uint64_t v278 = v359;
              goto LABEL_191;
            }
            outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v293, (uint64_t (*)(void))type metadata accessor for CommandOperation);
          }
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v293, v290, *(void *)(*(void *)(v309 - 8) + 64));
LABEL_191:
          *(unsigned char *)(v19 + v278[29]) = *(unsigned char *)(v20 + v278[29]);
          *(unsigned char *)(v19 + v278[30]) = *(unsigned char *)(v20 + v278[30]);
          *(unsigned char *)(v19 + v278[31]) = *(unsigned char *)(v20 + v278[31]);
          *(unsigned char *)(v19 + v278[32]) = *(unsigned char *)(v20 + v278[32]);
          *(void *)(v19 + v278[33]) = *(void *)(v20 + v278[33]);
          swift_retain();
          swift_release();
          return v5;
        }
LABEL_145:
        uint64_t v266 = *(void *)(v20 + 448);
        *(void *)(v19 + 440) = v261;
        *(void *)(v19 + 448) = v266;
        swift_retain();
        goto LABEL_148;
      }
      if (v247 == 1)
      {
        outlined destroy of PlatformItemList.Item.SelectionBehavior(v19 + 400);
        *long long v242 = *v243;
        long long v252 = *(_OWORD *)(v20 + 432);
        long long v251 = *(_OWORD *)(v20 + 448);
        long long v253 = *(_OWORD *)(v20 + 416);
        *(unsigned char *)(v19 + 464) = *(unsigned char *)(v20 + 464);
        *(_OWORD *)(v19 + 432) = v252;
        *(_OWORD *)(v19 + 448) = v251;
        *(_OWORD *)(v19 + 416) = v253;
        goto LABEL_149;
      }
      *(unsigned char *)(v19 + 400) = *(unsigned char *)v243;
      *(unsigned char *)(v19 + 401) = *(unsigned char *)(v20 + 401);
      *(unsigned char *)(v19 + 402) = *(unsigned char *)(v20 + 402);
      *(unsigned char *)(v19 + 403) = *(unsigned char *)(v20 + 403);
      *(unsigned char *)(v19 + 404) = *(unsigned char *)(v20 + 404);
      uint64_t v256 = *(void *)(v20 + 408);
      if (v245)
      {
        if (v256)
        {
          uint64_t v257 = *(void *)(v20 + 416);
          *(void *)(v19 + 408) = v256;
          *(void *)(v19 + 416) = v257;
          swift_retain();
          swift_release();
          goto LABEL_134;
        }
        swift_release();
      }
      else if (v256)
      {
        uint64_t v260 = *(void *)(v20 + 416);
        *(void *)(v19 + 408) = v256;
        *(void *)(v19 + 416) = v260;
        swift_retain();
        goto LABEL_134;
      }
      *long long v244 = *v246;
LABEL_134:
      uint64_t v262 = *(void *)(v20 + 424);
      if (*(void *)(v19 + 424))
      {
        if (v262)
        {
          uint64_t v263 = *(void *)(v20 + 432);
          *(void *)(v19 + 424) = v262;
          *(void *)(v19 + 432) = v263;
          swift_retain();
          swift_release();
          goto LABEL_141;
        }
        swift_release();
      }
      else if (v262)
      {
        uint64_t v264 = *(void *)(v20 + 432);
        *(void *)(v19 + 424) = v262;
        *(void *)(v19 + 432) = v264;
        swift_retain();
        goto LABEL_141;
      }
      *(_OWORD *)(v19 + 424) = *(_OWORD *)(v20 + 424);
LABEL_141:
      uint64_t v261 = *(void *)(v20 + 440);
      if (*(void *)(v19 + 440))
      {
        if (v261)
        {
          uint64_t v265 = *(void *)(v20 + 448);
          *(void *)(v19 + 440) = v261;
          *(void *)(v19 + 448) = v265;
          swift_retain();
          swift_release();
          goto LABEL_148;
        }
        swift_release();
      }
      else if (v261)
      {
        goto LABEL_145;
      }
      *(_OWORD *)(v19 + 440) = *(_OWORD *)(v20 + 440);
      goto LABEL_148;
    }
    if (!v190)
    {
      outlined destroy of Image.NamedResolved(v19 + 248);
      long long v198 = *(_OWORD *)(v20 + 264);
      long long v197 = *(_OWORD *)(v20 + 280);
      *id v188 = *v189;
      *(_OWORD *)(v19 + 264) = v198;
      *(_OWORD *)(v19 + 280) = v197;
      goto LABEL_107;
    }
    *(void *)(v19 + 248) = *(void *)(v20 + 248);
    *(void *)(v19 + 256) = *(void *)(v20 + 256);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    int v191 = *(void **)(v19 + 264);
    long long v192 = *(void **)(v20 + 264);
    if ((unint64_t)v191 >= 2)
    {
      if ((unint64_t)v192 >= 2)
      {
        *(void *)(v19 + 264) = v192;
        id v201 = v192;

        goto LABEL_106;
      }

      long long v192 = *(void **)(v20 + 264);
    }
    else if ((unint64_t)v192 >= 2)
    {
      *(void *)(v19 + 264) = v192;
      id v193 = v192;
LABEL_106:
      int v202 = *(_DWORD *)(v20 + 272);
      *(unsigned char *)(v19 + 276) = *(unsigned char *)(v20 + 276);
      *(_DWORD *)(v19 + 272) = v202;
      *(unsigned char *)(v19 + 277) = *(unsigned char *)(v20 + 277);
      *(unsigned char *)(v19 + 278) = *(unsigned char *)(v20 + 278);
      *(void *)(v19 + 280) = *(void *)(v20 + 280);
      swift_retain();
      swift_release();
      *(void *)(v19 + 288) = *(void *)(v20 + 288);
      swift_retain();
      swift_release();
      goto LABEL_107;
    }
    *(void *)(v19 + 264) = v192;
    goto LABEL_106;
  }
  if (v25)
  {
LABEL_23:
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy((void *)v19, (const void *)v20, *(void *)(*(void *)(v45 - 8) + 64));
    return v5;
  }
  uint64_t v344 = v22;
  v358 = (int *)v21;
  long long v26 = *(void **)v20;
  *(void *)uint64_t v19 = *(void *)v20;
  long long v27 = *(void **)(v20 + 8);
  *(void *)(v19 + 8) = v27;
  *(void *)(v19 + 16) = *(void *)(v20 + 16);
  *(void *)(v19 + 24) = *(void *)(v20 + 24);
  *(unsigned char *)(v19 + 32) = *(unsigned char *)(v20 + 32);
  *(void *)(v19 + 40) = *(void *)(v20 + 40);
  *(void *)(v19 + 48) = *(void *)(v20 + 48);
  *(unsigned char *)(v19 + 56) = *(unsigned char *)(v20 + 56);
  long long v28 = (void *)(v19 + 64);
  long long v29 = (id *)(v20 + 64);
  unint64_t v30 = *(void *)(v20 + 184);
  id v31 = v26;
  id v32 = v27;
  swift_bridgeObjectRetain();
  swift_retain();
  if (v30 >> 1 != 4294967294)
  {
    int v64 = *(unsigned __int8 *)(v20 + 72);
    if (v64 == 255)
    {
      id v75 = *v29;
      *(unsigned char *)(v19 + 72) = *(unsigned char *)(v20 + 72);
      *long long v28 = v75;
    }
    else
    {
      id v65 = *v29;
      outlined copy of GraphicsImage.Contents(*v29, *(unsigned char *)(v20 + 72));
      *(void *)(v19 + 64) = v65;
      *(unsigned char *)(v19 + 72) = v64;
    }
    *(void *)(v19 + 80) = *(void *)(v20 + 80);
    *(_OWORD *)(v19 + 88) = *(_OWORD *)(v20 + 88);
    *(unsigned char *)(v19 + 104) = *(unsigned char *)(v20 + 104);
    long long v76 = *(_OWORD *)(v20 + 108);
    *(unsigned char *)(v19 + 124) = *(unsigned char *)(v20 + 124);
    *(_OWORD *)(v19 + 108) = v76;
    long long v77 = *(_OWORD *)(v20 + 128);
    long long v78 = *(_OWORD *)(v20 + 144);
    *(unsigned char *)(v19 + 160) = *(unsigned char *)(v20 + 160);
    *(_OWORD *)(v19 + 128) = v77;
    *(_OWORD *)(v19 + 144) = v78;
    *(unsigned char *)(v19 + 161) = *(unsigned char *)(v20 + 161);
    *(unsigned char *)(v19 + 162) = *(unsigned char *)(v20 + 162);
    *(unsigned char *)(v19 + 163) = *(unsigned char *)(v20 + 163);
    unint64_t v79 = *(void *)(v20 + 184);
    if (v79 >> 1 == 0xFFFFFFFF)
    {
      long long v80 = *(_OWORD *)(v20 + 184);
      *(_OWORD *)(v19 + 168) = *(_OWORD *)(v20 + 168);
      *(_OWORD *)(v19 + 184) = v80;
    }
    else
    {
      uint64_t v81 = *(void *)(v20 + 168);
      uint64_t v82 = *(void *)(v20 + 176);
      uint64_t v83 = *(void *)(v20 + 192);
      outlined copy of AccessibilityImageLabel(v81, v82, *(void *)(v20 + 184));
      *(void *)(v19 + 168) = v81;
      *(void *)(v19 + 176) = v82;
      *(void *)(v19 + 184) = v79;
      *(void *)(v19 + 192) = v83;
    }
    *(void *)(v19 + 200) = *(void *)(v20 + 200);
    *(void *)(v19 + 208) = *(void *)(v20 + 208);
    *(unsigned char *)(v19 + 216) = *(unsigned char *)(v20 + 216);
    *(unsigned char *)(v19 + 217) = *(unsigned char *)(v20 + 217);
    int v84 = *(_DWORD *)(v20 + 220);
    *(unsigned char *)(v19 + 224) = *(unsigned char *)(v20 + 224);
    *(_DWORD *)(v19 + 220) = v84;
    uint64_t v85 = *(void **)(v20 + 232);
    *(void *)(v19 + 232) = v85;
    *(_WORD *)(v19 + 240) = *(_WORD *)(v20 + 240);
    *(unsigned char *)(v19 + 242) = *(unsigned char *)(v20 + 242);
    swift_unknownObjectRetain();
    swift_retain();
    id v86 = v85;
    if (*(void *)(v20 + 256)) {
      goto LABEL_18;
    }
LABEL_36:
    long long v87 = *(_OWORD *)(v20 + 248);
    long long v88 = *(_OWORD *)(v20 + 280);
    *(_OWORD *)(v19 + 264) = *(_OWORD *)(v20 + 264);
    *(_OWORD *)(v19 + 280) = v88;
    *(_OWORD *)(v19 + 248) = v87;
    goto LABEL_37;
  }
  long long v33 = *(_OWORD *)v29;
  long long v34 = *(_OWORD *)(v20 + 80);
  long long v35 = *(_OWORD *)(v20 + 112);
  *(_OWORD *)(v19 + 96) = *(_OWORD *)(v20 + 96);
  *(_OWORD *)(v19 + 112) = v35;
  *(_OWORD *)long long v28 = v33;
  *(_OWORD *)(v19 + 80) = v34;
  long long v36 = *(_OWORD *)(v20 + 128);
  long long v37 = *(_OWORD *)(v20 + 144);
  long long v38 = *(_OWORD *)(v20 + 176);
  *(_OWORD *)(v19 + 160) = *(_OWORD *)(v20 + 160);
  *(_OWORD *)(v19 + 176) = v38;
  *(_OWORD *)(v19 + 128) = v36;
  *(_OWORD *)(v19 + 144) = v37;
  long long v39 = *(_OWORD *)(v20 + 192);
  long long v40 = *(_OWORD *)(v20 + 208);
  long long v41 = *(_OWORD *)(v20 + 224);
  *(_DWORD *)(v19 + 239) = *(_DWORD *)(v20 + 239);
  *(_OWORD *)(v19 + 208) = v40;
  *(_OWORD *)(v19 + 224) = v41;
  *(_OWORD *)(v19 + 192) = v39;
  if (!*(void *)(v20 + 256)) {
    goto LABEL_36;
  }
LABEL_18:
  *(void *)(v19 + 248) = *(void *)(v20 + 248);
  *(void *)(v19 + 256) = *(void *)(v20 + 256);
  long long v42 = *(void **)(v20 + 264);
  swift_bridgeObjectRetain();
  if ((unint64_t)v42 >= 2) {
    id v43 = v42;
  }
  *(void *)(v19 + 264) = v42;
  int v44 = *(_DWORD *)(v20 + 272);
  *(unsigned char *)(v19 + 276) = *(unsigned char *)(v20 + 276);
  *(_DWORD *)(v19 + 272) = v44;
  *(unsigned char *)(v19 + 277) = *(unsigned char *)(v20 + 277);
  *(unsigned char *)(v19 + 278) = *(unsigned char *)(v20 + 278);
  *(void *)(v19 + 280) = *(void *)(v20 + 280);
  *(void *)(v19 + 288) = *(void *)(v20 + 288);
  swift_retain();
  swift_retain();
LABEL_37:
  unint64_t v89 = *(void *)(v20 + 328);
  v353 = v5;
  if (v89 >> 2 == 0xFFFFFFFF)
  {
    long long v90 = *(_OWORD *)(v20 + 296);
    long long v91 = *(_OWORD *)(v20 + 328);
    *(_OWORD *)(v19 + 312) = *(_OWORD *)(v20 + 312);
    *(_OWORD *)(v19 + 328) = v91;
    *(_OWORD *)(v19 + 296) = v90;
    long long v92 = *(_OWORD *)(v20 + 344);
    long long v93 = *(_OWORD *)(v20 + 360);
    long long v94 = *(_OWORD *)(v20 + 376);
    *(void *)(v19 + 392) = *(void *)(v20 + 392);
    *(_OWORD *)(v19 + 360) = v93;
    *(_OWORD *)(v19 + 376) = v94;
    *(_OWORD *)(v19 + 344) = v92;
  }
  else
  {
    uint64_t v95 = *(void **)(v20 + 296);
    uint64_t v96 = *(void *)(v20 + 304);
    uint64_t v97 = *(void *)(v20 + 312);
    uint64_t v98 = *(void *)(v20 + 320);
    uint64_t v100 = *(void *)(v20 + 336);
    uint64_t v99 = *(void *)(v20 + 344);
    uint64_t v101 = *(void *)(v20 + 352);
    uint64_t v331 = *(void *)(v20 + 360);
    uint64_t v332 = *(void *)(v20 + 368);
    uint64_t v335 = *(void *)(v20 + 376);
    __dsta = *(void **)(v20 + 384);
    __src = *(void **)(v20 + 392);
    outlined copy of PlatformItemList.Item.SystemItem(v95, v96, v97, v98, v89, v100, v99, v101, v331, v332, v335, (char)__dsta, (uint64_t)__src);
    *(void *)(v19 + 296) = v95;
    *(void *)(v19 + 304) = v96;
    *(void *)(v19 + 312) = v97;
    *(void *)(v19 + 320) = v98;
    *(void *)(v19 + 328) = v89;
    *(void *)(v19 + 336) = v100;
    *(void *)(v19 + 344) = v99;
    *(void *)(v19 + 352) = v101;
    *(void *)(v19 + 360) = v331;
    *(void *)(v19 + 368) = v332;
    *(void *)(v19 + 376) = v335;
    *(void *)(v19 + 384) = __dsta;
    *(void *)(v19 + 392) = __src;
  }
  if (*(void *)(v20 + 408) == 1)
  {
    *(_OWORD *)(v19 + 400) = *(_OWORD *)(v20 + 400);
    long long v102 = *(_OWORD *)(v20 + 416);
    long long v103 = *(_OWORD *)(v20 + 432);
    long long v104 = *(_OWORD *)(v20 + 448);
    *(unsigned char *)(v19 + 464) = *(unsigned char *)(v20 + 464);
    *(_OWORD *)(v19 + 432) = v103;
    *(_OWORD *)(v19 + 448) = v104;
    *(_OWORD *)(v19 + 416) = v102;
    goto LABEL_50;
  }
  *(unsigned char *)(v19 + 400) = *(unsigned char *)(v20 + 400);
  *(unsigned char *)(v19 + 401) = *(unsigned char *)(v20 + 401);
  *(unsigned char *)(v19 + 402) = *(unsigned char *)(v20 + 402);
  *(unsigned char *)(v19 + 403) = *(unsigned char *)(v20 + 403);
  *(unsigned char *)(v19 + 404) = *(unsigned char *)(v20 + 404);
  uint64_t v105 = *(void *)(v20 + 408);
  if (v105)
  {
    uint64_t v106 = *(void *)(v20 + 416);
    *(void *)(v19 + 408) = v105;
    *(void *)(v19 + 416) = v106;
    swift_retain();
    uint64_t v107 = *(void *)(v20 + 424);
    if (v107) {
      goto LABEL_44;
    }
LABEL_47:
    *(_OWORD *)(v19 + 424) = *(_OWORD *)(v20 + 424);
    uint64_t v109 = *(void *)(v20 + 440);
    if (v109) {
      goto LABEL_45;
    }
LABEL_48:
    *(_OWORD *)(v19 + 440) = *(_OWORD *)(v20 + 440);
    goto LABEL_49;
  }
  *(_OWORD *)(v19 + 408) = *(_OWORD *)(v20 + 408);
  uint64_t v107 = *(void *)(v20 + 424);
  if (!v107) {
    goto LABEL_47;
  }
LABEL_44:
  uint64_t v108 = *(void *)(v20 + 432);
  *(void *)(v19 + 424) = v107;
  *(void *)(v19 + 432) = v108;
  swift_retain();
  uint64_t v109 = *(void *)(v20 + 440);
  if (!v109) {
    goto LABEL_48;
  }
LABEL_45:
  uint64_t v110 = *(void *)(v20 + 448);
  *(void *)(v19 + 440) = v109;
  *(void *)(v19 + 448) = v110;
  swift_retain();
LABEL_49:
  *(void *)(v19 + 456) = *(void *)(v20 + 456);
  *(unsigned char *)(v19 + 464) = *(unsigned char *)(v20 + 464);
LABEL_50:
  *(void *)(v19 + 472) = *(void *)(v20 + 472);
  *(void *)(v19 + 480) = *(void *)(v20 + 480);
  *(void *)(v19 + 488) = *(void *)(v20 + 488);
  *(unsigned char *)(v19 + 496) = *(unsigned char *)(v20 + 496);
  uint64_t v111 = *(void *)(v20 + 504);
  swift_bridgeObjectRetain();
  if (v111)
  {
    uint64_t v112 = *(void *)(v20 + 512);
    *(void *)(v19 + 504) = v111;
    *(void *)(v19 + 512) = v112;
    swift_retain();
  }
  else
  {
    *(_OWORD *)(v19 + 504) = *(_OWORD *)(v20 + 504);
  }
  *(_WORD *)(v19 + 520) = *(_WORD *)(v20 + 520);
  uint64_t v113 = *(void *)(v20 + 528);
  if (v113)
  {
    *(void *)(v19 + 528) = v113;
    *(void *)(v19 + 536) = *(void *)(v20 + 536);
    *(void *)(v19 + 544) = *(void *)(v20 + 544);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v114 = *(_OWORD *)(v20 + 528);
    *(void *)(v19 + 544) = *(void *)(v20 + 544);
    *(_OWORD *)(v19 + 528) = v114;
  }
  uint64_t v115 = *(void *)(v20 + 552);
  if (v115 == 1)
  {
    uint64_t v116 = (_OWORD *)(v19 + 552);
    long long v117 = *(_OWORD *)(v20 + 552);
    *(void *)(v19 + 568) = *(void *)(v20 + 568);
LABEL_61:
    *uint64_t v116 = v117;
    goto LABEL_62;
  }
  *(void *)(v19 + 552) = v115;
  uint64_t v118 = *(void *)(v20 + 560);
  swift_retain();
  if (!v118)
  {
    uint64_t v116 = (_OWORD *)(v19 + 560);
    long long v117 = *(_OWORD *)(v20 + 560);
    goto LABEL_61;
  }
  uint64_t v119 = *(void *)(v20 + 568);
  *(void *)(v19 + 560) = v118;
  *(void *)(v19 + 568) = v119;
  swift_retain();
LABEL_62:
  uint64_t v120 = *(void **)(v20 + 576);
  *(void *)(v19 + 576) = v120;
  *(void *)(v19 + 584) = *(void *)(v20 + 584);
  *(void *)(v19 + 592) = *(void *)(v20 + 592);
  *(void *)(v19 + 600) = *(void *)(v20 + 600);
  *(void *)(v19 + 608) = *(void *)(v20 + 608);
  *(void *)(v19 + 616) = *(void *)(v20 + 616);
  *(void *)(v19 + 624) = *(void *)(v20 + 624);
  *(unsigned char *)(v19 + 632) = *(unsigned char *)(v20 + 632);
  *(unsigned char *)(v19 + 633) = *(unsigned char *)(v20 + 633);
  *(unsigned char *)(v19 + 634) = *(unsigned char *)(v20 + 634);
  uint64_t v121 = v358[28];
  __dst = (char *)(v19 + v121);
  uint64_t v122 = (char *)(v20 + v121);
  uint64_t v123 = type metadata accessor for CommandOperation();
  uint64_t v336 = *(void *)(v123 - 8);
  __srca = *(unsigned int (**)(char *, uint64_t, uint64_t))(v336 + 48);
  id v124 = v120;
  size_t v125 = v122;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (__srca(v122, 1, v123))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v122, *(void *)(*(void *)(v126 - 8) + 64));
    uint64_t v5 = v353;
    uint64_t v127 = v358;
  }
  else
  {
    char *__dst = *v122;
    uint64_t v128 = *(int *)(v123 + 20);
    uint64_t v129 = v123;
    uint64_t v130 = &__dst[v128];
    uint64_t v131 = &v125[v128];
    __srcb = v125;
    uint64_t v132 = *(void *)&v125[v128];
    uint64_t v133 = *((void *)v131 + 1);
    char v134 = v131[16];
    outlined copy of Text.Storage(v132, v133, v134);
    *(void *)uint64_t v130 = v132;
    *((void *)v130 + 1) = v133;
    v130[16] = v134;
    *((void *)v130 + 3) = *((void *)v131 + 3);
    uint64_t v135 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    int v136 = &v130[v135];
    uint64_t v137 = &v131[v135];
    uint64_t v138 = type metadata accessor for UUID();
    id v139 = *(void (**)(char *, char *, uint64_t))(*(void *)(v138 - 8) + 16);
    swift_bridgeObjectRetain();
    v139(v136, v137, v138);
    uint64_t v140 = *(int *)(v129 + 24);
    uint64_t v141 = &__dst[v140];
    uint64_t v142 = &__srcb[v140];
    if (*(void *)v142)
    {
      uint64_t v143 = *((void *)v142 + 1);
      *(void *)uint64_t v141 = *(void *)v142;
      *((void *)v141 + 1) = v143;
      swift_retain();
    }
    else
    {
      *(_OWORD *)uint64_t v141 = *(_OWORD *)v142;
    }
    uint64_t v5 = v353;
    uint64_t v127 = v358;
    (*(void (**)(char *, void, uint64_t, uint64_t))(v336 + 56))(__dst, 0, 1, v129);
  }
  *(unsigned char *)(v19 + v127[29]) = *(unsigned char *)(v20 + v127[29]);
  *(unsigned char *)(v19 + v127[30]) = *(unsigned char *)(v20 + v127[30]);
  *(unsigned char *)(v19 + v127[31]) = *(unsigned char *)(v20 + v127[31]);
  *(unsigned char *)(v19 + v127[32]) = *(unsigned char *)(v20 + v127[32]);
  *(void *)(v19 + v127[33]) = *(void *)(v20 + v127[33]);
  uint64_t v150 = *(void (**)(uint64_t, void, uint64_t, int *))(v344 + 56);
  swift_retain();
  v150(v19, 0, 1, v127);
  return v5;
}

uint64_t outlined destroy of ToolbarStorage.NavigationProperties.Actions(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(a1 + 8);
  if (v2 <= 1) {
    outlined consume of PlatformItemCollection.Storage(*(void *)a1, v2 != 0);
  }
  return a1;
}

uint64_t initializeWithTake for ToolbarStorage.NavigationProperties(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (_OWORD *)(a1 + v5);
  uint64_t v7 = (_OWORD *)(a2 + v5);
  int v8 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v9 = *((void *)v8 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v9 + 48))(v7, 1, v8))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy(v6, v7, *(void *)(*(void *)(v10 - 8) + 64));
  }
  else
  {
    long long v11 = v7[1];
    *uint64_t v6 = *v7;
    v6[1] = v11;
    *((unsigned char *)v6 + 32) = *((unsigned char *)v7 + 32);
    uint64_t v12 = *((void *)v7 + 6);
    *((void *)v6 + 5) = *((void *)v7 + 5);
    *((void *)v6 + 6) = v12;
    *((unsigned char *)v6 + 56) = *((unsigned char *)v7 + 56);
    long long v13 = v7[13];
    v6[12] = v7[12];
    v6[13] = v13;
    v6[14] = v7[14];
    *(_DWORD *)((char *)v6 + 239) = *(_DWORD *)((char *)v7 + 239);
    long long v14 = v7[9];
    unsigned char v6[8] = v7[8];
    v6[9] = v14;
    long long v15 = v7[11];
    v6[10] = v7[10];
    v6[11] = v15;
    long long v16 = v7[5];
    v6[4] = v7[4];
    v6[5] = v16;
    long long v17 = v7[7];
    _OWORD v6[6] = v7[6];
    v6[7] = v17;
    *(_OWORD *)((char *)v6 + 248) = *(_OWORD *)((char *)v7 + 248);
    long long v18 = *(_OWORD *)((char *)v7 + 280);
    *(_OWORD *)((char *)v6 + 264) = *(_OWORD *)((char *)v7 + 264);
    *(_OWORD *)((char *)v6 + 280) = v18;
    long long v19 = *(_OWORD *)((char *)v7 + 376);
    *(_OWORD *)((char *)v6 + 360) = *(_OWORD *)((char *)v7 + 360);
    *(_OWORD *)((char *)v6 + 376) = v19;
    *((void *)v6 + 49) = *((void *)v7 + 49);
    long long v20 = *(_OWORD *)((char *)v7 + 312);
    *(_OWORD *)((char *)v6 + 296) = *(_OWORD *)((char *)v7 + 296);
    *(_OWORD *)((char *)v6 + 312) = v20;
    long long v21 = *(_OWORD *)((char *)v7 + 344);
    *(_OWORD *)((char *)v6 + 328) = *(_OWORD *)((char *)v7 + 328);
    *(_OWORD *)((char *)v6 + 344) = v21;
    long long v22 = v7[28];
    v6[27] = v7[27];
    v6[28] = v22;
    *((unsigned char *)v6 + 464) = *((unsigned char *)v7 + 464);
    long long v23 = v7[26];
    v6[25] = v7[25];
    v6[26] = v23;
    *(_OWORD *)((char *)v6 + 472) = *(_OWORD *)((char *)v7 + 472);
    *(_OWORD *)((char *)v6 + 481) = *(_OWORD *)((char *)v7 + 481);
    uint64_t v24 = *((void *)v7 + 63);
    if (v24)
    {
      uint64_t v25 = *((void *)v7 + 64);
      *((void *)v6 + 63) = v24;
      *((void *)v6 + 64) = v25;
    }
    else
    {
      *(_OWORD *)((char *)v6 + 504) = *(_OWORD *)((char *)v7 + 504);
    }
    *((_WORD *)v6 + 260) = *((_WORD *)v7 + 260);
    v6[33] = v7[33];
    *((void *)v6 + 68) = *((void *)v7 + 68);
    *((void *)v6 + 71) = *((void *)v7 + 71);
    *(_OWORD *)((char *)v6 + 552) = *(_OWORD *)((char *)v7 + 552);
    *((void *)v6 + 72) = *((void *)v7 + 72);
    *(_OWORD *)((char *)v6 + 584) = *(_OWORD *)((char *)v7 + 584);
    *(_OWORD *)((char *)v6 + 600) = *(_OWORD *)((char *)v7 + 600);
    *((void *)v6 + 77) = *((void *)v7 + 77);
    *((void *)v6 + 78) = *((void *)v7 + 78);
    *((unsigned char *)v6 + 632) = *((unsigned char *)v7 + 632);
    *(_WORD *)((char *)v6 + 633) = *(_WORD *)((char *)v7 + 633);
    uint64_t v26 = v8[28];
    long long v27 = (char *)v6 + v26;
    long long v28 = (char *)v7 + v26;
    uint64_t v29 = type metadata accessor for CommandOperation();
    uint64_t v30 = *(void *)(v29 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64));
    }
    else
    {
      *long long v27 = *v28;
      uint64_t v32 = *(int *)(v29 + 20);
      long long v33 = &v27[v32];
      unint64_t v46 = v27;
      long long v34 = &v28[v32];
      long long v35 = *(_OWORD *)&v28[v32 + 16];
      *long long v33 = *(_OWORD *)&v28[v32];
      v33[1] = v35;
      uint64_t v36 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v45 = (char *)v33 + v36;
      long long v37 = &v34[v36];
      uint64_t v38 = type metadata accessor for UUID();
      (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v38 - 8) + 32))(v45, v37, v38);
      uint64_t v39 = *(int *)(v29 + 24);
      long long v40 = &v46[v39];
      long long v41 = (uint64_t *)&v28[v39];
      uint64_t v42 = *v41;
      if (*v41)
      {
        uint64_t v43 = v41[1];
        *long long v40 = v42;
        v40[1] = v43;
      }
      else
      {
        *(_OWORD *)long long v40 = *(_OWORD *)v41;
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v30 + 56))(v46, 0, 1, v29);
    }
    *((unsigned char *)v6 + v8[29]) = *((unsigned char *)v7 + v8[29]);
    *((unsigned char *)v6 + v8[30]) = *((unsigned char *)v7 + v8[30]);
    *((unsigned char *)v6 + v8[31]) = *((unsigned char *)v7 + v8[31]);
    *((unsigned char *)v6 + v8[32]) = *((unsigned char *)v7 + v8[32]);
    *(void *)((char *)v6 + v8[33]) = *(void *)((char *)v7 + v8[33]);
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v9 + 56))(v6, 0, 1, v8);
  }
  return a1;
}

void *assignWithTake for ToolbarStorage.NavigationProperties(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *(void *)a2;
  swift_release();
  uint64_t v6 = (void *)(a2 + 8);
  int v7 = *((unsigned __int8 *)v5 + 16);
  int v8 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 254) {
    goto LABEL_7;
  }
  if (v8 == 254)
  {
    outlined destroy of ToolbarStorage.NavigationProperties.Actions((uint64_t)(v5 + 1));
LABEL_7:
    v5[1] = *v6;
    *((unsigned char *)v5 + 16) = *(unsigned char *)(a2 + 16);
    goto LABEL_8;
  }
  if (v7 == 255) {
    goto LABEL_7;
  }
  if (v8 == 255)
  {
    outlined destroy of PlatformItemCollection((uint64_t)(v5 + 1));
    goto LABEL_7;
  }
  uint64_t v63 = v5[1];
  v5[1] = *v6;
  *((unsigned char *)v5 + 16) = v8 & 1;
  outlined consume of PlatformItemCollection.Storage(v63, v7 & 1);
LABEL_8:
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (uint64_t)v5 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = (int *)type metadata accessor for PlatformItemList.Item();
  uint64_t v13 = *((void *)v12 - 1);
  long long v14 = *(uint64_t (**)(uint64_t, uint64_t, int *))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (v16)
    {
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v10, (uint64_t (*)(void))type metadata accessor for PlatformItemList.Item);
      goto LABEL_14;
    }
    long long v33 = *(void **)v10;
    *(void *)uint64_t v10 = *(void *)v11;

    long long v34 = *(void **)(v10 + 8);
    *(void *)(v10 + 8) = *(void *)(v11 + 8);

    uint64_t v35 = *(void *)(v11 + 24);
    *(void *)(v10 + 16) = *(void *)(v11 + 16);
    *(void *)(v10 + 24) = v35;
    swift_bridgeObjectRelease();
    *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
    uint64_t v36 = *(void *)(v11 + 48);
    *(void *)(v10 + 40) = *(void *)(v11 + 40);
    *(void *)(v10 + 48) = v36;
    swift_release();
    *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
    long long v37 = (_OWORD *)(v10 + 64);
    uint64_t v38 = (_OWORD *)(v11 + 64);
    if (*(void *)(v10 + 184) >> 1 == 4294967294) {
      goto LABEL_18;
    }
    if (*(void *)(v11 + 184) >> 1 == 4294967294)
    {
      outlined destroy of Image.Resolved(v10 + 64);
LABEL_18:
      long long v39 = *(_OWORD *)(v11 + 208);
      *(_OWORD *)(v10 + 192) = *(_OWORD *)(v11 + 192);
      *(_OWORD *)(v10 + 208) = v39;
      *(_OWORD *)(v10 + 224) = *(_OWORD *)(v11 + 224);
      *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
      long long v40 = *(_OWORD *)(v11 + 144);
      *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
      *(_OWORD *)(v10 + 144) = v40;
      long long v41 = *(_OWORD *)(v11 + 176);
      *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
      *(_OWORD *)(v10 + 176) = v41;
      long long v42 = *(_OWORD *)(v11 + 80);
      *long long v37 = *v38;
      *(_OWORD *)(v10 + 80) = v42;
      long long v43 = *(_OWORD *)(v11 + 112);
      *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
      *(_OWORD *)(v10 + 112) = v43;
      goto LABEL_39;
    }
    int v64 = *(unsigned __int8 *)(v10 + 72);
    if (v64 != 255)
    {
      int v65 = *(unsigned __int8 *)(v11 + 72);
      if (v65 != 255)
      {
        long long v66 = *(void **)(v10 + 64);
        *(void *)(v10 + 64) = *(void *)v38;
        *(unsigned char *)(v10 + 72) = v65;
        outlined consume of GraphicsImage.Contents(v66, v64);
        goto LABEL_33;
      }
      outlined destroy of GraphicsImage.Contents(v10 + 64);
    }
    *(void *)long long v37 = *(void *)v38;
    *(unsigned char *)(v10 + 72) = *(unsigned char *)(v11 + 72);
LABEL_33:
    *(_OWORD *)(v10 + 80) = *(_OWORD *)(v11 + 80);
    *(void *)(v10 + 96) = *(void *)(v11 + 96);
    *(unsigned char *)(v10 + 104) = *(unsigned char *)(v11 + 104);
    *(_OWORD *)(v10 + 108) = *(_OWORD *)(v11 + 108);
    *(unsigned char *)(v10 + 124) = *(unsigned char *)(v11 + 124);
    long long v67 = *(_OWORD *)(v11 + 144);
    *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
    *(_OWORD *)(v10 + 144) = v67;
    *(unsigned char *)(v10 + 160) = *(unsigned char *)(v11 + 160);
    *(unsigned char *)(v10 + 161) = *(unsigned char *)(v11 + 161);
    unint64_t v68 = *(void *)(v10 + 184);
    *(_WORD *)(v10 + 162) = *(_WORD *)(v11 + 162);
    if (v68 >> 1 != 0xFFFFFFFF)
    {
      unint64_t v69 = *(void *)(v11 + 184);
      if (v69 >> 1 != 0xFFFFFFFF)
      {
        uint64_t v71 = *(void *)(v11 + 192);
        uint64_t v72 = *(void *)(v10 + 168);
        uint64_t v73 = *(void *)(v10 + 176);
        *(_OWORD *)(v10 + 168) = *(_OWORD *)(v11 + 168);
        *(void *)(v10 + 184) = v69;
        *(void *)(v10 + 192) = v71;
        outlined consume of AccessibilityImageLabel(v72, v73, v68);
        goto LABEL_38;
      }
      outlined destroy of AccessibilityImageLabel(v10 + 168);
    }
    long long v70 = *(_OWORD *)(v11 + 184);
    *(_OWORD *)(v10 + 168) = *(_OWORD *)(v11 + 168);
    *(_OWORD *)(v10 + 184) = v70;
LABEL_38:
    *(void *)(v10 + 200) = *(void *)(v11 + 200);
    swift_unknownObjectRelease();
    *(void *)(v10 + 208) = *(void *)(v11 + 208);
    swift_release();
    *(unsigned char *)(v10 + 216) = *(unsigned char *)(v11 + 216);
    *(unsigned char *)(v10 + 217) = *(unsigned char *)(v11 + 217);
    *(_DWORD *)(v10 + 220) = *(_DWORD *)(v11 + 220);
    *(unsigned char *)(v10 + 224) = *(unsigned char *)(v11 + 224);
    long long v74 = *(void **)(v10 + 232);
    *(void *)(v10 + 232) = *(void *)(v11 + 232);

    *(_WORD *)(v10 + 240) = *(_WORD *)(v11 + 240);
    *(unsigned char *)(v10 + 242) = *(unsigned char *)(v11 + 242);
LABEL_39:
    if (*(void *)(v10 + 256))
    {
      uint64_t v75 = *(void *)(v11 + 256);
      if (v75)
      {
        *(void *)(v10 + 248) = *(void *)(v11 + 248);
        *(void *)(v10 + 256) = v75;
        swift_bridgeObjectRelease();
        long long v76 = *(void **)(v10 + 264);
        unint64_t v77 = *(void *)(v11 + 264);
        if ((unint64_t)v76 >= 2)
        {
          if (v77 >= 2)
          {
            *(void *)(v10 + 264) = v77;
          }
          else
          {

            *(void *)(v10 + 264) = *(void *)(v11 + 264);
          }
        }
        else
        {
          *(void *)(v10 + 264) = v77;
        }
        *(_DWORD *)(v10 + 272) = *(_DWORD *)(v11 + 272);
        *(_WORD *)(v10 + 276) = *(_WORD *)(v11 + 276);
        *(unsigned char *)(v10 + 278) = *(unsigned char *)(v11 + 278);
        *(void *)(v10 + 280) = *(void *)(v11 + 280);
        swift_release();
        *(void *)(v10 + 288) = *(void *)(v11 + 288);
        swift_release();
LABEL_49:
        unint64_t v79 = (_OWORD *)(v10 + 296);
        long long v80 = (_OWORD *)(v11 + 296);
        unint64_t v81 = *(void *)(v10 + 328);
        if (v81 >> 2 != 0xFFFFFFFF)
        {
          unint64_t v82 = *(void *)(v11 + 328);
          if (v82 >> 2 != 0xFFFFFFFF)
          {
            id v86 = *(void **)(v10 + 296);
            uint64_t v87 = *(void *)(v10 + 304);
            uint64_t v88 = *(void *)(v10 + 312);
            uint64_t v89 = *(void *)(v10 + 320);
            uint64_t v90 = *(void *)(v10 + 336);
            uint64_t v91 = *(void *)(v10 + 344);
            uint64_t v92 = *(void *)(v10 + 352);
            long long v93 = *(_OWORD *)(v10 + 360);
            long long v94 = *(_OWORD *)(v10 + 376);
            uint64_t v95 = *(void *)(v10 + 392);
            *unint64_t v79 = *v80;
            *(_OWORD *)(v10 + 312) = *(_OWORD *)(v11 + 312);
            *(void *)(v10 + 328) = v82;
            long long v96 = *(_OWORD *)(v11 + 352);
            *(_OWORD *)(v10 + 336) = *(_OWORD *)(v11 + 336);
            *(_OWORD *)(v10 + 352) = v96;
            long long v97 = *(_OWORD *)(v11 + 384);
            *(_OWORD *)(v10 + 368) = *(_OWORD *)(v11 + 368);
            *(_OWORD *)(v10 + 384) = v97;
            outlined consume of PlatformItemList.Item.SystemItem(v86, v87, v88, v89, v81, v90, v91, v92, v93, *((uint64_t *)&v93 + 1), v94, SBYTE8(v94), v95);
LABEL_54:
            uint64_t v98 = (_OWORD *)(v11 + 400);
            uint64_t v99 = *(void *)(v10 + 408);
            if (v99 == 1)
            {
LABEL_57:
              long long v101 = *(_OWORD *)(v11 + 448);
              *(_OWORD *)(v10 + 432) = *(_OWORD *)(v11 + 432);
              *(_OWORD *)(v10 + 448) = v101;
              *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
              long long v102 = *(_OWORD *)(v11 + 416);
              *(_OWORD *)(v10 + 400) = *v98;
              *(_OWORD *)(v10 + 416) = v102;
              goto LABEL_80;
            }
            uint64_t v100 = *(void *)(v11 + 408);
            if (v100 == 1)
            {
              outlined destroy of PlatformItemList.Item.SelectionBehavior(v10 + 400);
              goto LABEL_57;
            }
            *(unsigned char *)(v10 + 400) = *(unsigned char *)v98;
            *(unsigned char *)(v10 + 401) = *(unsigned char *)(v11 + 401);
            *(unsigned char *)(v10 + 402) = *(unsigned char *)(v11 + 402);
            *(unsigned char *)(v10 + 403) = *(unsigned char *)(v11 + 403);
            *(unsigned char *)(v10 + 404) = *(unsigned char *)(v11 + 404);
            if (v99)
            {
              if (v100)
              {
                uint64_t v103 = *(void *)(v11 + 416);
                *(void *)(v10 + 408) = v100;
                *(void *)(v10 + 416) = v103;
                swift_release();
                goto LABEL_65;
              }
              swift_release();
            }
            else if (v100)
            {
              uint64_t v104 = *(void *)(v11 + 416);
              *(void *)(v10 + 408) = v100;
              *(void *)(v10 + 416) = v104;
              goto LABEL_65;
            }
            *(_OWORD *)(v10 + 408) = *(_OWORD *)(v11 + 408);
LABEL_65:
            uint64_t v105 = *(void *)(v11 + 424);
            if (*(void *)(v10 + 424))
            {
              if (v105)
              {
                uint64_t v106 = *(void *)(v11 + 432);
                *(void *)(v10 + 424) = v105;
                *(void *)(v10 + 432) = v106;
                swift_release();
                goto LABEL_72;
              }
              swift_release();
            }
            else if (v105)
            {
              uint64_t v107 = *(void *)(v11 + 432);
              *(void *)(v10 + 424) = v105;
              *(void *)(v10 + 432) = v107;
              goto LABEL_72;
            }
            *(_OWORD *)(v10 + 424) = *(_OWORD *)(v11 + 424);
LABEL_72:
            uint64_t v108 = *(void *)(v11 + 440);
            if (*(void *)(v10 + 440))
            {
              if (v108)
              {
                uint64_t v109 = *(void *)(v11 + 448);
                *(void *)(v10 + 440) = v108;
                *(void *)(v10 + 448) = v109;
                swift_release();
LABEL_79:
                *(void *)(v10 + 456) = *(void *)(v11 + 456);
                *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
LABEL_80:
                uint64_t v111 = *(void *)(v11 + 480);
                *(void *)(v10 + 472) = *(void *)(v11 + 472);
                *(void *)(v10 + 480) = v111;
                swift_bridgeObjectRelease();
                *(void *)(v10 + 488) = *(void *)(v11 + 488);
                *(unsigned char *)(v10 + 496) = *(unsigned char *)(v11 + 496);
                uint64_t v112 = *(void *)(v11 + 504);
                if (*(void *)(v10 + 504))
                {
                  if (v112)
                  {
                    uint64_t v113 = *(void *)(v11 + 512);
                    *(void *)(v10 + 504) = v112;
                    *(void *)(v10 + 512) = v113;
                    swift_release();
                    goto LABEL_87;
                  }
                  swift_release();
                }
                else if (v112)
                {
                  uint64_t v114 = *(void *)(v11 + 512);
                  *(void *)(v10 + 504) = v112;
                  *(void *)(v10 + 512) = v114;
                  goto LABEL_87;
                }
                *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
LABEL_87:
                *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
                if (*(void *)(v10 + 528))
                {
                  uint64_t v115 = *(void *)(v11 + 528);
                  if (v115)
                  {
                    *(void *)(v10 + 528) = v115;
                    swift_bridgeObjectRelease();
                    *(void *)(v10 + 536) = *(void *)(v11 + 536);
                    swift_release();
                    *(void *)(v10 + 544) = *(void *)(v11 + 544);
                    swift_release();
                    goto LABEL_92;
                  }
                  outlined destroy of PlatformItemList.Item.Accessibility(v10 + 528);
                }
                *(_OWORD *)(v10 + 528) = *(_OWORD *)(v11 + 528);
                *(void *)(v10 + 544) = *(void *)(v11 + 544);
LABEL_92:
                uint64_t v161 = v5;
                if (*(void *)(v10 + 552) == 1)
                {
LABEL_95:
                  *(_OWORD *)(v10 + 552) = *(_OWORD *)(v11 + 552);
                  *(void *)(v10 + 568) = *(void *)(v11 + 568);
                  goto LABEL_96;
                }
                uint64_t v116 = *(void *)(v11 + 552);
                if (v116 == 1)
                {
                  outlined destroy of PlatformItemList.Item.SecondaryNavigationBehavior(v10 + 552);
                  goto LABEL_95;
                }
                *(void *)(v10 + 552) = v116;
                swift_release();
                uint64_t v140 = *(void *)(v11 + 560);
                if (*(void *)(v10 + 560))
                {
                  if (v140)
                  {
                    uint64_t v141 = *(void *)(v11 + 568);
                    *(void *)(v10 + 560) = v140;
                    *(void *)(v10 + 568) = v141;
                    swift_release();
                    goto LABEL_96;
                  }
                  swift_release();
                }
                else if (v140)
                {
                  uint64_t v157 = *(void *)(v11 + 568);
                  *(void *)(v10 + 560) = v140;
                  *(void *)(v10 + 568) = v157;
                  goto LABEL_96;
                }
                *(_OWORD *)(v10 + 560) = *(_OWORD *)(v11 + 560);
LABEL_96:
                long long v117 = *(void **)(v10 + 576);
                *(void *)(v10 + 576) = *(void *)(v11 + 576);

                *(void *)(v10 + 584) = *(void *)(v11 + 584);
                *(void *)(v10 + 592) = *(void *)(v11 + 592);
                swift_bridgeObjectRelease();
                *(void *)(v10 + 600) = *(void *)(v11 + 600);
                *(void *)(v10 + 608) = *(void *)(v11 + 608);
                swift_bridgeObjectRelease();
                *(void *)(v10 + 616) = *(void *)(v11 + 616);
                swift_bridgeObjectRelease();
                *(void *)(v10 + 624) = *(void *)(v11 + 624);
                swift_bridgeObjectRelease();
                *(unsigned char *)(v10 + 632) = *(unsigned char *)(v11 + 632);
                *(_WORD *)(v10 + 633) = *(_WORD *)(v11 + 633);
                uint64_t v118 = v12[28];
                uint64_t v119 = (unsigned char *)(v10 + v118);
                uint64_t v120 = (unsigned char *)(v11 + v118);
                uint64_t v121 = type metadata accessor for CommandOperation();
                uint64_t v122 = *(void *)(v121 - 8);
                uint64_t v123 = *(uint64_t (**)(unsigned char *, uint64_t, uint64_t))(v122 + 48);
                int v124 = v123(v119, 1, v121);
                int v125 = v123(v120, 1, v121);
                if (v124)
                {
                  if (!v125)
                  {
                    *uint64_t v119 = *v120;
                    uint64_t v126 = *(int *)(v121 + 20);
                    uint64_t v127 = &v119[v126];
                    uint64_t v128 = &v120[v126];
                    long long v129 = *(_OWORD *)&v120[v126 + 16];
                    _OWORD *v127 = *(_OWORD *)&v120[v126];
                    v127[1] = v129;
                    uint64_t v130 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v131 = (char *)v127 + v130;
                    uint64_t v132 = &v128[v130];
                    uint64_t v133 = type metadata accessor for UUID();
                    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v133 - 8) + 32))(v131, v132, v133);
                    uint64_t v134 = *(int *)(v121 + 24);
                    uint64_t v135 = &v119[v134];
                    int v136 = (uint64_t *)&v120[v134];
                    uint64_t v137 = *v136;
                    if (*v136)
                    {
                      uint64_t v138 = v136[1];
                      *uint64_t v135 = v137;
                      v135[1] = v138;
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v135 = *(_OWORD *)v136;
                    }
                    uint64_t v5 = v161;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v122 + 56))(v119, 0, 1, v121);
                    goto LABEL_113;
                  }
                }
                else
                {
                  if (!v125)
                  {
                    *uint64_t v119 = *v120;
                    uint64_t v142 = *(int *)(v121 + 20);
                    uint64_t v143 = &v119[v142];
                    int v144 = &v120[v142];
                    LOBYTE(v142) = v120[v142 + 16];
                    uint64_t v145 = *(void *)v143;
                    uint64_t v146 = *((void *)v143 + 1);
                    char v147 = v143[16];
                    *(_OWORD *)uint64_t v143 = *(_OWORD *)v144;
                    v143[16] = v142;
                    outlined consume of Text.Storage(v145, v146, v147);
                    *((void *)v143 + 3) = *((void *)v144 + 3);
                    swift_bridgeObjectRelease();
                    uint64_t v148 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    char v149 = &v143[v148];
                    uint64_t v150 = &v144[v148];
                    uint64_t v151 = type metadata accessor for UUID();
                    (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v151 - 8) + 40))(v149, v150, v151);
                    uint64_t v152 = *(int *)(v121 + 24);
                    long long v153 = &v119[v152];
                    long long v154 = &v120[v152];
                    uint64_t v155 = *(void *)&v120[v152];
                    if (*v153)
                    {
                      uint64_t v5 = v161;
                      if (v155)
                      {
                        uint64_t v156 = *((void *)v154 + 1);
                        *long long v153 = v155;
                        v153[1] = v156;
                        swift_release();
                        goto LABEL_113;
                      }
                      swift_release();
                    }
                    else
                    {
                      uint64_t v5 = v161;
                      if (v155)
                      {
                        uint64_t v159 = *((void *)v154 + 1);
                        *long long v153 = v155;
                        v153[1] = v159;
                        goto LABEL_113;
                      }
                    }
                    *(_OWORD *)long long v153 = *(_OWORD *)v154;
                    goto LABEL_113;
                  }
                  outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v119, (uint64_t (*)(void))type metadata accessor for CommandOperation);
                }
                _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                memcpy(v119, v120, *(void *)(*(void *)(v139 - 8) + 64));
                uint64_t v5 = v161;
LABEL_113:
                *(unsigned char *)(v10 + v12[29]) = *(unsigned char *)(v11 + v12[29]);
                *(unsigned char *)(v10 + v12[30]) = *(unsigned char *)(v11 + v12[30]);
                *(unsigned char *)(v10 + v12[31]) = *(unsigned char *)(v11 + v12[31]);
                *(unsigned char *)(v10 + v12[32]) = *(unsigned char *)(v11 + v12[32]);
                *(void *)(v10 + v12[33]) = *(void *)(v11 + v12[33]);
                swift_release();
                return v5;
              }
              swift_release();
            }
            else if (v108)
            {
              uint64_t v110 = *(void *)(v11 + 448);
              *(void *)(v10 + 440) = v108;
              *(void *)(v10 + 448) = v110;
              goto LABEL_79;
            }
            *(_OWORD *)(v10 + 440) = *(_OWORD *)(v11 + 440);
            goto LABEL_79;
          }
          outlined destroy of PlatformItemList.Item.SystemItem(v10 + 296);
        }
        long long v83 = *(_OWORD *)(v11 + 376);
        *(_OWORD *)(v10 + 360) = *(_OWORD *)(v11 + 360);
        *(_OWORD *)(v10 + 376) = v83;
        *(void *)(v10 + 392) = *(void *)(v11 + 392);
        long long v84 = *(_OWORD *)(v11 + 312);
        *unint64_t v79 = *v80;
        *(_OWORD *)(v10 + 312) = v84;
        long long v85 = *(_OWORD *)(v11 + 344);
        *(_OWORD *)(v10 + 328) = *(_OWORD *)(v11 + 328);
        *(_OWORD *)(v10 + 344) = v85;
        goto LABEL_54;
      }
      outlined destroy of Image.NamedResolved(v10 + 248);
    }
    long long v78 = *(_OWORD *)(v11 + 264);
    *(_OWORD *)(v10 + 248) = *(_OWORD *)(v11 + 248);
    *(_OWORD *)(v10 + 264) = v78;
    *(_OWORD *)(v10 + 280) = *(_OWORD *)(v11 + 280);
    goto LABEL_49;
  }
  if (v16)
  {
LABEL_14:
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    memcpy((void *)v10, (const void *)v11, *(void *)(*(void *)(v32 - 8) + 64));
    return v5;
  }
  long long v17 = *(_OWORD *)(v11 + 16);
  *(_OWORD *)uint64_t v10 = *(_OWORD *)v11;
  *(_OWORD *)(v10 + 16) = v17;
  *(unsigned char *)(v10 + 32) = *(unsigned char *)(v11 + 32);
  uint64_t v18 = *(void *)(v11 + 48);
  *(void *)(v10 + 40) = *(void *)(v11 + 40);
  *(void *)(v10 + 48) = v18;
  *(unsigned char *)(v10 + 56) = *(unsigned char *)(v11 + 56);
  long long v19 = *(_OWORD *)(v11 + 208);
  *(_OWORD *)(v10 + 192) = *(_OWORD *)(v11 + 192);
  *(_OWORD *)(v10 + 208) = v19;
  *(_OWORD *)(v10 + 224) = *(_OWORD *)(v11 + 224);
  *(_DWORD *)(v10 + 239) = *(_DWORD *)(v11 + 239);
  long long v20 = *(_OWORD *)(v11 + 144);
  *(_OWORD *)(v10 + 128) = *(_OWORD *)(v11 + 128);
  *(_OWORD *)(v10 + 144) = v20;
  long long v21 = *(_OWORD *)(v11 + 176);
  *(_OWORD *)(v10 + 160) = *(_OWORD *)(v11 + 160);
  *(_OWORD *)(v10 + 176) = v21;
  long long v22 = *(_OWORD *)(v11 + 80);
  *(_OWORD *)(v10 + 64) = *(_OWORD *)(v11 + 64);
  *(_OWORD *)(v10 + 80) = v22;
  long long v23 = *(_OWORD *)(v11 + 112);
  *(_OWORD *)(v10 + 96) = *(_OWORD *)(v11 + 96);
  *(_OWORD *)(v10 + 112) = v23;
  *(_OWORD *)(v10 + 248) = *(_OWORD *)(v11 + 248);
  long long v24 = *(_OWORD *)(v11 + 280);
  *(_OWORD *)(v10 + 264) = *(_OWORD *)(v11 + 264);
  *(_OWORD *)(v10 + 280) = v24;
  long long v25 = *(_OWORD *)(v11 + 376);
  *(_OWORD *)(v10 + 360) = *(_OWORD *)(v11 + 360);
  *(_OWORD *)(v10 + 376) = v25;
  *(void *)(v10 + 392) = *(void *)(v11 + 392);
  long long v26 = *(_OWORD *)(v11 + 312);
  *(_OWORD *)(v10 + 296) = *(_OWORD *)(v11 + 296);
  *(_OWORD *)(v10 + 312) = v26;
  long long v27 = *(_OWORD *)(v11 + 344);
  *(_OWORD *)(v10 + 328) = *(_OWORD *)(v11 + 328);
  *(_OWORD *)(v10 + 344) = v27;
  long long v28 = *(_OWORD *)(v11 + 448);
  *(_OWORD *)(v10 + 432) = *(_OWORD *)(v11 + 432);
  *(_OWORD *)(v10 + 448) = v28;
  *(unsigned char *)(v10 + 464) = *(unsigned char *)(v11 + 464);
  long long v29 = *(_OWORD *)(v11 + 416);
  *(_OWORD *)(v10 + 400) = *(_OWORD *)(v11 + 400);
  *(_OWORD *)(v10 + 416) = v29;
  *(_OWORD *)(v10 + 472) = *(_OWORD *)(v11 + 472);
  *(_OWORD *)(v10 + 481) = *(_OWORD *)(v11 + 481);
  uint64_t v30 = *(void *)(v11 + 504);
  if (v30)
  {
    uint64_t v31 = *(void *)(v11 + 512);
    *(void *)(v10 + 504) = v30;
    *(void *)(v10 + 512) = v31;
  }
  else
  {
    *(_OWORD *)(v10 + 504) = *(_OWORD *)(v11 + 504);
  }
  *(_WORD *)(v10 + 520) = *(_WORD *)(v11 + 520);
  *(_OWORD *)(v10 + 528) = *(_OWORD *)(v11 + 528);
  *(void *)(v10 + 544) = *(void *)(v11 + 544);
  *(void *)(v10 + 568) = *(void *)(v11 + 568);
  *(_OWORD *)(v10 + 552) = *(_OWORD *)(v11 + 552);
  *(void *)(v10 + 576) = *(void *)(v11 + 576);
  *(_OWORD *)(v10 + 584) = *(_OWORD *)(v11 + 584);
  *(_OWORD *)(v10 + 600) = *(_OWORD *)(v11 + 600);
  *(void *)(v10 + 616) = *(void *)(v11 + 616);
  *(void *)(v10 + 624) = *(void *)(v11 + 624);
  *(unsigned char *)(v10 + 632) = *(unsigned char *)(v11 + 632);
  *(_WORD *)(v10 + 633) = *(_WORD *)(v11 + 633);
  uint64_t v44 = v12[28];
  uint64_t v45 = (unsigned char *)(v10 + v44);
  unint64_t v46 = (unsigned char *)(v11 + v44);
  uint64_t v47 = type metadata accessor for CommandOperation();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    int v160 = v5;
    *uint64_t v45 = *v46;
    uint64_t v50 = *(int *)(v47 + 20);
    id v51 = &v45[v50];
    uint64_t v52 = &v46[v50];
    long long v53 = *(_OWORD *)&v46[v50 + 16];
    _OWORD *v51 = *(_OWORD *)&v46[v50];
    v51[1] = v53;
    uint64_t v54 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
    long long v55 = (char *)v51 + v54;
    long long v56 = &v52[v54];
    uint64_t v57 = type metadata accessor for UUID();
    (*(void (**)(char *, unsigned char *, uint64_t))(*(void *)(v57 - 8) + 32))(v55, v56, v57);
    uint64_t v58 = *(int *)(v47 + 24);
    long long v59 = &v45[v58];
    long long v60 = (uint64_t *)&v46[v58];
    uint64_t v61 = *v60;
    if (*v60)
    {
      uint64_t v62 = v60[1];
      *long long v59 = v61;
      v59[1] = v62;
    }
    else
    {
      *(_OWORD *)long long v59 = *(_OWORD *)v60;
    }
    uint64_t v5 = v160;
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  *(unsigned char *)(v10 + v12[29]) = *(unsigned char *)(v11 + v12[29]);
  *(unsigned char *)(v10 + v12[30]) = *(unsigned char *)(v11 + v12[30]);
  *(unsigned char *)(v10 + v12[31]) = *(unsigned char *)(v11 + v12[31]);
  *(unsigned char *)(v10 + v12[32]) = *(unsigned char *)(v11 + v12[32]);
  *(void *)(v10 + v12[33]) = *(void *)(v11 + v12[33]);
  (*(void (**)(uint64_t, void, uint64_t, int *))(v13 + 56))(v10, 0, 1, v12);
  return v5;
}

uint64_t sub_187DD0C50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

void *sub_187DD0D3C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
    int v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t destroy for ToolbarStorage.NavigationProperties.Actions(uint64_t result)
{
  unsigned int v1 = *(unsigned __int8 *)(result + 8);
  if (v1 <= 1) {
    return outlined consume of PlatformItemCollection.Storage(*(void *)result, v1 != 0);
  }
  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, uint64_t *a2)
{
  unsigned int v3 = *((unsigned __int8 *)a2 + 8);
  if (v3 > 1)
  {
    *(void *)a1 = *a2;
    *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  }
  else
  {
    BOOL v4 = v3 != 0;
    uint64_t v5 = *a2;
    outlined copy of PlatformItemCollection.Storage(*a2, v3 != 0);
    *(void *)a1 = v5;
    *(unsigned char *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t assignWithCopy for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
  unsigned int v5 = *(unsigned __int8 *)(a2 + 8);
  if (v4 > 1)
  {
    if (v5 <= 1)
    {
      BOOL v10 = v5 != 0;
      uint64_t v11 = *(void *)a2;
      outlined copy of PlatformItemCollection.Storage(*(void *)a2, v5 != 0);
      *(void *)a1 = v11;
      *(unsigned char *)(a1 + 8) = v10;
      return a1;
    }
LABEL_7:
    uint64_t v12 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    *(void *)a1 = v12;
    return a1;
  }
  if (v5 > 1)
  {
    outlined consume of PlatformItemCollection.Storage(*(void *)a1, v4 & 1);
    goto LABEL_7;
  }
  BOOL v6 = v5 != 0;
  uint64_t v7 = *(void *)a2;
  outlined copy of PlatformItemCollection.Storage(*(void *)a2, v5 != 0);
  uint64_t v8 = *(void *)a1;
  char v9 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v7;
  *(unsigned char *)(a1 + 8) = v6;
  outlined consume of PlatformItemCollection.Storage(v8, v9);
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, uint64_t a2)
{
  unsigned int v4 = *(unsigned __int8 *)(a1 + 8);
  if (v4 > 1) {
    goto LABEL_5;
  }
  unsigned int v5 = *(unsigned __int8 *)(a2 + 8);
  char v6 = v4 & 1;
  if (v5 > 1)
  {
    outlined consume of PlatformItemCollection.Storage(*(void *)a1, v6);
LABEL_5:
    *(void *)a1 = *(void *)a2;
    *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
    return a1;
  }
  uint64_t v7 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = v5 != 0;
  outlined consume of PlatformItemCollection.Storage(v7, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.NavigationProperties.Actions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 1) {
    unsigned int v4 = -1;
  }
  else {
    unsigned int v4 = v3 ^ 0xFF;
  }
  if (v4 + 1 >= 2) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.NavigationProperties.Actions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)uint64_t result = 0;
    *(unsigned char *)(result + 8) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = ~(_BYTE)a2;
    }
  }
  return result;
}

uint64_t getEnumTag for ToolbarStorage.NavigationProperties.Actions(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int8 *)(a1 + 8);
  if (v1 > 1) {
    return (v1 ^ 0xFF) + 1;
  }
  else {
    return 0;
  }
}

uint64_t destructiveInjectEnumTag for ToolbarStorage.NavigationProperties.Actions(uint64_t result, unsigned int a2)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)uint64_t result = a2 - 255;
  }
  else if (a2)
  {
    *(unsigned char *)(result + 8) = -(char)a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarStorage.NavigationProperties.Actions()
{
  return &type metadata for ToolbarStorage.NavigationProperties.Actions;
}

uint64_t assignWithCopy for ToolbarStorage(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unsigned int v4 = (_OWORD *)(a1 + 16);
  unsigned int v5 = (_OWORD *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  if (*(void *)(a1 + 24))
  {
    if (v6)
    {
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_retain();
      swift_release();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_retain();
      swift_release();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
    }
    else
    {
      outlined destroy of ToolbarItemPlacement.Role?(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
      uint64_t v7 = *(void *)(a2 + 32);
      *unsigned int v4 = *v5;
      *(void *)(a1 + 32) = v7;
    }
  }
  else if (v6)
  {
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_retain();
    swift_retain();
  }
  else
  {
    long long v8 = *v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *unsigned int v4 = v8;
  }
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t outlined destroy of ToolbarItemPlacement.Role?(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  type metadata accessor for Binding<Int>(0, a2, a3, a4);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8))(a1, v5);
  return a1;
}

uint64_t assignWithTake for ToolbarStorage(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  if (!*(void *)(a1 + 24)) {
    goto LABEL_5;
  }
  uint64_t v5 = *(void *)(a2 + 24);
  if (!v5)
  {
    outlined destroy of ToolbarItemPlacement.Role?(a1 + 16, &lazy cache variable for type metadata for Binding<Int>, MEMORY[0x1E4FBB550], MEMORY[0x1E4F41638]);
LABEL_5:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    goto LABEL_6;
  }
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(void *)(a1 + 24) = v5;
  swift_release();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
LABEL_6:
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 48) = *(unsigned char *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  return a1;
}

void *initializeBufferWithCopyOfBuffer for ToolbarStorage.SearchItem(void *a1, void *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    a1[1] = a2[1];
    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
    uint64_t v9 = *(int *)(v8 + 32);
    BOOL v10 = (char *)v7 + v9;
    uint64_t v11 = (char *)a2 + v9;
    *BOOL v10 = *((unsigned char *)a2 + v9);
    v10[1] = *((unsigned char *)a2 + v9 + 1);
    *((_WORD *)v10 + 1) = *(_WORD *)((char *)a2 + v9 + 2);
    v10[8] = *((unsigned char *)a2 + v9 + 8);
    *((_DWORD *)v10 + 1) = *(_DWORD *)((char *)a2 + v9 + 4);
    uint64_t v12 = (int *)type metadata accessor for SearchFieldState(0);
    uint64_t v13 = v12[9];
    uint64_t v71 = &v11[v13];
    uint64_t v72 = &v10[v13];
    uint64_t v14 = type metadata accessor for AttributedString();
    int v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16);
    swift_retain();
    swift_retain();
    uint64_t v16 = v14;
    long long v17 = a3;
    v15(v72, v71, v16);
    v10[v12[10]] = v11[v12[10]];
    uint64_t v18 = v12[11];
    long long v19 = &v10[v18];
    long long v20 = &v11[v18];
    v19[4] = v20[4];
    uint64_t v21 = a3[5];
    uint64_t v22 = a3[6];
    uint64_t v23 = *(void *)((char *)a2 + v21);
    *(_DWORD *)long long v19 = *(_DWORD *)v20;
    *(void *)((char *)v7 + v21) = v23;
    long long v24 = (char *)v7 + v22;
    long long v25 = (char *)a2 + v22;
    int v26 = *((unsigned __int8 *)a2 + v22 + 8);
    swift_bridgeObjectRetain();
    if (v26 == 255)
    {
      *(void *)long long v24 = *(void *)v25;
      v24[8] = v25[8];
    }
    else
    {
      char v27 = v26 & 1;
      uint64_t v28 = *(void *)v25;
      outlined copy of PlatformItemCollection.Storage(v28, v27);
      *(void *)long long v24 = v28;
      v24[8] = v27;
    }
    uint64_t v29 = a3[7];
    uint64_t v30 = (char *)v7 + v29;
    uint64_t v31 = (char *)a2 + v29;
    int v32 = v31[8];
    if (v32 == 255)
    {
      *(void *)uint64_t v30 = *(void *)v31;
      v30[8] = v31[8];
    }
    else
    {
      char v33 = v32 & 1;
      uint64_t v34 = *(void *)v31;
      outlined copy of PlatformItemCollection.Storage(*(void *)v31, v32 & 1);
      *(void *)uint64_t v30 = v34;
      v30[8] = v33;
    }
    uint64_t v35 = a3[8];
    uint64_t v36 = (char *)v7 + v35;
    long long v37 = (char *)a2 + v35;
    uint64_t v38 = *(void *)((char *)a2 + v35);
    uint64_t v39 = *(void *)((char *)a2 + v35 + 8);
    char v40 = *((unsigned char *)a2 + v35 + 16);
    outlined copy of Text.Storage(v38, v39, v40);
    *(void *)uint64_t v36 = v38;
    *((void *)v36 + 1) = v39;
    char v36[16] = v40;
    *((void *)v36 + 3) = *((void *)v37 + 3);
    uint64_t v41 = a3[9];
    uint64_t v42 = a3[10];
    long long v43 = (void *)((char *)v7 + v41);
    uint64_t v44 = (void *)((char *)a2 + v41);
    uint64_t v45 = v44[1];
    *long long v43 = *v44;
    v43[1] = v45;
    unint64_t v46 = (char *)v7 + v42;
    uint64_t v47 = (char *)a2 + v42;
    uint64_t v48 = *(void *)((char *)a2 + v42);
    swift_bridgeObjectRetain();
    swift_retain();
    swift_retain();
    if (v48)
    {
      uint64_t v49 = *((void *)v47 + 1);
      *(void *)unint64_t v46 = v48;
      *((void *)v46 + 1) = v49;
      *((_DWORD *)v46 + 4) = *((_DWORD *)v47 + 4);
      uint64_t v50 = (void *)*((void *)v47 + 4);
      *((void *)v46 + 3) = *((void *)v47 + 3);
      *((void *)v46 + 4) = v50;
      *((void *)v46 + 5) = *((void *)v47 + 5);
      *((_DWORD *)v46 + 12) = *((_DWORD *)v47 + 12);
      *((void *)v46 + 7) = *((void *)v47 + 7);
      *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
      *((void *)v46 + 10) = *((void *)v47 + 10);
      id v51 = v50;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v52 = *((_OWORD *)v47 + 3);
      *((_OWORD *)v46 + 2) = *((_OWORD *)v47 + 2);
      *((_OWORD *)v46 + 3) = v52;
      *((_OWORD *)v46 + 4) = *((_OWORD *)v47 + 4);
      *((void *)v46 + 10) = *((void *)v47 + 10);
      long long v53 = *((_OWORD *)v47 + 1);
      *(_OWORD *)unint64_t v46 = *(_OWORD *)v47;
      *((_OWORD *)v46 + 1) = v53;
    }
    uint64_t v54 = v17[11];
    long long v55 = (char *)v7 + v54;
    long long v56 = (char *)a2 + v54;
    if (*(void *)v56)
    {
      uint64_t v57 = *((void *)v56 + 1);
      *(void *)long long v55 = *(void *)v56;
      *((void *)v55 + 1) = v57;
      *((_DWORD *)v55 + 4) = *((_DWORD *)v56 + 4);
      uint64_t v58 = (void *)*((void *)v56 + 4);
      *((void *)v55 + 3) = *((void *)v56 + 3);
      *((void *)v55 + 4) = v58;
      *((void *)v55 + 5) = *((void *)v56 + 5);
      *((_DWORD *)v55 + 12) = *((_DWORD *)v56 + 12);
      *((void *)v55 + 7) = *((void *)v56 + 7);
      *((_OWORD *)v55 + 4) = *((_OWORD *)v56 + 4);
      *((void *)v55 + 10) = *((void *)v56 + 10);
      id v59 = v58;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v60 = *((_OWORD *)v56 + 3);
      *((_OWORD *)v55 + 2) = *((_OWORD *)v56 + 2);
      *((_OWORD *)v55 + 3) = v60;
      *((_OWORD *)v55 + 4) = *((_OWORD *)v56 + 4);
      *((void *)v55 + 10) = *((void *)v56 + 10);
      long long v61 = *((_OWORD *)v56 + 1);
      *(_OWORD *)long long v55 = *(_OWORD *)v56;
      *((_OWORD *)v55 + 1) = v61;
    }
    uint64_t v62 = v17[13];
    *((unsigned char *)v7 + v17[12]) = *((unsigned char *)a2 + v17[12]);
    uint64_t v63 = (char *)v7 + v62;
    int v64 = (char *)a2 + v62;
    if (*(void *)v64)
    {
      uint64_t v65 = *((void *)v64 + 1);
      *(void *)uint64_t v63 = *(void *)v64;
      *((void *)v63 + 1) = v65;
      *((_DWORD *)v63 + 4) = *((_DWORD *)v64 + 4);
      long long v66 = (void *)*((void *)v64 + 4);
      *((void *)v63 + 3) = *((void *)v64 + 3);
      *((void *)v63 + 4) = v66;
      *((void *)v63 + 5) = *((void *)v64 + 5);
      *((_DWORD *)v63 + 12) = *((_DWORD *)v64 + 12);
      *((void *)v63 + 7) = *((void *)v64 + 7);
      *((_OWORD *)v63 + 4) = *((_OWORD *)v64 + 4);
      *((void *)v63 + 10) = *((void *)v64 + 10);
      id v67 = v66;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain();
    }
    else
    {
      long long v68 = *((_OWORD *)v64 + 3);
      *((_OWORD *)v63 + 2) = *((_OWORD *)v64 + 2);
      *((_OWORD *)v63 + 3) = v68;
      *((_OWORD *)v63 + 4) = *((_OWORD *)v64 + 4);
      *((void *)v63 + 10) = *((void *)v64 + 10);
      long long v69 = *((_OWORD *)v64 + 1);
      *(_OWORD *)uint64_t v63 = *(_OWORD *)v64;
      *((_OWORD *)v63 + 1) = v69;
    }
  }
  return v7;
}

void *initializeWithTake for ToolbarStorage.SearchItem(void *a1, void *a2, int *a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  BOOL v10 = (char *)a2 + v8;
  *uint64_t v9 = *((unsigned char *)a2 + v8);
  v9[1] = *((unsigned char *)a2 + v8 + 1);
  *((_WORD *)v9 + 1) = *(_WORD *)((char *)a2 + v8 + 2);
  unsigned char v9[8] = *((unsigned char *)a2 + v8 + 8);
  *((_DWORD *)v9 + 1) = *(_DWORD *)((char *)a2 + v8 + 4);
  uint64_t v11 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v12 = v11[9];
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v15 - 8) + 32))(v13, v14, v15);
  v9[v11[10]] = v10[v11[10]];
  uint64_t v16 = v11[11];
  long long v17 = &v9[v16];
  uint64_t v18 = &v10[v16];
  v17[4] = v18[4];
  *(_DWORD *)long long v17 = *(_DWORD *)v18;
  uint64_t v19 = a3[6];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  long long v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  *(void *)long long v20 = *(void *)v21;
  v20[8] = v21[8];
  uint64_t v22 = a3[7];
  uint64_t v23 = a3[8];
  long long v24 = (char *)a1 + v22;
  long long v25 = (char *)a2 + v22;
  *(void *)long long v24 = *(void *)v25;
  v24[8] = v25[8];
  int v26 = (_OWORD *)((char *)a1 + v23);
  char v27 = (_OWORD *)((char *)a2 + v23);
  long long v28 = v27[1];
  _OWORD *v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)((char *)a2 + a3[9]);
  uint64_t v30 = (char *)a1 + v29;
  uint64_t v31 = (char *)a2 + v29;
  long long v32 = *((_OWORD *)v31 + 1);
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  *((_OWORD *)v30 + 1) = v32;
  long long v33 = *((_OWORD *)v31 + 2);
  long long v34 = *((_OWORD *)v31 + 3);
  long long v35 = *((_OWORD *)v31 + 4);
  *((void *)v30 + 10) = *((void *)v31 + 10);
  *((_OWORD *)v30 + 3) = v34;
  *((_OWORD *)v30 + 4) = v35;
  *((_OWORD *)v30 + 2) = v33;
  uint64_t v36 = a3[11];
  uint64_t v37 = a3[12];
  uint64_t v38 = (char *)a1 + v36;
  uint64_t v39 = (char *)a2 + v36;
  long long v40 = *((_OWORD *)v39 + 1);
  *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
  *((_OWORD *)v38 + 1) = v40;
  long long v41 = *((_OWORD *)v39 + 2);
  long long v42 = *((_OWORD *)v39 + 3);
  long long v43 = *((_OWORD *)v39 + 4);
  *((void *)v38 + 10) = *((void *)v39 + 10);
  *((_OWORD *)v38 + 3) = v42;
  *((_OWORD *)v38 + 4) = v43;
  *((_OWORD *)v38 + 2) = v41;
  *((unsigned char *)a1 + v37) = *((unsigned char *)a2 + v37);
  uint64_t v44 = a3[13];
  uint64_t v45 = (char *)a1 + v44;
  unint64_t v46 = (char *)a2 + v44;
  long long v47 = *((_OWORD *)v46 + 1);
  *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
  *((_OWORD *)v45 + 1) = v47;
  *((void *)v45 + 10) = *((void *)v46 + 10);
  long long v48 = *((_OWORD *)v46 + 4);
  long long v49 = *((_OWORD *)v46 + 2);
  *((_OWORD *)v45 + 3) = *((_OWORD *)v46 + 3);
  *((_OWORD *)v45 + 4) = v48;
  *((_OWORD *)v45 + 2) = v49;
  return a1;
}

void *assignWithTake for ToolbarStorage.SearchItem(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(int *)(v6 + 32);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  *uint64_t v8 = *((unsigned char *)a2 + v7);
  v8[1] = *((unsigned char *)a2 + v7 + 1);
  *((_WORD *)v8 + 1) = *(_WORD *)((char *)a2 + v7 + 2);
  v8[8] = *((unsigned char *)a2 + v7 + 8);
  *((_DWORD *)v8 + 1) = *(_DWORD *)((char *)a2 + v7 + 4);
  BOOL v10 = (int *)type metadata accessor for SearchFieldState(0);
  uint64_t v11 = v10[9];
  uint64_t v12 = &v8[v11];
  uint64_t v13 = &v9[v11];
  uint64_t v14 = type metadata accessor for AttributedString();
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 40))(v12, v13, v14);
  v8[v10[10]] = v9[v10[10]];
  uint64_t v15 = v10[11];
  uint64_t v16 = &v8[v15];
  long long v17 = &v9[v15];
  *(_DWORD *)uint64_t v16 = *(_DWORD *)v17;
  void v16[4] = v17[4];
  *(void *)((char *)a1 + a3[5]) = *(void *)((char *)a2 + a3[5]);
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[6];
  uint64_t v19 = (uint64_t)a1 + v18;
  long long v20 = (char *)a2 + v18;
  int v21 = *((unsigned __int8 *)a1 + v18 + 8);
  if (v21 == 255) {
    goto LABEL_4;
  }
  int v22 = v20[8];
  if (v22 == 255)
  {
    outlined destroy of PlatformItemCollection(v19);
LABEL_4:
    *(void *)uint64_t v19 = *(void *)v20;
    *(unsigned char *)(v19 + 8) = v20[8];
    goto LABEL_6;
  }
  uint64_t v23 = *(void *)v19;
  *(void *)uint64_t v19 = *(void *)v20;
  *(unsigned char *)(v19 + 8) = v22 & 1;
  outlined consume of PlatformItemCollection.Storage(v23, v21 & 1);
LABEL_6:
  uint64_t v24 = a3[7];
  uint64_t v25 = (uint64_t)a1 + v24;
  int v26 = (char *)a2 + v24;
  int v27 = *((unsigned __int8 *)a1 + v24 + 8);
  if (v27 == 255)
  {
LABEL_9:
    *(void *)uint64_t v25 = *(void *)v26;
    *(unsigned char *)(v25 + 8) = v26[8];
    goto LABEL_11;
  }
  int v28 = v26[8];
  if (v28 == 255)
  {
    outlined destroy of PlatformItemCollection(v25);
    goto LABEL_9;
  }
  uint64_t v29 = *(void *)v25;
  *(void *)uint64_t v25 = *(void *)v26;
  *(unsigned char *)(v25 + 8) = v28 & 1;
  outlined consume of PlatformItemCollection.Storage(v29, v27 & 1);
LABEL_11:
  uint64_t v30 = a3[8];
  uint64_t v31 = (char *)a1 + v30;
  long long v32 = (char *)a2 + v30;
  LOBYTE(v30) = *((unsigned char *)a2 + v30 + 16);
  uint64_t v33 = *(void *)v31;
  uint64_t v34 = *((void *)v31 + 1);
  char v35 = v31[16];
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  v31[16] = v30;
  outlined consume of Text.Storage(v33, v34, v35);
  *((void *)v31 + 3) = *((void *)v32 + 3);
  swift_bridgeObjectRelease();
  uint64_t v36 = a3[9];
  uint64_t v37 = (char *)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  *(void *)((char *)a1 + v36) = *(void *)((char *)a2 + v36);
  swift_release();
  *((void *)v37 + 1) = *((void *)v38 + 1);
  swift_release();
  uint64_t v39 = a3[10];
  uint64_t v40 = (uint64_t)a1 + v39;
  long long v41 = (char *)a2 + v39;
  if (*(void *)((char *)a1 + v39))
  {
    if (*(void *)v41)
    {
      uint64_t v42 = *((void *)v41 + 1);
      *(void *)uint64_t v40 = *(void *)v41;
      *(void *)(v40 + 8) = v42;
      *(_DWORD *)(v40 + 16) = *((_DWORD *)v41 + 4);
      uint64_t v43 = *((void *)v41 + 4);
      uint64_t v44 = *(void **)(v40 + 32);
      *(void *)(v40 + 24) = *((void *)v41 + 3);
      *(void *)(v40 + 32) = v43;

      *(void *)(v40 + 40) = *((void *)v41 + 5);
      swift_release();
      *(_DWORD *)(v40 + 48) = *((_DWORD *)v41 + 12);
      *(void *)(v40 + 56) = *((void *)v41 + 7);
      swift_release();
      *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
      *(void *)(v40 + 80) = *((void *)v41 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    outlined destroy of BoundInputsView(v40);
  }
  long long v45 = *((_OWORD *)v41 + 3);
  *(_OWORD *)(v40 + 32) = *((_OWORD *)v41 + 2);
  *(_OWORD *)(v40 + 48) = v45;
  *(_OWORD *)(v40 + 64) = *((_OWORD *)v41 + 4);
  *(void *)(v40 + 80) = *((void *)v41 + 10);
  long long v46 = *((_OWORD *)v41 + 1);
  *(_OWORD *)uint64_t v40 = *(_OWORD *)v41;
  *(_OWORD *)(v40 + 16) = v46;
LABEL_16:
  uint64_t v47 = a3[11];
  uint64_t v48 = (uint64_t)a1 + v47;
  long long v49 = (char *)a2 + v47;
  if (*(void *)((char *)a1 + v47))
  {
    if (*(void *)v49)
    {
      uint64_t v50 = *((void *)v49 + 1);
      *(void *)uint64_t v48 = *(void *)v49;
      *(void *)(v48 + 8) = v50;
      *(_DWORD *)(v48 + 16) = *((_DWORD *)v49 + 4);
      uint64_t v51 = *((void *)v49 + 4);
      long long v52 = *(void **)(v48 + 32);
      *(void *)(v48 + 24) = *((void *)v49 + 3);
      *(void *)(v48 + 32) = v51;

      *(void *)(v48 + 40) = *((void *)v49 + 5);
      swift_release();
      *(_DWORD *)(v48 + 48) = *((_DWORD *)v49 + 12);
      *(void *)(v48 + 56) = *((void *)v49 + 7);
      swift_release();
      *(_OWORD *)(v48 + 64) = *((_OWORD *)v49 + 4);
      *(void *)(v48 + 80) = *((void *)v49 + 10);
      swift_bridgeObjectRelease();
      goto LABEL_21;
    }
    outlined destroy of BoundInputsView(v48);
  }
  long long v53 = *((_OWORD *)v49 + 3);
  *(_OWORD *)(v48 + 32) = *((_OWORD *)v49 + 2);
  *(_OWORD *)(v48 + 48) = v53;
  *(_OWORD *)(v48 + 64) = *((_OWORD *)v49 + 4);
  *(void *)(v48 + 80) = *((void *)v49 + 10);
  long long v54 = *((_OWORD *)v49 + 1);
  *(_OWORD *)uint64_t v48 = *(_OWORD *)v49;
  *(_OWORD *)(v48 + 16) = v54;
LABEL_21:
  uint64_t v55 = a3[13];
  *((unsigned char *)a1 + a3[12]) = *((unsigned char *)a2 + a3[12]);
  long long v56 = (char *)a1 + v55;
  uint64_t v57 = (char *)a2 + v55;
  if (!*(void *)((char *)a1 + v55))
  {
LABEL_25:
    long long v61 = *((_OWORD *)v57 + 3);
    *((_OWORD *)v56 + 2) = *((_OWORD *)v57 + 2);
    *((_OWORD *)v56 + 3) = v61;
    *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
    *((void *)v56 + 10) = *((void *)v57 + 10);
    long long v62 = *((_OWORD *)v57 + 1);
    *(_OWORD *)long long v56 = *(_OWORD *)v57;
    *((_OWORD *)v56 + 1) = v62;
    return a1;
  }
  if (!*(void *)v57)
  {
    outlined destroy of BoundInputsView((uint64_t)a1 + v55);
    goto LABEL_25;
  }
  uint64_t v58 = *((void *)v57 + 1);
  *(void *)long long v56 = *(void *)v57;
  *((void *)v56 + 1) = v58;
  *((_DWORD *)v56 + 4) = *((_DWORD *)v57 + 4);
  uint64_t v59 = *((void *)v57 + 4);
  long long v60 = (void *)*((void *)v56 + 4);
  *((void *)v56 + 3) = *((void *)v57 + 3);
  *((void *)v56 + 4) = v59;

  *((void *)v56 + 5) = *((void *)v57 + 5);
  swift_release();
  *((_DWORD *)v56 + 12) = *((_DWORD *)v57 + 12);
  *((void *)v56 + 7) = *((void *)v57 + 7);
  swift_release();
  *((_OWORD *)v56 + 4) = *((_OWORD *)v57 + 4);
  *((void *)v56 + 10) = *((void *)v57 + 10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_187DD1E5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 32) + 24);
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
}

void sub_187DD1F50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for Binding<SearchFieldState>, type metadata accessor for SearchFieldState, MEMORY[0x1E4F41638]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 32) + 24) = (a2 - 1);
  }
}

uint64_t initializeBufferWithCopyOfBuffer for ToolbarStorage.Entry(uint64_t a1, void *a2, uint64_t a3)
{
  int v3 = a2;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v6 = a3;
    uint64_t v7 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = v3[1];
      *(void *)a1 = *v3;
      *(void *)(a1 + 8) = v13;
      int v14 = *((unsigned __int8 *)v3 + 56);
      swift_bridgeObjectRetain();
      if (v14 == 1)
      {
        long long v15 = *(_OWORD *)(v3 + 5);
        *(_OWORD *)(a1 + 40) = v15;
        (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 16, (uint64_t)(v3 + 2));
        *(unsigned char *)(a1 + 56) = 1;
      }
      else
      {
        long long v28 = *((_OWORD *)v3 + 2);
        *(_OWORD *)(a1 + 16) = *((_OWORD *)v3 + 1);
        *(_OWORD *)(a1 + 32) = v28;
        *(_OWORD *)(a1 + 41) = *(_OWORD *)((char *)v3 + 41);
      }
      *(unsigned char *)(a1 + 57) = *((unsigned char *)v3 + 57);
      *(_WORD *)(a1 + 58) = *((_WORD *)v3 + 29);
      uint64_t v29 = v3[9];
      *(void *)(a1 + 64) = v3[8];
      *(void *)(a1 + 72) = v29;
      uint64_t v30 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      uint64_t v31 = (void **)(a1 + v30);
      uint64_t v225 = v3;
      long long v32 = (void **)((char *)v3 + v30);
      uint64_t v33 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      uint64_t v34 = *(void *)(v33 - 8);
      char v35 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v34 + 48);
      swift_bridgeObjectRetain();
      if (v35(v32, 1, v33))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
        memcpy(v31, v32, *(void *)(*(void *)(v36 - 8) + 64));
        int v3 = v225;
      }
      else
      {
        uint64_t v227 = v31;
        uint64_t v219 = v34;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v218 = v33;
          uint64_t v229 = v6;
          uint64_t v55 = *v32;
          long long v56 = v32[1];
          *uint64_t v31 = *v32;
          v31[1] = v56;
          uint64_t v57 = v32[3];
          void v31[2] = v32[2];
          v31[3] = v57;
          *((unsigned char *)v31 + 32) = *((unsigned char *)v32 + 32);
          uint64_t v58 = v32[6];
          v31[5] = v32[5];
          v31[6] = v58;
          *((unsigned char *)v31 + 56) = *((unsigned char *)v32 + 56);
          uint64_t v59 = v31 + 8;
          long long v60 = v32 + 8;
          unint64_t v61 = (unint64_t)v32[23];
          id v62 = v55;
          id v63 = v56;
          swift_bridgeObjectRetain();
          swift_retain();
          if (v61 >> 1 == 4294967294)
          {
            long long v64 = *((_OWORD *)v32 + 13);
            *((_OWORD *)v31 + 12) = *((_OWORD *)v32 + 12);
            *((_OWORD *)v31 + 13) = v64;
            *((_OWORD *)v31 + 14) = *((_OWORD *)v32 + 14);
            *(_DWORD *)((char *)v31 + 239) = *(_DWORD *)((char *)v32 + 239);
            long long v65 = *((_OWORD *)v32 + 9);
            *((_OWORD *)v31 + 8) = *((_OWORD *)v32 + 8);
            *((_OWORD *)v31 + 9) = v65;
            long long v66 = *((_OWORD *)v32 + 11);
            *((_OWORD *)v31 + 10) = *((_OWORD *)v32 + 10);
            *((_OWORD *)v31 + 11) = v66;
            long long v67 = *((_OWORD *)v32 + 5);
            *uint64_t v59 = *v60;
            *((_OWORD *)v31 + 5) = v67;
            long long v68 = *((_OWORD *)v32 + 7);
            *((_OWORD *)v31 + 6) = *((_OWORD *)v32 + 6);
            *((_OWORD *)v31 + 7) = v68;
            long long v69 = v31;
            long long v70 = (char *)v32;
          }
          else
          {
            int v77 = *((unsigned __int8 *)v32 + 72);
            long long v70 = (char *)v32;
            if (v77 == 255)
            {
              *(void *)uint64_t v59 = *(void *)v60;
              *((unsigned char *)v31 + 72) = *((unsigned char *)v32 + 72);
              long long v69 = v31;
            }
            else
            {
              long long v78 = v32[8];
              outlined copy of GraphicsImage.Contents(v78, *((unsigned char *)v32 + 72));
              long long v69 = v31;
              v31[8] = v78;
              *((unsigned char *)v31 + 72) = v77;
              unint64_t v61 = (unint64_t)v32[23];
            }
            void v69[10] = v32[10];
            *(_OWORD *)(v69 + 11) = *(_OWORD *)(v32 + 11);
            *((unsigned char *)v69 + 104) = *((unsigned char *)v32 + 104);
            *(_OWORD *)((char *)v69 + 108) = *(_OWORD *)((char *)v32 + 108);
            *((unsigned char *)v69 + 124) = *((unsigned char *)v32 + 124);
            long long v136 = *((_OWORD *)v32 + 9);
            *((_OWORD *)v69 + 8) = *((_OWORD *)v32 + 8);
            *((_OWORD *)v69 + 9) = v136;
            *((_WORD *)v69 + 80) = *((_WORD *)v32 + 80);
            *((unsigned char *)v69 + 162) = *((unsigned char *)v32 + 162);
            *((unsigned char *)v69 + 163) = *((unsigned char *)v32 + 163);
            if (v61 >> 1 == 0xFFFFFFFF)
            {
              long long v137 = *(_OWORD *)(v32 + 23);
              *(_OWORD *)(v69 + 21) = *(_OWORD *)(v32 + 21);
              *(_OWORD *)(v69 + 23) = v137;
            }
            else
            {
              uint64_t v138 = (uint64_t)v32[21];
              uint64_t v139 = (uint64_t)v32[22];
              uint64_t v140 = v32[24];
              outlined copy of AccessibilityImageLabel(v138, v139, v61);
              v69[21] = (void *)v138;
              v69[22] = (void *)v139;
              v69[23] = (void *)v61;
              v69[24] = v140;
            }
            uint64_t v141 = v32[26];
            v69[25] = v32[25];
            v69[26] = v141;
            *((_WORD *)v69 + 108) = *((_WORD *)v32 + 108);
            *((_DWORD *)v69 + 55) = *((_DWORD *)v32 + 55);
            *((unsigned char *)v69 + 224) = *((unsigned char *)v32 + 224);
            uint64_t v142 = v32[29];
            v69[29] = v142;
            *((_WORD *)v69 + 120) = *((_WORD *)v32 + 120);
            *((unsigned char *)v69 + 242) = *((unsigned char *)v32 + 242);
            swift_unknownObjectRetain();
            swift_retain();
            id v143 = v142;
          }
          int v144 = (void *)*((void *)v70 + 32);
          if (v144)
          {
            v69[31] = (void *)*((void *)v70 + 31);
            unsigned char v69[32] = v144;
            uint64_t v145 = (void *)*((void *)v70 + 33);
            swift_bridgeObjectRetain();
            if ((unint64_t)v145 >= 2) {
              id v146 = v145;
            }
            v69[33] = v145;
            *((_DWORD *)v69 + 68) = *((_DWORD *)v70 + 68);
            *((unsigned char *)v69 + 276) = v70[276];
            *(_WORD *)((char *)v69 + 277) = *(_WORD *)(v70 + 277);
            char v147 = (void *)*((void *)v70 + 36);
            v69[35] = (void *)*((void *)v70 + 35);
            v69[36] = v147;
            swift_retain();
            swift_retain();
          }
          else
          {
            long long v148 = *(_OWORD *)(v70 + 264);
            *(_OWORD *)(v69 + 31) = *(_OWORD *)(v70 + 248);
            *(_OWORD *)(v69 + 33) = v148;
            *(_OWORD *)(v69 + 35) = *(_OWORD *)(v70 + 280);
          }
          unint64_t v149 = *((void *)v70 + 41);
          uint64_t v223 = (uint64_t *)v70;
          if (v149 >> 2 == 0xFFFFFFFF)
          {
            long long v150 = *(_OWORD *)(v70 + 376);
            *(_OWORD *)(v69 + 45) = *(_OWORD *)(v70 + 360);
            *(_OWORD *)(v69 + 47) = v150;
            v69[49] = (void *)*((void *)v70 + 49);
            long long v151 = *(_OWORD *)(v70 + 312);
            *(_OWORD *)(v69 + 37) = *(_OWORD *)(v70 + 296);
            *(_OWORD *)(v69 + 39) = v151;
            long long v152 = *(_OWORD *)(v70 + 344);
            *(_OWORD *)(v69 + 41) = *(_OWORD *)(v70 + 328);
            *(_OWORD *)(v69 + 43) = v152;
          }
          else
          {
            long long v153 = (void *)*((void *)v70 + 37);
            uint64_t v154 = *((void *)v70 + 38);
            uint64_t v155 = *((void *)v70 + 39);
            uint64_t v156 = (void *)*((void *)v70 + 40);
            uint64_t v157 = v223[42];
            uint64_t v158 = v223[43];
            uint64_t v159 = v223[44];
            uint64_t v160 = v223[45];
            uint64_t v203 = v223[46];
            uint64_t v206 = v223[47];
            long long v211 = (void *)v223[48];
            __dstc = (void *)v223[49];
            outlined copy of PlatformItemList.Item.SystemItem(v153, v154, v155, v223[40], v149, v157, v158, v159, v160, v203, v206, (char)v211, (uint64_t)__dstc);
            v227[37] = v153;
            v227[38] = (void *)v154;
            v227[39] = (void *)v155;
            v227[40] = v156;
            long long v70 = (char *)v223;
            v227[41] = (void *)v149;
            v227[42] = (void *)v157;
            v227[43] = (void *)v158;
            v227[44] = (void *)v159;
            v227[45] = (void *)v160;
            long long v69 = v227;
            v227[46] = (void *)v203;
            v227[47] = (void *)v206;
            v227[48] = v211;
            v227[49] = __dstc;
          }
          uint64_t v161 = (void *)*((void *)v70 + 51);
          if (v161 == (void *)1)
          {
            long long v162 = *((_OWORD *)v70 + 28);
            *((_OWORD *)v69 + 27) = *((_OWORD *)v70 + 27);
            *((_OWORD *)v69 + 28) = v162;
            *((unsigned char *)v69 + 464) = v70[464];
            long long v163 = *((_OWORD *)v70 + 26);
            *((_OWORD *)v69 + 25) = *((_OWORD *)v70 + 25);
            *((_OWORD *)v69 + 26) = v163;
          }
          else
          {
            *((_DWORD *)v69 + 100) = *((_DWORD *)v70 + 100);
            *((unsigned char *)v69 + 404) = v70[404];
            if (v161)
            {
              char v164 = (void *)*((void *)v70 + 52);
              v69[51] = v161;
              v69[52] = v164;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v69 + 51) = *(_OWORD *)(v70 + 408);
            }
            id v165 = (void *)*((void *)v70 + 53);
            if (v165)
            {
              long long v166 = (void *)*((void *)v70 + 54);
              v69[53] = v165;
              v69[54] = v166;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v69 + 53) = *(_OWORD *)(v70 + 424);
            }
            long long v167 = (void *)*((void *)v70 + 55);
            if (v167)
            {
              long long v168 = (void *)*((void *)v70 + 56);
              v69[55] = v167;
              v69[56] = v168;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v69 + 55) = *(_OWORD *)(v70 + 440);
            }
            v69[57] = (void *)*((void *)v70 + 57);
            *((unsigned char *)v69 + 464) = v70[464];
          }
          uint64_t v169 = (void *)*((void *)v70 + 60);
          v69[59] = (void *)*((void *)v70 + 59);
          v69[60] = v169;
          v69[61] = (void *)*((void *)v70 + 61);
          *((unsigned char *)v69 + 496) = v70[496];
          uint64_t v170 = (void *)*((void *)v70 + 63);
          swift_bridgeObjectRetain();
          if (v170)
          {
            uint64_t v171 = (void *)*((void *)v70 + 64);
            v69[63] = v170;
            v69[64] = v171;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v69 + 63) = *(_OWORD *)(v70 + 504);
          }
          *((_WORD *)v69 + 260) = *((_WORD *)v70 + 260);
          unint64_t v172 = (void *)*((void *)v70 + 66);
          if (v172)
          {
            v69[66] = v172;
            v69[67] = (void *)*((void *)v70 + 67);
            v69[68] = (void *)*((void *)v70 + 68);
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v69 + 33) = *((_OWORD *)v70 + 33);
            v69[68] = (void *)*((void *)v70 + 68);
          }
          long long v173 = (void *)*((void *)v70 + 69);
          if (v173 == (void *)1)
          {
            *(_OWORD *)(v69 + 69) = *(_OWORD *)(v70 + 552);
            v69[71] = (void *)*((void *)v70 + 71);
          }
          else
          {
            v69[69] = v173;
            long long v174 = (void *)*((void *)v70 + 70);
            swift_retain();
            if (v174)
            {
              uint64_t v175 = (void *)*((void *)v70 + 71);
              v69[70] = v174;
              v69[71] = v175;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v69 + 35) = *((_OWORD *)v70 + 35);
            }
          }
          uint64_t v176 = (void *)*((void *)v70 + 72);
          v69[72] = v176;
          v69[73] = (void *)*((void *)v70 + 73);
          v69[74] = (void *)*((void *)v70 + 74);
          v69[75] = (void *)*((void *)v70 + 75);
          v69[76] = (void *)*((void *)v70 + 76);
          v69[77] = (void *)*((void *)v70 + 77);
          v69[78] = (void *)*((void *)v70 + 78);
          *((_WORD *)v69 + 316) = *((_WORD *)v70 + 316);
          *((unsigned char *)v69 + 634) = v70[634];
          uint64_t v177 = type metadata accessor for PlatformItemList.Item();
          uint64_t v178 = *(int *)(v177 + 112);
          long long v212 = (char *)v69 + v178;
          __dsta = (int *)v177;
          uint64_t v179 = &v70[v178];
          uint64_t v180 = type metadata accessor for CommandOperation();
          uint64_t v181 = *(void *)(v180 - 8);
          long long v207 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v181 + 48);
          id v182 = v176;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (v207(v179, 1, v180))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(v212, v179, *(void *)(*(void *)(v183 - 8) + 64));
            uint64_t v6 = v229;
            uint64_t v33 = v218;
            uint64_t v34 = v219;
            long long v74 = v227;
            int v3 = v225;
          }
          else
          {
            *long long v212 = *v179;
            uint64_t v184 = *(int *)(v180 + 20);
            uint64_t v208 = v180;
            uint64_t v185 = &v212[v184];
            v186 = &v179[v184];
            uint64_t v187 = *(void *)&v179[v184];
            uint64_t v188 = *(void *)&v179[v184 + 8];
            char v189 = v179[v184 + 16];
            outlined copy of Text.Storage(v187, v188, v189);
            *(void *)uint64_t v185 = v187;
            *((void *)v185 + 1) = v188;
            v185[16] = v189;
            *((void *)v185 + 3) = *((void *)v186 + 3);
            uint64_t v190 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            int v191 = &v185[v190];
            long long v192 = &v186[v190];
            id v193 = v179;
            uint64_t v194 = type metadata accessor for UUID();
            id v195 = *(void (**)(char *, char *, uint64_t))(*(void *)(v194 - 8) + 16);
            swift_bridgeObjectRetain();
            v195(v191, v192, v194);
            uint64_t v196 = *(int *)(v208 + 24);
            long long v197 = &v212[v196];
            long long v198 = &v193[v196];
            int v3 = v225;
            if (*(void *)v198)
            {
              uint64_t v199 = *((void *)v198 + 1);
              *(void *)long long v197 = *(void *)v198;
              *((void *)v197 + 1) = v199;
              swift_retain();
            }
            else
            {
              *(_OWORD *)long long v197 = *(_OWORD *)v198;
            }
            uint64_t v6 = v229;
            uint64_t v33 = v218;
            uint64_t v34 = v219;
            long long v74 = v227;
            (*(void (**)(char *, void, uint64_t, uint64_t))(v181 + 56))(v212, 0, 1, v208);
          }
          *((unsigned char *)v74 + __dsta[29]) = *((unsigned char *)v223 + __dsta[29]);
          *((unsigned char *)v74 + __dsta[30]) = *((unsigned char *)v223 + __dsta[30]);
          *((unsigned char *)v74 + __dsta[31]) = *((unsigned char *)v223 + __dsta[31]);
          *((unsigned char *)v74 + __dsta[32]) = *((unsigned char *)v223 + __dsta[32]);
          *(void **)((char *)v74 + __dsta[33]) = *(void **)((char *)v223 + __dsta[33]);
          swift_retain();
        }
        else
        {
          long long v73 = *(_OWORD *)(v32 + 3);
          long long v74 = v31;
          *(_OWORD *)(v31 + 3) = v73;
          (**(void (***)(void **, void **))(v73 - 8))(v31, v32);
          v31[5] = v32[5];
          v31[6] = v32[6];
          v31[7] = v32[7];
          *((_OWORD *)v31 + 4) = *((_OWORD *)v32 + 4);
          uint64_t v75 = v32[10];
          v31[10] = v75;
          swift_retain();
          swift_bridgeObjectRetain();
          id v76 = v75;
          int v3 = v225;
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void **, void, uint64_t, uint64_t))(v34 + 56))(v74, 0, 1, v33);
      }
      goto LABEL_113;
    }
    if (EnumCaseMultiPayload)
    {
      memcpy((void *)a1, v3, *(void *)(*(void *)(v7 - 8) + 64));
LABEL_114:
      *(unsigned char *)(a1 + *(int *)(v6 + 20)) = *((unsigned char *)v3 + *(int *)(v6 + 20));
      return a1;
    }
    *(void *)a1 = *v3;
    *(void *)(a1 + 8) = v3[1];
    *(_OWORD *)(a1 + 16) = *((_OWORD *)v3 + 1);
    uint64_t v9 = v3[5];
    *(void *)(a1 + 32) = v3[4];
    *(void *)(a1 + 40) = v9;
    int v10 = *((unsigned __int8 *)v3 + 88);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v228 = v6;
    if (v10 == 1)
    {
      long long v11 = *(_OWORD *)(v3 + 9);
      *(_OWORD *)(a1 + 72) = v11;
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 48, (uint64_t)(v3 + 6));
      *(unsigned char *)(a1 + 88) = 1;
    }
    else
    {
      long long v16 = *((_OWORD *)v3 + 4);
      *(_OWORD *)(a1 + 48) = *((_OWORD *)v3 + 3);
      *(_OWORD *)(a1 + 64) = v16;
      *(_OWORD *)(a1 + 73) = *(_OWORD *)((char *)v3 + 73);
    }
    *(_DWORD *)(a1 + 89) = *(_DWORD *)((char *)v3 + 89);
    *(void *)(a1 + 96) = v3[12];
    long long v17 = *((_OWORD *)v3 + 8);
    *(_OWORD *)(a1 + 128) = v17;
    (**(void (***)(uint64_t, uint64_t))(v17 - 8))(a1 + 104, (uint64_t)(v3 + 13));
    *(void *)(a1 + 144) = v3[18];
    *(void *)(a1 + 152) = v3[19];
    *(void *)(a1 + 160) = v3[20];
    *(_OWORD *)(a1 + 168) = *(_OWORD *)(v3 + 21);
    uint64_t v18 = (void *)v3[23];
    *(void *)(a1 + 184) = v18;
    uint64_t v226 = type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v19 = *(int *)(v226 + 48);
    uint64_t v224 = a1;
    long long v20 = (void **)(a1 + v19);
    int v21 = (void **)((char *)v3 + v19);
    uint64_t v22 = type metadata accessor for PlatformItemList.Item();
    uint64_t v23 = *(void *)(v22 - 8);
    uint64_t v24 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v23 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    id v25 = v18;
    if (v24(v21, 1, v22))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v20, v21, *(void *)(*(void *)(v26 - 8) + 64));
      uint64_t v27 = v226;
      a1 = v224;
      uint64_t v6 = v228;
LABEL_68:
      swift_weakCopyInit();
      *(unsigned char *)(a1 + *(int *)(v27 + 56)) = *((unsigned char *)v3 + *(int *)(v27 + 56));
      *(unsigned char *)(a1 + *(int *)(v27 + 60)) = *((unsigned char *)v3 + *(int *)(v27 + 60));
LABEL_113:
      swift_storeEnumTagMultiPayload();
      goto LABEL_114;
    }
    uint64_t v217 = v23;
    uint64_t v222 = (int *)v22;
    uint64_t v37 = *v21;
    uint64_t v38 = v21[1];
    *long long v20 = *v21;
    v20[1] = v38;
    uint64_t v39 = v21[3];
    v20[2] = v21[2];
    v20[3] = v39;
    *((unsigned char *)v20 + 32) = *((unsigned char *)v21 + 32);
    uint64_t v40 = v21[6];
    void v20[5] = v21[5];
    void v20[6] = v40;
    *((unsigned char *)v20 + 56) = *((unsigned char *)v21 + 56);
    long long v41 = v20 + 8;
    uint64_t v42 = v21 + 8;
    unint64_t v43 = (unint64_t)v21[23];
    id v44 = v37;
    id v45 = v38;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v43 >> 1 == 4294967294)
    {
      long long v46 = *((_OWORD *)v21 + 13);
      *((_OWORD *)v20 + 12) = *((_OWORD *)v21 + 12);
      *((_OWORD *)v20 + 13) = v46;
      *((_OWORD *)v20 + 14) = *((_OWORD *)v21 + 14);
      *(_DWORD *)((char *)v20 + 239) = *(_DWORD *)((char *)v21 + 239);
      long long v47 = *((_OWORD *)v21 + 9);
      *((_OWORD *)v20 + 8) = *((_OWORD *)v21 + 8);
      *((_OWORD *)v20 + 9) = v47;
      long long v48 = *((_OWORD *)v21 + 11);
      *((_OWORD *)v20 + 10) = *((_OWORD *)v21 + 10);
      *((_OWORD *)v20 + 11) = v48;
      long long v49 = *((_OWORD *)v21 + 5);
      *long long v41 = *v42;
      *((_OWORD *)v20 + 5) = v49;
      long long v50 = *((_OWORD *)v21 + 7);
      *((_OWORD *)v20 + 6) = *((_OWORD *)v21 + 6);
      *((_OWORD *)v20 + 7) = v50;
      uint64_t v51 = v21[32];
      if (v51)
      {
LABEL_18:
        v20[31] = v21[31];
        v20[32] = v51;
        long long v52 = v21[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v52 >= 2) {
          id v53 = v52;
        }
        v20[33] = v52;
        *((_DWORD *)v20 + 68) = *((_DWORD *)v21 + 68);
        *((unsigned char *)v20 + 276) = *((unsigned char *)v21 + 276);
        *(_WORD *)((char *)v20 + 277) = *(_WORD *)((char *)v21 + 277);
        long long v54 = v21[36];
        v20[35] = v21[35];
        v20[36] = v54;
        swift_retain();
        swift_retain();
        goto LABEL_35;
      }
    }
    else
    {
      int v71 = *((unsigned __int8 *)v21 + 72);
      if (v71 == 255)
      {
        *(void *)long long v41 = *(void *)v42;
        *((unsigned char *)v20 + 72) = *((unsigned char *)v21 + 72);
      }
      else
      {
        uint64_t v72 = v21[8];
        outlined copy of GraphicsImage.Contents(v72, *((unsigned char *)v21 + 72));
        v20[8] = v72;
        *((unsigned char *)v20 + 72) = v71;
        unint64_t v43 = (unint64_t)v21[23];
      }
      v20[10] = v21[10];
      *(_OWORD *)(v20 + 11) = *(_OWORD *)(v21 + 11);
      *((unsigned char *)v20 + 104) = *((unsigned char *)v21 + 104);
      *(_OWORD *)((char *)v20 + 108) = *(_OWORD *)((char *)v21 + 108);
      *((unsigned char *)v20 + 124) = *((unsigned char *)v21 + 124);
      long long v79 = *((_OWORD *)v21 + 9);
      *((_OWORD *)v20 + 8) = *((_OWORD *)v21 + 8);
      *((_OWORD *)v20 + 9) = v79;
      *((_WORD *)v20 + 80) = *((_WORD *)v21 + 80);
      *((unsigned char *)v20 + 162) = *((unsigned char *)v21 + 162);
      *((unsigned char *)v20 + 163) = *((unsigned char *)v21 + 163);
      if (v43 >> 1 == 0xFFFFFFFF)
      {
        long long v80 = *(_OWORD *)(v21 + 23);
        *(_OWORD *)(v20 + 21) = *(_OWORD *)(v21 + 21);
        *(_OWORD *)(v20 + 23) = v80;
      }
      else
      {
        uint64_t v81 = (uint64_t)v21[21];
        uint64_t v82 = (uint64_t)v21[22];
        long long v83 = v21[24];
        outlined copy of AccessibilityImageLabel(v81, v82, v43);
        v20[21] = (void *)v81;
        v20[22] = (void *)v82;
        v20[23] = (void *)v43;
        unsigned char v20[24] = v83;
      }
      long long v84 = v21[26];
      v20[25] = v21[25];
      v20[26] = v84;
      *((_WORD *)v20 + 108) = *((_WORD *)v21 + 108);
      *((_DWORD *)v20 + 55) = *((_DWORD *)v21 + 55);
      *((unsigned char *)v20 + 224) = *((unsigned char *)v21 + 224);
      long long v85 = v21[29];
      v20[29] = v85;
      *((_WORD *)v20 + 120) = *((_WORD *)v21 + 120);
      *((unsigned char *)v20 + 242) = *((unsigned char *)v21 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v86 = v85;
      uint64_t v51 = v21[32];
      if (v51) {
        goto LABEL_18;
      }
    }
    long long v87 = *(_OWORD *)(v21 + 33);
    *(_OWORD *)(v20 + 31) = *(_OWORD *)(v21 + 31);
    *(_OWORD *)(v20 + 33) = v87;
    *(_OWORD *)(v20 + 35) = *(_OWORD *)(v21 + 35);
LABEL_35:
    unint64_t v88 = (unint64_t)v21[41];
    if (v88 >> 2 == 0xFFFFFFFF)
    {
      long long v89 = *(_OWORD *)(v21 + 47);
      *(_OWORD *)(v20 + 45) = *(_OWORD *)(v21 + 45);
      *(_OWORD *)(v20 + 47) = v89;
      v20[49] = v21[49];
      long long v90 = *(_OWORD *)(v21 + 39);
      *(_OWORD *)(v20 + 37) = *(_OWORD *)(v21 + 37);
      *(_OWORD *)(v20 + 39) = v90;
      long long v91 = *(_OWORD *)(v21 + 43);
      *(_OWORD *)(v20 + 41) = *(_OWORD *)(v21 + 41);
      *(_OWORD *)(v20 + 43) = v91;
    }
    else
    {
      uint64_t v92 = v21[37];
      uint64_t v93 = (uint64_t)v21[38];
      uint64_t v94 = (uint64_t)v21[40];
      uint64_t v96 = (uint64_t)v21[42];
      uint64_t v95 = (uint64_t)v21[43];
      long long v97 = v21[44];
      uint64_t v201 = (uint64_t)v21[39];
      uint64_t v202 = (uint64_t)v21[45];
      uint64_t v204 = (uint64_t)v21[46];
      long long v209 = v21[47];
      __dstb = v21[48];
      uint64_t v220 = (uint64_t)v21[49];
      outlined copy of PlatformItemList.Item.SystemItem(v92, v93, v201, v94, v88, v96, v95, (char)v97, v202, v204, (uint64_t)v209, (char)__dstb, v220);
      v20[37] = v92;
      v20[38] = (void *)v93;
      v20[39] = (void *)v201;
      unsigned char v20[40] = (void *)v94;
      v20[41] = (void *)v88;
      v20[42] = (void *)v96;
      v20[43] = (void *)v95;
      v20[44] = v97;
      v20[45] = (void *)v202;
      v20[46] = (void *)v204;
      v20[47] = v209;
      v20[48] = __dstb;
      v20[49] = (void *)v220;
    }
    uint64_t v98 = v21[51];
    if (v98 == (void *)1)
    {
      long long v99 = *((_OWORD *)v21 + 28);
      *((_OWORD *)v20 + 27) = *((_OWORD *)v21 + 27);
      *((_OWORD *)v20 + 28) = v99;
      *((unsigned char *)v20 + 464) = *((unsigned char *)v21 + 464);
      long long v100 = *((_OWORD *)v21 + 26);
      *((_OWORD *)v20 + 25) = *((_OWORD *)v21 + 25);
      *((_OWORD *)v20 + 26) = v100;
    }
    else
    {
      *((_DWORD *)v20 + 100) = *((_DWORD *)v21 + 100);
      *((unsigned char *)v20 + 404) = *((unsigned char *)v21 + 404);
      if (v98)
      {
        long long v101 = v21[52];
        v20[51] = v98;
        v20[52] = v101;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v20 + 51) = *(_OWORD *)(v21 + 51);
      }
      long long v102 = v21[53];
      if (v102)
      {
        uint64_t v103 = v21[54];
        v20[53] = v102;
        v20[54] = v103;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v20 + 53) = *(_OWORD *)(v21 + 53);
      }
      uint64_t v104 = v21[55];
      if (v104)
      {
        uint64_t v105 = v21[56];
        v20[55] = v104;
        v20[56] = v105;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v20 + 55) = *(_OWORD *)(v21 + 55);
      }
      v20[57] = v21[57];
      *((unsigned char *)v20 + 464) = *((unsigned char *)v21 + 464);
    }
    uint64_t v106 = v21[60];
    v20[59] = v21[59];
    v20[60] = v106;
    v20[61] = v21[61];
    *((unsigned char *)v20 + 496) = *((unsigned char *)v21 + 496);
    uint64_t v107 = v21[63];
    swift_bridgeObjectRetain();
    if (v107)
    {
      uint64_t v108 = v21[64];
      v20[63] = v107;
      v20[64] = v108;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v20 + 63) = *(_OWORD *)(v21 + 63);
    }
    *((_WORD *)v20 + 260) = *((_WORD *)v21 + 260);
    uint64_t v109 = v21[66];
    if (v109)
    {
      v20[66] = v109;
      v20[67] = v21[67];
      v20[68] = v21[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      *((_OWORD *)v20 + 33) = *((_OWORD *)v21 + 33);
      v20[68] = v21[68];
    }
    uint64_t v110 = v21[69];
    if (v110 == (void *)1)
    {
      *(_OWORD *)(v20 + 69) = *(_OWORD *)(v21 + 69);
      v20[71] = v21[71];
    }
    else
    {
      v20[69] = v110;
      uint64_t v111 = v21[70];
      swift_retain();
      if (v111)
      {
        uint64_t v112 = v21[71];
        v20[70] = v111;
        v20[71] = v112;
        swift_retain();
      }
      else
      {
        *((_OWORD *)v20 + 35) = *((_OWORD *)v21 + 35);
      }
    }
    uint64_t v113 = v21[72];
    v20[72] = v113;
    v20[73] = v21[73];
    v20[74] = v21[74];
    v20[75] = v21[75];
    v20[76] = v21[76];
    v20[77] = v21[77];
    v20[78] = v21[78];
    *((_WORD *)v20 + 316) = *((_WORD *)v21 + 316);
    *((unsigned char *)v20 + 634) = *((unsigned char *)v21 + 634);
    uint64_t v114 = v222[28];
    __dst = (char *)v20 + v114;
    uint64_t v221 = (char *)v21 + v114;
    uint64_t v115 = type metadata accessor for CommandOperation();
    uint64_t v205 = *(void *)(v115 - 8);
    long long v210 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v205 + 48);
    id v116 = v113;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v210(v221, 1, v115))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v221, *(void *)(*(void *)(v117 - 8) + 64));
      uint64_t v6 = v228;
      uint64_t v118 = v222;
      a1 = v224;
      uint64_t v119 = v217;
    }
    else
    {
      unsigned char *__dst = *v221;
      uint64_t v120 = *(int *)(v115 + 20);
      uint64_t v121 = &__dst[v120];
      uint64_t v122 = &v221[v120];
      uint64_t v123 = *(void *)&v221[v120];
      uint64_t v124 = *(void *)&v221[v120 + 8];
      char v125 = v221[v120 + 16];
      outlined copy of Text.Storage(v123, *((void *)v122 + 1), v122[16]);
      *(void *)uint64_t v121 = v123;
      *((void *)v121 + 1) = v124;
      v121[16] = v125;
      *((void *)v121 + 3) = *((void *)v122 + 3);
      uint64_t v126 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
      uint64_t v127 = &v121[v126];
      uint64_t v128 = &v122[v126];
      uint64_t v129 = type metadata accessor for UUID();
      uint64_t v130 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v129 - 8) + 16);
      swift_bridgeObjectRetain();
      v130(v127, v128, v129);
      uint64_t v131 = *(int *)(v115 + 24);
      uint64_t v132 = &__dst[v131];
      uint64_t v133 = &v221[v131];
      if (*v133)
      {
        uint64_t v134 = v133[1];
        *uint64_t v132 = *v133;
        v132[1] = v134;
        swift_retain();
      }
      else
      {
        *(_OWORD *)uint64_t v132 = *(_OWORD *)v133;
      }
      uint64_t v6 = v228;
      uint64_t v118 = v222;
      uint64_t v119 = v217;
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v205 + 56))(__dst, 0, 1, v115);
      a1 = v224;
    }
    *((unsigned char *)v20 + v118[29]) = *((unsigned char *)v21 + v118[29]);
    *((unsigned char *)v20 + v118[30]) = *((unsigned char *)v21 + v118[30]);
    *((unsigned char *)v20 + v118[31]) = *((unsigned char *)v21 + v118[31]);
    *((unsigned char *)v20 + v118[32]) = *((unsigned char *)v21 + v118[32]);
    *(void **)((char *)v20 + v118[33]) = *(void **)((char *)v21 + v118[33]);
    uint64_t v135 = *(void (**)(void **, void, uint64_t, int *))(v119 + 56);
    swift_retain();
    v135(v20, 0, 1, v118);
    uint64_t v27 = v226;
    goto LABEL_68;
  }
  uint64_t v12 = *a2;
  *(void *)a1 = *a2;
  a1 = v12 + ((v5 + 16) & ~(unint64_t)v5);
  swift_retain();
  return a1;
}

char *assignWithCopy for ToolbarStorage.Entry(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = a2;
  int v5 = (char *)a1;
  if ((unsigned __int8 *)a1 == a2) {
    goto LABEL_114;
  }
  outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(a1, type metadata accessor for ToolbarStorage.Entry.Kind);
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)int v5 = *(void *)v4;
    *((void *)v5 + 1) = *((void *)v4 + 1);
    int v10 = v4[56];
    swift_bridgeObjectRetain();
    uint64_t v248 = a3;
    if (v10 == 1)
    {
      uint64_t v11 = *((void *)v4 + 5);
      *((void *)v5 + 5) = v11;
      *((void *)v5 + 6) = *((void *)v4 + 6);
      (**(void (***)(uint64_t, uint64_t))(v11 - 8))((uint64_t)(v5 + 16), (uint64_t)(v4 + 16));
      v5[56] = 1;
    }
    else
    {
      long long v25 = *((_OWORD *)v4 + 1);
      long long v26 = *((_OWORD *)v4 + 2);
      *(_OWORD *)(v5 + 41) = *(_OWORD *)(v4 + 41);
      *((_OWORD *)v5 + 1) = v25;
      *((_OWORD *)v5 + 2) = v26;
    }
    v5[57] = v4[57];
    v5[58] = v4[58];
    v5[59] = v4[59];
    *((void *)v5 + 8) = *((void *)v4 + 8);
    *((void *)v5 + 9) = *((void *)v4 + 9);
    uint64_t v27 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    long long v28 = (void **)&v5[v27];
    uint64_t v29 = (void **)&v4[v27];
    uint64_t v30 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v31 = *(void *)(v30 - 8);
    long long v32 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v31 + 48);
    swift_bridgeObjectRetain();
    if (v32(v29, 1, v30))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v28, v29, *(void *)(*(void *)(v33 - 8) + 64));
LABEL_112:
      a3 = v248;
      goto LABEL_113;
    }
    uint64_t v246 = v31;
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      int v71 = v29[3];
      v28[3] = v71;
      v28[4] = v29[4];
      (**((void (***)(void **, void **))v71 - 1))(v28, v29);
      v28[5] = v29[5];
      *((_DWORD *)v28 + 12) = *((_DWORD *)v29 + 12);
      *((_DWORD *)v28 + 13) = *((_DWORD *)v29 + 13);
      v28[7] = v29[7];
      v28[8] = v29[8];
      v28[9] = v29[9];
      uint64_t v72 = v29[10];
      v28[10] = v72;
      swift_retain();
      swift_bridgeObjectRetain();
      id v73 = v72;
      uint64_t v74 = v31;
LABEL_111:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v74 + 56))(v28, 0, 1, v30);
      goto LABEL_112;
    }
    uint64_t v241 = v30;
    id v53 = *v29;
    *long long v28 = *v29;
    long long v54 = v29[1];
    v28[1] = v54;
    uint64_t v28[2] = v29[2];
    v28[3] = v29[3];
    *((unsigned char *)v28 + 32) = *((unsigned char *)v29 + 32);
    v28[5] = v29[5];
    v28[6] = v29[6];
    *((unsigned char *)v28 + 56) = *((unsigned char *)v29 + 56);
    uint64_t v55 = v28 + 8;
    long long v56 = v29 + 8;
    unint64_t v57 = (unint64_t)v29[23];
    id v58 = v53;
    id v59 = v54;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v57 >> 1 == 4294967294)
    {
      long long v60 = *(_OWORD *)v56;
      long long v61 = *((_OWORD *)v29 + 5);
      long long v62 = *((_OWORD *)v29 + 7);
      *((_OWORD *)v28 + 6) = *((_OWORD *)v29 + 6);
      *((_OWORD *)v28 + 7) = v62;
      _OWORD *v55 = v60;
      *((_OWORD *)v28 + 5) = v61;
      long long v63 = *((_OWORD *)v29 + 8);
      long long v64 = *((_OWORD *)v29 + 9);
      long long v65 = *((_OWORD *)v29 + 11);
      *((_OWORD *)v28 + 10) = *((_OWORD *)v29 + 10);
      *((_OWORD *)v28 + 11) = v65;
      *((_OWORD *)v28 + 8) = v63;
      *((_OWORD *)v28 + 9) = v64;
      long long v66 = *((_OWORD *)v29 + 12);
      long long v67 = *((_OWORD *)v29 + 13);
      long long v68 = *((_OWORD *)v29 + 14);
      *(_DWORD *)((char *)v28 + 239) = *(_DWORD *)((char *)v29 + 239);
      *((_OWORD *)v28 + 13) = v67;
      *((_OWORD *)v28 + 14) = v68;
      *((_OWORD *)v28 + 12) = v66;
    }
    else
    {
      int v75 = *((unsigned __int8 *)v29 + 72);
      if (v75 == 255)
      {
        id v149 = *v56;
        *((unsigned char *)v28 + 72) = *((unsigned char *)v29 + 72);
        *(void *)uint64_t v55 = v149;
      }
      else
      {
        id v76 = *v56;
        outlined copy of GraphicsImage.Contents(*v56, *((unsigned char *)v29 + 72));
        v28[8] = v76;
        *((unsigned char *)v28 + 72) = v75;
      }
      v28[10] = v29[10];
      *(_OWORD *)(v28 + 11) = *(_OWORD *)(v29 + 11);
      *((unsigned char *)v28 + 104) = *((unsigned char *)v29 + 104);
      long long v150 = *(_OWORD *)((char *)v29 + 108);
      *((unsigned char *)v28 + 124) = *((unsigned char *)v29 + 124);
      *(_OWORD *)((char *)v28 + 108) = v150;
      long long v151 = *((_OWORD *)v29 + 8);
      long long v152 = *((_OWORD *)v29 + 9);
      *((unsigned char *)v28 + 160) = *((unsigned char *)v29 + 160);
      *((_OWORD *)v28 + 8) = v151;
      *((_OWORD *)v28 + 9) = v152;
      *((unsigned char *)v28 + 161) = *((unsigned char *)v29 + 161);
      *((unsigned char *)v28 + 162) = *((unsigned char *)v29 + 162);
      *((unsigned char *)v28 + 163) = *((unsigned char *)v29 + 163);
      unint64_t v153 = (unint64_t)v29[23];
      if (v153 >> 1 == 0xFFFFFFFF)
      {
        long long v154 = *(_OWORD *)(v29 + 23);
        *(_OWORD *)(v28 + 21) = *(_OWORD *)(v29 + 21);
        *(_OWORD *)(v28 + 23) = v154;
      }
      else
      {
        uint64_t v155 = (uint64_t)v29[21];
        uint64_t v156 = (uint64_t)v29[22];
        uint64_t v157 = v29[24];
        outlined copy of AccessibilityImageLabel(v155, v156, (uint64_t)v29[23]);
        v28[21] = (void *)v155;
        v28[22] = (void *)v156;
        v28[23] = (void *)v153;
        v28[24] = v157;
      }
      v28[25] = v29[25];
      v28[26] = v29[26];
      *((unsigned char *)v28 + 216) = *((unsigned char *)v29 + 216);
      *((unsigned char *)v28 + 217) = *((unsigned char *)v29 + 217);
      int v158 = *((_DWORD *)v29 + 55);
      *((unsigned char *)v28 + 224) = *((unsigned char *)v29 + 224);
      *((_DWORD *)v28 + 55) = v158;
      uint64_t v159 = v29[29];
      v28[29] = v159;
      *((_WORD *)v28 + 120) = *((_WORD *)v29 + 120);
      *((unsigned char *)v28 + 242) = *((unsigned char *)v29 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v160 = v159;
    }
    if (v29[32])
    {
      v28[31] = v29[31];
      v28[32] = v29[32];
      uint64_t v161 = v29[33];
      swift_bridgeObjectRetain();
      if ((unint64_t)v161 >= 2) {
        id v162 = v161;
      }
      v28[33] = v161;
      int v163 = *((_DWORD *)v29 + 68);
      *((unsigned char *)v28 + 276) = *((unsigned char *)v29 + 276);
      *((_DWORD *)v28 + 68) = v163;
      *((unsigned char *)v28 + 277) = *((unsigned char *)v29 + 277);
      *((unsigned char *)v28 + 278) = *((unsigned char *)v29 + 278);
      v28[35] = v29[35];
      v28[36] = v29[36];
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v164 = *(_OWORD *)(v29 + 31);
      long long v165 = *(_OWORD *)(v29 + 35);
      *(_OWORD *)(v28 + 33) = *(_OWORD *)(v29 + 33);
      *(_OWORD *)(v28 + 35) = v165;
      *(_OWORD *)(v28 + 31) = v164;
    }
    unint64_t v166 = (unint64_t)v29[41];
    if (v166 >> 2 == 0xFFFFFFFF)
    {
      long long v167 = *(_OWORD *)(v29 + 37);
      long long v168 = *(_OWORD *)(v29 + 41);
      *(_OWORD *)(v28 + 39) = *(_OWORD *)(v29 + 39);
      *(_OWORD *)(v28 + 41) = v168;
      *(_OWORD *)(v28 + 37) = v167;
      long long v169 = *(_OWORD *)(v29 + 43);
      long long v170 = *(_OWORD *)(v29 + 45);
      long long v171 = *(_OWORD *)(v29 + 47);
      v28[49] = v29[49];
      *(_OWORD *)(v28 + 45) = v170;
      *(_OWORD *)(v28 + 47) = v171;
      *(_OWORD *)(v28 + 43) = v169;
    }
    else
    {
      unint64_t v172 = v29[37];
      uint64_t v173 = (uint64_t)v29[38];
      uint64_t v220 = (uint64_t)v29[40];
      uint64_t v224 = (uint64_t)v29[39];
      uint64_t v174 = (uint64_t)v29[42];
      uint64_t v175 = (uint64_t)v29[43];
      uint64_t v176 = v29[44];
      uint64_t v229 = (uint64_t)v29[45];
      __dstb = v29[46];
      uint64_t v235 = (uint64_t)v29[47];
      uint64_t v238 = v29[48];
      long long v243 = v29[49];
      outlined copy of PlatformItemList.Item.SystemItem(v172, v173, v224, v220, v166, v174, v175, (char)v176, v229, (uint64_t)__dstb, v235, (char)v238, (uint64_t)v243);
      v28[37] = v172;
      v28[38] = (void *)v173;
      v28[39] = (void *)v224;
      v28[40] = (void *)v220;
      v28[41] = (void *)v166;
      v28[42] = (void *)v174;
      v28[43] = (void *)v175;
      v28[44] = v176;
      v28[45] = (void *)v229;
      v28[46] = __dstb;
      v28[47] = (void *)v235;
      v28[48] = v238;
      v28[49] = v243;
    }
    if (v29[51] == (void *)1)
    {
      *((_OWORD *)v28 + 25) = *((_OWORD *)v29 + 25);
      long long v177 = *((_OWORD *)v29 + 26);
      long long v178 = *((_OWORD *)v29 + 27);
      long long v179 = *((_OWORD *)v29 + 28);
      *((unsigned char *)v28 + 464) = *((unsigned char *)v29 + 464);
      *((_OWORD *)v28 + 27) = v178;
      *((_OWORD *)v28 + 28) = v179;
      *((_OWORD *)v28 + 26) = v177;
    }
    else
    {
      *((unsigned char *)v28 + 400) = *((unsigned char *)v29 + 400);
      *((unsigned char *)v28 + 401) = *((unsigned char *)v29 + 401);
      *((unsigned char *)v28 + 402) = *((unsigned char *)v29 + 402);
      *((unsigned char *)v28 + 403) = *((unsigned char *)v29 + 403);
      *((unsigned char *)v28 + 404) = *((unsigned char *)v29 + 404);
      uint64_t v180 = v29[51];
      if (v180)
      {
        uint64_t v181 = v29[52];
        v28[51] = v180;
        v28[52] = v181;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 51) = *(_OWORD *)(v29 + 51);
      }
      id v182 = v29[53];
      if (v182)
      {
        uint64_t v183 = v29[54];
        v28[53] = v182;
        v28[54] = v183;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 53) = *(_OWORD *)(v29 + 53);
      }
      uint64_t v184 = v29[55];
      if (v184)
      {
        uint64_t v185 = v29[56];
        v28[55] = v184;
        v28[56] = v185;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v28 + 55) = *(_OWORD *)(v29 + 55);
      }
      v28[57] = v29[57];
      *((unsigned char *)v28 + 464) = *((unsigned char *)v29 + 464);
    }
    v28[59] = v29[59];
    v28[60] = v29[60];
    v28[61] = v29[61];
    *((unsigned char *)v28 + 496) = *((unsigned char *)v29 + 496);
    v186 = v29[63];
    swift_bridgeObjectRetain();
    if (v186)
    {
      uint64_t v187 = v29[64];
      v28[63] = v186;
      v28[64] = v187;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v28 + 63) = *(_OWORD *)(v29 + 63);
    }
    *((_WORD *)v28 + 260) = *((_WORD *)v29 + 260);
    uint64_t v188 = v29[66];
    if (v188)
    {
      v28[66] = v188;
      v28[67] = v29[67];
      v28[68] = v29[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v189 = *((_OWORD *)v29 + 33);
      v28[68] = v29[68];
      *((_OWORD *)v28 + 33) = v189;
    }
    uint64_t v190 = v29[69];
    if (v190 == (void *)1)
    {
      int v191 = v28 + 69;
      long long v192 = *(_OWORD *)(v29 + 69);
      v28[71] = v29[71];
    }
    else
    {
      v28[69] = v190;
      id v193 = v29[70];
      swift_retain();
      if (v193)
      {
        uint64_t v194 = v29[71];
        v28[70] = v193;
        v28[71] = v194;
        swift_retain();
LABEL_104:
        id v195 = v29[72];
        v28[72] = v195;
        v28[73] = v29[73];
        v28[74] = v29[74];
        v28[75] = v29[75];
        v28[76] = v29[76];
        v28[77] = v29[77];
        v28[78] = v29[78];
        *((unsigned char *)v28 + 632) = *((unsigned char *)v29 + 632);
        *((unsigned char *)v28 + 633) = *((unsigned char *)v29 + 633);
        *((unsigned char *)v28 + 634) = *((unsigned char *)v29 + 634);
        long long v239 = (int *)type metadata accessor for PlatformItemList.Item();
        uint64_t v196 = v239[28];
        long long v244 = (char *)v28 + v196;
        long long v197 = (char *)v29 + v196;
        uint64_t v198 = type metadata accessor for CommandOperation();
        uint64_t v225 = *(void *)(v198 - 8);
        uint64_t v230 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v225 + 48);
        id v199 = v195;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (v230(v197, 1, v198))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v244, v197, *(void *)(*(void *)(v200 - 8) + 64));
          uint64_t v74 = v246;
          uint64_t v30 = v241;
        }
        else
        {
          *long long v244 = *v197;
          uint64_t v201 = *(int *)(v198 + 20);
          uint64_t v202 = v197;
          uint64_t v221 = v197;
          uint64_t v203 = &v244[v201];
          uint64_t v204 = &v202[v201];
          uint64_t v236 = v198;
          uint64_t v205 = *(void *)&v202[v201];
          uint64_t v206 = *(void *)&v202[v201 + 8];
          char v207 = v202[v201 + 16];
          outlined copy of Text.Storage(v205, v206, v207);
          *(void *)uint64_t v203 = v205;
          *((void *)v203 + 1) = v206;
          v203[16] = v207;
          *((void *)v203 + 3) = *((void *)v204 + 3);
          uint64_t v208 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          long long v209 = &v203[v208];
          long long v210 = &v204[v208];
          uint64_t v211 = type metadata accessor for UUID();
          long long v212 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v211 - 8) + 16);
          swift_bridgeObjectRetain();
          v212(v209, v210, v211);
          uint64_t v213 = *(int *)(v236 + 24);
          long long v214 = &v244[v213];
          long long v215 = &v221[v213];
          if (*v215)
          {
            uint64_t v216 = v215[1];
            *long long v214 = *v215;
            v214[1] = v216;
            swift_retain();
          }
          else
          {
            *(_OWORD *)long long v214 = *(_OWORD *)v215;
          }
          uint64_t v74 = v246;
          uint64_t v30 = v241;
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v225 + 56))(v244, 0, 1, v236);
        }
        *((unsigned char *)v28 + v239[29]) = *((unsigned char *)v29 + v239[29]);
        *((unsigned char *)v28 + v239[30]) = *((unsigned char *)v29 + v239[30]);
        *((unsigned char *)v28 + v239[31]) = *((unsigned char *)v29 + v239[31]);
        *((unsigned char *)v28 + v239[32]) = *((unsigned char *)v29 + v239[32]);
        *(void **)((char *)v28 + v239[33]) = *(void **)((char *)v29 + v239[33]);
        swift_retain();
        goto LABEL_111;
      }
      int v191 = v28 + 70;
      long long v192 = *((_OWORD *)v29 + 35);
    }
    _OWORD *v191 = v192;
    goto LABEL_104;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_DWORD *)int v5 = *(_DWORD *)v4;
    *((_DWORD *)v5 + 1) = *((_DWORD *)v4 + 1);
    *((void *)v5 + 1) = *((void *)v4 + 1);
    *((void *)v5 + 2) = *((void *)v4 + 2);
    *((void *)v5 + 3) = *((void *)v4 + 3);
    *((void *)v5 + 4) = *((void *)v4 + 4);
    *((void *)v5 + 5) = *((void *)v4 + 5);
    int v8 = v4[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v247 = a3;
    if (v8 == 1)
    {
      uint64_t v9 = *((void *)v4 + 9);
      *((void *)v5 + 9) = v9;
      *((void *)v5 + 10) = *((void *)v4 + 10);
      (**(void (***)(uint64_t, uint64_t))(v9 - 8))((uint64_t)(v5 + 48), (uint64_t)(v4 + 48));
      v5[88] = 1;
    }
    else
    {
      long long v12 = *((_OWORD *)v4 + 3);
      long long v13 = *((_OWORD *)v4 + 4);
      *(_OWORD *)(v5 + 73) = *(_OWORD *)(v4 + 73);
      *((_OWORD *)v5 + 3) = v12;
      *((_OWORD *)v5 + 4) = v13;
    }
    v5[89] = v4[89];
    v5[90] = v4[90];
    v5[91] = v4[91];
    v5[92] = v4[92];
    *((void *)v5 + 12) = *((void *)v4 + 12);
    uint64_t v14 = *((void *)v4 + 16);
    *((void *)v5 + 16) = v14;
    *((void *)v5 + 17) = *((void *)v4 + 17);
    (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(v5 + 104), (uint64_t)(v4 + 104));
    *((void *)v5 + 18) = *((void *)v4 + 18);
    *((_DWORD *)v5 + 38) = *((_DWORD *)v4 + 38);
    *((_DWORD *)v5 + 39) = *((_DWORD *)v4 + 39);
    *((void *)v5 + 20) = *((void *)v4 + 20);
    *((void *)v5 + 21) = *((void *)v4 + 21);
    *((void *)v5 + 22) = *((void *)v4 + 22);
    long long v15 = (void *)*((void *)v4 + 23);
    *((void *)v5 + 23) = v15;
    long long v16 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v17 = v16[12];
    long long v242 = v5;
    uint64_t v18 = (void **)&v5[v17];
    uint64_t v245 = v4;
    uint64_t v19 = (void **)&v4[v17];
    uint64_t v20 = type metadata accessor for PlatformItemList.Item();
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v21 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    id v23 = v15;
    if (v22(v19, 1, v20))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v18, v19, *(void *)(*(void *)(v24 - 8) + 64));
      uint64_t v4 = v245;
      int v5 = v242;
LABEL_66:
      swift_weakCopyInit();
      v5[v16[14]] = v4[v16[14]];
      v5[v16[15]] = v4[v16[15]];
LABEL_113:
      swift_storeEnumTagMultiPayload();
      goto LABEL_114;
    }
    uint64_t v234 = v21;
    uint64_t v237 = v16;
    long long v240 = (int *)v20;
    uint64_t v34 = *v19;
    *uint64_t v18 = *v19;
    char v35 = v19[1];
    v18[1] = v35;
    void v18[2] = v19[2];
    v18[3] = v19[3];
    *((unsigned char *)v18 + 32) = *((unsigned char *)v19 + 32);
    void v18[5] = v19[5];
    v18[6] = v19[6];
    *((unsigned char *)v18 + 56) = *((unsigned char *)v19 + 56);
    uint64_t v36 = v18 + 8;
    uint64_t v37 = v19 + 8;
    unint64_t v38 = (unint64_t)v19[23];
    id v39 = v34;
    id v40 = v35;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v38 >> 1 == 4294967294)
    {
      long long v41 = *(_OWORD *)v37;
      long long v42 = *((_OWORD *)v19 + 5);
      long long v43 = *((_OWORD *)v19 + 7);
      *((_OWORD *)v18 + 6) = *((_OWORD *)v19 + 6);
      *((_OWORD *)v18 + 7) = v43;
      *uint64_t v36 = v41;
      *((_OWORD *)v18 + 5) = v42;
      long long v44 = *((_OWORD *)v19 + 8);
      long long v45 = *((_OWORD *)v19 + 9);
      long long v46 = *((_OWORD *)v19 + 11);
      *((_OWORD *)v18 + 10) = *((_OWORD *)v19 + 10);
      *((_OWORD *)v18 + 11) = v46;
      *((_OWORD *)v18 + 8) = v44;
      *((_OWORD *)v18 + 9) = v45;
      long long v47 = *((_OWORD *)v19 + 12);
      long long v48 = *((_OWORD *)v19 + 13);
      long long v49 = *((_OWORD *)v19 + 14);
      *(_DWORD *)((char *)v18 + 239) = *(_DWORD *)((char *)v19 + 239);
      *((_OWORD *)v18 + 13) = v48;
      *((_OWORD *)v18 + 14) = v49;
      *((_OWORD *)v18 + 12) = v47;
      if (v19[32])
      {
LABEL_17:
        v18[31] = v19[31];
        v18[32] = v19[32];
        long long v50 = v19[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v50 >= 2) {
          id v51 = v50;
        }
        v18[33] = v50;
        int v52 = *((_DWORD *)v19 + 68);
        *((unsigned char *)v18 + 276) = *((unsigned char *)v19 + 276);
        *((_DWORD *)v18 + 68) = v52;
        *((unsigned char *)v18 + 277) = *((unsigned char *)v19 + 277);
        *((unsigned char *)v18 + 278) = *((unsigned char *)v19 + 278);
        v18[35] = v19[35];
        v18[36] = v19[36];
        swift_retain();
        swift_retain();
LABEL_34:
        unint64_t v91 = (unint64_t)v19[41];
        if (v91 >> 2 == 0xFFFFFFFF)
        {
          long long v92 = *(_OWORD *)(v19 + 37);
          long long v93 = *(_OWORD *)(v19 + 41);
          *(_OWORD *)(v18 + 39) = *(_OWORD *)(v19 + 39);
          *(_OWORD *)(v18 + 41) = v93;
          *(_OWORD *)(v18 + 37) = v92;
          long long v94 = *(_OWORD *)(v19 + 43);
          long long v95 = *(_OWORD *)(v19 + 45);
          long long v96 = *(_OWORD *)(v19 + 47);
          v18[49] = v19[49];
          *(_OWORD *)(v18 + 45) = v95;
          *(_OWORD *)(v18 + 47) = v96;
          *(_OWORD *)(v18 + 43) = v94;
        }
        else
        {
          long long v97 = v19[37];
          uint64_t v98 = (uint64_t)v19[38];
          uint64_t v100 = (uint64_t)v19[39];
          uint64_t v99 = (uint64_t)v19[40];
          uint64_t v102 = (uint64_t)v19[42];
          uint64_t v101 = (uint64_t)v19[43];
          uint64_t v103 = v19[44];
          uint64_t v218 = (uint64_t)v19[45];
          uint64_t v219 = (uint64_t)v19[46];
          uint64_t v222 = (uint64_t)v19[47];
          uint64_t v226 = v19[48];
          __dsta = v19[49];
          outlined copy of PlatformItemList.Item.SystemItem(v97, v98, v100, v99, v91, v102, v101, (char)v103, v218, v219, v222, (char)v226, (uint64_t)__dsta);
          v18[37] = v97;
          v18[38] = (void *)v98;
          v18[39] = (void *)v100;
          v18[40] = (void *)v99;
          v18[41] = (void *)v91;
          v18[42] = (void *)v102;
          v18[43] = (void *)v101;
          v18[44] = v103;
          v18[45] = (void *)v218;
          v18[46] = (void *)v219;
          v18[47] = (void *)v222;
          v18[48] = v226;
          v18[49] = __dsta;
        }
        if (v19[51] == (void *)1)
        {
          *((_OWORD *)v18 + 25) = *((_OWORD *)v19 + 25);
          long long v104 = *((_OWORD *)v19 + 26);
          long long v105 = *((_OWORD *)v19 + 27);
          long long v106 = *((_OWORD *)v19 + 28);
          *((unsigned char *)v18 + 464) = *((unsigned char *)v19 + 464);
          *((_OWORD *)v18 + 27) = v105;
          *((_OWORD *)v18 + 28) = v106;
          *((_OWORD *)v18 + 26) = v104;
          goto LABEL_47;
        }
        *((unsigned char *)v18 + 400) = *((unsigned char *)v19 + 400);
        *((unsigned char *)v18 + 401) = *((unsigned char *)v19 + 401);
        *((unsigned char *)v18 + 402) = *((unsigned char *)v19 + 402);
        *((unsigned char *)v18 + 403) = *((unsigned char *)v19 + 403);
        *((unsigned char *)v18 + 404) = *((unsigned char *)v19 + 404);
        uint64_t v107 = v19[51];
        if (v107)
        {
          uint64_t v108 = v19[52];
          v18[51] = v107;
          v18[52] = v108;
          swift_retain();
          uint64_t v109 = v19[53];
          if (v109) {
            goto LABEL_41;
          }
        }
        else
        {
          *(_OWORD *)(v18 + 51) = *(_OWORD *)(v19 + 51);
          uint64_t v109 = v19[53];
          if (v109)
          {
LABEL_41:
            uint64_t v110 = v19[54];
            v18[53] = v109;
            v18[54] = v110;
            swift_retain();
            uint64_t v111 = v19[55];
            if (v111)
            {
LABEL_42:
              uint64_t v112 = v19[56];
              v18[55] = v111;
              v18[56] = v112;
              swift_retain();
LABEL_46:
              v18[57] = v19[57];
              *((unsigned char *)v18 + 464) = *((unsigned char *)v19 + 464);
LABEL_47:
              v18[59] = v19[59];
              v18[60] = v19[60];
              v18[61] = v19[61];
              *((unsigned char *)v18 + 496) = *((unsigned char *)v19 + 496);
              uint64_t v113 = v19[63];
              swift_bridgeObjectRetain();
              if (v113)
              {
                uint64_t v114 = v19[64];
                v18[63] = v113;
                v18[64] = v114;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(v18 + 63) = *(_OWORD *)(v19 + 63);
              }
              *((_WORD *)v18 + 260) = *((_WORD *)v19 + 260);
              uint64_t v115 = v19[66];
              if (v115)
              {
                v18[66] = v115;
                v18[67] = v19[67];
                v18[68] = v19[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                long long v116 = *((_OWORD *)v19 + 33);
                v18[68] = v19[68];
                *((_OWORD *)v18 + 33) = v116;
              }
              uint64_t v117 = v19[69];
              if (v117 == (void *)1)
              {
                uint64_t v118 = v18 + 69;
                long long v119 = *(_OWORD *)(v19 + 69);
                v18[71] = v19[71];
              }
              else
              {
                v18[69] = v117;
                uint64_t v120 = v19[70];
                swift_retain();
                if (v120)
                {
                  uint64_t v121 = v19[71];
                  v18[70] = v120;
                  v18[71] = v121;
                  swift_retain();
LABEL_59:
                  uint64_t v122 = v19[72];
                  v18[72] = v122;
                  v18[73] = v19[73];
                  v18[74] = v19[74];
                  v18[75] = v19[75];
                  v18[76] = v19[76];
                  v18[77] = v19[77];
                  v18[78] = v19[78];
                  *((unsigned char *)v18 + 632) = *((unsigned char *)v19 + 632);
                  *((unsigned char *)v18 + 633) = *((unsigned char *)v19 + 633);
                  *((unsigned char *)v18 + 634) = *((unsigned char *)v19 + 634);
                  uint64_t v123 = v240[28];
                  __dst = (char *)v18 + v123;
                  uint64_t v124 = (char *)v19 + v123;
                  uint64_t v125 = type metadata accessor for CommandOperation();
                  uint64_t v223 = *(void *)(v125 - 8);
                  uint64_t v227 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v223 + 48);
                  id v126 = v122;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v227(v124, 1, v125))
                  {
                    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                    memcpy(__dst, v124, *(void *)(*(void *)(v127 - 8) + 64));
                    a3 = v247;
                    long long v16 = v237;
                    uint64_t v128 = v240;
                    uint64_t v4 = v245;
                    uint64_t v129 = v234;
                  }
                  else
                  {
                    unsigned char *__dst = *v124;
                    uint64_t v130 = *(int *)(v125 + 20);
                    uint64_t v131 = &__dst[v130];
                    uint64_t v132 = &v124[v130];
                    uint64_t v228 = v124;
                    uint64_t v133 = *(void *)&v124[v130];
                    uint64_t v134 = *(void *)&v124[v130 + 8];
                    uint64_t v135 = v125;
                    char v136 = v132[16];
                    outlined copy of Text.Storage(v133, v134, v136);
                    *(void *)uint64_t v131 = v133;
                    *((void *)v131 + 1) = v134;
                    v131[16] = v136;
                    *((void *)v131 + 3) = *((void *)v132 + 3);
                    uint64_t v137 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v138 = &v131[v137];
                    uint64_t v139 = &v132[v137];
                    uint64_t v140 = type metadata accessor for UUID();
                    uint64_t v141 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v140 - 8) + 16);
                    swift_bridgeObjectRetain();
                    uint64_t v142 = v139;
                    uint64_t v143 = v135;
                    v141(v138, v142, v140);
                    uint64_t v144 = *(int *)(v135 + 24);
                    uint64_t v145 = &__dst[v144];
                    id v146 = &v228[v144];
                    if (*v146)
                    {
                      uint64_t v147 = v146[1];
                      *uint64_t v145 = *v146;
                      v145[1] = v147;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
                    }
                    a3 = v247;
                    long long v16 = v237;
                    uint64_t v128 = v240;
                    uint64_t v129 = v234;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v223 + 56))(__dst, 0, 1, v143);
                    uint64_t v4 = v245;
                  }
                  *((unsigned char *)v18 + v128[29]) = *((unsigned char *)v19 + v128[29]);
                  *((unsigned char *)v18 + v128[30]) = *((unsigned char *)v19 + v128[30]);
                  *((unsigned char *)v18 + v128[31]) = *((unsigned char *)v19 + v128[31]);
                  *((unsigned char *)v18 + v128[32]) = *((unsigned char *)v19 + v128[32]);
                  *(void **)((char *)v18 + v128[33]) = *(void **)((char *)v19 + v128[33]);
                  long long v148 = *(void (**)(void **, void, uint64_t, int *))(v129 + 56);
                  swift_retain();
                  v148(v18, 0, 1, v128);
                  int v5 = v242;
                  goto LABEL_66;
                }
                uint64_t v118 = v18 + 70;
                long long v119 = *((_OWORD *)v19 + 35);
              }
              *uint64_t v118 = v119;
              goto LABEL_59;
            }
LABEL_45:
            *(_OWORD *)(v18 + 55) = *(_OWORD *)(v19 + 55);
            goto LABEL_46;
          }
        }
        *(_OWORD *)(v18 + 53) = *(_OWORD *)(v19 + 53);
        uint64_t v111 = v19[55];
        if (v111) {
          goto LABEL_42;
        }
        goto LABEL_45;
      }
    }
    else
    {
      int v69 = *((unsigned __int8 *)v19 + 72);
      if (v69 == 255)
      {
        id v77 = *v37;
        *((unsigned char *)v18 + 72) = *((unsigned char *)v19 + 72);
        *(void *)uint64_t v36 = v77;
      }
      else
      {
        id v70 = *v37;
        outlined copy of GraphicsImage.Contents(*v37, *((unsigned char *)v19 + 72));
        v18[8] = v70;
        *((unsigned char *)v18 + 72) = v69;
      }
      v18[10] = v19[10];
      *(_OWORD *)(v18 + 11) = *(_OWORD *)(v19 + 11);
      *((unsigned char *)v18 + 104) = *((unsigned char *)v19 + 104);
      long long v78 = *(_OWORD *)((char *)v19 + 108);
      *((unsigned char *)v18 + 124) = *((unsigned char *)v19 + 124);
      *(_OWORD *)((char *)v18 + 108) = v78;
      long long v79 = *((_OWORD *)v19 + 8);
      long long v80 = *((_OWORD *)v19 + 9);
      *((unsigned char *)v18 + 160) = *((unsigned char *)v19 + 160);
      *((_OWORD *)v18 + 8) = v79;
      *((_OWORD *)v18 + 9) = v80;
      *((unsigned char *)v18 + 161) = *((unsigned char *)v19 + 161);
      *((unsigned char *)v18 + 162) = *((unsigned char *)v19 + 162);
      *((unsigned char *)v18 + 163) = *((unsigned char *)v19 + 163);
      unint64_t v81 = (unint64_t)v19[23];
      if (v81 >> 1 == 0xFFFFFFFF)
      {
        long long v82 = *(_OWORD *)(v19 + 23);
        *(_OWORD *)(v18 + 21) = *(_OWORD *)(v19 + 21);
        *(_OWORD *)(v18 + 23) = v82;
      }
      else
      {
        uint64_t v83 = (uint64_t)v19[21];
        uint64_t v84 = (uint64_t)v19[22];
        long long v85 = v19[24];
        outlined copy of AccessibilityImageLabel(v83, v84, (uint64_t)v19[23]);
        v18[21] = (void *)v83;
        v18[22] = (void *)v84;
        v18[23] = (void *)v81;
        v18[24] = v85;
      }
      v18[25] = v19[25];
      v18[26] = v19[26];
      *((unsigned char *)v18 + 216) = *((unsigned char *)v19 + 216);
      *((unsigned char *)v18 + 217) = *((unsigned char *)v19 + 217);
      int v86 = *((_DWORD *)v19 + 55);
      *((unsigned char *)v18 + 224) = *((unsigned char *)v19 + 224);
      *((_DWORD *)v18 + 55) = v86;
      long long v87 = v19[29];
      v18[29] = v87;
      *((_WORD *)v18 + 120) = *((_WORD *)v19 + 120);
      *((unsigned char *)v18 + 242) = *((unsigned char *)v19 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v88 = v87;
      if (v19[32]) {
        goto LABEL_17;
      }
    }
    long long v89 = *(_OWORD *)(v19 + 31);
    long long v90 = *(_OWORD *)(v19 + 35);
    *(_OWORD *)(v18 + 33) = *(_OWORD *)(v19 + 33);
    *(_OWORD *)(v18 + 35) = v90;
    *(_OWORD *)(v18 + 31) = v89;
    goto LABEL_34;
  }
  memcpy(v5, v4, *(void *)(*(void *)(v6 - 8) + 64));
LABEL_114:
  v5[*(int *)(a3 + 20)] = v4[*(int *)(a3 + 20)];
  return v5;
}

char *assignWithTake for ToolbarStorage.Entry(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)a1, type metadata accessor for ToolbarStorage.Entry.Kind);
    uint64_t v5 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      long long v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      a1[57] = a2[57];
      *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      uint64_t v20 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      uint64_t v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          long long v41 = *((_OWORD *)v22 + 1);
          *(_OWORD *)uint64_t v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v41;
          v21[32] = v22[32];
          uint64_t v42 = *((void *)v22 + 6);
          *((void *)v21 + 5) = *((void *)v22 + 5);
          *((void *)v21 + 6) = v42;
          v21[56] = v22[56];
          long long v43 = *((_OWORD *)v22 + 13);
          *((_OWORD *)v21 + 12) = *((_OWORD *)v22 + 12);
          *((_OWORD *)v21 + 13) = v43;
          *((_OWORD *)v21 + 14) = *((_OWORD *)v22 + 14);
          *(_DWORD *)(v21 + 239) = *(_DWORD *)(v22 + 239);
          long long v44 = *((_OWORD *)v22 + 9);
          *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
          *((_OWORD *)v21 + 9) = v44;
          long long v45 = *((_OWORD *)v22 + 11);
          *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
          *((_OWORD *)v21 + 11) = v45;
          long long v46 = *((_OWORD *)v22 + 5);
          *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
          *((_OWORD *)v21 + 5) = v46;
          long long v47 = *((_OWORD *)v22 + 7);
          *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
          *((_OWORD *)v21 + 7) = v47;
          *(_OWORD *)(v21 + 248) = *(_OWORD *)(v22 + 248);
          long long v48 = *(_OWORD *)(v22 + 280);
          *(_OWORD *)(v21 + 264) = *(_OWORD *)(v22 + 264);
          *(_OWORD *)(v21 + 280) = v48;
          long long v49 = *(_OWORD *)(v22 + 376);
          *(_OWORD *)(v21 + 360) = *(_OWORD *)(v22 + 360);
          *(_OWORD *)(v21 + 376) = v49;
          *((void *)v21 + 49) = *((void *)v22 + 49);
          long long v50 = *(_OWORD *)(v22 + 312);
          *(_OWORD *)(v21 + 296) = *(_OWORD *)(v22 + 296);
          *(_OWORD *)(v21 + 312) = v50;
          long long v51 = *(_OWORD *)(v22 + 344);
          *(_OWORD *)(v21 + 328) = *(_OWORD *)(v22 + 328);
          *(_OWORD *)(v21 + 344) = v51;
          long long v52 = *((_OWORD *)v22 + 28);
          *((_OWORD *)v21 + 27) = *((_OWORD *)v22 + 27);
          *((_OWORD *)v21 + 28) = v52;
          v21[464] = v22[464];
          long long v53 = *((_OWORD *)v22 + 26);
          *((_OWORD *)v21 + 25) = *((_OWORD *)v22 + 25);
          *((_OWORD *)v21 + 26) = v53;
          *(_OWORD *)(v21 + 472) = *(_OWORD *)(v22 + 472);
          *(_OWORD *)(v21 + 481) = *(_OWORD *)(v22 + 481);
          uint64_t v54 = *((void *)v22 + 63);
          if (v54)
          {
            uint64_t v55 = *((void *)v22 + 64);
            *((void *)v21 + 63) = v54;
            *((void *)v21 + 64) = v55;
          }
          else
          {
            *(_OWORD *)(v21 + 504) = *(_OWORD *)(v22 + 504);
          }
          *((_WORD *)v21 + 260) = *((_WORD *)v22 + 260);
          *((_OWORD *)v21 + 33) = *((_OWORD *)v22 + 33);
          *((void *)v21 + 68) = *((void *)v22 + 68);
          *((void *)v21 + 71) = *((void *)v22 + 71);
          *(_OWORD *)(v21 + 552) = *(_OWORD *)(v22 + 552);
          *((void *)v21 + 72) = *((void *)v22 + 72);
          *(_OWORD *)(v21 + 584) = *(_OWORD *)(v22 + 584);
          *(_OWORD *)(v21 + 600) = *(_OWORD *)(v22 + 600);
          *((void *)v21 + 77) = *((void *)v22 + 77);
          *((void *)v21 + 78) = *((void *)v22 + 78);
          v21[632] = v22[632];
          *(_WORD *)(v21 + 633) = *(_WORD *)(v22 + 633);
          long long v97 = (int *)type metadata accessor for PlatformItemList.Item();
          uint64_t v74 = v97[28];
          uint64_t v101 = &v21[v74];
          int v75 = &v22[v74];
          uint64_t v76 = type metadata accessor for CommandOperation();
          uint64_t v77 = *(void *)(v76 - 8);
          uint64_t v99 = v75;
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(v101, v75, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            uint64_t v95 = v77;
            *uint64_t v101 = *v75;
            uint64_t v79 = *(int *)(v76 + 20);
            uint64_t v80 = v76;
            unint64_t v81 = &v101[v79];
            long long v82 = &v75[v79];
            long long v83 = *(_OWORD *)&v99[v79 + 16];
            *(_OWORD *)unint64_t v81 = *(_OWORD *)&v99[v79];
            *((_OWORD *)v81 + 1) = v83;
            uint64_t v84 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            long long v85 = &v81[v84];
            long long v93 = &v82[v84];
            uint64_t v86 = type metadata accessor for UUID();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v86 - 8) + 32))(v85, v93, v86);
            uint64_t v87 = *(int *)(v80 + 24);
            id v88 = &v101[v87];
            long long v89 = (uint64_t *)&v99[v87];
            uint64_t v90 = *v89;
            if (*v89)
            {
              uint64_t v91 = v89[1];
              *(void *)id v88 = v90;
              *((void *)v88 + 1) = v91;
            }
            else
            {
              *(_OWORD *)id v88 = *(_OWORD *)v89;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v95 + 56))(v101, 0, 1, v80);
          }
          v21[v97[29]] = v22[v97[29]];
          v21[v97[30]] = v22[v97[30]];
          v21[v97[31]] = v22[v97[31]];
          v21[v97[32]] = v22[v97[32]];
          *(void *)&v21[v97[33]] = *(void *)&v22[v97[33]];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v21, v22, *(void *)(v24 + 64));
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      goto LABEL_33;
    }
    if (!EnumCaseMultiPayload)
    {
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      long long v8 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v8;
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
      *((void *)a1 + 12) = *((void *)a2 + 12);
      long long v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v9;
      long long v10 = *(_OWORD *)(a2 + 136);
      long long v11 = *(_OWORD *)(a2 + 152);
      long long v12 = *(_OWORD *)(a2 + 168);
      *((void *)a1 + 23) = *((void *)a2 + 23);
      *(_OWORD *)(a1 + 168) = v12;
      *(_OWORD *)(a1 + 152) = v11;
      *(_OWORD *)(a1 + 136) = v10;
      long long v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
      uint64_t v14 = v13[12];
      long long v15 = &a1[v14];
      long long v16 = &a2[v14];
      uint64_t v17 = (int *)type metadata accessor for PlatformItemList.Item();
      uint64_t v100 = *((void *)v17 - 1);
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v100 + 48))(v16, 1, v17))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
        memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        long long v26 = *((_OWORD *)v16 + 1);
        *(_OWORD *)long long v15 = *(_OWORD *)v16;
        *((_OWORD *)v15 + 1) = v26;
        v15[32] = v16[32];
        uint64_t v27 = *((void *)v16 + 6);
        *((void *)v15 + 5) = *((void *)v16 + 5);
        *((void *)v15 + 6) = v27;
        v15[56] = v16[56];
        long long v28 = *((_OWORD *)v16 + 13);
        *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
        *((_OWORD *)v15 + 13) = v28;
        *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
        *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
        long long v29 = *((_OWORD *)v16 + 9);
        *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
        *((_OWORD *)v15 + 9) = v29;
        long long v30 = *((_OWORD *)v16 + 11);
        *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
        *((_OWORD *)v15 + 11) = v30;
        long long v31 = *((_OWORD *)v16 + 5);
        *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
        *((_OWORD *)v15 + 5) = v31;
        long long v32 = *((_OWORD *)v16 + 7);
        *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
        *((_OWORD *)v15 + 7) = v32;
        *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
        long long v33 = *(_OWORD *)(v16 + 280);
        *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
        *(_OWORD *)(v15 + 280) = v33;
        long long v34 = *(_OWORD *)(v16 + 376);
        *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
        *(_OWORD *)(v15 + 376) = v34;
        *((void *)v15 + 49) = *((void *)v16 + 49);
        long long v35 = *(_OWORD *)(v16 + 312);
        *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
        *(_OWORD *)(v15 + 312) = v35;
        long long v36 = *(_OWORD *)(v16 + 344);
        *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
        *(_OWORD *)(v15 + 344) = v36;
        long long v37 = *((_OWORD *)v16 + 28);
        *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
        *((_OWORD *)v15 + 28) = v37;
        v15[464] = v16[464];
        long long v38 = *((_OWORD *)v16 + 26);
        *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
        *((_OWORD *)v15 + 26) = v38;
        *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
        *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
        uint64_t v39 = *((void *)v16 + 63);
        if (v39)
        {
          uint64_t v40 = *((void *)v16 + 64);
          *((void *)v15 + 63) = v39;
          *((void *)v15 + 64) = v40;
        }
        else
        {
          *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
        }
        *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
        *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
        *((void *)v15 + 68) = *((void *)v16 + 68);
        *((void *)v15 + 71) = *((void *)v16 + 71);
        *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
        *((void *)v15 + 72) = *((void *)v16 + 72);
        *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
        *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
        *((void *)v15 + 77) = *((void *)v16 + 77);
        *((void *)v15 + 78) = *((void *)v16 + 78);
        v15[632] = v16[632];
        *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
        uint64_t v56 = v17[28];
        uint64_t v98 = &v15[v56];
        unint64_t v57 = &v16[v56];
        uint64_t v58 = type metadata accessor for CommandOperation();
        uint64_t v59 = *(void *)(v58 - 8);
        long long v96 = v57;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v98, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          uint64_t v94 = v59;
          *uint64_t v98 = *v57;
          uint64_t v61 = *(int *)(v58 + 20);
          long long v62 = &v98[v61];
          long long v63 = &v57[v61];
          long long v64 = *(_OWORD *)&v96[v61 + 16];
          *(_OWORD *)long long v62 = *(_OWORD *)&v96[v61];
          *((_OWORD *)v62 + 1) = v64;
          uint64_t v65 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          long long v66 = &v62[v65];
          long long v67 = &v63[v65];
          uint64_t v68 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v66, v67, v68);
          uint64_t v69 = *(int *)(v58 + 24);
          id v70 = &v98[v69];
          int v71 = (uint64_t *)&v96[v69];
          uint64_t v72 = *v71;
          if (*v71)
          {
            uint64_t v73 = v71[1];
            *(void *)id v70 = v72;
            *((void *)v70 + 1) = v73;
          }
          else
          {
            *(_OWORD *)id v70 = *(_OWORD *)v71;
          }
          (*(void (**)(void))(v94 + 56))();
        }
        v15[v17[29]] = v16[v17[29]];
        v15[v17[30]] = v16[v17[30]];
        v15[v17[31]] = v16[v17[31]];
        v15[v17[32]] = v16[v17[32]];
        *(void *)&v15[v17[33]] = *(void *)&v16[v17[33]];
        (*(void (**)(char *, void, uint64_t, int *))(v100 + 56))(v15, 0, 1, v17);
      }
      swift_weakTakeInit();
      a1[v13[14]] = a2[v13[14]];
      a1[v13[15]] = a2[v13[15]];
LABEL_33:
      swift_storeEnumTagMultiPayload();
      goto LABEL_34;
    }
    memcpy(a1, a2, *(void *)(*(void *)(v5 - 8) + 64));
  }
LABEL_34:
  a1[*(int *)(a3 + 20)] = a2[*(int *)(a3 + 20)];
  return a1;
}

uint64_t sub_187DD54C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    long long v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) <= 2u) {
      int v10 = 2;
    }
    else {
      int v10 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
    }
    unsigned int v11 = v10 - 2;
    if (*(unsigned __int8 *)(a1 + *(int *)(a3 + 20)) >= 2u) {
      return v11;
    }
    else {
      return 0;
    }
  }
}

uint64_t sub_187DD5590(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    int v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(unsigned char *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  }
  return result;
}

char *initializeBufferWithCopyOfBuffer for ToolbarStorage.Entry.Kind(char *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v11 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v11 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(a3 - 8);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v12 = *((void *)a2 + 1);
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = v12;
      int v13 = a2[56];
      swift_bridgeObjectRetain();
      if (v13 == 1)
      {
        long long v14 = *(_OWORD *)(a2 + 40);
        *(_OWORD *)(a1 + 40) = v14;
        (**(void (***)(uint64_t, uint64_t))(v14 - 8))((uint64_t)(a1 + 16), (uint64_t)(a2 + 16));
        a1[56] = 1;
      }
      else
      {
        long long v27 = *((_OWORD *)a2 + 2);
        *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
        *((_OWORD *)a1 + 2) = v27;
        *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      }
      a1[57] = a2[57];
      *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
      uint64_t v28 = *((void *)a2 + 9);
      *((void *)a1 + 8) = *((void *)a2 + 8);
      *((void *)a1 + 9) = v28;
      uint64_t v29 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      long long v30 = (void **)&a1[v29];
      long long v31 = (void **)&a2[v29];
      uint64_t v32 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      uint64_t v33 = *(void *)(v32 - 8);
      long long v34 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v33 + 48);
      swift_bridgeObjectRetain();
      if (v34(v31, 1, v32))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
        memcpy(v30, v31, *(void *)(*(void *)(v35 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v221 = v33;
          uint64_t v55 = *v31;
          uint64_t v56 = v31[1];
          *long long v30 = *v31;
          v30[1] = v56;
          unint64_t v57 = v31[3];
          void v30[2] = v31[2];
          void v30[3] = v57;
          *((unsigned char *)v30 + 32) = *((unsigned char *)v31 + 32);
          uint64_t v58 = v31[6];
          v30[5] = v31[5];
          v30[6] = v58;
          *((unsigned char *)v30 + 56) = *((unsigned char *)v31 + 56);
          uint64_t v59 = v30 + 8;
          uint64_t v60 = v31 + 8;
          unint64_t v61 = (unint64_t)v31[23];
          id v62 = v55;
          id v63 = v56;
          swift_bridgeObjectRetain();
          swift_retain();
          if (v61 >> 1 == 4294967294)
          {
            long long v64 = *((_OWORD *)v31 + 13);
            *((_OWORD *)v30 + 12) = *((_OWORD *)v31 + 12);
            *((_OWORD *)v30 + 13) = v64;
            *((_OWORD *)v30 + 14) = *((_OWORD *)v31 + 14);
            *(_DWORD *)((char *)v30 + 239) = *(_DWORD *)((char *)v31 + 239);
            long long v65 = *((_OWORD *)v31 + 9);
            *((_OWORD *)v30 + 8) = *((_OWORD *)v31 + 8);
            *((_OWORD *)v30 + 9) = v65;
            long long v66 = *((_OWORD *)v31 + 11);
            *((_OWORD *)v30 + 10) = *((_OWORD *)v31 + 10);
            *((_OWORD *)v30 + 11) = v66;
            long long v67 = *((_OWORD *)v31 + 5);
            *uint64_t v59 = *v60;
            *((_OWORD *)v30 + 5) = v67;
            long long v68 = *((_OWORD *)v31 + 7);
            *((_OWORD *)v30 + 6) = *((_OWORD *)v31 + 6);
            *((_OWORD *)v30 + 7) = v68;
          }
          else
          {
            int v74 = *((unsigned __int8 *)v31 + 72);
            if (v74 == 255)
            {
              *(void *)uint64_t v59 = *(void *)v60;
              *((unsigned char *)v30 + 72) = *((unsigned char *)v31 + 72);
            }
            else
            {
              int v75 = v31[8];
              outlined copy of GraphicsImage.Contents(v75, *((unsigned char *)v31 + 72));
              v30[8] = v75;
              *((unsigned char *)v30 + 72) = v74;
              unint64_t v61 = (unint64_t)v31[23];
            }
            v30[10] = v31[10];
            *(_OWORD *)(v30 + 11) = *(_OWORD *)(v31 + 11);
            *((unsigned char *)v30 + 104) = *((unsigned char *)v31 + 104);
            *(_OWORD *)((char *)v30 + 108) = *(_OWORD *)((char *)v31 + 108);
            *((unsigned char *)v30 + 124) = *((unsigned char *)v31 + 124);
            long long v136 = *((_OWORD *)v31 + 9);
            *((_OWORD *)v30 + 8) = *((_OWORD *)v31 + 8);
            *((_OWORD *)v30 + 9) = v136;
            *((_WORD *)v30 + 80) = *((_WORD *)v31 + 80);
            *((unsigned char *)v30 + 162) = *((unsigned char *)v31 + 162);
            *((unsigned char *)v30 + 163) = *((unsigned char *)v31 + 163);
            if (v61 >> 1 == 0xFFFFFFFF)
            {
              long long v137 = *(_OWORD *)(v31 + 23);
              *(_OWORD *)(v30 + 21) = *(_OWORD *)(v31 + 21);
              *(_OWORD *)(v30 + 23) = v137;
            }
            else
            {
              uint64_t v138 = (uint64_t)v31[21];
              uint64_t v139 = (uint64_t)v31[22];
              uint64_t v140 = v31[24];
              outlined copy of AccessibilityImageLabel(v138, v139, v61);
              v30[21] = (void *)v138;
              v30[22] = (void *)v139;
              v30[23] = (void *)v61;
              v30[24] = v140;
            }
            uint64_t v141 = v31[26];
            v30[25] = v31[25];
            v30[26] = v141;
            *((_WORD *)v30 + 108) = *((_WORD *)v31 + 108);
            *((_DWORD *)v30 + 55) = *((_DWORD *)v31 + 55);
            *((unsigned char *)v30 + 224) = *((unsigned char *)v31 + 224);
            uint64_t v142 = v31[29];
            v30[29] = v142;
            *((_WORD *)v30 + 120) = *((_WORD *)v31 + 120);
            *((unsigned char *)v30 + 242) = *((unsigned char *)v31 + 242);
            swift_unknownObjectRetain();
            swift_retain();
            id v143 = v142;
          }
          uint64_t v144 = v31[32];
          if (v144)
          {
            v30[31] = v31[31];
            v30[32] = v144;
            uint64_t v145 = v31[33];
            swift_bridgeObjectRetain();
            if ((unint64_t)v145 >= 2) {
              id v146 = v145;
            }
            v30[33] = v145;
            *((_DWORD *)v30 + 68) = *((_DWORD *)v31 + 68);
            *((unsigned char *)v30 + 276) = *((unsigned char *)v31 + 276);
            *(_WORD *)((char *)v30 + 277) = *(_WORD *)((char *)v31 + 277);
            uint64_t v147 = v31[36];
            v30[35] = v31[35];
            v30[36] = v147;
            swift_retain();
            swift_retain();
          }
          else
          {
            long long v148 = *(_OWORD *)(v31 + 33);
            *(_OWORD *)(v30 + 31) = *(_OWORD *)(v31 + 31);
            *(_OWORD *)(v30 + 33) = v148;
            *(_OWORD *)(v30 + 35) = *(_OWORD *)(v31 + 35);
          }
          unint64_t v149 = (unint64_t)v31[41];
          if (v149 >> 2 == 0xFFFFFFFF)
          {
            long long v150 = *(_OWORD *)(v31 + 47);
            *(_OWORD *)(v30 + 45) = *(_OWORD *)(v31 + 45);
            *(_OWORD *)(v30 + 47) = v150;
            v30[49] = v31[49];
            long long v151 = *(_OWORD *)(v31 + 39);
            *(_OWORD *)(v30 + 37) = *(_OWORD *)(v31 + 37);
            *(_OWORD *)(v30 + 39) = v151;
            long long v152 = *(_OWORD *)(v31 + 43);
            *(_OWORD *)(v30 + 41) = *(_OWORD *)(v31 + 41);
            *(_OWORD *)(v30 + 43) = v152;
          }
          else
          {
            unint64_t v153 = v31[37];
            uint64_t v154 = (uint64_t)v31[38];
            uint64_t v198 = (uint64_t)v31[40];
            uint64_t v201 = (uint64_t)v31[39];
            uint64_t v155 = (uint64_t)v31[42];
            uint64_t v156 = (uint64_t)v31[43];
            uint64_t v157 = v31[44];
            uint64_t v204 = (uint64_t)v31[45];
            __dstb = v31[46];
            uint64_t v212 = (uint64_t)v31[47];
            long long v215 = v31[48];
            uint64_t v218 = (uint64_t)v31[49];
            outlined copy of PlatformItemList.Item.SystemItem(v153, v154, v201, v198, v149, v155, v156, (char)v157, v204, (uint64_t)__dstb, v212, (char)v215, v218);
            v30[37] = v153;
            v30[38] = (void *)v154;
            v30[39] = (void *)v201;
            v30[40] = (void *)v198;
            v30[41] = (void *)v149;
            v30[42] = (void *)v155;
            v30[43] = (void *)v156;
            v30[44] = v157;
            v30[45] = (void *)v204;
            v30[46] = __dstb;
            v30[47] = (void *)v212;
            v30[48] = v215;
            v30[49] = (void *)v218;
          }
          int v158 = v31[51];
          if (v158 == (void *)1)
          {
            long long v159 = *((_OWORD *)v31 + 28);
            *((_OWORD *)v30 + 27) = *((_OWORD *)v31 + 27);
            *((_OWORD *)v30 + 28) = v159;
            *((unsigned char *)v30 + 464) = *((unsigned char *)v31 + 464);
            long long v160 = *((_OWORD *)v31 + 26);
            *((_OWORD *)v30 + 25) = *((_OWORD *)v31 + 25);
            *((_OWORD *)v30 + 26) = v160;
          }
          else
          {
            *((_DWORD *)v30 + 100) = *((_DWORD *)v31 + 100);
            *((unsigned char *)v30 + 404) = *((unsigned char *)v31 + 404);
            if (v158)
            {
              uint64_t v161 = v31[52];
              v30[51] = v158;
              v30[52] = v161;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v30 + 51) = *(_OWORD *)(v31 + 51);
            }
            id v162 = v31[53];
            if (v162)
            {
              int v163 = v31[54];
              v30[53] = v162;
              v30[54] = v163;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v30 + 53) = *(_OWORD *)(v31 + 53);
            }
            long long v164 = v31[55];
            if (v164)
            {
              long long v165 = v31[56];
              v30[55] = v164;
              v30[56] = v165;
              swift_retain();
            }
            else
            {
              *(_OWORD *)(v30 + 55) = *(_OWORD *)(v31 + 55);
            }
            v30[57] = v31[57];
            *((unsigned char *)v30 + 464) = *((unsigned char *)v31 + 464);
          }
          unint64_t v166 = v31[60];
          v30[59] = v31[59];
          v30[60] = v166;
          v30[61] = v31[61];
          *((unsigned char *)v30 + 496) = *((unsigned char *)v31 + 496);
          long long v167 = v31[63];
          swift_bridgeObjectRetain();
          if (v167)
          {
            long long v168 = v31[64];
            v30[63] = v167;
            v30[64] = v168;
            swift_retain();
          }
          else
          {
            *(_OWORD *)(v30 + 63) = *(_OWORD *)(v31 + 63);
          }
          *((_WORD *)v30 + 260) = *((_WORD *)v31 + 260);
          long long v169 = v31[66];
          if (v169)
          {
            v30[66] = v169;
            v30[67] = v31[67];
            v30[68] = v31[68];
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
          }
          else
          {
            *((_OWORD *)v30 + 33) = *((_OWORD *)v31 + 33);
            v30[68] = v31[68];
          }
          long long v170 = v31[69];
          uint64_t v223 = v32;
          if (v170 == (void *)1)
          {
            *(_OWORD *)(v30 + 69) = *(_OWORD *)(v31 + 69);
            v30[71] = v31[71];
          }
          else
          {
            v30[69] = v170;
            long long v171 = v31[70];
            swift_retain();
            if (v171)
            {
              unint64_t v172 = v31[71];
              v30[70] = v171;
              v30[71] = v172;
              swift_retain();
            }
            else
            {
              *((_OWORD *)v30 + 35) = *((_OWORD *)v31 + 35);
            }
          }
          uint64_t v173 = v31[72];
          v30[72] = v173;
          v30[73] = v31[73];
          v30[74] = v31[74];
          v30[75] = v31[75];
          v30[76] = v31[76];
          v30[77] = v31[77];
          v30[78] = v31[78];
          *((_WORD *)v30 + 316) = *((_WORD *)v31 + 316);
          *((unsigned char *)v30 + 634) = *((unsigned char *)v31 + 634);
          uint64_t v174 = type metadata accessor for PlatformItemList.Item();
          uint64_t v175 = *(int *)(v174 + 112);
          uint64_t v216 = (char *)v30 + v175;
          uint64_t v219 = (int *)v174;
          uint64_t v176 = (char *)v31 + v175;
          uint64_t v177 = type metadata accessor for CommandOperation();
          uint64_t v205 = *(void *)(v177 - 8);
          __dstc = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v205 + 48);
          id v178 = v173;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          if (__dstc(v176, 1, v177))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(v216, v176, *(void *)(*(void *)(v179 - 8) + 64));
            uint64_t v32 = v223;
            uint64_t v33 = v221;
          }
          else
          {
            *uint64_t v216 = *v176;
            uint64_t v180 = *(int *)(v177 + 20);
            uint64_t v181 = &v216[v180];
            __dstd = v176;
            uint64_t v213 = v177;
            id v182 = &v176[v180];
            uint64_t v183 = *(void *)&v176[v180];
            uint64_t v184 = *((void *)v182 + 1);
            char v185 = v182[16];
            outlined copy of Text.Storage(v183, v184, v185);
            *(void *)uint64_t v181 = v183;
            *((void *)v181 + 1) = v184;
            v181[16] = v185;
            *((void *)v181 + 3) = *((void *)v182 + 3);
            uint64_t v186 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            uint64_t v187 = &v181[v186];
            uint64_t v188 = &v182[v186];
            uint64_t v189 = type metadata accessor for UUID();
            uint64_t v190 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v189 - 8) + 16);
            swift_bridgeObjectRetain();
            v190(v187, v188, v189);
            uint64_t v191 = *(int *)(v213 + 24);
            long long v192 = &v216[v191];
            id v193 = &__dstd[v191];
            if (*(void *)v193)
            {
              uint64_t v194 = *((void *)v193 + 1);
              void *v192 = *(void *)v193;
              v192[1] = v194;
              swift_retain();
            }
            else
            {
              *(_OWORD *)long long v192 = *(_OWORD *)v193;
            }
            uint64_t v32 = v223;
            uint64_t v33 = v221;
            (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v205 + 56))(v216, 0, 1, v213);
          }
          *((unsigned char *)v30 + v219[29]) = *((unsigned char *)v31 + v219[29]);
          *((unsigned char *)v30 + v219[30]) = *((unsigned char *)v31 + v219[30]);
          *((unsigned char *)v30 + v219[31]) = *((unsigned char *)v31 + v219[31]);
          *((unsigned char *)v30 + v219[32]) = *((unsigned char *)v31 + v219[32]);
          *(void **)((char *)v30 + v219[33]) = *(void **)((char *)v31 + v219[33]);
          swift_retain();
        }
        else
        {
          long long v71 = *(_OWORD *)(v31 + 3);
          *(_OWORD *)(v30 + 3) = v71;
          (**(void (***)(void **, void **))(v71 - 8))(v30, v31);
          v30[5] = v31[5];
          v30[6] = v31[6];
          v30[7] = v31[7];
          *((_OWORD *)v30 + 4) = *((_OWORD *)v31 + 4);
          uint64_t v72 = v31[10];
          v30[10] = v72;
          swift_retain();
          swift_bridgeObjectRetain();
          id v73 = v72;
        }
        swift_storeEnumTagMultiPayload();
        (*(void (**)(void **, void, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
      }
      goto LABEL_113;
    }
    if (!EnumCaseMultiPayload)
    {
      *(void *)a1 = *(void *)a2;
      *((void *)a1 + 1) = *((void *)a2 + 1);
      *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
      uint64_t v8 = *((void *)a2 + 5);
      *((void *)a1 + 4) = *((void *)a2 + 4);
      *((void *)a1 + 5) = v8;
      int v9 = a2[88];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v9 == 1)
      {
        long long v10 = *(_OWORD *)(a2 + 72);
        *(_OWORD *)(a1 + 72) = v10;
        (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(a1 + 48), (uint64_t)(a2 + 48));
        a1[88] = 1;
      }
      else
      {
        long long v15 = *((_OWORD *)a2 + 4);
        *((_OWORD *)a1 + 3) = *((_OWORD *)a2 + 3);
        *((_OWORD *)a1 + 4) = v15;
        *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      }
      *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
      *((void *)a1 + 12) = *((void *)a2 + 12);
      long long v16 = *((_OWORD *)a2 + 8);
      *((_OWORD *)a1 + 8) = v16;
      (**(void (***)(uint64_t, uint64_t))(v16 - 8))((uint64_t)(a1 + 104), (uint64_t)(a2 + 104));
      *((void *)a1 + 18) = *((void *)a2 + 18);
      *((void *)a1 + 19) = *((void *)a2 + 19);
      *((void *)a1 + 20) = *((void *)a2 + 20);
      *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
      uint64_t v17 = (void *)*((void *)a2 + 23);
      *((void *)a1 + 23) = v17;
      uint64_t v217 = a1;
      uint64_t v220 = type metadata accessor for ToolbarStorage.Item(0);
      uint64_t v18 = *(int *)(v220 + 48);
      long long v19 = (void **)&a1[v18];
      uint64_t v20 = (void **)&a2[v18];
      uint64_t v21 = type metadata accessor for PlatformItemList.Item();
      uint64_t v22 = *(void *)(v21 - 8);
      uint64_t v23 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v22 + 48);
      swift_retain();
      swift_bridgeObjectRetain();
      id v24 = v17;
      if (v23(v20, 1, v21))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
        memcpy(v19, v20, *(void *)(*(void *)(v25 - 8) + 64));
        a1 = v217;
        uint64_t v26 = v220;
LABEL_68:
        swift_weakCopyInit();
        a1[*(int *)(v26 + 56)] = a2[*(int *)(v26 + 56)];
        a1[*(int *)(v26 + 60)] = a2[*(int *)(v26 + 60)];
LABEL_113:
        swift_storeEnumTagMultiPayload();
        return a1;
      }
      uint64_t v211 = v22;
      long long v214 = (int *)v21;
      long long v36 = *v20;
      long long v37 = v20[1];
      char *v19 = *v20;
      v19[1] = v37;
      long long v38 = v20[3];
      _OWORD v19[2] = v20[2];
      v19[3] = v38;
      *((unsigned char *)v19 + 32) = *((unsigned char *)v20 + 32);
      uint64_t v39 = v20[6];
      v19[5] = v20[5];
      v19[6] = v39;
      *((unsigned char *)v19 + 56) = *((unsigned char *)v20 + 56);
      uint64_t v222 = v19;
      uint64_t v40 = v19 + 8;
      long long v41 = v20 + 8;
      unint64_t v42 = (unint64_t)v20[23];
      id v43 = v36;
      id v44 = v37;
      swift_bridgeObjectRetain();
      swift_retain();
      if (v42 >> 1 == 4294967294)
      {
        long long v45 = *((_OWORD *)v20 + 13);
        *((_OWORD *)v40 + 8) = *((_OWORD *)v20 + 12);
        *((_OWORD *)v40 + 9) = v45;
        *((_OWORD *)v40 + 10) = *((_OWORD *)v20 + 14);
        *(_DWORD *)((char *)v40 + 175) = *(_DWORD *)((char *)v20 + 239);
        long long v46 = *((_OWORD *)v20 + 9);
        *((_OWORD *)v40 + 4) = *((_OWORD *)v20 + 8);
        *((_OWORD *)v40 + 5) = v46;
        long long v47 = *((_OWORD *)v20 + 11);
        *((_OWORD *)v40 + 6) = *((_OWORD *)v20 + 10);
        *((_OWORD *)v40 + 7) = v47;
        long long v48 = *((_OWORD *)v20 + 5);
        *(_OWORD *)uint64_t v40 = *v41;
        *((_OWORD *)v40 + 1) = v48;
        long long v49 = *((_OWORD *)v20 + 7);
        *((_OWORD *)v40 + 2) = *((_OWORD *)v20 + 6);
        *((_OWORD *)v40 + 3) = v49;
        long long v50 = v222;
        long long v51 = v20[32];
        if (v51)
        {
LABEL_18:
          v50[31] = v20[31];
          v50[32] = v51;
          long long v52 = v20[33];
          swift_bridgeObjectRetain();
          if ((unint64_t)v52 >= 2) {
            id v53 = v52;
          }
          v50[33] = v52;
          *((_DWORD *)v50 + 68) = *((_DWORD *)v20 + 68);
          *((unsigned char *)v50 + 276) = *((unsigned char *)v20 + 276);
          *(_WORD *)((char *)v50 + 277) = *(_WORD *)((char *)v20 + 277);
          uint64_t v54 = v20[36];
          v50[35] = v20[35];
          v50[36] = v54;
          swift_retain();
          swift_retain();
          goto LABEL_35;
        }
      }
      else
      {
        int v69 = *((unsigned __int8 *)v20 + 72);
        if (v69 == 255)
        {
          *uint64_t v40 = *(void *)v41;
          *((unsigned char *)v40 + 8) = *((unsigned char *)v20 + 72);
          long long v50 = v222;
        }
        else
        {
          id v70 = v20[8];
          outlined copy of GraphicsImage.Contents(v70, *((unsigned char *)v20 + 72));
          long long v50 = v222;
          v222[8] = v70;
          *((unsigned char *)v222 + 72) = v69;
          unint64_t v42 = (unint64_t)v20[23];
        }
        v50[10] = v20[10];
        *(_OWORD *)(v50 + 11) = *(_OWORD *)(v20 + 11);
        *((unsigned char *)v50 + 104) = *((unsigned char *)v20 + 104);
        *(_OWORD *)((char *)v50 + 108) = *(_OWORD *)((char *)v20 + 108);
        *((unsigned char *)v50 + 124) = *((unsigned char *)v20 + 124);
        long long v76 = *((_OWORD *)v20 + 9);
        *((_OWORD *)v50 + 8) = *((_OWORD *)v20 + 8);
        *((_OWORD *)v50 + 9) = v76;
        *((_WORD *)v50 + 80) = *((_WORD *)v20 + 80);
        *((unsigned char *)v50 + 162) = *((unsigned char *)v20 + 162);
        *((unsigned char *)v50 + 163) = *((unsigned char *)v20 + 163);
        if (v42 >> 1 == 0xFFFFFFFF)
        {
          long long v77 = *(_OWORD *)(v20 + 23);
          *(_OWORD *)(v50 + 21) = *(_OWORD *)(v20 + 21);
          *(_OWORD *)(v50 + 23) = v77;
        }
        else
        {
          uint64_t v79 = (uint64_t)v20[21];
          uint64_t v78 = (uint64_t)v20[22];
          uint64_t v80 = v20[24];
          outlined copy of AccessibilityImageLabel(v79, v78, v42);
          v50[21] = (void *)v79;
          v50[22] = (void *)v78;
          v50[23] = (void *)v42;
          v50[24] = v80;
        }
        unint64_t v81 = v20[26];
        v50[25] = v20[25];
        v50[26] = v81;
        *((_WORD *)v50 + 108) = *((_WORD *)v20 + 108);
        *((_DWORD *)v50 + 55) = *((_DWORD *)v20 + 55);
        *((unsigned char *)v50 + 224) = *((unsigned char *)v20 + 224);
        long long v82 = v20[29];
        v50[29] = v82;
        *((_WORD *)v50 + 120) = *((_WORD *)v20 + 120);
        *((unsigned char *)v50 + 242) = *((unsigned char *)v20 + 242);
        swift_unknownObjectRetain();
        swift_retain();
        id v83 = v82;
        long long v51 = v20[32];
        if (v51) {
          goto LABEL_18;
        }
      }
      long long v84 = *(_OWORD *)(v20 + 33);
      *(_OWORD *)(v50 + 31) = *(_OWORD *)(v20 + 31);
      *(_OWORD *)(v50 + 33) = v84;
      *(_OWORD *)(v50 + 35) = *(_OWORD *)(v20 + 35);
LABEL_35:
      unint64_t v85 = (unint64_t)v20[41];
      if (v85 >> 2 == 0xFFFFFFFF)
      {
        long long v86 = *(_OWORD *)(v20 + 47);
        *(_OWORD *)(v50 + 45) = *(_OWORD *)(v20 + 45);
        *(_OWORD *)(v50 + 47) = v86;
        v50[49] = v20[49];
        long long v87 = *(_OWORD *)(v20 + 39);
        *(_OWORD *)(v50 + 37) = *(_OWORD *)(v20 + 37);
        *(_OWORD *)(v50 + 39) = v87;
        long long v88 = *(_OWORD *)(v20 + 43);
        *(_OWORD *)(v50 + 41) = *(_OWORD *)(v20 + 41);
        *(_OWORD *)(v50 + 43) = v88;
      }
      else
      {
        long long v89 = v20[37];
        uint64_t v90 = (uint64_t)v20[38];
        uint64_t v92 = (uint64_t)v20[39];
        uint64_t v91 = (uint64_t)v20[40];
        uint64_t v94 = (uint64_t)v20[42];
        uint64_t v93 = (uint64_t)v20[43];
        uint64_t v95 = v20[44];
        uint64_t v196 = (uint64_t)v20[45];
        uint64_t v197 = (uint64_t)v20[46];
        uint64_t v199 = (uint64_t)v20[47];
        uint64_t v202 = v20[48];
        __dsta = v20[49];
        outlined copy of PlatformItemList.Item.SystemItem(v89, v90, v92, v91, v85, v94, v93, (char)v95, v196, v197, v199, (char)v202, (uint64_t)__dsta);
        v222[37] = v89;
        v222[38] = (void *)v90;
        v222[39] = (void *)v92;
        v222[40] = (void *)v91;
        long long v50 = v222;
        v222[41] = (void *)v85;
        v222[42] = (void *)v94;
        v222[43] = (void *)v93;
        v222[44] = v95;
        v222[45] = (void *)v196;
        v222[46] = (void *)v197;
        v222[47] = (void *)v199;
        v222[48] = v202;
        v222[49] = __dsta;
      }
      long long v96 = v20[51];
      if (v96 == (void *)1)
      {
        long long v97 = *((_OWORD *)v20 + 28);
        *((_OWORD *)v50 + 27) = *((_OWORD *)v20 + 27);
        *((_OWORD *)v50 + 28) = v97;
        *((unsigned char *)v50 + 464) = *((unsigned char *)v20 + 464);
        long long v98 = *((_OWORD *)v20 + 26);
        *((_OWORD *)v50 + 25) = *((_OWORD *)v20 + 25);
        *((_OWORD *)v50 + 26) = v98;
      }
      else
      {
        *((_DWORD *)v50 + 100) = *((_DWORD *)v20 + 100);
        *((unsigned char *)v50 + 404) = *((unsigned char *)v20 + 404);
        if (v96)
        {
          uint64_t v99 = v20[52];
          v50[51] = v96;
          v50[52] = v99;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v50 + 51) = *(_OWORD *)(v20 + 51);
        }
        uint64_t v100 = v20[53];
        if (v100)
        {
          uint64_t v101 = v20[54];
          v50[53] = v100;
          v50[54] = v101;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v50 + 53) = *(_OWORD *)(v20 + 53);
        }
        uint64_t v102 = v20[55];
        if (v102)
        {
          uint64_t v103 = v20[56];
          v50[55] = v102;
          v50[56] = v103;
          swift_retain();
        }
        else
        {
          *(_OWORD *)(v50 + 55) = *(_OWORD *)(v20 + 55);
        }
        v50[57] = v20[57];
        *((unsigned char *)v50 + 464) = *((unsigned char *)v20 + 464);
      }
      long long v104 = v20[60];
      v50[59] = v20[59];
      v50[60] = v104;
      v50[61] = v20[61];
      *((unsigned char *)v50 + 496) = *((unsigned char *)v20 + 496);
      long long v105 = v20[63];
      swift_bridgeObjectRetain();
      if (v105)
      {
        long long v106 = v20[64];
        v50[63] = v105;
        v50[64] = v106;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v50 + 63) = *(_OWORD *)(v20 + 63);
      }
      *((_WORD *)v50 + 260) = *((_WORD *)v20 + 260);
      uint64_t v107 = v20[66];
      if (v107)
      {
        v50[66] = v107;
        v50[67] = v20[67];
        v50[68] = v20[68];
        swift_bridgeObjectRetain();
        swift_retain();
        swift_retain();
      }
      else
      {
        *((_OWORD *)v50 + 33) = *((_OWORD *)v20 + 33);
        v50[68] = v20[68];
      }
      uint64_t v108 = v20[69];
      if (v108 == (void *)1)
      {
        *(_OWORD *)(v50 + 69) = *(_OWORD *)(v20 + 69);
        v50[71] = v20[71];
      }
      else
      {
        v50[69] = v108;
        uint64_t v109 = v20[70];
        swift_retain();
        if (v109)
        {
          uint64_t v110 = v20[71];
          v50[70] = v109;
          v50[71] = v110;
          swift_retain();
        }
        else
        {
          *((_OWORD *)v50 + 35) = *((_OWORD *)v20 + 35);
        }
      }
      uint64_t v111 = v20[72];
      v50[72] = v111;
      v50[73] = v20[73];
      v50[74] = v20[74];
      v50[75] = v20[75];
      v50[76] = v20[76];
      v50[77] = v20[77];
      v50[78] = v20[78];
      *((_WORD *)v50 + 316) = *((_WORD *)v20 + 316);
      *((unsigned char *)v50 + 634) = *((unsigned char *)v20 + 634);
      uint64_t v112 = v214[28];
      __dst = (char *)v50 + v112;
      uint64_t v113 = (char *)v20 + v112;
      uint64_t v114 = type metadata accessor for CommandOperation();
      uint64_t v200 = *(void *)(v114 - 8);
      uint64_t v203 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v200 + 48);
      id v115 = v111;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v203(v113, 1, v114))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
        memcpy(__dst, v113, *(void *)(*(void *)(v116 - 8) + 64));
        uint64_t v117 = v222;
        uint64_t v118 = v211;
      }
      else
      {
        unsigned char *__dst = *v113;
        uint64_t v119 = *(int *)(v114 + 20);
        uint64_t v120 = &__dst[v119];
        uint64_t v121 = &v113[v119];
        uint64_t v122 = *(void *)&v113[v119];
        uint64_t v123 = *(void *)&v113[v119 + 8];
        char v124 = v113[v119 + 16];
        outlined copy of Text.Storage(v122, *((void *)v121 + 1), v121[16]);
        *(void *)uint64_t v120 = v122;
        *((void *)v120 + 1) = v123;
        v120[16] = v124;
        *((void *)v120 + 3) = *((void *)v121 + 3);
        uint64_t v125 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        id v126 = &v120[v125];
        uint64_t v127 = &v121[v125];
        uint64_t v128 = type metadata accessor for UUID();
        uint64_t v129 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v128 - 8) + 16);
        swift_bridgeObjectRetain();
        v129(v126, v127, v128);
        uint64_t v130 = *(int *)(v114 + 24);
        uint64_t v131 = &__dst[v130];
        uint64_t v132 = &v113[v130];
        uint64_t v133 = v114;
        if (*v132)
        {
          uint64_t v134 = v132[1];
          void *v131 = *v132;
          v131[1] = v134;
          swift_retain();
        }
        else
        {
          *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
        }
        uint64_t v117 = v222;
        uint64_t v118 = v211;
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v200 + 56))(__dst, 0, 1, v133);
      }
      *((unsigned char *)v117 + v214[29]) = *((unsigned char *)v20 + v214[29]);
      *((unsigned char *)v117 + v214[30]) = *((unsigned char *)v20 + v214[30]);
      *((unsigned char *)v117 + v214[31]) = *((unsigned char *)v20 + v214[31]);
      *((unsigned char *)v117 + v214[32]) = *((unsigned char *)v20 + v214[32]);
      *(void **)((char *)v117 + v214[33]) = *(void **)((char *)v20 + v214[33]);
      uint64_t v135 = *(void (**)(void **, void, uint64_t, int *))(v118 + 56);
      swift_retain();
      v135(v117, 0, 1, v214);
      a1 = v217;
      uint64_t v26 = v220;
      goto LABEL_68;
    }
    memcpy(a1, a2, *(void *)(v6 + 64));
  }
  return a1;
}

char *assignWithCopy for ToolbarStorage.Entry.Kind(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v3 = (char *)a1;
  if ((unsigned __int8 *)a1 == a2) {
    return v3;
  }
  outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(a1, type metadata accessor for ToolbarStorage.Entry.Kind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    *(void *)int v3 = *(void *)a2;
    *((void *)v3 + 1) = *((void *)a2 + 1);
    int v9 = a2[56];
    swift_bridgeObjectRetain();
    if (v9 == 1)
    {
      uint64_t v10 = *((void *)a2 + 5);
      *((void *)v3 + 5) = v10;
      *((void *)v3 + 6) = *((void *)a2 + 6);
      (**(void (***)(uint64_t, uint64_t))(v10 - 8))((uint64_t)(v3 + 16), (uint64_t)(a2 + 16));
      v3[56] = 1;
    }
    else
    {
      long long v24 = *((_OWORD *)a2 + 1);
      long long v25 = *((_OWORD *)a2 + 2);
      *(_OWORD *)(v3 + 41) = *(_OWORD *)(a2 + 41);
      *((_OWORD *)v3 + 1) = v24;
      *((_OWORD *)v3 + 2) = v25;
    }
    v3[57] = a2[57];
    v3[58] = a2[58];
    v3[59] = a2[59];
    *((void *)v3 + 8) = *((void *)a2 + 8);
    *((void *)v3 + 9) = *((void *)a2 + 9);
    uint64_t v26 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    long long v27 = (void **)&v3[v26];
    uint64_t v28 = (void **)&a2[v26];
    uint64_t v29 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v30 = *(void *)(v29 - 8);
    long long v31 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v30 + 48);
    swift_bridgeObjectRetain();
    if (v31(v28, 1, v29))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v27, v28, *(void *)(*(void *)(v32 - 8) + 64));
LABEL_112:
      swift_storeEnumTagMultiPayload();
      return v3;
    }
    if (swift_getEnumCaseMultiPayload() != 1)
    {
      id v70 = v28[3];
      _OWORD v27[3] = v70;
      v27[4] = v28[4];
      (**((void (***)(void **, void **))v70 - 1))(v27, v28);
      v27[5] = v28[5];
      *((_DWORD *)v27 + 12) = *((_DWORD *)v28 + 12);
      *((_DWORD *)v27 + 13) = *((_DWORD *)v28 + 13);
      v27[7] = v28[7];
      v27[8] = v28[8];
      v27[9] = v28[9];
      long long v71 = v28[10];
      v27[10] = v71;
      swift_retain();
      swift_bridgeObjectRetain();
      id v72 = v71;
LABEL_111:
      swift_storeEnumTagMultiPayload();
      (*(void (**)(void **, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
      goto LABEL_112;
    }
    uint64_t v237 = v30;
    uint64_t v239 = v29;
    long long v52 = *v28;
    *long long v27 = *v28;
    id v53 = v28[1];
    v27[1] = v53;
    void v27[2] = v28[2];
    _OWORD v27[3] = v28[3];
    *((unsigned char *)v27 + 32) = *((unsigned char *)v28 + 32);
    v27[5] = v28[5];
    v27[6] = v28[6];
    *((unsigned char *)v27 + 56) = *((unsigned char *)v28 + 56);
    uint64_t v54 = v27 + 8;
    uint64_t v55 = v28 + 8;
    unint64_t v56 = (unint64_t)v28[23];
    id v57 = v52;
    id v58 = v53;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v56 >> 1 == 4294967294)
    {
      long long v59 = *(_OWORD *)v55;
      long long v60 = *((_OWORD *)v28 + 5);
      long long v61 = *((_OWORD *)v28 + 7);
      *((_OWORD *)v27 + 6) = *((_OWORD *)v28 + 6);
      *((_OWORD *)v27 + 7) = v61;
      *uint64_t v54 = v59;
      *((_OWORD *)v27 + 5) = v60;
      long long v62 = *((_OWORD *)v28 + 8);
      long long v63 = *((_OWORD *)v28 + 9);
      long long v64 = *((_OWORD *)v28 + 11);
      *((_OWORD *)v27 + 10) = *((_OWORD *)v28 + 10);
      *((_OWORD *)v27 + 11) = v64;
      *((_OWORD *)v27 + 8) = v62;
      *((_OWORD *)v27 + 9) = v63;
      long long v65 = *((_OWORD *)v28 + 12);
      long long v66 = *((_OWORD *)v28 + 13);
      long long v67 = *((_OWORD *)v28 + 14);
      *(_DWORD *)((char *)v27 + 239) = *(_DWORD *)((char *)v28 + 239);
      *((_OWORD *)v27 + 13) = v66;
      *((_OWORD *)v27 + 14) = v67;
      *((_OWORD *)v27 + 12) = v65;
    }
    else
    {
      int v73 = *((unsigned __int8 *)v28 + 72);
      if (v73 == 255)
      {
        id v141 = *v55;
        *((unsigned char *)v27 + 72) = *((unsigned char *)v28 + 72);
        *(void *)uint64_t v54 = v141;
      }
      else
      {
        id v74 = *v55;
        outlined copy of GraphicsImage.Contents(*v55, *((unsigned char *)v28 + 72));
        v27[8] = v74;
        *((unsigned char *)v27 + 72) = v73;
      }
      v27[10] = v28[10];
      *(_OWORD *)(v27 + 11) = *(_OWORD *)(v28 + 11);
      *((unsigned char *)v27 + 104) = *((unsigned char *)v28 + 104);
      long long v142 = *(_OWORD *)((char *)v28 + 108);
      *((unsigned char *)v27 + 124) = *((unsigned char *)v28 + 124);
      *(_OWORD *)((char *)v27 + 108) = v142;
      long long v143 = *((_OWORD *)v28 + 8);
      long long v144 = *((_OWORD *)v28 + 9);
      *((unsigned char *)v27 + 160) = *((unsigned char *)v28 + 160);
      *((_OWORD *)v27 + 8) = v143;
      *((_OWORD *)v27 + 9) = v144;
      *((unsigned char *)v27 + 161) = *((unsigned char *)v28 + 161);
      *((unsigned char *)v27 + 162) = *((unsigned char *)v28 + 162);
      *((unsigned char *)v27 + 163) = *((unsigned char *)v28 + 163);
      unint64_t v145 = (unint64_t)v28[23];
      if (v145 >> 1 == 0xFFFFFFFF)
      {
        long long v146 = *(_OWORD *)(v28 + 23);
        *(_OWORD *)(v27 + 21) = *(_OWORD *)(v28 + 21);
        *(_OWORD *)(v27 + 23) = v146;
      }
      else
      {
        uint64_t v147 = (uint64_t)v28[21];
        uint64_t v148 = (uint64_t)v28[22];
        unint64_t v149 = v28[24];
        outlined copy of AccessibilityImageLabel(v147, v148, (uint64_t)v28[23]);
        v27[21] = (void *)v147;
        v27[22] = (void *)v148;
        v27[23] = (void *)v145;
        v27[24] = v149;
      }
      v27[25] = v28[25];
      v27[26] = v28[26];
      *((unsigned char *)v27 + 216) = *((unsigned char *)v28 + 216);
      *((unsigned char *)v27 + 217) = *((unsigned char *)v28 + 217);
      int v150 = *((_DWORD *)v28 + 55);
      *((unsigned char *)v27 + 224) = *((unsigned char *)v28 + 224);
      *((_DWORD *)v27 + 55) = v150;
      long long v151 = v28[29];
      v27[29] = v151;
      *((_WORD *)v27 + 120) = *((_WORD *)v28 + 120);
      *((unsigned char *)v27 + 242) = *((unsigned char *)v28 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v152 = v151;
    }
    if (v28[32])
    {
      v27[31] = v28[31];
      v27[32] = v28[32];
      unint64_t v153 = v28[33];
      swift_bridgeObjectRetain();
      if ((unint64_t)v153 >= 2) {
        id v154 = v153;
      }
      v27[33] = v153;
      int v155 = *((_DWORD *)v28 + 68);
      *((unsigned char *)v27 + 276) = *((unsigned char *)v28 + 276);
      *((_DWORD *)v27 + 68) = v155;
      *((unsigned char *)v27 + 277) = *((unsigned char *)v28 + 277);
      *((unsigned char *)v27 + 278) = *((unsigned char *)v28 + 278);
      v27[35] = v28[35];
      v27[36] = v28[36];
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v156 = *(_OWORD *)(v28 + 31);
      long long v157 = *(_OWORD *)(v28 + 35);
      *(_OWORD *)(v27 + 33) = *(_OWORD *)(v28 + 33);
      *(_OWORD *)(v27 + 35) = v157;
      *(_OWORD *)(v27 + 31) = v156;
    }
    unint64_t v158 = (unint64_t)v28[41];
    if (v158 >> 2 == 0xFFFFFFFF)
    {
      long long v159 = *(_OWORD *)(v28 + 37);
      long long v160 = *(_OWORD *)(v28 + 41);
      *(_OWORD *)(v27 + 39) = *(_OWORD *)(v28 + 39);
      *(_OWORD *)(v27 + 41) = v160;
      *(_OWORD *)(v27 + 37) = v159;
      long long v161 = *(_OWORD *)(v28 + 43);
      long long v162 = *(_OWORD *)(v28 + 45);
      long long v163 = *(_OWORD *)(v28 + 47);
      v27[49] = v28[49];
      *(_OWORD *)(v27 + 45) = v162;
      *(_OWORD *)(v27 + 47) = v163;
      *(_OWORD *)(v27 + 43) = v161;
    }
    else
    {
      long long v164 = v28[37];
      uint64_t v165 = (uint64_t)v28[38];
      uint64_t v166 = (uint64_t)v28[39];
      uint64_t v167 = (uint64_t)v28[42];
      uint64_t v168 = (uint64_t)v28[43];
      long long v169 = v28[44];
      uint64_t v215 = (uint64_t)v28[40];
      uint64_t v219 = (uint64_t)v28[45];
      __dstb = v28[46];
      uint64_t v227 = (uint64_t)v28[47];
      long long v231 = v28[48];
      uint64_t v234 = (uint64_t)v28[49];
      outlined copy of PlatformItemList.Item.SystemItem(v164, v165, v166, v215, v158, v167, v168, (char)v169, v219, (uint64_t)__dstb, v227, (char)v231, v234);
      v27[37] = v164;
      v27[38] = (void *)v165;
      v27[39] = (void *)v166;
      v27[40] = (void *)v215;
      v27[41] = (void *)v158;
      v27[42] = (void *)v167;
      v27[43] = (void *)v168;
      v27[44] = v169;
      v27[45] = (void *)v219;
      v27[46] = __dstb;
      v27[47] = (void *)v227;
      v27[48] = v231;
      v27[49] = (void *)v234;
    }
    if (v28[51] == (void *)1)
    {
      *((_OWORD *)v27 + 25) = *((_OWORD *)v28 + 25);
      long long v170 = *((_OWORD *)v28 + 26);
      long long v171 = *((_OWORD *)v28 + 27);
      long long v172 = *((_OWORD *)v28 + 28);
      *((unsigned char *)v27 + 464) = *((unsigned char *)v28 + 464);
      *((_OWORD *)v27 + 27) = v171;
      *((_OWORD *)v27 + 28) = v172;
      *((_OWORD *)v27 + 26) = v170;
    }
    else
    {
      *((unsigned char *)v27 + 400) = *((unsigned char *)v28 + 400);
      *((unsigned char *)v27 + 401) = *((unsigned char *)v28 + 401);
      *((unsigned char *)v27 + 402) = *((unsigned char *)v28 + 402);
      *((unsigned char *)v27 + 403) = *((unsigned char *)v28 + 403);
      *((unsigned char *)v27 + 404) = *((unsigned char *)v28 + 404);
      uint64_t v173 = v28[51];
      if (v173)
      {
        uint64_t v174 = v28[52];
        v27[51] = v173;
        v27[52] = v174;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v27 + 51) = *(_OWORD *)(v28 + 51);
      }
      uint64_t v175 = v28[53];
      if (v175)
      {
        uint64_t v176 = v28[54];
        v27[53] = v175;
        v27[54] = v176;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v27 + 53) = *(_OWORD *)(v28 + 53);
      }
      uint64_t v177 = v28[55];
      if (v177)
      {
        id v178 = v28[56];
        v27[55] = v177;
        v27[56] = v178;
        swift_retain();
      }
      else
      {
        *(_OWORD *)(v27 + 55) = *(_OWORD *)(v28 + 55);
      }
      v27[57] = v28[57];
      *((unsigned char *)v27 + 464) = *((unsigned char *)v28 + 464);
    }
    v27[59] = v28[59];
    v27[60] = v28[60];
    v27[61] = v28[61];
    *((unsigned char *)v27 + 496) = *((unsigned char *)v28 + 496);
    uint64_t v179 = v28[63];
    swift_bridgeObjectRetain();
    if (v179)
    {
      uint64_t v180 = v28[64];
      v27[63] = v179;
      v27[64] = v180;
      swift_retain();
    }
    else
    {
      *(_OWORD *)(v27 + 63) = *(_OWORD *)(v28 + 63);
    }
    *((_WORD *)v27 + 260) = *((_WORD *)v28 + 260);
    uint64_t v181 = v28[66];
    if (v181)
    {
      v27[66] = v181;
      v27[67] = v28[67];
      v27[68] = v28[68];
      swift_bridgeObjectRetain();
      swift_retain();
      swift_retain();
    }
    else
    {
      long long v182 = *((_OWORD *)v28 + 33);
      v27[68] = v28[68];
      *((_OWORD *)v27 + 33) = v182;
    }
    uint64_t v183 = v28[69];
    if (v183 == (void *)1)
    {
      uint64_t v184 = v27 + 69;
      long long v185 = *(_OWORD *)(v28 + 69);
      v27[71] = v28[71];
    }
    else
    {
      v27[69] = v183;
      uint64_t v186 = v28[70];
      swift_retain();
      if (v186)
      {
        uint64_t v187 = v28[71];
        v27[70] = v186;
        v27[71] = v187;
        swift_retain();
LABEL_104:
        uint64_t v188 = v28[72];
        v27[72] = v188;
        v27[73] = v28[73];
        v27[74] = v28[74];
        v27[75] = v28[75];
        v27[76] = v28[76];
        v27[77] = v28[77];
        v27[78] = v28[78];
        *((unsigned char *)v27 + 632) = *((unsigned char *)v28 + 632);
        *((unsigned char *)v27 + 633) = *((unsigned char *)v28 + 633);
        *((unsigned char *)v27 + 634) = *((unsigned char *)v28 + 634);
        uint64_t v189 = type metadata accessor for PlatformItemList.Item();
        uint64_t v190 = *(int *)(v189 + 112);
        uint64_t v232 = (char *)v27 + v190;
        uint64_t v235 = (int *)v189;
        uint64_t v191 = (char *)v28 + v190;
        uint64_t v192 = type metadata accessor for CommandOperation();
        uint64_t v220 = *(void *)(v192 - 8);
        __dstc = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v220 + 48);
        id v193 = v188;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        if (__dstc(v191, 1, v192))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v232, v191, *(void *)(*(void *)(v194 - 8) + 64));
          uint64_t v29 = v239;
          uint64_t v30 = v237;
        }
        else
        {
          *uint64_t v232 = *v191;
          uint64_t v195 = *(int *)(v192 + 20);
          uint64_t v196 = &v232[v195];
          uint64_t v197 = &v191[v195];
          __dstd = v191;
          uint64_t v228 = v192;
          uint64_t v198 = *(void *)&v191[v195];
          uint64_t v199 = *((void *)v197 + 1);
          char v200 = v197[16];
          outlined copy of Text.Storage(v198, v199, v200);
          *(void *)uint64_t v196 = v198;
          *((void *)v196 + 1) = v199;
          v196[16] = v200;
          *((void *)v196 + 3) = *((void *)v197 + 3);
          uint64_t v201 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          uint64_t v202 = &v196[v201];
          uint64_t v203 = &v197[v201];
          uint64_t v204 = type metadata accessor for UUID();
          uint64_t v205 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v204 - 8) + 16);
          swift_bridgeObjectRetain();
          v205(v202, v203, v204);
          uint64_t v206 = *(int *)(v228 + 24);
          char v207 = &v232[v206];
          uint64_t v208 = &__dstd[v206];
          if (*(void *)v208)
          {
            uint64_t v209 = *((void *)v208 + 1);
            *char v207 = *(void *)v208;
            v207[1] = v209;
            swift_retain();
          }
          else
          {
            *(_OWORD *)char v207 = *(_OWORD *)v208;
          }
          uint64_t v29 = v239;
          uint64_t v30 = v237;
          (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v220 + 56))(v232, 0, 1, v228);
        }
        *((unsigned char *)v27 + v235[29]) = *((unsigned char *)v28 + v235[29]);
        *((unsigned char *)v27 + v235[30]) = *((unsigned char *)v28 + v235[30]);
        *((unsigned char *)v27 + v235[31]) = *((unsigned char *)v28 + v235[31]);
        *((unsigned char *)v27 + v235[32]) = *((unsigned char *)v28 + v235[32]);
        *(void **)((char *)v27 + v235[33]) = *(void **)((char *)v28 + v235[33]);
        swift_retain();
        goto LABEL_111;
      }
      uint64_t v184 = v27 + 70;
      long long v185 = *((_OWORD *)v28 + 35);
    }
    _OWORD *v184 = v185;
    goto LABEL_104;
  }
  if (!EnumCaseMultiPayload)
  {
    *(_DWORD *)int v3 = *(_DWORD *)a2;
    *((_DWORD *)v3 + 1) = *((_DWORD *)a2 + 1);
    *((void *)v3 + 1) = *((void *)a2 + 1);
    *((void *)v3 + 2) = *((void *)a2 + 2);
    *((void *)v3 + 3) = *((void *)a2 + 3);
    *((void *)v3 + 4) = *((void *)a2 + 4);
    *((void *)v3 + 5) = *((void *)a2 + 5);
    int v7 = a2[88];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v7 == 1)
    {
      uint64_t v8 = *((void *)a2 + 9);
      *((void *)v3 + 9) = v8;
      *((void *)v3 + 10) = *((void *)a2 + 10);
      (**(void (***)(uint64_t, uint64_t))(v8 - 8))((uint64_t)(v3 + 48), (uint64_t)(a2 + 48));
      v3[88] = 1;
    }
    else
    {
      long long v11 = *((_OWORD *)a2 + 3);
      long long v12 = *((_OWORD *)a2 + 4);
      *(_OWORD *)(v3 + 73) = *(_OWORD *)(a2 + 73);
      *((_OWORD *)v3 + 3) = v11;
      *((_OWORD *)v3 + 4) = v12;
    }
    v3[89] = a2[89];
    v3[90] = a2[90];
    v3[91] = a2[91];
    v3[92] = a2[92];
    *((void *)v3 + 12) = *((void *)a2 + 12);
    uint64_t v13 = *((void *)a2 + 16);
    *((void *)v3 + 16) = v13;
    *((void *)v3 + 17) = *((void *)a2 + 17);
    (**(void (***)(uint64_t, uint64_t))(v13 - 8))((uint64_t)(v3 + 104), (uint64_t)(a2 + 104));
    *((void *)v3 + 18) = *((void *)a2 + 18);
    *((_DWORD *)v3 + 38) = *((_DWORD *)a2 + 38);
    *((_DWORD *)v3 + 39) = *((_DWORD *)a2 + 39);
    *((void *)v3 + 20) = *((void *)a2 + 20);
    *((void *)v3 + 21) = *((void *)a2 + 21);
    *((void *)v3 + 22) = *((void *)a2 + 22);
    long long v14 = (void *)*((void *)a2 + 23);
    *((void *)v3 + 23) = v14;
    uint64_t v238 = type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v15 = *(int *)(v238 + 48);
    uint64_t v236 = v3;
    long long v16 = (void **)&v3[v15];
    uint64_t v17 = (void **)&a2[v15];
    uint64_t v18 = type metadata accessor for PlatformItemList.Item();
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(unsigned int (**)(void **, uint64_t, uint64_t))(v19 + 48);
    swift_retain();
    swift_bridgeObjectRetain();
    id v21 = v14;
    if (v20(v17, 1, v18))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v16, v17, *(void *)(*(void *)(v22 - 8) + 64));
      uint64_t v23 = v238;
LABEL_66:
      int v3 = v236;
      swift_weakCopyInit();
      v236[*(int *)(v23 + 56)] = a2[*(int *)(v23 + 56)];
      v236[*(int *)(v23 + 60)] = a2[*(int *)(v23 + 60)];
      goto LABEL_112;
    }
    uint64_t v226 = v19;
    uint64_t v233 = (int *)v18;
    uint64_t v33 = *v17;
    *long long v16 = *v17;
    long long v34 = v17[1];
    v16[1] = v34;
    void v16[2] = v17[2];
    v16[3] = v17[3];
    *((unsigned char *)v16 + 32) = *((unsigned char *)v17 + 32);
    v16[5] = v17[5];
    v16[6] = v17[6];
    *((unsigned char *)v16 + 56) = *((unsigned char *)v17 + 56);
    uint64_t v35 = v16 + 8;
    long long v36 = v17 + 8;
    unint64_t v37 = (unint64_t)v17[23];
    id v38 = v33;
    id v39 = v34;
    swift_bridgeObjectRetain();
    swift_retain();
    if (v37 >> 1 == 4294967294)
    {
      long long v40 = *(_OWORD *)v36;
      long long v41 = *((_OWORD *)v17 + 5);
      long long v42 = *((_OWORD *)v17 + 7);
      *((_OWORD *)v16 + 6) = *((_OWORD *)v17 + 6);
      *((_OWORD *)v16 + 7) = v42;
      *uint64_t v35 = v40;
      *((_OWORD *)v16 + 5) = v41;
      long long v43 = *((_OWORD *)v17 + 8);
      long long v44 = *((_OWORD *)v17 + 9);
      long long v45 = *((_OWORD *)v17 + 11);
      *((_OWORD *)v16 + 10) = *((_OWORD *)v17 + 10);
      *((_OWORD *)v16 + 11) = v45;
      *((_OWORD *)v16 + 8) = v43;
      *((_OWORD *)v16 + 9) = v44;
      long long v46 = *((_OWORD *)v17 + 12);
      long long v47 = *((_OWORD *)v17 + 13);
      long long v48 = *((_OWORD *)v17 + 14);
      *(_DWORD *)((char *)v16 + 239) = *(_DWORD *)((char *)v17 + 239);
      *((_OWORD *)v16 + 13) = v47;
      *((_OWORD *)v16 + 14) = v48;
      *((_OWORD *)v16 + 12) = v46;
      if (v17[32])
      {
LABEL_17:
        v16[31] = v17[31];
        v16[32] = v17[32];
        long long v49 = v17[33];
        swift_bridgeObjectRetain();
        if ((unint64_t)v49 >= 2) {
          id v50 = v49;
        }
        v16[33] = v49;
        int v51 = *((_DWORD *)v17 + 68);
        *((unsigned char *)v16 + 276) = *((unsigned char *)v17 + 276);
        *((_DWORD *)v16 + 68) = v51;
        *((unsigned char *)v16 + 277) = *((unsigned char *)v17 + 277);
        *((unsigned char *)v16 + 278) = *((unsigned char *)v17 + 278);
        v16[35] = v17[35];
        v16[36] = v17[36];
        swift_retain();
        swift_retain();
LABEL_34:
        unint64_t v89 = (unint64_t)v17[41];
        if (v89 >> 2 == 0xFFFFFFFF)
        {
          long long v90 = *(_OWORD *)(v17 + 37);
          long long v91 = *(_OWORD *)(v17 + 41);
          *(_OWORD *)(v16 + 39) = *(_OWORD *)(v17 + 39);
          *(_OWORD *)(v16 + 41) = v91;
          *(_OWORD *)(v16 + 37) = v90;
          long long v92 = *(_OWORD *)(v17 + 43);
          long long v93 = *(_OWORD *)(v17 + 45);
          long long v94 = *(_OWORD *)(v17 + 47);
          v16[49] = v17[49];
          *(_OWORD *)(v16 + 45) = v93;
          *(_OWORD *)(v16 + 47) = v94;
          *(_OWORD *)(v16 + 43) = v92;
        }
        else
        {
          uint64_t v95 = v17[37];
          uint64_t v96 = (uint64_t)v17[38];
          uint64_t v97 = (uint64_t)v17[40];
          uint64_t v98 = (uint64_t)v17[42];
          uint64_t v99 = (uint64_t)v17[43];
          uint64_t v100 = v17[44];
          uint64_t v211 = (uint64_t)v17[39];
          uint64_t v212 = (uint64_t)v17[45];
          uint64_t v213 = (uint64_t)v17[46];
          uint64_t v216 = (uint64_t)v17[47];
          __dsta = v17[48];
          uint64_t v229 = v17[49];
          outlined copy of PlatformItemList.Item.SystemItem(v95, v96, v211, v97, v89, v98, v99, (char)v100, v212, v213, v216, (char)__dsta, (uint64_t)v229);
          v16[37] = v95;
          v16[38] = (void *)v96;
          v16[39] = (void *)v211;
          v16[40] = (void *)v97;
          v16[41] = (void *)v89;
          v16[42] = (void *)v98;
          v16[43] = (void *)v99;
          v16[44] = v100;
          v16[45] = (void *)v212;
          v16[46] = (void *)v213;
          v16[47] = (void *)v216;
          v16[48] = __dsta;
          v16[49] = v229;
        }
        if (v17[51] == (void *)1)
        {
          *((_OWORD *)v16 + 25) = *((_OWORD *)v17 + 25);
          long long v101 = *((_OWORD *)v17 + 26);
          long long v102 = *((_OWORD *)v17 + 27);
          long long v103 = *((_OWORD *)v17 + 28);
          *((unsigned char *)v16 + 464) = *((unsigned char *)v17 + 464);
          *((_OWORD *)v16 + 27) = v102;
          *((_OWORD *)v16 + 28) = v103;
          *((_OWORD *)v16 + 26) = v101;
          goto LABEL_47;
        }
        *((unsigned char *)v16 + 400) = *((unsigned char *)v17 + 400);
        *((unsigned char *)v16 + 401) = *((unsigned char *)v17 + 401);
        *((unsigned char *)v16 + 402) = *((unsigned char *)v17 + 402);
        *((unsigned char *)v16 + 403) = *((unsigned char *)v17 + 403);
        *((unsigned char *)v16 + 404) = *((unsigned char *)v17 + 404);
        long long v104 = v17[51];
        if (v104)
        {
          long long v105 = v17[52];
          v16[51] = v104;
          v16[52] = v105;
          swift_retain();
          long long v106 = v17[53];
          if (v106) {
            goto LABEL_41;
          }
        }
        else
        {
          *(_OWORD *)(v16 + 51) = *(_OWORD *)(v17 + 51);
          long long v106 = v17[53];
          if (v106)
          {
LABEL_41:
            uint64_t v107 = v17[54];
            v16[53] = v106;
            v16[54] = v107;
            swift_retain();
            uint64_t v108 = v17[55];
            if (v108)
            {
LABEL_42:
              uint64_t v109 = v17[56];
              v16[55] = v108;
              v16[56] = v109;
              swift_retain();
LABEL_46:
              v16[57] = v17[57];
              *((unsigned char *)v16 + 464) = *((unsigned char *)v17 + 464);
LABEL_47:
              v16[59] = v17[59];
              v16[60] = v17[60];
              v16[61] = v17[61];
              *((unsigned char *)v16 + 496) = *((unsigned char *)v17 + 496);
              uint64_t v110 = v17[63];
              swift_bridgeObjectRetain();
              if (v110)
              {
                uint64_t v111 = v17[64];
                v16[63] = v110;
                v16[64] = v111;
                swift_retain();
              }
              else
              {
                *(_OWORD *)(v16 + 63) = *(_OWORD *)(v17 + 63);
              }
              *((_WORD *)v16 + 260) = *((_WORD *)v17 + 260);
              uint64_t v112 = v17[66];
              if (v112)
              {
                v16[66] = v112;
                v16[67] = v17[67];
                v16[68] = v17[68];
                swift_bridgeObjectRetain();
                swift_retain();
                swift_retain();
              }
              else
              {
                long long v113 = *((_OWORD *)v17 + 33);
                v16[68] = v17[68];
                *((_OWORD *)v16 + 33) = v113;
              }
              uint64_t v114 = v17[69];
              if (v114 == (void *)1)
              {
                id v115 = v16 + 69;
                long long v116 = *(_OWORD *)(v17 + 69);
                v16[71] = v17[71];
              }
              else
              {
                v16[69] = v114;
                uint64_t v117 = v17[70];
                swift_retain();
                if (v117)
                {
                  uint64_t v118 = v17[71];
                  v16[70] = v117;
                  v16[71] = v118;
                  swift_retain();
LABEL_59:
                  uint64_t v119 = v17[72];
                  v16[72] = v119;
                  v16[73] = v17[73];
                  v16[74] = v17[74];
                  v16[75] = v17[75];
                  v16[76] = v17[76];
                  v16[77] = v17[77];
                  v16[78] = v17[78];
                  *((unsigned char *)v16 + 632) = *((unsigned char *)v17 + 632);
                  *((unsigned char *)v16 + 633) = *((unsigned char *)v17 + 633);
                  *((unsigned char *)v16 + 634) = *((unsigned char *)v17 + 634);
                  uint64_t v120 = v233[28];
                  __dst = (char *)v16 + v120;
                  uint64_t v230 = (char *)v17 + v120;
                  uint64_t v121 = type metadata accessor for CommandOperation();
                  uint64_t v214 = *(void *)(v121 - 8);
                  uint64_t v217 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v214 + 48);
                  id v122 = v119;
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  if (v217(v230, 1, v121))
                  {
                    _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
                    memcpy(__dst, v230, *(void *)(*(void *)(v123 - 8) + 64));
                    uint64_t v124 = v226;
                  }
                  else
                  {
                    unsigned char *__dst = *v230;
                    uint64_t v125 = *(int *)(v121 + 20);
                    id v126 = &__dst[v125];
                    uint64_t v127 = &v230[v125];
                    uint64_t v218 = v121;
                    uint64_t v128 = *(void *)&v230[v125];
                    uint64_t v129 = *(void *)&v230[v125 + 8];
                    char v130 = v230[v125 + 16];
                    outlined copy of Text.Storage(v128, *((void *)v127 + 1), v127[16]);
                    *(void *)id v126 = v128;
                    *((void *)v126 + 1) = v129;
                    v126[16] = v130;
                    *((void *)v126 + 3) = *((void *)v127 + 3);
                    uint64_t v131 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
                    uint64_t v132 = &v126[v131];
                    uint64_t v133 = &v127[v131];
                    uint64_t v134 = type metadata accessor for UUID();
                    uint64_t v135 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v134 - 8) + 16);
                    swift_bridgeObjectRetain();
                    v135(v132, v133, v134);
                    uint64_t v136 = *(int *)(v218 + 24);
                    long long v137 = &__dst[v136];
                    uint64_t v138 = &v230[v136];
                    if (*v138)
                    {
                      uint64_t v139 = v138[1];
                      *long long v137 = *v138;
                      v137[1] = v139;
                      swift_retain();
                    }
                    else
                    {
                      *(_OWORD *)long long v137 = *(_OWORD *)v138;
                    }
                    uint64_t v124 = v226;
                    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v214 + 56))(__dst, 0, 1, v218);
                  }
                  *((unsigned char *)v16 + v233[29]) = *((unsigned char *)v17 + v233[29]);
                  *((unsigned char *)v16 + v233[30]) = *((unsigned char *)v17 + v233[30]);
                  *((unsigned char *)v16 + v233[31]) = *((unsigned char *)v17 + v233[31]);
                  *((unsigned char *)v16 + v233[32]) = *((unsigned char *)v17 + v233[32]);
                  *(void **)((char *)v16 + v233[33]) = *(void **)((char *)v17 + v233[33]);
                  uint64_t v140 = *(void (**)(void **, void, uint64_t, int *))(v124 + 56);
                  swift_retain();
                  v140(v16, 0, 1, v233);
                  uint64_t v23 = v238;
                  goto LABEL_66;
                }
                id v115 = v16 + 70;
                long long v116 = *((_OWORD *)v17 + 35);
              }
              *id v115 = v116;
              goto LABEL_59;
            }
LABEL_45:
            *(_OWORD *)(v16 + 55) = *(_OWORD *)(v17 + 55);
            goto LABEL_46;
          }
        }
        *(_OWORD *)(v16 + 53) = *(_OWORD *)(v17 + 53);
        uint64_t v108 = v17[55];
        if (v108) {
          goto LABEL_42;
        }
        goto LABEL_45;
      }
    }
    else
    {
      int v68 = *((unsigned __int8 *)v17 + 72);
      if (v68 == 255)
      {
        id v75 = *v36;
        *((unsigned char *)v16 + 72) = *((unsigned char *)v17 + 72);
        *(void *)uint64_t v35 = v75;
      }
      else
      {
        id v69 = *v36;
        outlined copy of GraphicsImage.Contents(*v36, *((unsigned char *)v17 + 72));
        v16[8] = v69;
        *((unsigned char *)v16 + 72) = v68;
      }
      v16[10] = v17[10];
      *(_OWORD *)(v16 + 11) = *(_OWORD *)(v17 + 11);
      *((unsigned char *)v16 + 104) = *((unsigned char *)v17 + 104);
      long long v76 = *(_OWORD *)((char *)v17 + 108);
      *((unsigned char *)v16 + 124) = *((unsigned char *)v17 + 124);
      *(_OWORD *)((char *)v16 + 108) = v76;
      long long v77 = *((_OWORD *)v17 + 8);
      long long v78 = *((_OWORD *)v17 + 9);
      *((unsigned char *)v16 + 160) = *((unsigned char *)v17 + 160);
      *((_OWORD *)v16 + 8) = v77;
      *((_OWORD *)v16 + 9) = v78;
      *((unsigned char *)v16 + 161) = *((unsigned char *)v17 + 161);
      *((unsigned char *)v16 + 162) = *((unsigned char *)v17 + 162);
      *((unsigned char *)v16 + 163) = *((unsigned char *)v17 + 163);
      unint64_t v79 = (unint64_t)v17[23];
      if (v79 >> 1 == 0xFFFFFFFF)
      {
        long long v80 = *(_OWORD *)(v17 + 23);
        *(_OWORD *)(v16 + 21) = *(_OWORD *)(v17 + 21);
        *(_OWORD *)(v16 + 23) = v80;
      }
      else
      {
        uint64_t v81 = (uint64_t)v17[21];
        uint64_t v82 = (uint64_t)v17[22];
        id v83 = v17[24];
        outlined copy of AccessibilityImageLabel(v81, v82, (uint64_t)v17[23]);
        v16[21] = (void *)v81;
        v16[22] = (void *)v82;
        v16[23] = (void *)v79;
        v16[24] = v83;
      }
      v16[25] = v17[25];
      v16[26] = v17[26];
      *((unsigned char *)v16 + 216) = *((unsigned char *)v17 + 216);
      *((unsigned char *)v16 + 217) = *((unsigned char *)v17 + 217);
      int v84 = *((_DWORD *)v17 + 55);
      *((unsigned char *)v16 + 224) = *((unsigned char *)v17 + 224);
      *((_DWORD *)v16 + 55) = v84;
      unint64_t v85 = v17[29];
      v16[29] = v85;
      *((_WORD *)v16 + 120) = *((_WORD *)v17 + 120);
      *((unsigned char *)v16 + 242) = *((unsigned char *)v17 + 242);
      swift_unknownObjectRetain();
      swift_retain();
      id v86 = v85;
      if (v17[32]) {
        goto LABEL_17;
      }
    }
    long long v87 = *(_OWORD *)(v17 + 31);
    long long v88 = *(_OWORD *)(v17 + 35);
    *(_OWORD *)(v16 + 33) = *(_OWORD *)(v17 + 33);
    *(_OWORD *)(v16 + 35) = v88;
    *(_OWORD *)(v16 + 31) = v87;
    goto LABEL_34;
  }
  memcpy(v3, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return v3;
}

char *initializeWithTake for ToolbarStorage.Entry.Kind(char *a1, char *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (EnumCaseMultiPayload == 1)
  {
    long long v19 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v19;
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
    a1[57] = a2[57];
    *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    uint64_t v20 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
    id v21 = &a1[v20];
    uint64_t v22 = &a2[v20];
    uint64_t v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        long long v41 = *((_OWORD *)v22 + 1);
        *(_OWORD *)id v21 = *(_OWORD *)v22;
        *((_OWORD *)v21 + 1) = v41;
        v21[32] = v22[32];
        uint64_t v42 = *((void *)v22 + 6);
        *((void *)v21 + 5) = *((void *)v22 + 5);
        *((void *)v21 + 6) = v42;
        v21[56] = v22[56];
        long long v43 = *((_OWORD *)v22 + 13);
        *((_OWORD *)v21 + 12) = *((_OWORD *)v22 + 12);
        *((_OWORD *)v21 + 13) = v43;
        *((_OWORD *)v21 + 14) = *((_OWORD *)v22 + 14);
        *(_DWORD *)(v21 + 239) = *(_DWORD *)(v22 + 239);
        long long v44 = *((_OWORD *)v22 + 9);
        *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
        *((_OWORD *)v21 + 9) = v44;
        long long v45 = *((_OWORD *)v22 + 11);
        *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
        *((_OWORD *)v21 + 11) = v45;
        long long v46 = *((_OWORD *)v22 + 5);
        *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
        *((_OWORD *)v21 + 5) = v46;
        long long v47 = *((_OWORD *)v22 + 7);
        *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
        *((_OWORD *)v21 + 7) = v47;
        *(_OWORD *)(v21 + 248) = *(_OWORD *)(v22 + 248);
        long long v48 = *(_OWORD *)(v22 + 280);
        *(_OWORD *)(v21 + 264) = *(_OWORD *)(v22 + 264);
        *(_OWORD *)(v21 + 280) = v48;
        long long v49 = *(_OWORD *)(v22 + 376);
        *(_OWORD *)(v21 + 360) = *(_OWORD *)(v22 + 360);
        *(_OWORD *)(v21 + 376) = v49;
        *((void *)v21 + 49) = *((void *)v22 + 49);
        long long v50 = *(_OWORD *)(v22 + 312);
        *(_OWORD *)(v21 + 296) = *(_OWORD *)(v22 + 296);
        *(_OWORD *)(v21 + 312) = v50;
        long long v51 = *(_OWORD *)(v22 + 344);
        *(_OWORD *)(v21 + 328) = *(_OWORD *)(v22 + 328);
        *(_OWORD *)(v21 + 344) = v51;
        long long v52 = *((_OWORD *)v22 + 28);
        *((_OWORD *)v21 + 27) = *((_OWORD *)v22 + 27);
        *((_OWORD *)v21 + 28) = v52;
        v21[464] = v22[464];
        long long v53 = *((_OWORD *)v22 + 26);
        *((_OWORD *)v21 + 25) = *((_OWORD *)v22 + 25);
        *((_OWORD *)v21 + 26) = v53;
        *(_OWORD *)(v21 + 472) = *(_OWORD *)(v22 + 472);
        *(_OWORD *)(v21 + 481) = *(_OWORD *)(v22 + 481);
        uint64_t v54 = *((void *)v22 + 63);
        if (v54)
        {
          uint64_t v55 = *((void *)v22 + 64);
          *((void *)v21 + 63) = v54;
          *((void *)v21 + 64) = v55;
        }
        else
        {
          *(_OWORD *)(v21 + 504) = *(_OWORD *)(v22 + 504);
        }
        *((_WORD *)v21 + 260) = *((_WORD *)v22 + 260);
        *((_OWORD *)v21 + 33) = *((_OWORD *)v22 + 33);
        *((void *)v21 + 68) = *((void *)v22 + 68);
        *((void *)v21 + 71) = *((void *)v22 + 71);
        *(_OWORD *)(v21 + 552) = *(_OWORD *)(v22 + 552);
        *((void *)v21 + 72) = *((void *)v22 + 72);
        *(_OWORD *)(v21 + 584) = *(_OWORD *)(v22 + 584);
        *(_OWORD *)(v21 + 600) = *(_OWORD *)(v22 + 600);
        *((void *)v21 + 77) = *((void *)v22 + 77);
        *((void *)v21 + 78) = *((void *)v22 + 78);
        v21[632] = v22[632];
        *(_WORD *)(v21 + 633) = *(_WORD *)(v22 + 633);
        int v73 = (int *)type metadata accessor for PlatformItemList.Item();
        uint64_t v74 = v73[28];
        __dsta = &v21[v74];
        id v75 = &v22[v74];
        uint64_t v76 = type metadata accessor for CommandOperation();
        uint64_t v77 = *(void *)(v76 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(__dsta, v75, *(void *)(*(void *)(v78 - 8) + 64));
        }
        else
        {
          uint64_t v96 = v75;
          uint64_t v98 = v77;
          char *__dsta = *v75;
          uint64_t v79 = *(int *)(v76 + 20);
          long long v80 = &__dsta[v79];
          uint64_t v81 = &v75[v79];
          long long v82 = *((_OWORD *)v81 + 1);
          *(_OWORD *)long long v80 = *(_OWORD *)v81;
          *((_OWORD *)v80 + 1) = v82;
          uint64_t v83 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          long long v94 = &v80[v83];
          int v84 = &v81[v83];
          uint64_t v85 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v94, v84, v85);
          uint64_t v86 = *(int *)(v76 + 24);
          long long v87 = &__dsta[v86];
          long long v88 = (uint64_t *)&v96[v86];
          uint64_t v89 = *v88;
          if (*v88)
          {
            uint64_t v90 = v88[1];
            *(void *)long long v87 = v89;
            *((void *)v87 + 1) = v90;
          }
          else
          {
            *(_OWORD *)long long v87 = *(_OWORD *)v88;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(__dsta, 0, 1, v76);
        }
        v21[v73[29]] = v22[v73[29]];
        v21[v73[30]] = v22[v73[30]];
        v21[v73[31]] = v22[v73[31]];
        v21[v73[32]] = v22[v73[32]];
        *(void *)&v21[v73[33]] = *(void *)&v22[v73[33]];
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v21, v22, *(void *)(v24 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
    }
    goto LABEL_32;
  }
  if (!EnumCaseMultiPayload)
  {
    long long v7 = *((_OWORD *)a2 + 1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *((_OWORD *)a1 + 1) = v7;
    long long v8 = *((_OWORD *)a2 + 3);
    *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
    *((_OWORD *)a1 + 3) = v8;
    *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
    *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
    *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
    *((void *)a1 + 12) = *((void *)a2 + 12);
    long long v9 = *(_OWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v9;
    long long v10 = *(_OWORD *)(a2 + 136);
    long long v11 = *(_OWORD *)(a2 + 152);
    long long v12 = *(_OWORD *)(a2 + 168);
    *((void *)a1 + 23) = *((void *)a2 + 23);
    *(_OWORD *)(a1 + 168) = v12;
    *(_OWORD *)(a1 + 152) = v11;
    *(_OWORD *)(a1 + 136) = v10;
    uint64_t v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
    uint64_t v14 = v13[12];
    uint64_t v15 = &a1[v14];
    long long v16 = &a2[v14];
    uint64_t v17 = (int *)type metadata accessor for PlatformItemList.Item();
    __dst = (void (**)(char *, void, uint64_t, int *))*((void *)v17 - 1);
    if (((unsigned int (*)(char *, uint64_t, int *))__dst[6])(v16, 1, v17))
    {
      _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
      memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
    }
    else
    {
      long long v26 = *((_OWORD *)v16 + 1);
      *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
      *((_OWORD *)v15 + 1) = v26;
      v15[32] = v16[32];
      uint64_t v27 = *((void *)v16 + 6);
      *((void *)v15 + 5) = *((void *)v16 + 5);
      *((void *)v15 + 6) = v27;
      v15[56] = v16[56];
      long long v28 = *((_OWORD *)v16 + 13);
      *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
      *((_OWORD *)v15 + 13) = v28;
      *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
      *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
      long long v29 = *((_OWORD *)v16 + 9);
      *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
      *((_OWORD *)v15 + 9) = v29;
      long long v30 = *((_OWORD *)v16 + 11);
      *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
      *((_OWORD *)v15 + 11) = v30;
      long long v31 = *((_OWORD *)v16 + 5);
      *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
      *((_OWORD *)v15 + 5) = v31;
      long long v32 = *((_OWORD *)v16 + 7);
      *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
      *((_OWORD *)v15 + 7) = v32;
      *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
      long long v33 = *(_OWORD *)(v16 + 280);
      *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
      *(_OWORD *)(v15 + 280) = v33;
      long long v34 = *(_OWORD *)(v16 + 376);
      *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
      *(_OWORD *)(v15 + 376) = v34;
      *((void *)v15 + 49) = *((void *)v16 + 49);
      long long v35 = *(_OWORD *)(v16 + 312);
      *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
      *(_OWORD *)(v15 + 312) = v35;
      long long v36 = *(_OWORD *)(v16 + 344);
      *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
      *(_OWORD *)(v15 + 344) = v36;
      long long v37 = *((_OWORD *)v16 + 28);
      *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
      *((_OWORD *)v15 + 28) = v37;
      v15[464] = v16[464];
      long long v38 = *((_OWORD *)v16 + 26);
      *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
      *((_OWORD *)v15 + 26) = v38;
      *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
      *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
      uint64_t v39 = *((void *)v16 + 63);
      if (v39)
      {
        uint64_t v40 = *((void *)v16 + 64);
        *((void *)v15 + 63) = v39;
        *((void *)v15 + 64) = v40;
      }
      else
      {
        *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
      }
      *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
      *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
      *((void *)v15 + 68) = *((void *)v16 + 68);
      *((void *)v15 + 71) = *((void *)v16 + 71);
      *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
      *((void *)v15 + 72) = *((void *)v16 + 72);
      *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
      *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
      *((void *)v15 + 77) = *((void *)v16 + 77);
      *((void *)v15 + 78) = *((void *)v16 + 78);
      v15[632] = v16[632];
      *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
      uint64_t v56 = v17[28];
      uint64_t v97 = &v15[v56];
      id v57 = &v16[v56];
      uint64_t v58 = type metadata accessor for CommandOperation();
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v95 = v57;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
        memcpy(v97, v57, *(void *)(*(void *)(v60 - 8) + 64));
      }
      else
      {
        uint64_t v93 = v59;
        *uint64_t v97 = *v57;
        uint64_t v61 = *(int *)(v58 + 20);
        long long v62 = &v97[v61];
        long long v63 = &v57[v61];
        long long v64 = *(_OWORD *)&v95[v61 + 16];
        *(_OWORD *)long long v62 = *(_OWORD *)&v95[v61];
        *((_OWORD *)v62 + 1) = v64;
        uint64_t v65 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
        long long v66 = &v62[v65];
        long long v92 = &v63[v65];
        uint64_t v67 = type metadata accessor for UUID();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v66, v92, v67);
        uint64_t v68 = *(int *)(v58 + 24);
        id v69 = &v97[v68];
        id v70 = (uint64_t *)&v95[v68];
        uint64_t v71 = *v70;
        if (*v70)
        {
          uint64_t v72 = v70[1];
          *(void *)id v69 = v71;
          *((void *)v69 + 1) = v72;
        }
        else
        {
          *(_OWORD *)id v69 = *(_OWORD *)v70;
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v97, 0, 1, v58);
      }
      v15[v17[29]] = v16[v17[29]];
      v15[v17[30]] = v16[v17[30]];
      v15[v17[31]] = v16[v17[31]];
      v15[v17[32]] = v16[v17[32]];
      *(void *)&v15[v17[33]] = *(void *)&v16[v17[33]];
      __dst[7](v15, 0, 1, v17);
    }
    swift_weakTakeInit();
    a1[v13[14]] = a2[v13[14]];
    a1[v13[15]] = a2[v13[15]];
LABEL_32:
    swift_storeEnumTagMultiPayload();
    return a1;
  }
  memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  return a1;
}

char *assignWithTake for ToolbarStorage.Entry.Kind(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)a1, type metadata accessor for ToolbarStorage.Entry.Kind);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
    if (EnumCaseMultiPayload == 1)
    {
      long long v19 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v19;
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *(_OWORD *)(a1 + 41) = *(_OWORD *)(a2 + 41);
      a1[57] = a2[57];
      *((_WORD *)a1 + 29) = *((_WORD *)a2 + 29);
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      uint64_t v20 = *(int *)(type metadata accessor for ToolbarStorage.GroupItem(0) + 44);
      id v21 = &a1[v20];
      uint64_t v22 = &a2[v20];
      uint64_t v23 = type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent(0);
      uint64_t v24 = *(void *)(v23 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1, v23))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem.CollapsedContent?, type metadata accessor for ToolbarStorage.GroupItem.CollapsedContent, MEMORY[0x1E4FBB718]);
        memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
      }
      else
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          long long v41 = *((_OWORD *)v22 + 1);
          *(_OWORD *)id v21 = *(_OWORD *)v22;
          *((_OWORD *)v21 + 1) = v41;
          v21[32] = v22[32];
          uint64_t v42 = *((void *)v22 + 6);
          *((void *)v21 + 5) = *((void *)v22 + 5);
          *((void *)v21 + 6) = v42;
          v21[56] = v22[56];
          long long v43 = *((_OWORD *)v22 + 13);
          *((_OWORD *)v21 + 12) = *((_OWORD *)v22 + 12);
          *((_OWORD *)v21 + 13) = v43;
          *((_OWORD *)v21 + 14) = *((_OWORD *)v22 + 14);
          *(_DWORD *)(v21 + 239) = *(_DWORD *)(v22 + 239);
          long long v44 = *((_OWORD *)v22 + 9);
          *((_OWORD *)v21 + 8) = *((_OWORD *)v22 + 8);
          *((_OWORD *)v21 + 9) = v44;
          long long v45 = *((_OWORD *)v22 + 11);
          *((_OWORD *)v21 + 10) = *((_OWORD *)v22 + 10);
          *((_OWORD *)v21 + 11) = v45;
          long long v46 = *((_OWORD *)v22 + 5);
          *((_OWORD *)v21 + 4) = *((_OWORD *)v22 + 4);
          *((_OWORD *)v21 + 5) = v46;
          long long v47 = *((_OWORD *)v22 + 7);
          *((_OWORD *)v21 + 6) = *((_OWORD *)v22 + 6);
          *((_OWORD *)v21 + 7) = v47;
          *(_OWORD *)(v21 + 248) = *(_OWORD *)(v22 + 248);
          long long v48 = *(_OWORD *)(v22 + 280);
          *(_OWORD *)(v21 + 264) = *(_OWORD *)(v22 + 264);
          *(_OWORD *)(v21 + 280) = v48;
          long long v49 = *(_OWORD *)(v22 + 376);
          *(_OWORD *)(v21 + 360) = *(_OWORD *)(v22 + 360);
          *(_OWORD *)(v21 + 376) = v49;
          *((void *)v21 + 49) = *((void *)v22 + 49);
          long long v50 = *(_OWORD *)(v22 + 312);
          *(_OWORD *)(v21 + 296) = *(_OWORD *)(v22 + 296);
          *(_OWORD *)(v21 + 312) = v50;
          long long v51 = *(_OWORD *)(v22 + 344);
          *(_OWORD *)(v21 + 328) = *(_OWORD *)(v22 + 328);
          *(_OWORD *)(v21 + 344) = v51;
          long long v52 = *((_OWORD *)v22 + 28);
          *((_OWORD *)v21 + 27) = *((_OWORD *)v22 + 27);
          *((_OWORD *)v21 + 28) = v52;
          v21[464] = v22[464];
          long long v53 = *((_OWORD *)v22 + 26);
          *((_OWORD *)v21 + 25) = *((_OWORD *)v22 + 25);
          *((_OWORD *)v21 + 26) = v53;
          *(_OWORD *)(v21 + 472) = *(_OWORD *)(v22 + 472);
          *(_OWORD *)(v21 + 481) = *(_OWORD *)(v22 + 481);
          uint64_t v54 = *((void *)v22 + 63);
          if (v54)
          {
            uint64_t v55 = *((void *)v22 + 64);
            *((void *)v21 + 63) = v54;
            *((void *)v21 + 64) = v55;
          }
          else
          {
            *(_OWORD *)(v21 + 504) = *(_OWORD *)(v22 + 504);
          }
          *((_WORD *)v21 + 260) = *((_WORD *)v22 + 260);
          *((_OWORD *)v21 + 33) = *((_OWORD *)v22 + 33);
          *((void *)v21 + 68) = *((void *)v22 + 68);
          *((void *)v21 + 71) = *((void *)v22 + 71);
          *(_OWORD *)(v21 + 552) = *(_OWORD *)(v22 + 552);
          *((void *)v21 + 72) = *((void *)v22 + 72);
          *(_OWORD *)(v21 + 584) = *(_OWORD *)(v22 + 584);
          *(_OWORD *)(v21 + 600) = *(_OWORD *)(v22 + 600);
          *((void *)v21 + 77) = *((void *)v22 + 77);
          *((void *)v21 + 78) = *((void *)v22 + 78);
          v21[632] = v22[632];
          *(_WORD *)(v21 + 633) = *(_WORD *)(v22 + 633);
          int v73 = (int *)type metadata accessor for PlatformItemList.Item();
          uint64_t v74 = v73[28];
          __dsta = &v21[v74];
          id v75 = &v22[v74];
          uint64_t v76 = type metadata accessor for CommandOperation();
          uint64_t v77 = *(void *)(v76 - 8);
          if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v77 + 48))(v75, 1, v76))
          {
            _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
            memcpy(__dsta, v75, *(void *)(*(void *)(v78 - 8) + 64));
          }
          else
          {
            uint64_t v96 = v75;
            uint64_t v98 = v77;
            char *__dsta = *v75;
            uint64_t v79 = *(int *)(v76 + 20);
            long long v80 = &__dsta[v79];
            uint64_t v81 = &v75[v79];
            long long v82 = *((_OWORD *)v81 + 1);
            *(_OWORD *)long long v80 = *(_OWORD *)v81;
            *((_OWORD *)v80 + 1) = v82;
            uint64_t v83 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
            long long v94 = &v80[v83];
            int v84 = &v81[v83];
            uint64_t v85 = type metadata accessor for UUID();
            (*(void (**)(char *, char *, uint64_t))(*(void *)(v85 - 8) + 32))(v94, v84, v85);
            uint64_t v86 = *(int *)(v76 + 24);
            long long v87 = &__dsta[v86];
            long long v88 = (uint64_t *)&v96[v86];
            uint64_t v89 = *v88;
            if (*v88)
            {
              uint64_t v90 = v88[1];
              *(void *)long long v87 = v89;
              *((void *)v87 + 1) = v90;
            }
            else
            {
              *(_OWORD *)long long v87 = *(_OWORD *)v88;
            }
            (*(void (**)(char *, void, uint64_t, uint64_t))(v98 + 56))(__dsta, 0, 1, v76);
          }
          v21[v73[29]] = v22[v73[29]];
          v21[v73[30]] = v22[v73[30]];
          v21[v73[31]] = v22[v73[31]];
          v21[v73[32]] = v22[v73[32]];
          *(void *)&v21[v73[33]] = *(void *)&v22[v73[33]];
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v21, v22, *(void *)(v24 + 64));
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0, 1, v23);
      }
      goto LABEL_33;
    }
    if (!EnumCaseMultiPayload)
    {
      long long v7 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v7;
      long long v8 = *((_OWORD *)a2 + 3);
      *((_OWORD *)a1 + 2) = *((_OWORD *)a2 + 2);
      *((_OWORD *)a1 + 3) = v8;
      *((_OWORD *)a1 + 4) = *((_OWORD *)a2 + 4);
      *(_OWORD *)(a1 + 73) = *(_OWORD *)(a2 + 73);
      *(_DWORD *)(a1 + 89) = *(_DWORD *)(a2 + 89);
      *((void *)a1 + 12) = *((void *)a2 + 12);
      long long v9 = *(_OWORD *)(a2 + 104);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 104) = v9;
      long long v10 = *(_OWORD *)(a2 + 136);
      long long v11 = *(_OWORD *)(a2 + 152);
      long long v12 = *(_OWORD *)(a2 + 168);
      *((void *)a1 + 23) = *((void *)a2 + 23);
      *(_OWORD *)(a1 + 168) = v12;
      *(_OWORD *)(a1 + 152) = v11;
      *(_OWORD *)(a1 + 136) = v10;
      uint64_t v13 = (int *)type metadata accessor for ToolbarStorage.Item(0);
      uint64_t v14 = v13[12];
      uint64_t v15 = &a1[v14];
      long long v16 = &a2[v14];
      uint64_t v17 = (int *)type metadata accessor for PlatformItemList.Item();
      __dst = (void (**)(char *, void, uint64_t, int *))*((void *)v17 - 1);
      if (((unsigned int (*)(char *, uint64_t, int *))__dst[6])(v16, 1, v17))
      {
        _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for PlatformItemList.Item?, (uint64_t (*)(uint64_t))type metadata accessor for PlatformItemList.Item, MEMORY[0x1E4FBB718]);
        memcpy(v15, v16, *(void *)(*(void *)(v18 - 8) + 64));
      }
      else
      {
        long long v26 = *((_OWORD *)v16 + 1);
        *(_OWORD *)uint64_t v15 = *(_OWORD *)v16;
        *((_OWORD *)v15 + 1) = v26;
        v15[32] = v16[32];
        uint64_t v27 = *((void *)v16 + 6);
        *((void *)v15 + 5) = *((void *)v16 + 5);
        *((void *)v15 + 6) = v27;
        v15[56] = v16[56];
        long long v28 = *((_OWORD *)v16 + 13);
        *((_OWORD *)v15 + 12) = *((_OWORD *)v16 + 12);
        *((_OWORD *)v15 + 13) = v28;
        *((_OWORD *)v15 + 14) = *((_OWORD *)v16 + 14);
        *(_DWORD *)(v15 + 239) = *(_DWORD *)(v16 + 239);
        long long v29 = *((_OWORD *)v16 + 9);
        *((_OWORD *)v15 + 8) = *((_OWORD *)v16 + 8);
        *((_OWORD *)v15 + 9) = v29;
        long long v30 = *((_OWORD *)v16 + 11);
        *((_OWORD *)v15 + 10) = *((_OWORD *)v16 + 10);
        *((_OWORD *)v15 + 11) = v30;
        long long v31 = *((_OWORD *)v16 + 5);
        *((_OWORD *)v15 + 4) = *((_OWORD *)v16 + 4);
        *((_OWORD *)v15 + 5) = v31;
        long long v32 = *((_OWORD *)v16 + 7);
        *((_OWORD *)v15 + 6) = *((_OWORD *)v16 + 6);
        *((_OWORD *)v15 + 7) = v32;
        *(_OWORD *)(v15 + 248) = *(_OWORD *)(v16 + 248);
        long long v33 = *(_OWORD *)(v16 + 280);
        *(_OWORD *)(v15 + 264) = *(_OWORD *)(v16 + 264);
        *(_OWORD *)(v15 + 280) = v33;
        long long v34 = *(_OWORD *)(v16 + 376);
        *(_OWORD *)(v15 + 360) = *(_OWORD *)(v16 + 360);
        *(_OWORD *)(v15 + 376) = v34;
        *((void *)v15 + 49) = *((void *)v16 + 49);
        long long v35 = *(_OWORD *)(v16 + 312);
        *(_OWORD *)(v15 + 296) = *(_OWORD *)(v16 + 296);
        *(_OWORD *)(v15 + 312) = v35;
        long long v36 = *(_OWORD *)(v16 + 344);
        *(_OWORD *)(v15 + 328) = *(_OWORD *)(v16 + 328);
        *(_OWORD *)(v15 + 344) = v36;
        long long v37 = *((_OWORD *)v16 + 28);
        *((_OWORD *)v15 + 27) = *((_OWORD *)v16 + 27);
        *((_OWORD *)v15 + 28) = v37;
        v15[464] = v16[464];
        long long v38 = *((_OWORD *)v16 + 26);
        *((_OWORD *)v15 + 25) = *((_OWORD *)v16 + 25);
        *((_OWORD *)v15 + 26) = v38;
        *(_OWORD *)(v15 + 472) = *(_OWORD *)(v16 + 472);
        *(_OWORD *)(v15 + 481) = *(_OWORD *)(v16 + 481);
        uint64_t v39 = *((void *)v16 + 63);
        if (v39)
        {
          uint64_t v40 = *((void *)v16 + 64);
          *((void *)v15 + 63) = v39;
          *((void *)v15 + 64) = v40;
        }
        else
        {
          *(_OWORD *)(v15 + 504) = *(_OWORD *)(v16 + 504);
        }
        *((_WORD *)v15 + 260) = *((_WORD *)v16 + 260);
        *((_OWORD *)v15 + 33) = *((_OWORD *)v16 + 33);
        *((void *)v15 + 68) = *((void *)v16 + 68);
        *((void *)v15 + 71) = *((void *)v16 + 71);
        *(_OWORD *)(v15 + 552) = *(_OWORD *)(v16 + 552);
        *((void *)v15 + 72) = *((void *)v16 + 72);
        *(_OWORD *)(v15 + 584) = *(_OWORD *)(v16 + 584);
        *(_OWORD *)(v15 + 600) = *(_OWORD *)(v16 + 600);
        *((void *)v15 + 77) = *((void *)v16 + 77);
        *((void *)v15 + 78) = *((void *)v16 + 78);
        v15[632] = v16[632];
        *(_WORD *)(v15 + 633) = *(_WORD *)(v16 + 633);
        uint64_t v56 = v17[28];
        uint64_t v97 = &v15[v56];
        id v57 = &v16[v56];
        uint64_t v58 = type metadata accessor for CommandOperation();
        uint64_t v59 = *(void *)(v58 - 8);
        uint64_t v95 = v57;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
        {
          _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for CommandOperation?, (uint64_t (*)(uint64_t))type metadata accessor for CommandOperation, MEMORY[0x1E4FBB718]);
          memcpy(v97, v57, *(void *)(*(void *)(v60 - 8) + 64));
        }
        else
        {
          uint64_t v93 = v59;
          *uint64_t v97 = *v57;
          uint64_t v61 = *(int *)(v58 + 20);
          long long v62 = &v97[v61];
          long long v63 = &v57[v61];
          long long v64 = *(_OWORD *)&v95[v61 + 16];
          *(_OWORD *)long long v62 = *(_OWORD *)&v95[v61];
          *((_OWORD *)v62 + 1) = v64;
          uint64_t v65 = *(int *)(type metadata accessor for CommandGroupPlacement(0) + 20);
          long long v66 = &v62[v65];
          long long v92 = &v63[v65];
          uint64_t v67 = type metadata accessor for UUID();
          (*(void (**)(char *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v66, v92, v67);
          uint64_t v68 = *(int *)(v58 + 24);
          id v69 = &v97[v68];
          id v70 = (uint64_t *)&v95[v68];
          uint64_t v71 = *v70;
          if (*v70)
          {
            uint64_t v72 = v70[1];
            *(void *)id v69 = v71;
            *((void *)v69 + 1) = v72;
          }
          else
          {
            *(_OWORD *)id v69 = *(_OWORD *)v70;
          }
          (*(void (**)(char *, void, uint64_t, uint64_t))(v93 + 56))(v97, 0, 1, v58);
        }
        v15[v17[29]] = v16[v17[29]];
        v15[v17[30]] = v16[v17[30]];
        v15[v17[31]] = v16[v17[31]];
        v15[v17[32]] = v16[v17[32]];
        *(void *)&v15[v17[33]] = *(void *)&v16[v17[33]];
        __dst[7](v15, 0, 1, v17);
      }
      swift_weakTakeInit();
      a1[v13[14]] = a2[v13[14]];
      a1[v13[15]] = a2[v13[15]];
LABEL_33:
      swift_storeEnumTagMultiPayload();
      return a1;
    }
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64));
  }
  return a1;
}

ValueMetadata *type metadata accessor for ToolbarContentKey()
{
  return &type metadata for ToolbarContentKey;
}

uint64_t ToolbarStorage.Entry.placement.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8);
  int v5 = (char *)&v22 - v4;
  uint64_t v6 = type metadata accessor for ToolbarStorage.GroupItem(0);
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  long long v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v10);
  long long v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v13 - 8);
  uint64_t v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (char *)&v22 - v17;
  outlined init with copy of ToolbarStorage.Entry(v1, (uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
  if (swift_getEnumCaseMultiPayload())
  {
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v12, type metadata accessor for ToolbarStorage.Entry.Kind);
    ToolbarStorage.Entry.groupItem.getter((uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      uint64_t result = outlined destroy of ToolbarStorage.GroupItem?((uint64_t)v5, &lazy cache variable for type metadata for ToolbarStorage.GroupItem?, type metadata accessor for ToolbarStorage.GroupItem);
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0;
      *(unsigned char *)(a1 + 40) = -1;
      return result;
    }
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v5, (uint64_t)v9, type metadata accessor for ToolbarStorage.GroupItem);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v9 + 16), a1);
    uint64_t v20 = type metadata accessor for ToolbarStorage.GroupItem;
    uint64_t v21 = (uint64_t)v9;
  }
  else
  {
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v12, (uint64_t)v15, type metadata accessor for ToolbarStorage.Item);
    _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v15, (uint64_t)v18, type metadata accessor for ToolbarStorage.Item);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)(v18 + 48), a1);
    uint64_t v20 = type metadata accessor for ToolbarStorage.Item;
    uint64_t v21 = (uint64_t)v18;
  }
  return outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v21, v20);
}

uint64_t specialized isPlacementValid #1 (_:) in ToolbarStorage.merge(_:options:)(uint64_t a1, char a2, char **a3)
{
  ToolbarStorage.Entry.placement.getter((uint64_t)&v18);
  if (v21 != 255)
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v18, (uint64_t)v22);
    if ((a2 & 1) == 0)
    {
      if ((a2 & 2) == 0)
      {
        char v5 = 1;
        if ((a2 & 4) == 0) {
          goto LABEL_31;
        }
        goto LABEL_18;
      }
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
      goto LABEL_11;
    }
    uint64_t v18 = 22;
    long long v19 = 0u;
    long long v20 = 0u;
    unsigned __int8 v21 = 2;
    char v6 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v22, (uint64_t)&v18);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    if (v6)
    {
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
      if ((a2 & 2) == 0) {
        goto LABEL_17;
      }
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    }
    else
    {
      uint64_t v14 = 21;
      long long v15 = 0u;
      long long v16 = 0u;
      char v17 = 2;
      char v7 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v14);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v14);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
      if ((a2 & 2) == 0)
      {
LABEL_13:
        char v5 = v7 ^ 1;
        if ((a2 & 4) == 0) {
          goto LABEL_31;
        }
        goto LABEL_18;
      }
      outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
      if ((v7 & 1) == 0)
      {
LABEL_11:
        uint64_t v14 = 18;
        long long v15 = 0u;
        long long v16 = 0u;
        char v17 = 2;
        char v7 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)&v18, (uint64_t)&v14);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v14);
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
        goto LABEL_13;
      }
    }
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
LABEL_17:
    char v5 = 0;
    if ((a2 & 4) == 0)
    {
LABEL_31:
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v22);
      return v5 & 1;
    }
LABEL_18:
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    if (v21)
    {
      if (v21 == 1)
      {
        outlined destroy of ToolbarItemPlacement.Role((uint64_t)&v18);
      }
      else if ((unint64_t)v20 | *((void *)&v20 + 1) | v18 | *((void *)&v19 + 1) | (unint64_t)v19)
      {
        uint64_t v8 = v20 | *((void *)&v20 + 1) | *((void *)&v19 + 1) | v19;
        if (((unint64_t)(v18 - 1) > 0xF || v8) && (unint64_t)(v18 - 17) <= 1 && !v8) {
          goto LABEL_31;
        }
      }
    }
    outlined init with copy of ToolbarItemPlacement.Role((uint64_t)v22, (uint64_t)&v18);
    swift_beginAccess();
    long long v9 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *a3 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *((void *)v9 + 2) + 1, 1, v9);
      *a3 = v9;
    }
    unint64_t v12 = *((void *)v9 + 2);
    unint64_t v11 = *((void *)v9 + 3);
    if (v12 >= v11 >> 1)
    {
      long long v9 = specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v11 > 1), v12 + 1, 1, v9);
      *a3 = v9;
    }
    *((void *)v9 + 2) = v12 + 1;
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)&v18, (uint64_t)&v9[48 * v12 + 32]);
    goto LABEL_31;
  }
  outlined destroy of ToolbarItemPlacement.Role?((uint64_t)&v18, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
  char v5 = 0;
  return v5 & 1;
}

uint64_t closure #1 in ToolbarStorage.merge(_:options:)(uint64_t a1, uint64_t a2)
{
  ToolbarStorage.Entry.placement.getter((uint64_t)v15);
  outlined init with copy of ToolbarItemPlacement.Role(a2, (uint64_t)v14);
  uint64_t v3 = MEMORY[0x1E4FBB718];
  outlined init with copy of ToolbarItemPlacement.Role?((uint64_t)v15, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  outlined init with copy of ToolbarItemPlacement.Role?((uint64_t)v14, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v3, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  if (v11[40] == 255)
  {
    char v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v6);
    if (v13 == 255)
    {
      outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
      char v4 = 1;
      return v4 & 1;
    }
LABEL_7:
    outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v11, (uint64_t (*)(void))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
    char v4 = 0;
    return v4 & 1;
  }
  outlined init with copy of ToolbarItemPlacement.Role?((uint64_t)v11, (uint64_t)v10, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  if (v13 == 255)
  {
    char v7 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v7);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
    goto LABEL_7;
  }
  outlined init with take of ToolbarItemPlacement.Role((uint64_t)v12, (uint64_t)v9);
  char v4 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v10, (uint64_t)v9);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v9);
  char v5 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
  outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v14, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
  outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v5);
  outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
  outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v11, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v5);
  return v4 & 1;
}

unint64_t ToolbarStorage.Entry.description.getter()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ToolbarStorage.GroupItem(0);
  MEMORY[0x1F4188790](v2 - 8);
  char v4 = (unint64_t *)((char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v5 = type metadata accessor for ToolbarStorage.Item(0);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for ToolbarStorage.Entry.Kind(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarStorage.Entry(v1, (uint64_t)v10, type metadata accessor for ToolbarStorage.Entry.Kind);
  unint64_t v11 = 0x2D69757466697773;
  switch(swift_getEnumCaseMultiPayload())
  {
    case 1u:
      _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v10, (uint64_t)v4, type metadata accessor for ToolbarStorage.GroupItem);
      if (v4[1]) {
        unint64_t v11 = *v4;
      }
      else {
        unint64_t v11 = 0x20676E697373696DLL;
      }
      swift_bridgeObjectRetain();
      unint64_t v12 = type metadata accessor for ToolbarStorage.GroupItem;
      uint64_t v13 = (uint64_t)v4;
      goto LABEL_11;
    case 2u:
      return v11;
    case 3u:
      unint64_t v11 = 0xD000000000000010;
      break;
    default:
      _s7SwiftUI14ToolbarStorageV5EntryVWObTm_0((uint64_t)v10, (uint64_t)v7, type metadata accessor for ToolbarStorage.Item);
      if (*((void *)v7 + 5)) {
        unint64_t v11 = *((void *)v7 + 4);
      }
      else {
        unint64_t v11 = 0x20676E697373696DLL;
      }
      swift_bridgeObjectRetain();
      unint64_t v12 = type metadata accessor for ToolbarStorage.Item;
      uint64_t v13 = (uint64_t)v7;
LABEL_11:
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v13, v12);
      break;
  }
  return v11;
}

uint64_t protocol witness for CustomStringConvertible.description.getter in conformance ToolbarStorage.Entry.Kind()
{
  MEMORY[0x1F4188790](v0);
  uint64_t v2 = (char *)&v6 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  outlined init with copy of ToolbarStorage.Entry(v3, (uint64_t)v2, type metadata accessor for ToolbarStorage.Entry.Kind);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  uint64_t result = 0x686372616573;
  switch(EnumCaseMultiPayload)
  {
    case 1:
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v2, type metadata accessor for ToolbarStorage.Entry.Kind);
      uint64_t result = 0x70756F7267;
      break;
    case 2:
      return result;
    case 3:
      uint64_t result = 0x746E656D75636F64;
      break;
    default:
      outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v2, type metadata accessor for ToolbarStorage.Entry.Kind);
      uint64_t result = 1835365481;
      break;
  }
  return result;
}

Swift::Int ToolbarStorage.Entry.ID.hashValue.getter()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  outlined init with copy of ToolbarItemPlacement.Role?(v0 + 40, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  if (v3[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v3, (uint64_t)v2);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v2);
  }
  return Hasher._finalize()();
}

void protocol witness for Hashable.hash(into:) in conformance ToolbarStorage.Entry.ID()
{
  AnyHashable.hash(into:)();
  outlined init with copy of ToolbarItemPlacement.Role?(v0 + 40, (uint64_t)v2, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  if (v2[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v2, (uint64_t)v1);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v1);
  }
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarStorage.Entry.ID()
{
  Hasher.init(_seed:)();
  AnyHashable.hash(into:)();
  outlined init with copy of ToolbarItemPlacement.Role?(v0 + 40, (uint64_t)v3, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  if (v3[40] == 255)
  {
    Hasher._combine(_:)(0);
  }
  else
  {
    outlined init with take of ToolbarItemPlacement.Role((uint64_t)v3, (uint64_t)v2);
    Hasher._combine(_:)(1u);
    ToolbarItemPlacement.Role.hash(into:)();
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v2);
  }
  return Hasher._finalize()();
}

Swift::Int ToolbarStorage.ID.hashValue.getter()
{
  Swift::UInt v1 = v0[2];
  Swift::UInt v2 = v0[3];
  uint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

Swift::Int protocol witness for Hashable._rawHashValue(seed:) in conformance ToolbarStorage.ID()
{
  Swift::UInt v1 = v0[2];
  Swift::UInt v2 = v0[3];
  uint64_t v3 = v0[5];
  Hasher.init(_seed:)();
  _ViewList_ID.hash(into:)();
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  if (v3)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain();
    String.hash(into:)();
    swift_bridgeObjectRelease();
  }
  else
  {
    Hasher._combine(_:)(0);
  }
  return Hasher._finalize()();
}

uint64_t protocol witness for static PreferenceKey.reduce(value:nextValue:) in conformance SearchContentKey(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = MEMORY[0x1E4FBB718];
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v5 - 8);
  char v7 = (char *)&v11 - v6;
  outlined init with copy of ToolbarItemPlacement.Role?(a1, (uint64_t)&v11 - v6, (uint64_t)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, (uint64_t)type metadata accessor for ToolbarStorage.SearchItem, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))_s7SwiftUI16CommandOperationVSgMaTm_2);
  uint64_t v8 = type metadata accessor for ToolbarStorage.SearchItem(0);
  LODWORD(v4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48))(v7, 1, v8);
  uint64_t result = outlined destroy of ToolbarStorage.GroupItem?((uint64_t)v7, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem);
  if (v4 == 1)
  {
    uint64_t v10 = outlined destroy of ToolbarStorage.GroupItem?(a1, (unint64_t *)&lazy cache variable for type metadata for ToolbarStorage.SearchItem?, type metadata accessor for ToolbarStorage.SearchItem);
    return a2(v10);
  }
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(id *), uint64_t a2)
{
  uint64_t v4 = (uint64_t *)v2;
  unint64_t v7 = *v2;
  swift_bridgeObjectRetain();
  unint64_t v8 = specialized Collection.firstIndex(where:)(a1, a2, v7);
  char v10 = v9;
  swift_bridgeObjectRelease();
  if (v3) {
    return v8;
  }
  if ((v10 & 1) == 0)
  {
    unint64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1)) {
      goto LABEL_54;
    }
    if ((unint64_t)*v4 >> 62)
    {
LABEL_55:
      swift_bridgeObjectRetain();
      uint64_t v30 = _CocoaArrayWrapper.endIndex.getter();
      swift_bridgeObjectRelease();
      if (v11 != v30) {
        goto LABEL_6;
      }
    }
    else if (v11 != *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_6:
      unint64_t v11 = v8 + 5;
      uint64_t v32 = a2;
      while (1)
      {
        unint64_t v12 = v11 - 4;
        uint64_t v13 = *v4;
        if ((*v4 & 0xC000000000000001) != 0)
        {
          id v14 = (id)MEMORY[0x18C117680](v11 - 4);
        }
        else
        {
          if ((v12 & 0x8000000000000000) != 0)
          {
            __break(1u);
LABEL_45:
            __break(1u);
LABEL_46:
            __break(1u);
LABEL_47:
            __break(1u);
LABEL_48:
            __break(1u);
LABEL_49:
            __break(1u);
LABEL_50:
            __break(1u);
LABEL_51:
            __break(1u);
LABEL_52:
            __break(1u);
LABEL_53:
            __break(1u);
LABEL_54:
            __break(1u);
            goto LABEL_55;
          }
          if (v12 >= *(void *)((v13 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_45;
          }
          id v14 = *(id *)(v13 + 8 * v11);
        }
        uint64_t v15 = v14;
        id v33 = v14;
        char v16 = a1(&v33);

        if ((v16 & 1) == 0) {
          break;
        }
LABEL_32:
        unint64_t v27 = v11 - 3;
        if (__OFADD__(v12, 1)) {
          goto LABEL_46;
        }
        if ((unint64_t)*v4 >> 62)
        {
          swift_bridgeObjectRetain();
          uint64_t v28 = _CocoaArrayWrapper.endIndex.getter();
          swift_bridgeObjectRelease();
        }
        else
        {
          uint64_t v28 = *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
        }
        ++v11;
        if (v27 == v28) {
          return v8;
        }
      }
      if (v12 == v8)
      {
LABEL_31:
        if (__OFADD__(v8++, 1)) {
          goto LABEL_47;
        }
        goto LABEL_32;
      }
      uint64_t v17 = *v4;
      if ((*v4 & 0xC000000000000001) != 0)
      {
        id v18 = (id)MEMORY[0x18C117680](v8, *v4);
        uint64_t v17 = *v4;
        if ((*v4 & 0xC000000000000001) == 0)
        {
LABEL_17:
          if ((v12 & 0x8000000000000000) != 0) {
            goto LABEL_50;
          }
          if (v12 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
            goto LABEL_51;
          }
          id v19 = *(id *)(v17 + 8 * v11);
          goto LABEL_20;
        }
      }
      else
      {
        if ((v8 & 0x8000000000000000) != 0) {
          goto LABEL_48;
        }
        if (v8 >= *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
          goto LABEL_49;
        }
        id v18 = *(id *)(v17 + 8 * v8 + 32);
        if ((v17 & 0xC000000000000001) == 0) {
          goto LABEL_17;
        }
      }
      id v19 = (id)MEMORY[0x18C117680](v11 - 4, v17);
      uint64_t v17 = *v4;
LABEL_20:
      int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v4 = v17;
      if (!isUniquelyReferenced_nonNull_bridgeObject || v17 < 0 || (v17 & 0x4000000000000000) != 0)
      {
        uint64_t v17 = specialized _ArrayBuffer._consumeAndCreateNew()(v17);
        *uint64_t v4 = v17;
      }
      unsigned __int8 v21 = *(void **)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20);
      *(void *)((v17 & 0xFFFFFFFFFFFFFF8) + 8 * v8 + 0x20) = v19;

      specialized Array._endMutation()();
      uint64_t v22 = *v4;
      int v23 = swift_isUniquelyReferenced_nonNull_bridgeObject();
      *uint64_t v4 = v22;
      if (!v23 || v22 < 0 || (v22 & 0x4000000000000000) != 0)
      {
        uint64_t v22 = specialized _ArrayBuffer._consumeAndCreateNew()(v22);
        *uint64_t v4 = v22;
      }
      a2 = v32;
      if ((v12 & 0x8000000000000000) != 0) {
        goto LABEL_52;
      }
      uint64_t v24 = v22 & 0xFFFFFFFFFFFFFF8;
      if (v12 >= *(void *)((v22 & 0xFFFFFFFFFFFFFF8) + 0x10)) {
        goto LABEL_53;
      }
      uint64_t v25 = *(void **)(v24 + 8 * v11);
      *(void *)(v24 + 8 * v11) = v18;

      specialized Array._endMutation()();
      goto LABEL_31;
    }
    return v8;
  }
  if (!((unint64_t)*v4 >> 62)) {
    return *(void *)((*v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  swift_bridgeObjectRetain();
  uint64_t v31 = _CocoaArrayWrapper.endIndex.getter();
  swift_bridgeObjectRelease();
  return v31;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  if (!v4) {
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v6 = 0;
  for (uint64_t i = 6; ; i += 2)
  {
    char v8 = a1(v3 + i * 8 - 16);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v6;
    }
    if (v8) {
      break;
    }
    if (v4 == ++v6)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v3 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v6, 1))
  {
    unint64_t v10 = *(void *)(v3 + 16);
    if (v6 + 1 == v10) {
      return v6;
    }
    for (unint64_t j = v6 + 1; j < v10; ++j)
    {
      outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value(v3 + i * 8, (uint64_t)v18);
      char v12 = a1((uint64_t)v18);
      uint64_t result = outlined destroy of weak FallbackResponderProvider?((uint64_t)v18);
      if ((v12 & 1) == 0)
      {
        if (j != v6)
        {
          if ((v6 & 0x8000000000000000) != 0) {
            goto LABEL_31;
          }
          uint64_t v13 = (void *)*v1;
          unint64_t v14 = *(void *)(*v1 + 16);
          if (v6 >= v14) {
            goto LABEL_32;
          }
          uint64_t result = outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value((uint64_t)&v13[2 * v6 + 4], (uint64_t)v18);
          if (j >= v14) {
            goto LABEL_33;
          }
          outlined init with copy of EnvironmentValues.SafeAreaTransitionStateKey.Value((uint64_t)&v13[i], (uint64_t)v17);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          *Swift::UInt v1 = (uint64_t)v13;
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew()(v13);
            uint64_t v13 = (void *)result;
            *Swift::UInt v1 = result;
          }
          if (v6 >= v13[2]) {
            goto LABEL_34;
          }
          uint64_t result = outlined assign with take of UIHostingKeyboardTrackingElement.Element((uint64_t)v17, (uint64_t)&v13[2 * v6 + 4]);
          if (j >= *(void *)(*v1 + 16)) {
            goto LABEL_35;
          }
          uint64_t result = outlined assign with take of UIHostingKeyboardTrackingElement.Element((uint64_t)v18, *v1 + i * 8);
        }
        if (__OFADD__(v6++, 1)) {
          goto LABEL_30;
        }
      }
      unint64_t v16 = j + 1;
      if (__OFADD__(j, 1)) {
        goto LABEL_29;
      }
      uint64_t v3 = *v1;
      unint64_t v10 = *(void *)(*v1 + 16);
      i += 2;
      if (v16 == v10) {
        return v6;
      }
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized MutableCollection._halfStablePartition(isSuffixElement:)(uint64_t (*a1)(unint64_t))
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for ToolbarStorage.Entry(0) - 8;
  MEMORY[0x1F4188790](v5);
  uint64_t v34 = (uint64_t)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v7);
  uint64_t v33 = (uint64_t)&v30 - v8;
  MEMORY[0x1F4188790](v9);
  uint64_t v35 = (uint64_t)&v30 - v11;
  uint64_t v12 = *v1;
  uint64_t v13 = *(void *)(*v1 + 16);
  if (!v13) {
    return 0;
  }
  unint64_t v14 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v15 = *(void *)(v10 + 72);
  swift_bridgeObjectRetain();
  unint64_t v16 = 0;
  unint64_t v31 = v14;
  while (1)
  {
    char v17 = a1(v12 + v14);
    if (v2)
    {
      swift_bridgeObjectRelease();
      return v16;
    }
    if (v17) {
      break;
    }
    ++v16;
    v14 += v15;
    if (v13 == v16)
    {
      swift_bridgeObjectRelease();
      return *(void *)(v12 + 16);
    }
  }
  uint64_t result = swift_bridgeObjectRelease();
  if (!__OFADD__(v16, 1))
  {
    unint64_t v19 = *(void *)(v12 + 16);
    if (v16 + 1 == v19) {
      return v16;
    }
    uint64_t v20 = v15 + v14;
    unint64_t v21 = v16 + 1;
    uint64_t v30 = v1;
    uint64_t v32 = v15;
    while (v21 < v19)
    {
      uint64_t v22 = v3;
      uint64_t v36 = v20;
      uint64_t v23 = v35;
      outlined init with copy of ToolbarStorage.Entry(v12 + v20, v35, type metadata accessor for ToolbarStorage.Entry);
      char v24 = a1(v23);
      uint64_t result = outlined destroy of ToolbarStorage.GroupItem.CollapsedContent(v23, type metadata accessor for ToolbarStorage.Entry);
      if (v24)
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
      }
      else
      {
        uint64_t v3 = v22;
        uint64_t v25 = v32;
        if (v21 != v16)
        {
          if ((v16 & 0x8000000000000000) != 0) {
            goto LABEL_32;
          }
          long long v26 = (void *)*v3;
          unint64_t v27 = *(void *)(*v3 + 16);
          if (v16 >= v27) {
            goto LABEL_33;
          }
          uint64_t result = outlined init with copy of ToolbarStorage.Entry((uint64_t)v26 + v31 + v16 * v32, v33, type metadata accessor for ToolbarStorage.Entry);
          if (v21 >= v27) {
            goto LABEL_34;
          }
          outlined init with copy of ToolbarStorage.Entry((uint64_t)v26 + v36, v34, type metadata accessor for ToolbarStorage.Entry);
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v3 = v30;
          *uint64_t v30 = (uint64_t)v26;
          if ((result & 1) == 0)
          {
            uint64_t result = specialized _ArrayBuffer._consumeAndCreateNew()(v26);
            long long v26 = (void *)result;
            *uint64_t v3 = result;
          }
          if (v16 >= v26[2]) {
            goto LABEL_35;
          }
          uint64_t result = outlined assign with take of ToolbarStorage.Entry(v34, (uint64_t)v26 + v31 + v16 * v25);
          if (v21 >= *(void *)(*v3 + 16)) {
            goto LABEL_36;
          }
          uint64_t result = outlined assign with take of ToolbarStorage.Entry(v33, *v3 + v36);
        }
        if (__OFADD__(v16++, 1)) {
          goto LABEL_31;
        }
      }
      unint64_t v29 = v21 + 1;
      if (__OFADD__(v21, 1)) {
        goto LABEL_30;
      }
      uint64_t v12 = *v3;
      unint64_t v19 = *(void *)(*v3 + 16);
      ++v21;
      uint64_t v20 = v36 + v25;
      if (v29 == v19) {
        return v16;
      }
    }
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
LABEL_35:
    __break(1u);
LABEL_36:
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t specialized static ToolbarStorage.ID.== infix(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v5 = a1[5];
  uint64_t v6 = a2[2];
  uint64_t v8 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v9 = a2[5];
  char v10 = static _ViewList_ID.== infix(_:_:)();
  uint64_t result = 0;
  if ((v10 & 1) != 0 && v2 == v6 && v4 == v8)
  {
    if (v5)
    {
      if (v9 && (v3 == v7 && v5 == v9 || (_stringCompareWithSmolCheck(_:_:expecting:)() & 1) != 0)) {
        return 1;
      }
    }
    else if (!v9)
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL specialized static ToolbarStorage.Entry.ID.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  if ((MEMORY[0x18C1174E0]() & 1) == 0) {
    return 0;
  }
  uint64_t v4 = MEMORY[0x1E4FBB718];
  outlined init with copy of ToolbarItemPlacement.Role?(a1 + 40, (uint64_t)v16, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  outlined init with copy of ToolbarItemPlacement.Role?(a2 + 40, (uint64_t)v15, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  outlined init with copy of ToolbarItemPlacement.Role?((uint64_t)v16, (uint64_t)v12, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  outlined init with copy of ToolbarItemPlacement.Role?((uint64_t)v15, (uint64_t)v13, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v4, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
  if (v12[40] == 255)
  {
    uint64_t v7 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v16, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v7);
    if (v14 == 255)
    {
      outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
      return 1;
    }
  }
  else
  {
    outlined init with copy of ToolbarItemPlacement.Role?((uint64_t)v12, (uint64_t)v11, (uint64_t)&lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))type metadata accessor for Binding<Int>);
    if (v14 != 255)
    {
      outlined init with take of ToolbarItemPlacement.Role((uint64_t)v13, (uint64_t)v10);
      char v5 = specialized static ToolbarItemPlacement.Role.== infix(_:_:)((uint64_t)v11, (uint64_t)v10);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v10);
      uint64_t v6 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
      outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
      outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v16, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v6);
      outlined destroy of ToolbarItemPlacement.Role((uint64_t)v11);
      outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v12, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v6);
      return (v5 & 1) != 0;
    }
    uint64_t v9 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBB718];
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v15, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, MEMORY[0x1E4FBB718]);
    outlined destroy of ToolbarItemPlacement.Role?((uint64_t)v16, &lazy cache variable for type metadata for ToolbarItemPlacement.Role?, (uint64_t)&type metadata for ToolbarItemPlacement.Role, v9);
    outlined destroy of ToolbarItemPlacement.Role((uint64_t)v11);
  }
  outlined destroy of ToolbarStorage.GroupItem.CollapsedContent((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for (ToolbarItemPlacement.Role?, ToolbarItemPlacement.Role?));
  return 0;
}

uint64_t partial apply for closure #1 in ToolbarStorage.merge(_:options:)(uint64_t a1)
{
  return closure #1 in ToolbarStorage.merge(_:options:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t outlined destroy of ToolbarStorage.GroupItem?(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  _s7SwiftUI16CommandOperationVSgMaTm_2(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t outlined assign with take of UIHostingKeyboardTrackingElement.Element(uint64_t a1, uint64_t a2)
{
  return a2;
}

ValueMetadata *type metadata accessor for SearchContentKey()
{
  return &type metadata for SearchContentKey;
}

uint64_t assignWithCopy for ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  uint64_t v4 = (long long *)(a1 + 40);
  char v5 = (long long *)(a2 + 40);
  int v6 = *(unsigned __int8 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 80) == 255)
  {
    if (v6 != 1) {
      goto LABEL_8;
    }
    goto LABEL_5;
  }
  if (v6 != 255)
  {
    if (a1 == a2) {
      return a1;
    }
    outlined destroy of ToolbarItemPlacement.Role(a1 + 40);
    if (*(unsigned char *)(a2 + 80) != 1)
    {
LABEL_8:
      long long v10 = *v5;
      long long v11 = *(_OWORD *)(a2 + 56);
      *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
      *uint64_t v4 = v10;
      *(_OWORD *)(a1 + 56) = v11;
      return a1;
    }
LABEL_5:
    uint64_t v9 = *(void *)(a2 + 64);
    *(void *)(a1 + 64) = v9;
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 40, a2 + 40);
    *(unsigned char *)(a1 + 80) = 1;
    return a1;
  }
  outlined destroy of ToolbarItemPlacement.Role(a1 + 40);
  long long v7 = *(_OWORD *)(a2 + 65);
  long long v8 = *(_OWORD *)(a2 + 56);
  *uint64_t v4 = *v5;
  *(_OWORD *)(a1 + 56) = v8;
  *(_OWORD *)(a1 + 65) = v7;
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.Entry.ID(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  if (*(unsigned __int8 *)(a1 + 80) == 255) {
    goto LABEL_7;
  }
  if (*(unsigned __int8 *)(a2 + 80) == 255 || a1 != a2)
  {
    outlined destroy of ToolbarItemPlacement.Role(a1 + 40);
LABEL_7:
    long long v6 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 56) = v6;
    *(_OWORD *)(a1 + 65) = *(_OWORD *)(a2 + 65);
  }
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.Entry.ID(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.Entry.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 80) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 81) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarStorage.Entry.ID()
{
  return &type metadata for ToolbarStorage.Entry.ID;
}

uint64_t assignWithCopy for ToolbarStorage.ID(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for ToolbarStorage.ID(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for ToolbarStorage.ID(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ToolbarStorage.ID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ToolbarStorage.ID()
{
  return &type metadata for ToolbarStorage.ID;
}

uint64_t assignWithTake for SectionStyleConfiguration(uint64_t a1, uint64_t a2)
{
  if (!*(void *)(a1 + 8)) {
    goto LABEL_5;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (!v4)
  {
    outlined destroy of Binding<Bool>(a1);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = v4;
  swift_release();
LABEL_6:
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for SectionStyleConfiguration(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for SectionStyleConfiguration(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 17) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

uint64_t getEnumTagSinglePayload for SectionStyleModifier(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for SectionStyleModifier(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187DDBBCCLL);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t View.sectionStyle<A, B>(_:in:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  uint64_t v39 = a6;
  uint64_t v35 = a2;
  uint64_t v36 = a7;
  uint64_t v37 = a8;
  uint64_t v38 = a3;
  uint64_t v10 = *(void *)(a5 - 8);
  uint64_t v33 = a1;
  uint64_t v34 = v10;
  MEMORY[0x1F4188790](a1);
  uint64_t v32 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v14);
  unint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = type metadata accessor for SectionStyleModifier();
  uint64_t v18 = *(void *)(v17 - 8);
  MEMORY[0x1F4188790](v17);
  uint64_t v20 = (char *)&v31 - v19;
  uint64_t v21 = type metadata accessor for StyleContextAcceptsPredicate();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v42 = v21;
  uint64_t v43 = v17;
  uint64_t v44 = MEMORY[0x1E4F3F740];
  uint64_t v45 = WitnessTable;
  uint64_t v23 = type metadata accessor for StaticIf();
  uint64_t v24 = *(void *)(v23 - 8);
  double v25 = MEMORY[0x1F4188790](v23);
  unint64_t v27 = (char *)&v31 - v26;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v13 + 16))(v16, v33, a4, v25);
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v20, v16, a4);
  uint64_t v28 = v34;
  unint64_t v29 = v32;
  (*(void (**)(char *, uint64_t, uint64_t))(v34 + 16))(v32, v35, a5);
  uint64_t v41 = a5;
  uint64_t v42 = (uint64_t)v29;
  uint64_t v40 = v36;
  ViewModifier.requiring<A>(_:)();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v29, a5);
  MEMORY[0x18C113660](v27, v38, v23, v39);
  return (*(uint64_t (**)(char *, uint64_t))(v24 + 8))(v27, v23);
}

uint64_t View.sectionStyle<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 - 8);
  MEMORY[0x1F4188790](a1);
  uint64_t v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v11 = type metadata accessor for SectionStyleModifier();
  uint64_t v12 = *(void *)(v11 - 8);
  double v13 = MEMORY[0x1F4188790](v11);
  uint64_t v15 = (char *)&v17 - v14;
  (*(void (**)(char *, uint64_t, uint64_t, double))(v8 + 16))(v10, a1, a3, v13);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v15, v10, a3);
  MEMORY[0x18C113660](v15, a2, v11, a4);
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v15, v11);
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.Header()
{
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.Footer()
{
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.Actions()
{
}

void protocol witness for View.body.getter in conformance SectionStyleConfiguration.RawContent()
{
}

uint64_t protocol witness for static View._makeView(view:inputs:) in conformance ResolvedSectionStyle(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = lazy protocol witness table accessor for type ResolvedSectionStyle and conformance ResolvedSectionStyle();

  return MEMORY[0x1F40FDF90](a1, a2, a3, v6);
}

uint64_t protocol witness for static ViewModifier._makeView(modifier:inputs:body:) in conformance SectionStyleModifier<A>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FDF88](a1, a2, a3, a4, a5, WitnessTable);
}

uint64_t sub_187DDC264()
{
  return swift_getWitnessTable();
}

uint64_t static Group<A>._makeScene(scene:inputs:)(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  int v8 = *((_DWORD *)a2 + 2);
  uint64_t v9 = a2[2];
  int v10 = *((_DWORD *)a2 + 14);
  LODWORD(v15) = *a1;
  type metadata accessor for Group();
  type metadata accessor for _GraphValue();
  long long v14 = *(_OWORD *)(a2 + 5);
  uint64_t v11 = a2[3];
  uint64_t v12 = a2[4];
  _GraphValue.subscript.getter();
  uint64_t v15 = v7;
  int v16 = v8;
  uint64_t v17 = v9;
  uint64_t v18 = v11;
  uint64_t v19 = v12;
  long long v20 = v14;
  int v21 = v10;
  return (*(uint64_t (**)(unsigned char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(v22, &v15, a3, a4);
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance <A> Group<A>(_DWORD *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  return static Group<A>._makeScene(scene:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a4 - 8));
}

uint64_t _TupleScene.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a1 + 16) - 8) + 16))(a2, v2);
}

uint64_t _TupleScene.value.setter(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 40))(v2, a1);
}

uint64_t (*_TupleScene.value.modify())(void, void, void, void)
{
  return destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation;
}

void _TupleScene.body.getter()
{
}

uint64_t _TupleScene.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a2 - 8) + 32))(a3, a1, a2);
}

uint64_t static _TupleScene._makeScene(scene:inputs:)@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  int v4 = *a1;
  uint64_t v5 = *a2;
  int v6 = *((_DWORD *)a2 + 2);
  uint64_t v7 = a2[2];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  int v10 = *((_DWORD *)a2 + 14);
  lazy protocol witness table accessor for type SceneDescriptor and conformance SceneDescriptor();
  static TupleDescriptor.tupleDescription(_:)();
  uint64_t v11 = v35[0];
  LODWORD(v35[0]) = v4;
  v35[1] = v5;
  int v36 = v6;
  uint64_t v37 = v7;
  long long v38 = *(_OWORD *)(a2 + 3);
  uint64_t v39 = v8;
  uint64_t v40 = v9;
  int v41 = v10;
  uint64_t v12 = v11;
  uint64_t v42 = 0;
  uint64_t v43 = MEMORY[0x1E4FBC860];
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    long long v14 = (long long *)(v12 + 40);
    do
    {
      long long v15 = *v14;
      long long v14 = (long long *)((char *)v14 + 24);
      uint64_t v42 = AGTupleElementOffset();
      long long v34 = v15;
      uint64_t List = type metadata accessor for _TupleScene.MakeList();
      TypeConformance<>.visitType<A>(visitor:)((uint64_t)v35, List, (uint64_t)&protocol witness table for _TupleScene<A>.MakeList);
      --v13;
    }
    while (v13);
    swift_bridgeObjectRelease();
    uint64_t v17 = v43;
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v17 = MEMORY[0x1E4FBC860];
  }
  int64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    *(void *)&long long v34 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v18, 0);
    uint64_t v19 = v34;
    long long v20 = (_DWORD *)(v17 + 40);
    do
    {
      uint64_t v21 = *((void *)v20 - 1);
      int v22 = *v20;
      *(void *)&long long v34 = v19;
      unint64_t v24 = *(void *)(v19 + 16);
      unint64_t v23 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      if (v24 >= v23 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v23 > 1), v24 + 1, 1);
        uint64_t v19 = v34;
      }
      *(void *)(v19 + 16) = v24 + 1;
      uint64_t v25 = v19 + 16 * v24;
      *(void *)(v25 + 32) = v21;
      *(_DWORD *)(v25 + 40) = v22;
      v20 += 4;
      --v18;
    }
    while (v18);
    swift_bridgeObjectRelease();
  }
  PreferencesOutputs.init()();
  uint64_t v32 = v34;
  int v33 = DWORD2(v34);
  uint64_t v31 = 0;
  swift_bridgeObjectRetain();
  if (PreferenceKeys.endIndex.getter())
  {
    lazy protocol witness table accessor for type PreferenceKeys and conformance PreferenceKeys();
    do
    {
      uint64_t v26 = (void (*)(long long *, void))protocol witness for Collection.subscript.read in conformance PreferenceKeys();
      v26(&v34, 0);
      uint64_t v27 = v31;
      *(void *)&long long v34 = v9;
      swift_bridgeObjectRetain();
      uint64_t v28 = PreferenceKeys.endIndex.getter();
      if (v31 < 0 || v31 >= v28) {
        __break(1u);
      }
      ++v31;
      swift_bridgeObjectRelease();
      static PreferenceKey.visitKey<A>(_:)();
    }
    while (v27 + 1 != PreferenceKeys.endIndex.getter());
  }
  swift_bridgeObjectRelease();
  *(void *)a3 = v32;
  *(_DWORD *)(a3 + 8) = v33;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t _TupleScene.MakeList.visit<A>(type:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  LODWORD(v19) = *(_DWORD *)v4;
  type metadata accessor for _TupleScene();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  AGGraphCreateOffsetAttribute2();
  _GraphValue.init(_:)();
  int v8 = *(_DWORD *)(v4 + 16);
  uint64_t v9 = *(void *)(v4 + 24);
  int v10 = *(_DWORD *)(v4 + 64);
  uint64_t v19 = *(void *)(v4 + 8);
  int v20 = v8;
  uint64_t v21 = v9;
  long long v11 = *(_OWORD *)(v4 + 48);
  long long v22 = *(_OWORD *)(v4 + 32);
  long long v23 = v11;
  int v24 = v10;
  (*(void (**)(uint64_t *__return_ptr, char *, uint64_t *, uint64_t, uint64_t))(a4 + 32))(&v26, v25, &v19, a3, a4);
  uint64_t v12 = v26;
  int v13 = v27;
  uint64_t v14 = *(void *)(v4 + 80);
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0, *(void *)(v14 + 16) + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  unint64_t v17 = *(void *)(v14 + 16);
  unint64_t v16 = *(void *)(v14 + 24);
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1, (char *)v14);
    uint64_t v14 = result;
  }
  *(void *)(v14 + 16) = v17 + 1;
  unint64_t v18 = v14 + 16 * v17;
  *(void *)(v18 + 32) = v12;
  *(_DWORD *)(v18 + 40) = v13;
  *(void *)(v5 + 80) = v14;
  return result;
}

uint64_t protocol witness for SceneTypeVisitor.visit<A>(type:) in conformance _TupleScene<A>.MakeList(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return _TupleScene.MakeList.visit<A>(type:)(a1, a4, a2, a3);
}

void protocol witness for Scene.body.getter in conformance _TupleScene<A>()
{
}

uint64_t protocol witness for static Scene._makeScene(scene:inputs:) in conformance _TupleScene<A>@<X0>(int *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return static _TupleScene._makeScene(scene:inputs:)(a1, a2, a3);
}

void specialized _TupleScene.body.getter()
{
}

unint64_t lazy protocol witness table accessor for type SceneDescriptor and conformance SceneDescriptor()
{
  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor;
  if (!lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor);
  }
  return result;
}

{
  unint64_t result;

  unint64_t result = lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor;
  if (!lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type SceneDescriptor and conformance SceneDescriptor);
  }
  return result;
}

uint64_t type metadata accessor for _TupleScene.MakeList()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t instantiation function for generic protocol witness table for <A> Group<A>(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

{
  uint64_t result;

  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _TupleScene(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for _TupleScene(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187DDCF64);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for _TupleScene()
{
  return __swift_instantiateGenericMetadata();
}

void one-time initialization function for back()
{
  static UIPressType.back = 7;
}

id LinearUIKitProgressView.Base.SwiftUIProgressView.__deallocating_deinit()
{
  return LinearUIKitProgressView.Base.SwiftUIProgressView.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView);
}

uint64_t type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView()
{
  return self;
}

void LinearUIKitProgressView.Base.updateUIView(_:context:)(void *a1, uint64_t a2, uint64_t a3, double a4)
{
  uint64_t v7 = *(void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 24);
  int v9 = *(unsigned __int8 *)(a2 + 32);
  swift_retain();
  uint64_t v10 = Transaction.animation.getter();
  swift_release();
  if (v10) {
    swift_release();
  }
  *(float *)&double v11 = a4;
  id v12 = objc_msgSend(a1, sel_setProgress_animated_, v10 != 0, v11);
  if (a3)
  {
    if (v9)
    {
      MEMORY[0x1F4188790](v12);
      swift_retain();
      swift_retain();
      outlined copy of RepresentableContextValues.EnvironmentStorage(v7, v8, 1);
      static Update.ensure<A>(_:)();
      swift_release();
      swift_release();
      outlined consume of RepresentableContextValues.EnvironmentStorage(v7, v8, 1);
    }
    else
    {
      swift_retain();
      swift_retain();
    }
    dispatch thunk of AnyColorBox.resolve(in:)();
    swift_release();
    swift_release();
    Color.Resolved.kitColor.getter();
    self;
    int v13 = (void *)swift_dynamicCastObjCClassUnconditional();
  }
  else
  {
    int v13 = 0;
  }
  id v14 = objc_msgSend(a1, sel_progressTintColor);
  if (v14)
  {
    int v15 = v14;
    if (v13)
    {
      type metadata accessor for UIColor();
      id v16 = v13;
      id v17 = v15;
      char v18 = static NSObject.== infix(_:_:)();

      if (v18) {
        goto LABEL_17;
      }
    }
    else
    {
    }
LABEL_16:
    objc_msgSend(a1, sel_setProgressTintColor_, v13);
    id v16 = v13;
LABEL_17:

    return;
  }
  if (v13) {
    goto LABEL_16;
  }
}

id protocol witness for UIViewRepresentable.makeUIView(context:) in conformance LinearUIKitProgressView.Base()
{
  type metadata accessor for LinearUIKitProgressView.Base.SwiftUIProgressView();
  id v0 = objc_allocWithZone((Class)swift_getObjCClassFromMetadata());

  return objc_msgSend(v0, sel_initWithProgressViewStyle_, 0);
}

void protocol witness for UIViewRepresentable.updateUIView(_:context:) in conformance LinearUIKitProgressView.Base(void *a1, uint64_t a2)
{
  LinearUIKitProgressView.Base.updateUIView(_:context:)(a1, a2, *(void *)(v2 + 8), *(double *)v2);
}

uint64_t LinearUIKitProgressView.body.getter@<X0>(uint64_t a1@<X8>)
{
  _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(0, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  uint64_t v4 = v3;
  MEMORY[0x1F4188790](v3);
  uint64_t v6 = (char *)&v22 - v5;
  type metadata accessor for ClosedRange<Date>();
  MEMORY[0x1F4188790](v7 - 8);
  int v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = type metadata accessor for ProgressViewValue(0);
  MEMORY[0x1F4188790](v10);
  id v12 = (double *)((char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  uint64_t v13 = type metadata accessor for ProgressViewStyleConfiguration(0);
  MEMORY[0x1F4188790](v13 - 8);
  int v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1(v1, (uint64_t)v15, type metadata accessor for ProgressViewStyleConfiguration);
  outlined init with take of ProgressViewValue((uint64_t)v15, (uint64_t)v12, type metadata accessor for ProgressViewValue);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    char v17 = *((unsigned char *)v12 + *(int *)(v16 + 48));
    outlined init with take of ProgressViewValue((uint64_t)v12, (uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    _s7SwiftUI30ProgressViewStyleConfigurationVWOcTm_1((uint64_t)v9, (uint64_t)v6, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
    uint64_t v18 = *(void *)(v1 + *(int *)(type metadata accessor for LinearUIKitProgressView() + 20));
    v6[v4[9]] = 0;
    v6[v4[10]] = v17;
    *(void *)&v6[v4[11]] = v18;
    v6[v4[12]] = 0;
    outlined init with copy of TimelineProgressView<LinearUIKitProgressView.Base>((uint64_t)v6, a1);
    type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    swift_retain();
    outlined destroy of TimelineProgressView<LinearUIKitProgressView.Base>((uint64_t)v6);
    return _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)v9, (uint64_t (*)(void))type metadata accessor for ClosedRange<Date>);
  }
  else
  {
    if (*((unsigned char *)v12 + 8)) {
      double v20 = 0.0;
    }
    else {
      double v20 = *v12;
    }
    uint64_t v21 = *(void *)(v1 + *(int *)(type metadata accessor for LinearUIKitProgressView() + 20));
    *(double *)a1 = v20;
    *(void *)(a1 + 8) = v21;
    type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(0, &lazy cache variable for type metadata for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage, MEMORY[0x1E4F40568]);
    swift_storeEnumTagMultiPayload();
    return swift_retain();
  }
}

id @objc CircularUIKitProgressView.SwiftUIActivityIndicatorView.init(style:)(void *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  v7.receiver = a1;
  v7.super_class = (Class)type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView();
  return objc_msgSendSuper2(&v7, *a4, a3);
}

id CircularUIKitProgressView.SwiftUIActivityIndicatorView.__deallocating_deinit()
{
  return LinearUIKitProgressView.Base.SwiftUIProgressView.__deallocating_deinit((uint64_t (*)(void))type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView);
}

id LinearUIKitProgressView.Base.SwiftUIProgressView.__deallocating_deinit(uint64_t (*a1)(void))
{
  v3.receiver = v1;
  v3.super_class = (Class)a1(0);
  return objc_msgSendSuper2(&v3, sel_dealloc);
}

uint64_t assignWithTake for CircularUIKitProgressView(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  char v5 = *((unsigned char *)a2 + 8);
  uint64_t v6 = *(void *)a1;
  char v7 = *(unsigned char *)(a1 + 8);
  *(void *)a1 = v4;
  *(unsigned char *)(a1 + 8) = v5;
  outlined consume of Environment<Bool>.Content(v6, v7);
  char v8 = *((unsigned char *)a2 + 24);
  uint64_t v9 = *(void *)(a1 + 16);
  char v10 = *(unsigned char *)(a1 + 24);
  *(void *)(a1 + 16) = a2[2];
  *(unsigned char *)(a1 + 24) = v8;
  outlined consume of Environment<Bool>.Content(v9, v10);
  char v11 = *((unsigned char *)a2 + 40);
  uint64_t v12 = *(void *)(a1 + 32);
  char v13 = *(unsigned char *)(a1 + 40);
  *(void *)(a1 + 32) = a2[4];
  *(unsigned char *)(a1 + 40) = v11;
  outlined consume of Environment<Bool>.Content(v12, v13);
  *(void *)(a1 + 48) = a2[6];
  *(unsigned char *)(a1 + 56) = *((unsigned char *)a2 + 56);
  char v14 = *((unsigned char *)a2 + 72);
  uint64_t v15 = *(void *)(a1 + 64);
  char v16 = *(unsigned char *)(a1 + 72);
  *(void *)(a1 + 64) = a2[8];
  *(unsigned char *)(a1 + 72) = v14;
  outlined consume of Environment<Bool>.Content(v15, v16);
  char v17 = *((unsigned char *)a2 + 88);
  uint64_t v18 = *(void *)(a1 + 80);
  char v19 = *(unsigned char *)(a1 + 88);
  *(void *)(a1 + 80) = a2[10];
  *(unsigned char *)(a1 + 88) = v17;
  outlined consume of Environment<Bool>.Content(v18, v19);
  *(void *)(a1 + 96) = a2[12];
  *(unsigned char *)(a1 + 104) = *((unsigned char *)a2 + 104);
  char v20 = *((unsigned char *)a2 + 120);
  uint64_t v21 = *(void *)(a1 + 112);
  char v22 = *(unsigned char *)(a1 + 120);
  *(void *)(a1 + 112) = a2[14];
  *(unsigned char *)(a1 + 120) = v20;
  outlined consume of Environment<Bool>.Content(v21, v22);
  char v23 = *((unsigned char *)a2 + 136);
  uint64_t v24 = *(void *)(a1 + 128);
  char v25 = *(unsigned char *)(a1 + 136);
  *(void *)(a1 + 128) = a2[16];
  *(unsigned char *)(a1 + 136) = v23;
  outlined consume of Environment<Bool>.Content(v24, v25);
  *(void *)(a1 + 144) = a2[18];
  *(unsigned char *)(a1 + 152) = *((unsigned char *)a2 + 152);
  *(void *)(a1 + 160) = a2[20];
  swift_release();
  *(unsigned char *)(a1 + 168) = *((unsigned char *)a2 + 168);
  return a1;
}

uint64_t getEnumTagSinglePayload for CircularUIKitProgressView(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 169)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 160);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CircularUIKitProgressView(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 168) = 0;
    *(void *)uint64_t result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 169) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 169) = 0;
    }
    if (a2) {
      *(void *)(result + 160) = a2;
    }
  }
  return result;
}

void *initializeBufferWithCopyOfBuffer for LinearUIKitProgressView(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (void *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = type metadata accessor for Date();
      uint64_t v9 = *(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16);
      v9(a1, a2, v8);
      type metadata accessor for ClosedRange<Date>();
      v9((void *)((char *)a1 + *(int *)(v10 + 36)), (void *)((char *)a2 + *(int *)(v10 + 36)), v8);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      *((unsigned char *)a1 + *(int *)(v11 + 48)) = *((unsigned char *)a2 + *(int *)(v11 + 48));
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v7 - 8) + 64));
    }
    char v13 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
    uint64_t v14 = v13[5];
    uint64_t v15 = (char *)a1 + v14;
    char v16 = (char *)a2 + v14;
    *(void *)uint64_t v15 = *(void *)v16;
    v15[8] = v16[8];
    *((unsigned char *)a1 + v13[6]) = *((unsigned char *)a2 + v13[6]);
    *((unsigned char *)a1 + v13[7]) = *((unsigned char *)a2 + v13[7]);
    *((unsigned char *)a1 + v13[8]) = *((unsigned char *)a2 + v13[8]);
    *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  }
  swift_retain();
  return a1;
}

uint64_t destroy for LinearUIKitProgressView(uint64_t a1)
{
  type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v2 = type metadata accessor for Date();
    unint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8);
    v3(a1, v2);
    type metadata accessor for ClosedRange<Date>();
    v3(a1 + *(int *)(v4 + 36), v2);
  }

  return swift_release();
}

unsigned char *initializeWithCopy for LinearUIKitProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v12 = v11[5];
  char v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)char v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  return a1;
}

unsigned char *assignWithCopy for LinearUIKitProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 16);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v12 = v11[5];
  char v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  char v15 = v14[8];
  *(void *)char v13 = *(void *)v14;
  v13[8] = v15;
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_retain();
  swift_release();
  return a1;
}

unsigned char *initializeWithTake for LinearUIKitProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewValue(0);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v7 = type metadata accessor for Date();
    uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
    v8(a1, a2, v7);
    type metadata accessor for ClosedRange<Date>();
    v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
    type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
    a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
    swift_storeEnumTagMultiPayload();
  }
  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  uint64_t v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v12 = v11[5];
  char v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)char v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  return a1;
}

unsigned char *assignWithTake for LinearUIKitProgressView(unsigned char *a1, unsigned char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    _s7SwiftUI17ProgressViewValueOWOhTm_0((uint64_t)a1, type metadata accessor for ProgressViewValue);
    uint64_t v6 = type metadata accessor for ProgressViewValue(0);
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v7 = type metadata accessor for Date();
      uint64_t v8 = *(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v7 - 8) + 32);
      v8(a1, a2, v7);
      type metadata accessor for ClosedRange<Date>();
      v8(&a1[*(int *)(v9 + 36)], &a2[*(int *)(v9 + 36)], v7);
      type metadata accessor for (interval: ClosedRange<Date>, countdown: Bool)();
      a1[*(int *)(v10 + 48)] = a2[*(int *)(v10 + 48)];
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
    }
  }
  uint64_t v11 = (int *)type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v12 = v11[5];
  char v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  *(void *)char v13 = *(void *)v14;
  v13[8] = v14[8];
  a1[v11[6]] = a2[v11[6]];
  a1[v11[7]] = a2[v11[7]];
  a1[v11[8]] = a2[v11[8]];
  *(void *)&a1[*(int *)(a3 + 20)] = *(void *)&a2[*(int *)(a3 + 20)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for LinearUIKitProgressView(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DDE194);
}

uint64_t sub_187DDE194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for LinearUIKitProgressView(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DDE274);
}

uint64_t sub_187DDE274(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(0);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    return v10(a1, a2, a2, result);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
  return result;
}

uint64_t type metadata accessor for LinearUIKitProgressView()
{
  uint64_t result = type metadata singleton initialization cache for LinearUIKitProgressView;
  if (!type metadata singleton initialization cache for LinearUIKitProgressView) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t type metadata completion function for LinearUIKitProgressView()
{
  uint64_t result = type metadata accessor for ProgressViewStyleConfiguration(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t associated type witness table accessor for View.Body : View in LinearUIKitProgressView()
{
  return swift_getOpaqueTypeConformance2();
}

void *protocol witness for UIViewRepresentable.makeUIView(context:) in conformance CircularUIKitProgressView()
{
  long long v1 = v0[9];
  v16[8] = v0[8];
  *(_OWORD *)char v17 = v1;
  *(_OWORD *)&v17[9] = *(_OWORD *)((char *)v0 + 153);
  long long v2 = v0[5];
  void v16[4] = v0[4];
  v16[5] = v2;
  long long v3 = v0[7];
  v16[6] = v0[6];
  v16[7] = v3;
  long long v4 = v0[1];
  v16[0] = *v0;
  v16[1] = v4;
  long long v5 = v0[3];
  void v16[2] = v0[2];
  v16[3] = v5;
  type metadata accessor for CircularUIKitProgressView.SwiftUIActivityIndicatorView();
  id v6 = objc_msgSend(objc_allocWithZone((Class)swift_getObjCClassFromMetadata()), sel_init);
  uint64_t v7 = v6;
  if (v17[24] == 1)
  {
    id v8 = v6;
    uint64_t v9 = 16;
  }
  else
  {
    uint64_t v10 = *(void *)&v16[0];
    char v11 = BYTE8(v16[0]);
    id v12 = v6;
    outlined retain of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v16);
    outlined copy of Environment<Bool>.Content(v10, v11);
    specialized Environment.wrappedValue.getter(v10, v11, &v15);
    outlined consume of Environment<Bool>.Content(v10, v11);
    outlined release of PlatformViewRepresentableAdaptor<CircularUIKitProgressView>((uint64_t)v16);
    uint64_t v13 = 101;
    if (v15 - 3 >= 2) {
      uint64_t v13 = 100;
    }
    if (v15 >= 2u) {
      uint64_t v9 = v13;
    }
    else {
      uint64_t v9 = 3;
    }
  }
  objc_msgSend(v7, sel_setActivityIndicatorViewStyle_, v9);
  objc_msgSend(v7, sel_startAnimating);

  return v7;
}

unint64_t lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base()
{
  unint64_t result = lazy protocol witness table cache variable for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base;
  if (!lazy protocol witness table cache variable for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base);
  }
  return result;
}

uint64_t outlined init with take of ProgressViewValue(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t outlined init with copy of TimelineProgressView<LinearUIKitProgressView.Base>(uint64_t a1, uint64_t a2)
{
  _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(0, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t outlined destroy of TimelineProgressView<LinearUIKitProgressView.Base>(uint64_t a1)
{
  _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(0, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void *assignWithCopy for LinearUIKitProgressView.Base(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for LinearUIKitProgressView.Base()
{
  return &type metadata for LinearUIKitProgressView.Base;
}

unint64_t lazy protocol witness table accessor for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>()
{
  unint64_t result = lazy protocol witness table cache variable for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>;
  if (!lazy protocol witness table cache variable for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>)
  {
    type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(255, &lazy cache variable for type metadata for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>, MEMORY[0x1E4F40578]);
    lazy protocol witness table accessor for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>> and conformance <> _ConditionalContent<A, B>);
  }
  return result;
}

void type metadata accessor for _ConditionalContent<LinearUIKitProgressView.Base, TimelineProgressView<LinearUIKitProgressView.Base>>.Storage(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, uint64_t))
{
  if (!*a2)
  {
    _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(255, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t v7 = a3(a1, &type metadata for LinearUIKitProgressView.Base, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t lazy protocol witness table accessor for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>()
{
  unint64_t result = lazy protocol witness table cache variable for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>;
  if (!lazy protocol witness table cache variable for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>)
  {
    _s7SwiftUI12ScaledMetricVy12CoreGraphics7CGFloatVGMaTm_1(255, &lazy cache variable for type metadata for TimelineProgressView<LinearUIKitProgressView.Base>, (uint64_t (*)(void))lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base, (uint64_t)&type metadata for LinearUIKitProgressView.Base, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for TimelineProgressView);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type TimelineProgressView<LinearUIKitProgressView.Base> and conformance TimelineProgressView<A>);
  }
  return result;
}

unint64_t instantiation function for generic protocol witness table for LinearUIKitProgressView.Base(uint64_t a1)
{
  unint64_t result = lazy protocol witness table accessor for type LinearUIKitProgressView.Base and conformance LinearUIKitProgressView.Base();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t ListSectionInfo.firstIndexPath<A>(for:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = v5[3];
  uint64_t v11 = v5[4];
  __swift_project_boxed_opaque_existential_1(v5, v10);
  uint64_t v17 = 2;
  uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 64))(a1, &v17, a2, a3, v10, v11);
  if (v13)
  {
    uint64_t v15 = type metadata accessor for IndexPath();
    char v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56);
    return v16(a4, 1, 1, v15);
  }
  else
  {
    return ListSectionInfo.indexPath(offset:)(v12, a4);
  }
}

BOOL closure #1 in ListSectionInfo.init(list:listAttribute:contentSubgraph:)()
{
  ViewTraitCollection.value<A>(for:defaultValue:)();
  if ((v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL) {
    outlined consume of SectionIndexLabel?(v1, v2, v3);
  }
  return (v3 & 0xFFFFFFFFFFFFFFFELL) != 0x1FFFFFFFELL;
}

uint64_t ListSectionInfo.indexPath(offset:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *(void *)(v2 + 56);
  unint64_t v5 = *(void *)(v4 + 16);
  uint64_t v22 = v4 + 32;
  uint64_t result = swift_bridgeObjectRetain();
  unint64_t v7 = 0;
  if (v5) {
    goto LABEL_3;
  }
LABEL_2:
  unint64_t v7 = v5;
  memset(v25, 0, sizeof(v25));
  while (1)
  {
    outlined init with take of (offset: Int, element: SectionAccumulator.Item)?((uint64_t)v25, (uint64_t)&v26);
    if (!(void)v29)
    {
      swift_bridgeObjectRelease();
LABEL_23:
      uint64_t v20 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(a2, 1, 1, v20);
    }
    unint64_t v8 = v26;
    v25[6] = v33;
    v25[7] = v34;
    *(void *)&v25[8] = v35;
    void v25[2] = v29;
    _OWORD v25[3] = v30;
    char v25[4] = v31;
    void v25[5] = v32;
    v25[0] = v27;
    v25[1] = v28;
    uint64_t result = SectionAccumulator.Item.count.getter();
    uint64_t v9 = a1 - result;
    if (__OFSUB__(a1, result))
    {
      __break(1u);
LABEL_25:
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      goto LABEL_28;
    }
    uint64_t v10 = *((void *)&v25[6] + 1);
    BOOL v11 = __OFSUB__(v9, *((void *)&v25[6] + 1));
    uint64_t v12 = v9 - *((void *)&v25[6] + 1);
    if (v11) {
      goto LABEL_25;
    }
    uint64_t v13 = v12 - *(void *)&v25[7];
    if (__OFSUB__(v12, *(void *)&v25[7])) {
      goto LABEL_26;
    }
    if (v13 < 0) {
      break;
    }
    uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v25);
    a1 = v13;
    if (v7 == v5) {
      goto LABEL_2;
    }
LABEL_3:
    if (v7 >= *(void *)(v4 + 16)) {
      goto LABEL_27;
    }
    outlined init with copy of SectionAccumulator.Item(v22 + 136 * v7, (uint64_t)v23);
    *(void *)&v25[0] = v7;
    *(_OWORD *)((char *)&v25[6] + 8) = v23[6];
    *(_OWORD *)((char *)&v25[7] + 8) = v23[7];
    *((void *)&v25[8] + 1) = v24;
    *(_OWORD *)((char *)&v25[2] + 8) = v23[2];
    *(_OWORD *)((char *)&v25[3] + 8) = v23[3];
    *(_OWORD *)((char *)&v25[4] + 8) = v23[4];
    *(_OWORD *)((char *)&v25[5] + 8) = v23[5];
    ++v7;
    *(_OWORD *)((char *)v25 + 8) = v23[0];
    *(_OWORD *)((char *)&v25[1] + 8) = v23[1];
  }
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v14 = a1 - v10;
  if (__OFSUB__(a1, v10))
  {
LABEL_28:
    __break(1u);
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v14 < 0)
  {
    uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v25);
  }
  else
  {
    uint64_t v15 = SectionAccumulator.Item.count.getter();
    uint64_t result = outlined destroy of SectionAccumulator.Item((uint64_t)v25);
    if (v14 < v15)
    {
      uint64_t v16 = a2;
      uint64_t v17 = v14;
LABEL_22:
      MEMORY[0x18C10A8A0](v17, v8);
      uint64_t v19 = type metadata accessor for IndexPath();
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v16, 0, 1, v19);
    }
  }
  if ((v8 & 0x8000000000000000) != 0) {
    goto LABEL_29;
  }
  if (v8 < *(void *)(v4 + 16))
  {
    outlined init with copy of SectionAccumulator.Item(v22 + 136 * v8, (uint64_t)&v26);
    char v18 = SectionAccumulator.Item.hasRows.getter();
    outlined destroy of SectionAccumulator.Item((uint64_t)&v26);
    if (v18)
    {
      uint64_t v16 = a2;
      uint64_t v17 = 0;
      goto LABEL_22;
    }
    goto LABEL_23;
  }
LABEL_30:
  __break(1u);
  return result;
}

uint64_t outlined init with take of (offset: Int, element: SectionAccumulator.Item)?(uint64_t a1, uint64_t a2)
{
  type metadata accessor for ViewList?(0, &lazy cache variable for type metadata for (offset: Int, element: SectionAccumulator.Item)?, (void (*)(uint64_t))type metadata accessor for (offset: Int, element: SectionAccumulator.Item));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void type metadata accessor for ViewList?(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for Optional();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

void type metadata accessor for (offset: Int, element: SectionAccumulator.Item)()
{
  if (!lazy cache variable for type metadata for (offset: Int, element: SectionAccumulator.Item))
  {
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&lazy cache variable for type metadata for (offset: Int, element: SectionAccumulator.Item));
    }
  }
}

uint64_t assignWithCopy for ListSectionInfo(uint64_t a1, uint64_t a2)
{
  __swift_assign_boxed_opaque_existential_1((uint64_t *)a1, (uint64_t *)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 44) = *(_DWORD *)(a2 + 44);
  unint64_t v4 = *(void **)(a2 + 48);
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v4;
  id v6 = v4;

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t assignWithTake for ListSectionInfo(uint64_t a1, uint64_t a2)
{
  __swift_destroy_boxed_opaque_existential_1(a1);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v5 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);

  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  return a1;
}

uint64_t getEnumTagSinglePayload for ListSectionInfo(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 73)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ListSectionInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 72) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 73) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 73) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ListSectionInfo()
{
  return &type metadata for ListSectionInfo;
}

uint64_t ExternalDisplay.init(content:)(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t ExternalDisplay.body.getter@<X0>(uint64_t a1@<X8>)
{
  specialized ResolvedUISceneAdaptor.init(id:kind:content:)(0x6C616E7265747845, 0xEF79616C70736944, 0, 0, 2, (uint64_t)&v15);
  v19[0] = v16;
  v19[1] = v17;
  long long v18 = v15;
  uint64_t v22 = *((void *)&v17 + 1);
  outlined init with take of UISceneAdaptorConfiguration.Kind((uint64_t)v19 + 8, (uint64_t)v21);
  outlined init with take of SceneID((uint64_t)&v18, (uint64_t)v20);
  long long v8 = v15;
  long long v9 = v16;
  long long v10 = v17;
  uint64_t v2 = type metadata accessor for ResolvedUISceneAdaptor();
  swift_getWitnessTable();
  static ViewBuilder.buildExpression<A>(_:)((uint64_t)&v8, v2, (uint64_t)&v11);
  outlined release of SceneID((uint64_t)v20);
  outlined release of UISceneAdaptorConfiguration.Kind((uint64_t)v21);
  outlined release of ModifiedContent<ModifiedContent<Color, _FlexFrameLayout>, _FrameLayout>?((uint64_t)&v22);
  long long v3 = v11;
  char v4 = v12;
  uint64_t v5 = v13;
  unint64_t v6 = v14;
  long long v8 = v11;
  LOBYTE(v9) = v12;
  *((void *)&v9 + 1) = v13;
  long long v10 = v14;
  static SceneBuilder.buildBlock<A>(_:)((uint64_t)&v8, v2, a1);
  outlined consume of SceneID(v3, *((uint64_t *)&v3 + 1), v4);
  outlined consume of UISceneAdaptorConfiguration.Kind(v5, v6);
  return swift_release();
}

uint64_t associated type witness table accessor for Scene.Body : Scene in ExternalDisplay<A>()
{
  return swift_getOpaqueTypeConformance2();
}

uint64_t getEnumTagSinglePayload for ExternalDisplay(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  char v8 = 8 * v6;
  if (v6 <= 3)
  {
    unsigned int v10 = ((v7 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)((char *)a1 + v6);
      if (!v9) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)((char *)a1 + v6);
      if (!*(unsigned __int16 *)((char *)a1 + v6)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v10 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0;
    }
  }
  int v9 = *((unsigned __int8 *)a1 + v6);
  if (!*((unsigned char *)a1 + v6)) {
    goto LABEL_19;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (v6 > 3) {
    int v11 = 0;
  }
  if (v6)
  {
    if (v6 > 3) {
      LODWORD(v6) = 4;
    }
    switch((int)v6)
    {
      case 2:
        LODWORD(v6) = *a1;
        break;
      case 3:
        LODWORD(v6) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v6) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v6) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v6 | v11) + 1;
}

void storeEnumTagSinglePayload for ExternalDisplay(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v14 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v14))
      {
        int v11 = 4;
      }
      else if (v14 >= 0x100)
      {
        int v11 = 2;
      }
      else
      {
        int v11 = v14 > 1;
      }
    }
    else
    {
      int v11 = 1;
    }
  }
  else
  {
    int v11 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      int v13 = (v12 >> (8 * v8)) + 1;
      if (v8)
      {
        int v15 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if (v8 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }
        else if (v8 == 2)
        {
          *(_WORD *)a1 = v15;
        }
        else
        {
          *a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, v8);
      *(_DWORD *)a1 = v12;
      int v13 = 1;
    }
    switch(v11)
    {
      case 1:
        a1[v8] = v13;
        return;
      case 2:
        *(_WORD *)&a1[v8] = v13;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v8] = v13;
        return;
      default:
        return;
    }
  }
  switch(v11)
  {
    case 1:
      a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v8] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x187DDF648);
    case 4:
      *(_DWORD *)&a1[v8] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        long long v16 = *(void (**)(void))(v6 + 56);
        v16();
      }
      return;
  }
}

uint64_t type metadata accessor for ExternalDisplay()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t static TableRowBuilder.buildEither<A, B>(first:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent.Storage();
  double v7 = MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v11 - v8, a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v9, a3);
}

uint64_t static TableRowBuilder.buildEither<A, B>(second:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for _ConditionalContent.Storage();
  double v7 = MEMORY[0x1F4188790](v6);
  BOOL v9 = (char *)&v11 - v8;
  (*(void (**)(char *, uint64_t, uint64_t, double))(*(void *)(a2 - 8) + 16))((char *)&v11 - v8, a1, a2, v7);
  swift_storeEnumTagMultiPayload();
  return _ConditionalContent.init(__storage:)((uint64_t)v9, a3);
}

uint64_t static _ConditionalContent<>._makeRows(content:inputs:)@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v85 = *MEMORY[0x1E4F143B8];
  int v12 = *a1;
  long long v13 = a2[7];
  long long v46 = a2[6];
  long long v47 = v13;
  long long v48 = a2[8];
  uint64_t v49 = *((void *)a2 + 18);
  long long v14 = a2[3];
  long long v42 = a2[2];
  long long v43 = v14;
  long long v15 = a2[5];
  long long v44 = a2[4];
  long long v45 = v15;
  long long v16 = a2[1];
  long long v40 = *a2;
  long long v41 = v16;
  *(void *)&long long v61 = *((void *)&v48 + 1);
  DWORD2(v61) = v49;
  PreferencesInputs.makeIndirectOutputs()();
  uint64_t v17 = v73;
  int v18 = DWORD2(v73);
  long long v56 = v46;
  long long v57 = v47;
  long long v58 = v48;
  long long v52 = v42;
  long long v53 = v43;
  long long v54 = v44;
  long long v55 = v45;
  long long v50 = v40;
  long long v51 = v41;
  *(void *)&long long v59 = v49;
  *((void *)&v59 + 1) = v73;
  int v60 = DWORD2(v73);
  LODWORD(v73) = v12;
  outlined retain of _TableRowInputs((uint64_t)&v40);
  type metadata accessor for _ConditionalContent();
  type metadata accessor for _GraphValue();
  swift_bridgeObjectRetain();
  _GraphValue.value.getter();
  long long v81 = v58;
  long long v82 = v59;
  LODWORD(v83) = v60;
  long long v77 = v54;
  long long v78 = v55;
  long long v79 = v56;
  long long v80 = v57;
  long long v73 = v50;
  long long v74 = v51;
  long long v75 = v52;
  long long v76 = v53;
  outlined retain of _ConditionalContent<A, B><>.TableRowProvider((uint64_t)&v50);
  *(void *)&long long v61 = a3;
  *((void *)&v61 + 1) = a4;
  *(void *)&long long v62 = a5;
  *((void *)&v62 + 1) = a6;
  uint64_t v19 = type metadata accessor for _ConditionalContent<>.TableRowProvider();
  uint64_t WitnessTable = swift_getWitnessTable();
  _ConditionalContent.Container.init(content:provider:)();
  long long v36 = v69;
  long long v37 = v70;
  long long v38 = v71;
  uint64_t v39 = v72;
  long long v32 = v65;
  long long v33 = v66;
  long long v34 = v67;
  long long v35 = v68;
  long long v28 = v61;
  long long v29 = v62;
  long long v30 = v63;
  long long v31 = v64;
  uint64_t v25 = type metadata accessor for _ConditionalContent.Info();
  *(void *)&long long v73 = a3;
  *((void *)&v73 + 1) = a4;
  *(void *)&long long v74 = v19;
  *((void *)&v74 + 1) = WitnessTable;
  uint64_t v26 = type metadata accessor for _ConditionalContent.Container();
  uint64_t v27 = swift_getWitnessTable();
  outlined retain of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>((uint64_t)&v61);
  uint64_t v21 = type metadata accessor for Attribute();
  _ss17withUnsafePointer2to_q0_x_q0_SPyxGq_YKXEtq_YKs5ErrorR_Ri_zRi_0_r1_lF((uint64_t)&v28, (uint64_t)_s14AttributeGraph0A0VyACyxGqd__c5ValueQyd__RszAA12StatefulRuleRd__lufcADSPyqd__GXEfU_TA_2, (uint64_t)v24, v26, MEMORY[0x1E4FBC248], v21, MEMORY[0x1E4FBC278], v22);
  long long v81 = v36;
  long long v82 = v37;
  long long v83 = v38;
  uint64_t v84 = v39;
  long long v77 = v32;
  long long v78 = v33;
  long long v79 = v34;
  long long v80 = v35;
  long long v73 = v28;
  long long v74 = v29;
  long long v75 = v30;
  long long v76 = v31;
  outlined release of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>((uint64_t)&v73);
  *(void *)&long long v28 = v17;
  DWORD2(v28) = v18;
  PreferencesOutputs.setIndirectDependency(_:)();
  outlined release of _ConditionalContent<A, B><>.TableRowProvider((uint64_t)&v50);
  uint64_t result = outlined release of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>((uint64_t)&v61);
  *(void *)a7 = v17;
  *(_DWORD *)(a7 + 8) = v18;
  return result;
}

uint64_t outlined retain of _ConditionalContent<A, B><>.TableRowProvider(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for _ConditionalContent<>.TableRowProvider()
{
  return swift_getGenericMetadata();
}

uint64_t static _ConditionalContent<>._tableRowCount(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v8 = a1[7];
  long long v27 = a1[6];
  long long v28 = v8;
  long long v29 = a1[8];
  uint64_t v30 = *((void *)a1 + 18);
  long long v9 = a1[3];
  long long v23 = a1[2];
  long long v24 = v9;
  long long v10 = a1[5];
  long long v25 = a1[4];
  long long v26 = v10;
  long long v11 = a1[1];
  long long v21 = *a1;
  long long v22 = v11;
  uint64_t v12 = (*(uint64_t (**)(long long *))(a4 + 56))(&v21);
  if ((v13 & 1) == 0)
  {
    long long v14 = a1[7];
    long long v27 = a1[6];
    long long v28 = v14;
    long long v29 = a1[8];
    uint64_t v30 = *((void *)a1 + 18);
    long long v15 = a1[3];
    long long v23 = a1[2];
    long long v24 = v15;
    long long v16 = a1[5];
    long long v25 = a1[4];
    long long v26 = v16;
    long long v17 = a1[1];
    long long v21 = *a1;
    long long v22 = v17;
    BOOL v18 = v12 != (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a5 + 56))(&v21, a3, a5);
    if ((v19 | v18)) {
      return 0;
    }
  }
  return v12;
}

uint64_t static _ConditionalContent<>._containsOutlineSymbol(inputs:)(long long *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  long long v8 = a1[7];
  long long v24 = a1[6];
  long long v25 = v8;
  long long v26 = a1[8];
  uint64_t v27 = *((void *)a1 + 18);
  long long v9 = a1[3];
  long long v20 = a1[2];
  long long v21 = v9;
  long long v10 = a1[5];
  long long v22 = a1[4];
  long long v23 = v10;
  long long v11 = a1[1];
  long long v18 = *a1;
  long long v19 = v11;
  if ((*(uint64_t (**)(long long *))(a4 + 64))(&v18))
  {
    char v12 = 1;
  }
  else
  {
    long long v13 = a1[7];
    long long v24 = a1[6];
    long long v25 = v13;
    long long v26 = a1[8];
    uint64_t v27 = *((void *)a1 + 18);
    long long v14 = a1[3];
    long long v20 = a1[2];
    long long v21 = v14;
    long long v15 = a1[5];
    long long v22 = a1[4];
    long long v23 = v15;
    long long v16 = a1[1];
    long long v18 = *a1;
    long long v19 = v16;
    char v12 = (*(uint64_t (**)(long long *, uint64_t, uint64_t))(a5 + 64))(&v18, a3, a5);
  }
  return v12 & 1;
}

void _ConditionalContent<>.TableRowProvider.detachOutputs()()
{
}

uint64_t _ConditionalContent<>.TableRowProvider.attachOutputs(to:)()
{
  return PreferencesOutputs.attachIndirectOutputs(to:)();
}

uint64_t _ConditionalContent<>.TableRowProvider.makeChildInputs()@<X0>(uint64_t a1@<X8>)
{
  long long v3 = v1[6];
  long long v4 = v1[8];
  *(_OWORD *)&v28[48] = v1[7];
  long long v29 = v4;
  uint64_t v30 = *((void *)v1 + 18);
  long long v5 = v1[3];
  *(_OWORD *)&v26[16] = v1[2];
  long long v27 = v5;
  long long v6 = v1[5];
  *(_OWORD *)long long v28 = v1[4];
  *(_OWORD *)&v28[16] = v6;
  *(_OWORD *)&v28[32] = v3;
  long long v7 = v1[1];
  long long v25 = *v1;
  *(_OWORD *)long long v26 = v7;
  int v8 = DWORD2(v25);
  uint64_t v9 = v7;
  *(void *)a1 = v25;
  *(_DWORD *)(a1 + 8) = v8;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)&v26[8];
  uint64_t v10 = v27;
  int v11 = DWORD2(v27);
  uint64_t v12 = *(void *)v28;
  int v13 = v29;
  *(void *)(a1 + 40) = *(void *)&v26[24];
  *(void *)(a1 + 48) = v10;
  *(_DWORD *)(a1 + 56) = v11;
  *(void *)(a1 + 64) = v12;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)&v28[8];
  *(_OWORD *)(a1 + 88) = *(_OWORD *)&v28[24];
  *(_OWORD *)(a1 + 104) = *(_OWORD *)&v28[40];
  *(void *)(a1 + 120) = *(void *)&v28[56];
  *(_DWORD *)(a1 + 128) = v13;
  *(void *)(a1 + 136) = *((void *)&v29 + 1);
  *(void *)(a1 + 144) = v30;
  swift_beginAccess();
  int v14 = *(_DWORD *)(v9 + 16);
  uint64_t v15 = *(void *)(v9 + 24);
  long long v23 = *(_OWORD *)(v9 + 48);
  long long v24 = *(_OWORD *)(v9 + 32);
  uint64_t v16 = *(void *)(v9 + 64);
  uint64_t v17 = *(void *)(v9 + 72);
  char v18 = *(unsigned char *)(v9 + 80);
  char v19 = *(unsigned char *)(v9 + 81);
  uint64_t v20 = *(void *)(v9 + 88);
  type metadata accessor for MutableBox<CachedEnvironment>();
  uint64_t v21 = swift_allocObject();
  *(_DWORD *)(v21 + 16) = v14;
  *(void *)(v21 + 24) = v15;
  *(_OWORD *)(v21 + 32) = v24;
  *(_OWORD *)(v21 + 48) = v23;
  *(void *)(v21 + 64) = v16;
  *(void *)(v21 + 72) = v17;
  *(unsigned char *)(v21 + 80) = v18;
  *(unsigned char *)(v21 + 81) = v19;
  *(void *)(v21 + 88) = v20;
  outlined retain of _TableRowInputs((uint64_t)&v25);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t result = swift_release();
  *(void *)(a1 + 16) = v21;
  return result;
}

uint64_t _ConditionalContent<>.TableRowProvider.makeTrueOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v3;
  v10[8] = *(_OWORD *)(a2 + 128);
  uint64_t v11 = *(void *)(a2 + 144);
  long long v4 = *(_OWORD *)(a2 + 48);
  void v10[2] = *(_OWORD *)(a2 + 32);
  void v10[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  float64x2_t v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  uint64_t v7 = *(void *)(a3 + 16);
  uint64_t v8 = *(void *)(a3 + 32);
  _GraphValue.init(_:)();
  return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t))(v8 + 48))(v12, v10, v7, v8);
}

uint64_t _ConditionalContent<>.TableRowProvider.makeFalseOutputs(child:inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a2 + 112);
  v10[6] = *(_OWORD *)(a2 + 96);
  v10[7] = v3;
  v10[8] = *(_OWORD *)(a2 + 128);
  uint64_t v11 = *(void *)(a2 + 144);
  long long v4 = *(_OWORD *)(a2 + 48);
  void v10[2] = *(_OWORD *)(a2 + 32);
  void v10[3] = v4;
  long long v5 = *(_OWORD *)(a2 + 80);
  float64x2_t v10[4] = *(_OWORD *)(a2 + 64);
  v10[5] = v5;
  long long v6 = *(_OWORD *)(a2 + 16);
  v10[0] = *(_OWORD *)a2;
  v10[1] = v6;
  uint64_t v7 = *(void *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 40);
  _GraphValue.init(_:)();
  return (*(uint64_t (**)(unsigned char *, _OWORD *, uint64_t, uint64_t))(v8 + 48))(v12, v10, v7, v8);
}

uint64_t protocol witness for ConditionalContentProvider.inputs.getter in conformance _ConditionalContent<A, B><>.TableRowProvider@<X0>(uint64_t a1@<X8>)
{
  long long v2 = *(_OWORD *)(v1 + 112);
  long long v3 = *(_OWORD *)(v1 + 80);
  long long v19 = *(_OWORD *)(v1 + 96);
  long long v20 = v2;
  long long v4 = *(_OWORD *)(v1 + 112);
  long long v21 = *(_OWORD *)(v1 + 128);
  long long v5 = *(_OWORD *)(v1 + 48);
  long long v7 = *(_OWORD *)(v1 + 16);
  long long v15 = *(_OWORD *)(v1 + 32);
  long long v6 = v15;
  long long v16 = v5;
  long long v8 = *(_OWORD *)(v1 + 48);
  long long v9 = *(_OWORD *)(v1 + 80);
  long long v17 = *(_OWORD *)(v1 + 64);
  long long v10 = v17;
  long long v18 = v9;
  long long v11 = *(_OWORD *)(v1 + 16);
  v14[0] = *(_OWORD *)v1;
  long long v12 = v14[0];
  v14[1] = v11;
  *(_OWORD *)(a1 + 96) = v19;
  *(_OWORD *)(a1 + 112) = v4;
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(v1 + 128);
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v10;
  *(_OWORD *)(a1 + 80) = v3;
  uint64_t v22 = *(void *)(v1 + 144);
  *(void *)(a1 + 144) = *(void *)(v1 + 144);
  *(_OWORD *)a1 = v12;
  *(_OWORD *)(a1 + 16) = v7;
  return outlined retain of _TableRowInputs((uint64_t)v14);
}

uint64_t protocol witness for ConditionalContentProvider.outputs.getter in conformance _ConditionalContent<A, B><>.TableRowProvider@<X0>(uint64_t a1@<X8>)
{
  int v2 = *(_DWORD *)(v1 + 160);
  *(void *)a1 = *(void *)(v1 + 152);
  *(_DWORD *)(a1 + 8) = v2;
  return swift_bridgeObjectRetain();
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <> _ConditionalContent<A, B>@<X0>(int *a1@<X0>, long long *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  return static _ConditionalContent<>._makeRows(content:inputs:)(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24), *(void *)(a4 - 8), *(void *)(a4 - 16), a5);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <> _ConditionalContent<A, B>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._tableRowCount(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <> _ConditionalContent<A, B>(long long *a1, uint64_t a2, uint64_t a3)
{
  return static _ConditionalContent<>._containsOutlineSymbol(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), *(void *)(a3 - 8), *(void *)(a3 - 16));
}

uint64_t Optional<A>.ChildTableRow.value.getter@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v28 = a3;
  uint64_t v5 = type metadata accessor for Optional();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5);
  long long v8 = (char *)&v23 - v7;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness();
  uint64_t v26 = AssociatedTypeWitness;
  uint64_t v27 = type metadata accessor for EmptyTableRowContent();
  uint64_t v10 = type metadata accessor for _ConditionalContent.Storage();
  uint64_t v11 = type metadata accessor for Optional();
  uint64_t v23 = *(void *)(v11 - 8);
  uint64_t v24 = v11;
  MEMORY[0x1F4188790](v11);
  int v13 = (char *)&v23 - v12;
  uint64_t v14 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v15);
  long long v17 = (char *)&v23 - v16;
  Optional<A>.ChildTableColumn.content.getter((uint64_t)v8);
  uint64_t v30 = a1;
  uint64_t v31 = a2;
  _sSq3mapyqd_0_Sgqd_0_xqd__YKXEqd__YKs5ErrorRd__Ri_d_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in Optional<A>.ChildTableRow.value.getter, (uint64_t)v29, MEMORY[0x1E4FBC248], v10, v18, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v13, 1, v10) == 1)
  {
    uint64_t v19 = swift_checkMetadataState();
    destructiveProjectEnumData for CapsuleSlider.ScrollState.Orientation(v19, AssociatedConformanceWitness, v20, v21);
    swift_storeEnumTagMultiPayload();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v13, v24);
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v17, v13, v10);
  }
  swift_checkMetadataState();
  swift_getWitnessTable();
  return _ConditionalContent.init(__storage:)((uint64_t)v17, v28);
}

uint64_t closure #1 in Optional<A>.ChildTableRow.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return swift_storeEnumTagMultiPayload();
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance A?<A>.ChildTableRow@<X0>(uint64_t a1@<X8>)
{
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  type metadata accessor for EmptyTableRowContent();
  uint64_t v2 = type metadata accessor for _ConditionalContent();
  long long v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for Rule.value.getter in conformance A?<A>.ChildTableRow@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return Optional<A>.ChildTableRow.value.getter(*(void *)(a1 + 16), *(void *)(a1 + 24), a2);
}

uint64_t protocol witness for static _AttributeBody.flags.getter in conformance A?<A>.ChildTableRow(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F40FE388](a1, WitnessTable);
}

uint64_t static Optional<A>._makeRows(content:inputs:)@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  long long v7 = *(_OWORD *)(a1 + 112);
  long long v23 = *(_OWORD *)(a1 + 96);
  long long v24 = v7;
  long long v25 = *(_OWORD *)(a1 + 128);
  uint64_t v26 = *(void *)(a1 + 144);
  long long v8 = *(_OWORD *)(a1 + 48);
  long long v19 = *(_OWORD *)(a1 + 32);
  long long v20 = v8;
  long long v9 = *(_OWORD *)(a1 + 80);
  long long v21 = *(_OWORD *)(a1 + 64);
  long long v22 = v9;
  long long v10 = *(_OWORD *)(a1 + 16);
  long long v17 = *(_OWORD *)a1;
  long long v18 = v10;
  type metadata accessor for Optional();
  type metadata accessor for _GraphValue();
  _GraphValue.value.getter();
  swift_getAssociatedTypeWitness();
  swift_getAssociatedConformanceWitness();
  uint64_t v11 = type metadata accessor for EmptyTableRowContent();
  type metadata accessor for _ConditionalContent();
  type metadata accessor for Optional<A>.ChildTableRow();
  swift_getWitnessTable();
  _GraphValue.init<A>(_:)();
  _OWORD v14[6] = v23;
  v14[7] = v24;
  v14[8] = v25;
  uint64_t v15 = v26;
  _OWORD v14[2] = v19;
  v14[3] = v20;
  void v14[4] = v21;
  void v14[5] = v22;
  v14[0] = v17;
  v14[1] = v18;
  uint64_t WitnessTable = swift_getWitnessTable();
  return static _ConditionalContent<>._makeRows(content:inputs:)(&v16, v14, a2, v11, a3, WitnessTable, a4);
}

uint64_t static Optional<A>._tableRowCount(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  void v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  (*(uint64_t (**)(_OWORD *))(a3 + 56))(v8);
  return 0;
}

uint64_t static Optional<A>._containsOutlineSymbol(inputs:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a1 + 112);
  v8[6] = *(_OWORD *)(a1 + 96);
  v8[7] = v3;
  v8[8] = *(_OWORD *)(a1 + 128);
  uint64_t v9 = *(void *)(a1 + 144);
  long long v4 = *(_OWORD *)(a1 + 48);
  v8[2] = *(_OWORD *)(a1 + 32);
  v8[3] = v4;
  long long v5 = *(_OWORD *)(a1 + 80);
  void v8[4] = *(_OWORD *)(a1 + 64);
  v8[5] = v5;
  long long v6 = *(_OWORD *)(a1 + 16);
  v8[0] = *(_OWORD *)a1;
  v8[1] = v6;
  return (*(uint64_t (**)(_OWORD *))(a3 + 64))(v8) & 1;
}

uint64_t protocol witness for static TableRowContent._makeRows(content:inputs:) in conformance <A> A?@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  return static Optional<A>._makeRows(content:inputs:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8), a4);
}

uint64_t protocol witness for static TableRowContent._tableRowCount(inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t protocol witness for static TableRowContent._containsOutlineSymbol(inputs:) in conformance <A> A?(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Optional<A>._containsOutlineSymbol(inputs:)(a1, *(void *)(a2 + 16), *(void *)(a3 - 8));
}

uint64_t outlined retain of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 176);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  id v3 = v2;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t outlined release of _ConditionalContent<A, B>.Container<_ConditionalContent<A, B><>.TableRowProvider>(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return a1;
}

uint64_t outlined release of _ConditionalContent<A, B><>.TableRowProvider(uint64_t a1)
{
  return a1;
}

uint64_t type metadata accessor for Optional<A>.ChildTableRow()
{
  return __swift_instantiateGenericMetadata();
}

uint64_t destroy for _ConditionalContent<>.TableRowProvider()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for _ConditionalContent<>.TableRowProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v3;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  uint64_t v4 = *(void *)(a2 + 96);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for _ConditionalContent<>.TableRowProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 84) = *(_DWORD *)(a2 + 84);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a1 + 108) = *(_DWORD *)(a2 + 108);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 116) = *(_DWORD *)(a2 + 116);
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a2 + 144);
  *(_DWORD *)(a1 + 148) = *(_DWORD *)(a2 + 148);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  return a1;
}

__n128 __swift_memcpy164_8(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[9];
  *(_DWORD *)(a1 + 160) = *((_DWORD *)a2 + 40);
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  *(__n128 *)(a1 + 112) = result;
  return result;
}

uint64_t assignWithTake for _ConditionalContent<>.TableRowProvider(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_release();
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_release();
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_release();
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 160);
  return a1;
}

uint64_t getEnumTagSinglePayload for _ConditionalContent<>.TableRowProvider(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 164)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for _ConditionalContent<>.TableRowProvider(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 160) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 164) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 164) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t base witness table accessor for _AttributeBody in A?<A>.ChildTableRow()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in Optional<A>.ChildTableRow.value.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in Optional<A>.ChildTableRow.value.getter(a1, *(void *)(v2 + 16), a2);
}

uint64_t View.accessibilityInputLabels(_:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v4, 1, a2, MEMORY[0x1E4F40AB8], a3);
}

{
  uint64_t v3;
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v22;

  long long v3 = a3;
  uint64_t v4 = a2;
  long long v5 = *(void *)(a1 + 16);
  long long v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    long long v22 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    long long v6 = v22;
    long long v8 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v9 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v11 = v10;
      int v13 = v12;
      uint64_t v15 = v14;
      long long v22 = v6;
      long long v17 = *(void *)(v6 + 16);
      int v16 = *(void *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        long long v6 = v22;
      }
      *(void *)(v6 + 16) = v17 + 1;
      long long v18 = v6 + 32 * v17;
      *(void *)(v18 + 32) = v9;
      *(void *)(v18 + 40) = v11;
      *(unsigned char *)(v18 + 48) = v13 & 1;
      *(void *)(v18 + 56) = v15;
      v8 += 32;
      --v5;
    }
    while (v5);
    long long v3 = a3;
    uint64_t v4 = a2;
  }
  long long v22 = v6;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v22, 1, v4, MEMORY[0x1E4F40AB8], v3);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityInputLabels(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1;
  return View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v5, a2, a3, MEMORY[0x1E4F40AB8], a4);
}

{
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  char v21;
  uint64_t v23;
  uint64_t v24;

  uint64_t v5 = a3;
  long long v6 = *(void *)(a1 + 16);
  long long v7 = MEMORY[0x1E4FBC860];
  if (v6)
  {
    long long v21 = a2;
    long long v23 = a4;
    long long v24 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v6, 0);
    long long v7 = v24;
    long long v9 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      long long v10 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v12 = v11;
      uint64_t v14 = v13;
      int v16 = v15;
      long long v24 = v7;
      long long v18 = *(void *)(v7 + 16);
      long long v17 = *(void *)(v7 + 24);
      if (v18 >= v17 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v17 > 1), v18 + 1, 1);
        long long v7 = v24;
      }
      *(void *)(v7 + 16) = v18 + 1;
      long long v19 = v7 + 32 * v18;
      *(void *)(v19 + 32) = v10;
      *(void *)(v19 + 40) = v12;
      *(unsigned char *)(v19 + 48) = v14 & 1;
      *(void *)(v19 + 56) = v16;
      v9 += 32;
      --v6;
    }
    while (v6);
    a4 = v23;
    uint64_t v5 = a3;
    a2 = v21;
  }
  long long v24 = v7;
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v24, a2 & 1, v5, MEMORY[0x1E4F40AB8], a4);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityInputLabels<A>(_:isEnabled:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v14 = a1;
  void v13[2] = a3;
  uint64_t v13[3] = a4;
  v13[4] = a5;
  v13[5] = a6;
  uint64_t v9 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.accessibilityInputLabels<A>(_:isEnabled:), (uint64_t)v13, v9, MEMORY[0x1E4F41420], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v11);
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v14, a2, a3, MEMORY[0x1E4F40AB8], a5);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5 = a1;
  return ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v5, a2, a3, a4);
}

{
  uint64_t v4;
  int64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v20;
  uint64_t v21;
  uint64_t v23;

  uint64_t v4 = a3;
  uint64_t v5 = *(void *)(a1 + 16);
  long long v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    long long v20 = a2;
    long long v21 = a4;
    long long v23 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v5, 0);
    long long v6 = v23;
    long long v8 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v9 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v11 = v10;
      int v13 = v12;
      uint64_t v15 = v14;
      long long v23 = v6;
      long long v17 = *(void *)(v6 + 16);
      int v16 = *(void *)(v6 + 24);
      if (v17 >= v16 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v16 > 1), v17 + 1, 1);
        long long v6 = v23;
      }
      *(void *)(v6 + 16) = v17 + 1;
      long long v18 = v6 + 32 * v17;
      *(void *)(v18 + 32) = v9;
      *(void *)(v18 + 40) = v11;
      *(unsigned char *)(v18 + 48) = v13 & 1;
      *(void *)(v18 + 56) = v15;
      v8 += 32;
      --v5;
    }
    while (v5);
    uint64_t v4 = a3;
    a4 = v21;
    a2 = v20;
  }
  long long v23 = v6;
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v23, a2 & 1, v4, a4);
  return swift_bridgeObjectRelease();
}

uint64_t ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v14 = a1;
  void v13[2] = *(void *)(a3 + 16);
  uint64_t v13[3] = a4;
  v13[4] = a5;
  uint64_t v9 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v14 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in ModifiedContent<>.accessibilityInputLabels<A>(_:isEnabled:), (uint64_t)v13, v9, MEMORY[0x1E4F41420], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v11);
  ModifiedContent<>.update<A>(_:replacing:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v14, a2, a3, a6);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityInputLabels(_:isEnabled:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10 = a1;
  lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
  return TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v10, a2, a3, a4, a5);
}

uint64_t TabContent.accessibilityInputLabels(_:isEnabled:)@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6 = a3;
  char v7 = a2;
  uint64_t v8 = a5;
  int64_t v9 = *(void *)(a1 + 16);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  if (v9)
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(0, v9, 0);
    uint64_t v10 = v28;
    uint64_t v12 = a1 + 56;
    do
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v13 = Text.init(_:tableName:bundle:comment:)();
      uint64_t v15 = v14;
      char v17 = v16;
      uint64_t v19 = v18;
      uint64_t v28 = v10;
      unint64_t v21 = *(void *)(v10 + 16);
      unint64_t v20 = *(void *)(v10 + 24);
      if (v21 >= v20 >> 1)
      {
        specialized ContiguousArray._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)((char *)(v20 > 1), v21 + 1, 1);
        uint64_t v10 = v28;
      }
      *(void *)(v10 + 16) = v21 + 1;
      uint64_t v22 = v10 + 32 * v21;
      *(void *)(v22 + 32) = v13;
      *(void *)(v22 + 40) = v15;
      *(unsigned char *)(v22 + 48) = v17 & 1;
      *(void *)(v22 + 56) = v19;
      v12 += 32;
      --v9;
    }
    while (v9);
    a4 = v27;
    uint64_t v8 = a5;
    uint64_t v6 = a3;
    char v7 = a2;
  }
  uint64_t v28 = v10;
  lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v28, v7 & 1, v6, a4, v8);
  return swift_bridgeObjectRelease();
}

uint64_t TabContent.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v16 = a1;
  v15[2] = a3;
  v15[3] = a4;
  float64x2_t v15[4] = a5;
  v15[5] = a6;
  uint64_t v11 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v16 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in TabContent.accessibilityInputLabels<A>(_:isEnabled:), (uint64_t)v15, v11, MEMORY[0x1E4F41420], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v13);
  lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
  TabContent.accessibility<A>(_:_:isEnabled:)((uint64_t)&v16, a2, a3, a5, a7);
  return swift_bridgeObjectRelease();
}

uint64_t View.accessibilityInputLabels<A>(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v12 = a1;
  void v11[2] = a2;
  char v11[3] = a3;
  _OWORD v11[4] = a4;
  v11[5] = a5;
  uint64_t v7 = type metadata accessor for Array();
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v12 = _sSlsE3mapySayqd__Gqd__7ElementQzqd_0_YKXEqd_0_YKs5ErrorRd_0_r0_lF((void (*)(char *, char *))partial apply for closure #1 in View.accessibilityInputLabels<A>(_:isEnabled:), (uint64_t)v11, v7, MEMORY[0x1E4F41420], MEMORY[0x1E4FBC248], WitnessTable, MEMORY[0x1E4FBC278], v9);
  View.accessibility<A>(_:_:isEnabled:)(MEMORY[0x1E4F40AB8], (uint64_t)&v12, 1, a2, MEMORY[0x1E4F40AB8], a4);
  return swift_bridgeObjectRelease();
}

uint64_t closure #1 in View.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double v3 = MEMORY[0x1F4188790](a1);
  (*(void (**)(char *, double))(v5 + 16))((char *)&v10 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0), v3);
  uint64_t result = Text.init<A>(_:)();
  *(void *)a2 = result;
  *(void *)(a2 + 8) = v7;
  *(unsigned char *)(a2 + 16) = v8 & 1;
  *(void *)(a2 + 24) = v9;
  return result;
}

unint64_t lazy protocol witness table accessor for type [Text]? and conformance <A> A?()
{
  unint64_t result = lazy protocol witness table cache variable for type [Text]? and conformance <A> A?;
  if (!lazy protocol witness table cache variable for type [Text]? and conformance <A> A?)
  {
    type metadata accessor for [Text]?();
    lazy protocol witness table accessor for type [Text] and conformance [A]();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type [Text]? and conformance <A> A?);
  }
  return result;
}

void type metadata accessor for [Text]?()
{
  if (!lazy cache variable for type metadata for [Text]?)
  {
    type metadata accessor for [Text]();
    unint64_t v0 = type metadata accessor for Optional();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Text]?);
    }
  }
}

void type metadata accessor for [Text]()
{
  if (!lazy cache variable for type metadata for [Text])
  {
    unint64_t v0 = type metadata accessor for Array();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for [Text]);
    }
  }
}

uint64_t partial apply for closure #1 in TabContent.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return closure #1 in View.accessibilityInputLabels<A>(_:isEnabled:)(a1, a2);
}

uint64_t sub_187DE2214()
{
  return swift_getWitnessTable();
}

void type metadata accessor for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>()
{
  if (!lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>)
  {
    lazy protocol witness table accessor for type [Text]? and conformance <A> A?();
    unint64_t v0 = type metadata accessor for AccessibilityDetachedPropertyModifier();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AccessibilityDetachedPropertyModifier<AccessibilityProperties.InputLabelsKey>);
    }
  }
}

uint64_t sub_187DE22E4()
{
  return swift_getWitnessTable();
}

uint64_t partial apply for closure #1 in View.accessibilityInputLabels<A>(_:isEnabled:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return partial apply for closure #1 in TabContent.accessibilityInputLabels<A>(_:isEnabled:)(a1, a2);
}

uint64_t AsyncImage.init<>(url:scale:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  uint64_t v26 = a1;
  uint64_t v27 = a2;
  uint64_t v5 = type metadata accessor for LoadingState(0);
  uint64_t v6 = v5 - 8;
  MEMORY[0x1F4188790](v5);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for AsyncImage<Image>();
  uint64_t v10 = (int *)(v9 - 8);
  MEMORY[0x1F4188790](v9);
  uint64_t v12 = (char *)&v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v13 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  uint64_t v14 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  long long v25 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F276F0];
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v15 - 8);
  char v17 = (char *)&v24 - v16;
  _s10Foundation3URLVSgWOcTm_0(a1, (uint64_t)&v24 - v16, (unint64_t *)&lazy cache variable for type metadata for URL?, v13, v14);
  uint64_t v18 = type metadata accessor for URL();
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56);
  v19(v12, 1, 1, v18);
  uint64_t v20 = (uint64_t)&v12[v10[14]];
  *(void *)char v8 = 0;
  v19(&v8[*(int *)(v6 + 28)], 1, 1, v18);
  *(void *)&v8[*(int *)(v6 + 32)] = 0x8000000000000000;
  outlined init with copy of LoadingState((uint64_t)v8, v20, type metadata accessor for LoadingState);
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  *(void *)(v20 + *(int *)(v21 + 28)) = 0;
  outlined destroy of LoadingState((uint64_t)v8, type metadata accessor for LoadingState);
  outlined assign with take of URL?((uint64_t)v17, (uint64_t)v12);
  *(double *)&v12[v10[11]] = a3;
  *(void *)&v12[v10[12]] = 0;
  uint64_t v22 = &v12[v10[13]];
  *(void *)uint64_t v22 = closure #1 in AsyncImage.init<>(url:scale:);
  *((void *)v22 + 1) = 0;
  outlined init with take of AsyncImage<Image>((uint64_t)v12, v27, (uint64_t (*)(void))type metadata accessor for AsyncImage<Image>);
  return _s10Foundation3URLVSgWOhTm_2(v26, (unint64_t *)&lazy cache variable for type metadata for URL?, v25, v14);
}

void type metadata accessor for AsyncImage<Image>()
{
  if (!lazy cache variable for type metadata for AsyncImage<Image>)
  {
    unint64_t v0 = type metadata accessor for AsyncImage();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&lazy cache variable for type metadata for AsyncImage<Image>);
    }
  }
}

uint64_t closure #1 in AsyncImage.init<>(url:scale:)@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  if (*a1 >> 62) {
    uint64_t result = static Image.redacted.getter();
  }
  else {
    uint64_t result = swift_retain();
  }
  *a2 = result;
  return result;
}

uint64_t AsyncImage.onDisappear()(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for LoadingState(0);
  MEMORY[0x1F4188790](v4 - 8);
  uint64_t v6 = (uint64_t *)((char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v7);
  uint64_t v9 = (uint64_t *)((char *)&v15 - v8);
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  uint64_t v11 = v10;
  State.wrappedValue.getter();
  uint64_t v12 = *v9;
  if (*v9)
  {
    swift_retain();
    outlined destroy of LoadingState((uint64_t)v9, type metadata accessor for LoadingState);
    MEMORY[0x18C115EE0](v12, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  else
  {
    outlined destroy of LoadingState((uint64_t)v9, type metadata accessor for LoadingState);
  }
  uint64_t v13 = v2 + *(int *)(a1 + 48);
  State.wrappedValue.getter();
  swift_release();
  *uint64_t v6 = 0;
  if (*(void *)(v13 + *(int *)(v11 + 28))) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return outlined destroy of LoadingState((uint64_t)v6, type metadata accessor for LoadingState);
}

uint64_t partial apply for closure #1 in AsyncImage.body.getter(uint64_t a1, void (*a2)(unsigned char *, unsigned char *, uint64_t))
{
  uint64_t v4 = type metadata accessor for AsyncImage();
  return AsyncImage.didChangeURL(oldValue:newValue:)(a1, a2, v4);
}

uint64_t AsyncImage.resetLoadingState()()
{
  return withTransaction<A>(_:_:)();
}

uint64_t closure #1 in AsyncImage.resetLoadingState()(uint64_t a1)
{
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2);
  uint64_t v5 = (char *)&v29 - v4;
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8);
  long long v29 = (char *)&v29 - v7;
  uint64_t v30 = type metadata accessor for LoadingState(0);
  MEMORY[0x1F4188790](v30);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10);
  uint64_t v12 = (char *)&v29 - v11;
  MEMORY[0x1F4188790](v13);
  uint64_t v15 = (char **)((char *)&v29 - v14);
  MEMORY[0x1F4188790](v16);
  uint64_t v18 = (uint64_t *)((char *)&v29 - v17);
  uint64_t v19 = type metadata accessor for AsyncImage();
  uint64_t v20 = a1;
  State.wrappedValue.getter();
  uint64_t v21 = *v18;
  if (*v18)
  {
    swift_retain();
    outlined destroy of LoadingState((uint64_t)v18, type metadata accessor for LoadingState);
    MEMORY[0x18C115EE0](v21, MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC278]);
    swift_release();
  }
  else
  {
    outlined destroy of LoadingState((uint64_t)v18, type metadata accessor for LoadingState);
  }
  uint64_t v22 = v20 + *(int *)(v19 + 48);
  State.wrappedValue.getter();
  swift_release();
  void *v15 = 0;
  uint64_t v23 = *(int *)(v3 + 28);
  if (*(void *)(v22 + v23)) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of LoadingState((uint64_t)v15, type metadata accessor for LoadingState);
  uint64_t v24 = type metadata accessor for URL();
  uint64_t v25 = (uint64_t)v29;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56))(v29, 1, 1, v24);
  _s10Foundation3URLVSgWOcTm_0(v22, (uint64_t)v5, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v26 = v30;
  outlined assign with take of URL?(v25, (uint64_t)&v12[*(int *)(v30 + 20)]);
  if (*(void *)&v5[*(int *)(v3 + 28)]) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  outlined destroy of LoadingState((uint64_t)v12, type metadata accessor for LoadingState);
  _s10Foundation3URLVSgWOhTm_2((uint64_t)v5, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  State.wrappedValue.getter();
  uint64_t v27 = *(int *)(v26 + 24);
  outlined consume of AsyncImagePhase(*(void *)&v9[v27]);
  *(void *)&v9[v27] = 0x8000000000000000;
  if (*(void *)(v22 + v23)) {
    dispatch thunk of AnyLocation.set(_:transaction:)();
  }
  return outlined destroy of LoadingState((uint64_t)v9, type metadata accessor for LoadingState);
}

uint64_t AsyncImagePhase.error.getter()
{
  uint64_t v1 = *v0;
  if ((unint64_t)*v0 >> 62 != 1) {
    return 0;
  }
  uint64_t v2 = v1 & 0x3FFFFFFFFFFFFFFFLL;
  id v3 = (id)(v1 & 0x3FFFFFFFFFFFFFFFLL);
  return v2;
}

uint64_t *initializeBufferWithCopyOfBuffer for AsyncImage(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    long long v29 = *(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48);
    uint64_t v28 = v8;
    if (v29(a2, 1, v7))
    {
      _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    *(uint64_t *)((char *)a1 + v11) = *(uint64_t *)((char *)a2 + v11);
    uint64_t v12 = a3[11];
    uint64_t v13 = a3[12];
    uint64_t v14 = (uint64_t *)((char *)a1 + v12);
    uint64_t v15 = (uint64_t *)((char *)a2 + v12);
    uint64_t v16 = v15[1];
    *uint64_t v14 = *v15;
    v14[1] = v16;
    uint64_t v17 = (char *)a1 + v13;
    uint64_t v18 = (char *)a2 + v13;
    *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
    uint64_t v19 = type metadata accessor for LoadingState(0);
    uint64_t v20 = *(int *)(v19 + 20);
    uint64_t v21 = &v17[v20];
    uint64_t v22 = &v18[v20];
    swift_retain();
    swift_retain();
    swift_retain();
    if (v29((uint64_t *)v22, 1, v7))
    {
      _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v28 + 16))(v21, v22, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v28 + 56))(v21, 0, 1, v7);
    }
    uint64_t v24 = *(int *)(v19 + 24);
    unint64_t v25 = *(void *)&v18[v24];
    outlined copy of AsyncImagePhase(v25);
    *(void *)&v17[v24] = v25;
    _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
    *(void *)&v17[*(int *)(v26 + 28)] = *(void *)&v18[*(int *)(v26 + 28)];
  }
  swift_retain();
  return a1;
}

char *assignWithCopy for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v31 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
LABEL_7:
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[a3[10]] = *(void *)&a2[a3[10]];
  swift_retain();
  swift_release();
  uint64_t v12 = a3[11];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *((void *)v14 + 1);
  *(void *)uint64_t v13 = *(void *)v14;
  *((void *)v13 + 1) = v15;
  swift_retain();
  swift_release();
  uint64_t v16 = a3[12];
  uint64_t v17 = &a1[v16];
  uint64_t v18 = &a2[v16];
  *(void *)&a1[v16] = *(void *)&a2[v16];
  swift_retain();
  swift_release();
  uint64_t v19 = type metadata accessor for LoadingState(0);
  uint64_t v20 = *(int *)(v19 + 20);
  uint64_t v21 = &v17[v20];
  uint64_t v22 = &v18[v20];
  int v23 = v8(&v17[v20], 1, v6);
  int v24 = v8(v22, 1, v6);
  if (!v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v31 + 24))(v21, v22, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v31 + 8))(v21, v6);
    goto LABEL_12;
  }
  if (v24)
  {
LABEL_12:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v31 + 16))(v21, v22, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v21, 0, 1, v6);
LABEL_13:
  uint64_t v26 = *(int *)(v19 + 24);
  unint64_t v27 = *(void *)&v18[v26];
  outlined copy of AsyncImagePhase(v27);
  unint64_t v28 = *(void *)&v17[v26];
  *(void *)&v17[v26] = v27;
  outlined consume of AsyncImagePhase(v28);
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  *(void *)&v17[*(int *)(v29 + 28)] = *(void *)&v18[*(int *)(v29 + 28)];
  swift_retain();
  swift_release();
  return a1;
}

char *initializeWithTake for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48);
  if (v8(a2, 1, v6))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v10 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v10] = *(void *)&a2[v10];
  uint64_t v11 = a3[12];
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v14 = type metadata accessor for LoadingState(0);
  uint64_t v15 = *(int *)(v14 + 20);
  uint64_t v16 = &v12[v15];
  uint64_t v17 = &v13[v15];
  if (v8(&v13[v15], 1, v6))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v16, v17, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v16, 0, 1, v6);
  }
  *(void *)&v12[*(int *)(v14 + 24)] = *(void *)&v13[*(int *)(v14 + 24)];
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  *(void *)&v12[*(int *)(v19 + 28)] = *(void *)&v13[*(int *)(v19 + 28)];
  return a1;
}

char *assignWithTake for AsyncImage(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  uint64_t v27 = v7;
  if (v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v10)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
LABEL_7:
  uint64_t v12 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  swift_release();
  *(_OWORD *)&a1[a3[11]] = *(_OWORD *)&a2[a3[11]];
  swift_release();
  uint64_t v13 = a3[12];
  uint64_t v14 = &a1[v13];
  uint64_t v15 = &a2[v13];
  *(void *)&a1[v13] = *(void *)&a2[v13];
  swift_release();
  uint64_t v16 = type metadata accessor for LoadingState(0);
  uint64_t v17 = *(int *)(v16 + 20);
  uint64_t v18 = &v14[v17];
  uint64_t v19 = &v15[v17];
  int v20 = v8(&v14[v17], 1, v6);
  int v21 = v8(v19, 1, v6);
  if (!v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 40))(v18, v19, v6);
      goto LABEL_13;
    }
    (*(void (**)(char *, uint64_t))(v27 + 8))(v18, v6);
    goto LABEL_12;
  }
  if (v21)
  {
LABEL_12:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v18, v19, *(void *)(*(void *)(v22 - 8) + 64));
    goto LABEL_13;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 32))(v18, v19, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v18, 0, 1, v6);
LABEL_13:
  uint64_t v23 = *(int *)(v16 + 24);
  unint64_t v24 = *(void *)&v14[v23];
  *(void *)&v14[v23] = *(void *)&v15[v23];
  outlined consume of AsyncImagePhase(v24);
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
  *(void *)&v14[*(int *)(v25 + 28)] = *(void *)&v15[*(int *)(v25 + 28)];
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncImage(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DE3EFC);
}

uint64_t sub_187DE3EFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else if (a2 == 0x7FFFFFFF)
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 44));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    return (v10 + 1);
  }
  else
  {
    _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
    uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a3 + 48);
    return v12(v14, a2, v13);
  }
}

uint64_t storeEnumTagSinglePayload for AsyncImage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DE409C);
}

void sub_187DE409C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else if (a3 == 0x7FFFFFFF)
  {
    *(void *)(a1 + *(int *)(a4 + 44)) = (a2 - 1);
  }
  else
  {
    _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for State<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41580]);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56);
    uint64_t v13 = v11;
    uint64_t v14 = a1 + *(int *)(a4 + 48);
    v12(v14, a2, a2, v13);
  }
}

unint64_t *initializeBufferWithCopyOfBuffer for AsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  *a1 = v3;
  return a1;
}

void destroy for AsyncImagePhase(unint64_t *a1)
{
}

unint64_t *assignWithCopy for AsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a2;
  outlined copy of AsyncImagePhase(*a2);
  unint64_t v4 = *a1;
  *a1 = v3;
  outlined consume of AsyncImagePhase(v4);
  return a1;
}

unint64_t *assignWithTake for AsyncImagePhase(unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  *a1 = *a2;
  outlined consume of AsyncImagePhase(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for AsyncImagePhase(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)a1 >> 57) >> 5) | (4 * ((*(void *)a1 >> 57) & 0x18 | *(void *)a1 & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AsyncImagePhase(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

unint64_t *destructiveInjectEnumTag for AsyncImagePhase(unint64_t *result, uint64_t a2)
{
  if (a2 < 2)
  {
    uint64_t v2 = *result & 0xFFFFFFFFFFFFFF8;
    unint64_t v3 = a2 << 62;
  }
  else
  {
    uint64_t v2 = 8 * (a2 - 2);
    unint64_t v3 = 0x8000000000000000;
  }
  *uint64_t result = v2 | v3;
  return result;
}

uint64_t sub_187DE43AC()
{
  return swift_getWitnessTable();
}

uint64_t assignWithTake for AsyncImage.Inner(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  outlined consume of AsyncImagePhase(v4);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  swift_release();
  return a1;
}

uint64_t *initializeBufferWithCopyOfBuffer for LoadingState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    unint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URL();
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1, v11))
    {
      _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
    }
    uint64_t v15 = *(int *)(a3 + 24);
    unint64_t v16 = *(uint64_t *)((char *)a2 + v15);
    outlined copy of AsyncImagePhase(v16);
    *(uint64_t *)((char *)v7 + v15) = v16;
  }
  return v7;
}

void *initializeWithTake for LoadingState(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for URL();
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t sub_187DE4860(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 20);
    return v10(v12, a2, v11);
  }
}

void *sub_187DE494C(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 20);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

uint64_t sub_187DE4A24()
{
  uint64_t v1 = type metadata accessor for URL();
  uint64_t v2 = *(void *)(v1 - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for TaskConfig(0) - 8);
  unint64_t v6 = (v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  swift_unknownObjectRelease();
  uint64_t v12 = *(void (**)(unint64_t, uint64_t))(v2 + 8);
  v12(v0 + v3, v1);
  swift_release();
  swift_release();
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  unint64_t v8 = v0 + v6 + *(int *)(v7 + 32);
  swift_release();
  uint64_t v9 = type metadata accessor for LoadingState(0);
  unint64_t v10 = v8 + *(int *)(v9 + 20);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v2 + 48))(v10, 1, v1)) {
    v12(v10, v1);
  }
  outlined consume of AsyncImagePhase(*(void *)(v8 + *(int *)(v9 + 24)));
  swift_release();

  return swift_deallocObject();
}

uint64_t closure #3 in updateTaskResult(_:config:)(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for LoadingState(0);
  MEMORY[0x1F4188790](v3);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v6 = *(void **)(a2 + *(int *)(type metadata accessor for TaskResult(0) + 28));
  uint64_t v7 = (uint64_t)v6;
  if (!v6)
  {
    lazy protocol witness table accessor for type LoadingError and conformance LoadingError();
    uint64_t v7 = swift_allocError();
  }
  uint64_t v8 = v7 | 0x4000000000000000;
  id v9 = v6;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  MEMORY[0x18C113DA0]();
  uint64_t v10 = *(int *)(v3 + 24);
  outlined consume of AsyncImagePhase(*(void *)&v5[v10]);
  *(void *)&v5[v10] = v8;
  dispatch thunk of AnyLocation.set(_:transaction:)();
  return outlined destroy of LoadingState((uint64_t)v5, type metadata accessor for LoadingState);
}

uint64_t partial apply for closure #3 in updateTaskResult(_:config:)()
{
  return closure #3 in updateTaskResult(_:config:)(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

unint64_t lazy protocol witness table accessor for type LoadingError and conformance LoadingError()
{
  unint64_t result = lazy protocol witness table cache variable for type LoadingError and conformance LoadingError;
  if (!lazy protocol witness table cache variable for type LoadingError and conformance LoadingError)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&lazy protocol witness table cache variable for type LoadingError and conformance LoadingError);
  }
  return result;
}

uint64_t partial apply for closure #1 in AsyncImage.resetLoadingState()()
{
  return closure #1 in AsyncImage.resetLoadingState()(*(void *)(v0 + 32));
}

uint64_t partial apply for implicit closure #4 in implicit closure #3 in AsyncImage.body.getter()
{
  uint64_t v0 = type metadata accessor for AsyncImage();
  return AsyncImage.onDisappear()(v0);
}

void *type metadata accessor for LoadingError()
{
  return &unk_1ED411980;
}

uint64_t *initializeBufferWithCopyOfBuffer for TaskResult(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for URL();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
    uint64_t v11 = a3[5];
    uint64_t v12 = a3[6];
    uint64_t v13 = *(void **)((char *)a2 + v11);
    *(uint64_t *)((char *)a1 + v11) = (uint64_t)v13;
    *((unsigned char *)a1 + v12) = *((unsigned char *)a2 + v12);
    uint64_t v14 = a3[7];
    uint64_t v15 = *(void **)((char *)a2 + v14);
    id v16 = v13;
    id v17 = v15;
    *(uint64_t *)((char *)a1 + v14) = (uint64_t)v15;
  }
  return a1;
}

char *initializeWithCopy for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[5];
  uint64_t v10 = a3[6];
  uint64_t v11 = *(void **)&a2[v9];
  *(void *)&a1[v9] = v11;
  a1[v10] = a2[v10];
  uint64_t v12 = a3[7];
  uint64_t v13 = *(void **)&a2[v12];
  id v14 = v11;
  id v15 = v13;
  *(void *)&a1[v12] = v13;
  return a1;
}

char *assignWithCopy for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 24))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void **)&a1[v12];
  id v14 = *(void **)&a2[v12];
  *(void *)&a1[v12] = v14;
  id v15 = v14;

  a1[a3[6]] = a2[a3[6]];
  uint64_t v16 = a3[7];
  id v17 = *(void **)&a1[v16];
  uint64_t v18 = *(void **)&a2[v16];
  id v19 = v18;
  *(void *)&a1[v16] = v18;

  return a1;
}

char *initializeWithTake for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(a2, 1, v6))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v8 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
  }
  uint64_t v9 = a3[6];
  *(void *)&a1[a3[5]] = *(void *)&a2[a3[5]];
  a1[v9] = a2[v9];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  return a1;
}

char *assignWithTake for TaskResult(char *a1, char *a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48);
  int v9 = v8(a1, 1, v6);
  int v10 = v8(a2, 1, v6);
  if (!v9)
  {
    if (!v10)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 40))(a1, a2, v6);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v7 + 8))(a1, v6);
    goto LABEL_6;
  }
  if (v10)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(a1, a2, *(void *)(*(void *)(v11 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v7 + 32))(a1, a2, v6);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(a1, 0, 1, v6);
LABEL_7:
  uint64_t v12 = a3[5];
  uint64_t v13 = *(void **)&a1[v12];
  *(void *)&a1[v12] = *(void *)&a2[v12];

  uint64_t v14 = a3[7];
  a1[a3[6]] = a2[a3[6]];
  id v15 = *(void **)&a1[v14];
  *(void *)&a1[v14] = *(void *)&a2[v14];

  return a1;
}

uint64_t getEnumTagSinglePayload for TaskResult(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DE5720);
}

uint64_t sub_187DE5720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 20));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TaskResult(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DE5830);
}

void sub_187DE5830(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 20)) = a2;
  }
}

uint64_t *initializeBufferWithCopyOfBuffer for TaskConfig(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v6 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
  }
  else
  {
    uint64_t v6 = a1;
    a1[1] = a2[1];
    _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
    uint64_t v8 = *(int *)(v7 + 32);
    uint64_t v9 = (char *)v6 + v8;
    unint64_t v10 = (char *)a2 + v8;
    *(uint64_t *)((char *)v6 + v8) = *(uint64_t *)((char *)a2 + v8);
    uint64_t v11 = type metadata accessor for LoadingState(0);
    uint64_t v12 = *(int *)(v11 + 20);
    uint64_t v25 = v10;
    uint64_t v26 = v9;
    __dst = &v9[v12];
    uint64_t v24 = v11;
    uint64_t v13 = &v10[v12];
    uint64_t v14 = type metadata accessor for URL();
    uint64_t v15 = *(void *)(v14 - 8);
    uint64_t v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    swift_retain();
    swift_retain();
    swift_retain();
    if (v16(v13, 1, v14))
    {
      _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
      memcpy(__dst, v13, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(__dst, v13, v14);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(__dst, 0, 1, v14);
    }
    uint64_t v18 = *(int *)(v24 + 24);
    unint64_t v19 = *(void *)&v25[v18];
    outlined copy of AsyncImagePhase(v19);
    *(void *)&v26[v18] = v19;
    uint64_t v20 = *(int *)(a3 + 24);
    *(uint64_t *)((char *)v6 + *(int *)(a3 + 20)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 20));
    *(uint64_t *)((char *)v6 + v20) = *(uint64_t *)((char *)a2 + v20);
  }
  swift_retain();
  return v6;
}

void *assignWithCopy for TaskConfig(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_retain();
  swift_release();
  uint64_t v22 = type metadata accessor for LoadingState(0);
  uint64_t v23 = v8;
  uint64_t v9 = *(int *)(v22 + 20);
  unint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 24))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = *(int *)(v22 + 24);
  unint64_t v19 = *(void *)&v23[v18];
  outlined copy of AsyncImagePhase(v19);
  unint64_t v20 = *(void *)&v7[v18];
  *(void *)&v7[v18] = v19;
  outlined consume of AsyncImagePhase(v20);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + *(int *)(a3 + 24)) = *(void *)((char *)a2 + *(int *)(a3 + 24));
  swift_retain();
  swift_release();
  return a1;
}

void *initializeWithTake for TaskConfig(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v8 = *(int *)(v7 + 32);
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  *(void *)((char *)a1 + v8) = *(void *)((char *)a2 + v8);
  uint64_t v11 = type metadata accessor for LoadingState(0);
  uint64_t v12 = *(int *)(v11 + 20);
  uint64_t v13 = &v9[v12];
  uint64_t v14 = &v10[v12];
  uint64_t v15 = type metadata accessor for URL();
  uint64_t v16 = *(void *)(v15 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
  {
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  }
  *(void *)&v9[*(int *)(v11 + 24)] = *(void *)&v10[*(int *)(v11 + 24)];
  uint64_t v18 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v18) = *(void *)((char *)a2 + v18);
  return a1;
}

void *assignWithTake for TaskConfig(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  swift_release();
  a1[1] = a2[1];
  swift_release();
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v6 = *(int *)(v5 + 32);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  *(void *)((char *)a1 + v6) = *(void *)((char *)a2 + v6);
  swift_release();
  uint64_t v22 = type metadata accessor for LoadingState(0);
  uint64_t v9 = *(int *)(v22 + 20);
  unint64_t v10 = &v7[v9];
  uint64_t v11 = &v8[v9];
  uint64_t v12 = type metadata accessor for URL();
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48);
  int v15 = v14(v10, 1, v12);
  int v16 = v14(v11, 1, v12);
  if (!v15)
  {
    if (!v16)
    {
      (*(void (**)(char *, char *, uint64_t))(v13 + 40))(v10, v11, v12);
      goto LABEL_7;
    }
    (*(void (**)(char *, uint64_t))(v13 + 8))(v10, v12);
    goto LABEL_6;
  }
  if (v16)
  {
LABEL_6:
    _s10Foundation3URLVSgMaTm_4(0, (unint64_t *)&lazy cache variable for type metadata for URL?, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
    memcpy(v10, v11, *(void *)(*(void *)(v17 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v10, v11, v12);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0, 1, v12);
LABEL_7:
  uint64_t v18 = *(int *)(v22 + 24);
  unint64_t v19 = *(void *)&v7[v18];
  *(void *)&v7[v18] = *(void *)&v8[v18];
  outlined consume of AsyncImagePhase(v19);
  uint64_t v20 = *(int *)(a3 + 24);
  *(void *)((char *)a1 + *(int *)(a3 + 20)) = *(void *)((char *)a2 + *(int *)(a3 + 20));
  *(void *)((char *)a1 + v20) = *(void *)((char *)a2 + v20);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for TaskConfig(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_187DE626C);
}

uint64_t sub_187DE626C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == a2)
  {
    uint64_t v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    return v8(a1, a2, v6);
  }
  else
  {
    unint64_t v10 = *(void *)(a1 + *(int *)(a3 + 24));
    if (v10 >= 0xFFFFFFFF) {
      LODWORD(v10) = -1;
    }
    int v11 = v10 - 1;
    if (v11 < 0) {
      int v11 = -1;
    }
    return (v11 + 1);
  }
}

uint64_t storeEnumTagSinglePayload for TaskConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_187DE637C);
}

void sub_187DE637C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  _s10Foundation3URLVSgMaTm_4(0, &lazy cache variable for type metadata for Binding<LoadingState>, type metadata accessor for LoadingState, MEMORY[0x1E4F41638]);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    unint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v10(a1, a2, a2, v8);
  }
  else
  {
    *(void *)(a1 + *(int *)(a4 + 24)) = a2;
  }
}

uint64_t sub_187DE6468()
{
  type metadata accessor for _UnaryViewAdaptor();

  return swift_getWitnessTable();
}

uint64_t closure #3 in updateTaskResult(_:config:)partial apply()
{
  return partial apply for closure #3 in updateTaskResult(_:config:)();
}

uint64_t EnvironmentValues.feedbackCache.getter()
{
  if (*(void *)(v0 + 8))
  {
    type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    swift_retain_n();
    PropertyList.Tracker.value<A>(_:for:)();
    swift_release_n();
  }
  else
  {
    type metadata accessor for EnvironmentPropertyKey<FeedbackCacheKey>();
    lazy protocol witness table accessor for type EnvironmentPropertyKey<FeedbackCacheKey> and conformance EnvironmentPropertyKey<A>();
    swift_retain_n();
    PropertyList.subscript.getter();
  }
  swift_release_n();
  uint64_t Strong = swift_weakLoadStrong();
  outlined destroy of WeakBox<AnyUIKitSensoryFeedbackCache>((uint64_t)v3);
  return Strong;
}

void AnyUIKitSensoryFeedbackCache.implementation(type:)()
{
}

id closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t))
{
  swift_beginAccess();
  uint64_t v8 = *(void *)(a1 + 24);
  if (*(void *)(v8 + 16))
  {
    uint64_t v9 = specialized __RawDictionaryStorage.find<A>(_:)(a2, a3);
    if (v10)
    {
      int v11 = *(void **)(*(void *)(v8 + 56) + 8 * v9);
      swift_endAccess();
      id v12 = (id)swift_dynamicCastUnknownClassUnconditional();
      id v13 = v11;
      return v12;
    }
  }
  uint64_t v14 = swift_endAccess();
  int v15 = (void *)a4(v14);
  swift_beginAccess();
  id v12 = v15;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v19 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = 0x8000000000000000;
  specialized _NativeDictionary.setValue(_:forKey:isUnique:)((uint64_t)v12, a2, a3, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 24) = v19;
  swift_bridgeObjectRelease();
  swift_endAccess();
  id result = (id)MEMORY[0x18C119DF0](a1 + 16);
  if (result)
  {
    uint64_t v18 = result;
    objc_msgSend(result, sel_addInteraction_, v12);

    return v12;
  }
  __break(1u);
  return result;
}

void UIKitSensoryFeedbackCache.implementation(type:)(unint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (!(a1 >> 62))
  {
    MEMORY[0x1F4188790](a1);
    double v14 = *(double *)&a2;
    MEMORY[0x1F4188790](v9);
    *(void *)(a3 + 24) = &type metadata for ImpactFeedbackImplementation;
    *(void *)(a3 + 32) = &protocol witness table for ImpactFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFeedbackGenerator);
    uint64_t v8 = partial apply for closure #12 in UIKitSensoryFeedbackCache.implementation(type:);
    goto LABEL_5;
  }
  if (a1 >> 62 == 1)
  {
    MEMORY[0x1F4188790](a1);
    double v14 = *(double *)&a2;
    MEMORY[0x1F4188790](v7);
    *(void *)(a3 + 24) = &type metadata for ImpactFeedbackImplementation;
    *(void *)(a3 + 32) = &protocol witness table for ImpactFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UIFeedbackGenerator);
    uint64_t v8 = partial apply for closure #14 in UIKitSensoryFeedbackCache.implementation(type:);
LABEL_5:
    id v10 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))v8);
    closure #11 in UIKitSensoryFeedbackCache.implementation(type:)(v10, a3, v14);

    return;
  }
  if ((__int128)__PAIR128__(1, 0x8000000000000001) < (__int128)__PAIR128__(a2, a1))
  {
    if ((__int128)__PAIR128__(2, 0x7FFFFFFFFFFFFFFFLL) >= (__int128)__PAIR128__(a2, a1))
    {
      if (a2 != 1 || a1 != 0x8000000000000002) {
        goto LABEL_13;
      }
    }
    else if (__PAIR128__((unint64_t)__CFADD__(a1, 0x8000000000000000) + a2 - 3, a1 + 0x8000000000000000) < 2)
    {
LABEL_13:
      *(void *)(a3 + 32) = 0;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      return;
    }
    *(void *)(a3 + 24) = &type metadata for CanvasFeedbackImplementation;
    *(void *)(a3 + 32) = &protocol witness table for CanvasFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UICanvasFeedbackGenerator);
    *(void *)a3 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))closure #10 in UIKitSensoryFeedbackCache.implementation(type:));
    *(void *)(a3 + 8) = a1;
    *(void *)(a3 + 16) = a2;
    return;
  }
  if (a1 + 0x8000000000000000 > 3)
  {
LABEL_14:
    *(void *)(a3 + 24) = &type metadata for SelectionFeedbackImplementation;
    *(void *)(a3 + 32) = &protocol witness table for SelectionFeedbackImplementation;
    type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UISelectionFeedbackGenerator);
    *(void *)a3 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, 0x8000000000000001, 1, (uint64_t (*)(uint64_t))closure #8 in UIKitSensoryFeedbackCache.implementation(type:));
  }
  else
  {
    switch(a1)
    {
      case 0x8000000000000001:
        *(void *)(a3 + 24) = &type metadata for NotificationFeedbackImplementation;
        *(void *)(a3 + 32) = &protocol witness table for NotificationFeedbackImplementation;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINotificationFeedbackGenerator);
        id v12 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))closure #4 in UIKitSensoryFeedbackCache.implementation(type:));
        uint64_t v13 = 1;
        goto LABEL_23;
      case 0x8000000000000002:
        *(void *)(a3 + 24) = &type metadata for NotificationFeedbackImplementation;
        *(void *)(a3 + 32) = &protocol witness table for NotificationFeedbackImplementation;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINotificationFeedbackGenerator);
        id v12 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))closure #4 in UIKitSensoryFeedbackCache.implementation(type:));
        uint64_t v13 = 2;
LABEL_23:
        *(void *)a3 = v12;
        *(void *)(a3 + 8) = v13;
        break;
      case 0x8000000000000003:
        goto LABEL_14;
      default:
        *(void *)(a3 + 24) = &type metadata for NotificationFeedbackImplementation;
        *(void *)(a3 + 32) = &protocol witness table for NotificationFeedbackImplementation;
        type metadata accessor for NSObject(0, &lazy cache variable for type metadata for UINotificationFeedbackGenerator);
        *(void *)a3 = closure #1 in UIKitSensoryFeedbackCache.getGenerator<A, B>(_:work:createIfNeeded:)(v3, a1, a2, (uint64_t (*)(uint64_t))closure #2 in UIKitSensoryFeedbackCache.implementation(type:));
        *(void *)(a3 + 8) = 0;
        break;
    }
  }
}

id closure #2 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1A00]);

  return objc_msgSend(v0, sel_init);
}

id closure #12 in UIKitSensoryFeedbackCache.implementation(type:)(unsigned __int8 a1)
{
  uint64_t v1 = a1;
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1840]);

  return objc_msgSend(v2, sel_initWithStyle_, v1);
}

id closure #11 in UIKitSensoryFeedbackCache.implementation(type:)@<X0>(void *a1@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  self;
  *(void *)a2 = swift_dynamicCastObjCClassUnconditional();
  *(double *)(a2 + 8) = a3;

  return a1;
}

id closure #14 in UIKitSensoryFeedbackCache.implementation(type:)(char a1)
{
  uint64_t v1 = qword_1883A33F8[a1];
  id v2 = objc_allocWithZone(MEMORY[0x1E4FB1840]);

  return objc_msgSend(v2, sel_initWithStyle_, v1);
}

id closure #8 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB1C18]);

  return objc_msgSend(v0, sel_init);
}

id closure #10 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  id v0 = objc_allocWithZone(MEMORY[0x1E4FB14F0]);

  return objc_msgSend(v0, sel_init);
}

uint64_t UIKitSensoryFeedbackCache.__ivar_destroyer()
{
  swift_unknownObjectWeakDestroy();

  return swift_bridgeObjectRelease();
}

id partial apply for closure #14 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  return closure #14 in UIKitSensoryFeedbackCache.implementation(type:)(*(unsigned char *)(v0 + 16));
}

id partial apply for closure #12 in UIKitSensoryFeedbackCache.implementation(type:)()
{
  return closure #12 in UIKitSensoryFeedbackCache.implementation(type:)(*(unsigned char *)(v0 + 16));
}

void *type metadata accessor for FeedbackCacheKey()
{
  return &unk_1ED41D558;
}

uint64_t *initializeBufferWithCopyOfBuffer for NavigationStackReader(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a3 + 24);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(_DWORD *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((((((v6 + 32) & ~v6) + v7) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8) + 16 > 0x18)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    uint64_t v3 = (uint64_t *)(v10 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
  }
  else
  {
    uint64_t v12 = *a2;
    unint64_t v11 = (unint64_t)a2 + 15;
    *a1 = v12;
    uint64_t v13 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
    *uint64_t v13 = *(void *)(v11 & 0xFFFFFFFFFFFFFFF8);
    v13[1] = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 8);
    void v13[2] = *(void *)((v11 & 0xFFFFFFFFFFFFFFF8) + 16);
    uint64_t v14 = ((unint64_t)v13 + v6 + 24) & ~v6;
    unint64_t v15 = ((v11 & 0xFFFFFFFFFFFFFFF8) + v6 + 24) & ~v6;
    int v16 = *(void (**)(uint64_t, unint64_t, uint64_t))(v5 + 16);
    swift_retain();
    swift_retain();
    swift_retain();
    v16(v14, v15, v4);
    *(unsigned char *)(v14 + v7) = *(unsigned char *)(v15 + v7);
    unint64_t v17 = (v14 + v7) & 0xFFFFFFFFFFFFFFF8;
    unint64_t v18 = (v15 + v7) & 0xFFFFFFFFFFFFFFF8;
    *(void *)(v17 + 8) = *(void *)(v18 + 8);
    uint64_t v19 = (void *)((v17 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v20 = (void *)((v18 + 23) & 0xFFFFFFFFFFFFFFF8);
    uint64_t v21 = v20[1];
    void *v19 = *v20;
    v19[1] = v21;
    swift_retain();
  }
  swift_retain();
  return v3;
}

void *assignWithTake for NavigationStackReader(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v5 = (void *)(((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v6 = (void *)(((unint64_t)a2 + 15) & 0xFFFFFFFFFFFFFFF8);
  *uint64_t v5 = *v6;
  swift_release();
  v5[1] = v6[1];
  swift_release();
  uint64_t v5[2] = v6[2];
  swift_release();
  uint64_t v7 = *(void *)(*(void *)(a3 + 24) - 8);
  uint64_t v8 = v7 + 40;
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = ((unint64_t)v5 + v9 + 24) & ~v9;
  uint64_t v11 = ((unint64_t)v6 + v9 + 24) & ~v9;
  (*(void (**)(uint64_t, uint64_t))(v7 + 40))(v10, v11);
  uint64_t v12 = *(void *)(v8 + 24);
  unint64_t v13 = v12 + v10;
  unint64_t v14 = v12 + v11;
  *(unsigned char *)unint64_t v13 = *(unsigned char *)v14;
  unint64_t v15 = v13 & 0xFFFFFFFFFFFFFFF8;
  unint64_t v16 = v14 & 0xFFFFFFFFFFFFFFF8;
  *(void *)((v13 & 0xFFFFFFFFFFFFFFF8) + 8) = *(void *)((v14 & 0xFFFFFFFFFFFFFFF8) + 8);
  swift_release();
  *(_OWORD *)((v15 + 23) & 0xFFFFFFFFFFFFFFF8) = *(_OWORD *)((v16 + 23) & 0xFFFFFFFFFFFFFFF8);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackReader(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 24) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((((((v6 + 32) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 24) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8)
         + 23) & 0xFFFFFFFFFFFFFFF8)
       + 16;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x187DE7214);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  unint64_t v17 = ((unint64_t)a1 + 15) & 0xFFFFFFFFFFFFFFF8;
  if ((v5 & 0x80000000) != 0) {
    return (*(uint64_t (**)(unint64_t))(v4 + 48))((v17 + v6 + 24) & ~v6);
  }
  unint64_t v18 = *(void *)(v17 + 8);
  if (v18 >= 0xFFFFFFFF) {
    LODWORD(v18) = -1;
  }
  return (v18 + 1);
}

void storeEnumTagSinglePayload for NavigationStackReader(unsigned char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 24) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  size_t v10 = ((((((v9 + 32) & ~v9) + *(void *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)) & 0xFFFFFFFFFFFFFFF8) + 23) & 0xFFFFFFFFFFFFFFF8)
      + 16;
  if (v8 >= a3)
  {
    int v14 = 0;
    int v15 = a2 - v8;
    if (a2 <= v8)
    {
LABEL_17:
      switch(v14)
      {
        case 1:
          a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 2:
          *(_WORD *)&a1[v10] = 0;
          if (!a2) {
            return;
          }
          goto LABEL_30;
        case 3:
          goto LABEL_42;
        case 4:
          *(_DWORD *)&a1[v10] = 0;
          goto LABEL_29;
        default:
LABEL_29:
          if (a2)
          {
LABEL_30:
            unint64_t v18 = (void *)((unint64_t)(a1 + 15) & 0xFFFFFFFFFFFFFFF8);
            if ((v7 & 0x80000000) != 0)
            {
              uint64_t v19 = *(void (**)(unint64_t))(v6 + 56);
              v19(((unint64_t)v18 + v9 + 24) & ~v9);
            }
            else if ((a2 & 0x80000000) != 0)
            {
              v18[1] = 0;
              void v18[2] = 0;
              *unint64_t v18 = a2 ^ 0x80000000;
            }
            else
            {
              v18[1] = a2 - 1;
            }
          }
          break;
      }
      return;
    }
  }
  else
  {
    unsigned int v11 = a3 - v8;
    if (((((((v9 + 32) & ~v9) + *(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)) & 0xFFFFFFF8)
         + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
      unsigned int v12 = v11 + 1;
    else {
      unsigned int v12 = 2;
    }
    if (v12 >= 0x10000) {
      int v13 = 4;
    }
    else {
      int v13 = 2;
    }
    if (v12 < 0x100) {
      int v13 = 1;
    }
    if (v12 >= 2) {
      int v14 = v13;
    }
    else {
      int v14 = 0;
    }
    int v15 = a2 - v8;
    if (a2 <= v8) {
      goto LABEL_17;
    }
  }
  if (((((((v9 + 32) & ~v9) + *(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) == 0xFFFFFFF0)
    int v16 = v15;
  else {
    int v16 = 1;
  }
  if (((((((v9 + 32) & ~v9) + *(_DWORD *)(*(void *)(*(void *)(a4 + 24) - 8) + 64)) & 0xFFFFFFF8)
       + 23) & 0xFFFFFFF8) != 0xFFFFFFF0)
  {
    int v17 = ~v8 + a2;
    bzero(a1, v10);
    *(_DWORD *)a1 = v17;
  }
  switch(v14)
  {
    case 1:
      a1[v10] = v16;
      break;
    case 2:
      *(_WORD *)&a1[v10] = v16;
      break;
    case 3:
LABEL_42:
      __break(1u);
      JUMPOUT(0x187DE742CLL);
    case 4:
      *(_DWORD *)&a1[v10] = v16;
      break;
    default:
      return;
  }
}

_UNKNOWN **base witness table accessor for View in NavigationStackReader<A, B>()
{
  return &protocol witness table for NavigationStackReader<A, B>;
}

uint64_t key path setter for NavigationStateHost.seedHost : NavigationStateHost(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 184) = *a1;
  swift_retain();

  return swift_release();
}

double protocol witness for static Rule.initialValue.getter in conformance NavigationStackReader<A, B>.StackKey@<D0>(uint64_t a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a1 = xmmword_1883A3410;
  *(void *)(a1 + 16) = 0;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackReader<A, B>.ExtractedRoot@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for ReadDestinationsModifier();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, (unint64_t *)&lazy cache variable for type metadata for _PreferenceTransformModifier<NavigationDestinationKey>, (uint64_t)&type metadata for NavigationDestinationKey, (uint64_t)&protocol witness table for NavigationDestinationKey, MEMORY[0x1E4F41108]);
  type metadata accessor for ModifiedContent();
  type metadata accessor for PositionedNavigationDestinationProcessor();
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t closure #2 in NavigationStackReader.AppliedBody.value.getter(uint64_t result)
{
  *(unsigned char *)(result + 1) = 1;
  return result;
}

uint64_t protocol witness for static Rule.initialValue.getter in conformance NavigationStackReader<A, B>.AppliedBody@<X0>(uint64_t a1@<X8>)
{
  type metadata accessor for PositionedNavigationDestinationProcessor();
  type metadata accessor for ModifiedContent();
  type metadata accessor for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>(255, &lazy cache variable for type metadata for _PreferenceTransformModifier<InspectorStorageV5.PreferenceKey>, (uint64_t)&type metadata for InspectorStorageV5.PreferenceKey, (uint64_t)&protocol witness table for InspectorStorageV5.PreferenceKey, MEMORY[0x1E4F41108]);
  uint64_t v2 = type metadata accessor for ModifiedContent();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t protocol witness for static View._makeViewList(view:inputs:) in conformance NavigationStackReader<A, B>()
{
  swift_getWitnessTable();

  return static UnaryView._makeViewList(view:inputs:)();
}

uint64_t protocol witness for static View._viewListCount(inputs:) in conformance NavigationStackReader<A, B>()
{
  return static UnaryView._viewListCount(inputs:)();
}

void protocol witness for View.body.getter in conformance NavigationStackReader<A, B>()
{
}

uint64_t sub_187DE77B4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*(void *)a1 + 184);
  return swift_retain();
}

uint64_t sub_187DE77C4(void *a1, uint64_t a2)
{
  *(void *)(*(void *)a2 + 184) = *a1;
  swift_retain();

  return swift_release();
}

uint64_t assignWithCopy for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 20) = *(_DWORD *)(a2 + 20);
  *(_DWORD *)(a1 + 24) = *(_DWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = a1 + 40;
  unsigned int v5 = (long long *)(a2 + 40);
  uint64_t v6 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) == 1)
  {
    if (v6 == 1)
    {
      long long v7 = *v5;
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(_OWORD *)uint64_t v4 = v7;
    }
    else
    {
      swift_weakCopyInit();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_retain();
      swift_retain();
    }
  }
  else if (v6 == 1)
  {
    outlined destroy of NavigationAuthority(a1 + 40);
    uint64_t v8 = *((void *)v5 + 2);
    *(_OWORD *)uint64_t v4 = *v5;
    *(void *)(v4 + 16) = v8;
  }
  else
  {
    swift_weakCopyAssign();
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    swift_retain();
    swift_release();
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    swift_retain();
    swift_release();
  }
  return a1;
}

uint64_t initializeWithTake for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = a1 + 40;
  uint64_t v5 = a2 + 40;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v6 = (_OWORD *)(a2 + 48);
  if (v7 == 1)
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
  }
  else
  {
    swift_weakTakeInit();
    *(_OWORD *)(a1 + 48) = *v6;
  }
  return a1;
}

uint64_t assignWithTake for NavigationStackReader.ChildEnvironment(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = a1 + 40;
  uint64_t v5 = a2 + 40;
  uint64_t v6 = (_OWORD *)(a1 + 48);
  uint64_t v8 = (_OWORD *)(a2 + 48);
  uint64_t v7 = *(void *)(a2 + 48);
  if (*(void *)(a1 + 48) != 1)
  {
    if (v7 != 1)
    {
      swift_weakTakeAssign();
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      swift_release();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_release();
      return a1;
    }
    outlined destroy of NavigationAuthority(a1 + 40);
    goto LABEL_6;
  }
  if (v7 == 1)
  {
LABEL_6:
    *(_OWORD *)uint64_t v4 = *(_OWORD *)v5;
    *(void *)(v4 + 16) = *(void *)(v5 + 16);
    return a1;
  }
  swift_weakTakeInit();
  *uint64_t v6 = *v8;
  return a1;
}

uint64_t getEnumTagSinglePayload for NavigationStackReader.ChildEnvironment(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 > 0x7FFFFFFD && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 2147483646);
  }
  unint64_t v3 = *(void *)(a1 + 48);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for NavigationStackReader.ChildEnvironment(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFD)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 - 2147483646;
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 > 0x7FFFFFFD) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(void *)(result + 48) = a2 + 1;
    }
  }
  return result;
}

uint64_t closure #1 in FileImportExportBridge.preferencesDidChange(_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5[2] = a4;
  v5[3] = a5;
  type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(0);
  v5[4] = swift_task_alloc();
  return MEMORY[0x1F4188298](closure #1 in FileImportExportBridge.preferencesDidChange(_:), 0, 0);
}

uint64_t closure #1 in FileImportExportBridge.preferencesDidChange(_:)()
{
  uint64_t v1 = v0[4];
  outlined init with copy of FileImportExportBridge.PresentationState(v0[3], v1, type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect);
  uint64_t updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(updated - 8) + 56))(v1, 0, 1, updated);
  unint64_t v3 = (void *)swift_task_alloc();
  v0[5] = (uint64_t)v3;
  *unint64_t v3 = v0;
  v3[1] = closure #1 in FileImportExportBridge.preferencesDidChange(_:);
  uint64_t v4 = v0[4];
  return FileImportExportBridge.apply(_:)(v4);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t (*v2)(void);
  uint64_t v4;
  uint64_t v5;

  uint64_t v1 = *(void *)(*v0 + 32);
  uint64_t v4 = *v0;
  swift_task_dealloc();
  outlined destroy of FileImportExportBridge.Presentation(v1, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?);
  swift_task_dealloc();
  uint64_t v2 = *(uint64_t (**)(void))(v4 + 8);
  return v2();
}

uint64_t FileImportExportBridge.apply(_:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for FileExportOperation.Resolved(0);
  v2[4] = swift_task_alloc();
  type metadata accessor for FileExportOperation(0);
  v2[5] = swift_task_alloc();
  v2[6] = swift_task_alloc();
  v2[7] = type metadata accessor for FileImportOperation.Resolved(0);
  v2[8] = swift_task_alloc();
  v2[9] = type metadata accessor for FileImportOperation(0);
  v2[10] = swift_task_alloc();
  v2[11] = swift_task_alloc();
  v2[12] = type metadata accessor for FileImportExportBridge.Presentation(0);
  v2[13] = swift_task_alloc();
  v2[14] = swift_task_alloc();
  type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?(0);
  v2[15] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[16] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[17] = v4;
  v2[18] = v3;
  return MEMORY[0x1F4188298](FileImportExportBridge.apply(_:), v4, v3);
}

uint64_t FileImportExportBridge.apply(_:)()
{
  uint64_t v1 = v0[15];
  outlined init with copy of FileImportExportBridge.PresentationState(v0[2], v1, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect?);
  uint64_t updated = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v1, 1, updated) == 1)
  {
    swift_release();
LABEL_26:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    long long v67 = (uint64_t (*)(void))v0[1];
    return v67();
  }
  uint64_t v3 = v0[15];
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload();
  if (!EnumCaseMultiPayload)
  {
    swift_release();
    uint64_t v23 = type metadata accessor for FileImportExportBridge.PresentationState.UpdateEffect;
    uint64_t v24 = v3;
    goto LABEL_25;
  }
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v25 = v0[3];
    swift_release();
    uint64_t v26 = v25 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
    uint64_t v27 = *(void **)(v25 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
    if (v27)
    {
      uint64_t v28 = *(void *)(v26 + 8);
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
      id v31 = v27;
      v30(ObjectType, v28);

      long long v32 = *(void **)v26;
    }
    else
    {
      long long v32 = 0;
    }
    *(void *)uint64_t v26 = 0;
    *(void *)(v26 + 8) = 0;

    goto LABEL_26;
  }
  uint64_t v5 = v0[3];
  outlined init with take of FileImportExportBridge.Presentation?(v3, v0[14], type metadata accessor for FileImportExportBridge.Presentation);
  uint64_t v6 = v5 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
  uint64_t v7 = *(void **)(v5 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  if (v7)
  {
    uint64_t v8 = *(void *)(v6 + 8);
    uint64_t v9 = swift_getObjectType();
    size_t v10 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
    id v11 = v7;
    v10(v9, v8);

    unsigned int v12 = *(void **)v6;
    *(void *)uint64_t v6 = 0;
    *(void *)(v6 + 8) = 0;
  }
  outlined init with copy of FileImportExportBridge.PresentationState(v0[14], v0[13], type metadata accessor for FileImportExportBridge.Presentation);
  if (swift_getEnumCaseMultiPayload() != 1)
  {
    uint64_t v33 = v0[13];
    uint64_t v34 = v0[11];
    uint64_t v35 = v0[3];
    swift_release();
    outlined init with take of FileImportExportBridge.Presentation?(v33, v34, type metadata accessor for FileImportOperation);
    uint64_t v36 = v35 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
    uint64_t result = MEMORY[0x18C119DF0](v35 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host);
    if (!result)
    {
LABEL_30:
      __break(1u);
      return result;
    }
    uint64_t v37 = v0[10];
    uint64_t v38 = v0[11];
    uint64_t v39 = v0[8];
    uint64_t v40 = v0[9];
    uint64_t v41 = v0[7];
    uint64_t v42 = *(void *)(v36 + 8);
    uint64_t v43 = swift_getObjectType();
    (*(void (**)(uint64_t, uint64_t))(v42 + 16))(v43, v42);
    swift_unknownObjectRelease();
    GraphHost.environment.getter();
    swift_release();
    outlined init with copy of FileImportExportBridge.PresentationState(v38, v37, type metadata accessor for FileImportOperation);
    long long v44 = (uint64_t *)(v39 + *(int *)(v41 + 24));
    *long long v44 = 0;
    v44[1] = 0;
    long long v69 = v44;
    long long v45 = (void *)(v39 + *(int *)(v41 + 28));
    *long long v45 = 0;
    v45[1] = 0;
    outlined init with copy of FileImportExportBridge.PresentationState(v37, v39, type metadata accessor for FileImportOperation);
    long long v46 = (uint64_t *)(v37 + *(int *)(v40 + 24));
    uint64_t v47 = v46[3];
    if (v47)
    {
      uint64_t v49 = v46[1];
      uint64_t v48 = v46[2];
      uint64_t v50 = *v46;
      swift_retain();
      swift_retain();
      outlined copy of Text?(v50, v49, v48, v47);
      char v70 = v48 & 1;
      uint64_t v51 = Text.resolveString(in:with:idiom:)();
      uint64_t v53 = v52;
      outlined consume of Text.Storage(v50, v49, v70);
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_retain();
      swift_retain();
      uint64_t v51 = 0;
      uint64_t v53 = 0;
    }
    uint64_t v55 = v0[9];
    uint64_t v54 = v0[10];
    long long v56 = (uint64_t *)(v0[8] + *(int *)(v0[7] + 20));
    *long long v56 = v51;
    v56[1] = v53;
    long long v57 = (uint64_t *)(v54 + *(int *)(v55 + 28));
    uint64_t v58 = v0[10];
    if (v57[3])
    {
      uint64_t v59 = v57[1];
      uint64_t v60 = *v57;
      char v61 = v57[2] & 1;
      outlined copy of Text.Storage(*v57, v59, v61);
      swift_bridgeObjectRetain();
      uint64_t v68 = Text.resolveString(in:with:idiom:)();
      uint64_t v63 = v62;
      outlined consume of Text.Storage(v60, v59, v61);
      swift_bridgeObjectRelease();
      outlined destroy of FileImportExportBridge.Presentation(v58, type metadata accessor for FileImportOperation);
      swift_release();
      swift_release();
    }
    else
    {
      outlined destroy of FileImportExportBridge.Presentation(v0[10], type metadata accessor for FileImportOperation);
      swift_release();
      swift_release();
      uint64_t v68 = 0;
      uint64_t v63 = 0;
    }
    uint64_t v64 = v0[14];
    uint64_t v65 = v0[11];
    uint64_t v66 = v0[8];
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    *long long v69 = v68;
    v69[1] = v63;
    FileImportExportBridge.presentImportPicker(operation:)(v66);
    outlined destroy of FileImportExportBridge.Presentation(v66, type metadata accessor for FileImportOperation.Resolved);
    outlined destroy of FileImportExportBridge.Presentation(v65, type metadata accessor for FileImportOperation);
    uint64_t v23 = type metadata accessor for FileImportExportBridge.Presentation;
    uint64_t v24 = v64;
LABEL_25:
    outlined destroy of FileImportExportBridge.Presentation(v24, v23);
    goto LABEL_26;
  }
  uint64_t v13 = v0[3];
  outlined init with take of FileImportExportBridge.Presentation?(v0[13], v0[6], type metadata accessor for FileExportOperation);
  uint64_t v14 = v13 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
  uint64_t result = MEMORY[0x18C119DF0](v13 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host);
  if (!result)
  {
    __break(1u);
    goto LABEL_30;
  }
  uint64_t v17 = v0[5];
  uint64_t v16 = v0[6];
  uint64_t v18 = v0[4];
  uint64_t v19 = *(void *)(v14 + 8);
  uint64_t v20 = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t))(v19 + 16))(v20, v19);
  swift_unknownObjectRelease();
  GraphHost.environment.getter();
  swift_release();
  outlined init with copy of FileImportExportBridge.PresentationState(v16, v17, type metadata accessor for FileExportOperation);
  FileExportOperation.Resolved.init(base:environment:)(v17, v18);
  uint64_t v21 = (void *)swift_task_alloc();
  v0[19] = v21;
  *uint64_t v21 = v0;
  v21[1] = FileImportExportBridge.apply(_:);
  uint64_t v22 = v0[4];
  return FileImportExportBridge.presentExportPicker(operation:)(v22);
}

{
  uint64_t *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 32);
  swift_task_dealloc();
  outlined destroy of FileImportExportBridge.Presentation(v2, type metadata accessor for FileExportOperation.Resolved);
  uint64_t v3 = *(void *)(v1 + 144);
  uint64_t v4 = *(void *)(v1 + 136);
  return MEMORY[0x1F4188298](FileImportExportBridge.apply(_:), v4, v3);
}

{
  void *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t (*v3)(void);
  uint64_t v5;

  uint64_t v1 = v0[14];
  uint64_t v2 = v0[6];
  swift_release();
  outlined destroy of FileImportExportBridge.Presentation(v2, type metadata accessor for FileExportOperation);
  outlined destroy of FileImportExportBridge.Presentation(v1, type metadata accessor for FileImportExportBridge.Presentation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v3 = (uint64_t (*)(void))v0[1];
  return v3();
}

uint64_t FileImportExportBridge.presentImportPicker(operation:)(uint64_t a1)
{
  type metadata accessor for URL?(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for URL();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  size_t v10 = (int *)type metadata accessor for FileImportOperation(0);
  double v11 = MEMORY[0x1F4188790](v10);
  uint64_t v13 = (char *)&v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
  uint64_t result = MEMORY[0x18C119DF0](v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host, v11);
  if (result)
  {
    uint64_t v16 = *(void *)(v14 + 8);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v18 = (void *)ViewRendererHost.uiViewController.getter(ObjectType, v16);
    uint64_t result = swift_unknownObjectRelease();
    if (v18)
    {
      uint64_t v30 = v1;
      outlined init with copy of FileImportExportBridge.PresentationState(a1, (uint64_t)v13, type metadata accessor for FileImportOperation);
      id v19 = objc_allocWithZone(MEMORY[0x1E4FB16F0]);
      type metadata accessor for UTType();
      swift_bridgeObjectRetain();
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v21 = objc_msgSend(v19, sel_initForOpeningContentTypes_, isa);

      objc_msgSend(v21, sel_setAllowsMultipleSelection_, v13[v10[10]]);
      outlined init with copy of FileImportExportBridge.PresentationState((uint64_t)&v13[v10[5]], (uint64_t)v5, (uint64_t (*)(void))type metadata accessor for URL?);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
      {
        outlined destroy of FileImportExportBridge.Presentation((uint64_t)v5, (uint64_t (*)(void))type metadata accessor for URL?);
      }
      else
      {
        (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
        URL._bridgeToObjectiveC()(v22);
        uint64_t v24 = v23;
        objc_msgSend(v21, sel_setDirectoryURL_, v23);

        (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      }
      uint64_t v25 = v30;
      uint64_t v26 = &v13[v10[13]];
      if ((v26[8] & 1) == 0 && (*v26 & 4) != 0) {
        objc_msgSend(v21, sel_setShouldShowFileExtensions_, 1);
      }
      objc_msgSend(v21, sel_setDelegate_, v25);
      objc_msgSend(v18, sel_presentViewController_animated_completion_, v21, 1, 0);
      uint64_t v27 = (void *)(v25 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
      uint64_t v28 = *(void **)(v25 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
      *uint64_t v27 = v21;
      v27[1] = &protocol witness table for UIDocumentPickerViewController;

      return outlined destroy of FileImportExportBridge.Presentation((uint64_t)v13, type metadata accessor for FileImportOperation);
    }
  }
  else
  {
    __break(1u);
  }
  return result;
}

uint64_t FileImportExportBridge.presentExportPicker(operation:)(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  type metadata accessor for FileExportOperation.Move(0);
  v2[4] = swift_task_alloc();
  v2[5] = type metadata accessor for FileExportOperation.Mode(0);
  v2[6] = swift_task_alloc();
  v2[7] = type metadata accessor for FileExportOperation(0);
  v2[8] = swift_task_alloc();
  type metadata accessor for MainActor();
  v2[9] = static MainActor.shared.getter();
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter();
  v2[10] = v4;
  v2[11] = v3;
  return MEMORY[0x1F4188298](FileImportExportBridge.presentExportPicker(operation:), v4, v3);
}

uint64_t FileImportExportBridge.presentExportPicker(operation:)()
{
  uint64_t v1 = *(void *)(v0 + 24) + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_host;
  if (!MEMORY[0x18C119DF0](v1))
  {
    __break(1u);
    JUMPOUT(0x187DE9308);
  }
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v4 = ViewRendererHost.uiViewController.getter(ObjectType, v2);
  *(void *)(v0 + 96) = v4;
  swift_unknownObjectRelease();
  if (v4)
  {
    uint64_t v5 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 48);
    outlined init with copy of FileImportExportBridge.PresentationState(*(void *)(v0 + 16), v5, type metadata accessor for FileExportOperation);
    outlined init with copy of FileImportExportBridge.PresentationState(v5, v6, type metadata accessor for FileExportOperation.Mode);
    switch(swift_getEnumCaseMultiPayload())
    {
      case 1u:
        swift_release();
        id v16 = objc_allocWithZone(MEMORY[0x1E4FB16F0]);
        type metadata accessor for URL();
        swift_bridgeObjectRetain();
        Class isa = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v15 = objc_msgSend(v16, sel_initForExportingURLs_, isa);

        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        goto LABEL_7;
      case 2u:
        outlined consume of FileExportOperation.Storage(**(void **)(v0 + 48), *(void *)(*(void *)(v0 + 48) + 8), *(void *)(*(void *)(v0 + 48) + 16), *(void *)(*(void *)(v0 + 48) + 24), *(unsigned char *)(*(void *)(v0 + 48) + 32));
        goto LABEL_15;
      case 3u:
LABEL_15:
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        swift_bridgeObjectRelease();
        uint64_t v26 = (void *)swift_task_alloc();
        *(void *)(v0 + 104) = v26;
        void *v26 = v0;
        v26[1] = FileImportExportBridge.presentExportPicker(operation:);
        return FileExportOperation.writeTemporaryFilesIfNecessary()();
      default:
        uint64_t v7 = *(void *)(v0 + 48);
        uint64_t v8 = *(void *)(v0 + 32);
        swift_release();
        outlined init with take of FileImportExportBridge.Presentation?(v7, v8, type metadata accessor for FileExportOperation.Move);
        _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for _ContiguousArrayStorage<URL>, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBBE00]);
        uint64_t v9 = type metadata accessor for URL();
        uint64_t v10 = *(void *)(v9 - 8);
        unint64_t v11 = (*(unsigned __int8 *)(v10 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_18834BB80;
        (*(void (**)(unint64_t, uint64_t, uint64_t))(v10 + 16))(v12 + v11, v8, v9);
        id v13 = objc_allocWithZone(MEMORY[0x1E4FB16F0]);
        Class v14 = Array._bridgeToObjectiveC()().super.isa;
        swift_bridgeObjectRelease();
        id v15 = objc_msgSend(v13, sel_initForExportingURLs_, v14);

        outlined destroy of FileImportExportBridge.Presentation(v8, type metadata accessor for FileExportOperation.Move);
LABEL_7:
        uint64_t v18 = *(void *)(v0 + 64);
        id v19 = (unsigned char *)(v18 + *(int *)(*(void *)(v0 + 56) + 48));
        if ((v19[8] & 1) == 0 && (*v19 & 4) != 0)
        {
          objc_msgSend(v15, sel_setShouldShowFileExtensions_, 1);
          uint64_t v18 = *(void *)(v0 + 64);
        }
        uint64_t v20 = *(void **)(v0 + 96);
        uint64_t v21 = *(void *)(v0 + 24);
        objc_msgSend(v15, sel_setDelegate_, v21);
        objc_msgSend(v20, sel_presentViewController_animated_completion_, v15, 1, 0);
        uint64_t v22 = (void *)(v21 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
        uint64_t v23 = *(void **)(v21 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
        *uint64_t v22 = v15;
        v22[1] = &protocol witness table for UIDocumentPickerViewController;

        outlined destroy of FileImportExportBridge.Presentation(v18, type metadata accessor for FileExportOperation);
        goto LABEL_11;
    }
  }
  swift_release();
LABEL_11:
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  return v24();
}

{
  uint64_t v0;
  char v1;
  void *v2;
  void *v3;
  id v4;
  Class isa;
  id v6;
  uint64_t v7;
  unsigned char *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  void *v16;
  char v17;
  void *v18;
  void *v19;
  unsigned char *v20;
  uint64_t (*v21)(void);
  uint64_t v23;

  uint64_t v1 = *(unsigned char *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 112);
  swift_release();
  if (v1)
  {
    id v13 = *(void **)(v0 + 112);
    Class v14 = *(void **)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 64);
    id v15 = v2;
    FileExportOperation.didFinish(with:)(v13, 1);

    outlined consume of Result<[URL], Error>(v13, 1);
    id v16 = v13;
    uint64_t v17 = 1;
LABEL_9:
    outlined consume of Result<[URL], Error>(v16, v17);
    goto LABEL_10;
  }
  uint64_t v3 = *(void **)(v0 + 112);
  if (!v2[2])
  {
    uint64_t v18 = *(void **)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 64);
    lazy protocol witness table accessor for type FileExportOperation.Error and conformance FileExportOperation.Error();
    id v19 = (void *)swift_allocError();
    *uint64_t v20 = 0;
    FileExportOperation.didFinish(with:)(v19, 1);

    id v16 = v3;
    uint64_t v17 = 0;
    goto LABEL_9;
  }
  uint64_t v4 = objc_allocWithZone(MEMORY[0x1E4FB16F0]);
  type metadata accessor for URL();
  swift_bridgeObjectRetain();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  outlined consume of Result<[URL], Error>(v3, 0);
  uint64_t v6 = objc_msgSend(v4, sel_initForExportingURLs_, isa);

  outlined consume of Result<[URL], Error>(v3, 0);
  uint64_t v7 = *(void *)(v0 + 64);
  uint64_t v8 = (unsigned char *)(v7 + *(int *)(*(void *)(v0 + 56) + 48));
  if ((v8[8] & 1) == 0 && (*v8 & 4) != 0)
  {
    objc_msgSend(v6, sel_setShouldShowFileExtensions_, 1);
    uint64_t v7 = *(void *)(v0 + 64);
  }
  uint64_t v9 = *(void **)(v0 + 96);
  uint64_t v10 = *(void *)(v0 + 24);
  objc_msgSend(v6, sel_setDelegate_, v10);
  objc_msgSend(v9, sel_presentViewController_animated_completion_, v6, 1, 0);
  unint64_t v11 = (void *)(v10 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  uint64_t v12 = *(void **)(v10 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  *unint64_t v11 = v6;
  v11[1] = &protocol witness table for UIDocumentPickerViewController;

LABEL_10:
  outlined destroy of FileImportExportBridge.Presentation(v7, type metadata accessor for FileExportOperation);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  uint64_t v21 = *(uint64_t (**)(void))(v0 + 8);
  return v21();
}

uint64_t FileImportExportBridge.presentExportPicker(operation:)(uint64_t a1, char a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *v2;
  *(void *)(v4 + 112) = a1;
  *(unsigned char *)(v4 + 120) = a2;
  swift_task_dealloc();
  uint64_t v5 = *(void *)(v3 + 88);
  uint64_t v6 = *(void *)(v3 + 80);
  return MEMORY[0x1F4188298](FileImportExportBridge.presentExportPicker(operation:), v6, v5);
}

Swift::Void __swiftcall FileImportExportBridge.documentPicker(_:didPickDocumentsAt:)(UIDocumentPickerViewController *_, Swift::OpaquePointer didPickDocumentsAt)
{
  uint64_t v5 = type metadata accessor for FileExportOperation(0);
  MEMORY[0x1F4188790](v5 - 8);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v8 = type metadata accessor for FileImportOperation(0);
  MEMORY[0x1F4188790](v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  MEMORY[0x1F4188790](v11 - 8);
  id v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v14 = type metadata accessor for FileImportExportBridge.PresentationState(0);
  MEMORY[0x1F4188790](v14 - 8);
  id v16 = (char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v17 = v2 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
  uint64_t v18 = *(UIDocumentPickerViewController **)(v2 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  if (v18) {
    BOOL v19 = v18 == _;
  }
  else {
    BOOL v19 = 0;
  }
  if (v19)
  {
    uint64_t v20 = v2 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentationState;
    swift_beginAccess();
    outlined init with copy of FileImportExportBridge.PresentationState(v20, (uint64_t)v16, type metadata accessor for FileImportExportBridge.PresentationState);
    outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v16, (uint64_t)v13, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
    uint64_t v21 = type metadata accessor for FileImportExportBridge.Presentation(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v21 - 8) + 48))(v13, 1, v21) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v13, (uint64_t)v7, type metadata accessor for FileExportOperation);
        FileExportOperation.didFinish(with:)(didPickDocumentsAt._rawValue, 0);
        uint64_t v22 = type metadata accessor for FileExportOperation;
        uint64_t v23 = (uint64_t)v7;
      }
      else
      {
        outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v13, (uint64_t)v10, type metadata accessor for FileImportOperation);
        (*(void (**)(void *, void))&v10[*(int *)(v8 + 56)])(didPickDocumentsAt._rawValue, 0);
        uint64_t v22 = type metadata accessor for FileImportOperation;
        uint64_t v23 = (uint64_t)v10;
      }
      outlined destroy of FileImportExportBridge.Presentation(v23, v22);
    }
    uint64_t v24 = *(void **)v17;
    *(void *)uint64_t v17 = 0;
    *(void *)(v17 + 8) = 0;
  }
}

Swift::Void __swiftcall FileImportExportBridge.documentPickerWasCancelled(_:)(UIDocumentPickerViewController *a1)
{
  uint64_t v3 = type metadata accessor for FileExportOperation(0);
  MEMORY[0x1F4188790](v3 - 8);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v6 = type metadata accessor for FileImportOperation(0);
  MEMORY[0x1F4188790](v6);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for FileImportExportBridge.Presentation?(0);
  MEMORY[0x1F4188790](v9 - 8);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = type metadata accessor for FileImportExportBridge.PresentationState(0);
  MEMORY[0x1F4188790](v12 - 8);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker;
  id v16 = *(UIDocumentPickerViewController **)(v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentedPicker);
  if (v16) {
    BOOL v17 = v16 == a1;
  }
  else {
    BOOL v17 = 0;
  }
  if (v17)
  {
    uint64_t v18 = v1 + OBJC_IVAR____TtC7SwiftUI22FileImportExportBridge_presentationState;
    swift_beginAccess();
    outlined init with copy of FileImportExportBridge.PresentationState(v18, (uint64_t)v14, type metadata accessor for FileImportExportBridge.PresentationState);
    outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v14, (uint64_t)v11, (uint64_t (*)(void))type metadata accessor for FileImportExportBridge.Presentation?);
    uint64_t v19 = type metadata accessor for FileImportExportBridge.Presentation(0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v19 - 8) + 48))(v11, 1, v19) != 1)
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v11, (uint64_t)v5, type metadata accessor for FileExportOperation);
        FileExportOperation.didCancel()();
        uint64_t v20 = type metadata accessor for FileExportOperation;
        uint64_t v21 = (uint64_t)v5;
      }
      else
      {
        uint64_t v22 = outlined init with take of FileImportExportBridge.Presentation?((uint64_t)v11, (uint64_t)v8, type metadata accessor for FileImportOperation);
        (*(void (**)(uint64_t))&v8[*(int *)(v6 + 60)])(v22);
        uint64_t v20 = type metadata accessor for FileImportOperation;
        uint64_t v21 = (uint64_t)v8;
      }
      outlined destroy of FileImportExportBridge.Presentation(v21, v20);
    }
    uint64_t v23 = *(void **)v15;
    *(void *)uint64_t v15 = 0;
    *(void *)(v15 + 8) = 0;
  }
}

id protocol witness for PlatformFilePicker.dismiss() in conformance UIDocumentPickerViewController()
{
  return objc_msgSend(v0, sel_dismissViewControllerAnimated_completion_, 1, 0);
}

uint64_t ObjC metadata update function for FileImportExportBridge()
{
  return type metadata accessor for FileImportExportBridge(0);
}

uint64_t *initializeBufferWithCopyOfBuffer for FileImportExportBridge.PresentationState(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v7 = type metadata accessor for FileImportExportBridge.Presentation(0);
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      type metadata accessor for FileImportExportBridge.Presentation?(0);
      memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    }
    else
    {
      uint64_t v128 = v8;
      uint64_t v129 = v7;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        type metadata accessor for FileExportOperation.Mode(0);
        switch(swift_getEnumCaseMultiPayload())
        {
          case 1u:
            uint64_t v69 = a2[4];
            long long v70 = *((_OWORD *)a2 + 1);
            *(_OWORD *)a1 = *(_OWORD *)a2;
            *((_OWORD *)a1 + 1) = v70;
            a1[4] = v69;
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          case 2u:
            uint64_t v71 = *a2;
            uint64_t v72 = a2[1];
            uint64_t v73 = a2[2];
            uint64_t v74 = a2[3];
            char v75 = *((unsigned char *)a2 + 32);
            outlined copy of FileExportOperation.Storage(*a2, v72, v73, v74, v75);
            *a1 = v71;
            a1[1] = v72;
            a1[2] = v73;
            a1[3] = v74;
            *((unsigned char *)a1 + 32) = v75;
            uint64_t v76 = a2[6];
            a1[5] = a2[5];
            a1[6] = v76;
            *(_OWORD *)(a1 + 7) = *(_OWORD *)(a2 + 7);
            uint64_t v77 = a2[11];
            *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
            a1[11] = v77;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          case 3u:
            char v78 = *((unsigned char *)a2 + 8);
            *a1 = *a2;
            *((unsigned char *)a1 + 8) = v78;
            uint64_t v79 = a2[6];
            *(_OWORD *)__dstc = *((_OWORD *)a2 + 2);
            *((_OWORD *)a1 + 1) = *((_OWORD *)a2 + 1);
            *((_OWORD *)a1 + 2) = *(_OWORD *)__dstc;
            a1[6] = v79;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_retain();
            swift_retain();
            break;
          default:
            uint64_t v11 = type metadata accessor for URL();
            (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v11 - 8) + 16))(a1, a2, v11);
            uint64_t v12 = type metadata accessor for FileExportOperation.Move(0);
            uint64_t v13 = *(int *)(v12 + 20);
            uint64_t v14 = (uint64_t *)((char *)a1 + v13);
            uint64_t v15 = (uint64_t *)((char *)a2 + v13);
            uint64_t v17 = *v15;
            uint64_t v16 = v15[1];
            *uint64_t v14 = v17;
            v14[1] = v16;
            uint64_t v18 = *(int *)(v12 + 24);
            uint64_t v19 = (uint64_t *)((char *)a1 + v18);
            uint64_t v20 = (uint64_t *)((char *)a2 + v18);
            uint64_t v21 = v20[1];
            void *v19 = *v20;
            v19[1] = v21;
            swift_retain();
            swift_retain();
            break;
        }
        swift_storeEnumTagMultiPayload();
        long long v80 = (int *)type metadata accessor for FileExportOperation(0);
        uint64_t v81 = v80[5];
        long long v82 = (uint64_t *)((char *)a1 + v81);
        long long v83 = (uint64_t *)((char *)a2 + v81);
        uint64_t v84 = v83[1];
        *long long v82 = *v83;
        v82[1] = v84;
        uint64_t v85 = v80[6];
        __dstb = (char *)a1 + v85;
        uint64_t v86 = (char *)a2 + v85;
        uint64_t v87 = type metadata accessor for URL();
        uint64_t v88 = *(void *)(v87 - 8);
        uint64_t v89 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v88 + 48);
        swift_bridgeObjectRetain();
        if (v89(v86, 1, v87))
        {
          type metadata accessor for URL?(0);
          memcpy(__dstb, v86, *(void *)(*(void *)(v90 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v88 + 16))(__dstb, v86, v87);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v88 + 56))(__dstb, 0, 1, v87);
        }
        uint64_t v91 = v80[7];
        long long v92 = (char *)a1 + v91;
        uint64_t v93 = (char *)a2 + v91;
        if (*(uint64_t *)((char *)a2 + v91 + 24))
        {
          uint64_t v94 = *(void *)v93;
          uint64_t v95 = *((void *)v93 + 1);
          char v96 = v93[16];
          outlined copy of Text.Storage(*(void *)v93, v95, v96);
          *(void *)long long v92 = v94;
          *((void *)v92 + 1) = v95;
          v92[16] = v96;
          *((void *)v92 + 3) = *((void *)v93 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v97 = *((_OWORD *)v93 + 1);
          *(_OWORD *)long long v92 = *(_OWORD *)v93;
          *((_OWORD *)v92 + 1) = v97;
        }
        uint64_t v98 = v80[8];
        uint64_t v99 = (char *)a1 + v98;
        uint64_t v100 = (char *)a2 + v98;
        if (*(uint64_t *)((char *)a2 + v98 + 24))
        {
          uint64_t v101 = *(void *)v100;
          uint64_t v102 = *((void *)v100 + 1);
          char v103 = v100[16];
          outlined copy of Text.Storage(*(void *)v100, v102, v103);
          *(void *)uint64_t v99 = v101;
          *((void *)v99 + 1) = v102;
          v99[16] = v103;
          *((void *)v99 + 3) = *((void *)v100 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v104 = *((_OWORD *)v100 + 1);
          *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
          *((_OWORD *)v99 + 1) = v104;
        }
        uint64_t v105 = v80[9];
        long long v106 = (char *)a1 + v105;
        uint64_t v107 = (char *)a2 + v105;
        if (*(uint64_t *)((char *)a2 + v105 + 24))
        {
          uint64_t v108 = *(void *)v107;
          uint64_t v109 = *((void *)v107 + 1);
          char v110 = v107[16];
          outlined copy of Text.Storage(*(void *)v107, v109, v110);
          *(void *)long long v106 = v108;
          *((void *)v106 + 1) = v109;
          v106[16] = v110;
          *((void *)v106 + 3) = *((void *)v107 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v111 = *((_OWORD *)v107 + 1);
          *(_OWORD *)long long v106 = *(_OWORD *)v107;
          *((_OWORD *)v106 + 1) = v111;
        }
        uint64_t v112 = v80[10];
        long long v113 = (char *)a1 + v112;
        uint64_t v114 = (char *)a2 + v112;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v116 = v115;
        uint64_t v117 = *(void *)(v115 - 8);
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v117 + 48))(v114, 1, v115))
        {
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(v113, v114, *(void *)(*(void *)(v118 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v117 + 16))(v113, v114, v116);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v117 + 56))(v113, 0, 1, v116);
        }
        *((unsigned char *)a1 + v80[11]) = *((unsigned char *)a2 + v80[11]);
        uint64_t v119 = v80[12];
        uint64_t v120 = (char *)a1 + v119;
        uint64_t v121 = (char *)a2 + v119;
        *(void *)uint64_t v120 = *(void *)v121;
        v120[8] = v121[8];
      }
      else
      {
        uint64_t v22 = a2[1];
        *a1 = *a2;
        a1[1] = v22;
        uint64_t v23 = (int *)type metadata accessor for FileImportOperation(0);
        uint64_t v24 = v23[5];
        __dst = (char *)a1 + v24;
        uint64_t v25 = (char *)a2 + v24;
        uint64_t v26 = type metadata accessor for URL();
        uint64_t v27 = *(void *)(v26 - 8);
        uint64_t v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
        swift_bridgeObjectRetain();
        if (v28(v25, 1, v26))
        {
          type metadata accessor for URL?(0);
          memcpy(__dst, v25, *(void *)(*(void *)(v29 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0, 1, v26);
        }
        uint64_t v30 = v23[6];
        id v31 = (char *)a1 + v30;
        long long v32 = (char *)a2 + v30;
        if (*(uint64_t *)((char *)a2 + v30 + 24))
        {
          uint64_t v33 = *(void *)v32;
          uint64_t v34 = *((void *)v32 + 1);
          char v35 = v32[16];
          outlined copy of Text.Storage(*(void *)v32, v34, v35);
          *(void *)id v31 = v33;
          *((void *)v31 + 1) = v34;
          v31[16] = v35;
          *((void *)v31 + 3) = *((void *)v32 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v36 = *((_OWORD *)v32 + 1);
          *(_OWORD *)id v31 = *(_OWORD *)v32;
          *((_OWORD *)v31 + 1) = v36;
        }
        uint64_t v37 = v23[7];
        uint64_t v38 = (char *)a1 + v37;
        uint64_t v39 = (char *)a2 + v37;
        if (*(uint64_t *)((char *)a2 + v37 + 24))
        {
          uint64_t v40 = *(void *)v39;
          uint64_t v41 = *((void *)v39 + 1);
          char v42 = v39[16];
          outlined copy of Text.Storage(*(void *)v39, v41, v42);
          *(void *)uint64_t v38 = v40;
          *((void *)v38 + 1) = v41;
          v38[16] = v42;
          *((void *)v38 + 3) = *((void *)v39 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v43 = *((_OWORD *)v39 + 1);
          *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
          *((_OWORD *)v38 + 1) = v43;
        }
        uint64_t v44 = v23[8];
        long long v45 = (char *)a1 + v44;
        long long v46 = (char *)a2 + v44;
        if (*(uint64_t *)((char *)a2 + v44 + 24))
        {
          uint64_t v47 = *(void *)v46;
          uint64_t v48 = *((void *)v46 + 1);
          char v49 = v46[16];
          outlined copy of Text.Storage(*(void *)v46, v48, v49);
          *(void *)long long v45 = v47;
          *((void *)v45 + 1) = v48;
          v45[16] = v49;
          *((void *)v45 + 3) = *((void *)v46 + 3);
          swift_bridgeObjectRetain();
        }
        else
        {
          long long v50 = *((_OWORD *)v46 + 1);
          *(_OWORD *)long long v45 = *(_OWORD *)v46;
          *((_OWORD *)v45 + 1) = v50;
        }
        *(uint64_t *)((char *)a1 + v23[9]) = *(uint64_t *)((char *)a2 + v23[9]);
        *((unsigned char *)a1 + v23[10]) = *((unsigned char *)a2 + v23[10]);
        uint64_t v51 = v23[11];
        __dsta = (char *)a1 + v51;
        uint64_t v52 = (char *)a2 + v51;
        type metadata accessor for Predicate<Pack{URL}>();
        uint64_t v54 = v53;
        uint64_t v55 = *(void *)(v53 - 8);
        long long v56 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48);
        swift_bridgeObjectRetain();
        if (v56(v52, 1, v54))
        {
          _s10Foundation3URLVSgMaTm_5(0, &lazy cache variable for type metadata for Predicate<Pack{URL}>?, (uint64_t (*)(uint64_t))type metadata accessor for Predicate<Pack{URL}>, MEMORY[0x1E4FBB718]);
          memcpy(__dsta, v52, *(void *)(*(void *)(v57 - 8) + 64));
        }
        else
        {
          (*(void (**)(char *, char *, uint64_t))(v55 + 16))(__dsta, v52, v54);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v55 + 56))(__dsta, 0, 1, v54);
        }
        uint64_t v7 = v129;
        *((unsigned char *)a1 + v23[12]) = *((unsigned char *)a2 + v23[12]);
        uint64_t v58 = v23[13];
        uint64_t v59 = (char *)a1 + v58;
        uint64_t v60 = (char *)a2 + v58;
        *(void *)uint64_t v59 = *(void *)v60;
        v59[8] = v60[8];
        uint64_t v61 = v23[14];
        uint64_t v62 = (uint64_t *)((char *)a1 + v61);
        uint64_t v63 = (uint64_t *)((char *)a2 + v61);
        uint64_t v64 = v63[1];
        *uint64_t v62 = *v63;
        v62[1] = v64;
        uint64_t v65 = v23[15];
        uint64_t v66 = (uint64_t *)((char *)a1 + v65);
        long long v67 = (uint64_t *)((char *)a2 + v65);
        uint64_t v68 = v67[1];
        *uint64_t v66 = *v67;
        v66[1] = v68;
        swift_retain();
        swift_retain();
      }
      swift_storeEnumTagMultiPayload();
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v128 + 56))(a1, 0, 1, v7);
    }
    uint64_t v122 = *(int *)(a3 + 24);
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 20));
    *(_DWORD *)((char *)a1 + v122) = *(_DWORD *)((char *)a2 + v122);
  }
  return a1;
}